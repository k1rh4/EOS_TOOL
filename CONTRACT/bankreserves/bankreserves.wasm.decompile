(data (i32.const 8192) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8256) "retrieve\00")
(data (i32.const 8265) "withdraw\00")
(data (i32.const 8274) "eosio.token\00")
(data (i32.const 8286) "transfer\00")
(data (i32.const 8295) "charge\00")
(data (i32.const 8302) "cpubankstake\00")
(data (i32.const 8315) "bankagentsf1\00")
(data (i32.const 8328) "bankagentsf2\00")
(data (i32.const 8341) "bankagentsf3\00")
(data (i32.const 8354) "invalid from account\00")
(data (i32.const 8375) "for renting\00")
(data (i32.const 8387) "delegatebw\00")
(data (i32.const 8398) "undelegatebw\00")
(data (i32.const 8411) "Should only rent resources for 1-30 days\00")
(data (i32.const 8452) "Should only rent CPU or NET\00")
(data (i32.const 8480) "Rent amount must be positive\00")
(data (i32.const 8509) "Not enough EOS\00")
(data (i32.const 8524) "auth failed\00")
(data (i32.const 8536) "bankreserves\00")
(data (i32.const 8549) "oracledappub\00")
(data (i32.const 8562) "contract should not be eosio.token\00")
(data (i32.const 8597) "for airdrop\00")
(data (i32.const 8609) "voteproducer\00")
(data (i32.const 8622) "unstaketorex\00")
(data (i32.const 8640) "`\0c\ceS1\03\a79p\0c\ceS1\03\a79\80\0c\ceS1\03\a79\90\0c\ceS1\03\a79\a0\0c\ceS1\03\a79\b0\0c\ceS1\03\a79\c0\0c\ceS1\03\a79\d0\0c\ceS1\03\a79\e0\0c\ceS1\03\a79\f0\0c\ceS1\03\a79\00\0d\ceS1\03\a79\10\0d\ceS1\03\a79 \0d\ceS1\03\a790\0d\ceS1\03\a79@\0d\ceS1\03\a79P\0d\ceS1\03\a79`\0d\ceS1\03\a79p\0d\ceS1\03\a79\80\0d\ceS1\03\a79\90\0d\ceS1\03\a79\a0\0d\ceS1\03\a79\b0\0d\ceS1\03\a79\c0\0d\ceS1\03\a79\d0\0d\ceS1\03\a79\e0\0d\ceS1\03\a79\f0\0d\ceS1\03\a79\10\0c\ceS1\03\a79 \0c\ceS1\03\a790\0c\ceS1\03\a79@\0c\ceS1\03\a79P\0c\ceS1\03\a79")
(data (i32.const 8888) "write\00")
(data (i32.const 8894) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8945) "error reading iterator\00")
(data (i32.const 8968) "read\00")
(data (i32.const 8973) "cannot create objects in table of another contract\00")
(data (i32.const 9024) "cannot pass end iterator to modify\00")
(data (i32.const 9059) "object passed to modify is not in multi_index\00")
(data (i32.const 9105) "cannot modify objects in table of another contract\00")
(data (i32.const 9156) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9215) "attempt to subtract asset with different symbol\00")
(data (i32.const 9263) "subtraction underflow\00")
(data (i32.const 9285) "subtraction overflow\00")
(data (i32.const 9306) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9365) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9414) "invalid symbol name\00")
(data (i32.const 9434) "attempt to add asset with different symbol\00")
(data (i32.const 9477) "addition underflow\00")
(data (i32.const 9496) "addition overflow\00")
(data (i32.const 9514) "get\00")
(data (i32.const 9518) "cannot increment end iterator\00")
(data (i32.const 17956) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "current_time" (func $fimport$0 (result i64)))
(import "env" "require_auth2" (func $fimport$1 (param i64 i64)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$4 (result i32)))
(import "env" "read_action_data" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "send_inline" (func $fimport$7 (param i32 i32)))
(import "env" "send_deferred" (func $fimport$8 (param i32 i64 i32 i32 i32)))
(import "env" "db_find_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "has_auth" (func $fimport$10 (param i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$13 (result i64)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$16 (param i32 i64 i32 i32)))
(import "env" "abort" (func $fimport$17))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$30 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$31 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$34 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$36 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$37 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$38 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $77))
(export "_Znwj" (func $75))
(export "_Znaj" (func $76))
(export "_ZdaPv" (func $78))
(table $0 14 14 anyfunc)
(elem (i32.const 1) $2 $4 $6 $8 $10 $12 $14 $15 $17 $19 $20 $21 $22)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18042))
(global $global$2 i32 (i32.const 18042))


void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8888])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8888])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8888])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [8888])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8888])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [8888])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8888])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8888])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8888])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [8888])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $67(*($1), ($0 + [32]))
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8945])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $85($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $88($4)
	
.LABEL $label$6
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$5 = CALL _Znwj([32])
	$4 = CALL $61($5, $0, ($3 + [8]))
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $6)
	$2 = *($5 + [20])
	*($3 + [4]) = $2
	$7 = ($0 + [28])
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($1 + [8]) = $6
	*($1 + [16]) = $2
	*($3 + [24]) = [0]
	*($1) = $5
	*($7) = ($1 + [24])
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $62(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($5)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $4
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8945])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $85($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $88($4)
	
.LABEL $label$6
	$5 = CALL _Znwj([64])
	$4 = CALL $69($5)
	*($5 + [48]) = $0
	CALL $70(($3 + [32]), $4)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5 + [8])
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $71(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $24(($7 + [28]), [33])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $68(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL eosio_assert([1], [9365])
	$3 = [0]
	$4 = (int_64)5459781
	$5 = (int_64)1397703940
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9414])
	$4 = (int_64)0
	$9 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($1 + [296]), *(($1 + [304])), (int_64)-5001342331490271232, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL $46(($1 + [296]), $3)
	$9 = *($3 + [8])
	$5 = *(($3 + [16]))
	
.LABEL $label$6
	$10 = *($1)
	$11 = (int_64)59
	$3 = [8274]
	$12 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$12 }
	$7 = *($3)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$7 = ($7 + [-91])
	goto $label$10 
	
.LABEL $label$12
	$6 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$8
	$3 = ($3 + [1])
	$11 = ((int_64)$11 + (int_64)4294967291)
	$12 = ((int_64)$6 | (int_64)$12)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$7 }
	CALL $35(($2 + [16]), $1, $10, $12, (int_64)5459781)
	$4 = (int_64)0
	$11 = (int_64)59
	$3 = [8274]
	$12 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$18 }
	$7 = *($3)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$7 = ($7 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$6 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$14
	$3 = ($3 + [1])
	$11 = ((int_64)$11 + (int_64)4294967291)
	$12 = ((int_64)$6 | (int_64)$12)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$13 }
	CALL $35($2, $1, (int_64)4154293930757629584, $12, (int_64)5459781)
	$6 = *($2 + [16])
	$4 = *($2 + [24])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$4), [9434])
	$6 = ((int_64)$6 + (int_64)*($2))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9477])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9496])
	*($0 + [8]) = $4
	CALL eosio_assert(((int_64)$5 == (int_64)$4), [9215])
	$4 = (int_64)
	*($0) = $4($6 - $9))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9263])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [9285])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$6 = CALL _Znwj([16])
	*($0 + [16]) = $6
	*(($7 = ($0 + [20]))) = $6
	$8 = ($6 + [16])
	*($5) = $8
	*(($6 + [8])) = *(($1 + [8]))
	*($6) = *($1)
	*($7) = $8
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	CALL $24(($0 + [28]), [24])
	$6 = *($0 + [28])
	$1 = (*(($0 + [32])) - $6)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [8888])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [8888])
	CALL memcpy(($6 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [8888])
	CALL memcpy(($6 + [16]), ($4 + [16]), [8])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8945])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $85($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $88($4)
	
.LABEL $label$6
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$5 = CALL _Znwj([40])
	$4 = CALL $63($5, $0, ($3 + [8]))
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [8]) = $6
	$2 = *($5 + [28])
	*($3 + [4]) = $2
	$7 = ($0 + [28])
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($1 + [8]) = $6
	*($1 + [16]) = $2
	*($3 + [24]) = [0]
	*($1) = $5
	*($7) = ($1 + [24])
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $64(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($5)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $80($2, ($1 + [8]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$4 = CALL $80(($2 + [16]), $1)
	CALL void $5((int_32 $3), (int_64 $4), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $66($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $81($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $81($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $79($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = [1]
	if ( CALL has_auth(*($0)) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = (int_64)59
	$6 = [8302]
	$9 = (int_64)0
	
.LOOP $label$2:
	$10 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$3 }
	$11 = *($6)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$11 = ($11 + [-91])
	goto $label$4 
	
.LABEL $label$5
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$3
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$2 }
	$6 = CALL has_auth($9)
	
.LABEL $label$1
	CALL eosio_assert($6, [8524])
	CALL eosio_assert([1], [9365])
	$7 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$10 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$11 = [0]
	
.LABEL $label$6
	CALL eosio_assert($11, [9414])
	CALL eosio_assert([1], [9365])
	$7 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$7 = $8
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$7 = $8
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$15 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$11 = [0]
	
.LABEL $label$11
	CALL eosio_assert($11, [9414])
	$7 = *($2 + [8])
	$13 = ( (int_64)1397703940 ? $7 : $4 )
	$14 = ( $7 ? (int_64)1397703940 : $4 )
	$7 = *($2)
	$15 = ( (int_64)0 ? $7 : $4 )
	$16 = ( $7 ? (int_64)0 : $4 )
	$7 = (int_64)6
	
.LOOP $label$16:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$16 }
	$7 = (int_64)5
	
.LOOP $label$17:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$17 }
	$7 = (int_64)0
	$8 = (int_64)59
	$6 = [8398]
	$9 = (int_64)0
	
.LOOP $label$18:
	$10 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$19 }
	$11 = *($6)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$11 = ($11 + [-91])
	goto $label$20 
	
.LABEL $label$21
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$19
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$18 }
	*((($5 + [8]) + [24])) = $14
	*(($5 + [48])) = $13
	*($5 + [16]) = $1
	*($5 + [8]) = $3
	*($5 + [24]) = $16
	*($5 + [40]) = $15
	*($5 + [56]) = (int_64)6138663577826885632
	*($5 + [64]) = $9
	*(($6 = CALL _Znwj([16]))) = $3
	*($6 + [8]) = (int_64)3617214756542218240
	*(($5 + [92])) = [0]
	$11 = ($6 + [16])
	*((($5 + [56]) + [24])) = $11
	*(($5 + [76])) = $11
	*($5 + [72]) = $6
	*($5 + [84 align=4]) = (int_64)0
	CALL $24(($5 + [84]), [48])
	$6 = *(($5 + [88]))
	$11 = *($5 + [84])
	*($5 + [100]) = $11
	*($5 + [96]) = $11
	*($5 + [104]) = $6
	*($5 + [112]) = ($5 + [96])
	*($5 + [120]) = ($5 + [8])
	CALL $38(($5 + [120]), ($5 + [112]))
	CALL $25(($5 + [96]), ($5 + [56]))
	$6 = *($5 + [96])
	CALL send_inline($6, (*($5 + [100]) - $6))
	$6 = *($5 + [96])
	if ( ($6 == 0) ){ goto $label$22 }
	*($5 + [100]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$22
	$6 = *($5 + [84])
	if ( ($6 == 0) ){ goto $label$23 }
	*(($5 + [88])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$23
	$6 = *($5 + [72])
	if ( ($6 == 0) ){ goto $label$24 }
	*(($5 + [76])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$24
	CALL $12($0)
	$global$0 = ($5 + [128])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $85($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1397703940
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [9365])
	$8 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$8 = $9
	$2 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$8 = $9
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [9414])
	*($3 + [56]) = [0]
	*($3 + [48]) = (int_64)0
	*($3 + [100]) = $6
	*($3 + [96]) = $6
	*($3 + [104]) = ($6 + $7)
	*($3 + [64]) = ($3 + [96])
	*($3 + [80]) = ($3 + [24])
	CALL $37(($3 + [80]), ($3 + [64]))
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $88($6)
	
.LABEL $label$9
	*(($1 = (($3 + [64]) + [8]))) = *(($3 + [40]))
	*($3 + [64]) = *($3 + [32])
	$8 = *(($3 + [48]))
	$2 = *(($3 + [56]))
	$9 = *($3 + [24])
	*((($3 + [80]) + [8])) = *($1)
	*($3 + [80]) = *($3 + [64])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$10 }
	$5 = *((*($1) + $5))
	
.LABEL $label$10
	$11 = *((($3 + [80]) + [8]))
	*((($3 + [96]) + [8])) = $11
	*((($3 + [8]) + [8])) = $11
	$11 = *($3 + [80])
	*($3 + [8]) = $11
	*($3 + [96]) = $11
	CALL void $1((int_32 $9), (int_64 ($3 + [8])), (int_32 $8), (int_64 int_32(($2 << [24]) >> [24])), (int_32 $5))
	$global$0 = ($3 + [112])
	return [1]
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8302]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	$4 = (int_64)6
	
.LOOP $label$5:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$5 }
	$4 = (int_64)5
	
.LOOP $label$6:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$6 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8609]
	$7 = (int_64)0
	
.LOOP $label$7:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$8 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$9 = ($9 + [-91])
	goto $label$9 
	
.LABEL $label$10
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$7 }
	*((($3 + [8]) + [24])) = [0]
	*($3 + [16]) = $2
	*($3 + [8]) = $1
	*($3 + [24]) = (int_64)0
	*($3 + [40]) = (int_64)6138663577826885632
	*($3 + [48]) = $7
	*(($6 = CALL _Znwj([16]))) = $1
	*($6 + [8]) = (int_64)3617214756542218240
	*(($3 + [76])) = [0]
	$9 = ($6 + [16])
	*((($3 + [40]) + [24])) = $9
	*((($3 + [40]) + [20])) = $9
	*($3 + [56]) = $6
	*($3 + [68 align=4]) = (int_64)0
	CALL $24(($3 + [68]), [17])
	$6 = *($3 + [68])
	$10 = *(($3 + [72]))
	$9 = ($10 - $6)
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [8888])
	CALL memcpy($6, ($3 + [8]), [8])
	CALL eosio_assert(((int_32)($9 + [-8]) > (int_32)[7]), [8888])
	CALL memcpy(($6 + [8]), (($3 + [8]) + [8]), [8])
	$6 = ($6 + [16])
	$4 = (CASTING uint_64)(uint_32 int_32((*((($3 + [8]) + [20])) - *($3 + [24])) >> [3]))
	
.LOOP $label$11:
	$9 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$11 = ((int_64)$4) != (int_64)0
	*($3 + [80]) = (($11) << [7]) | ($9 & [127]))
	CALL eosio_assert(((int_32)($10 - $6) > (int_32)[0]), [8888])
	CALL memcpy($6, ($3 + [80]), [1])
	$6 = ($6 + [1])
	if ( $11 ){ goto $label$11 }
	$9 = *(($3 + [28]))
	$12 = *(($3 + [24]))
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$12 }
	$13 = ($9 - $12)
	$9 = [0]
	
.LOOP $label$13:
	$11 = ($6 + $9)
	CALL eosio_assert(((int_32)($10 - $11) > (int_32)[7]), [8888])
	CALL memcpy($11, ($12 + $9), [8])
	$9 = ($9 + [8])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$13 }
	
.LABEL $label$12
	CALL $25(($3 + [80]), ($3 + [40]))
	$6 = *($3 + [80])
	CALL send_inline($6, (*($3 + [84]) - $6))
	$6 = *($3 + [80])
	if ( ($6 == 0) ){ goto $label$14 }
	*($3 + [84]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$14
	$6 = *($3 + [68])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($3 + [72])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$15
	$6 = *($3 + [56])
	if ( ($6 == 0) ){ goto $label$16 }
	*(($3 + [60])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$16
	$6 = *($3 + [24])
	if ( ($6 == 0) ){ goto $label$17 }
	*(($3 + [28])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$17
	$global$0 = ($3 + [96])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $85($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [8968])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [8968])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $88($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $4 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [192])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8274]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$3 > (uint_64)(int_64)10) ){ goto $label$6 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$7 = ($7 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((int_64)$3 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)4294967291)
	$6 = ((int_64)$8 | (int_64)$6)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$1 }
	CALL $35(($2 + [160]), $0, $1, $6, (int_64)5459781)
	$3 = (int_64)5
	
.LOOP $label$7:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$7 }
	*(($2 + [152])) = [0]
	*($2 + [136]) = (int_64)-1
	*($2 + [144]) = (int_64)0
	*($2 + [128]) = $1
	*($2 + [120]) = (int_64)6138663577826885632
	$5 = CALL db_find_i64((int_64)6138663577826885632, $1, (int_64)-5001342326447013888, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$5 = CALL $36(($2 + [120]), $5)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)($2 + [120])), [8894])
	if ( ((uint_32)(*($5 + [8]) + [259200]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$8 }
	$3 = (int_64)6
	
.LOOP $label$9:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$9 }
	$3 = (int_64)5
	
.LOOP $label$10:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$10 }
	$3 = (int_64)6
	
.LOOP $label$11:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$11 }
	*(($9 = ($2 + [40]))) = [0]
	*($2 + [16]) = (int_64)6138663577826885632
	*($2 + [64]) = $1
	*($2 + [24]) = (int_64)-5001342339331915776
	*($2 + [32]) = (int_64)0
	*(($7 = CALL _Znwj([16]))) = $1
	*($7 + [8]) = (int_64)3617214756542218240
	*(($2 + [52])) = [0]
	$10 = ($7 + [16])
	*($9) = $10
	*(($2 + [36])) = $10
	*($2 + [32]) = $7
	*($2 + [44 align=4]) = (int_64)0
	CALL $24(($2 + [44]), [8])
	$7 = *($2 + [44])
	CALL eosio_assert(((int_32)(*(($2 + [48])) - $7) > (int_32)[7]), [8888])
	CALL memcpy($7, ($2 + [64]), [8])
	CALL $25(($2 + [80]), ($2 + [16]))
	$7 = *($2 + [80])
	CALL send_inline($7, (*($2 + [84]) - $7))
	$7 = *($2 + [80])
	if ( ($7 == 0) ){ goto $label$12 }
	*($2 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$12
	$7 = *($2 + [44])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($2 + [48])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$13
	$7 = *($2 + [32])
	if ( ($7 == 0) ){ goto $label$14 }
	*(($2 + [36])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$14
	$3 = *($5 + [32])
	$8 = *(($5 + [40]))
	CALL eosio_assert(((int_64)*(($5 + [24])) == (int_64)$8), [9434])
	$3 = ((int_64)$3 + (int_64)*($5 + [16]))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9477])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [9496])
	CALL eosio_assert(((int_64)$8 == (int_64)*($2 + [168])), [9434])
	$3 = ((int_64)*($2 + [160]) + (int_64)$3)
	*($2 + [160]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9477])
	CALL eosio_assert(((int_64)*($2 + [160]) < (int_64)4611686018427387904), [9496])
	
.LABEL $label$8
	if ( ((int_64)*($2 + [160]) < (int_64)1) ){ goto $label$16 }
	$3 = (int_64)6
	
.LOOP $label$17:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$17 }
	*($2 + [72]) = (int_64)3617214756542218240
	*($2 + [64]) = $1
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8274]
	$6 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$3 > (uint_64)(int_64)10) ){ goto $label$23 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$7 = ($7 + [-91])
	goto $label$21 
	
.LABEL $label$23
	$8 = (int_64)0
	if ( ((int_64)$3 == (int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$19
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)4294967291)
	$6 = ((int_64)$8 | (int_64)$6)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$18 }
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8286]
	$11 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$29 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$7 = ($7 + [-91])
	goto $label$27 
	
.LABEL $label$29
	$8 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$25
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$11 = ((int_64)$8 | (int_64)$11)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$24 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$5 = CALL $84([8256])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$32 }
	*($2) = ($5 << [1])
	$7 = ($2 | [1])
	if ( $5 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$9 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($2) = ($9 | [1])
	*($2 + [8]) = $7
	*($2 + [4]) = $5
	
.LABEL $label$31
	CALL memcpy($7, [8256], $5)
	
.LABEL $label$30
	*(($7 + $5)) = [0]
	*(($2 + [40])) = *((($2 + [160]) + [8]))
	$5 = ($2 + [8])
	*(($2 + [56])) = *($5)
	*($5) = [0]
	*($2 + [16]) = $1
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [160])
	*($2 + [48]) = *($2)
	*($2) = (int_64)0
	$5 = CALL $27(($2 + [80]), ($2 + [64]), $6, $11, ($2 + [16]))
	CALL $25(($2 + [176]), $5)
	$7 = *($2 + [176])
	CALL send_inline($7, (*($2 + [180]) - $7))
	$7 = *($2 + [176])
	if ( ($7 == 0) ){ goto $label$33 }
	*($2 + [180]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$33
	$7 = *($5 + [28])
	if ( ($7 == 0) ){ goto $label$34 }
	*(($5 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$34
	$7 = *($5 + [16])
	if ( ($7 == 0) ){ goto $label$35 }
	*(($5 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$35
	if ( ((*(($2 + [48])) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($2 + [56])))
	
.LABEL $label$36
	if ( ((*($2) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$16
	$0 = *($2 + [144])
	if ( ($0 == 0) ){ goto $label$37 }
	$9 = ($2 + [148])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$39 }
	
.LOOP $label$40:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$41 }
	CALL _ZdlPv($7)
	
.LABEL $label$41
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$40 }
	$5 = *(($2 + [144]))
	goto $label$38 
	
.LABEL $label$39
	$5 = $0
	
.LABEL $label$38
	*($9) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$37
	$global$0 = ($2 + [192])
	return (unreachable)
	
.LABEL $label$15
	CALL $79($2)
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $85($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [8968])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $88($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $2 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8302]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	$4 = (int_64)6
	
.LOOP $label$5:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$5 }
	*($3 + [32]) = (int_64)3617214756542218240
	*($3 + [24]) = $1
	$4 = (int_64)5
	
.LOOP $label$6:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$6 }
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [8265]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$12 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$9 = ($9 + [-91])
	goto $label$10 
	
.LABEL $label$12
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$7 }
	*(($3 + [16])) = *(($2 + [8]))
	*($3) = $1
	*($3 + [8]) = *($2)
	$6 = CALL $47(($3 + [40]), ($3 + [24]), (int_64)6138663577826885632, $7, $3)
	CALL $25(($3 + [80]), $6)
	$9 = *($3 + [80])
	CALL send_inline($9, (*($3 + [84]) - $9))
	$9 = *($3 + [80])
	if ( ($9 == 0) ){ goto $label$13 }
	*($3 + [84]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$13
	$9 = *($6 + [28])
	if ( ($9 == 0) ){ goto $label$14 }
	*(($6 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$9 = *($6 + [16])
	if ( ($9 == 0) ){ goto $label$15 }
	*(($6 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$15
	$global$0 = ($3 + [96])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $85($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1397703940
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [9365])
	$8 = (int_64)5459781
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [9414])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8968])
	CALL memcpy(($3 + [24]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [8968])
	$1 = (($3 + [24]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [8968])
	CALL memcpy((($3 + [24]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $88($6)
	
.LABEL $label$8
	*(($2 = (($3 + [48]) + [8]))) = *(($1 + [8]))
	*($3 + [48]) = *($1)
	$8 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($2)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$10 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [64])
	*($3 + [8]) = $10
	*($3 + [80]) = $10
	CALL void $1((int_32 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [544])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [8192])
	
.LABEL $label$2
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$5 }
	$4 = (int_64)7
	
.LOOP $label$6:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$6 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	*($3 + [208]) = $0
	CALL memcpy(($3 + [216]), [8640], [248])
	*(($3 + [472])) = $0
	*(($3 + [480])) = (int_64)-1
	*(($3 + [488])) = (int_64)0
	*(($3 + [496])) = [0]
	*(($3 + [512])) = (int_64)4154293930757629584
	*(($3 + [520])) = (int_64)-1
	*(($3 + [528])) = (int_64)0
	*(($3 + [536])) = [0]
	*($3 + [464]) = $0
	*($3 + [504]) = (int_64)4154293930757629584
	if ( ((int_64)$2 <= (int_64)-3111118615835836417) ){ goto $label$21 }
	if ( ((int_64)$2 <= (int_64)-2039333636196532225) ){ goto $label$20 }
	if ( ((int_64)$2 > (int_64)3724085270811770879) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)-2039333636184294912) ){ goto $label$17 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [1]
	*($3 + [96]) = *($3 + [104])
	CALL $3(($3 + [208]), ($3 + [96]))
	$5 = *(($3 + [528]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$21
	if ( ((int_64)$2 > (int_64)-4421659985209982977) ){ goto $label$19 }
	if ( ((int_64)$2 == (int_64)-6571004597979054080) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)-4996866931869876224) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)-4993516533478064128) ){ goto $label$17 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [2]
	*($3 + [32]) = *($3 + [168])
	CALL $5(($3 + [208]), ($3 + [32]))
	$5 = *(($3 + [528]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$20
	if ( ((int_64)$2 == (int_64)-3111118615835836416) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-3102536759395363376) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)-2507754169382731776) ){ goto $label$17 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [3]
	*($3) = *($3 + [200])
	CALL $7(($3 + [208]), $3)
	$5 = *(($3 + [528]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$19
	if ( ((int_64)$2 == (int_64)-4421659985209982976) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-3111238946495230016) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-3111118728327069696) ){ goto $label$17 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [4]
	*($3 + [40]) = *($3 + [160])
	CALL $9(($3 + [208]), ($3 + [40]))
	$5 = *(($3 + [528]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)3724085270811770880) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)5378043540636893184) ){ goto $label$17 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [5]
	*($3 + [8]) = *($3 + [192])
	CALL $11(($3 + [208]), ($3 + [8]))
	
.LABEL $label$17
	$5 = *(($3 + [528]))
	if ( ($5 == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$16
	*($3 + [132]) = [0]
	*($3 + [128]) = [6]
	*($3 + [72]) = *($3 + [128])
	CALL $13(($3 + [208]), ($3 + [72]))
	$5 = *(($3 + [528]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$15
	*($3 + [180]) = [0]
	*($3 + [176]) = [7]
	*($3 + [24]) = *($3 + [176])
	CALL $13(($3 + [208]), ($3 + [24]))
	$5 = *(($3 + [528]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$14
	*($3 + [156]) = [0]
	*($3 + [152]) = [8]
	*($3 + [48]) = *($3 + [152])
	CALL $16(($3 + [208]), ($3 + [48]))
	$5 = *(($3 + [528]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$13
	*($3 + [148]) = [0]
	*($3 + [144]) = [9]
	*($3 + [56]) = *($3 + [144])
	CALL $18(($3 + [208]), ($3 + [56]))
	$5 = *(($3 + [528]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$12
	*($3 + [124]) = [0]
	*($3 + [120]) = [10]
	*($3 + [80]) = *($3 + [120])
	CALL $11(($3 + [208]), ($3 + [80]))
	$5 = *(($3 + [528]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$11
	*($3 + [116]) = [0]
	*($3 + [112]) = [11]
	*($3 + [88]) = *($3 + [112])
	CALL $3(($3 + [208]), ($3 + [88]))
	$5 = *(($3 + [528]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	*($3 + [188]) = [0]
	*($3 + [184]) = [12]
	*($3 + [16]) = *($3 + [184])
	CALL $11(($3 + [208]), ($3 + [16]))
	$5 = *(($3 + [528]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	*($3 + [140]) = [0]
	*($3 + [136]) = [13]
	*($3 + [64]) = *($3 + [136])
	CALL $23(($3 + [208]), ($3 + [64]))
	$5 = *(($3 + [528]))
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$6 = ($3 + [532])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$23 }
	
.LOOP $label$24:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$25 }
	CALL _ZdlPv($8)
	
.LABEL $label$25
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$24 }
	$7 = *(($3 + [528]))
	goto $label$22 
	
.LABEL $label$23
	$7 = $5
	
.LABEL $label$22
	*($6) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$5 = *(($3 + [488]))
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = ($3 + [492])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$27 }
	
.LOOP $label$28:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$29 }
	CALL _ZdlPv($8)
	
.LABEL $label$29
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$28 }
	$7 = *(($3 + [488]))
	goto $label$26 
	
.LABEL $label$27
	$7 = $5
	
.LABEL $label$26
	*($6) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$4
	CALL $83([0])
	$global$0 = ($3 + [544])
}

void .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$1 = ($global$0 - [240])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = CALL current_time()
	*(($1 + [188])) = (int_64)0
	*(($1 + [204])) = (int_64)0
	*(($1 + [212])) = (int_64)0
	*($1 + [172]) = [0]
	*($1 + [176]) = [0]
	*($1 + [180 align=4]) = (int_64)0
	*($1 + [196 align=4]) = (int_64)0
	*($1 + [160]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	$3 = ($1 + [196])
	$4 = *($0)
	$2 = (int_64)6
	
.LOOP $label$1:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$1 }
	*($1 + [104]) = (int_64)3617214756542218240
	*($1 + [96]) = $4
	$2 = (int_64)7
	
.LOOP $label$2:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$2 }
	*($1 + [32]) = (int_64)-6571004597979054080
	CALL $29($3, ($1 + [96]), $0, ($1 + [32]), ($1 + [16]))
	$3 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	*(($1 + [180])) = ((($3 + [86401]) - (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) - ((uint_32)($3 + [1]) % (uint_32)[86400]))
	$2 = *($0)
	*($1 + [96]) = (int_64)0
	$5 = ($0 + [256])
	*($1 + [96]) = ((int_64)CALL $30($5, $2, ($1 + [96])) + (int_64)1)
	CALL $31($5, ($1 + [96]), *($0))
	$2 = *($1 + [96])
	*($1 + [104]) = (int_64)0
	*($1 + [96]) = $2
	$2 = *($0)
	CALL $32(($1 + [32]), ($1 + [160]))
	$3 = *($1 + [32])
	CALL send_deferred(($1 + [96]), $2, $3, (*($1 + [36]) - $3), [0])
	$3 = *($1 + [32])
	if ( ($3 == 0) ){ goto $label$3 }
	*($1 + [36]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$6 = *((($0 + (((uint_32)((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [1]) / (uint_32)[86400]) % (uint_32)[31]) << [3])) + [8]))
	$2 = CALL current_time()
	*(($1 + [124])) = (int_64)0
	*(($1 + [140])) = (int_64)0
	*(($1 + [148])) = (int_64)0
	*($1 + [108]) = [0]
	*($1 + [112]) = [0]
	*($1 + [116 align=4]) = (int_64)0
	*($1 + [132 align=4]) = (int_64)0
	*($1 + [96]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	$7 = ($1 + [132])
	$4 = *($0)
	$2 = (int_64)6
	
.LOOP $label$4:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$4 }
	*($1 + [40]) = (int_64)3617214756542218240
	*($1 + [32]) = $4
	$2 = (int_64)0
	$8 = (int_64)59
	$3 = [8256]
	$9 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$10 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$10 = ($10 + [-91])
	goto $label$8 
	
.LABEL $label$10
	$4 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$6
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$4 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$5 }
	*($1 + [16]) = $9
	*($1 + [224]) = $6
	CALL $33($7, ($1 + [32]), $0, ($1 + [16]), ($1 + [224]))
	$3 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	*(($1 + [116])) = ((($3 + [345601]) - (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) - ((uint_32)($3 + [1]) % (uint_32)[86400]))
	$2 = *($0)
	*($1 + [32]) = (int_64)0
	*($1 + [32]) = ((int_64)CALL $30($5, $2, ($1 + [32])) + (int_64)1)
	CALL $31($5, ($1 + [32]), *($0))
	$2 = *($1 + [32])
	*($1 + [40]) = (int_64)0
	*($1 + [32]) = $2
	$2 = *($0)
	CALL $32(($1 + [16]), ($1 + [96]))
	$3 = *($1 + [16])
	CALL send_deferred(($1 + [32]), $2, $3, (*($1 + [20]) - $3), [0])
	$3 = *($1 + [16])
	if ( ($3 == 0) ){ goto $label$11 }
	*($1 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$2 = CALL current_time()
	*(($1 + [60])) = (int_64)0
	*(($1 + [76])) = (int_64)0
	*(($1 + [84])) = (int_64)0
	*($1 + [44]) = [0]
	*($1 + [48]) = [0]
	*($1 + [52 align=4]) = (int_64)0
	*($1 + [68 align=4]) = (int_64)0
	*($1 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	$7 = ($1 + [68])
	$4 = *($0)
	$2 = (int_64)6
	
.LOOP $label$12:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$12 }
	*($1 + [24]) = (int_64)3617214756542218240
	*($1 + [16]) = $4
	$2 = (int_64)0
	$8 = (int_64)59
	$3 = [8265]
	$9 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$18 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$10 = ($10 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$4 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$14
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$4 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$13 }
	*($1 + [224]) = $9
	CALL $29($7, ($1 + [16]), $0, ($1 + [224]), ($1 + [8]))
	$2 = *($0)
	*(($1 + [52])) = [0]
	*($1 + [16]) = (int_64)0
	*($1 + [16]) = ((int_64)CALL $30($5, $2, ($1 + [16])) + (int_64)1)
	CALL $31($5, ($1 + [16]), *($0))
	$2 = *($1 + [16])
	*($1 + [24]) = (int_64)0
	*($1 + [16]) = $2
	$2 = *($0)
	CALL $32(($1 + [224]), ($1 + [32]))
	$3 = *($1 + [224])
	CALL send_deferred(($1 + [16]), $2, $3, (*($1 + [228]) - $3), [0])
	$3 = *($1 + [224])
	if ( ($3 == 0) ){ goto $label$19 }
	*($1 + [228]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$19
	CALL $34(($1 + [32]))
	CALL $34(($1 + [96]))
	CALL $34(($1 + [160]))
	$global$0 = ($1 + [240])
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	$5 = ($global$0 - [160])
	$global$0 = $5
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8302]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$11 = ($11 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($9)
	CALL eosio_assert(((($3 + [-1]) & [65535]) <= [30]), [8411])
	CALL eosio_assert((($4 & [255]) <= [2]), [8452])
	$6 = *($2)
	CALL eosio_assert(((int_64)$6 > (int_64)0), [8480])
	$12 = *((($0 + (((uint_32)(((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [1]) / (uint_32)[86400]) + $3) % (uint_32)[31]) << [3])) + [8]))
	CALL $40($5, $0)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($5 + [8])), [9306])
	CALL eosio_assert(((int_64)$6 <= (int_64)*($5)), [8509])
	$7 = *($0)
	$6 = (int_64)6
	
.LOOP $label$5:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$5 }
	*($5 + [88]) = (int_64)3617214756542218240
	*($5 + [80]) = $7
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [8274]
	$9 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$11 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$11 = ($11 + [-91])
	goto $label$9 
	
.LABEL $label$11
	$7 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$7
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)4294967291)
	$9 = ((int_64)$7 | (int_64)$9)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$6 }
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [8286]
	$13 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$17 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$11 = ($11 + [-91])
	goto $label$15 
	
.LABEL $label$17
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$13
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$13 = ((int_64)$7 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$12 }
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	$8 = CALL $84([8375])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$21 }
	*($5 + [64]) = ($8 << [1])
	$11 = (($5 + [64]) | [1])
	if ( $8 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$14 = (($8 + [16]) & [-16])
	$11 = CALL _Znwj($14)
	*($5 + [64]) = ($14 | [1])
	*($5 + [72]) = $11
	*($5 + [68]) = $8
	
.LABEL $label$20
	CALL memcpy($11, [8375], $8)
	
.LABEL $label$19
	*(($11 + $8)) = [0]
	*(($5 + [24])) = *(($2 + [8]))
	$8 = (($5 + [64]) + [8])
	*(($5 + [40])) = *($8)
	*($8) = [0]
	*($5 + [8]) = $12
	*($5) = *($0)
	*($5 + [16]) = *($2)
	*($5 + [32]) = *($5 + [64])
	*($5 + [64]) = (int_64)0
	$8 = CALL $27(($5 + [96]), ($5 + [80]), $9, $13, $5)
	CALL $25(($5 + [144]), $8)
	$11 = *($5 + [144])
	CALL send_inline($11, (*($5 + [148]) - $11))
	$11 = *($5 + [144])
	if ( ($11 == 0) ){ goto $label$22 }
	*($5 + [148]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$22
	$11 = *($8 + [28])
	if ( ($11 == 0) ){ goto $label$23 }
	*(($8 + [32])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$23
	$11 = *($8 + [16])
	if ( ($11 == 0) ){ goto $label$24 }
	*(($8 + [20])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$24
	if ( ((*(($5 + [32])) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$25
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$26
	CALL eosio_assert([1], [9365])
	$6 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$6 = $7
	$11 = [1]
	$14 = $8
	$8 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$30
	$6 = $7
	
.LOOP $label$31:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$14 = ($8 + [1])
	$8 = $14
	if ( $11 ){ goto $label$31 }
	$11 = [1]
	$8 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$11 = [0]
	
.LABEL $label$27
	CALL eosio_assert($11, [9414])
	CALL eosio_assert([1], [9365])
	$6 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$6 = $7
	$11 = [1]
	$14 = $8
	$8 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$6 = $7
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$14 = ($8 + [1])
	$8 = $14
	if ( $11 ){ goto $label$36 }
	$11 = [1]
	$8 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$11 = [0]
	
.LABEL $label$32
	CALL eosio_assert($11, [9414])
	$6 = *($2)
	$13 = ( (int_64)0 ? $6 : $4 )
	$15 = ( $6 ? (int_64)0 : $4 )
	$6 = *(($2 + [8]))
	$16 = ( (int_64)1397703940 ? $6 : $4 )
	$17 = ( $6 ? (int_64)1397703940 : $4 )
	$6 = (int_64)6
	
.LOOP $label$37:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$37 }
	$6 = (int_64)5
	
.LOOP $label$38:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$38 }
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [8387]
	$9 = (int_64)0
	
.LOOP $label$39:
	if ( ((uint_64)$6 > (uint_64)(int_64)9) ){ goto $label$44 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$11 = ($11 + [-91])
	goto $label$42 
	
.LABEL $label$44
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$43
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$41
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$40
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$39 }
	*(($5 + [24])) = $17
	*(($5 + [40])) = $16
	*($5 + [8]) = $1
	*($5) = $12
	*($5 + [16]) = $15
	*($5 + [32]) = $13
	*($5 + [48]) = [0]
	*($5 + [96]) = (int_64)6138663577826885632
	*($5 + [104]) = $9
	*(($8 = CALL _Znwj([16]))) = $12
	*($8 + [8]) = (int_64)3617214756542218240
	*(($5 + [132])) = [0]
	$11 = ($8 + [16])
	*((($5 + [96]) + [24])) = $11
	*(($5 + [116])) = $11
	*($5 + [112]) = $8
	*($5 + [124 align=4]) = (int_64)0
	CALL $24(($5 + [124]), [49])
	$8 = *(($5 + [128]))
	$11 = *($5 + [124])
	*($5 + [84]) = $11
	*($5 + [80]) = $11
	*($5 + [88]) = $8
	*($5 + [64]) = ($5 + [80])
	*($5 + [144]) = $5
	CALL $28(($5 + [144]), ($5 + [64]))
	CALL $25(($5 + [80]), ($5 + [96]))
	$8 = *($5 + [80])
	CALL send_inline($8, (*($5 + [84]) - $8))
	$8 = *($5 + [80])
	if ( ($8 == 0) ){ goto $label$45 }
	*($5 + [84]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$45
	$8 = *($5 + [124])
	if ( ($8 == 0) ){ goto $label$46 }
	*(($5 + [128])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$46
	$8 = *($5 + [112])
	if ( ($8 == 0) ){ goto $label$47 }
	*(($5 + [116])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$47
	$6 = CALL current_time()
	*(($5 + [28])) = (int_64)0
	*(($5 + [44])) = (int_64)0
	*(($5 + [52])) = (int_64)0
	*($5 + [12]) = [0]
	*($5 + [16]) = [0]
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [36 align=4]) = (int_64)0
	*($5) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	$8 = ($5 + [36])
	$7 = *($0)
	$6 = (int_64)6
	
.LOOP $label$48:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$48 }
	*($5 + [88]) = (int_64)3617214756542218240
	*($5 + [80]) = $7
	$6 = (int_64)5
	
.LOOP $label$49:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$49 }
	*($5 + [144]) = (int_64)-3111118728327069696
	*(($5 + [112])) = *(($2 + [8]))
	*($5 + [96]) = $1
	*($5 + [120]) = $12
	*($5 + [128]) = $4
	*($5 + [104]) = *($2)
	CALL $41($8, ($5 + [80]), $0, ($5 + [144]), ($5 + [96]))
	$6 = *($0)
	*(($5 + [20])) = ((int_32)$3 * (int_32)[86400])
	*($5 + [96]) = (int_64)0
	$8 = ($0 + [256])
	*($5 + [96]) = ((int_64)CALL $30($8, $6, ($5 + [96])) + (int_64)1)
	CALL $31($8, ($5 + [96]), *($0))
	$6 = *($5 + [96])
	*($5 + [104]) = (int_64)0
	*($5 + [96]) = $6
	$6 = *($0)
	CALL $32(($5 + [80]), $5)
	$8 = *($5 + [80])
	CALL send_deferred(($5 + [96]), $6, $8, (*($5 + [84]) - $8), [0])
	$8 = *($5 + [80])
	if ( ($8 == 0) ){ goto $label$50 }
	*($5 + [84]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$50
	CALL $34($5)
	$global$0 = ($5 + [160])
	return (unreachable)
	
.LABEL $label$18
	CALL $79(($5 + [64]))
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $85($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [32])) = (int_64)1397703940
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9365])
	$8 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$8 = $9
	$2 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$8 = $9
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [9414])
	*($3 + [42]) = [0]
	*($3 + [40]) = [0]
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = ($3 + [16])
	CALL $39(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $88($6)
	
.LABEL $label$9
	*(($1 = (($3 + [48]) + [8]))) = *(($3 + [32]))
	*($3 + [48]) = *($3 + [24])
	$2 = *(($3 + [40]))
	$10 = *(($3 + [42]))
	$8 = *($3 + [16])
	*((($3 + [64]) + [8])) = *($1)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$10 }
	$5 = *((*($1) + $5))
	
.LABEL $label$10
	$9 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $9
	*(($3 + [8])) = $9
	$9 = *($3 + [64])
	*($3) = $9
	*($3 + [80]) = $9
	CALL void $1((int_32 $8), (int_64 $3), (int_32 ($2 & [65535])), (int_32 int_32(($10 << [24]) >> [24])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$5 = ($global$0 - [160])
	$global$0 = $5
	$6 = [1]
	if ( CALL has_auth(*($0)) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = (int_64)59
	$6 = [8302]
	$9 = (int_64)0
	
.LOOP $label$2:
	$10 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$3 }
	$0 = *($6)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$0 = ($0 + [-91])
	goto $label$4 
	
.LABEL $label$5
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$3
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$2 }
	$6 = CALL has_auth($9)
	
.LABEL $label$1
	CALL eosio_assert($6, [8524])
	$7 = (int_64)5
	
.LOOP $label$6:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$6 }
	*(($5 + [120])) = [0]
	*($5 + [104]) = (int_64)-1
	*($5 + [112]) = (int_64)0
	*($5 + [96]) = $1
	*($5 + [88]) = (int_64)6138663577826885632
	$6 = CALL db_lowerbound_i64((int_64)6138663577826885632, $1, (int_64)5377987680120340480, $4)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$11 = CALL $43(($5 + [88]), $6)
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$7 }
	$12 = ((int_64)$3 * (int_64)10000)
	$13 = ($5 + [76])
	$14 = ($5 + [32])
	$15 = ($5 + [16])
	$16 = ($5 + [84])
	$17 = ($5 + [68])
	$3 = (int_64)0
	
.LOOP $label$8:
	if ( ((int_64)*($11 + [32]) < (int_64)$12) ){ goto $label$9 }
	$4 = *($11 + [8])
	$7 = (int_64)0
	$8 = (int_64)59
	$6 = [8536]
	$9 = (int_64)0
	
.LOOP $label$10:
	$10 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$11 }
	$0 = *($6)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$0 = ($0 + [-91])
	goto $label$12 
	
.LABEL $label$13
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$11
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$10 }
	if ( ((int_64)$4 == (int_64)$9) ){ goto $label$9 }
	$7 = (int_64)0
	$8 = (int_64)59
	$6 = [8549]
	$9 = (int_64)0
	
.LOOP $label$14:
	$10 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$15 }
	$0 = *($6)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$0 = ($0 + [-91])
	goto $label$16 
	
.LABEL $label$17
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$14 }
	if ( ((int_64)$4 == (int_64)$9) ){ goto $label$9 }
	$7 = (int_64)6
	
.LOOP $label$18:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$18 }
	$7 = (int_64)5
	
.LOOP $label$19:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$19 }
	$7 = (int_64)0
	$8 = (int_64)59
	$6 = [8398]
	$9 = (int_64)0
	
.LOOP $label$20:
	$10 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$21 }
	$0 = *($6)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$0 = ($0 + [-91])
	goto $label$22 
	
.LABEL $label$23
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$21
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$20 }
	*(($5 + [8])) = $4
	*($15) = *($11 + [16])
	*((($5 + [48]) + [8])) = $9
	*(($15 + [8])) = *(($11 + [24]))
	*($14) = *($11 + [32])
	*(($14 + [8])) = *(($11 + [40]))
	*(($0 = (($5 + [48]) + [16]))) = (int_64)0
	*(($18 = (($5 + [48]) + [24]))) = [0]
	*($5) = $1
	*($5 + [48]) = (int_64)6138663577826885632
	$6 = CALL _Znwj([16])
	*($0) = $6
	*($6) = $1
	*($6 + [8]) = (int_64)3617214756542218240
	*($13) = (int_64)0
	*($16) = [0]
	$6 = ($6 + [16])
	*($18) = $6
	*($17) = $6
	CALL $24($13, [48])
	$6 = *($13)
	$18 = (($5 + [48]) + [32])
	*((($5 + [128]) + [8])) = *($18)
	*($5 + [132]) = $6
	*($5 + [128]) = $6
	*($5 + [144]) = ($5 + [128])
	*($5 + [152]) = $5
	CALL $38(($5 + [152]), ($5 + [144]))
	CALL $25(($5 + [128]), ($5 + [48]))
	$6 = *($5 + [128])
	CALL send_inline($6, (*($5 + [132]) - $6))
	$6 = *($5 + [128])
	if ( ($6 == 0) ){ goto $label$24 }
	*($5 + [132]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$24
	$6 = *($13)
	if ( ($6 == 0) ){ goto $label$25 }
	*($18) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$25
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$26 }
	*($17) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$26
	$3 = ((int_64)$3 + (int_64)1)
	
.LABEL $label$9
	CALL eosio_assert([1], [9518])
	$6 = CALL db_next_i64(*($11 + [52]), $5)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$7 }
	$11 = CALL $43(($5 + [88]), $6)
	if ( ((int_64)$3 < (int_64)$2) ){ goto $label$8 }
	
.LABEL $label$7
	$11 = *($5 + [112])
	if ( ($11 == 0) ){ goto $label$27 }
	$13 = ($5 + [116])
	$6 = *($13)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$29 }
	
.LOOP $label$30:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$31 }
	CALL _ZdlPv($0)
	
.LABEL $label$31
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$30 }
	$6 = *(($5 + [112]))
	goto $label$28 
	
.LABEL $label$29
	$6 = $11
	
.LABEL $label$28
	*($13) = $11
	CALL _ZdlPv($6)
	
.LABEL $label$27
	$global$0 = ($5 + [160])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5 = ($global$0 - [144])
	$global$0 = $5
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8302]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$11 = ($11 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($9)
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8315]
	$9 = (int_64)0
	
.LOOP $label$5:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$6 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$11 = ($11 + [-91])
	goto $label$7 
	
.LABEL $label$8
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$6
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$5 }
	$8 = [1]
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$9 }
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8328]
	$9 = (int_64)0
	
.LOOP $label$10:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$11 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$11 = ($11 + [-91])
	goto $label$12 
	
.LABEL $label$13
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$11
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$10 }
	$8 = [1]
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$9 }
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8341]
	$9 = (int_64)0
	
.LOOP $label$14:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$15 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$11 = ($11 + [-91])
	goto $label$16 
	
.LABEL $label$17
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$15
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$14 }
	$8 = ((int_64)$9 == (int_64)$1)
	
.LABEL $label$9
	CALL eosio_assert($8, [8354])
	$7 = *($0)
	$6 = (int_64)6
	
.LOOP $label$18:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$18 }
	*($5 + [80]) = (int_64)3617214756542218240
	*($5 + [72]) = $7
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [8274]
	$9 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$24 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$11 = ($11 + [-91])
	goto $label$22 
	
.LABEL $label$24
	$7 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$20
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)4294967291)
	$9 = ((int_64)$7 | (int_64)$9)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$19 }
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [8286]
	$12 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$30 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$11 = ($11 + [-91])
	goto $label$28 
	
.LABEL $label$30
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$26
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$12 = ((int_64)$7 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$25 }
	$6 = *($3)
	$7 = *($3 + [8])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$7), [9434])
	$6 = ((int_64)$6 + (int_64)*($4))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9477])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9496])
	*(($5 + [64])) = [0]
	*($5 + [56]) = (int_64)0
	$8 = CALL $84([8375])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$34 }
	*($5 + [56]) = ($8 << [1])
	$11 = (($5 + [56]) | [1])
	if ( $8 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$13 = (($8 + [16]) & [-16])
	$11 = CALL _Znwj($13)
	*($5 + [56]) = ($13 | [1])
	*($5 + [64]) = $11
	*($5 + [60]) = $8
	
.LABEL $label$33
	CALL memcpy($11, [8375], $8)
	
.LABEL $label$32
	*(($11 + $8)) = [0]
	*(($5 + [24])) = $7
	$8 = ($5 + [64])
	*(($5 + [40])) = *($8)
	*($8) = [0]
	*($5 + [8]) = $1
	*($5 + [16]) = $6
	*($5) = *($0)
	*($5 + [32]) = *($5 + [56])
	*($5 + [56]) = (int_64)0
	$8 = CALL $27(($5 + [88]), ($5 + [72]), $9, $12, $5)
	CALL $25(($5 + [128]), $8)
	$11 = *($5 + [128])
	CALL send_inline($11, (*($5 + [132]) - $11))
	$11 = *($5 + [128])
	if ( ($11 == 0) ){ goto $label$35 }
	*($5 + [132]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$35
	$11 = *($8 + [28])
	if ( ($11 == 0) ){ goto $label$36 }
	*(($8 + [32])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$36
	$11 = *($8 + [16])
	if ( ($11 == 0) ){ goto $label$37 }
	*(($8 + [20])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$37
	if ( ((*(($5 + [32])) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$38
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$39
	$6 = (int_64)6
	
.LOOP $label$40:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$40 }
	$6 = (int_64)5
	
.LOOP $label$41:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$41 }
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [8387]
	$9 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$6 > (uint_64)(int_64)9) ){ goto $label$47 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$11 = ($11 + [-91])
	goto $label$45 
	
.LABEL $label$47
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$43
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$42 }
	*(($5 + [24])) = *(($3 + [8]))
	*(($5 + [40])) = *(($4 + [8]))
	*($5 + [8]) = $2
	*($5) = $1
	*($5 + [48]) = [0]
	*($5 + [88]) = (int_64)6138663577826885632
	*($5 + [96]) = $9
	*($5 + [16]) = *($3)
	*($5 + [32]) = *($4)
	*(($8 = CALL _Znwj([16]))) = $1
	*($8 + [8]) = (int_64)3617214756542218240
	*(($5 + [124])) = [0]
	$11 = ($8 + [16])
	*((($5 + [88]) + [24])) = $11
	*(($5 + [108])) = $11
	*($5 + [104]) = $8
	*($5 + [116 align=4]) = (int_64)0
	CALL $24(($5 + [116]), [49])
	$8 = *(($5 + [120]))
	$11 = *($5 + [116])
	*($5 + [76]) = $11
	*($5 + [72]) = $11
	*($5 + [80]) = $8
	*($5 + [56]) = ($5 + [72])
	*($5 + [128]) = $5
	CALL $28(($5 + [128]), ($5 + [56]))
	CALL $25(($5 + [72]), ($5 + [88]))
	$8 = *($5 + [72])
	CALL send_inline($8, (*($5 + [76]) - $8))
	$8 = *($5 + [72])
	if ( ($8 == 0) ){ goto $label$48 }
	*($5 + [76]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$48
	$8 = *($5 + [116])
	if ( ($8 == 0) ){ goto $label$49 }
	*(($5 + [120])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$49
	$8 = *($5 + [104])
	if ( ($8 == 0) ){ goto $label$50 }
	*(($5 + [108])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$50
	$global$0 = ($5 + [144])
	return (unreachable)
	
.LABEL $label$31
	CALL $79(($5 + [56]))
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [176])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $85($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $26(($3 + [32]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $88($2)
	
.LABEL $label$5
	*(($1 = (($3 + [96]) + [8]))) = *(($3 + [56]))
	*(($2 = (($3 + [80]) + [8]))) = *(($3 + [72]))
	*($3 + [96]) = *($3 + [48])
	*($3 + [80]) = *($3 + [64])
	$6 = *($3 + [40])
	$7 = *($3 + [32])
	*((($3 + [128]) + [8])) = *($2)
	*((($3 + [112]) + [8])) = *($1)
	*($3 + [128]) = *($3 + [80])
	*($3 + [112]) = *($3 + [96])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$8 = *((($3 + [112]) + [8]))
	*((($3 + [160]) + [8])) = $8
	$9 = *((($3 + [128]) + [8]))
	*((($3 + [144]) + [8])) = $9
	*((($3 + [16]) + [8])) = $8
	*(($3 + [8])) = $9
	$8 = *($3 + [112])
	*($3 + [160]) = $8
	$9 = *($3 + [128])
	*($3 + [144]) = $9
	*($3 + [16]) = $8
	*($3) = $9
	CALL void $1((int_32 $7), (int_64 $6), (int_64 ($3 + [16])), (int_32 $3), (int_32 $5))
	$global$0 = ($3 + [176])
	return [1]
}

void .FUNC $12 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$1 = ($global$0 - [160])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($0 + [296]), *(($0 + [304])), (int_64)-5001342331490271232, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $46(($0 + [296]), $3)
	$5 = (int_64)59
	$3 = [8274]
	$6 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$8 }
	$7 = *($3)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$8 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$4
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$6 = ((int_64)$8 | (int_64)$6)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$3 }
	CALL $35(($1 + [24]), $0, (int_64)4154293930757629584, $6, (int_64)5459781)
	$2 = *($4 + [8])
	$9 = *(($4 + [16]))
	CALL eosio_assert(((int_64)*($1 + [32]) == (int_64)$9), [9215])
	$10 = (int_64)
	CALL eosio_assert(((int_64)$10($2 - *($1 + [24]))) > (int_64)-4611686018427387904), [9263])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [9285])
	$2 = (int_64)0
	if ( ((int_64)$10 <= (int_64)0) ){ goto $label$2 }
	$11 = *($0)
	$5 = (int_64)59
	$3 = [8274]
	$6 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$14 }
	$7 = *($3)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$7 = ($7 + [-91])
	goto $label$12 
	
.LABEL $label$14
	$8 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$10
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$6 = ((int_64)$8 | (int_64)$6)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$9 }
	CALL $35(($1 + [128]), $0, $11, $6, (int_64)5459781)
	$3 = ((int_64)$10 > (int_64)$2)
	$2 = *($1 + [128])
	$11 = ( $2 ? $10 : $3 )
	if ( ((int_64)$11 <= (int_64)0) ){ goto $label$2 }
	$9 = ( *($1 + [136]) ? $9 : $3 )
	$8 = *($0)
	$2 = (int_64)6
	
.LOOP $label$15:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$15 }
	*($1 + [80]) = (int_64)3617214756542218240
	*($1 + [72]) = $8
	$2 = (int_64)0
	$5 = (int_64)59
	$3 = [8274]
	$6 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$21 }
	$7 = *($3)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$7 = ($7 + [-91])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$6 = ((int_64)$8 | (int_64)$6)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$16 }
	$2 = (int_64)0
	$5 = (int_64)59
	$3 = [8286]
	$10 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$27 }
	$7 = *($3)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$7 = ($7 + [-91])
	goto $label$25 
	
.LABEL $label$27
	$8 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$23
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$22 }
	*(($1 + [16])) = [0]
	*($1 + [8]) = (int_64)0
	$3 = CALL $84([8295])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$30 }
	*($1 + [8]) = ($3 << [1])
	$7 = (($1 + [8]) | [1])
	if ( $3 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$4 = (($3 + [16]) & [-16])
	$7 = CALL _Znwj($4)
	*($1 + [8]) = ($4 | [1])
	*($1 + [16]) = $7
	*($1 + [12]) = $3
	
.LABEL $label$29
	CALL memcpy($7, [8295], $3)
	
.LABEL $label$28
	*(($7 + $3)) = [0]
	*(($1 + [48])) = $9
	$3 = ($1 + [16])
	*(($1 + [64])) = *($3)
	*($3) = [0]
	*($1 + [32]) = (int_64)4154293930757629584
	*($1 + [40]) = $11
	*($1 + [24]) = *($0)
	*($1 + [56]) = *($1 + [8])
	*($1 + [8]) = (int_64)0
	$3 = CALL $27(($1 + [88]), ($1 + [72]), $6, $10, ($1 + [24]))
	CALL $25(($1 + [144]), $3)
	$7 = *($1 + [144])
	CALL send_inline($7, (*($1 + [148]) - $7))
	$7 = *($1 + [144])
	if ( ($7 == 0) ){ goto $label$31 }
	*($1 + [148]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$31
	$7 = *($3 + [28])
	if ( ($7 == 0) ){ goto $label$32 }
	*(($3 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$32
	$7 = *($3 + [16])
	if ( ($7 == 0) ){ goto $label$33 }
	*(($3 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$33
	if ( ((*(($1 + [56])) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$34
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$2
	$global$0 = ($1 + [160])
	return (unreachable)
	
.LABEL $label$1
	CALL $79(($1 + [8]))
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $85($5)
	CALL read_action_data($2, $5)
	CALL $88($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $85($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9548])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $85($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $85($6)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [36]) = $1
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + $6)
	*($3 + [48]) = ($3 + [32])
	*($3 + [56]) = $3
	CALL $42(($3 + [56]), ($3 + [48]))
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL $88($1)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *(($3 + [24]))
	$8 = *(($3 + [16]))
	$9 = *(($3 + [8]))
	$10 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $10), (int_64 $9), (int_64 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8302]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$11 = ($11 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($9)
	$6 = (int_64)6
	
.LOOP $label$5:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$5 }
	$6 = (int_64)5
	
.LOOP $label$6:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$6 }
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8622]
	$9 = (int_64)0
	
.LOOP $label$7:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$8 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$11 = ($11 + [-91])
	goto $label$9 
	
.LABEL $label$10
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$7 }
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*(($5 + [48])) = *(($4 + [8]))
	*($5 + [16]) = $2
	*($5 + [8]) = $1
	*($5 + [56]) = (int_64)6138663577826885632
	*($5 + [64]) = $9
	*($5 + [24]) = *($3)
	*($5 + [40]) = *($4)
	*(($8 = CALL _Znwj([16]))) = $1
	*($8 + [8]) = (int_64)3617214756542218240
	*(($5 + [92])) = [0]
	$11 = ($8 + [16])
	*((($5 + [56]) + [24])) = $11
	*(($5 + [76])) = $11
	*($5 + [72]) = $8
	*($5 + [84 align=4]) = (int_64)0
	CALL $24(($5 + [84]), [48])
	$8 = *(($5 + [88]))
	$11 = *($5 + [84])
	*($5 + [100]) = $11
	*($5 + [96]) = $11
	*($5 + [104]) = $8
	*($5 + [112]) = ($5 + [96])
	*($5 + [120]) = ($5 + [8])
	CALL $38(($5 + [120]), ($5 + [112]))
	CALL $25(($5 + [96]), ($5 + [56]))
	$8 = *($5 + [96])
	CALL send_inline($8, (*($5 + [100]) - $8))
	$8 = *($5 + [96])
	if ( ($8 == 0) ){ goto $label$11 }
	*($5 + [100]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	$8 = *($5 + [84])
	if ( ($8 == 0) ){ goto $label$12 }
	*(($5 + [88])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$12
	$8 = *($5 + [72])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [76])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	$global$0 = ($5 + [128])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8973])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = (int_64)0
	*($5) = *(*($3))
	CALL eosio_assert([1], [8888])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4982871454518345728, $2, (int_64)4982871454518345728, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)4982871454518345728
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4982871454518345728
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $60(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8973])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = (int_64)0
	*($5) = *(*($3))
	CALL eosio_assert([1], [8888])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4982871454518345728, $2, (int_64)4982871454518345728, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)4982871454518345728
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4982871454518345728
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $60(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8888])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8888])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8888])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8888])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8888])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8888])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8888])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8888])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8888])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $54(CALL $55($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8888])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8888])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $54($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8888])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8888])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8945])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$5 }
	$2 = CALL $85($4)
	CALL db_get_i64($1, $2, $4)
	CALL $88($2)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	CALL db_get_i64($1, $2, $4)
	
.LABEL $label$4
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8968])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)4982871454518345728
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)4982871454518345728
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $60(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9059])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9105])
	*($1) = *(*($3))
	CALL eosio_assert([1], [9156])
	CALL eosio_assert([1], [8888])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [48])
	$global$0 = $5
	$6 = [0]
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	*($5 + [16]) = $2
	*($5 + [8]) = $3
	$7 = CALL db_find_i64($3, $2, (int_64)3607749779137757184, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $48(($5 + [8]), $7)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($5 + [8])), [8894])
	*(($0 + [8])) = *(($6 + [8]))
	*($0) = *($6)
	$7 = *($5 + [32])
	if ( ($7 == 0) ){ goto $label$3 }
	$8 = ($5 + [36])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($5 + [32]))
	goto $label$1 
	
.LABEL $label$4
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [9365])
	$3 = (int_64)5459781
	
.LOOP $label$8:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $2
	$8 = [1]
	$0 = $6
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$3 = $2
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$0 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $0 ){ goto $label$10 }
	$8 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($8, [9414])
	
.LABEL $label$3
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$2
	$6 = $7
	
.LABEL $label$1
	*($8) = $7
	CALL _ZdlPv($6)
	$global$0 = ($5 + [48])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	*(($7 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$6 = ($2 + [16])
	*($3) = $6
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $6
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($7 + [40])
	$2 = *($0)
	$11 = *(($0 + [4]))
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $11)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($11 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$6 = ($8 + [-24])
	*($5) = *($6)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($6) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8888])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8888])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8888])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8888])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8888])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8888])
	CALL memcpy(*($4 + [4]), ($0 + [40]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [15]) = *($0 + [48])
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [8888])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8888])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8888])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8888])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8302]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$11 = ($11 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($9)
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8315]
	$9 = (int_64)0
	
.LOOP $label$5:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$6 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$11 = ($11 + [-91])
	goto $label$7 
	
.LABEL $label$8
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$6
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$5 }
	$8 = [1]
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$9 }
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8328]
	$9 = (int_64)0
	
.LOOP $label$10:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$11 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$11 = ($11 + [-91])
	goto $label$12 
	
.LABEL $label$13
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$11
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$10 }
	$8 = [1]
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$9 }
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8341]
	$9 = (int_64)0
	
.LOOP $label$14:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$15 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$11 = ($11 + [-91])
	goto $label$16 
	
.LABEL $label$17
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$15
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$14 }
	$8 = ((int_64)$9 == (int_64)$1)
	
.LABEL $label$9
	CALL eosio_assert($8, [8354])
	$6 = (int_64)6
	
.LOOP $label$18:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$18 }
	$6 = (int_64)5
	
.LOOP $label$19:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$19 }
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8398]
	$9 = (int_64)0
	
.LOOP $label$20:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$21 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$11 = ($11 + [-91])
	goto $label$22 
	
.LABEL $label$23
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$21
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$20 }
	*(($5 + [24])) = *(($3 + [8]))
	*(($5 + [40])) = *(($4 + [8]))
	*($5 + [8]) = $2
	*($5) = $1
	*($5 + [48]) = [0]
	*($5 + [56]) = (int_64)6138663577826885632
	*($5 + [64]) = $9
	*($5 + [16]) = *($3)
	*($5 + [32]) = *($4)
	*(($8 = CALL _Znwj([16]))) = $1
	*($8 + [8]) = (int_64)3617214756542218240
	*(($5 + [92])) = [0]
	$11 = ($8 + [16])
	*((($5 + [56]) + [24])) = $11
	*(($5 + [76])) = $11
	*($5 + [72]) = $8
	*($5 + [84 align=4]) = (int_64)0
	CALL $24(($5 + [84]), [49])
	$8 = *(($5 + [88]))
	$11 = *($5 + [84])
	*($5 + [100]) = $11
	*($5 + [96]) = $11
	*($5 + [104]) = $8
	*($5 + [112]) = ($5 + [96])
	*($5 + [120]) = $5
	CALL $28(($5 + [120]), ($5 + [112]))
	CALL $25(($5 + [96]), ($5 + [56]))
	$8 = *($5 + [96])
	CALL send_inline($8, (*($5 + [100]) - $8))
	$8 = *($5 + [96])
	if ( ($8 == 0) ){ goto $label$24 }
	*($5 + [100]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$24
	$8 = *($5 + [84])
	if ( ($8 == 0) ){ goto $label$25 }
	*(($5 + [88])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$25
	$8 = *($5 + [72])
	if ( ($8 == 0) ){ goto $label$26 }
	*(($5 + [76])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$26
	$global$0 = ($5 + [128])
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8302]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	$4 = (int_64)6
	
.LOOP $label$5:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$5 }
	*($3 + [32]) = (int_64)3617214756542218240
	*($3 + [24]) = $1
	$4 = (int_64)5
	
.LOOP $label$6:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$6 }
	$4 = (int_64)7
	
.LOOP $label$7:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$7 }
	*(($3 + [16])) = *(($2 + [8]))
	*($3) = $1
	*($3 + [8]) = *($2)
	$6 = CALL $47(($3 + [40]), ($3 + [24]), (int_64)6138663577826885632, (int_64)-4421659985209982976, $3)
	CALL $25(($3 + [80]), $6)
	$9 = *($3 + [80])
	CALL send_inline($9, (*($3 + [84]) - $9))
	$9 = *($3 + [80])
	if ( ($9 == 0) ){ goto $label$8 }
	*($3 + [84]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$8
	$9 = *($6 + [28])
	if ( ($9 == 0) ){ goto $label$9 }
	*(($6 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$9
	$9 = *($6 + [16])
	if ( ($9 == 0) ){ goto $label$10 }
	*(($6 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$global$0 = ($3 + [96])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $85($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [8968])
	CALL memcpy(($3 + [8]), $1, [8])
	*($3 + [52]) = ($1 + [8])
	CALL $44(($3 + [48]), (($3 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $88($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $45(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8274]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$6 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$7 != (int_64)$1), [8562])
	$10 = ($2 + [1])
	$11 = (($3 + [24]) + [32])
	$12 = (($3 + [24]) + [16])
	$13 = (($3 + [8]) | [1])
	$14 = ($3 + [116])
	$15 = ($3 + [64])
	$16 = ($3 + [108])
	$17 = [0]
	
.LOOP $label$9:
	$18 = *((($0 + ($17 << [3])) + [8]))
	$6 = $10
	if ( ((*($2) & [1]) == 0) ){ goto $label$10 }
	$6 = *(($2 + [8]))
	
.LABEL $label$10
	$8 = [0]
	
.LOOP $label$11:
	$19 = $8
	$8 = ($19 + [1])
	if ( *(($6 + $19)) ){ goto $label$11 }
	$9 = (int_64)0
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$12 }
	$5 = ((int_64)(CASTING uint_64)(uint_32 $19) << (int_64)3)
	$4 = (int_64)0
	$9 = (int_64)0
	
.LOOP $label$13:
	$8 = *($6)
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$9 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$4 + (int_64)8) & (int_64)4294967288)) | (int_64)$9)
	
.LABEL $label$14
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)8)
	if ( ((int_64)$5 != (int_64)$4) ){ goto $label$13 }
	
.LABEL $label$12
	CALL $35(($3 + [128]), $0, $18, $1, (uint_64)$9 >> (uint_64)(int_64)8))
	if ( ((int_64)*($3 + [128]) < (int_64)1) ){ goto $label$15 }
	$4 = (int_64)6
	
.LOOP $label$16:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$16 }
	*((($3 + [72]) + [8])) = (int_64)3617214756542218240
	*($3 + [72]) = $18
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8286]
	$7 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$22 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$8 = ($8 + [-91])
	goto $label$20 
	
.LABEL $label$22
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$18
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$17 }
	*(($8 = (($3 + [8]) + [8]))) = [0]
	*($3 + [8]) = (int_64)0
	$6 = CALL $84([8597])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$25 }
	*($3 + [8]) = ($6 << [1])
	$19 = $13
	if ( $6 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$20 = (($6 + [16]) & [-16])
	$19 = CALL _Znwj($20)
	*($8) = $19
	*($3 + [8]) = ($20 | [1])
	*($3 + [12]) = $6
	
.LABEL $label$24
	CALL memcpy($19, [8597], $6)
	
.LABEL $label$23
	*(($19 + $6)) = [0]
	*($12) = *($3 + [128])
	*((($3 + [24]) + [8])) = (int_64)8200272180149086544
	*(($12 + [8])) = *((($3 + [128]) + [8]))
	*($11) = *($3 + [8])
	*(($11 + [8])) = *($8)
	*($8) = [0]
	*($3 + [24]) = $18
	*($3 + [8]) = (int_64)0
	CALL $25(($3 + [144]), CALL $27(($3 + [88]), ($3 + [72]), $1, $7, ($3 + [24])))
	$6 = *($3 + [144])
	CALL send_inline($6, (*($3 + [148]) - $6))
	$6 = *($3 + [144])
	if ( ($6 == 0) ){ goto $label$26 }
	*($3 + [148]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$26
	$6 = *($14)
	if ( ($6 == 0) ){ goto $label$27 }
	*((($3 + [88]) + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$27
	$6 = *((($3 + [88]) + [16]))
	if ( ($6 == 0) ){ goto $label$28 }
	*($16) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$28
	if ( ((*($11) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*($15))
	
.LABEL $label$29
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$15
	$17 = ($17 + [1])
	if ( ($17 <= [31]) ){ goto $label$9 }
	$7 = *($0)
	if ( ((*($2) & [1]) == 0) ){ goto $label$30 }
	$10 = *(($2 + [8]))
	
.LABEL $label$30
	$6 = [0]
	
.LOOP $label$31:
	$8 = ($10 + $6)
	$19 = ($6 + [1])
	$6 = $19
	if ( *($8) ){ goto $label$31 }
	$9 = (int_64)0
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$32 }
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($19 + [-1])) << (int_64)3)
	$4 = (int_64)0
	$9 = (int_64)0
	
.LOOP $label$33:
	$6 = *($10)
	if ( ((uint_32)(($6 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$9 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$4 + (int_64)8) & (int_64)4294967288)) | (int_64)$9)
	
.LABEL $label$34
	$10 = ($10 + [1])
	$4 = ((int_64)$4 + (int_64)8)
	if ( ((int_64)$5 != (int_64)$4) ){ goto $label$33 }
	
.LABEL $label$32
	CALL $35(($3 + [128]), $0, $7, $1, (uint_64)$9 >> (uint_64)(int_64)8))
	if ( ((int_64)*($3 + [128]) <= (int_64)0) ){ goto $label$35 }
	$9 = *($0)
	$4 = (int_64)6
	
.LOOP $label$36:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$36 }
	*($3 + [80]) = (int_64)3617214756542218240
	*($3 + [72]) = $9
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8286]
	$7 = (int_64)0
	
.LOOP $label$37:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$42 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$8 = ($8 + [-91])
	goto $label$40 
	
.LABEL $label$42
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$38
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$37 }
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$6 = CALL $84([8597])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$45 }
	*($3 + [8]) = ($6 << [1])
	$8 = (($3 + [8]) | [1])
	if ( $6 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$19 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($19)
	*($3 + [8]) = ($19 | [1])
	*($3 + [16]) = $8
	*($3 + [12]) = $6
	
.LABEL $label$44
	CALL memcpy($8, [8597], $6)
	
.LABEL $label$43
	*(($8 + $6)) = [0]
	*(($3 + [48])) = *((($3 + [128]) + [8]))
	$6 = (($3 + [8]) + [8])
	*(($3 + [64])) = *($6)
	*($6) = [0]
	*($3 + [32]) = (int_64)8200272180149086544
	*($3 + [24]) = *($0)
	*($3 + [40]) = *($3 + [128])
	*($3 + [56]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$6 = CALL $27(($3 + [88]), ($3 + [72]), $1, $7, ($3 + [24]))
	CALL $25(($3 + [144]), $6)
	$8 = *($3 + [144])
	CALL send_inline($8, (*($3 + [148]) - $8))
	$8 = *($3 + [144])
	if ( ($8 == 0) ){ goto $label$46 }
	*($3 + [148]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$46
	$8 = *($6 + [28])
	if ( ($8 == 0) ){ goto $label$47 }
	*(($6 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$47
	$8 = *($6 + [16])
	if ( ($8 == 0) ){ goto $label$48 }
	*(($6 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$48
	if ( ((*(($3 + [56])) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*(($3 + [64])))
	
.LABEL $label$49
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$35
	$global$0 = ($3 + [160])
	return (unreachable)
	
.LABEL $label$8
	CALL $79(($3 + [8]))
	
.LABEL $label$7
	CALL $79(($3 + [8]))
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $24($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8888])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8888])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $54(CALL $55($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $82($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $24($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $49(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1397703940
	CALL eosio_assert([1], [9365])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9414])
	*(($0 + [40])) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [9365])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [9414])
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	*($3 + [16]) = $3
	*($3 + [24]) = $0
	CALL $65(($3 + [24]), ($3 + [16]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [16]) = (int_64)0
	*(($1 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [9365])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9414])
	*(($1 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [9365])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [9414])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [9414])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [9414])
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8888])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8888])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [8888])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8888])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8888])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8888])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8888])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9514])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $24($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8968])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [9365])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9414])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)0
	*(($3 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [9365])
	$4 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9414])
	*($0 + [24]) = $1
	$3 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($0, *($3 + [4]), [8])
	$6 = (*($3 + [4]) + [8])
	*($3 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $6) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$6 = (*($3 + [4]) + [8])
	*($3 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $6) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17944])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17752]
	$3 = (((int_32)$1 * (int_32)[12]) + [17752])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9552]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9556])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9552]) = [1]
	$2 = ($2 << [16])
	*([0] + [9556]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9556])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9556]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9552]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9552]) = [1]
	$3 = ($3 << [16])
	*([0] + [9556]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9556])
	
.LABEL $label$10
	*([0] + [9556]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $87($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [17956])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $85 (int_32 $0)
{
	return CALL $86([9560], $0)
}

int_32 .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $83 (int_32 $0)
{
}

void .FUNC $82 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [16]) = (int_64)0
	*(($1 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [9365])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9414])
	*(($1 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [9365])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [9414])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [9414])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [9414])
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8968])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8968])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $88($0)
	
.LABEL $label$1
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [8968])
	CALL memcpy(($0 + [24]), *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8968])
	CALL memcpy(($0 + [26]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8945])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $85($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $88($4)
	
.LABEL $label$6
	$5 = CALL _Znwj([64])
	$4 = CALL $72($5)
	*($5 + [48]) = $0
	CALL $73(($3 + [32]), $4)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $74(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8968])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8968])
	CALL memcpy(($0 + [32]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $79 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $50($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $24($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $51($2, $1)
	CALL $53(CALL $52(CALL $52($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $24(($6 + [28]), [8])
	$2 = *($6 + [28])
	CALL eosio_assert(((int_32)(*(($6 + [32])) - $2) > (int_32)[7]), [8888])
	CALL memcpy($2, $4, [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

int_64 .FUNC $30 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [8894])
	if ( ($4 == 0) ){ goto $label$1 }
	$1 = *($4)
	$global$0 = ($3 + [16])
	return $1
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $56($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [8894])
	$1 = *($4)
	$global$0 = ($3 + [16])
	return $1
	
.LABEL $label$1
	*($3 + [8]) = $2
	CALL $59($3, $0, $1, ($3 + [8]))
	$1 = *(*($3 + [4]))
	$global$0 = ($3 + [16])
	return $1
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [8894])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $56($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [8894])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9024])
	CALL $57($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $58($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}