(data (i32.const 8192) "transfer\00")
(data (i32.const 8201) "eosio.token\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8299) "string is too long to be a valid name\00")
(data (i32.const 8337) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8404) "character is not in allowed character set for names\00")
(data (i32.const 8456) "dappmetadata\00")
(data (i32.const 8469) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8520) "error reading iterator\00")
(data (i32.const 8543) "read\00")
(data (i32.const 8548) "cannot pass end iterator to modify\00")
(data (i32.const 8583) "object passed to modify is not in multi_index\00")
(data (i32.const 8629) "cannot modify objects in table of another contract\00")
(data (i32.const 8680) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8739) "attempt to add asset with different symbol\00")
(data (i32.const 8782) "addition underflow\00")
(data (i32.const 8801) "addition overflow\00")
(data (i32.const 8819) "write\00")
(data (i32.const 8825) "cannot create objects in table of another contract\00")
(data (i32.const 8876) "validator not found\00")
(data (i32.const 8896) "request not found\00")
(data (i32.const 8915) "validator do not match\00")
(data (i32.const 8938) "not enough reputation to accept\00")
(data (i32.const 8970) "get\00")
(data (i32.const 8974) "eosio\00")
(data (i32.const 8980) "singleton does not exist\00")
(data (i32.const 9005) "payer not found\00")
(data (i32.const 9021) "not enough credits\00")
(data (i32.const 9040) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9099) "attempt to subtract asset with different symbol\00")
(data (i32.const 9147) "subtraction underflow\00")
(data (i32.const 9169) "subtraction overflow\00")
(data (i32.const 9190) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9242) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9296) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9344) "Producer not registered\00")
(data (i32.const 9368) "already approved\00")
(data (i32.const 9385) "request is still active\00")
(data (i32.const 9409) "object passed to erase is not in multi_index\00")
(data (i32.const 9454) "cannot erase objects in table of another contract\00")
(data (i32.const 9504) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9557) "Title too long\00")
(data (i32.const 9572) "Description too long\00")
(data (i32.const 9593) "Source code url too long\00")
(data (i32.const 9618) "Website url too long\00")
(data (i32.const 9639) "Logo url too long\00")
(data (i32.const 9657) "Cannot add more than 10 tags\00")
(data (i32.const 9686) "Tag must have less than 16 chars\00")
(data (i32.const 9719) "user\00")
(data (i32.const 9724) "contract\00")
(data (i32.const 9733) "both\00")
(data (i32.const 9738) "Invalid ram payer\00")
(data (i32.const 9756) "Short description too long\00")
(data (i32.const 9783) "Long description too long\00")
(data (i32.const 9809) "balance not found\00")
(data (i32.const 9827) "not enough balance\00")
(data (i32.const 9846) "dappmetadata refund\00")
(data (i32.const 9866) "active\00")
(data (i32.const 9873) "Account already added!\00")
(data (i32.const 9896) "Account not found\00")
(data (i32.const 9914) "Invalid account\00")
(data (i32.const 9930) "validation not found\00")
(data (i32.const 9951) "did not approve yet\00")
(data (i32.const 9971) "contract not found\00")
(data (i32.const 9990) "request has expired\00")
(data (i32.const 10010) "contract validation bounty\00")
(import "env" "eosio_exit" (func $fimport$0 (param i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$4 (param i32 i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "memset" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "is_account" (func $fimport$10 (param i64) (result i32)))
(import "env" "current_receiver" (func $fimport$11 (result i64)))
(import "env" "db_get_i64" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$13 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$15))
(import "env" "db_lowerbound_i64" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$18 (param i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "memmove" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$21 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$32 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$33 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$36 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$38 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$39 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$40 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $125))
(export "_Znwj" (func $123))
(export "_Znaj" (func $124))
(export "_ZdaPv" (func $126))
(export "_ZnwjSt11align_val_t" (func $127))
(export "_ZnajSt11align_val_t" (func $128))
(export "_ZdlPvSt11align_val_t" (func $129))
(export "_ZdaPvSt11align_val_t" (func $130))
(table $0 14 14 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $11 $13 $15 $17 $19 $21 $23 $25 $26)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18456))
(global $global$2 i32 (i32.const 18456))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[56])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$1 }
	CALL $101($0, ($1 - $4))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$4 <= (uint_32)$1) ){ goto $label$2 }
	$4 = ($3 + ((int_32)$1 * (int_32)[56]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((*(($2 + [-24])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($2 + [-16])))
	
.LABEL $label$5
	if ( ((*(($2 + [-36])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($2 + [-28])))
	
.LABEL $label$6
	$1 = ($2 + [-56])
	if ( ((*(($2 + [-48])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($2 + [-40])))
	
.LABEL $label$7
	$2 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	*(($0 + [4])) = $4
	
.LABEL $label$2
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $44(*($1), *($0 + [4]))
	CALL $44(*($1), *($0 + [8]))
	$0 = *($0 + [12])
	$1 = *($1)
	CALL $44($1, $0)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [8543])
	CALL memcpy(($0 + [12]), *($1 + [4]), [4])
	$3 = (*($1 + [4]) + [4])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[3]), [8543])
	CALL memcpy(($0 + [16]), *($1 + [4]), [4])
	$3 = (*($1 + [4]) + [4])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[3]), [8543])
	CALL memcpy(($0 + [20]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $136($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	CALL $111(*($0 + [4]), $1)
	*(($4 = $2)) = [0]
	CALL $103($4, $1)
	$5 = *($4)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $142($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $5)
	CALL $104($4, $1)
	$6 = *($1)
	*($1 + [148]) = CALL db_store_i64(*($3 + [8]), (int_64)5308437740856016896, *(*($0 + [8])), $6, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($3 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($2)
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [16])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $67($1)
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$3 = CALL $45(CALL $44(CALL $44(CALL $44(CALL $44(CALL $44($0, ($1 + [8])), ($1 + [20])), ($1 + [32])), ($1 + [44])), ($1 + [56])), ($1 + [68]))
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [8543])
	CALL memcpy(($1 + [80]), *($3 + [4]), [32])
	$0 = (*($3 + [4]) + [32])
	*($3 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]), [8543])
	CALL memcpy(($1 + [112]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	$5 = [0]
	$6 = (int_64)0
	$7 = ($3 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *(($3 + [8]))), [8970])
	$4 = *($7)
	$0 = *($4)
	$4 = ($4 + [1])
	*($7) = $4
	$5 = ($5 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $5)))
	$5 = ($5 + [7])
	if ( ($0 & [128]) ){ goto $label$1 }
	CALL $98(($1 + [120]), (CASTING uint_32)(uint_64 $6))
	$4 = *(($1 + [124]))
	$0 = *($1 + [120])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	$5 = ($2 + [28])
	
.LOOP $label$3:
	*($2 + [8]) = $3
	*($2 + [16]) = $0
	*((($2 + [16]) + [8])) = ($0 + [20])
	*($5) = ($0 + [32])
	*($2 + [20]) = ($0 + [8])
	CALL $99(($2 + [16]), ($2 + [8]))
	$0 = ($0 + [56])
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$0 = ($3 + [4])
	CALL eosio_assert(((uint_32)(*(($3 + [8])) - *($0)) > (uint_32)[7]), [8543])
	CALL memcpy(($1 + [136]), *($0), [8])
	*($0) = (*($0) + [8])
	$global$0 = ($2 + [32])
	return $3
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8543])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8543])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8543])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8543])
	CALL memcpy(($1 + [20]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8543])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8543])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8543])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8543])
	CALL memcpy(($1 + [36]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8543])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8543])
	CALL memcpy(($1 + [44]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8543])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8543])
	CALL memcpy(($1 + [52]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8543])
	CALL memcpy(($1 + [56]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8543])
	CALL memcpy(($1 + [60]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8543])
	CALL memcpy(($1 + [64]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8543])
	CALL memcpy(($1 + [66]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-4995154566124142592, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $75($6, $8)
	*($3 + [4]) = [0]
	*($3) = $6
	$7 = *(*(CALL $93($3) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9190])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = *(*($5 + [12]))
	*($1 + [56]) = [0]
	*($1 + [32]) = *(*($5 + [20]))
	*($1 + [72]) = *(*($5 + [16]))
	$5 = *($5 + [24])
	*($1 + [40]) = *($5)
	*(($1 + [48])) = *(($5 + [8]))
	$6 = $2
	$5 = ($6 + [-80])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($6 + [-7])
	CALL $79($3, $1)
	$7 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($4 + [8]), (int_64)-4995154566124142592, *(*($0 + [8])), $7, $5, [73])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $93 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [84]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9296])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4995154566124142592)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9242])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9242])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $75(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $138 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $142($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10040])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $142($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8543])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [8543])
	CALL memcpy(($1 + [16]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8543])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $44(CALL $44($0, ($1 + [56])), ($1 + [68]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = (*($1 + [4]) - *($1))
	$3 = ((int_32)$2 / (int_32)[48])
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[89478486]) ){ goto $label$1 }
	$5 = CALL _Znwj($2)
	*(($4 = ($0 + [4]))) = $5
	*(($0 + [8])) = ($5 + ((int_32)$3 * (int_32)[48]))
	*($0) = $5
	$1 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	*($5) = *($2)
	CALL $132(($5 + [8]), ($2 + [8]))
	CALL $132(($5 + [20]), ($2 + [20]))
	CALL $132(($5 + [32]), ($2 + [32]))
	$5 = (*($4) + [48])
	*($4) = $5
	$2 = ($2 + [48])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	return $0
	
.LABEL $label$1
	CALL $136($0)
	return (unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $131 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $134($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[48]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[48])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[89478486]) ){ goto $label$3 }
	$3 = [89478485]
	$2 = ((int_32)($2 - $4) / (int_32)[48])
	if ( ((uint_32)$2 > (uint_32)[44739241]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$4 = CALL _Znwj(((int_32)$3 * (int_32)[48]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*(($4 = ($3 + [40]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*($4) = [0]
	$3 = (*($2) + [48])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$4 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $136($0)
	
.LABEL $label$2
	$7 = ($4 + ((int_32)$3 * (int_32)[48]))
	$5 = ($4 + ((int_32)$5 * (int_32)[48]))
	$3 = $5
	
.LOOP $label$8:
	*(($2 = ($3 + [40]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*($2) = [0]
	$3 = ($3 + [48])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$8 = ($4 + ((int_32)$6 * (int_32)[48]))
	$3 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$10 }
	$10 = ($3 - $9)
	$2 = [0]
	
.LOOP $label$11:
	$1 = ($9 + $2)
	*((($3 = ($5 + $2)) + [-48])) = *(($1 + [-48]))
	$4 = ($1 + [-32])
	*(($3 + [-32])) = *($4)
	$6 = ($1 + [-40])
	*(($3 + [-40])) = *($6)
	*($4) = [0]
	*($6) = (int_64)0
	$4 = ($1 + [-20])
	*(($3 + [-20])) = *($4)
	$6 = ($1 + [-28])
	*(($3 + [-28])) = *($6)
	*($4) = [0]
	*($6) = (int_64)0
	$4 = ($1 + [-8])
	*(($3 + [-8])) = *($4)
	$3 = ($1 + [-16])
	*(($3 + [-16])) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	$2 = ($2 + [-48])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$11 }
	$5 = ($5 + $2)
	$3 = *(($0 + [4]))
	$2 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LABEL $label$9
	*($0) = $5
	*(($0 + [4])) = $8
	*(($0 + [8])) = $7
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	if ( ((*(($3 + [-16])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [-8])))
	
.LABEL $label$14
	if ( ((*(($3 + [-28])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($3 + [-20])))
	
.LABEL $label$15
	$1 = ($3 + [-48])
	if ( ((*(($3 + [-40])) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($3 + [-32])))
	
.LABEL $label$16
	$3 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($2 == 0) ){ goto $label$1 }
	CALL _ZdlPv($2)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $136 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $137 ()
{
	return [10044]
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[48])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$1 }
	CALL $121($0, ($1 - $4))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$4 <= (uint_32)$1) ){ goto $label$2 }
	$4 = ($3 + ((int_32)$1 * (int_32)[48]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((*(($2 + [-16])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($2 + [-8])))
	
.LABEL $label$5
	if ( ((*(($2 + [-28])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($2 + [-20])))
	
.LABEL $label$6
	$1 = ($2 + [-48])
	if ( ((*(($2 + [-40])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($2 + [-32])))
	
.LABEL $label$7
	$2 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	*(($0 + [4])) = $4
	
.LABEL $label$2
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8583])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8629])
	$5 = *($1)
	$6 = ($1 + [16])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($6)), [9099])
	$7 = (int_64)
	*($1 + [8]) = $7(*($1 + [8]) - *($3)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9147])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9169])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8680])
	CALL eosio_assert([1], [8819])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8819])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($6)
	CALL eosio_assert([1], [8819])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8520])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([160]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [120 align=4]) = (int_64)0
	*($5 + [128]) = [0]
	*($5 + [144]) = $0
	CALL $97(($3 + [32]), $5)
	*($5 + [148]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $96(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $67($1)
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [80])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [84])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((*(($3 + [-16])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [-8])))
	
.LABEL $label$5
	if ( ((*(($3 + [-28])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [-20])))
	
.LABEL $label$6
	$4 = ($3 + [-48])
	if ( ((*(($3 + [-40])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [-32])))
	
.LABEL $label$7
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [80]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [68])
	if ( ($1 == 0) ){ goto $label$8 }
	$2 = ($0 + [72])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$12
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$11 }
	$3 = *(($0 + [68]))
	goto $label$9 
	
.LABEL $label$10
	$3 = $1
	
.LABEL $label$9
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$8
	if ( (*($0 + [56]) & [1]) ){ goto $label$21 }
	if ( (*($0 + [44]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL _ZdlPv(*(($0 + [64])))
	if ( ((*($0 + [44]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($0 + [52])))
	$3 = [1]
	if ( ((*($0 + [32]) & [1]) == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$3 = [1]
	if ( (*($0 + [32]) & [1]) ){ goto $label$17 }
	
.LABEL $label$18
	if ( (*($0 + [20]) & $3) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*(($0 + [40])))
	if ( ((*($0 + [20]) & $3) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($0 + [28])))
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	if ( (*($0 + [8]) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	return $0
	
.LABEL $label$13
	CALL _ZdlPv(*(($0 + [16])))
	return $0
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $145($0)
	
.LABEL $label$1
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9409])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [9454])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9504])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [84]))
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8583])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8629])
	$5 = *($1)
	$6 = ($1 + [16])
	$3 = *($3)
	CALL eosio_assert(((int_64)*(($3 + [48])) == (int_64)*($6)), [8739])
	$7 = ((int_64)*($1 + [8]) + (int_64)*($3 + [40]))
	*($1 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [8782])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [8801])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8680])
	CALL eosio_assert([1], [8819])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8819])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($6)
	CALL eosio_assert([1], [8819])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8583])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8629])
	$6 = *($1)
	$7 = ($1 + [32])
	$8 = *($3)
	$9 = *($3 + [4])
	$10 = ($1 + [36])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)*(($1 + [40]))) ){ goto $label$2 }
	$11 = ($3 + [8])
	*($10) = $11
	*($3) = *($8)
	goto $label$1 
	
.LABEL $label$2
	CALL $94($7, $8)
	$11 = *($10)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	$3 = ($11 - *($7))
	if ( ($3 == 0) ){ goto $label$5 }
	$8 = int_32($3 >> [3])
	if ( ((uint_32)$8 >= (uint_32)[536870912]) ){ goto $label$4 }
	$3 = CALL _Znwj($3)
	*(($5 + [8])) = ($3 + ($8 << [3]))
	*($5) = $3
	*($5 + [4]) = $3
	$11 = *($7)
	$8 = (*($10) - $11)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($3, $11, $8)
	*($5 + [4]) = ($3 + $8)
	
.LABEL $label$5
	*($1 + [24]) = CALL $76($9, $5)
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$6 }
	*($5 + [4]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$8 = ($1 + [24])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8680])
	$3 = *($1 + [8])
	$9 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($9 + [16])
	$12 = (CASTING uint_64)(uint_32 $9)
	$9 = ($1 + [8])
	
.LOOP $label$7:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$7 }
	$11 = *($7)
	$10 = *($10)
	$13 = ($10 - $11)
	$12 = (CASTING uint_64)(uint_32 int_32($13 >> [3]))
	
.LOOP $label$8:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$9 }
	$3 = (($13 & [-8]) + $3)
	
.LABEL $label$9
	if ( ($3 <= [513]) ){ goto $label$11 }
	$10 = CALL $142($3)
	goto $label$10 
	
.LABEL $label$11
	$10 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$10
	*($5) = $10
	*($5 + [8]) = ($10 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8819])
	CALL memcpy($10, $1, [8])
	*($5 + [4]) = ($10 + [8])
	$4 = CALL $77($5, $9)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8819])
	CALL memcpy(*($4 + [4]), $8, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $78($4, $7)
	CALL db_update_i64(*($1 + [48]), $2, $10, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$13 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$12 }
	goto $label$3 
	
.LABEL $label$13
	CALL $145($10)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$12
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return (unreachable)
	
.LABEL $label$4
	CALL $136($5)
	
.LABEL $label$3
	$global$0 = ($5 + [16])
}

int_32 .FUNC $40 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8469])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5915305344019464192, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $87($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8469])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = *($1)
	CALL $132(($0 + [8]), ($1 + [8]))
	CALL $132(($0 + [20]), ($1 + [20]))
	CALL $132(($0 + [32]), ($1 + [32]))
	CALL $132(($0 + [44]), ($1 + [44]))
	CALL $132(($0 + [56]), ($1 + [56]))
	*($0 + [68 align=4]) = (int_64)0
	*(($0 + [76])) = [0]
	$2 = (*(($1 + [72])) - *($1 + [68]))
	$3 = ((int_32)$2 / (int_32)[12])
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = CALL _Znwj($2)
	*(($4 = ($0 + [72]))) = $5
	*(($0 + [76])) = ($5 + ((int_32)$3 * (int_32)[12]))
	*(($0 + [68])) = $5
	$3 = *(($1 + [72]))
	$2 = *(($1 + [68]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $132($5, $2)
	$5 = (*($4) + [12])
	*($4) = $5
	$2 = ($2 + [12])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	CALL $122(($0 + [80]), ($1 + [80]))
	return $0
	
.LABEL $label$1
	CALL $136(($0 + [68]))
	return (unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8970])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	CALL $120($1, (CASTING uint_32)(uint_64 $4))
	$3 = *($1 + [4])
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - *($2)) > (uint_32)[7]), [8543])
	CALL memcpy($7, *($2), [8])
	*($2) = (*($2) + [8])
	CALL $44($0, ($7 + [8]))
	CALL $44($0, ($7 + [20]))
	CALL $44($0, ($7 + [32]))
	$7 = ($7 + [48])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8970])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$2 = *($1 + [4])
	$3 = ((int_32)($2 - $6) / (int_32)[12])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $100($1, ($7 - $3))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$3 = ($6 + ((int_32)$7 * (int_32)[12]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($2 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$8
	$2 = $7
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$9:
	CALL $44($0, $7)
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $83($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $135($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $135($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $131($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	float_64 $13
	int_64 $14
	$3 = ($global$0 - [336])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [256]))) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [272]) = (int_64)0
	*($4 + [212]) = $2
	*($4 + [208]) = $2
	*($4 + [216]) = ($2 + $7)
	*($4 + [312]) = ($4 + [208])
	*($4 + [56]) = ($4 + [224])
	CALL $36(($4 + [56]), ($4 + [312]))
	*(($9 = (($4 + [40]) + [8]))) = *($4 + [216])
	*($4 + [40]) = *($4 + [208])
	$10 = *($9)
	*(($3 = (($4 + [280]) + [8]))) = $10
	*(($9 = (($4 + [296]) + [8]))) = $10
	$11 = *($4 + [40])
	*($4 + [296]) = $11
	*($4 + [280]) = $11
	$10 = *($9)
	*((($4 + [312]) + [8])) = $10
	*(($4 + [80])) = $10
	*($4 + [56]) = $0
	*($4 + [64]) = $1
	$1 = *($4 + [296])
	*($4 + [72]) = $1
	*($4 + [312]) = $1
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [328]) = [8974]
	*($4 + [332]) = CALL $139([8974])
	*($4 + [32]) = *($4 + [328])
	$0 = *(CALL $2(($4 + [312]), ($4 + [32])))
	*($4 + [328]) = [8974]
	*($4 + [332]) = CALL $139([8974])
	*($4 + [24]) = *($4 + [328])
	CALL $2(($4 + [312]), ($4 + [24]))
	*(($4 + [176])) = (int_64)6138663577826885632
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*($4 + [168]) = $0
	*($3) = *($8)
	*($4 + [280]) = *($4 + [248])
	$0 = *($4 + [240])
	$1 = *($4 + [232])
	$11 = *($4 + [224])
	$12 = *($4 + [264])
	$13 = *($4 + [272])
	*($9) = *($3)
	*($4 + [296]) = *($4 + [280])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$14 = *((($4 + [296]) + [8]))
	*((($4 + [312]) + [8])) = $14
	*((($4 + [8]) + [8])) = $14
	$14 = *($4 + [296])
	*($4 + [8]) = $14
	*($4 + [312]) = $14
	CALL void $3((int_32 $11), (int_64 $1), (int_64 $0), (int_64 ($4 + [8])), (int_32 $12), (int_64 $13), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $145($2)
	
.LABEL $label$5
	CALL $28(($4 + [56]))
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	$6 = ($global$0 - [192])
	$global$0 = $6
	*($6 + [176]) = $3
	*($6 + [184]) = $2
	*($6 + [168]) = $4
	*($6 + [160]) = $5
	CALL require_auth(*($0))
	$7 = ($0 + [72])
	$0 = CALL $65(($6 + [16]), CALL $64($7, $1, [9971]))
	*($6 + [4]) = ($6 + [176])
	*($6) = ($6 + [184])
	*($6 + [8]) = ($6 + [168])
	*($6 + [12]) = ($6 + [160])
	CALL $66($7, $0, $1, $6)
	CALL $67($0)
	$global$0 = ($6 + [192])
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [184]) = (int_64)0
	*($4 + [176]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8543])
	CALL memcpy(($4 + [176]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8543])
	CALL memcpy((($4 + [176]) + [8]), ($2 + [8]), [8])
	*(($4 + [44])) = ($2 + [16])
	*(($4 + [48])) = ($2 + $7)
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [192]) = [8974]
	*($4 + [196]) = CALL $139([8974])
	*($4 + [16]) = *($4 + [192])
	$0 = *(CALL $2(($4 + [200]), ($4 + [16])))
	*($4 + [192]) = [8974]
	*($4 + [196]) = CALL $139([8974])
	*($4 + [8]) = *($4 + [192])
	CALL $2(($4 + [200]), ($4 + [8]))
	*(($4 + [144])) = (int_64)6138663577826885632
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*($4 + [136]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [184])
	$1 = *($4 + [176])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $145($2)
	
.LABEL $label$5
	CALL $28(($4 + [24]))
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_64 $5, float_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = ($global$0 - [192])
	$global$0 = $7
	*($7 + [176]) = $2
	*($7 + [184]) = $1
	*($7 + [168]) = $3
	*($7 + [160]) = $5
	*($7 + [152]) = $6
	CALL require_auth($1)
	*((($7 + [112]) + [32])) = [0]
	*($7 + [128]) = (int_64)-1
	*($7 + [136]) = (int_64)0
	$5 = *($0)
	*($7 + [112]) = $5
	*($7 + [120]) = $5
	$9 = CALL $37(($7 + [112]), $1, [9005])
	*(($8 = (($7 + [88]) + [8]))) = *(($9 + [8]))
	$5 = *(($9 + [16]))
	*((($7 + [88]) + [16])) = $5
	*($7 + [88]) = *($9)
	CALL eosio_assert(((int_64)$5 == (int_64)*($4 + [8])), [9040])
	CALL eosio_assert(((int_64)*($8) >= (int_64)*($4)), [9021])
	$5 = *($0)
	*($7 + [48]) = $4
	CALL $38(($7 + [112]), ($7 + [88]), $5, ($7 + [48]))
	*((($7 + [48]) + [32])) = [0]
	*($7 + [56]) = $2
	*($7 + [64]) = (int_64)-1
	*($7 + [72]) = (int_64)0
	*($7 + [48]) = *($0)
	*($7 + [40]) = $4
	*($7 + [20]) = ($7 + [184])
	*($7 + [16]) = ($7 + [48])
	*($7 + [24]) = ($7 + [176])
	*($7 + [28]) = ($7 + [168])
	*($7 + [32]) = ($7 + [160])
	*($7 + [36]) = ($7 + [152])
	CALL $39(($7 + [8]), ($7 + [48]), $1, ($7 + [16]))
	$9 = *($7 + [72])
	if ( ($9 == 0) ){ goto $label$1 }
	$8 = ($7 + [76])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	CALL _ZdlPv($0)
	
.LABEL $label$5
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($7 + [72]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $9
	
.LABEL $label$2
	*($8) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$9 = *($7 + [136])
	if ( ($9 == 0) ){ goto $label$6 }
	$8 = ($7 + [140])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($7 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $9
	
.LABEL $label$7
	*($8) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$global$0 = ($7 + [192])
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [208]) + [24]))) = (int_64)0
	*((($4 + [208]) + [40])) = [0]
	*($4 + [216]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [196]) = $2
	*($4 + [192]) = $2
	*($4 + [200]) = ($2 + $7)
	*($4 + [288]) = ($4 + [192])
	*($4 + [40]) = ($4 + [208])
	CALL $27(($4 + [40]), ($4 + [288]))
	*(($3 = (($4 + [24]) + [8]))) = *($4 + [200])
	*($4 + [24]) = *($4 + [192])
	$9 = *($3)
	*((($4 + [256]) + [8])) = $9
	*(($3 = (($4 + [272]) + [8]))) = $9
	$10 = *($4 + [24])
	*($4 + [272]) = $10
	*($4 + [256]) = $10
	$11 = *($3)
	*(($9 = (($4 + [288]) + [8]))) = $11
	*((($4 + [40]) + [24])) = $11
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$1 = *($4 + [272])
	*($4 + [56]) = $1
	*($4 + [288]) = $1
	*((($4 + [40]) + [40])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*($4 + [312]) = [8974]
	*($4 + [316]) = CALL $139([8974])
	*($4 + [16]) = *($4 + [312])
	$0 = *(CALL $2(($4 + [288]), ($4 + [16])))
	*($4 + [312]) = [8974]
	*($4 + [316]) = CALL $139([8974])
	*($4 + [8]) = *($4 + [312])
	CALL $2(($4 + [288]), ($4 + [8]))
	*(($4 + [160])) = (int_64)6138663577826885632
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = $0
	*($3) = *($8)
	*($4 + [272]) = *($4 + [224])
	$0 = *($4 + [216])
	$1 = *($4 + [208])
	$8 = CALL $132(($4 + [256]), ($4 + [240]))
	*($9) = *($3)
	*($4 + [312]) = $1
	*($4 + [304]) = $0
	*($4 + [288]) = *($4 + [272])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [312])), (int_32 ($4 + [304])), (int_32 ($4 + [288])), (int_32 $8), (int_32 $6))
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $145($2)
	
.LABEL $label$6
	CALL $28(($4 + [40]))
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [248])))
	
.LABEL $label$7
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$10($1), [9914])
	CALL eosio_assert(CALL $fimport$10($2), [9914])
	*((($3 + [104]) + [32])) = [0]
	*($3 + [112]) = $2
	*($3 + [120]) = (int_64)-1
	*($3 + [128]) = (int_64)0
	*($3 + [104]) = *($0)
	$0 = CALL $60(($3 + [104]), $1, [9930])
	*(($3 + [48])) = *(($0 + [48]))
	*(($3 + [40])) = *(($0 + [40]))
	*(($3 + [32])) = *(($0 + [32]))
	*(($3 + [24])) = *(($0 + [24]))
	*(($3 + [16])) = *(($0 + [16]))
	*($3) = *($0)
	*($3 + [8]) = *(($0 + [8]))
	$4 = CALL $132(($3 + [56]), ($0 + [56]))
	$5 = CALL $132(($3 + [68]), ($0 + [68]))
	*($3 + [80]) = *($0 + [80])
	CALL $61(($3 + [104]), $3)
	if ( (*($5) & [1]) ){ goto $label$5 }
	if ( (*($4) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [76])))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($3 + [64])))
	$5 = *($3 + [128])
	if ( ($5 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($3 + [128])
	if ( $5 ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$1
	$6 = ($3 + [132])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	if ( ((*($0 + [68]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($0 + [76])))
	
.LABEL $label$10
	if ( ((*($0 + [56]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($0 + [64])))
	
.LABEL $label$11
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$8 }
	$0 = *(($3 + [128]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $5
	
.LABEL $label$6
	*($6) = $5
	CALL _ZdlPv($0)
	$global$0 = ($3 + [144])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8299])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8404])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8337])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8404])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	$5 = ($global$0 - [64])
	$global$0 = $5
	*($5 + [56]) = [8456]
	*($5 + [60]) = CALL $139([8456])
	*($5) = *($5 + [56])
	$6 = CALL $2(($5 + [16]), $5)
	if ( ((int_64)*($2) != (int_64)*($6)) ){ goto $label$1 }
	*(($5 + [48])) = [0]
	*($5 + [32]) = (int_64)-1
	*($5 + [40]) = (int_64)0
	$7 = *($0)
	*($5 + [16]) = $7
	*($5 + [24]) = $7
	$2 = CALL db_find_i64($7, $7, (int_64)-5003315192965103616, *($1))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $29(($5 + [16]), $2)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)($5 + [16])), [8469])
	$7 = *($0)
	*($5 + [56]) = $3
	CALL eosio_assert([1], [8548])
	CALL $30(($5 + [16]), $2, $7, ($5 + [56]))
	$0 = *($5 + [40])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = *($0)
	*($5 + [60]) = $1
	*($5 + [56]) = $3
	CALL $31(($5 + [8]), ($5 + [16]), $7, ($5 + [56]))
	$0 = *($5 + [40])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = ($5 + [44])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	CALL _ZdlPv($6)
	
.LABEL $label$7
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($5 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $0
	
.LABEL $label$4
	*($1) = $0
	CALL _ZdlPv($2)
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [64])
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL memory()
	*($3 + [224]) = [8192]
	*($3 + [228]) = CALL $139([8192])
	*($3 + [112]) = *($3 + [224])
	CALL $2(($3 + [232]), ($3 + [112]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [224]) = [8201]
	*($3 + [228]) = CALL $139([8201])
	*($3 + [104]) = *($3 + [224])
	CALL $2(($3 + [232]), ($3 + [104]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [1]
	*($3 + [96]) = *($3 + [216])
	CALL $4($0, (int_64)6138663591592764928, ($3 + [96]))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$10 }
	if ( ((int_64)$2 > (int_64)-2764395866176356353) ){ goto $label$13 }
	if ( ((int_64)$2 > (int_64)-4848572804388540929) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-5001342339331915776) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-5000768798908323472) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-4848572804388640464) ){ goto $label$10 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [2]
	*($3 + [64]) = *($3 + [144])
	CALL $6($1, $1, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$13
	if ( ((int_64)$2 > (int_64)3849304916161986559) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-2764395866176356352) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)3607571210280370176) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)3626371159920361472) ){ goto $label$10 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [3]
	*($3 + [8]) = *($3 + [200])
	CALL $8($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-4848572804388540928) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-3112731855308193792) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-3075276126730321920) ){ goto $label$10 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [4]
	*($3 + [80]) = *($3 + [128])
	CALL $10($1, $1, ($3 + [80]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)3849304916161986560) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)4730614998230892544) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)8426423898551091200) ){ goto $label$10 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [5]
	*($3 + [32]) = *($3 + [176])
	CALL $12($1, $1, ($3 + [32]))
	
.LABEL $label$10
	CALL eosio_exit([0])
	
.LABEL $label$9
	*($3 + [172]) = [0]
	*($3 + [168]) = [6]
	*($3 + [40]) = *($3 + [168])
	CALL $14($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$8
	*($3 + [164]) = [0]
	*($3 + [160]) = [7]
	*($3 + [48]) = *($3 + [160])
	CALL $16($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$7
	*($3 + [124]) = [0]
	*($3 + [120]) = [8]
	*($3 + [88]) = *($3 + [120])
	CALL $18($1, $1, ($3 + [88]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [212]) = [0]
	*($3 + [208]) = [9]
	*($3) = *($3 + [208])
	CALL $20($1, $1, $3)
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [156]) = [0]
	*($3 + [152]) = [10]
	*($3 + [56]) = *($3 + [152])
	CALL $22($1, $1, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$4
	*($3 + [140]) = [0]
	*($3 + [136]) = [11]
	*($3 + [72]) = *($3 + [136])
	CALL $24($1, $1, ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$3
	*($3 + [196]) = [0]
	*($3 + [192]) = [12]
	*($3 + [16]) = *($3 + [192])
	CALL $24($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$2
	*($3 + [188]) = [0]
	*($3 + [184]) = [13]
	*($3 + [24]) = *($3 + [184])
	CALL $20($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [184]) + [16]))) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [184]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8543])
	CALL memcpy(($4 + [184]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [8543])
	CALL memcpy((($4 + [184]) + [8]), ($2 + [8]), [8])
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [8543])
	CALL memcpy(($4 + [32]), ($2 + [16]), [8])
	*($3) = *($4 + [32])
	*(($4 + [52])) = ($2 + [24])
	*((($4 + [32]) + [24])) = ($2 + $7)
	*(($4 + [72])) = $0
	*(($4 + [80])) = (int_64)-1
	*(($4 + [88])) = (int_64)0
	*(($4 + [96])) = [0]
	*(($4 + [112])) = $0
	*(($4 + [120])) = (int_64)-1
	*(($4 + [128])) = (int_64)0
	*(($4 + [136])) = [0]
	*($4 + [40]) = $1
	*($4 + [32]) = $0
	*($4 + [48]) = $2
	*($4 + [64]) = $0
	*($4 + [104]) = $0
	*($4 + [224]) = [8974]
	*($4 + [228]) = CALL $139([8974])
	*($4 + [24]) = *($4 + [224])
	$0 = *(CALL $2(($4 + [240]), ($4 + [24])))
	*($4 + [224]) = [8974]
	*($4 + [228]) = CALL $139([8974])
	*($4 + [16]) = *($4 + [224])
	CALL $2(($4 + [240]), ($4 + [16]))
	*(($4 + [152])) = (int_64)6138663577826885632
	*(($4 + [160])) = (int_64)-1
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = [0]
	*($4 + [144]) = $0
	*(($8 = (($4 + [208]) + [8]))) = *($3)
	*($4 + [208]) = *($4 + [192])
	$0 = *($4 + [184])
	*((($4 + [224]) + [8])) = *($8)
	*($4 + [224]) = *($4 + [208])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$1 = *((($4 + [224]) + [8]))
	*((($4 + [240]) + [8])) = $1
	*(($4 + [8])) = $1
	$1 = *($4 + [224])
	*($4) = $1
	*($4 + [240]) = $1
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $145($2)
	
.LABEL $label$5
	CALL $28(($4 + [32]))
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $1
	CALL require_auth($1)
	$4 = ($0 + [32])
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [44]) == (int_32)$4), [8469])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)-2764395865996132352, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $57($4, $7)
	CALL eosio_assert(((int_32)*($8 + [44]) == (int_32)$4), [8469])
	
.LABEL $label$1
	CALL eosio_assert(($8 == 0), [9873])
	*($3 + [20]) = $2
	*($3 + [16]) = ($3 + [24])
	CALL $58(($3 + [8]), $4, $1, ($3 + [16]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [224])) = [0]
	*($4 + [208]) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [200]) = ($2 + $7)
	*($4 + [192]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8543])
	CALL memcpy(($4 + [208]), $2, [8])
	*($4 + [196]) = ($2 + [8])
	$8 = (($4 + [208]) + [8])
	CALL $44(($4 + [192]), $8)
	*(($3 = (($4 + [24]) + [8]))) = *($4 + [200])
	*($4 + [24]) = *($4 + [192])
	$3 = *($3)
	*((($4 + [232]) + [8])) = $3
	*(($9 = (($4 + [256]) + [8]))) = $3
	$10 = *($4 + [24])
	*($4 + [256]) = $10
	*($4 + [232]) = $10
	$3 = *($9)
	*((($4 + [272]) + [8])) = $3
	*(($4 + [64])) = $3
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$1 = *($4 + [256])
	*($4 + [56]) = $1
	*($4 + [272]) = $1
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*($4 + [248]) = [8974]
	*($4 + [252]) = CALL $139([8974])
	*($4 + [16]) = *($4 + [248])
	$0 = *(CALL $2(($4 + [272]), ($4 + [16])))
	*($4 + [248]) = [8974]
	*($4 + [252]) = CALL $139([8974])
	*($4 + [8]) = *($4 + [248])
	CALL $2(($4 + [272]), ($4 + [8]))
	*(($4 + [160])) = (int_64)6138663577826885632
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = $0
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [208])
	$8 = CALL $132(($4 + [256]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $132(($4 + [272]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [272]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [256]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $145($2)
	
.LABEL $label$5
	CALL $28(($4 + [40]))
	if ( ((*($4 + [216]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [224])))
	
.LABEL $label$10
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$7 = ($global$0 - [480])
	$global$0 = $7
	*($7 + [440]) = $1
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$10($2), [9914])
	$8 = CALL $65(($7 + [288]), CALL $64(($0 + [72]), $2, [9971]))
	if ( ((int_64)$6 <= (int_64)-1) ){ goto $label$2 }
	*(($7 + [280])) = [0]
	*($7 + [256]) = $2
	*($7 + [264]) = (int_64)-1
	*($7 + [272]) = (int_64)0
	*($7 + [248]) = *($0)
	CALL memcpy(($7 + [168]), CALL $33(($7 + [248]), $6, [8896]), [80])
	CALL eosio_assert(((uint_64)((int_64)*($7 + [232]) + (int_64)*($7 + [240])) > (uint_64)CALL $fimport$7()), [9990])
	*(($7 + [160])) = [0]
	*($7 + [152]) = (int_64)0
	$9 = CALL $139([10010])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$5 }
	*($7 + [152]) = ($9 << [1])
	$10 = (($7 + [152]) | [1])
	if ( $9 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$11 = (($9 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($7 + [152]) = ($11 | [1])
	*($7 + [160]) = $10
	*($7 + [156]) = $9
	
.LABEL $label$4
	CALL memcpy($10, [10010], $9)
	
.LABEL $label$3
	*(($10 + $9)) = [0]
	$1 = *($0)
	*($7 + [112]) = [9866]
	*($7 + [116]) = CALL $139([9866])
	*($7 + [24]) = *($7 + [112])
	$6 = *(CALL $2(($7 + [32]), ($7 + [24])))
	*($7 + [96]) = [8201]
	*($7 + [100]) = CALL $139([8201])
	*($7 + [16]) = *($7 + [96])
	$9 = CALL $2(($7 + [104]), ($7 + [16]))
	*($7 + [80]) = [8192]
	*($7 + [84]) = CALL $139([8192])
	*($7 + [8]) = *($7 + [80])
	$10 = CALL $2(($7 + [88]), ($7 + [8]))
	*((($7 + [32]) + [24])) = *(($7 + [216]))
	*($7 + [32]) = *($0)
	*($7 + [40]) = *($7 + [192])
	*($7 + [48]) = *($7 + [208])
	$11 = CALL $132((($7 + [32]) + [32]), ($7 + [152]))
	*(($12 = (($7 + [112]) + [24]))) = [0]
	*($7 + [128]) = (int_64)0
	*($7 + [112]) = *($9)
	*($7 + [120]) = *($10)
	*(($9 = CALL _Znwj([16]))) = $1
	*($9 + [8]) = $6
	*((($7 + [112]) + [36])) = [0]
	$10 = ($9 + [16])
	*($12) = $10
	*(($7 + [132])) = $10
	*($7 + [128]) = $9
	*($7 + [140 align=4]) = (int_64)0
	$9 = *($11)
	$10 = ( *((($7 + [32]) + [36])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($10 + [32])
	$1 = (CASTING uint_64)(uint_32 $10)
	$10 = ($7 + [140])
	
.LOOP $label$6:
	$9 = ($9 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$6 }
	if ( ($9 == 0) ){ goto $label$8 }
	CALL $54($10, $9)
	$10 = *(($7 + [144]))
	$9 = *(($7 + [140]))
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	$9 = [0]
	
.LABEL $label$7
	*($7 + [468]) = $9
	*($7 + [464]) = $9
	*($7 + [472]) = $10
	*($7 + [448]) = ($7 + [464])
	*($7 + [456]) = ($7 + [32])
	CALL $55(($7 + [456]), ($7 + [448]))
	CALL $56(($7 + [464]), ($7 + [112]))
	$9 = *($7 + [464])
	CALL send_inline($9, (*($7 + [468]) - $9))
	$9 = *($7 + [464])
	if ( ($9 == 0) ){ goto $label$9 }
	*($7 + [468]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$9
	$9 = *($7 + [140])
	if ( ($9 == 0) ){ goto $label$10 }
	*(($7 + [144])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = *($7 + [128])
	if ( ($9 == 0) ){ goto $label$11 }
	*(($7 + [132])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$11
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($7 + [72])))
	
.LABEL $label$12
	CALL $43(($7 + [248]), ($7 + [168]))
	if ( ((*($7 + [152]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($7 + [160]))
	
.LABEL $label$13
	$11 = *($7 + [272])
	if ( ($11 == 0) ){ goto $label$14 }
	$12 = ($7 + [276])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$16 }
	
.LOOP $label$17:
	$9 = ($9 + [-24])
	$10 = *($9)
	*($9) = [0]
	if ( ($10 == 0) ){ goto $label$18 }
	CALL _ZdlPv($10)
	
.LABEL $label$18
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$17 }
	$9 = *(($7 + [272]))
	goto $label$15 
	
.LABEL $label$16
	$9 = $11
	
.LABEL $label$15
	*($12) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$1 = *($7 + [440])
	
.LABEL $label$2
	*(($7 + [200])) = [0]
	*($7 + [184]) = (int_64)-1
	*($7 + [192]) = (int_64)0
	$6 = *($0)
	*($7 + [168]) = $6
	*($7 + [176]) = $2
	$9 = CALL db_find_i64($6, $2, (int_64)-2764395866098438144, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$21 }
	$9 = CALL $70(($7 + [168]), $9)
	CALL eosio_assert(((int_32)*($9 + [88]) == (int_32)($7 + [168])), [8469])
	$1 = *($7 + [440])
	*($7 + [36]) = $4
	*($7 + [32]) = $3
	*($7 + [40]) = $5
	CALL eosio_assert([1], [8548])
	CALL $71(($7 + [168]), $9, $1, ($7 + [32]))
	$11 = *($7 + [192])
	if ( $11 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	*($7 + [36]) = $3
	*($7 + [40]) = $4
	*($7 + [44]) = $5
	*($7 + [32]) = ($7 + [440])
	CALL $72(($7 + [248]), ($7 + [168]), $1, ($7 + [32]))
	$11 = *($7 + [192])
	if ( ($11 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$0 = ($7 + [196])
	$10 = *($0)
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$23 }
	
.LOOP $label$24:
	$10 = ($10 + [-24])
	$9 = *($10)
	*($10) = [0]
	if ( ($9 == 0) ){ goto $label$25 }
	if ( ((*($9 + [68]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($9 + [76])))
	
.LABEL $label$26
	if ( ((*($9 + [56]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($9 + [64])))
	
.LABEL $label$27
	CALL _ZdlPv($9)
	
.LABEL $label$25
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$24 }
	$9 = *(($7 + [192]))
	goto $label$22 
	
.LABEL $label$23
	$9 = $11
	
.LABEL $label$22
	*($0) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$19
	CALL $67($8)
	$global$0 = ($7 + [480])
	return (unreachable)
	
.LABEL $label$1
	CALL $131(($7 + [152]))
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [216]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [196]) = $2
	*($4 + [192]) = $2
	*($4 + [200]) = ($2 + $7)
	*($4 + [280]) = ($4 + [192])
	*($4 + [40]) = ($4 + [208])
	CALL $63(($4 + [40]), ($4 + [280]))
	*(($3 = (($4 + [24]) + [8]))) = *($4 + [200])
	*($4 + [24]) = *($4 + [192])
	$3 = *($3)
	*((($4 + [248]) + [8])) = $3
	*(($8 = (($4 + [264]) + [8]))) = $3
	$9 = *($4 + [24])
	*($4 + [264]) = $9
	*($4 + [248]) = $9
	$3 = *($8)
	*((($4 + [280]) + [8])) = $3
	*(($4 + [64])) = $3
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$1 = *($4 + [264])
	*($4 + [56]) = $1
	*($4 + [280]) = $1
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*($4 + [296]) = [8974]
	*($4 + [300]) = CALL $139([8974])
	*($4 + [16]) = *($4 + [296])
	$0 = *(CALL $2(($4 + [280]), ($4 + [16])))
	*($4 + [296]) = [8974]
	*($4 + [300]) = CALL $139([8974])
	*($4 + [8]) = *($4 + [296])
	CALL $2(($4 + [280]), ($4 + [8]))
	*(($4 + [160])) = (int_64)6138663577826885632
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = $0
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [240])
	$1 = *($4 + [232])
	$9 = *($4 + [224])
	$10 = *($4 + [216])
	$11 = *($4 + [208])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $11), (int_64 $10), (int_64 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $145($2)
	
.LABEL $label$5
	CALL $28(($4 + [40]))
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($1))
	$3 = *($1 + [8])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = uint_32($3 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($1 + [12]))
	
.LABEL $label$1
	CALL eosio_assert(($3 <= [33]), [9557])
	$3 = *($1 + [20])
	if ( ($3 & [1]) ){ goto $label$4 }
	$3 = uint_32($3 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *(($1 + [24]))
	
.LABEL $label$3
	CALL eosio_assert(($3 <= [1025]), [9572])
	$3 = *($1 + [32])
	if ( ($3 & [1]) ){ goto $label$6 }
	$3 = uint_32($3 >> [1])
	goto $label$5 
	
.LABEL $label$6
	$3 = *(($1 + [36]))
	
.LABEL $label$5
	CALL eosio_assert(($3 <= [129]), [9593])
	$3 = *($1 + [44])
	if ( ($3 & [1]) ){ goto $label$8 }
	$3 = uint_32($3 >> [1])
	goto $label$7 
	
.LABEL $label$8
	$3 = *(($1 + [48]))
	
.LABEL $label$7
	CALL eosio_assert(($3 <= [129]), [9618])
	$3 = *($1 + [56])
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = uint_32($3 >> [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *(($1 + [60]))
	
.LABEL $label$9
	CALL eosio_assert(($3 <= [129]), [9639])
	$4 = ($1 + [72])
	CALL eosio_assert((((int_32)(*($4) - *($1 + [68])) / (int_32)[12]) <= [11]), [9657])
	$5 = *($4)
	$3 = *($1 + [68])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *($3)
	if ( ($4 & [1]) ){ goto $label$14 }
	$4 = uint_32($4 >> [1])
	goto $label$13 
	
.LABEL $label$14
	$4 = *(($3 + [4]))
	
.LABEL $label$13
	CALL eosio_assert(($4 <= [17]), [9686])
	$3 = ($3 + [12])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$11
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$3 = CALL $139([9719])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$23 }
	*($2 + [8]) = ($3 << [1])
	$4 = (($2 + [8]) | [1])
	if ( $3 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [8]) = ($5 | [1])
	*($2 + [16]) = $4
	*($2 + [12]) = $3
	
.LABEL $label$22
	CALL memcpy($4, [9719], $3)
	
.LABEL $label$21
	*(($4 + $3)) = [0]
	*(($2 + [28])) = [0]
	*($2 + [20 align=4]) = (int_64)0
	$4 = ($2 + [20])
	$3 = CALL $139([9724])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$26 }
	*(($2 + [20])) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*(($2 + [28])) = $4
	*((($2 + [8]) + [16])) = $3
	*($2 + [20]) = ($5 | [1])
	
.LABEL $label$25
	CALL memcpy($4, [9724], $3)
	
.LABEL $label$24
	*(($4 + $3)) = [0]
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$4 = ($2 + [32])
	$3 = CALL $139([9733])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$29 }
	*(($2 + [32])) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*(($2 + [40])) = $4
	*(($2 + [36])) = $3
	*($2 + [32]) = ($5 | [1])
	
.LABEL $label$28
	CALL memcpy($4, [9733], $3)
	
.LABEL $label$27
	*(($4 + $3)) = [0]
	$6 = CALL _Znwj([36])
	CALL $132($6, ($2 + [8]))
	CALL $132(($6 + [12]), (($2 + [8]) + [12]))
	CALL $132(($6 + [24]), (($2 + [8]) + [24]))
	if ( (*($2 + [32]) & [1]) ){ goto $label$31 }
	if ( (*($2 + [20]) & [1]) ){ goto $label$30 }
	goto $label$17 
	
.LABEL $label$31
	CALL _ZdlPv(*(($2 + [40])))
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$30
	CALL _ZdlPv(*(($2 + [28])))
	if ( (*($2 + [8]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$20
	CALL $131(($2 + [8]))
	
.LABEL $label$19
	CALL $131($4)
	
.LABEL $label$18
	CALL $131($4)
	
.LABEL $label$17
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*($2 + [16]))
	
.LABEL $label$15
	$7 = *(($1 + [84]))
	$3 = *($1 + [80])
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$32 }
	$8 = ($6 + [25])
	$9 = ($6 + [13])
	$10 = ($6 + [1])
	$11 = ($6 + [4])
	$12 = ($6 + [8])
	$13 = ($6 + [16])
	$14 = ($6 + [20])
	$15 = ($6 + [28])
	
.LOOP $label$33:
	$16 = ($3 + [33])
	$4 = ($4 & [1])
	$4 = *($3 + [32])
	$19 = ($3 + [36])
	$5 = ($4 & [1])
	$4 = *($6)
	$17 = uint_32($4 >> [1])
	$18 = ( *($11) ? $17 : $5 )
	if ( ((int_32)$18 != (int_32)( *($19) ? uint_32($4 >> [1]) : $4 )) ){ goto $label$41 }
	$4 = ( *(($3 + [40])) ? $16 : $4 )
	if ( $5 ){ goto $label$42 }
	if ( ($18 == 0) ){ goto $label$40 }
	$18 = ([0] - $17)
	$5 = $10
	
.LOOP $label$43:
	if ( ((int_32)*($5) != (int_32)*($4)) ){ goto $label$41 }
	$17 = [1]
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	$18 = ($18 + [1])
	if ( $18 ){ goto $label$43 }
	goto $label$37 
	
.LABEL $label$42
	$17 = [1]
	if ( ($18 == 0) ){ goto $label$37 }
	if ( (CALL $138(( *($12) ? $10 : $5 ), $4, $18) == 0) ){ goto $label$37 }
	
.LABEL $label$41
	$4 = ($4 & [1])
	$20 = ($3 + [32])
	$4 = *($20)
	$18 = ($4 & [1])
	$4 = *(($6 + [12]))
	$17 = uint_32($4 >> [1])
	$5 = ( *($13) ? $17 : $18 )
	if ( ((int_32)$5 != (int_32)( *($19) ? uint_32($4 >> [1]) : $4 )) ){ goto $label$44 }
	$4 = ( *(($3 + [40])) ? $16 : $4 )
	if ( $18 ){ goto $label$45 }
	if ( ($5 == 0) ){ goto $label$40 }
	$18 = ([0] - $17)
	$5 = $9
	
.LOOP $label$46:
	if ( ((int_32)*($5) != (int_32)*($4)) ){ goto $label$44 }
	$17 = [1]
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	$18 = ($18 + [1])
	if ( $18 ){ goto $label$46 }
	goto $label$37 
	
.LABEL $label$45
	$17 = [1]
	if ( ($5 == 0) ){ goto $label$37 }
	if ( (CALL $138(( *($14) ? $9 : $18 ), $4, $5) == 0) ){ goto $label$37 }
	
.LABEL $label$44
	$4 = ($4 & [1])
	$4 = *($20)
	$5 = ($4 & [1])
	$4 = *(($6 + [24]))
	$17 = uint_32($4 >> [1])
	$18 = ( *($15) ? $17 : $5 )
	if ( ((int_32)$18 != (int_32)( *($19) ? uint_32($4 >> [1]) : $4 )) ){ goto $label$38 }
	$4 = ( *(($3 + [40])) ? $16 : $4 )
	if ( $5 ){ goto $label$39 }
	if ( ($18 == 0) ){ goto $label$40 }
	$18 = ([0] - $17)
	$5 = $8
	
.LOOP $label$47:
	if ( ((int_32)*($5) != (int_32)*($4)) ){ goto $label$38 }
	$17 = [1]
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	$18 = ($18 + [1])
	if ( $18 ){ goto $label$47 }
	goto $label$37 
	
.LABEL $label$40
	CALL eosio_assert([1], [9738])
	$4 = *($3 + [8])
	if ( (($4 & [1]) == 0) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$39
	$17 = [1]
	if ( ($18 == 0) ){ goto $label$37 }
	if ( (CALL $138(( *(($6 + [32])) ? $8 : $5 ), $4, $18) == 0) ){ goto $label$37 }
	
.LABEL $label$38
	$17 = [0]
	
.LABEL $label$37
	CALL eosio_assert($17, [9738])
	$4 = *($3 + [8])
	if ( ($4 & [1]) ){ goto $label$35 }
	
.LABEL $label$36
	$4 = uint_32($4 >> [1])
	goto $label$34 
	
.LABEL $label$35
	$4 = *(($3 + [12]))
	
.LABEL $label$34
	CALL eosio_assert(($4 <= [257]), [9756])
	$4 = *($3 + [20])
	if ( ($4 & [1]) ){ goto $label$49 }
	$4 = uint_32($4 >> [1])
	goto $label$48 
	
.LABEL $label$49
	$4 = *(($3 + [24]))
	
.LABEL $label$48
	CALL eosio_assert(($4 <= [513]), [9783])
	$3 = ($3 + [48])
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$33 }
	
.LABEL $label$32
	$18 = ($0 + [72])
	$21 = *($1)
	$4 = *(($0 + [100]))
	$17 = *(($0 + [96]))
	if ( ((int_32)$17 == (int_32)$4) ){ goto $label$54 }
	
.LOOP $label$56:
	$3 = ($4 + [-24])
	$5 = *($3)
	if ( ((int_64)*($5) == (int_64)$21) ){ goto $label$55 }
	$4 = $3
	if ( ((int_32)$17 != (int_32)$3) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$55
	if ( ((int_32)$17 == (int_32)$4) ){ goto $label$54 }
	CALL eosio_assert(((int_32)*($5 + [144]) == (int_32)$18), [8469])
	goto $label$53 
	
.LABEL $label$54
	$3 = CALL db_find_i64(*($18), *(($0 + [80])), (int_64)5308437740856016896, $21)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$52 }
	$5 = CALL $49($18, $3)
	CALL eosio_assert(((int_32)*($5 + [144]) == (int_32)$18), [8469])
	
.LABEL $label$53
	$21 = *($1)
	*($2 + [8]) = $1
	CALL eosio_assert([1], [8548])
	CALL $50($18, $5, $21, ($2 + [8]))
	if ( ($6 == 0) ){ goto $label$50 }
	goto $label$51 
	
.LABEL $label$52
	$21 = *($1)
	*($2) = $1
	CALL $51(($2 + [8]), $18, $21, $2)
	if ( ($6 == 0) ){ goto $label$50 }
	
.LABEL $label$51
	if ( (*($6 + [24]) & [1]) ){ goto $label$61 }
	if ( (*($6 + [12]) & [1]) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	CALL _ZdlPv(*($6 + [32]))
	if ( ((*($6 + [12]) & [1]) == 0) ){ goto $label$59 }
	
.LABEL $label$60
	CALL _ZdlPv(*($6 + [20]))
	if ( (*($6) & [1]) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$59
	if ( ((*($6) & [1]) == 0) ){ goto $label$57 }
	
.LABEL $label$58
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$57
	CALL _ZdlPv($6)
	
.LABEL $label$50
	$global$0 = ($2 + [48])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [512])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL memset(($4 + [200]), [0], [96])
	*(($4 + [216])) = (int_64)0
	*((($4 + [200]) + [24])) = (int_64)0
	*((($4 + [200]) + [40])) = (int_64)0
	*((($4 + [200]) + [48])) = (int_64)0
	*((($4 + [200]) + [64])) = (int_64)0
	*(($4 + [272])) = (int_64)0
	*((($4 + [200]) + [88])) = [0]
	*($4 + [200]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [192]) = ($2 + $7)
	*($4 + [184]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8543])
	CALL memcpy(($4 + [200]), $2, [8])
	*($4 + [188]) = ($2 + [8])
	CALL $46(CALL $45(CALL $44(CALL $44(CALL $44(CALL $44(CALL $44(($4 + [184]), (($4 + [200]) + [8])), ($4 + [220])), ($4 + [232])), ($4 + [244])), (($4 + [200]) + [56])), ($4 + [268])), (($4 + [200]) + [80]))
	*(($3 = (($4 + [16]) + [8]))) = *($4 + [192])
	*($4 + [16]) = *($4 + [184])
	$3 = *($3)
	*((($4 + [296]) + [8])) = $3
	*(($8 = (($4 + [320]) + [8]))) = $3
	$9 = *($4 + [16])
	*($4 + [320]) = $9
	*($4 + [296]) = $9
	$3 = *($8)
	*((($4 + [416]) + [8])) = $3
	*((($4 + [32]) + [24])) = $3
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$1 = *($4 + [320])
	*($4 + [48]) = $1
	*($4 + [416]) = $1
	*((($4 + [32]) + [40])) = $0
	*((($4 + [32]) + [48])) = (int_64)-1
	*((($4 + [32]) + [56])) = (int_64)0
	*((($4 + [32]) + [64])) = [0]
	*((($4 + [32]) + [80])) = $0
	*((($4 + [32]) + [88])) = (int_64)-1
	*((($4 + [32]) + [96])) = (int_64)0
	*(($4 + [136])) = [0]
	*($4 + [64]) = $0
	*($4 + [104]) = $0
	*($4 + [312]) = [8974]
	*($4 + [316]) = CALL $139([8974])
	*($4 + [8]) = *($4 + [312])
	$0 = *(CALL $2(($4 + [416]), ($4 + [8])))
	*($4 + [312]) = [8974]
	*($4 + [316]) = CALL $139([8974])
	*($4) = *($4 + [312])
	CALL $2(($4 + [416]), $4)
	*(($4 + [152])) = (int_64)6138663577826885632
	*(($4 + [160])) = (int_64)-1
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = [0]
	*($4 + [144]) = $0
	$8 = (($4 + [32]) + int_32($5 >> [1]))
	$3 = CALL $47(($4 + [320]), ($4 + [200]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	$5 = CALL $47(($4 + [416]), $3)
	CALL void $8((int_32 $5), (int_32 $6))
	CALL $48($5)
	CALL $48($3)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $145($2)
	
.LABEL $label$5
	CALL $28(($4 + [32]))
	CALL $48(($4 + [200]))
	$global$0 = ($4 + [512])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [256])
	$global$0 = $3
	*(($3 + [216])) = [0]
	*($3 + [200]) = (int_64)-1
	*($3 + [208]) = (int_64)0
	$4 = *($0)
	*($3 + [184]) = $4
	*($3 + [192]) = $4
	$6 = CALL $37(($3 + [184]), $1, [9809])
	*(($5 = (($3 + [160]) + [8]))) = *(($6 + [8]))
	$4 = *(($6 + [16]))
	*((($3 + [160]) + [16])) = $4
	*($3 + [160]) = *($6)
	$6 = ((int_64)$4 == (int_64)*($2 + [8]))
	CALL eosio_assert($6, [9040])
	$7 = *($2)
	$4 = *($5)
	CALL eosio_assert(((int_64)$4 >= (int_64)$7), [9827])
	CALL eosio_assert($6, [9040])
	if ( ((int_64)$4 != (int_64)$7) ){ goto $label$2 }
	CALL $52(($3 + [184]), ($3 + [160]))
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	*($3 + [24]) = $2
	CALL $53(($3 + [184]), ($3 + [160]), $4, ($3 + [24]))
	
.LABEL $label$1
	*(($3 + [152])) = [0]
	*($3 + [144]) = (int_64)0
	$6 = CALL $139([9846])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$9 }
	*($3 + [144]) = ($6 << [1])
	$5 = (($3 + [144]) | [1])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$8 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($3 + [144]) = ($8 | [1])
	*($3 + [152]) = $5
	*($3 + [148]) = $6
	
.LABEL $label$8
	CALL memcpy($5, [9846], $6)
	
.LABEL $label$7
	*(($5 + $6)) = [0]
	$4 = *($0)
	*($3 + [104]) = [9866]
	*($3 + [108]) = CALL $139([9866])
	*($3 + [16]) = *($3 + [104])
	$7 = *(CALL $2(($3 + [24]), ($3 + [16])))
	*($3 + [88]) = [8201]
	*($3 + [92]) = CALL $139([8201])
	*($3 + [8]) = *($3 + [88])
	$6 = CALL $2(($3 + [96]), ($3 + [8]))
	*($3 + [72]) = [8192]
	*($3 + [76]) = CALL $139([8192])
	*($3) = *($3 + [72])
	$5 = CALL $2(($3 + [80]), $3)
	*((($3 + [24]) + [24])) = *(($2 + [8]))
	*($3 + [32]) = $1
	*($3 + [24]) = *($0)
	*($3 + [40]) = *($2)
	$2 = CALL $132((($3 + [24]) + [32]), ($3 + [144]))
	*($3 + [104]) = *($6)
	*($3 + [112]) = *($5)
	*(($6 = CALL _Znwj([16]))) = $4
	*($6 + [8]) = $7
	*((($3 + [104]) + [36])) = [0]
	$0 = ($6 + [16])
	*((($3 + [104]) + [24])) = $0
	*(($3 + [124])) = $0
	*($3 + [120]) = $6
	*($3 + [132 align=4]) = (int_64)0
	$6 = *($2)
	$2 = ( *((($3 + [24]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($2 + [32])
	$1 = (CASTING uint_64)(uint_32 $2)
	$2 = ($3 + [132])
	
.LOOP $label$10:
	$6 = ($6 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$10 }
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $54($2, $6)
	$2 = *(($3 + [136]))
	$6 = *(($3 + [132]))
	goto $label$11 
	
.LABEL $label$12
	$2 = [0]
	$6 = [0]
	
.LABEL $label$11
	*($3 + [244]) = $6
	*($3 + [240]) = $6
	*($3 + [248]) = $2
	*($3 + [224]) = ($3 + [240])
	*($3 + [232]) = ($3 + [24])
	CALL $55(($3 + [232]), ($3 + [224]))
	CALL $56(($3 + [240]), ($3 + [104]))
	$6 = *($3 + [240])
	CALL send_inline($6, (*($3 + [244]) - $6))
	$6 = *($3 + [240])
	if ( ($6 == 0) ){ goto $label$13 }
	*($3 + [244]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$13
	$6 = *($3 + [132])
	if ( ($6 == 0) ){ goto $label$14 }
	*(($3 + [136])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$14
	$6 = *($3 + [120])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($3 + [124])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$15
	if ( (*($3 + [56]) & [1]) ){ goto $label$17 }
	if ( (*($3 + [144]) & [1]) ){ goto $label$16 }
	goto $label$5 
	
.LABEL $label$17
	CALL _ZdlPv(*(($3 + [64])))
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$16
	CALL _ZdlPv(*($3 + [152]))
	$0 = *($3 + [208])
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	CALL $131(($3 + [144]))
	
.LABEL $label$5
	$0 = *($3 + [208])
	if ( $0 ){ goto $label$3 }
	
.LABEL $label$4
	$global$0 = ($3 + [256])
	return 
	
.LABEL $label$3
	$5 = ($3 + [212])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$19 }
	
.LOOP $label$20:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$21 }
	CALL _ZdlPv($2)
	
.LABEL $label$21
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$20 }
	$6 = *(($3 + [208]))
	goto $label$18 
	
.LABEL $label$19
	$6 = $0
	
.LABEL $label$18
	*($5) = $0
	CALL _ZdlPv($6)
	$global$0 = ($3 + [256])
	(unreachable)
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8520])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [48]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [80]) = $0
	CALL $84(($3 + [32]), $5)
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $85(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [352])
	$global$0 = $3
	*(($4 = $3) + [288]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [208]) + [40])) = (int_64)0
	*(($4 + [240])) = (int_64)0
	*((($4 + [208]) + [24])) = (int_64)0
	*((($4 + [208]) + [56])) = (int_64)0
	*((($4 + [208]) + [64])) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [196]) = $2
	*($4 + [192]) = $2
	*($4 + [200]) = ($2 + $5)
	*($4 + [328]) = ($4 + [192])
	*($4 + [40]) = ($4 + [208])
	CALL $68(($4 + [40]), ($4 + [328]))
	*(($3 = (($4 + [24]) + [8]))) = *($4 + [200])
	*($4 + [24]) = *($4 + [192])
	$3 = *($3)
	*((($4 + [296]) + [8])) = $3
	*(($6 = (($4 + [312]) + [8]))) = $3
	$7 = *($4 + [24])
	*($4 + [312]) = $7
	*($4 + [296]) = $7
	$3 = *($6)
	*((($4 + [328]) + [8])) = $3
	*((($4 + [40]) + [24])) = $3
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$1 = *($4 + [312])
	*($4 + [56]) = $1
	*($4 + [328]) = $1
	*((($4 + [40]) + [40])) = $0
	*(($4 + [88])) = (int_64)-1
	*((($4 + [40]) + [56])) = (int_64)0
	*((($4 + [40]) + [64])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*($4 + [344]) = [8974]
	*($4 + [348]) = CALL $139([8974])
	*($4 + [16]) = *($4 + [344])
	$0 = *(CALL $2(($4 + [328]), ($4 + [16])))
	*($4 + [344]) = [8974]
	*($4 + [348]) = CALL $139([8974])
	*($4 + [8]) = *($4 + [344])
	CALL $2(($4 + [328]), ($4 + [8]))
	*(($4 + [160])) = (int_64)6138663577826885632
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = $0
	*($4 + [332]) = ($4 + [288])
	*($4 + [328]) = ($4 + [40])
	CALL $69(($4 + [328]), ($4 + [208]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $145($2)
	
.LABEL $label$4
	CALL $28(($4 + [40]))
	if ( ((*($4 + [268]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [276])))
	
.LABEL $label$5
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [264])))
	
.LABEL $label$6
	$global$0 = ($4 + [352])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL require_auth($1)
	$5 = ($0 + [32])
	$6 = CALL $32($5, $1, [8876])
	*($4 + [128]) = *($6)
	$7 = CALL $132((($4 + [128]) + [8]), ($6 + [8]))
	*((($4 + [128]) + [36])) = (int_64)0
	*($4 + [160]) = [0]
	*($4 + [152]) = *($6 + [24])
	$8 = (*(($6 + [36])) - *($6 + [32]))
	if ( ($8 == 0) ){ goto $label$2 }
	$9 = int_32($8 >> [3])
	if ( ((uint_32)$9 >= (uint_32)[536870912]) ){ goto $label$1 }
	$8 = CALL _Znwj($8)
	*((($4 + [128]) + [32])) = $8
	*(($4 + [168])) = ($8 + ($9 << [3]))
	*(($9 = (($4 + [128]) + [36]))) = $8
	$10 = *(($6 + [32]))
	$6 = (*(($6 + [36])) - $10)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($8, $10, $6)
	*($9) = (*($9) + $6)
	
.LABEL $label$2
	*((($4 + [88]) + [32])) = [0]
	*($4 + [96]) = $2
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	*($4 + [88]) = *($0)
	CALL memcpy(($4 + [8]), CALL $33(($4 + [88]), $3, [8896]), [80])
	$2 = *($4 + [32])
	*($4 + [176]) = [8914]
	*($4 + [180]) = CALL $139([8914])
	*($4) = *($4 + [176])
	CALL $2(($4 + [184]), $4)
	if ( (int_64)($2 == 0) ){ goto $label$3 }
	CALL eosio_assert(((int_64)$2 == (int_64)$1), [8915])
	
.LABEL $label$3
	$2 = *($0)
	*($4 + [184]) = $0
	CALL $34($5, ($4 + [128]), $2, ($4 + [184]))
	CALL eosio_assert(((float_64)*(($4 + [152])) >= (float_64)*($4 + [40])), [8938])
	CALL $35(($4 + [88]), ($4 + [8]), $1, ($4 + [184]))
	$8 = *($4 + [112])
	if ( ($8 == 0) ){ goto $label$4 }
	$5 = ($4 + [116])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$7 }
	$6 = *(($4 + [112]))
	goto $label$5 
	
.LABEL $label$6
	$6 = $8
	
.LABEL $label$5
	*($5) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$4
	$6 = *($4 + [160])
	if ( ($6 == 0) ){ goto $label$9 }
	*(($4 + [164])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [144])))
	
.LABEL $label$10
	$global$0 = ($4 + [192])
	return (unreachable)
	
.LABEL $label$1
	CALL $136((($4 + [128]) + [32]))
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8825])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [44]) = $1
	CALL $114(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [48])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $81(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [36])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [9409])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [9454])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9504])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [32])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	$8 = *($5 + [32])
	if ( ($8 == 0) ){ goto $label$14 }
	*(($5 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [48]))
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [8583])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8629])
	$5 = *($1)
	CALL $102($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8680])
	*(($3 = $4)) = [0]
	CALL $103($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $104($3, $1)
	CALL db_update_i64(*($1 + [148]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8825])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([160]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56 align=4]) = (int_64)0
	*($3 + [64 align=4]) = (int_64)0
	*($3 + [72 align=4]) = (int_64)0
	*($3 + [120 align=4]) = (int_64)0
	*($3 + [128]) = [0]
	*($3 + [144]) = $1
	CALL $95(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [148])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $96(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $67($3)
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9409])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [9454])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9504])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8583])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8629])
	$5 = *($1)
	$6 = ($1 + [16])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($6)), [9099])
	$7 = (int_64)
	*($1 + [8]) = $7(*($1 + [8]) - *($3)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9147])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9169])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8680])
	CALL eosio_assert([1], [8819])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8819])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($6)
	CALL eosio_assert([1], [8819])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $136($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8583])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8629])
	$5 = *($1)
	*(($6 = $4)) = (int_64)0
	*($6 + [8]) = [0]
	$7 = *($3)
	$3 = (*(($1 + [36])) - *($1 + [32]))
	if ( ($3 == 0) ){ goto $label$3 }
	$8 = int_32($3 >> [3])
	if ( ((uint_32)$8 >= (uint_32)[536870912]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($6 + [8])) = ($3 + ($8 << [3]))
	*($6) = $3
	*($6 + [4]) = $3
	$9 = *(($1 + [32]))
	$8 = (*(($1 + [36])) - $9)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $9, $8)
	*($6 + [4]) = ($3 + $8)
	
.LABEL $label$3
	*($1 + [24]) = CALL $76($7, $6)
	$3 = *($6)
	if ( ($3 == 0) ){ goto $label$4 }
	*($6 + [4]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$8 = ($1 + [32])
	$9 = ($1 + [24])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8680])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [16])
	$10 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	$12 = *(($1 + [32]))
	$11 = *(($1 + [36]))
	$13 = ($11 - $12)
	$10 = (CASTING uint_64)(uint_32 int_32($13 >> [3]))
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$7 }
	$3 = (($13 & [-8]) + $3)
	
.LABEL $label$7
	if ( ($3 <= [513]) ){ goto $label$9 }
	$4 = CALL $142($3)
	goto $label$8 
	
.LABEL $label$9
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$8
	*($6) = $4
	*($6 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8819])
	CALL memcpy($4, $1, [8])
	*($6 + [4]) = ($4 + [8])
	$7 = CALL $77($6, $7)
	CALL eosio_assert(((int_32)(*($7 + [8]) - *($7 + [4])) > (int_32)[7]), [8819])
	CALL memcpy(*($7 + [4]), $9, [8])
	*($7 + [4]) = (*($7 + [4]) + [8])
	CALL $78($7, $8)
	CALL db_update_i64(*($1 + [48]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	CALL $145($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	
.LABEL $label$10
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $136($6)
	
.LABEL $label$1
	$global$0 = ($6 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $54($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8819])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8819])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $113(CALL $112($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8520])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([56])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [44]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8543])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	$6 = CALL $44(($3 + [32]), ($5 + [8]))
	CALL eosio_assert(((uint_32)(*($6 + [8]) - *($6 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy(($5 + [24]), *($6 + [4]), [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	CALL $80($6, ($5 + [32]))
	*($5 + [48]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $81(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [68]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [76])))
	
.LABEL $label$11
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$4 = *(*($0))
	$5 = ($4 + [8])
	$3 = ($1 + [36])
	$6 = (*($3) - $5)
	$7 = int_32($6 >> [3])
	$8 = *($0 + [4])
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memmove($4, $5, $6)
	
.LABEL $label$1
	$0 = ($4 + ($7 << [3]))
	*($3) = $0
	*($2) = (int_64)0
	*($2 + [8]) = [0]
	$0 = ($0 - *(($1 + [32])))
	if ( ($0 == 0) ){ goto $label$3 }
	$4 = int_32($0 >> [3])
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	$0 = CALL _Znwj($0)
	*(($2 + [8])) = ($0 + ($4 << [3]))
	*($2) = $0
	*($2 + [4]) = $0
	$6 = *(($1 + [32]))
	$4 = (*(($1 + [36])) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($0, $6, $4)
	*($2 + [4]) = ($0 + $4)
	
.LABEL $label$3
	*($1 + [24]) = CALL $76($8, $2)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$4 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $136($2)
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $133($6, *($4 + [4]))
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [16])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = ($1 + [32])
	$10 = *($1 + [32])
	$9 = *(($1 + [36]))
	$11 = ($9 - $10)
	$8 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$3 }
	$4 = (($11 & [-8]) + $4)
	
.LABEL $label$3
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [8819])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	$6 = CALL $77($3, $6)
	CALL eosio_assert(((int_32)(*($6 + [8]) - *($6 + [4])) > (int_32)[7]), [8819])
	CALL memcpy(*($6 + [4]), ($1 + [24]), [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	CALL $78($6, $7)
	$8 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($5 + [8]), (int_64)-2764395865996132352, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $145($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [8583])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8629])
	*($1 + [56]) = [1]
	$5 = *($1)
	*($1 + [64]) = CALL current_time()
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8680])
	*($4 + [88]) = ($4 + [73])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $79(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [73])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8819])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8819])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8819])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8819])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8819])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8819])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $77(*($1), *($0 + [4]))
	CALL $77(*($1), *($0 + [8]))
	$0 = *($0 + [12])
	$1 = *($1)
	CALL $77($1, $0)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[3]), [8819])
	CALL memcpy(*($1 + [4]), ($0 + [12]), [4])
	$3 = (*($1 + [4]) + [4])
	*($1 + [4]) = $3
	CALL eosio_assert(((int_32)(*($1 + [8]) - $3) > (int_32)[3]), [8819])
	CALL memcpy(*($1 + [4]), ($0 + [16]), [4])
	$3 = (*($1 + [4]) + [4])
	*($1 + [4]) = $3
	CALL eosio_assert(((int_32)(*($1 + [8]) - $3) > (int_32)[3]), [8819])
	CALL memcpy(*($1 + [4]), ($0 + [20]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0)
	*($1) = *($3)
	CALL $133(($1 + [8]), ($3 + [8]))
	CALL $133(($1 + [20]), (*($0) + [20]))
	CALL $133(($1 + [32]), (*($0) + [32]))
	CALL $133(($1 + [44]), (*($0) + [44]))
	CALL $133(($1 + [56]), (*($0) + [56]))
	$3 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$1 }
	CALL $105(($1 + [68]), *(($3 + [68])), *(($3 + [72])))
	
.LABEL $label$1
	*($1 + [112]) = (int_64)0
	*($1 + [136]) = CALL current_time()
	$4 = *(($3 + [84]))
	$3 = *($0)
	$0 = *($3 + [80])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	$5 = ($1 + [120])
	$6 = (($2 + [8]) + [32])
	$7 = (($2 + [8]) + [44])
	$8 = (($2 + [8]) + [20])
	$3 = (($2 + [8]) + [8])
	$9 = (($2 + [8]) + [52])
	$10 = ($1 + [128])
	$11 = ($1 + [124])
	
.LOOP $label$3:
	*($2 + [8]) = *($0)
	CALL $132($3, ($0 + [8]))
	CALL $132($8, ($0 + [20]))
	CALL $132($6, ($0 + [32]))
	*($9) = [0]
	*($7) = (int_64)0
	$1 = *($11)
	if ( ((uint_32)$1 >= (uint_32)*($10)) ){ goto $label$8 }
	*($1) = *($2 + [8])
	*(($1 + [16])) = *(($3 + [8]))
	*($1 + [8 align=4]) = *($3)
	*(($1 + [28])) = *(($8 + [8]))
	*($1 + [20 align=4]) = *($8)
	*((($2 + [8]) + [16])) = [0]
	*($3) = (int_64)0
	*((($2 + [8]) + [28])) = [0]
	*($8) = (int_64)0
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [32 align=4]) = *($6)
	*($6) = (int_64)0
	*((($2 + [8]) + [40])) = [0]
	*(($1 + [52])) = *(($7 + [8]))
	*(($1 + [44])) = *($7)
	*($11) = (*($11) + [56])
	if ( ((*($8) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	CALL $107($5, ($2 + [8]))
	if ( (*($6) & [1]) ){ goto $label$9 }
	if ( (*($8) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	CALL _ZdlPv(*((($2 + [8]) + [40])))
	if ( ((*($8) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*((($2 + [8]) + [28])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( (*($3) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	$0 = ($0 + [48])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*((($2 + [8]) + [16])))
	$0 = ($0 + [48])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = (int_64)1
	$5 = *($0)
	$6 = *($4 + [4])
	*(($1 + [40])) = *(($6 + [24]))
	*(($1 + [32])) = *(($6 + [16]))
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [16]) = *($6)
	CALL $133(($1 + [56]), *($4 + [8]))
	CALL $133(($1 + [68]), *($4 + [12]))
	*($1 + [80]) = (int_64)0
	*($1 + [48]) = CALL current_time()
	$4 = *($1 + [56])
	$6 = ( *(($1 + [60])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [64])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$6 = *(($1 + [68]))
	$6 = ( *(($1 + [72])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$4 = ($6 + $4)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$6 = CALL $142($4)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $4)
	CALL $119($3, $1)
	$7 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($5 + [8]), (int_64)-2764395866098438144, *(*($0 + [8])), $7, $6, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $145($6)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8819])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8819])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [8819])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8819])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $77(CALL $77($0, ($1 + [56])), ($1 + [68]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8819])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8520])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8543])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8543])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8543])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $74(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [136]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL $67($4)
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$2 = *(($0 + [56]))
	if ( ($2 == 0) ){ goto $label$11 }
	$5 = ($0 + [60])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$15 }
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$16 }
	*(($3 + [36])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$16
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$17
	CALL _ZdlPv($3)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$14 }
	$3 = *(($0 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $2
	
.LABEL $label$12
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$11
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8819])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8819])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8819])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8819])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $77(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[56])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[76695845]) ){ goto $label$2 }
	$6 = [76695844]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[56])
	if ( ((uint_32)$7 > (uint_32)[38347921]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[56]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$8 = *($1 + [8 align=4])
	*($1 + [8 align=4]) = (int_64)0
	$9 = *($1 + [20 align=4])
	*($1 + [20 align=4]) = (int_64)0
	*(($7 = ($5 + ((int_32)$4 * (int_32)[56])))) = *($1)
	*($7 + [8 align=4]) = $8
	$4 = ($1 + [16])
	$10 = *($4)
	*($4) = [0]
	*($7 + [20 align=4]) = $9
	*($7 + [32 align=4]) = *($1 + [32 align=4])
	$4 = ($1 + [28])
	$11 = *($4)
	*($4) = (int_64)0
	*(($7 + [16])) = $10
	*(($7 + [28])) = $11
	$4 = ($1 + [40])
	*(($7 + [40])) = *($4)
	*(($1 + [36])) = [0]
	*($4) = [0]
	*(($7 + [52])) = *(($1 + [52]))
	*(($7 + [44])) = *(($1 + [44]))
	$11 = ($5 + ((int_32)$6 * (int_32)[56]))
	$12 = ($7 + [56])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	$10 = ($3 - $2)
	$6 = [0]
	
.LOOP $label$6:
	$3 = ($2 + $6)
	*((($1 = ($7 + $6)) + [-56])) = *(($3 + [-56]))
	$5 = ($3 + [-40])
	*(($1 + [-40])) = *($5)
	$4 = ($3 + [-48])
	*(($1 + [-48])) = *($4)
	*($5) = [0]
	*($4) = (int_64)0
	$5 = ($3 + [-28])
	*(($1 + [-28])) = *($5)
	$4 = ($3 + [-36])
	*(($1 + [-36])) = *($4)
	*($5) = [0]
	*($4) = (int_64)0
	$5 = ($3 + [-16])
	*(($1 + [-16])) = *($5)
	$4 = ($3 + [-24])
	*(($1 + [-24])) = *($4)
	*($4) = (int_64)0
	*($5) = [0]
	*(($1 + [-4])) = *(($3 + [-4]))
	*(($1 + [-12])) = *(($3 + [-12]))
	$6 = ($6 + [-56])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$6 }
	$7 = ($7 + $6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	if ( ((*(($2 + [-24])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-16])))
	
.LABEL $label$9
	if ( ((*(($2 + [-36])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-28])))
	
.LABEL $label$10
	$1 = ($2 + [-56])
	if ( ((*(($2 + [-48])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($2 + [-40])))
	
.LABEL $label$11
	$2 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = (*($1 + [4]) - *($1))
	$3 = ((int_32)$2 / (int_32)[56])
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[76695845]) ){ goto $label$1 }
	$5 = CALL _Znwj($2)
	*(($4 = ($0 + [4]))) = $5
	*(($0 + [8])) = ($5 + ((int_32)$3 * (int_32)[56]))
	*($0) = $5
	$1 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	*($5) = *($2)
	CALL $132(($5 + [8]), ($2 + [8]))
	CALL $132(($5 + [20]), ($2 + [20]))
	CALL $132(($5 + [32]), ($2 + [32]))
	*(($5 + [52])) = *(($2 + [52]))
	*(($5 + [44])) = *(($2 + [44]))
	$5 = (*($4) + [56])
	*($4) = $5
	$2 = ($2 + [56])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	return $0
	
.LABEL $label$1
	CALL $136($0)
	return (unreachable)
}

void .FUNC $21 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ($0 + [32])
	$0 = CALL $32($3, $1, [9896])
	*($2) = *($0)
	$4 = CALL $132(($2 + [8]), ($0 + [8]))
	*(($2 + [36])) = (int_64)0
	*($2 + [32]) = [0]
	*($2 + [24]) = *($0 + [24])
	$5 = (*(($0 + [36])) - *($0 + [32]))
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = int_32($5 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*(($2 + [32])) = $5
	*(($2 + [40])) = ($5 + ($6 << [3]))
	*(($6 = ($2 + [36]))) = $5
	$7 = *(($0 + [32]))
	$0 = (*(($0 + [36])) - $7)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $7, $0)
	*($6) = (*($6) + $0)
	
.LABEL $label$2
	CALL $59($3, $2)
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$3 }
	*(($2 + [36])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$4
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $136(($2 + [32]))
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [176]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [184]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8543])
	CALL memcpy(($4 + [168]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8543])
	CALL memcpy((($4 + [168]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [8543])
	CALL memcpy((($4 + [168]) + [16]), ($2 + [16]), [8])
	*(($4 + [36])) = ($2 + [24])
	*((($4 + [16]) + [24])) = ($2 + $7)
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [24]) = $1
	*($4 + [16]) = $0
	*($4 + [32]) = $2
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [192]) = [8974]
	*($4 + [196]) = CALL $139([8974])
	*($4 + [8]) = *($4 + [192])
	$0 = *(CALL $2(($4 + [200]), ($4 + [8])))
	*($4 + [192]) = [8974]
	*($4 + [196]) = CALL $139([8974])
	*($4) = *($4 + [192])
	CALL $2(($4 + [200]), $4)
	*(($4 + [136])) = (int_64)6138663577826885632
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [128]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [184])
	$1 = *($4 + [176])
	$8 = *($4 + [168])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $145($2)
	
.LABEL $label$5
	CALL $28(($4 + [16]))
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth($1)
	CALL $40(($0 + [112]), $1, [9344])
	$4 = ($0 + [32])
	$5 = CALL $32($4, $2, [8876])
	*($3 + [16]) = *($5)
	$6 = CALL $132((($3 + [16]) + [8]), ($5 + [8]))
	*((($3 + [16]) + [36])) = (int_64)0
	$7 = [0]
	*($3 + [48]) = [0]
	*($3 + [40]) = *($5 + [24])
	$8 = (*(($5 + [36])) - *($5 + [32]))
	if ( ($8 == 0) ){ goto $label$3 }
	$9 = int_32($8 >> [3])
	if ( ((uint_32)$9 >= (uint_32)[536870912]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	*(($10 = (($3 + [16]) + [32]))) = $7
	*(($3 + [56])) = ($7 + ($9 << [3]))
	*(($8 = (($3 + [16]) + [36]))) = $7
	$9 = *(($5 + [32]))
	$5 = (*(($5 + [36])) - $9)
	if ( ((int_32)$5 <= (int_32)[0]) ){ goto $label$3 }
	CALL memcpy($7, $9, $5)
	$7 = (*($8) + $5)
	*($8) = $7
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$2 }
	$5 = ($5 + [8])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	
.LABEL $label$3
	$5 = $7
	
.LABEL $label$2
	*($3 + [8]) = $5
	CALL eosio_assert(((int_32)$5 != (int_32)$7), [9951])
	$1 = *($0)
	*($3 + [4]) = $0
	*($3) = ($3 + [8])
	CALL $62($4, ($3 + [16]), $1, $3)
	$5 = *($3 + [48])
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [52])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	if ( ((*($6) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$6
	$global$0 = ($3 + [64])
	return (unreachable)
	
.LABEL $label$1
	CALL $136((($3 + [16]) + [32]))
}

int_32 .FUNC $22 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8543])
	CALL memcpy(($4 + [168]), $2, [8])
	*(($4 + [36])) = ($2 + [8])
	*(($4 + [40])) = ($2 + $7)
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [24]) = $1
	*($4 + [16]) = $0
	*($4 + [32]) = $2
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [176]) = [8974]
	*($4 + [180]) = CALL $139([8974])
	*($4 + [8]) = *($4 + [176])
	$0 = *(CALL $2(($4 + [184]), ($4 + [8])))
	*($4 + [176]) = [8974]
	*($4 + [180]) = CALL $139([8974])
	*($4) = *($4 + [176])
	CALL $2(($4 + [184]), $4)
	*(($4 + [136])) = (int_64)6138663577826885632
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [128]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [168])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $145($2)
	
.LABEL $label$5
	CALL $28(($4 + [16]))
	$global$0 = ($4 + [192])
	return [1]
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $1
	CALL require_auth($1)
	CALL $40(($0 + [112]), $1, [9344])
	$4 = ($0 + [32])
	$5 = CALL $32($4, $2, [8876])
	*($3 + [8]) = *($5)
	$6 = CALL $132((($3 + [8]) + [8]), ($5 + [8]))
	*((($3 + [8]) + [36])) = (int_64)0
	$7 = [0]
	*($3 + [40]) = [0]
	*($3 + [32]) = *($5 + [24])
	$8 = [0]
	$9 = (*(($5 + [36])) - *($5 + [32]))
	if ( ($9 == 0) ){ goto $label$2 }
	$8 = int_32($9 >> [3])
	if ( ((uint_32)$8 >= (uint_32)[536870912]) ){ goto $label$1 }
	$7 = CALL _Znwj($9)
	*(($10 = (($3 + [8]) + [32]))) = $7
	*(($3 + [48])) = ($7 + ($8 << [3]))
	*(($8 = (($3 + [8]) + [36]))) = $7
	$9 = *(($5 + [32]))
	$5 = (*(($5 + [36])) - $9)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $9, $5)
	$7 = (*($8) + $5)
	*($8) = $7
	$8 = *($10)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$3 }
	$1 = *($3 + [56])
	
.LOOP $label$4:
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$2 }
	$8 = ($8 + [8])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$4 }
	
.LABEL $label$3
	$8 = $7
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$8 == (int_32)$7), [9368])
	$1 = *($0)
	*($3 + [4]) = $0
	*($3) = ($3 + [56])
	CALL $41($4, ($3 + [8]), $1, $3)
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($3 + [44])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$5
	if ( ((*($6) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$6
	$global$0 = ($3 + [64])
	return (unreachable)
	
.LABEL $label$1
	CALL $136((($3 + [8]) + [32]))
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [184]) = (int_64)0
	*($4 + [176]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8543])
	CALL memcpy(($4 + [176]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8543])
	CALL memcpy((($4 + [176]) + [8]), ($2 + [8]), [8])
	*(($4 + [44])) = ($2 + [16])
	*(($4 + [48])) = ($2 + $7)
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [192]) = [8974]
	*($4 + [196]) = CALL $139([8974])
	*($4 + [16]) = *($4 + [192])
	$0 = *(CALL $2(($4 + [200]), ($4 + [16])))
	*($4 + [192]) = [8974]
	*($4 + [196]) = CALL $139([8974])
	*($4 + [8]) = *($4 + [192])
	CALL $2(($4 + [200]), ($4 + [8]))
	*(($4 + [144])) = (int_64)6138663577826885632
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*($4 + [136]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [184])
	$1 = *($4 + [176])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $145($2)
	
.LABEL $label$5
	CALL $28(($4 + [24]))
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8543])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $44(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL require_auth($1)
	*((($4 + [136]) + [32])) = [0]
	*($4 + [144]) = $2
	*($4 + [152]) = (int_64)-1
	*($4 + [160]) = (int_64)0
	$2 = *($0)
	*($4 + [136]) = $2
	*((($4 + [96]) + [32])) = [0]
	*($4 + [104]) = $2
	*($4 + [96]) = $2
	*($4 + [112]) = (int_64)-1
	*($4 + [120]) = (int_64)0
	CALL memcpy(($4 + [16]), CALL $33(($4 + [136]), $3, [8896]), [80])
	if ( (*($4 + [72]) == 0) ){ goto $label$4 }
	CALL eosio_assert((uint_64)(((int_64)*($4 + [80]) + (int_64)*($4 + [88])) <= CALL $fimport$7()), [9385])
	$2 = *($4 + [24])
	$6 = *(($4 + [124]))
	$5 = *(($4 + [120]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	$2 = *($4 + [24])
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($4 + [96])), [8469])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4 + [96]), *(($4 + [104])), (int_64)-5003315192965103616, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $29(($4 + [96]), $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($4 + [96])), [8469])
	
.LABEL $label$1
	$2 = *($0)
	*($4 + [8]) = ($4 + [16])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8548])
	CALL $42(($4 + [96]), $8, $2, ($4 + [8]))
	CALL $43(($4 + [136]), ($4 + [16]))
	$8 = *($4 + [120])
	if ( ($8 == 0) ){ goto $label$6 }
	$5 = ($4 + [124])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	$7 = *(($4 + [120]))
	goto $label$7 
	
.LABEL $label$8
	$7 = $8
	
.LABEL $label$7
	*($5) = $8
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$8 = *($4 + [160])
	if ( ($8 == 0) ){ goto $label$11 }
	$5 = ($4 + [164])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$15 }
	CALL _ZdlPv($6)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$14 }
	$7 = *(($4 + [160]))
	goto $label$12 
	
.LABEL $label$13
	$7 = $8
	
.LABEL $label$12
	*($5) = $8
	CALL _ZdlPv($7)
	
.LABEL $label$11
	$global$0 = ($4 + [176])
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [8])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$3 = *($0)
	$0 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$6
	*($2) = ($1 + [12])
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [192])
	$global$0 = $2
	*(($3 = (($2 + [64]) + [16]))) = *(($1 + [32]))
	*(($4 = (($2 + [64]) + [24]))) = *(($1 + [40]))
	*($2 + [64]) = *($1 + [16])
	*($2 + [72]) = *(($1 + [24]))
	$5 = *($1 + [8])
	$6 = *($1)
	$7 = CALL $132(($2 + [48]), ($1 + [48]))
	$8 = CALL $132(($2 + [32]), ($1 + [60]))
	$9 = *($1 + [72])
	*((($2 + [96]) + [24])) = *($4)
	*((($2 + [96]) + [16])) = *($3)
	*($2 + [104]) = *($2 + [72])
	*($2 + [96]) = *($2 + [64])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($10 = (($2 + [160]) + [24]))) = *((($2 + [96]) + [24]))
	*(($11 = (($2 + [160]) + [16]))) = *((($2 + [96]) + [16]))
	*($2 + [168]) = *($2 + [104])
	*($2 + [160]) = *($2 + [96])
	$3 = CALL $132(($2 + [144]), $7)
	$4 = CALL $132(($2 + [128]), $8)
	*(($2 + [24])) = *($10)
	*(($2 + [16])) = *($11)
	*($2 + [8]) = *($2 + [168])
	*($2) = *($2 + [160])
	CALL void $0((int_32 $6), (int_64 $5), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $9), (int_64 $1))
	if ( (*($2 + [128]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [144]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($2 + [144]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($3 + [8]))
	$1 = [1]
	if ( ((*($8) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($8) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($7) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($7) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($7 + [8]))
	$global$0 = ($2 + [192])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [192])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [8543])
	CALL memcpy(($3 + [16]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	CALL $44(*($1), ($3 + [48]))
	CALL $44(*($1), ($3 + [60]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy(($3 + [72]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[56]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [16]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8819])
	CALL memcpy(*($6), ($2 + [16]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$4 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$2 }
	$7 = ($2 + [28])
	
.LOOP $label$3:
	*($2 + [8]) = $0
	*($2 + [16]) = $6
	*((($2 + [16]) + [8])) = ($6 + [20])
	*($7) = ($6 + [32])
	*($2 + [20]) = ($6 + [8])
	CALL $110(($2 + [16]), ($2 + [8]))
	$6 = ($6 + [56])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = *($1)
	CALL $132(($0 + [8]), ($1 + [8]))
	CALL $132(($0 + [20]), ($1 + [20]))
	CALL $132(($0 + [32]), ($1 + [32]))
	CALL $132(($0 + [44]), ($1 + [44]))
	CALL $132(($0 + [56]), ($1 + [56]))
	*($0 + [68 align=4]) = (int_64)0
	*(($0 + [76])) = [0]
	$2 = (*(($1 + [72])) - *($1 + [68]))
	$3 = ((int_32)$2 / (int_32)[12])
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = CALL _Znwj($2)
	*(($4 = ($0 + [72]))) = $5
	*(($0 + [76])) = ($5 + ((int_32)$3 * (int_32)[12]))
	*(($0 + [68])) = $5
	$3 = *(($1 + [72]))
	$2 = *(($1 + [68]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $132($5, $2)
	$5 = (*($4) + [12])
	*($4) = $5
	$2 = ($2 + [12])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	*($0 + [80]) = *($1 + [80])
	*(($0 + [112])) = *(($1 + [112]))
	*(($0 + [104])) = *(($1 + [104]))
	*(($0 + [96])) = *(($1 + [96]))
	*(($0 + [88])) = *(($1 + [88]))
	CALL $106(($0 + [120]), ($1 + [120]))
	*($0 + [136]) = *($1 + [136])
	return $0
	
.LABEL $label$1
	CALL $136(($0 + [68]))
	return (unreachable)
}

int_32 .FUNC $64 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [144]) == (int_32)$0), [8469])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)5308437740856016896, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $49($0, $4)
	CALL eosio_assert(((int_32)*($5 + [144]) == (int_32)$0), [8469])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [120])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [124])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((*(($3 + [-24])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [-16])))
	
.LABEL $label$5
	if ( ((*(($3 + [-36])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [-28])))
	
.LABEL $label$6
	$4 = ($3 + [-56])
	if ( ((*(($3 + [-48])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [-40])))
	
.LABEL $label$7
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [120]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [68])
	if ( ($1 == 0) ){ goto $label$8 }
	$2 = ($0 + [72])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$12
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$11 }
	$3 = *(($0 + [68]))
	goto $label$9 
	
.LABEL $label$10
	$3 = $1
	
.LABEL $label$9
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$8
	if ( (*($0 + [56]) & [1]) ){ goto $label$21 }
	if ( (*($0 + [44]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL _ZdlPv(*(($0 + [64])))
	if ( ((*($0 + [44]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($0 + [52])))
	$3 = [1]
	if ( ((*($0 + [32]) & [1]) == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$3 = [1]
	if ( (*($0 + [32]) & [1]) ){ goto $label$17 }
	
.LABEL $label$18
	if ( (*($0 + [20]) & $3) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*(($0 + [40])))
	if ( ((*($0 + [20]) & $3) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($0 + [28])))
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	if ( (*($0 + [8]) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	return $0
	
.LABEL $label$13
	CALL _ZdlPv(*(($0 + [16])))
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [8583])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8629])
	$6 = *($1)
	$8 = *(($1 + [124]))
	$7 = *($1 + [120])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$1 }
	$9 = *($3 + [12])
	$10 = *($3 + [8])
	$11 = *($3 + [4])
	$12 = *(*($3))
	
.LOOP $label$2:
	if ( ((int_64)$12 != (int_64)*($7)) ){ goto $label$3 }
	*(($7 + [52])) = *($11)
	*(($7 + [48])) = *($10)
	*(($7 + [44])) = *($9)
	
.LABEL $label$3
	$7 = ($7 + [56])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert([1], [8680])
	*($5) = [0]
	CALL $103($5, $1)
	$8 = *($5)
	if ( ($8 <= [513]) ){ goto $label$5 }
	$7 = CALL $142($8)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = ($7 + $8)
	CALL $104($5, $1)
	CALL db_update_i64(*($1 + [148]), $2, $7, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $145($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [9409])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [9454])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9504])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [68]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [76])))
	
.LABEL $label$10
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [64])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [68]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [76])))
	
.LABEL $label$14
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [92])))
}

int_32 .FUNC $60 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [88]) == (int_32)$0), [8469])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2764395866098438144, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $70($0, $4)
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)$0), [8469])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy(($3 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8583])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8629])
	$6 = *($1)
	CALL $117($3, $1)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8680])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [16])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$9 = ($1 + [32])
	$11 = *($1 + [32])
	$10 = *(($1 + [36]))
	$12 = ($10 - $11)
	$8 = (CASTING uint_64)(uint_32 int_32($12 >> [3]))
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$3 }
	$3 = (($12 & [-8]) + $3)
	
.LABEL $label$3
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $142($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8819])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	$7 = CALL $77($5, $7)
	CALL eosio_assert(((int_32)(*($7 + [8]) - *($7 + [4])) > (int_32)[7]), [8819])
	CALL memcpy(*($7 + [4]), ($1 + [24]), [8])
	*($7 + [4]) = (*($7 + [4]) + [8])
	CALL $78($7, $9)
	CALL db_update_i64(*($1 + [48]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $145($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [16])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[56]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[56])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[76695845]) ){ goto $label$3 }
	$3 = [76695844]
	$2 = ((int_32)($2 - $4) / (int_32)[56])
	if ( ((uint_32)$2 > (uint_32)[38347921]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$4 = CALL _Znwj(((int_32)$3 * (int_32)[56]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*(($4 = ($3 + [40]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*($4) = [0]
	$3 = (*($2) + [56])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$4 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $136($0)
	
.LABEL $label$2
	$7 = ($4 + ((int_32)$3 * (int_32)[56]))
	$5 = ($4 + ((int_32)$5 * (int_32)[56]))
	$3 = $5
	
.LOOP $label$8:
	*(($2 = ($3 + [40]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*($2) = [0]
	$3 = ($3 + [56])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$8 = ($4 + ((int_32)$6 * (int_32)[56]))
	$3 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$10 }
	$10 = ($3 - $9)
	$2 = [0]
	
.LOOP $label$11:
	$1 = ($9 + $2)
	*((($3 = ($5 + $2)) + [-56])) = *(($1 + [-56]))
	$4 = ($1 + [-40])
	*(($3 + [-40])) = *($4)
	$6 = ($1 + [-48])
	*(($3 + [-48])) = *($6)
	*($4) = [0]
	*($6) = (int_64)0
	$4 = ($1 + [-28])
	*(($3 + [-28])) = *($4)
	$6 = ($1 + [-36])
	*(($3 + [-36])) = *($6)
	*($4) = [0]
	*($6) = (int_64)0
	$4 = ($1 + [-16])
	*(($3 + [-16])) = *($4)
	$6 = ($1 + [-24])
	*(($3 + [-24])) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	*(($3 + [-4])) = *(($1 + [-4]))
	*(($3 + [-12])) = *(($1 + [-12]))
	$2 = ($2 + [-56])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$11 }
	$5 = ($5 + $2)
	$3 = *(($0 + [4]))
	$2 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LABEL $label$9
	*($0) = $5
	*(($0 + [4])) = $8
	*(($0 + [8])) = $7
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	if ( ((*(($3 + [-24])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [-16])))
	
.LABEL $label$14
	if ( ((*(($3 + [-36])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($3 + [-28])))
	
.LABEL $label$15
	$1 = ($3 + [-56])
	if ( ((*(($3 + [-48])) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($3 + [-40])))
	
.LABEL $label$16
	$3 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($2 == 0) ){ goto $label$1 }
	CALL _ZdlPv($2)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($6 + [-4])
	*(($3 + [-4])) = *($1)
	$6 = ($6 + [-12])
	*(($3 = ($3 + [-12]))) = *($6)
	*($6) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL _ZdlPv($1)
	
.LABEL $label$14
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = (*($0) + [8])
	*($0) = $3
	$4 = *($1 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($0) = $3
	$4 = *(($1 + [8]))
	$4 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ($4 + $3)
	*($0) = $3
	
.LABEL $label$2
	$4 = *($1 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [24])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($0) = $3
	$4 = *(($1 + [20]))
	$4 = ( *(($1 + [24])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$4 }
	$3 = ($4 + $3)
	*($0) = $3
	
.LABEL $label$4
	$4 = *($1 + [32])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($0) = $3
	$4 = *(($1 + [32]))
	$4 = ( *(($1 + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$6 }
	$3 = ($4 + $3)
	*($0) = $3
	
.LABEL $label$6
	$4 = *($1 + [44])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [48])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$7:
	$3 = ($3 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($0) = $3
	$4 = *(($1 + [44]))
	$4 = ( *(($1 + [48])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$8 }
	$3 = ($4 + $3)
	*($0) = $3
	
.LABEL $label$8
	$4 = *($1 + [56])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [60])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$9:
	$3 = ($3 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$9 }
	*($0) = $3
	$4 = *(($1 + [56]))
	$4 = ( *(($1 + [60])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$10 }
	$3 = ($4 + $3)
	*($0) = $3
	
.LABEL $label$10
	$4 = *($1 + [68])
	$6 = *(($1 + [72]))
	$5 = (CASTING uint_64)(uint_32 ((int_32)($6 - $4) / (int_32)[12]))
	
.LOOP $label$11:
	$3 = ($3 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$11 }
	*($0) = $3
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$13:
	$7 = *($4)
	$5 = (CASTING uint_64)(uint_32 ( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ))
	
.LOOP $label$14:
	$3 = ($3 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$14 }
	*($0) = $3
	$7 = *($4)
	$7 = ( *(($4 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	if ( ($7 == 0) ){ goto $label$15 }
	$3 = ($7 + $3)
	*($0) = $3
	
.LABEL $label$15
	$4 = ($4 + [12])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$12
	$4 = ($3 + [40])
	*($0) = $4
	$3 = *($1 + [120])
	$7 = *(($1 + [124]))
	$5 = (CASTING uint_64)(uint_32 ((int_32)($7 - $3) / (int_32)[56]))
	
.LOOP $label$16:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$16 }
	*($0) = $4
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$17 }
	$4 = ($2 + [28])
	
.LOOP $label$18:
	*($2 + [8]) = $0
	*($2 + [16]) = $3
	*((($2 + [16]) + [8])) = ($3 + [20])
	*($4) = ($3 + [32])
	*($2 + [20]) = ($3 + [8])
	CALL $109(($2 + [16]), ($2 + [8]))
	$3 = ($3 + [56])
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$18 }
	$4 = *($0)
	
.LABEL $label$17
	*($0) = ($4 + [8])
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	$2 = ($global$0 - [96])
	$global$0 = $2
	CALL $133(($1 + [8]), (*($0) + [8]))
	CALL $133(($1 + [20]), (*($0) + [20]))
	CALL $133(($1 + [32]), (*($0) + [32]))
	CALL $133(($1 + [44]), (*($0) + [44]))
	CALL $133(($1 + [56]), (*($0) + [56]))
	$3 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$1 }
	CALL $105(($1 + [68]), *(($3 + [68])), *(($3 + [72])))
	
.LABEL $label$1
	*($1 + [136]) = CALL current_time()
	$4 = ($1 + [120])
	$5 = CALL $106(($2 + [80]), $4)
	$7 = *($1 + [120])
	$6 = ($1 + [124])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((*(($3 + [-24])) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [-16])))
	
.LABEL $label$4
	if ( ((*(($3 + [-36])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [-28])))
	
.LABEL $label$5
	$8 = ($3 + [-56])
	if ( ((*(($3 + [-48])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [-40])))
	
.LABEL $label$6
	$3 = $8
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$2
	*($6) = $7
	$9 = *(($3 + [84]))
	$3 = *($0)
	$0 = *($3 + [80])
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$7 }
	$10 = ($2 + [44])
	$11 = ($2 + [32])
	$12 = ($2 + [20])
	$6 = ($2 + [8])
	$7 = ($2 + [68])
	$13 = ($5 + [4])
	$14 = ($1 + [128])
	$15 = ($1 + [124])
	
.LOOP $label$8:
	$16 = CALL $132(($2 + [56]), ($0 + [32]))
	*(($1 = (($2 + [56]) + [20]))) = [0]
	*($7) = (int_64)0
	$17 = *($0)
	$8 = *($13)
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$9 }
	
.LOOP $label$10:
	if ( ((int_64)*($3) != (int_64)$17) ){ goto $label$11 }
	*($1) = *(($3 + [52]))
	*($7) = *(($3 + [44]))
	
.LABEL $label$11
	$3 = ($3 + [56])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$9
	*($2) = $17
	CALL $132($6, ($0 + [8]))
	CALL $132($12, ($0 + [20]))
	CALL $132($11, $16)
	*(($8 = ($10 + [8]))) = *(($7 + [8]))
	*($10) = *($7)
	$3 = *($15)
	if ( ((uint_32)$3 >= (uint_32)*($14)) ){ goto $label$18 }
	*($3) = *($2)
	*(($3 + [16])) = *(($6 + [8]))
	*($3 + [8 align=4]) = *($6)
	*(($3 + [28])) = *(($12 + [8]))
	*($3 + [20 align=4]) = *($12)
	*(($2 + [16])) = [0]
	*($6) = (int_64)0
	*(($2 + [28])) = [0]
	*($12) = (int_64)0
	*(($3 + [40])) = *(($11 + [8]))
	*($3 + [32 align=4]) = *($11)
	*($11) = (int_64)0
	*(($2 + [40])) = [0]
	*(($3 + [52])) = *($8)
	*(($3 + [44])) = *($10)
	*($15) = (*($15) + [56])
	if ( ((*($12) & [1]) == 0) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$18
	CALL $107($4, $2)
	if ( (*($11) & [1]) ){ goto $label$19 }
	if ( (*($12) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	CALL _ZdlPv(*(($2 + [40])))
	if ( ((*($12) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($2 + [28])))
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	if ( (*($6) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( (*($2 + [56]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($2 + [16])))
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*((($2 + [56]) + [8])))
	$0 = ($0 + [48])
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$12
	$0 = ($0 + [48])
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = *($5)
	if ( ($7 == 0) ){ goto $label$20 }
	$3 = *($5 + [4])
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$22 }
	
.LOOP $label$23:
	if ( ((*(($3 + [-24])) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($3 + [-16])))
	
.LABEL $label$24
	if ( ((*(($3 + [-36])) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($3 + [-28])))
	
.LABEL $label$25
	$8 = ($3 + [-56])
	if ( ((*(($3 + [-48])) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($3 + [-40])))
	
.LABEL $label$26
	$3 = $8
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$23 }
	$3 = *($5)
	goto $label$21 
	
.LABEL $label$22
	$3 = $7
	
.LABEL $label$21
	*(($5 + [4])) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$20
	$global$0 = ($2 + [96])
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$8
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[12])
	$4 = ($1 + ((int_32)$7 * (int_32)[12]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $133($5, $1)
	$5 = ($5 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$5 = *($1)
	
.LOOP $label$12:
	CALL $132($5, $4)
	$5 = (*($1) + [12])
	*($1) = $5
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = [357913941]
	$4 = ((int_32)$4 / (int_32)[12])
	if ( ((uint_32)$4 > (uint_32)[178956969]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[12])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	CALL $132($5, $1)
	$5 = (*($4) + [12])
	*($4) = $5
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $136($0)
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8819])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$3 = CALL $77(CALL $77(CALL $77(CALL $77(CALL $77($0, ($1 + [8])), ($1 + [20])), ($1 + [32])), ($1 + [44])), ($1 + [56]))
	$4 = *($3 + [4])
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [72])) - *($1 + [68])) / (int_32)[12]))
	$0 = ($3 + [4])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$7 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*(($3 + [8])) - $4) > (int_32)[0]), [8819])
	CALL memcpy(*($0), ($2 + [15]), [1])
	$4 = (*($0) + [1])
	*($0) = $4
	if ( $7 ){ goto $label$1 }
	$6 = *(($1 + [72]))
	$0 = *(($1 + [68]))
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $77($3, $0)
	$0 = ($0 + [12])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$3 }
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	$6 = ($3 + [8])
	CALL eosio_assert(((int_32)(*($6) - $4) > (int_32)[31]), [8819])
	$0 = ($3 + [4])
	CALL memcpy(*($0), ($1 + [80]), [32])
	$4 = (*($0) + [32])
	*($0) = $4
	CALL eosio_assert(((int_32)(*($6) - $4) > (int_32)[7]), [8819])
	CALL memcpy(*($0), ($1 + [112]), [8])
	*($0) = (*($0) + [8])
	$0 = CALL $108($3, ($1 + [120]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8819])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	CALL $90(*($1), *($0))
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8543])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8543])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [8543])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [52])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8543])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8520])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8543])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8543])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $91(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8520])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([192])) + [104]) = (int_64)0
	*($5 + [96]) = [0]
	*($5 + [144]) = (int_64)0
	*($5 + [168]) = [0]
	*($5 + [176]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [72])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [80])
	*($3 + [52]) = ($5 + [88])
	*($3 + [56]) = ($5 + [96])
	*($3 + [60]) = ($5 + [104])
	*($3 + [64]) = ($5 + [112])
	*($3 + [68]) = ($5 + [120])
	*($3 + [72]) = ($5 + [128])
	*($3 + [76]) = ($5 + [136])
	*($3 + [80]) = ($5 + [144])
	*($3 + [84]) = ($5 + [152])
	*($3 + [88]) = ($5 + [160])
	*($3 + [92]) = ($5 + [168])
	CALL $88(($3 + [40]), ($3 + [32]))
	*($5 + [180]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $89(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8543])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8543])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8543])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8543])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8543])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8543])
	CALL memcpy($2, *($0 + [4]), [8])
	*(($1 + [48])) = *($2)
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [8543])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [56]) = ((int_32)*($2 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8543])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8543])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8970])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $54($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8543])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $136($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [36])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8970])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $82($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [8543])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $145 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18444])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18252]
	$3 = (((int_32)$1 * (int_32)[12]) + [18252])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $144 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10052]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10056])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10052]) = [1]
	$2 = ($2 << [16])
	*([0] + [10056]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10056])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10056]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10052]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10052]) = [1]
	$3 = ($3 << [16])
	*([0] + [10056]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10056])
	
.LABEL $label$10
	*([0] + [10056]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $142($1)
	
.LABEL $label$2
	*(CALL $137()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $142(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $145($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $137())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $141($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $144($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8213])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $142 (int_32 $0)
{
	return CALL $143([10060], $0)
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8825])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([112])) + [56 align=4]) = (int_64)0
	*($3 + [64 align=4]) = (int_64)0
	*($3 + [72 align=4]) = (int_64)0
	*($3 + [88]) = $1
	CALL $118(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [92])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $116(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [68]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [76])))
	
.LABEL $label$4
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [64])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4)
	*($1 + [8]) = *($5)
	*(($6 = ($1 + [16]))) = *(($5 + [8]))
	*($1) = *(*($4 + [4]))
	CALL eosio_assert([1], [8819])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8819])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	*($2 + [24]) = *($6)
	CALL eosio_assert([1], [8819])
	CALL memcpy(($2 + [16]), ($2 + [24]), [8])
	$7 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-5003315192965103616, *(*($0 + [8])), $7, $2, [24])
	if ( (uint_64)($7 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8520])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [56 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [88]) = $0
	CALL $115(($3 + [32]), $5)
	*($5 + [92]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $116(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [68]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [76])))
	
.LABEL $label$10
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [8583])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8629])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	$6 = *($3)
	*(($1 + [40])) = *(($6 + [24]))
	*(($1 + [32])) = *(($6 + [16]))
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [16]) = *($6)
	$7 = *($1)
	CALL $133(($1 + [56]), *($3 + [4]))
	CALL $133(($1 + [68]), *($3 + [8]))
	*($1 + [80]) = (int_64)0
	*($1 + [48]) = CALL current_time()
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [8680])
	$3 = *($1 + [56])
	$6 = ( *(($1 + [60])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [64])
	$8 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$6 = *(($1 + [68]))
	$6 = ( *(($1 + [72])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$3 = ($6 + $3)
	$8 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$6 = CALL $142($3)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($5 + [4]) = $6
	*($5) = $6
	*($5 + [8]) = ($6 + $3)
	CALL $119($5, $1)
	CALL db_update_i64(*(($1 + [92])), $2, $6, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $145($6)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_64 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	float_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [56]) = [8974]
	*($2 + [60]) = CALL $139([8974])
	*($2 + [8]) = *($2 + [56])
	$3 = *(CALL $2(($2 + [16]), ($2 + [8])))
	*($2 + [56]) = [8974]
	*($2 + [60]) = CALL $139([8974])
	*($2) = *($2 + [56])
	CALL $2(($2 + [16]), $2)
	*(($2 + [48])) = [0]
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	*($2 + [24]) = (int_64)6138663577826885632
	$4 = [0]
	$5 = CALL db_find_i64($3, (int_64)6138663577826885632, (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $86(($2 + [16]), $5)
	CALL eosio_assert(((int_32)*($4 + [176]) == (int_32)($2 + [16])), [8469])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8980])
	$6 = *($4 + [160])
	$8 = *($1 + [4])
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	$9 = ($0 + [112])
	$10 = (float_64)0
	$11 = ($0 + [140])
	$12 = ($0 + [136])
	$13 = ($0 + [120])
	
.LOOP $label$5:
	$3 = *($7)
	$0 = *($11)
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$7 }
	
.LOOP $label$9:
	$4 = ($0 + [-24])
	$1 = *($4)
	if ( ((int_64)*($1) == (int_64)$3) ){ goto $label$8 }
	$0 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$9), [8469])
	goto $label$6 
	
.LABEL $label$7
	$1 = CALL $87($9, CALL $fimport$3(*($9), *($13), (int_64)-5915305344019464192, $3))
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$9), [8469])
	
.LABEL $label$6
	$10 = ((float_64)$10 + (float_64)*($1 + [8]))
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$5 }
	$10 = ((float_64)$10 / (float_64)$6)
	$1 = *($2 + [40])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$10 = ((float_64)(float_64)0 / (float_64)$6)
	$1 = *($2 + [40])
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($2 + [44])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$13 }
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	$4 = *(($2 + [40]))
	goto $label$10 
	
.LABEL $label$11
	$4 = $1
	
.LABEL $label$10
	*($5) = $1
	CALL _ZdlPv($4)
	$global$0 = ($2 + [64])
	return $10
	
.LABEL $label$2
	$global$0 = ($2 + [64])
	return $10
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8819])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8819])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8825])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([96])) + [48]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [80]) = $1
	CALL $92(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [84])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $85(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8543])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8543])
	CALL memcpy(($0 + [48]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $37 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [8469])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5003315192965103616, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $29($0, $4)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$0), [8469])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8819])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [8819])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8819])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8819])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8819])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8819])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8819])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8819])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2) = *(($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8819])
	CALL memcpy(*($0 + [4]), $2, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [56])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [8819])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8819])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8819])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [44]) == (int_32)$0), [8469])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2764395865996132352, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $57($0, $4)
	CALL eosio_assert(((int_32)*($5 + [44]) == (int_32)$0), [8469])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $33 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$0), [8469])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4995154566124142592, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $75($0, $4)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$0), [8469])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8583])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8629])
	$5 = *($1)
	$6 = ($1 + [16])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($6)), [8739])
	$7 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [8782])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [8801])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8680])
	CALL eosio_assert([1], [8819])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8819])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($6)
	CALL eosio_assert([1], [8819])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8825])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = $1
	CALL $73(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $145($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $140(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10040])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $140(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}