(data (i32.const 4) "pi\00\00")
(data (i32.const 16) "transfer \00")
(data (i32.const 32) "transfer  \00")
(data (i32.const 48) " -> \00")
(data (i32.const 64) "\n\00")
(data (i32.const 80) "|\00")
(data (i32.const 96) ",\00")
(data (i32.const 112) "\e4\b8\8b\e6\b3\a8\e6\95\b0\e9\87\8f\ef\bc\9a\00")
(data (i32.const 128) "\t\00")
(data (i32.const 144) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 208) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 272) "invalid symbol name\00")
(data (i32.const 304) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 368) "\e6\b7\bb\e5\8a\a0\e5\90\af\e5\8a\a8\e8\b5\84\e9\87\91\00")
(data (i32.const 400) "cannot pass end iterator to modify\00")
(data (i32.const 448) "object passed to modify is not in multi_index\00")
(data (i32.const 496) "cannot modify objects in table of another contract\00")
(data (i32.const 560) "updater cannot change primary key when modifying an object\00")
(data (i32.const 624) "\e4\b8\8b\e6\b3\a8\e5\a4\b1\e8\b4\a5\e8\bf\94\e8\bf\98\e4\b8\8b\e6\b3\a8\e9\87\91\e9\a2\9d\00")
(data (i32.const 656) "\e4\b8\8b\e6\b3\a8\e5\a4\b1\e8\b4\a5\e8\b6\85\e5\87\ba\e4\b8\8b\e6\b3\a8\e9\99\90\e9\a2\9d\00")
(data (i32.const 688) "\e4\b8\8b\e6\b3\a8\e5\a4\b1\e8\b4\a5\e5\8d\95\e7\ac\94\e4\b8\8b\e6\b3\a8\e9\a2\9d\e8\bf\87\e5\b0\8f\00")
(data (i32.const 736) "\e4\b8\8b\e6\b3\a8\e5\a4\b1\e8\b4\a5\e5\8d\95\e7\ac\94\e4\b8\8b\e6\b3\a8\e9\a2\9d\e8\bf\87\e5\a4\a7\00")
(data (i32.const 784) "active\00")
(data (i32.const 800) "eosio.token\00")
(data (i32.const 816) "transfer\00")
(data (i32.const 848) "cannot create objects in table of another contract\00")
(data (i32.const 912) "cannot pass end iterator to erase\00")
(data (i32.const 960) "cannot increment end iterator\00")
(data (i32.const 992) "write\00")
(data (i32.const 1008) "attempt to add asset with different symbol\00")
(data (i32.const 1056) "addition underflow\00")
(data (i32.const 1088) "addition overflow\00")
(data (i32.const 1120) "\e4\b8\8b\e6\b3\a8\e6\9c\9f\e5\8f\b7\ef\bc\9a\00")
(data (i32.const 1136) "error reading iterator\00")
(data (i32.const 1168) "read\00")
(data (i32.const 1184) "get\00")
(data (i32.const 1200) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1264) "object passed to erase is not in multi_index\00")
(data (i32.const 1312) "cannot erase objects in table of another contract\00")
(data (i32.const 1376) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1440) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1504) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1552) "visitor is not exist\00")
(data (i32.const 1584) "can not visit yourself\00")
(data (i32.const 1616) "exist visitor!!!\00")
(data (i32.const 1648) "attempt to subtract asset with different symbol\00")
(data (i32.const 1696) "subtraction underflow\00")
(data (i32.const 1728) "subtraction overflow\00")
(data (i32.const 10160) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10256) "stoi\00")
(data (i32.const 10272) ": no conversion\00")
(data (i32.const 10288) ": out of range\00")
(data (i32.const 10320) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 10592) "\00\01\02\04\07\03\06\05\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$8 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$10 (param i32)))
(import "env" "db_idx64_store" (func $fimport$11 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$12 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$19 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$20 (param i32)))
(import "env" "memcpy" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "printn" (func $fimport$24 (param i64)))
(import "env" "prints" (func $fimport$25 (param i32)))
(import "env" "printui" (func $fimport$26 (param i64)))
(import "env" "read_action_data" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$28 (param i64)))
(import "env" "require_auth2" (func $fimport$29 (param i64 i64)))
(import "env" "send_inline" (func $fimport$30 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN5eosio8gambling2onERKNS_8currency8transferEy" (func $5))
(export "_ZN5eosio8gambling3betEyRKNS_5assetENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE" (func $6))
(export "_ZN5eosio8gambling5splitENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_" (func $7))
(export "_ZN5eosio8gambling4loadEy" (func $44))
(export "_ZN5eosio8gambling11visitplayerEyy" (func $45))
(export "_ZN5eosio8gambling8resethisEy" (func $46))
(export "_ZN5eosio8gambling5resetEv" (func $47))
(export "_ZN5eosio8gambling7lotteryENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE" (func $48))
(export "_ZN5eosio8gambling5applyEyy" (func $65))
(export "apply" (func $72))
(export "malloc" (func $76))
(export "free" (func $79))
(export "_ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $87))
(export "__errno_location" (func $94))
(export "strtol" (func $95))
(export "__shlim" (func $96))
(export "__intscan" (func $97))
(export "__shgetc" (func $98))
(export "__uflow" (func $99))
(export "__toread" (func $100))
(export "memchr" (func $101))
(export "memcmp" (func $102))
(export "strlen" (func $103))
(table $0 6 6 anyfunc)
(elem (i32.const 0) $104 $47 $48 $45 $46 $44)



int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC __errno_location ()
{
	return [10304]
}

int_32 .FUNC strtol (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return (CASTING uint_32)(uint_64 $3)
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [10321])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [10321])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [10321]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [10321]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [10592]))
	$10 = *(($13 + [10321]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [10321]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [10321]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [10321]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [10321])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [10321])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $80($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $86($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $91 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $80($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $80($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $32(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1168])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($2, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [1168])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$7 = *($0 + [4])
	$3 = *($7 + [8])
	$5 = *($7)
	$6 = *($5 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)-8272096940049940480, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $64($5, $4)
	*($8 + [4]) = [0]
	*($8) = $5
	$6 = *(*(CALL $51($8) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1200])
	*($1) = *(($5 + [16]))
	$4 = ($1 + [8])
	CALL $83($4, *($7 + [4]))
	$6 = CALL current_time()
	*($3 + [8]) = ((int_64)*($1) + (int_64)1)
	*($1 + [24]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$5 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [16])
	$6 = (CASTING uint_64)(uint_32 $7)
	$3 = ($1 + [24])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ($5 <= [513]) ){ goto $label$5 }
	$7 = CALL malloc($5)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$4
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [992])
	CALL memcpy($7, $1, [8])
	*($8 + [4]) = ($7 + [8])
	CALL $36($8, $4)
	CALL eosio_assert(((int_32)(*($8 + [8]) - *($8 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($8 + [4]), $3, [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	$6 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-8272096940049940480, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL free($7)
	
.LABEL $label$6
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC _ZN5eosio8gambling7lotteryENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	float_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_64 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	$36 = (*([0] + [4]) - [448])
	*([0] + [4]) = $36
	CALL require_auth(*($0))
	$30 = ($36 + [384])
	$28 = ($1 + [4])
	$31 = [0]
	
.LOOP $label$2:
	$29 = *($1)
	$27 = ($29 & [1])
	if ( $27 ){ goto $label$4 }
	if ( ($31 <= uint_32($29 >> [1])) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((uint_32)$31 >= (uint_32)*($28)) ){ goto $label$1 }
	
.LABEL $label$3
	$29 = ($31 + [1])
	CALL $93(($36 + [32]), $1, $31, $29, $1)
	*($30) = (CASTING int_64)(int_32 CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($36 + [32]), [0], [10]))
	if ( ((*($36 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $81(*((($36 + [32]) + [8])))
	
.LABEL $label$5
	$30 = ($30 + [8])
	$31 = $29
	goto $label$2 
	
.LABEL $label$1
	if ( $27 ){ goto $label$7 }
	$31 = uint_32($29 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$31 = *(($1 + [4]))
	
.LABEL $label$6
	if ( ((int_32)$31 != (int_32)[5]) ){ goto $label$8 }
	$15 = *($0)
	$28 = *(($0 + [80]))
	$29 = *(($0 + [84]))
	if ( ((int_32)$29 == (int_32)$28) ){ goto $label$9 }
	$31 = ($29 + [-24])
	$27 = ([0] - $28)
	
.LOOP $label$10:
	if ( ((int_64)*(*($31)) == (int_64)$15) ){ goto $label$9 }
	$29 = $31
	$30 = ($31 + [-24])
	$31 = $30
	if ( ((int_32)($30 + $27) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	$2 = ($0 + [56])
	if ( ((int_32)$29 == (int_32)$28) ){ goto $label$12 }
	$3 = *(($29 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)$2), [144])
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	$31 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-6030999592743469056, $15)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$11 }
	$3 = CALL $8($2, $31)
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)$2), [144])
	
.LABEL $label$11
	CALL eosio_assert([1], [208])
	$15 = (int_64)5459781
	$31 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$30 = [1]
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$30 = [0]
	
.LABEL $label$13
	CALL eosio_assert($30, [272])
	$4 = *(($3 + [24]))
	$14 = (int_64)0
	$16 = ($0 + [24])
	$31 = CALL db_lowerbound_i64(*($0 + [16]), *($16), (int_64)3607749778980137328, (int_64)0)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$18 }
	$6 = ($3 + [8])
	$5 = ($0 + [16])
	$13 = CALL $23($5, $31)
	$12 = (($36 + [224]) | [1])
	$11 = (($36 + [32]) + [32])
	$10 = (($36 + [32]) + [16])
	$9 = (($36 + [16]) | [1])
	$8 = (($36 + [192]) | [1])
	$7 = (($36 + [256]) | [1])
	$17 = (($36 + [344]) + [24])
	$18 = (($36 + [344]) + [28])
	$19 = (($36 + [344]) + [36])
	$20 = ($0 + [40])
	$21 = ($0 + [44])
	$26 = ($36 + [124])
	$14 = (int_64)0
	
.LOOP $label$19:
	*((($36 + [344]) + [8])) = *($13)
	*((($36 + [344]) + [16])) = (int_64)-1
	*($17) = [0]
	*($36 + [344]) = *($0)
	*($18) = [0]
	*((($36 + [344]) + [32])) = [0]
	*($19) = [0]
	*($36 + [336]) = ($36 + [344])
	CALL $52(($36 + [32]), ($36 + [336]), $6)
	$31 = *($36 + [36])
	if ( ($31 == 0) ){ goto $label$28 }
	if ( ((int_64)*($6) != (int_64)*($31 + [8])) ){ goto $label$28 }
	$15 = *($36 + [32])
	*($36 + [328]) = $15
	$31 = (CASTING uint_32)(uint_64 (uint_64)$15 >> (uint_64)(int_64)32)
	if ( ($31) == 0) ){ goto $label$27 }
	
.LOOP $label$29:
	if ( ((int_64)*($31 + [8]) != (int_64)*($6)) ){ goto $label$27 }
	if ( (int_64)(*($31 + [72]) == 0) ){ goto $label$30 }
	if ( (int_64)(*($31 + [56]) == 0) ){ goto $label$30 }
	if ( ((int_64)*($31 + [40]) < (int_64)0) ){ goto $label$30 }
	$15 = *($31 + [16])
	$28 = *($20)
	$29 = *($21)
	if ( ((int_32)$29 == (int_32)$28) ){ goto $label$31 }
	$31 = ($29 + [-24])
	$27 = ([0] - $28)
	
.LOOP $label$32:
	if ( ((int_64)*(*($31)) == (int_64)$15) ){ goto $label$31 }
	$29 = $31
	$30 = ($31 + [-24])
	$31 = $30
	if ( ((int_32)($30 + $27) != (int_32)[-24]) ){ goto $label$32 }
	
.LABEL $label$31
	if ( ((int_32)$29 == (int_32)$28) ){ goto $label$34 }
	$31 = *(($29 + [-24]))
	CALL eosio_assert(((int_32)*($31 + [16]) == (int_32)$5), [144])
	if ( $31 ){ goto $label$33 }
	goto $label$30 
	
.LABEL $label$34
	$31 = CALL db_find_i64(*($5), *($16), (int_64)3607749778980137328, $15)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$30 }
	CALL eosio_assert(((int_32)*(CALL $23($5, $31) + [16]) == (int_32)$5), [144])
	
.LABEL $label$33
	CALL memset(($36 + [323]), [0], [5])
	$31 = *($36 + [332])
	*(($22 = (($36 + [304]) + [8]))) = *(($31 + [48]))
	*($36 + [304]) = *($31 + [40])
	*($36 + [304]) = (int_64)0
	$34 = ((uint_64)*($31 + [40]) / (uint_64)*($31 + [56]))
	$30 = *($31 + [24])
	if ( ($30 & [1]) ){ goto $label$36 }
	if ( ((uint_32)uint_32($30 >> [1]) >= (uint_32)[15]) ){ goto $label$35 }
	goto $label$30 
	
.LABEL $label$36
	if ( (*(($31 + [28])) <= [15]) ){ goto $label$30 }
	
.LABEL $label$35
	CALL $92(($36 + [272]), ($31 + [24]))
	*(($29 = (($36 + [256]) + [8]))) = [0]
	*($36 + [256]) = (int_64)0
	$31 = CALL strlen([80])
	if ( ((uint_32)$31 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$31 >= (uint_32)[11]) ){ goto $label$39 }
	*($36 + [256]) = ($31 << [1])
	$30 = $7
	if ( $31 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$27 = (($31 + [16]) & [-16])
	$30 = CALL $80($27)
	*($29) = $30
	*($36 + [256]) = ($27 | [1])
	*($36 + [260]) = $31
	
.LABEL $label$38
	CALL memcpy($30, [80], $31)
	
.LABEL $label$37
	*(($30 + $31)) = [0]
	CALL _ZN5eosio8gambling5splitENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_(($36 + [288]), $31, ($36 + [272]), ($36 + [256]))
	if ( ((*($36 + [256]) & [1]) == 0) ){ goto $label$40 }
	CALL $81(*($29))
	
.LABEL $label$40
	if ( ((*($36 + [272]) & [1]) == 0) ){ goto $label$41 }
	CALL $81(*((($36 + [272]) + [8])))
	
.LABEL $label$41
	$28 = [0]
	if ( ((int_32)CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(*($36 + [288]), [0], [10]) < (int_32)[1]) ){ goto $label$42 }
	$28 = [0]
	$27 = [1]
	
.LOOP $label$43:
	CALL $92(($36 + [240]), (*($36 + [288]) + ((int_32)$27 * (int_32)[12])))
	*(($29 = (($36 + [224]) + [8]))) = [0]
	*($36 + [224]) = (int_64)0
	$31 = CALL strlen([96])
	if ( ((uint_32)$31 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$31 >= (uint_32)[11]) ){ goto $label$46 }
	*($36 + [224]) = ($31 << [1])
	$30 = $12
	if ( $31 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	$23 = (($31 + [16]) & [-16])
	$30 = CALL $80($23)
	*($29) = $30
	*($36 + [224]) = ($23 | [1])
	*($36 + [228]) = $31
	
.LABEL $label$45
	CALL memcpy($30, [96], $31)
	
.LABEL $label$44
	*(($30 + $31)) = [0]
	CALL _ZN5eosio8gambling5splitENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_(($36 + [32]), $31, ($36 + [240]), ($36 + [224]))
	if ( ((*($36 + [224]) & [1]) == 0) ){ goto $label$47 }
	CALL $81(*($29))
	
.LABEL $label$47
	if ( ((*($36 + [240]) & [1]) == 0) ){ goto $label$48 }
	CALL $81(*((($36 + [240]) + [8])))
	
.LABEL $label$48
	$30 = *($36 + [32])
	if ( ((int_32)*($36 + [36]) == (int_32)$30) ){ goto $label$49 }
	$23 = ($27 + [-1])
	$15 = *((($36 + [384]) + ($23 << [3])))
	$31 = [0]
	$29 = [0]
	
.LOOP $label$51:
	if ( ((int_64)(CASTING int_64)(int_32 CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($30 + $31), [0], [10])) == (int_64)$15) ){ goto $label$50 }
	$31 = ($31 + [12])
	$30 = *($36 + [32])
	$29 = ($29 + [1])
	if ( ($29 <= ((int_32)(*($36 + [36]) - $30) / (int_32)[12])) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	*((($36 + [323]) + $23)) = [1]
	$30 = *($36 + [32])
	
.LABEL $label$49
	if ( ($30 == 0) ){ goto $label$52 }
	$31 = *($36 + [36])
	if ( ((int_32)$31 == (int_32)$30) ){ goto $label$54 }
	$29 = ([0] - $30)
	$31 = ($31 + [-12])
	
.LOOP $label$55:
	if ( ((*($31) & [1]) == 0) ){ goto $label$56 }
	CALL $81(*(($31 + [8])))
	
.LABEL $label$56
	$31 = ($31 + [-12])
	if ( ((int_32)($31 + $29) != (int_32)[-12]) ){ goto $label$55 }
	$31 = *($36 + [32])
	goto $label$53 
	
.LABEL $label$54
	$31 = $30
	
.LABEL $label$53
	*($36 + [36]) = $30
	CALL $81($31)
	
.LABEL $label$52
	$28 = ($28 + [1])
	$31 = ((int_32)$27 < (int_32)CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(*($36 + [288]), [0], [10]))
	$27 = ($27 + [1])
	if ( $31 ){ goto $label$43 }
	
.LABEL $label$42
	if ( ((int_32)CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(*($36 + [288]), [0], [10]) != (int_32)[1]) ){ goto $label$57 }
	CALL $92(($36 + [208]), (*($36 + [288]) + [72]))
	*(($29 = (($36 + [192]) + [8]))) = [0]
	*($36 + [192]) = (int_64)0
	$31 = CALL strlen([96])
	if ( ((uint_32)$31 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$31 >= (uint_32)[11]) ){ goto $label$60 }
	*($36 + [192]) = ($31 << [1])
	$30 = $8
	if ( $31 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	$27 = (($31 + [16]) & [-16])
	$30 = CALL $80($27)
	*($29) = $30
	*($36 + [192]) = ($27 | [1])
	*($36 + [196]) = $31
	
.LABEL $label$59
	CALL memcpy($30, [96], $31)
	
.LABEL $label$58
	*(($30 + $31)) = [0]
	CALL _ZN5eosio8gambling5splitENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_(($36 + [32]), $31, ($36 + [208]), ($36 + [192]))
	if ( ((*($36 + [192]) & [1]) == 0) ){ goto $label$61 }
	CALL $81(*($29))
	
.LABEL $label$61
	if ( ((*($36 + [208]) & [1]) == 0) ){ goto $label$62 }
	CALL $81(*((($36 + [208]) + [8])))
	
.LABEL $label$62
	$31 = CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(*($36 + [32]), [0], [10])
	$15 = *((($36 + [384]) + [32]))
	if ( ((int_32)$31 != (int_32)[1]) ){ goto $label$65 }
	if ( ((uint_64)$15 > (uint_64)(int_64)4) ){ goto $label$64 }
	
.LABEL $label$65
	if ( ((int_32)CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(*($36 + [32]), [0], [10]) != (int_32)[2]) ){ goto $label$63 }
	if ( ((uint_64)$15 > (uint_64)(int_64)4) ){ goto $label$63 }
	
.LABEL $label$64
	*($36 + [304]) = ((int_64)*($36 + [304]) + (int_64)((int_64)$34 << (int_64)1))
	
.LABEL $label$63
	$15 = ((int_64)$15 & (int_64)1)
	if ( ((int_32)CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji((*($36 + [32]) + [12]), [0], [10]) != (int_32)[1]) ){ goto $label$68 }
	if ( ((int_64)$15 != (int_64)0) ){ goto $label$67 }
	
.LABEL $label$68
	if ( ((int_32)CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji((*($36 + [32]) + [12]), [0], [10]) != (int_32)[2]) ){ goto $label$66 }
	if ( ((int_64)$15 != (int_64)0) ){ goto $label$66 }
	
.LABEL $label$67
	*($36 + [304]) = ((int_64)*($36 + [304]) + (int_64)((int_64)$34 << (int_64)1))
	
.LABEL $label$66
	$29 = *($36 + [32])
	if ( ($29 == 0) ){ goto $label$57 }
	$31 = *($36 + [36])
	if ( ((int_32)$31 == (int_32)$29) ){ goto $label$70 }
	$30 = ([0] - $29)
	$31 = ($31 + [-12])
	
.LOOP $label$71:
	if ( ((*($31) & [1]) == 0) ){ goto $label$72 }
	CALL $81(*(($31 + [8])))
	
.LABEL $label$72
	$31 = ($31 + [-12])
	if ( ((int_32)($31 + $30) != (int_32)[-12]) ){ goto $label$71 }
	$31 = *($36 + [32])
	goto $label$69 
	
.LABEL $label$70
	$31 = $29
	
.LABEL $label$69
	*($36 + [36]) = $29
	CALL $81($31)
	
.LABEL $label$57
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$73 }
	$15 = ((int_64)$34 * (int_64)10)
	if ( ((int_32)$28 != (int_32)[1]) ){ goto $label$74 }
	if ( ((*($36 + [323]) & [255]) == 0) ){ goto $label$74 }
	*($36 + [304]) = ((int_64)*($36 + [304]) + (int_64)$15)
	goto $label$73 
	
.LABEL $label$74
	if ( ((int_32)$28 != (int_32)[2]) ){ goto $label$75 }
	if ( ((*((($36 + [323]) + [1])) & [255]) == 0) ){ goto $label$75 }
	*($36 + [304]) = ((int_64)((int_64)*($36 + [304]) + (int_64)$15) + (int_64)$15)
	
.LABEL $label$75
	if ( ((int_32)$28 != (int_32)[3]) ){ goto $label$76 }
	if ( ((*((($36 + [323]) + [2])) & [255]) == 0) ){ goto $label$76 }
	*($36 + [304]) = ((int_64)((int_64)((int_64)*($36 + [304]) + (int_64)$15) + (int_64)$15) + (int_64)$15)
	
.LABEL $label$76
	if ( ((int_32)$28 != (int_32)[4]) ){ goto $label$77 }
	if ( ((*((($36 + [323]) + [3])) & [255]) == 0) ){ goto $label$77 }
	*($36 + [304]) = ((int_64)((int_64)((int_64)((int_64)*($36 + [304]) + (int_64)$15) + (int_64)$15) + (int_64)$15) + (int_64)$15)
	
.LABEL $label$77
	if ( ((int_32)$28 != (int_32)[5]) ){ goto $label$73 }
	if ( ((*((($36 + [323]) + [4])) & [255]) == 0) ){ goto $label$73 }
	*($36 + [304]) = ((int_64)((int_64)((int_64)((int_64)((int_64)*($36 + [304]) + (int_64)$15) + (int_64)$15) + (int_64)$15) + (int_64)$15) + (int_64)$15)
	
.LABEL $label$73
	$24 = (CASTING float_64)(int_64 *($36 + [304]))
	*($36 + [304]) = (Rounds 0)(((float_64)$24 + (float_64)((float_64)$24 * (float_64)(float_64)-0.02)))
	$31 = *($36 + [332])
	$15 = *($0)
	*($36 + [32]) = ($36 + [304])
	CALL eosio_assert(((int_32)$31 != (int_32)[0]), [400])
	CALL $53(*($36 + [336]), $31, $15, ($36 + [32]))
	*((($36 + [152]) + [16])) = (int_64)-1
	$31 = *($36 + [332])
	*((($36 + [152]) + [8])) = *($31 + [16])
	*($36 + [152]) = *($0)
	*(($27 = (($36 + [152]) + [24]))) = [0]
	*(($28 = (($36 + [152]) + [28]))) = [0]
	*((($36 + [152]) + [32])) = [0]
	*((($36 + [152]) + [36])) = [0]
	*($36 + [144]) = ($36 + [152])
	CALL $54(($36 + [32]), ($36 + [144]), $31)
	$30 = *($36 + [36])
	if ( ($30 == 0) ){ goto $label$78 }
	if ( ((int_64)*($31) != (int_64)*($30 + [8])) ){ goto $label$78 }
	if ( ($30 == 0) ){ goto $label$78 }
	$15 = *($0)
	*($36 + [32]) = ($36 + [304])
	CALL eosio_assert([1], [400])
	CALL $55(*($36 + [144]), $30, $15, ($36 + [32]))
	
.LABEL $label$78
	if ( ((int_64)*($36 + [304]) < (int_64)1) ){ goto $label$79 }
	$35 = *($0)
	$15 = (int_64)0
	$32 = (int_64)59
	$31 = [784]
	$33 = (int_64)0
	
.LOOP $label$80:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$85 }
	$30 = *($31)
	if ( ((uint_32)(($30 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$84 }
	$30 = ($30 + [165])
	goto $label$83 
	
.LABEL $label$85
	$34 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$84
	$30 = ( ($30 + [208]) ? [0] : ((($30 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$83
	$34 = (int_64)((int_64)(CASTING uint_64)(uint_32 $30) << (int_64)56) >> (int_64)56)
	
.LABEL $label$82
	$34 = ((int_64)((int_64)$34 & (int_64)31) << (int_64)((int_64)$32 & (int_64)4294967295))
	
.LABEL $label$81
	$31 = ($31 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$33 = ((int_64)$34 | (int_64)$33)
	$32 = ((int_64)$32 + (int_64)-5)
	if ( ((int_64)$32 != (int_64)-6) ){ goto $label$80 }
	*((($36 + [88]) + [8])) = $33
	*($36 + [88]) = $35
	$15 = (int_64)0
	$32 = (int_64)59
	$31 = [800]
	$33 = (int_64)0
	
.LOOP $label$86:
	if ( ((uint_64)$15 > (uint_64)(int_64)10) ){ goto $label$91 }
	$30 = *($31)
	if ( ((uint_32)(($30 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$90 }
	$30 = ($30 + [165])
	goto $label$89 
	
.LABEL $label$91
	$34 = (int_64)0
	if ( ((int_64)$15 == (int_64)11) ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$90
	$30 = ( ($30 + [208]) ? [0] : ((($30 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$89
	$34 = (int_64)((int_64)(CASTING uint_64)(uint_32 $30) << (int_64)56) >> (int_64)56)
	
.LABEL $label$88
	$34 = ((int_64)((int_64)$34 & (int_64)31) << (int_64)((int_64)$32 & (int_64)4294967295))
	
.LABEL $label$87
	$31 = ($31 + [1])
	$32 = ((int_64)$32 + (int_64)-5)
	$33 = ((int_64)$34 | (int_64)$33)
	$15 = ((int_64)$15 + (int_64)1)
	if ( ((int_64)$15 != (int_64)13) ){ goto $label$86 }
	$15 = (int_64)0
	$32 = (int_64)59
	$31 = [816]
	$35 = (int_64)0
	
.LOOP $label$92:
	if ( ((uint_64)$15 > (uint_64)(int_64)7) ){ goto $label$97 }
	$30 = *($31)
	if ( ((uint_32)(($30 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$96 }
	$30 = ($30 + [165])
	goto $label$95 
	
.LABEL $label$97
	$34 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$94 }
	goto $label$93 
	
.LABEL $label$96
	$30 = ( ($30 + [208]) ? [0] : ((($30 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$95
	$34 = (int_64)((int_64)(CASTING uint_64)(uint_32 $30) << (int_64)56) >> (int_64)56)
	
.LABEL $label$94
	$34 = ((int_64)((int_64)$34 & (int_64)31) << (int_64)((int_64)$32 & (int_64)4294967295))
	
.LABEL $label$93
	$31 = ($31 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$35 = ((int_64)$34 | (int_64)$35)
	$32 = ((int_64)$32 + (int_64)-5)
	if ( ((int_64)$32 != (int_64)-6) ){ goto $label$92 }
	$23 = *($36 + [332])
	*(($30 = (($36 + [16]) + [8]))) = [0]
	*($36 + [16]) = (int_64)0
	$31 = CALL strlen([832])
	if ( ((uint_32)$31 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$31 >= (uint_32)[11]) ){ goto $label$100 }
	*($36 + [16]) = ($31 << [1])
	$29 = $9
	if ( $31 ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$100
	$25 = (($31 + [16]) & [-16])
	$29 = CALL $80($25)
	*($30) = $29
	*($36 + [16]) = ($25 | [1])
	*($36 + [20]) = $31
	
.LABEL $label$99
	CALL memcpy($29, [832], $31)
	
.LABEL $label$98
	*(($29 + $31)) = [0]
	*((($36 + [32]) + [8])) = *(($23 + [16]))
	*(($10 + [4])) = *($36 + [308])
	*(($10 + [8])) = *($22)
	*($36 + [32]) = *($0)
	*($10) = *($36 + [304])
	*(($10 + [12])) = *((($36 + [304]) + [12]))
	*(($11 + [8])) = *($30)
	*($11) = *($36 + [16])
	*($36 + [16]) = [0]
	*($36 + [20]) = [0]
	*($30) = [0]
	CALL $11(($36 + [432]), CALL $10(($36 + [104]), ($36 + [88]), $33, $35, ($36 + [32])))
	$31 = *($36 + [432])
	CALL send_inline($31, (*($36 + [436]) - $31))
	$31 = *($36 + [432])
	if ( ($31 == 0) ){ goto $label$101 }
	*($36 + [436]) = $31
	CALL $81($31)
	
.LABEL $label$101
	$31 = *((($36 + [104]) + [28]))
	if ( ($31 == 0) ){ goto $label$102 }
	*((($36 + [104]) + [32])) = $31
	CALL $81($31)
	
.LABEL $label$102
	$31 = *((($36 + [104]) + [16]))
	if ( ($31 == 0) ){ goto $label$103 }
	*($26) = $31
	CALL $81($31)
	
.LABEL $label$103
	if ( ((*($11) & [1]) == 0) ){ goto $label$104 }
	CALL $81(*((($36 + [32]) + [40])))
	
.LABEL $label$104
	if ( ((*($36 + [16]) & [1]) == 0) ){ goto $label$105 }
	CALL $81(*($30))
	
.LABEL $label$105
	CALL eosio_assert(((int_64)*($22) == (int_64)$4), [1008])
	$14 = ((int_64)*($36 + [304]) + (int_64)$14)
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [1056])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1088])
	
.LABEL $label$79
	$29 = *($27)
	if ( ($29 == 0) ){ goto $label$106 }
	$31 = *($28)
	if ( ((int_32)$31 == (int_32)$29) ){ goto $label$108 }
	
.LOOP $label$109:
	$31 = ($31 + [-24])
	$30 = *($31)
	*($31) = [0]
	if ( ($30 == 0) ){ goto $label$110 }
	if ( ((*($30 + [32]) & [1]) == 0) ){ goto $label$111 }
	CALL $81(*(($30 + [40])))
	
.LABEL $label$111
	CALL $81($30)
	
.LABEL $label$110
	if ( ((int_32)$29 != (int_32)$31) ){ goto $label$109 }
	$31 = *($27)
	goto $label$107 
	
.LABEL $label$108
	$31 = $29
	
.LABEL $label$107
	*($28) = $29
	CALL $81($31)
	
.LABEL $label$106
	$29 = *($36 + [288])
	if ( ($29 == 0) ){ goto $label$30 }
	$31 = *($36 + [292])
	if ( ((int_32)$31 == (int_32)$29) ){ goto $label$113 }
	$30 = ([0] - $29)
	$31 = ($31 + [-12])
	
.LOOP $label$114:
	if ( ((*($31) & [1]) == 0) ){ goto $label$115 }
	CALL $81(*(($31 + [8])))
	
.LABEL $label$115
	$31 = ($31 + [-12])
	if ( ((int_32)($31 + $30) != (int_32)[-12]) ){ goto $label$114 }
	$31 = *($36 + [288])
	goto $label$112 
	
.LABEL $label$113
	$31 = $29
	
.LABEL $label$112
	*($36 + [292]) = $29
	CALL $81($31)
	
.LABEL $label$30
	CALL $56(($36 + [328]))
	$31 = *($36 + [332])
	if ( $31 ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	*($36 + [332]) = [0]
	*($36 + [328]) = ($36 + [336])
	
.LABEL $label$27
	$29 = *($17)
	if ( ($29 == 0) ){ goto $label$20 }
	$31 = *($18)
	if ( ((int_32)$31 != (int_32)$29) ){ goto $label$116 }
	$31 = $29
	goto $label$21 
	
.LABEL $label$116
	
.LOOP $label$117:
	$31 = ($31 + [-24])
	$30 = *($31)
	*($31) = [0]
	if ( ($30 == 0) ){ goto $label$118 }
	if ( ((*($30 + [24]) & [1]) == 0) ){ goto $label$119 }
	CALL $81(*(($30 + [32])))
	
.LABEL $label$119
	CALL $81($30)
	
.LABEL $label$118
	if ( ((int_32)$29 != (int_32)$31) ){ goto $label$117 }
	goto $label$22 
	
.LABEL $label$26
	CALL $82(($36 + [224]))
	
.LABEL $label$25
	CALL $82(($36 + [256]))
	
.LABEL $label$24
	CALL $82(($36 + [16]))
	
.LABEL $label$23
	CALL $82(($36 + [192]))
	
.LABEL $label$22
	$31 = *($17)
	
.LABEL $label$21
	*($18) = $29
	CALL $81($31)
	
.LABEL $label$20
	CALL eosio_assert([1], [960])
	$31 = CALL db_next_i64(*($13 + [20]), ($36 + [32]))
	if ( ((int_32)$31 <= (int_32)[-1]) ){ goto $label$18 }
	$13 = CALL $23($5, $31)
	goto $label$19 
	
.LABEL $label$18
	*(($29 = ($36 + [376]))) = [0]
	*($36 + [360]) = (int_64)-1
	*($36 + [368]) = (int_64)0
	$15 = *($0)
	*($36 + [344]) = $15
	*($36 + [352]) = $15
	*($36 + [156]) = $1
	*($36 + [160]) = $0
	*($36 + [152]) = ($36 + [344])
	*($36 + [104]) = $15
	CALL eosio_assert(((int_64)$15 == (int_64)CALL $fimport$2()), [848])
	*($36 + [36]) = ($36 + [152])
	*($36 + [32]) = ($36 + [344])
	*($36 + [40]) = ($36 + [104])
	*(($31 = CALL $80([48]))) = (int_64)1000
	*($31 + [8 align=4]) = (int_64)0
	*($31 + [16]) = [0]
	*($31 + [32]) = ($36 + [344])
	CALL $49(($36 + [32]), $31)
	*($36 + [304]) = $31
	$15 = *($31)
	*($36 + [32]) = $15
	$27 = *($31 + [36])
	*($36 + [88]) = $27
	$28 = ($36 + [372])
	$30 = *($28)
	if ( ((uint_32)$30 >= (uint_32)*($29)) ){ goto $label$121 }
	*($30 + [8]) = $15
	*($30 + [16]) = $27
	*($36 + [304]) = [0]
	*($30) = $31
	*($28) = ($30 + [24])
	goto $label$120 
	
.LABEL $label$121
	CALL $50(($36 + [368]), ($36 + [304]), ($36 + [32]), ($36 + [88]))
	
.LABEL $label$120
	$31 = *($36 + [304])
	*($36 + [304]) = [0]
	if ( ($31 == 0) ){ goto $label$122 }
	if ( ((*($31 + [8]) & [1]) == 0) ){ goto $label$123 }
	CALL $81(*(($31 + [16])))
	
.LABEL $label$123
	CALL $81($31)
	
.LABEL $label$122
	*(($29 = ($36 + [184]))) = [0]
	*($36 + [168]) = (int_64)-1
	$15 = *($0)
	*($36 + [152]) = $15
	*($36 + [160]) = $15
	*($36 + [176]) = (int_64)0
	*($36 + [12]) = [0]
	*($36 + [8]) = ($36 + [344])
	*($36 + [88]) = *(CALL $51(($36 + [8])))
	$31 = CALL db_lowerbound_i64(*($36 + [152]), *($36 + [160]), (int_64)-8272095835152449536, (int_64)0)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$127 }
	CALL $57(($36 + [152]), $31)
	$31 = [0]
	*($36 + [4]) = [0]
	*($36) = ($36 + [152])
	$30 = ($36 + [160])
	if ( (uint_64)((int_64))(*(*(CALL $58($36) + [4])) - *(CALL $57(($36 + [152]), CALL $fimport$13(*($36 + [152]), *($30), (int_64)-8272095835152449536, (int_64)0)))) <= (int_64)101) ){ goto $label$127 }
	$30 = CALL db_lowerbound_i64(*($36 + [152]), *($30), (int_64)-8272095835152449536, (int_64)0)
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$128 }
	$31 = CALL $57(($36 + [152]), $30)
	
.LABEL $label$128
	$30 = ((int_32)$31 != (int_32)[0])
	CALL eosio_assert($30, [912])
	CALL eosio_assert($30, [960])
	$30 = CALL db_next_i64(*($31 + [44]), ($36 + [32]))
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$129 }
	CALL $57(($36 + [152]), $30)
	
.LABEL $label$129
	CALL $59(($36 + [152]), $31)
	$15 = *($0)
	*($36 + [308]) = ($36 + [88])
	*($36 + [304]) = ($36 + [152])
	*($36 + [104]) = $15
	CALL eosio_assert(((int_64)*($36 + [152]) == (int_64)CALL $fimport$2()), [848])
	*($36 + [36]) = ($36 + [304])
	*($36 + [32]) = ($36 + [152])
	*($36 + [40]) = ($36 + [104])
	*(($31 = CALL $80([56])) + [8]) = (int_64)1000
	*($31 + [16 align=4]) = (int_64)0
	*($31 + [24]) = [0]
	*($31 + [40]) = ($36 + [152])
	CALL $60(($36 + [32]), $31)
	*($36 + [432]) = $31
	$15 = *($31)
	*($36 + [32]) = $15
	$29 = *($31 + [44])
	*($36 + [288]) = $29
	$27 = ($36 + [180])
	$30 = *($27)
	if ( ((uint_32)$30 >= (uint_32)*(($36 + [184]))) ){ goto $label$126 }
	*($30 + [8]) = $15
	*($30 + [16]) = $29
	*($36 + [432]) = [0]
	*($30) = $31
	*($27) = ($30 + [24])
	goto $label$125 
	
.LABEL $label$127
	$15 = *($0)
	*($36 + [308]) = ($36 + [88])
	*($36 + [304]) = ($36 + [152])
	*($36 + [104]) = $15
	CALL eosio_assert(((int_64)*($36 + [152]) == (int_64)CALL $fimport$2()), [848])
	*($36 + [36]) = ($36 + [304])
	*($36 + [32]) = ($36 + [152])
	*($36 + [40]) = ($36 + [104])
	*(($31 = CALL $80([56])) + [8]) = (int_64)1000
	*($31 + [16 align=4]) = (int_64)0
	*($31 + [24]) = [0]
	*($31 + [40]) = ($36 + [152])
	CALL $62(($36 + [32]), $31)
	*($36 + [432]) = $31
	$15 = *($31)
	*($36 + [32]) = $15
	$27 = *($31 + [44])
	*($36 + [288]) = $27
	$28 = ($36 + [180])
	$30 = *($28)
	if ( ((uint_32)$30 >= (uint_32)*($29)) ){ goto $label$131 }
	*($30 + [8]) = $15
	*($30 + [16]) = $27
	*($36 + [432]) = [0]
	*($30) = $31
	*($28) = ($30 + [24])
	goto $label$130 
	
.LABEL $label$131
	CALL $61(($36 + [176]), ($36 + [432]), ($36 + [32]), ($36 + [288]))
	
.LABEL $label$130
	$31 = *($36 + [432])
	*($36 + [432]) = [0]
	if ( ($31 == 0) ){ goto $label$124 }
	if ( ((*($31 + [16]) & [1]) == 0) ){ goto $label$132 }
	CALL $81(*(($31 + [24])))
	
.LABEL $label$132
	CALL $81($31)
	goto $label$124 
	
.LABEL $label$126
	CALL $61(($36 + [176]), ($36 + [432]), ($36 + [32]), ($36 + [288]))
	
.LABEL $label$125
	$31 = *($36 + [432])
	*($36 + [432]) = [0]
	if ( ($31 == 0) ){ goto $label$124 }
	if ( ((*($31 + [16]) & [1]) == 0) ){ goto $label$133 }
	CALL $81(*(($31 + [24])))
	
.LABEL $label$133
	CALL $81($31)
	
.LABEL $label$124
	$34 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [400])
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)$2), [448])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [496])
	*($3 + [8]) = *($0 + [8])
	$15 = *($3)
	CALL eosio_assert(((int_64)$4 == (int_64)*(($3 + [24]))), [1648])
	$32 = (int_64)
	*($3 + [16]) = $32(*($3 + [16]) - $14))
	CALL eosio_assert(((int_64)$32 > (int_64)-4611686018427387904), [1696])
	CALL eosio_assert(((int_64)*($3 + [16]) < (int_64)4611686018427387904), [1728])
	*($3 + [32]) = (int_64)0
	CALL eosio_assert(((int_64)$15 == (int_64)*($3)), [560])
	*($36 + [312]) = (($36 + [32]) + [40])
	*($36 + [308]) = ($36 + [32])
	*($36 + [304]) = ($36 + [32])
	*($36 + [432]) = ($36 + [304])
	*($36 + [108]) = ($3 + [8])
	*($36 + [104]) = $3
	*($36 + [112]) = ($3 + [16])
	*($36 + [116]) = ($3 + [32])
	CALL $9(($36 + [104]), ($36 + [432]))
	CALL db_update_i64(*($3 + [44]), $34, ($36 + [32]), [40])
	$31 = ($0 + [72])
	if ( (uint_64)($15 <= *($31)) ){ goto $label$134 }
	*($31) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$134
	$29 = *($36 + [176])
	if ( ($29 == 0) ){ goto $label$135 }
	$27 = ($36 + [180])
	$31 = *($27)
	if ( ((int_32)$31 == (int_32)$29) ){ goto $label$137 }
	
.LOOP $label$138:
	$31 = ($31 + [-24])
	$30 = *($31)
	*($31) = [0]
	if ( ($30 == 0) ){ goto $label$139 }
	if ( ((*($30 + [16]) & [1]) == 0) ){ goto $label$140 }
	CALL $81(*(($30 + [24])))
	
.LABEL $label$140
	CALL $81($30)
	
.LABEL $label$139
	if ( ((int_32)$29 != (int_32)$31) ){ goto $label$138 }
	$31 = *(($36 + [176]))
	goto $label$136 
	
.LABEL $label$137
	$31 = $29
	
.LABEL $label$136
	*($27) = $29
	CALL $81($31)
	
.LABEL $label$135
	$29 = *($36 + [368])
	if ( ($29 == 0) ){ goto $label$8 }
	$27 = ($36 + [372])
	$31 = *($27)
	if ( ((int_32)$31 == (int_32)$29) ){ goto $label$142 }
	
.LOOP $label$143:
	$31 = ($31 + [-24])
	$30 = *($31)
	*($31) = [0]
	if ( ($30 == 0) ){ goto $label$144 }
	if ( ((*($30 + [8]) & [1]) == 0) ){ goto $label$145 }
	CALL $81(*(($30 + [16])))
	
.LABEL $label$145
	CALL $81($30)
	
.LABEL $label$144
	if ( ((int_32)$29 != (int_32)$31) ){ goto $label$143 }
	$31 = *(($36 + [368]))
	goto $label$141 
	
.LABEL $label$142
	$31 = $29
	
.LABEL $label$141
	*($27) = $29
	CALL $81($31)
	
.LABEL $label$8
	*([0] + [4]) = ($36 + [448])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $80(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $92($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $81(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $81($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1168])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [992])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $36(*($1), ($0 + [32]))
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [992])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [992])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC _ZN5eosio8gambling5resetEv (int_32 $0)
{
	CALL require_auth(*($0))
}

void .FUNC _ZN5eosio8gambling8resethisEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $1
	*($6 + [24]) = (int_64)0
	*($6 + [36]) = [0]
	$0 = CALL db_lowerbound_i64($4, $1, (int_64)4229888623173959680, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $16($6, $0)
	
.LOOP $label$2:
	CALL eosio_assert([1], [912])
	CALL eosio_assert([1], [960])
	$3 = CALL db_next_i64(*($0 + [116]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	CALL $16($6, $3)
	
.LABEL $label$3
	CALL $18($6, $0)
	CALL eosio_assert([1], [960])
	$0 = CALL db_next_i64(*($0 + [116]), ($6 + [40]))
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$0 = CALL $16($6, $0)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$4 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL $81(*(($3 + [40])))
	
.LABEL $label$9
	CALL $81($3)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($6 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $2
	
.LABEL $label$5
	*($5) = $2
	CALL $81($0)
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [48])
}

void .FUNC _ZN5eosio8gambling11visitplayerEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [144])
	*([0] + [4]) = $15
	$4 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$9 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$8 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [144])
	if ( $8 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)3607749778980137328, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(CALL $23($3, $8) + [16]) == (int_32)$3), [144])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$2) ){ goto $label$5 }
	CALL prints([1584])
	goto $label$4 
	
.LABEL $label$6
	CALL prints([1552])
	goto $label$4 
	
.LABEL $label$5
	$4 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$9 }
	$8 = ($9 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$10:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$9 }
	$9 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$12 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [144])
	goto $label$11 
	
.LABEL $label$12
	$8 = [0]
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)3607749778980137328, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	$8 = CALL $23($3, $6)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [144])
	
.LABEL $label$11
	if ( (int_64)(*($8 + [8]) == 0) ){ goto $label$13 }
	CALL prints([1616])
	goto $label$4 
	
.LABEL $label$13
	$11 = *($0)
	if ( ($8 == 0) ){ goto $label$15 }
	CALL eosio_assert([1], [400])
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [448])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [496])
	$6 = ($8 + [8])
	*($15 + [128]) = *($6)
	*($6) = $2
	$13 = *($8)
	CALL eosio_assert([1], [560])
	CALL eosio_assert([1], [992])
	CALL memcpy(($15 + [16]), $8, [8])
	CALL eosio_assert([1], [992])
	CALL memcpy((($15 + [16]) | [8]), $6, [8])
	CALL db_update_i64(*($8 + [20]), $11, ($15 + [16]), [16])
	$9 = ($0 + [32])
	if ( (uint_64)($13 <= *($9)) ){ goto $label$16 }
	*($9) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($15 + [88]) = *($6)
	if ( (CALL memcmp(($15 + [128]), ($15 + [88]), [8]) == 0) ){ goto $label$14 }
	$6 = ($8 + [24])
	$8 = *($6)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$17 }
	$8 = CALL db_idx64_find_primary(*(($0 + [16])), *(($0 + [24])), (int_64)3607749778980137328, ($15 + [72]), $13)
	*($6) = $8
	
.LABEL $label$17
	CALL db_idx64_update($8, $11, ($15 + [88]))
	goto $label$14 
	
.LABEL $label$15
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [848])
	*(($8 = CALL $80([32])) + [16]) = $3
	*($8 + [8]) = $2
	*($8) = $1
	CALL eosio_assert([1], [992])
	CALL memcpy(($15 + [16]), $8, [8])
	CALL eosio_assert([1], [992])
	$6 = ($8 + [8])
	CALL memcpy((($15 + [16]) | [8]), $6, [8])
	$13 = *($8)
	$9 = ($0 + [24])
	*($8 + [20]) = CALL db_store_i64(*($9), (int_64)3607749778980137328, $11, $13, ($15 + [16]), [16])
	$5 = ($0 + [32])
	if ( (uint_64)($13 <= *($5)) ){ goto $label$18 }
	*($5) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	$13 = *($9)
	$10 = *($8)
	*($15 + [88]) = *($6)
	*($8 + [24]) = CALL db_idx64_store($13, (int_64)3607749778980137328, $11, $10, ($15 + [88]))
	*($15 + [88]) = $8
	$11 = *($8)
	*($15 + [16]) = $11
	$9 = *(($8 + [20]))
	*($15 + [72]) = $9
	$5 = ($0 + [44])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [48]))) ){ goto $label$20 }
	*($6 + [8]) = $11
	*($6 + [16]) = $9
	*($15 + [88]) = [0]
	*($6) = $8
	*($5) = ($6 + [24])
	goto $label$19 
	
.LABEL $label$20
	CALL $24(($0 + [40]), ($15 + [88]), ($15 + [16]), ($15 + [72]))
	
.LABEL $label$19
	$8 = *($15 + [88])
	*($15 + [88]) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $81($8)
	
.LABEL $label$14
	$11 = *($0)
	$4 = *(($0 + [80]))
	$9 = *(($0 + [84]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$21 }
	$8 = ($9 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$22:
	if ( ((int_64)*(*($8)) == (int_64)$11) ){ goto $label$21 }
	$9 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$22 }
	
.LABEL $label$21
	$8 = ($0 + [56])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$24 }
	$6 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$8), [144])
	goto $label$23 
	
.LABEL $label$24
	$6 = CALL $8($8, CALL $fimport$5(*(($0 + [56])), *(($0 + [64])), (int_64)-6030999592743469056, $11))
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$8), [144])
	
.LABEL $label$23
	$7 = *(($6 + [24]))
	$14 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [784]
	$12 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$30 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$6 = ($6 + [165])
	goto $label$28 
	
.LABEL $label$30
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$26
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$25 }
	*($15 + [80]) = $12
	*($15 + [72]) = $14
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [800]
	$12 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$36 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$6 = ($6 + [165])
	goto $label$34 
	
.LABEL $label$36
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$32
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$31 }
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [816]
	$14 = (int_64)0
	
.LOOP $label$37:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$42 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$6 = ($6 + [165])
	goto $label$40 
	
.LABEL $label$42
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$38
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$37 }
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$8 = CALL strlen([832])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$45 }
	*($15) = ($8 << [1])
	$6 = ($15 | [1])
	if ( $8 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$9 = (($8 + [16]) & [-16])
	$6 = CALL $80($9)
	*($15) = ($9 | [1])
	*($15 + [8]) = $6
	*($15 + [4]) = $8
	
.LABEL $label$44
	CALL memcpy($6, [832], $8)
	
.LABEL $label$43
	*(($6 + $8)) = [0]
	*(($15 + [40])) = $7
	*(($15 + [52])) = *($15 + [4])
	*($15 + [24]) = $1
	$8 = ($15 + [8])
	*(($15 + [56])) = *($8)
	*($15 + [16]) = *($0)
	*($15 + [32]) = (int_64)1000
	*($15 + [48]) = *($15)
	*($15) = [0]
	*($15 + [4]) = [0]
	*($8) = [0]
	$8 = CALL $10(($15 + [88]), ($15 + [72]), $12, $14, ($15 + [16]))
	CALL $11(($15 + [128]), $8)
	$6 = *($15 + [128])
	CALL send_inline($6, (*($15 + [132]) - $6))
	$6 = *($15 + [128])
	if ( ($6 == 0) ){ goto $label$46 }
	*($15 + [132]) = $6
	CALL $81($6)
	
.LABEL $label$46
	$6 = *($8 + [28])
	if ( ($6 == 0) ){ goto $label$47 }
	*(($8 + [32])) = $6
	CALL $81($6)
	
.LABEL $label$47
	$6 = *($8 + [16])
	if ( ($6 == 0) ){ goto $label$48 }
	*(($8 + [20])) = $6
	CALL $81($6)
	
.LABEL $label$48
	if ( ((*(($15 + [48])) & [1]) == 0) ){ goto $label$49 }
	CALL $81(*(($15 + [56])))
	
.LABEL $label$49
	if ( ((*($15) & [1]) == 0) ){ goto $label$50 }
	CALL $81(*(($15 + [8])))
	
.LABEL $label$50
	$14 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [784]
	$12 = (int_64)0
	
.LOOP $label$51:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$56 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$55 }
	$6 = ($6 + [165])
	goto $label$54 
	
.LABEL $label$56
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$55
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$54
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$53
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$52
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$51 }
	*($15 + [80]) = $12
	*($15 + [72]) = $14
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [800]
	$12 = (int_64)0
	
.LOOP $label$57:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$62 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$61 }
	$6 = ($6 + [165])
	goto $label$60 
	
.LABEL $label$62
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$61
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$60
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$59
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$58
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$57 }
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [816]
	$14 = (int_64)0
	
.LOOP $label$63:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$68 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$67 }
	$6 = ($6 + [165])
	goto $label$66 
	
.LABEL $label$68
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$67
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$66
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$65
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$64
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$63 }
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$8 = CALL strlen([832])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$71 }
	*($15) = ($8 << [1])
	$6 = ($15 | [1])
	if ( $8 ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$71
	$9 = (($8 + [16]) & [-16])
	$6 = CALL $80($9)
	*($15) = ($9 | [1])
	*($15 + [8]) = $6
	*($15 + [4]) = $8
	
.LABEL $label$70
	CALL memcpy($6, [832], $8)
	
.LABEL $label$69
	*(($6 + $8)) = [0]
	*(($15 + [40])) = $7
	*(($15 + [52])) = *($15 + [4])
	*($15 + [24]) = $2
	$8 = ($15 + [8])
	*(($15 + [56])) = *($8)
	*($15 + [16]) = *($0)
	*($15 + [32]) = (int_64)1000
	*($15 + [48]) = *($15)
	*($15) = [0]
	*($15 + [4]) = [0]
	*($8) = [0]
	$8 = CALL $10(($15 + [88]), ($15 + [72]), $12, $14, ($15 + [16]))
	CALL $11(($15 + [128]), $8)
	$6 = *($15 + [128])
	CALL send_inline($6, (*($15 + [132]) - $6))
	$6 = *($15 + [128])
	if ( ($6 == 0) ){ goto $label$72 }
	*($15 + [132]) = $6
	CALL $81($6)
	
.LABEL $label$72
	$6 = *($8 + [28])
	if ( ($6 == 0) ){ goto $label$73 }
	*(($8 + [32])) = $6
	CALL $81($6)
	
.LABEL $label$73
	$6 = *($8 + [16])
	if ( ($6 == 0) ){ goto $label$74 }
	*(($8 + [20])) = $6
	CALL $81($6)
	
.LABEL $label$74
	if ( ((*(($15 + [48])) & [1]) == 0) ){ goto $label$75 }
	CALL $81(*(($15 + [56])))
	
.LABEL $label$75
	if ( ((*($15) & [1]) == 0) ){ goto $label$4 }
	CALL $81(*(($15 + [8])))
	
.LABEL $label$4
	*([0] + [4]) = ($15 + [144])
	return (unreachable)
	
.LABEL $label$3
	CALL $82($15)
}

void .FUNC _ZN5eosio8gambling4loadEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$2 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$5 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$4), [144])
	if ( $7 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)3607749778980137328, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $23($4, $7) + [16]) == (int_32)$4), [144])
	goto $label$3 
	
.LABEL $label$4
	$5 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [848])
	*(($7 = CALL $80([32])) + [16]) = $4
	*($7 + [8]) = (int_64)0
	*($7) = $1
	CALL eosio_assert([1], [992])
	CALL memcpy(($9 + [16]), $7, [8])
	CALL eosio_assert([1], [992])
	$4 = ($7 + [8])
	CALL memcpy((($9 + [16]) | [8]), $4, [8])
	$1 = *($7)
	$8 = ($0 + [24])
	*($7 + [20]) = CALL db_store_i64(*($8), (int_64)3607749778980137328, $5, $1, ($9 + [16]), [16])
	$3 = ($0 + [32])
	if ( (uint_64)($1 <= *($3)) ){ goto $label$6 }
	*($3) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$1 = *($8)
	$6 = *($7)
	*($9 + [40]) = *($4)
	*($7 + [24]) = CALL db_idx64_store($1, (int_64)3607749778980137328, $5, $6, ($9 + [40]))
	*($9 + [40]) = $7
	$1 = *($7)
	*($9 + [16]) = $1
	$8 = *(($7 + [20]))
	*($9 + [12]) = $8
	$3 = ($0 + [44])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [48]))) ){ goto $label$8 }
	*($4 + [8]) = $1
	*($4 + [16]) = $8
	*($9 + [40]) = [0]
	*($4) = $7
	*($3) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $24(($0 + [40]), ($9 + [40]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$7
	$7 = *($9 + [40])
	*($9 + [40]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $81($7)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1136])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $80([56])) + [8]) = (int_64)10000
	CALL eosio_assert([1], [208])
	$3 = ($4 + [8])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [272])
	*($4 + [24]) = (int_64)1397703940
	*($4 + [16]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $3
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + [16])
	*($8 + [44]) = ($4 + [32])
	CALL $42(($8 + [32]), ($8 + [24]))
	*($4 + [44]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [32]) = $7
	$6 = *($4 + [44])
	*($8 + [4]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $25($2, ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $81($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC _ZN5eosio8gambling3betEyRKNS_5assetENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	float_64 $11
	float_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	$22 = (*([0] + [4]) - [400])
	*([0] + [4]) = $22
	*($22 + [376]) = $1
	CALL require_auth($1)
	*((($22 + [336]) + [32])) = [0]
	*($22 + [344]) = $1
	*($22 + [352]) = (int_64)-1
	*($22 + [360]) = (int_64)0
	$20 = *($0)
	*($22 + [336]) = $20
	*($22 + [372]) = [0]
	*((($22 + [296]) + [32])) = [0]
	*($22 + [304]) = $1
	*($22 + [296]) = $20
	*($22 + [312]) = (int_64)-1
	*($22 + [320]) = (int_64)0
	*($22 + [332]) = [0]
	*($22 + [288]) = (int_64)0
	CALL $92(($22 + [256]), $3)
	*(($22 + [248])) = [0]
	*($22 + [240]) = (int_64)0
	$15 = CALL strlen([80])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$10 }
	*($22 + [240]) = ($15 << [1])
	$16 = (($22 + [240]) | [1])
	if ( $15 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$17 = (($15 + [16]) & [-16])
	$16 = CALL $80($17)
	*($22 + [240]) = ($17 | [1])
	*($22 + [248]) = $16
	*($22 + [244]) = $15
	
.LABEL $label$9
	CALL memcpy($16, [80], $15)
	
.LABEL $label$8
	*(($16 + $15)) = [0]
	CALL _ZN5eosio8gambling5splitENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_(($22 + [272]), $22, ($22 + [256]), ($22 + [240]))
	if ( ((*($22 + [240]) & [1]) == 0) ){ goto $label$11 }
	CALL $81(*($22 + [248]))
	
.LABEL $label$11
	if ( ((*($22 + [256]) & [1]) == 0) ){ goto $label$12 }
	CALL $81(*($22 + [264]))
	
.LABEL $label$12
	$7 = [0]
	if ( ((int_32)CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(*($22 + [272]), [0], [10]) < (int_32)[1]) ){ goto $label$15 }
	$5 = (($22 + [176]) | [1])
	$4 = (($22 + [208]) | [1])
	$10 = (($22 + [208]) + [8])
	$6 = [0]
	$7 = [0]
	
.LOOP $label$16:
	if ( ((int_32)CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(*($22 + [272]), [0], [10]) != (int_32)[1]) ){ goto $label$17 }
	CALL $92(($22 + [224]), (*($22 + [272]) + [72]))
	*($10) = [0]
	*($22 + [208]) = (int_64)0
	$15 = CALL strlen([96])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$20 }
	*($22 + [208]) = ($15 << [1])
	$16 = $4
	if ( $15 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$17 = (($15 + [16]) & [-16])
	$16 = CALL $80($17)
	*($10) = $16
	*($22 + [208]) = ($17 | [1])
	*($22 + [212]) = $15
	
.LABEL $label$19
	CALL memcpy($16, [96], $15)
	
.LABEL $label$18
	*(($16 + $15)) = [0]
	CALL _ZN5eosio8gambling5splitENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_(($22 + [64]), $22, ($22 + [224]), ($22 + [208]))
	if ( ((*($22 + [208]) & [1]) == 0) ){ goto $label$21 }
	CALL $81(*($10))
	
.LABEL $label$21
	if ( ((*($22 + [224]) & [1]) == 0) ){ goto $label$22 }
	CALL $81(*((($22 + [224]) + [8])))
	
.LABEL $label$22
	if ( (CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(*($22 + [64]), [0], [10]) == 0) ){ goto $label$23 }
	*($22 + [288]) = ((int_64)*($22 + [288]) + (int_64)1)
	
.LABEL $label$23
	if ( (CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji((*($22 + [64]) + [12]), [0], [10]) == 0) ){ goto $label$24 }
	*($22 + [288]) = ((int_64)*($22 + [288]) + (int_64)1)
	
.LABEL $label$24
	$17 = *($22 + [64])
	if ( ($17 == 0) ){ goto $label$17 }
	$15 = *($22 + [68])
	if ( ((int_32)$15 == (int_32)$17) ){ goto $label$26 }
	$16 = ([0] - $17)
	$15 = ($15 + [-12])
	
.LOOP $label$27:
	if ( ((*($15) & [1]) == 0) ){ goto $label$28 }
	CALL $81(*(($15 + [8])))
	
.LABEL $label$28
	$15 = ($15 + [-12])
	if ( ((int_32)($15 + $16) != (int_32)[-12]) ){ goto $label$27 }
	$15 = *($22 + [64])
	goto $label$25 
	
.LABEL $label$26
	$15 = $17
	
.LABEL $label$25
	*($22 + [68]) = $17
	CALL $81($15)
	
.LABEL $label$17
	if ( ((int_32)$6 > (int_32)[4]) ){ goto $label$15 }
	$6 = ($6 + [1])
	CALL $92(($22 + [192]), (*($22 + [272]) + ((int_32)$6 * (int_32)[12])))
	*(($17 = (($22 + [176]) + [8]))) = [0]
	*($22 + [176]) = (int_64)0
	$15 = CALL strlen([96])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$31 }
	*($22 + [176]) = ($15 << [1])
	$16 = $5
	if ( $15 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$14 = (($15 + [16]) & [-16])
	$16 = CALL $80($14)
	*($17) = $16
	*($22 + [176]) = ($14 | [1])
	*($22 + [180]) = $15
	
.LABEL $label$30
	CALL memcpy($16, [96], $15)
	
.LABEL $label$29
	*(($16 + $15)) = [0]
	CALL _ZN5eosio8gambling5splitENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_(($22 + [64]), $22, ($22 + [192]), ($22 + [176]))
	if ( ((*($22 + [176]) & [1]) == 0) ){ goto $label$32 }
	CALL $81(*($17))
	
.LABEL $label$32
	if ( ((*($22 + [192]) & [1]) == 0) ){ goto $label$33 }
	CALL $81(*((($22 + [192]) + [8])))
	
.LABEL $label$33
	$14 = [0]
	$16 = *($22 + [64])
	$13 = *($22 + [68])
	if ( ((int_32)$13 == (int_32)$16) ){ goto $label$34 }
	$15 = [0]
	$17 = [0]
	$14 = [0]
	
.LOOP $label$35:
	if ( ((int_32)CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($16 + $15), [0], [10]) > (int_32)[9]) ){ goto $label$36 }
	$14 = (((int_32)uint_32(CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji((*($22 + [64]) + $15), [0], [10]) >> [31]) ^ (int_32)[1]) + $14)
	
.LABEL $label$36
	$15 = ($15 + [12])
	$16 = *($22 + [64])
	$13 = *($22 + [68])
	$17 = ($17 + [1])
	if ( ($17 <= ((int_32)($13 - $16) / (int_32)[12])) ){ goto $label$35 }
	
.LABEL $label$34
	$7 = ( $7 ? [1] : $7 )
	if ( ($16 == 0) ){ goto $label$37 }
	if ( ((int_32)$13 == (int_32)$16) ){ goto $label$39 }
	$17 = ([0] - $16)
	$15 = ($13 + [-12])
	
.LOOP $label$40:
	if ( ((*($15) & [1]) == 0) ){ goto $label$41 }
	CALL $81(*(($15 + [8])))
	
.LABEL $label$41
	$15 = ($15 + [-12])
	if ( ((int_32)($15 + $17) != (int_32)[-12]) ){ goto $label$40 }
	$15 = *($22 + [64])
	goto $label$38 
	
.LABEL $label$39
	$15 = $16
	
.LABEL $label$38
	*($22 + [68]) = $16
	CALL $81($15)
	
.LABEL $label$37
	$7 = ((int_32)$14 * (int_32)$7)
	if ( ((int_32)$6 < (int_32)CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(*($22 + [272]), [0], [10])) ){ goto $label$16 }
	
.LABEL $label$15
	*($22 + [288]) = ((int_64)*($22 + [288]) + (int_64)(CASTING int_64)(int_32 $7))
	CALL prints([112])
	CALL printui(*($22 + [288]))
	CALL prints([128])
	$1 = *($0)
	$13 = *(($0 + [80]))
	$17 = *(($0 + [84]))
	if ( ((int_32)$17 == (int_32)$13) ){ goto $label$42 }
	$15 = ($17 + [-24])
	$14 = ([0] - $13)
	
.LOOP $label$43:
	if ( ((int_64)*(*($15)) == (int_64)$1) ){ goto $label$42 }
	$17 = $15
	$16 = ($15 + [-24])
	$15 = $16
	if ( ((int_32)($16 + $14) != (int_32)[-24]) ){ goto $label$43 }
	
.LABEL $label$42
	$14 = ($0 + [56])
	if ( ((int_32)$17 == (int_32)$13) ){ goto $label$45 }
	$17 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [40]) == (int_32)$14), [144])
	goto $label$44 
	
.LABEL $label$45
	$15 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-6030999592743469056, $1)
	if ( ((int_32)$15 <= (int_32)[-1]) ){ goto $label$46 }
	$17 = CALL $8($14, $15)
	CALL eosio_assert(((int_32)*($17 + [40]) == (int_32)$14), [144])
	goto $label$44 
	
.LABEL $label$46
	$17 = [0]
	
.LABEL $label$44
	*($22 + [172]) = $17
	*($22 + [168]) = $14
	CALL eosio_assert([1], [208])
	$1 = (int_64)5459781
	$15 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$50 }
	
.LOOP $label$51:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$48 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$51 }
	
.LABEL $label$50
	$16 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$16 = [0]
	
.LABEL $label$47
	CALL eosio_assert($16, [272])
	CALL eosio_assert(((int_64)*(($17 + [24])) == (int_64)1397703940), [304])
	if ( ((int_64)*($17 + [16]) != (int_64)0) ){ goto $label$52 }
	CALL prints([368])
	$20 = *($0)
	$15 = *($22 + [172])
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [400])
	CALL eosio_assert(((int_32)*($15 + [40]) == (int_32)$14), [448])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [496])
	*(($15 + [20])) = *(($2 + [4]))
	*($15 + [16]) = *($2)
	*(($15 + [28])) = *(($2 + [12]))
	*(($15 + [24])) = *(($2 + [8]))
	*($15 + [16]) = (int_64)1000000
	$1 = *($15)
	*($15 + [32]) = (int_64)50000
	CALL eosio_assert([1], [560])
	*($22 + [120]) = (($22 + [64]) + [40])
	*($22 + [116]) = ($22 + [64])
	*($22 + [112]) = ($22 + [64])
	*($22 + [384]) = ($22 + [112])
	*($22 + [132]) = ($15 + [8])
	*($22 + [128]) = $15
	*($22 + [136]) = ($15 + [16])
	*($22 + [140]) = ($15 + [32])
	CALL $9(($22 + [128]), ($22 + [384]))
	CALL db_update_i64(*($15 + [44]), $20, ($22 + [64]), [40])
	$15 = ($0 + [72])
	if ( (uint_64)($1 <= *($15)) ){ goto $label$52 }
	*($15) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$52
	$20 = *($22 + [288])
	if ( (int_64)($20 == 0) ){ goto $label$56 }
	$1 = *($2)
	$15 = *($22 + [172])
	if ( ((float_64)((float_64)(CASTING float_64)(int_64 *($15 + [16])) * (float_64)(float_64)0.05) < (float_64)(CASTING float_64)(uint_64 ((int_64)$1 + (int_64)*($15 + [32])))) ){ goto $label$56 }
	$20 = ((uint_64)$1 / (uint_64)$20)
	if ( ((uint_64)((int_64)$1 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$56 }
	if ( ((int_64)$1 > (int_64)1000000) ){ goto $label$56 }
	if ( (uint_64)($20 <= (int_64)1000) ){ goto $label$56 }
	$1 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$15 = [0]
	
.LOOP $label$57:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$56 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$58 }
	
.LOOP $label$59:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$56 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$59 }
	
.LABEL $label$58
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$57 }
	$1 = *($22 + [376])
	$7 = *(($0 + [40]))
	$17 = *(($0 + [44]))
	if ( ((int_32)$17 == (int_32)$7) ){ goto $label$60 }
	$15 = ($17 + [-24])
	$13 = ([0] - $7)
	
.LOOP $label$61:
	if ( ((int_64)*(*($15)) == (int_64)$1) ){ goto $label$60 }
	$17 = $15
	$16 = ($15 + [-24])
	$15 = $16
	if ( ((int_32)($16 + $13) != (int_32)[-24]) ){ goto $label$61 }
	
.LABEL $label$60
	$6 = ($0 + [16])
	if ( ((int_32)$17 == (int_32)$7) ){ goto $label$55 }
	$13 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [16]) == (int_32)$6), [144])
	if ( $13 ){ goto $label$53 }
	goto $label$54 
	
.LABEL $label$56
	CALL prints([624])
	$1 = *($2)
	$12 = (CASTING float_64)(uint_64 ((int_64)$1 + (int_64)*($15 + [32])))
	$15 = *($22 + [172])
	$11 = ((float_64)(CASTING float_64)(int_64 *($15 + [16])) * (float_64)(float_64)0.05)
	if ( (((float_64)$11 >= (float_64)$12) | (((float_64)$11 != (float_64)$11) | ((float_64)$12 != (float_64)$12))) ){ goto $label$62 }
	CALL prints([656])
	$1 = *($2)
	
.LABEL $label$62
	if ( ((uint_64)((uint_64)$1 / (uint_64)*($22 + [288])) > (uint_64)(int_64)999) ){ goto $label$63 }
	CALL prints([688])
	$1 = *($2)
	
.LABEL $label$63
	if ( ((int_64)$1 < (int_64)1000001) ){ goto $label$64 }
	CALL prints([736])
	
.LABEL $label$64
	$21 = *($0)
	$1 = (int_64)0
	$18 = (int_64)59
	$15 = [784]
	$19 = (int_64)0
	
.LOOP $label$65:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$70 }
	$16 = *($15)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$16 = ($16 + [165])
	goto $label$68 
	
.LABEL $label$70
	$20 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$69
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$67
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$66
	$15 = ($15 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$65 }
	*($22 + [120]) = $19
	*($22 + [112]) = $21
	$1 = (int_64)0
	$18 = (int_64)59
	$15 = [800]
	$19 = (int_64)0
	
.LOOP $label$71:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$76 }
	$16 = *($15)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$75 }
	$16 = ($16 + [165])
	goto $label$74 
	
.LABEL $label$76
	$20 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$75
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$74
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$73
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$72
	$15 = ($15 + [1])
	$18 = ((int_64)$18 + (int_64)-5)
	$19 = ((int_64)$20 | (int_64)$19)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$71 }
	$1 = (int_64)0
	$18 = (int_64)59
	$15 = [816]
	$21 = (int_64)0
	
.LOOP $label$77:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$82 }
	$16 = *($15)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$81 }
	$16 = ($16 + [165])
	goto $label$80 
	
.LABEL $label$82
	$20 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$81
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$80
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$79
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$78
	$15 = ($15 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$21 = ((int_64)$20 | (int_64)$21)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$77 }
	*(($22 + [56])) = [0]
	*($22 + [48]) = (int_64)0
	$15 = CALL strlen([832])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$85 }
	*($22 + [48]) = ($15 << [1])
	$16 = (($22 + [48]) | [1])
	if ( $15 ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$85
	$17 = (($15 + [16]) & [-16])
	$16 = CALL $80($17)
	*($22 + [48]) = ($17 | [1])
	*($22 + [56]) = $16
	*($22 + [52]) = $15
	
.LABEL $label$84
	CALL memcpy($16, [832], $15)
	
.LABEL $label$83
	*(($16 + $15)) = [0]
	*(($22 + [92])) = *(($2 + [12]))
	*(($22 + [88])) = *(($2 + [8]))
	*(($22 + [84])) = *(($2 + [4]))
	*($22 + [64]) = *($0)
	*($22 + [80]) = *($2)
	*($22 + [72]) = *($22 + [376])
	$15 = (($22 + [48]) + [8])
	*(($22 + [104])) = *($15)
	*($22 + [96]) = *($22 + [48])
	*($22 + [48]) = [0]
	*($22 + [52]) = [0]
	*($15) = [0]
	$15 = CALL $10(($22 + [128]), ($22 + [112]), $19, $21, ($22 + [64]))
	CALL $11(($22 + [384]), $15)
	$16 = *($22 + [384])
	CALL send_inline($16, (*($22 + [388]) - $16))
	$16 = *($22 + [384])
	if ( ($16 == 0) ){ goto $label$86 }
	*($22 + [388]) = $16
	CALL $81($16)
	
.LABEL $label$86
	$16 = *($15 + [28])
	if ( ($16 == 0) ){ goto $label$87 }
	*(($15 + [32])) = $16
	CALL $81($16)
	
.LABEL $label$87
	$16 = *($15 + [16])
	if ( ($16 == 0) ){ goto $label$88 }
	*(($15 + [20])) = $16
	CALL $81($16)
	
.LABEL $label$88
	if ( ((*(($22 + [96])) & [1]) == 0) ){ goto $label$89 }
	CALL $81(*(($22 + [104])))
	
.LABEL $label$89
	if ( ((*($22 + [48]) & [1]) == 0) ){ goto $label$90 }
	CALL $81(*(($22 + [56])))
	
.LABEL $label$90
	$1 = *($0)
	*($22 + [76]) = $2
	*($22 + [80]) = $3
	*($22 + [68]) = ($22 + [168])
	*($22 + [64]) = ($22 + [336])
	*($22 + [72]) = ($22 + [376])
	*($22 + [84]) = ($22 + [288])
	*($22 + [112]) = $1
	CALL eosio_assert(((int_64)*($22 + [336]) == (int_64)CALL $fimport$2()), [848])
	*($22 + [132]) = ($22 + [64])
	*($22 + [128]) = ($22 + [336])
	*($22 + [136]) = ($22 + [112])
	$15 = CALL $80([120])
	CALL $12($15)
	*($15 + [104]) = ($22 + [336])
	CALL $13(($22 + [128]), $15)
	*($22 + [384]) = $15
	$1 = *($15)
	*($22 + [128]) = $1
	$17 = *($15 + [108])
	*($22 + [48]) = $17
	$14 = ($22 + [364])
	$16 = *($14)
	if ( ((uint_32)$16 >= (uint_32)*(($22 + [368]))) ){ goto $label$92 }
	*($16 + [8]) = $1
	*($16 + [16]) = $17
	*($22 + [384]) = [0]
	*($16) = $15
	*($14) = ($16 + [24])
	goto $label$91 
	
.LABEL $label$92
	CALL $14(($22 + [360]), ($22 + [384]), ($22 + [128]), ($22 + [48]))
	
.LABEL $label$91
	$15 = *($22 + [384])
	*($22 + [384]) = [0]
	if ( ($15 == 0) ){ goto $label$93 }
	if ( ((*($15 + [24]) & [1]) == 0) ){ goto $label$94 }
	CALL $81(*(($15 + [32])))
	
.LABEL $label$94
	CALL $81($15)
	
.LABEL $label$93
	*($22 + [388]) = [0]
	*($22 + [384]) = ($22 + [296])
	*($22 + [44]) = [0]
	*($22 + [40]) = ($22 + [336])
	*($22 + [48]) = *(CALL $15(($22 + [40])))
	$15 = ($22 + [304])
	$16 = CALL db_lowerbound_i64(*($22 + [296]), *($15), (int_64)4229888623173959680, (int_64)0)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$97 }
	CALL $16(($22 + [296]), $16)
	if ( (uint_64)((int_64))(*(*(CALL $17(($22 + [384])) + [4])) - *(CALL $16(($22 + [296]), CALL $fimport$13(*($22 + [296]), *($15), (int_64)4229888623173959680, (int_64)0)))) <= (int_64)51) ){ goto $label$97 }
	$15 = [0]
	$16 = CALL db_lowerbound_i64(*($22 + [296]), *(($22 + [304])), (int_64)4229888623173959680, (int_64)0)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$98 }
	$15 = CALL $16(($22 + [296]), $16)
	
.LABEL $label$98
	$16 = ((int_32)$15 != (int_32)[0])
	CALL eosio_assert($16, [912])
	CALL eosio_assert($16, [960])
	$16 = CALL db_next_i64(*($15 + [116]), ($22 + [64]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$99 }
	CALL $16(($22 + [296]), $16)
	
.LABEL $label$99
	CALL $18(($22 + [296]), $15)
	$1 = *($0)
	*($22 + [68]) = ($22 + [48])
	*($22 + [64]) = ($22 + [296])
	*($22 + [72]) = ($22 + [168])
	*($22 + [76]) = ($22 + [288])
	*($22 + [112]) = $1
	CALL eosio_assert(((int_64)*($22 + [296]) == (int_64)CALL $fimport$2()), [848])
	*($22 + [132]) = ($22 + [64])
	*($22 + [128]) = ($22 + [296])
	*($22 + [136]) = ($22 + [112])
	$15 = CALL $80([128])
	CALL $19($15)
	*($15 + [112]) = ($22 + [296])
	CALL $20(($22 + [128]), $15)
	*($22 + [32]) = $15
	$1 = *($15)
	*($22 + [128]) = $1
	$17 = *($15 + [116])
	*($22 + [24]) = $17
	$14 = ($22 + [324])
	$16 = *($14)
	if ( ((uint_32)$16 >= (uint_32)*(($22 + [328]))) ){ goto $label$96 }
	*($16 + [8]) = $1
	*($16 + [16]) = $17
	*($22 + [32]) = [0]
	*($16) = $15
	*($14) = ($16 + [24])
	goto $label$95 
	
.LABEL $label$97
	$1 = *($0)
	*($22 + [68]) = ($22 + [48])
	*($22 + [64]) = ($22 + [296])
	*($22 + [72]) = ($22 + [168])
	*($22 + [76]) = ($22 + [288])
	*($22 + [112]) = $1
	CALL eosio_assert(((int_64)*($22 + [296]) == (int_64)CALL $fimport$2()), [848])
	*($22 + [132]) = ($22 + [64])
	*($22 + [128]) = ($22 + [296])
	*($22 + [136]) = ($22 + [112])
	$15 = CALL $80([128])
	CALL $19($15)
	*($15 + [112]) = ($22 + [296])
	CALL $22(($22 + [128]), $15)
	*($22 + [32]) = $15
	$1 = *($15)
	*($22 + [128]) = $1
	$17 = *($15 + [116])
	*($22 + [24]) = $17
	$14 = ($22 + [324])
	$16 = *($14)
	if ( ((uint_32)$16 >= (uint_32)*(($22 + [328]))) ){ goto $label$101 }
	*($16 + [8]) = $1
	*($16 + [16]) = $17
	*($22 + [32]) = [0]
	*($16) = $15
	*($14) = ($16 + [24])
	goto $label$100 
	
.LABEL $label$101
	CALL $21(($22 + [320]), ($22 + [32]), ($22 + [128]), ($22 + [24]))
	
.LABEL $label$100
	$15 = *($22 + [32])
	*($22 + [32]) = [0]
	if ( ($15 == 0) ){ goto $label$3 }
	if ( ((*($15 + [32]) & [1]) == 0) ){ goto $label$102 }
	CALL $81(*(($15 + [40])))
	
.LABEL $label$102
	CALL $81($15)
	$17 = *($22 + [272])
	if ( $17 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$96
	CALL $21(($22 + [320]), ($22 + [32]), ($22 + [128]), ($22 + [24]))
	
.LABEL $label$95
	$15 = *($22 + [32])
	*($22 + [32]) = [0]
	if ( ($15 == 0) ){ goto $label$3 }
	if ( ((*($15 + [32]) & [1]) == 0) ){ goto $label$103 }
	CALL $81(*(($15 + [40])))
	
.LABEL $label$103
	CALL $81($15)
	goto $label$3 
	
.LABEL $label$55
	$15 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)3607749778980137328, $1)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$54 }
	$13 = CALL $23($6, $15)
	CALL eosio_assert(((int_32)*($13 + [16]) == (int_32)$6), [144])
	goto $label$53 
	
.LABEL $label$54
	$1 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [848])
	*(($15 = CALL $80([32])) + [16]) = $6
	*($15 + [8]) = (int_64)0
	*($15) = *($22 + [376])
	CALL eosio_assert([1], [992])
	CALL memcpy(($22 + [64]), $15, [8])
	CALL eosio_assert([1], [992])
	$16 = ($15 + [8])
	CALL memcpy((($22 + [64]) | [8]), $16, [8])
	$20 = *($15)
	$17 = ($0 + [24])
	*($15 + [20]) = CALL db_store_i64(*($17), (int_64)3607749778980137328, $1, $20, ($22 + [64]), [16])
	$13 = ($0 + [32])
	if ( (uint_64)($20 <= *($13)) ){ goto $label$104 }
	*($13) = ( (int_64)-2 ? ((int_64)$20 + (int_64)1) : ((uint_64)$20 > (uint_64)(int_64)-3) )
	
.LABEL $label$104
	$20 = *($17)
	$18 = *($15)
	*($22 + [128]) = *($16)
	*($15 + [24]) = CALL db_idx64_store($20, (int_64)3607749778980137328, $1, $18, ($22 + [128]))
	*($22 + [128]) = $15
	$1 = *($15)
	*($22 + [64]) = $1
	$17 = *(($15 + [20]))
	*($22 + [112]) = $17
	$13 = ($0 + [44])
	$16 = *($13)
	if ( ((uint_32)$16 >= (uint_32)*(($0 + [48]))) ){ goto $label$106 }
	*($16 + [8]) = $1
	*($16 + [16]) = $17
	*($22 + [128]) = [0]
	*($16) = $15
	*($13) = ($16 + [24])
	goto $label$105 
	
.LABEL $label$106
	CALL $24(($0 + [40]), ($22 + [128]), ($22 + [64]), ($22 + [112]))
	
.LABEL $label$105
	$15 = *($22 + [128])
	$13 = [0]
	*($22 + [128]) = [0]
	if ( ($15 == 0) ){ goto $label$53 }
	CALL $81($15)
	
.LABEL $label$53
	$20 = *(($2 + [8]))
	$18 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.99))
	$15 = *($22 + [172])
	if ( ($15 == 0) ){ goto $label$108 }
	$19 = *($0)
	CALL eosio_assert([1], [400])
	CALL eosio_assert(((int_32)*($15 + [40]) == (int_32)$14), [448])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [496])
	$1 = *($15)
	CALL eosio_assert(((int_64)$20 == (int_64)*(($15 + [24]))), [1008])
	$20 = ((int_64)*($15 + [16]) + (int_64)$18)
	*($15 + [16]) = $20
	CALL eosio_assert(((int_64)$20 > (int_64)-4611686018427387904), [1056])
	CALL eosio_assert(((int_64)*($15 + [16]) < (int_64)4611686018427387904), [1088])
	*($15 + [32]) = *($2)
	CALL eosio_assert(((int_64)$1 == (int_64)*($15)), [560])
	*($22 + [120]) = (($22 + [64]) + [40])
	*($22 + [116]) = ($22 + [64])
	*($22 + [112]) = ($22 + [64])
	*($22 + [384]) = ($22 + [112])
	*($22 + [132]) = ($15 + [8])
	*($22 + [128]) = $15
	*($22 + [136]) = ($15 + [16])
	*($22 + [140]) = ($15 + [32])
	CALL $9(($22 + [128]), ($22 + [384]))
	CALL db_update_i64(*($15 + [44]), $19, ($22 + [64]), [40])
	$15 = ($0 + [72])
	if ( (uint_64)($1 <= *($15)) ){ goto $label$107 }
	*($15) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$107 
	
.LABEL $label$108
	$19 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [848])
	*(($16 = CALL $80([56])) + [8]) = (int_64)10000
	CALL eosio_assert([1], [208])
	$7 = ($16 + [8])
	$1 = (int_64)5459781
	$15 = [0]
	
.LOOP $label$111:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$110 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$112 }
	
.LOOP $label$113:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$110 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$113 }
	
.LABEL $label$112
	$17 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$111 }
	goto $label$109 
	
.LABEL $label$110
	$17 = [0]
	
.LABEL $label$109
	CALL eosio_assert($17, [272])
	*($16 + [40]) = $14
	*($16 + [16]) = $18
	*($16 + [24]) = $20
	*($16) = *($0)
	*(($16 + [8])) = *($0 + [8])
	*($16 + [32]) = *($2)
	*($22 + [120]) = (($22 + [64]) + [40])
	*($22 + [116]) = ($22 + [64])
	*($22 + [112]) = ($22 + [64])
	*($22 + [384]) = ($22 + [112])
	*($22 + [132]) = $7
	*($22 + [128]) = $16
	*($22 + [136]) = ($16 + [16])
	*($22 + [140]) = ($16 + [32])
	CALL $9(($22 + [128]), ($22 + [384]))
	$1 = *($16)
	$17 = CALL db_store_i64(*(($0 + [64])), (int_64)-6030999592743469056, $19, $1, ($22 + [64]), [40])
	*($16 + [44]) = $17
	$15 = ($0 + [72])
	if ( (uint_64)($1 <= *($15)) ){ goto $label$114 }
	*($15) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$114
	*($22 + [128]) = $16
	$1 = *($16)
	*($22 + [64]) = $1
	*($22 + [112]) = $17
	$14 = ($0 + [84])
	$15 = *($14)
	if ( ((uint_32)$15 >= (uint_32)*(($0 + [88]))) ){ goto $label$116 }
	*($15 + [8]) = $1
	*($15 + [16]) = $17
	*($22 + [128]) = [0]
	*($15) = $16
	*($14) = ($15 + [24])
	goto $label$115 
	
.LABEL $label$116
	CALL $25(($0 + [80]), ($22 + [128]), ($22 + [64]), ($22 + [112]))
	
.LABEL $label$115
	$15 = *($22 + [128])
	*($22 + [128]) = [0]
	if ( ($15 == 0) ){ goto $label$107 }
	CALL $81($15)
	
.LABEL $label$107
	$15 = *($22 + [172])
	CALL prints([1120])
	CALL printui(*($15 + [8]))
	$1 = *($0)
	*($22 + [76]) = $2
	*($22 + [80]) = $3
	*($22 + [68]) = ($22 + [168])
	*($22 + [64]) = ($22 + [336])
	*($22 + [72]) = ($22 + [376])
	*($22 + [84]) = ($22 + [288])
	*($22 + [112]) = $1
	CALL eosio_assert(((int_64)*($22 + [336]) == (int_64)CALL $fimport$2()), [848])
	*($22 + [132]) = ($22 + [64])
	*($22 + [128]) = ($22 + [336])
	*($22 + [136]) = ($22 + [112])
	$15 = CALL $80([120])
	CALL $12($15)
	*($15 + [104]) = ($22 + [336])
	CALL $26(($22 + [128]), $15)
	*($22 + [384]) = $15
	$1 = *($15)
	*($22 + [128]) = $1
	$17 = *($15 + [108])
	*($22 + [48]) = $17
	$14 = ($22 + [364])
	$16 = *($14)
	if ( ((uint_32)$16 >= (uint_32)*(($22 + [368]))) ){ goto $label$118 }
	*($16 + [8]) = $1
	*($16 + [16]) = $17
	*($22 + [384]) = [0]
	*($16) = $15
	*($14) = ($16 + [24])
	goto $label$117 
	
.LABEL $label$118
	CALL $14(($22 + [360]), ($22 + [384]), ($22 + [128]), ($22 + [48]))
	
.LABEL $label$117
	$15 = *($22 + [384])
	*($22 + [384]) = [0]
	if ( ($15 == 0) ){ goto $label$119 }
	if ( ((*($15 + [24]) & [1]) == 0) ){ goto $label$120 }
	CALL $81(*(($15 + [32])))
	
.LABEL $label$120
	CALL $81($15)
	
.LABEL $label$119
	*($22 + [36]) = [0]
	*($22 + [32]) = ($22 + [296])
	*($22 + [20]) = [0]
	*($22 + [16]) = ($22 + [336])
	*($22 + [24]) = *(CALL $15(($22 + [16])))
	$7 = *(($22 + [320]))
	$17 = *(($22 + [324]))
	if ( ((int_32)$17 == (int_32)$7) ){ goto $label$121 }
	$15 = ($17 + [-24])
	$14 = ([0] - $7)
	
.LOOP $label$122:
	if ( (int_64)(*(*($15)) == 0) ){ goto $label$121 }
	$17 = $15
	$16 = ($15 + [-24])
	$15 = $16
	if ( ((int_32)($16 + $14) != (int_32)[-24]) ){ goto $label$122 }
	
.LABEL $label$121
	if ( ((int_32)$17 == (int_32)$7) ){ goto $label$128 }
	$15 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [112]) == (int_32)($22 + [296])), [144])
	if ( $15 ){ goto $label$127 }
	goto $label$126 
	
.LABEL $label$128
	$15 = CALL db_find_i64(*($22 + [296]), *(($22 + [304])), (int_64)4229888623173959680, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$126 }
	CALL eosio_assert(((int_32)*(CALL $16(($22 + [296]), $15) + [112]) == (int_32)($22 + [296])), [144])
	
.LABEL $label$127
	$16 = ($22 + [304])
	if ( (uint_64)((int_64))(*(*(CALL $17(($22 + [32])) + [4])) - *(CALL $16(($22 + [296]), CALL $fimport$13(*($22 + [296]), *($16), (int_64)4229888623173959680, (int_64)0)))) <= (int_64)51) ){ goto $label$126 }
	$15 = [0]
	$16 = CALL db_lowerbound_i64(*($22 + [296]), *($16), (int_64)4229888623173959680, (int_64)0)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$129 }
	$15 = CALL $16(($22 + [296]), $16)
	
.LABEL $label$129
	$16 = ((int_32)$15 != (int_32)[0])
	CALL eosio_assert($16, [912])
	CALL eosio_assert($16, [960])
	$16 = CALL db_next_i64(*($15 + [116]), ($22 + [64]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$130 }
	CALL $16(($22 + [296]), $16)
	
.LABEL $label$130
	CALL $18(($22 + [296]), $15)
	$1 = *($0)
	*($22 + [132]) = ($22 + [24])
	*($22 + [128]) = ($22 + [296])
	*($22 + [136]) = ($22 + [288])
	*($22 + [112]) = $1
	CALL eosio_assert(((int_64)*($22 + [296]) == (int_64)CALL $fimport$2()), [848])
	*($22 + [68]) = ($22 + [128])
	*($22 + [64]) = ($22 + [296])
	*($22 + [72]) = ($22 + [112])
	$15 = CALL $80([128])
	CALL $19($15)
	*($15 + [112]) = ($22 + [296])
	CALL $27(($22 + [64]), $15)
	*($22 + [384]) = $15
	$1 = *($15)
	*($22 + [64]) = $1
	$17 = *($15 + [116])
	*($22 + [48]) = $17
	$14 = ($22 + [324])
	$16 = *($14)
	if ( ((uint_32)$16 >= (uint_32)*(($22 + [328]))) ){ goto $label$125 }
	*($16 + [8]) = $1
	*($16 + [16]) = $17
	*($22 + [384]) = [0]
	*($16) = $15
	*($14) = ($16 + [24])
	goto $label$124 
	
.LABEL $label$126
	$1 = *($0)
	*($22 + [132]) = ($22 + [24])
	*($22 + [128]) = ($22 + [296])
	*($22 + [136]) = ($22 + [288])
	*($22 + [112]) = $1
	CALL eosio_assert(((int_64)*($22 + [296]) == (int_64)CALL $fimport$2()), [848])
	*($22 + [68]) = ($22 + [128])
	*($22 + [64]) = ($22 + [296])
	*($22 + [72]) = ($22 + [112])
	$15 = CALL $80([128])
	CALL $19($15)
	*($15 + [112]) = ($22 + [296])
	CALL $28(($22 + [64]), $15)
	*($22 + [384]) = $15
	$1 = *($15)
	*($22 + [64]) = $1
	$17 = *($15 + [116])
	*($22 + [48]) = $17
	$14 = ($22 + [324])
	$16 = *($14)
	if ( ((uint_32)$16 >= (uint_32)*(($22 + [328]))) ){ goto $label$132 }
	*($16 + [8]) = $1
	*($16 + [16]) = $17
	*($22 + [384]) = [0]
	*($16) = $15
	*($14) = ($16 + [24])
	goto $label$131 
	
.LABEL $label$132
	CALL $21(($22 + [320]), ($22 + [384]), ($22 + [64]), ($22 + [48]))
	
.LABEL $label$131
	$15 = *($22 + [384])
	*($22 + [384]) = [0]
	if ( ($15 == 0) ){ goto $label$123 }
	if ( ((*($15 + [32]) & [1]) == 0) ){ goto $label$133 }
	CALL $81(*(($15 + [40])))
	
.LABEL $label$133
	CALL $81($15)
	goto $label$123 
	
.LABEL $label$125
	CALL $21(($22 + [320]), ($22 + [384]), ($22 + [64]), ($22 + [48]))
	
.LABEL $label$124
	$15 = *($22 + [384])
	*($22 + [384]) = [0]
	if ( ($15 == 0) ){ goto $label$123 }
	if ( ((*($15 + [32]) & [1]) == 0) ){ goto $label$134 }
	CALL $81(*(($15 + [40])))
	
.LABEL $label$134
	CALL $81($15)
	
.LABEL $label$123
	$8 = *(($2 + [8]))
	*($22 + [8]) = ($22 + [336])
	CALL $29(($22 + [64]), ($22 + [8]), ($22 + [376]))
	$15 = *($22 + [68])
	if ( ($15 == 0) ){ goto $label$136 }
	if ( ((int_64)*($22 + [376]) != (int_64)*($15 + [16])) ){ goto $label$136 }
	if ( $15 ){ goto $label$135 }
	
.LABEL $label$136
	$21 = *($0)
	$1 = (int_64)0
	$18 = (int_64)59
	$15 = [784]
	$19 = (int_64)0
	
.LOOP $label$137:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$142 }
	$16 = *($15)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$141 }
	$16 = ($16 + [165])
	goto $label$140 
	
.LABEL $label$142
	$20 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$141
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$140
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$139
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$138
	$15 = ($15 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$137 }
	*($22 + [120]) = $19
	*($22 + [112]) = $21
	$1 = (int_64)0
	$18 = (int_64)59
	$15 = [800]
	$19 = (int_64)0
	
.LOOP $label$143:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$148 }
	$16 = *($15)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$147 }
	$16 = ($16 + [165])
	goto $label$146 
	
.LABEL $label$148
	$20 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$145 }
	goto $label$144 
	
.LABEL $label$147
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$146
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$145
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$144
	$15 = ($15 + [1])
	$18 = ((int_64)$18 + (int_64)-5)
	$19 = ((int_64)$20 | (int_64)$19)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$143 }
	$1 = (int_64)0
	$18 = (int_64)59
	$15 = [816]
	$21 = (int_64)0
	
.LOOP $label$149:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$154 }
	$16 = *($15)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$153 }
	$16 = ($16 + [165])
	goto $label$152 
	
.LABEL $label$154
	$20 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$151 }
	goto $label$150 
	
.LABEL $label$153
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$152
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$151
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$150
	$15 = ($15 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$21 = ((int_64)$20 | (int_64)$21)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$149 }
	*(($22 + [56])) = [0]
	*($22 + [48]) = (int_64)0
	$15 = CALL strlen([832])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$157 }
	*($22 + [48]) = ($15 << [1])
	$16 = (($22 + [48]) | [1])
	if ( $15 ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$157
	$17 = (($15 + [16]) & [-16])
	$16 = CALL $80($17)
	*($22 + [48]) = ($17 | [1])
	*($22 + [56]) = $16
	*($22 + [52]) = $15
	
.LABEL $label$156
	CALL memcpy($16, [832], $15)
	
.LABEL $label$155
	*(($16 + $15)) = [0]
	*(($22 + [88])) = $8
	*($22 + [64]) = *($0)
	*($22 + [72]) = *($22 + [376])
	$15 = ($22 + [56])
	*(($22 + [104])) = *($15)
	*($22 + [80]) = (int_64)1000
	*($22 + [96]) = *($22 + [48])
	*($22 + [48]) = [0]
	*($22 + [52]) = [0]
	*($15) = [0]
	$15 = CALL $10(($22 + [128]), ($22 + [112]), $19, $21, ($22 + [64]))
	CALL $11(($22 + [384]), $15)
	$16 = *($22 + [384])
	CALL send_inline($16, (*($22 + [388]) - $16))
	$16 = *($22 + [384])
	if ( ($16 == 0) ){ goto $label$158 }
	*($22 + [388]) = $16
	CALL $81($16)
	
.LABEL $label$158
	$16 = *($15 + [28])
	if ( ($16 == 0) ){ goto $label$159 }
	*(($15 + [32])) = $16
	CALL $81($16)
	
.LABEL $label$159
	$16 = *($15 + [16])
	if ( ($16 == 0) ){ goto $label$160 }
	*(($15 + [20])) = $16
	CALL $81($16)
	
.LABEL $label$160
	if ( ((*(($22 + [96])) & [1]) == 0) ){ goto $label$161 }
	CALL $81(*(($22 + [104])))
	
.LABEL $label$161
	if ( ((*($22 + [48]) & [1]) == 0) ){ goto $label$135 }
	CALL $81(*(($22 + [56])))
	
.LABEL $label$135
	$9 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.01))
	$1 = *($13 + [8])
	if ( (int_64)($1 == 0) ){ goto $label$3 }
	$7 = *(($0 + [40]))
	$17 = *(($0 + [44]))
	if ( ((int_32)$17 == (int_32)$7) ){ goto $label$162 }
	$15 = ($17 + [-24])
	$14 = ([0] - $7)
	
.LOOP $label$163:
	if ( ((int_64)*(*($15)) == (int_64)$1) ){ goto $label$162 }
	$17 = $15
	$16 = ($15 + [-24])
	$15 = $16
	if ( ((int_32)($16 + $14) != (int_32)[-24]) ){ goto $label$163 }
	
.LABEL $label$162
	if ( ((int_32)$17 == (int_32)$7) ){ goto $label$165 }
	$15 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [16]) == (int_32)$6), [144])
	if ( $15 ){ goto $label$164 }
	goto $label$3 
	
.LABEL $label$165
	$15 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)3607749778980137328, $1)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $23($6, $15) + [16]) == (int_32)$6), [144])
	
.LABEL $label$164
	$21 = *($0)
	$1 = (int_64)0
	$18 = (int_64)59
	$15 = [784]
	$19 = (int_64)0
	
.LOOP $label$166:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$171 }
	$16 = *($15)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$170 }
	$16 = ($16 + [165])
	goto $label$169 
	
.LABEL $label$171
	$20 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$168 }
	goto $label$167 
	
.LABEL $label$170
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$169
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$168
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$167
	$15 = ($15 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$166 }
	*($22 + [120]) = $19
	*($22 + [112]) = $21
	$1 = (int_64)0
	$18 = (int_64)59
	$15 = [800]
	$19 = (int_64)0
	
.LOOP $label$172:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$177 }
	$16 = *($15)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$176 }
	$16 = ($16 + [165])
	goto $label$175 
	
.LABEL $label$177
	$20 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$174 }
	goto $label$173 
	
.LABEL $label$176
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$175
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$174
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$173
	$15 = ($15 + [1])
	$18 = ((int_64)$18 + (int_64)-5)
	$19 = ((int_64)$20 | (int_64)$19)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$172 }
	$1 = (int_64)0
	$18 = (int_64)59
	$15 = [816]
	$21 = (int_64)0
	
.LOOP $label$178:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$183 }
	$16 = *($15)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$182 }
	$16 = ($16 + [165])
	goto $label$181 
	
.LABEL $label$183
	$20 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$180 }
	goto $label$179 
	
.LABEL $label$182
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$181
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$180
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$179
	$15 = ($15 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$21 = ((int_64)$20 | (int_64)$21)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$178 }
	*(($22 + [56])) = [0]
	*($22 + [48]) = (int_64)0
	$15 = CALL strlen([832])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$186 }
	*($22 + [48]) = ($15 << [1])
	$16 = (($22 + [48]) | [1])
	if ( $15 ){ goto $label$185 }
	goto $label$184 
	
.LABEL $label$186
	$17 = (($15 + [16]) & [-16])
	$16 = CALL $80($17)
	*($22 + [48]) = ($17 | [1])
	*($22 + [56]) = $16
	*($22 + [52]) = $15
	
.LABEL $label$185
	CALL memcpy($16, [832], $15)
	
.LABEL $label$184
	*(($16 + $15)) = [0]
	$1 = *(($13 + [8]))
	*(($22 + [88])) = $8
	*(($22 + [100])) = *($22 + [52 align=4])
	*($22 + [64]) = *($0)
	*($22 + [72]) = $1
	*($22 + [80]) = $9
	*($22 + [96]) = *($22 + [48])
	*($22 + [48]) = [0]
	*($22 + [52]) = [0]
	*((($22 + [48]) + [8])) = [0]
	$15 = CALL $10(($22 + [128]), ($22 + [112]), $19, $21, ($22 + [64]))
	CALL $11(($22 + [384]), $15)
	$16 = *($22 + [384])
	CALL send_inline($16, (*($22 + [388]) - $16))
	$16 = *($22 + [384])
	if ( ($16 == 0) ){ goto $label$187 }
	*($22 + [388]) = $16
	CALL $81($16)
	
.LABEL $label$187
	$16 = *($15 + [28])
	if ( ($16 == 0) ){ goto $label$188 }
	*(($15 + [32])) = $16
	CALL $81($16)
	
.LABEL $label$188
	$16 = *($15 + [16])
	if ( ($16 == 0) ){ goto $label$189 }
	*(($15 + [20])) = $16
	CALL $81($16)
	
.LABEL $label$189
	if ( ((*(($22 + [96])) & [1]) == 0) ){ goto $label$190 }
	CALL $81(*(($22 + [104])))
	
.LABEL $label$190
	if ( ((*($22 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $81(*(($22 + [56])))
	$17 = *($22 + [272])
	if ( $17 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$14
	CALL $82(($22 + [176]))
	
.LABEL $label$13
	CALL $82(($22 + [208]))
	
.LABEL $label$7
	CALL $82(($22 + [240]))
	
.LABEL $label$6
	CALL $82(($22 + [48]))
	
.LABEL $label$5
	CALL $82(($22 + [48]))
	
.LABEL $label$4
	CALL $82(($22 + [48]))
	
.LABEL $label$3
	$17 = *($22 + [272])
	if ( ($17 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$15 = *($22 + [276])
	if ( ((int_32)$15 == (int_32)$17) ){ goto $label$192 }
	$16 = ([0] - $17)
	$15 = ($15 + [-12])
	
.LOOP $label$193:
	if ( ((*($15) & [1]) == 0) ){ goto $label$194 }
	CALL $81(*(($15 + [8])))
	
.LABEL $label$194
	$15 = ($15 + [-12])
	if ( ((int_32)($15 + $16) != (int_32)[-12]) ){ goto $label$193 }
	$15 = *($22 + [272])
	goto $label$191 
	
.LABEL $label$192
	$15 = $17
	
.LABEL $label$191
	*($22 + [276]) = $17
	CALL $81($15)
	
.LABEL $label$1
	$17 = *($22 + [320])
	if ( ($17 == 0) ){ goto $label$195 }
	$14 = ($22 + [324])
	$15 = *($14)
	if ( ((int_32)$15 == (int_32)$17) ){ goto $label$197 }
	
.LOOP $label$198:
	$15 = ($15 + [-24])
	$16 = *($15)
	*($15) = [0]
	if ( ($16 == 0) ){ goto $label$199 }
	if ( ((*($16 + [32]) & [1]) == 0) ){ goto $label$200 }
	CALL $81(*(($16 + [40])))
	
.LABEL $label$200
	CALL $81($16)
	
.LABEL $label$199
	if ( ((int_32)$17 != (int_32)$15) ){ goto $label$198 }
	$15 = *(($22 + [320]))
	goto $label$196 
	
.LABEL $label$197
	$15 = $17
	
.LABEL $label$196
	*($14) = $17
	CALL $81($15)
	
.LABEL $label$195
	$17 = *($22 + [360])
	if ( ($17 == 0) ){ goto $label$201 }
	$14 = ($22 + [364])
	$15 = *($14)
	if ( ((int_32)$15 == (int_32)$17) ){ goto $label$203 }
	
.LOOP $label$204:
	$15 = ($15 + [-24])
	$16 = *($15)
	*($15) = [0]
	if ( ($16 == 0) ){ goto $label$205 }
	if ( ((*($16 + [24]) & [1]) == 0) ){ goto $label$206 }
	CALL $81(*(($16 + [32])))
	
.LABEL $label$206
	CALL $81($16)
	
.LABEL $label$205
	if ( ((int_32)$17 != (int_32)$15) ){ goto $label$204 }
	$15 = *(($22 + [360]))
	goto $label$202 
	
.LABEL $label$203
	$15 = $17
	
.LABEL $label$202
	*($14) = $17
	CALL $81($15)
	
.LABEL $label$201
	*([0] + [4]) = ($22 + [400])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC _ZN5eosio8gambling5splitENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$18 = (*([0] + [4]) - [16])
	*([0] + [4]) = $18
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$17 = *($3)
	$8 = ($17 & [1])
	$4 = ($3 + [1])
	CALL $86($2, ( *($3 + [8]) ? $4 : $8 ), ( *($3 + [4]) ? uint_32($17 >> [1]) : $8 ))
	$17 = *($2)
	if ( ($17 & [1]) ){ goto $label$7 }
	$13 = uint_32($17 >> [1])
	if ( $13 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$13 = *($2 + [4])
	if ( ($13 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$5 = ($2 + [1])
	$6 = [0]
	$11 = ($3 + [4])
	$12 = ($3 + [8])
	if ( (($17 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$19 = [2]
	goto $label$1 
	
.LABEL $label$4
	$19 = [2]
	goto $label$1 
	
.LABEL $label$3
	$19 = [21]
	goto $label$1 
	
.LABEL $label$2
	$19 = [4]
	
.LABEL $label$1
	
.LOOP $label$8:
	goto $label$43 
	
.LABEL $label$48
	$17 = $9
	$19 = [13]
	goto $label$8 
	
.LABEL $label$47
	$17 = ( [-1] ? ($17 - $14) : ((int_32)$17 == (int_32)$9) )
	$19 = [14]
	goto $label$8 
	
.LABEL $label$46
	if ( ((uint_32)$17 >= (uint_32)$13) ){ goto $label$22 }
	$19 = [15]
	goto $label$8 
	
.LABEL $label$45
	CALL $93($18, $2, $6, ($17 - $6), $2)
	$8 = ($0 + [4])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)*(($0 + [8]))) ){ goto $label$10 }
	$19 = [16]
	goto $label$8 
	
.LABEL $label$44
	CALL $92($6, $18)
	*($8) = (*($8) + [12])
	goto $label$9 
	
.LABEL $label$43
	$17 = $6
	goto $label$23 
	
.LABEL $label$42
	CALL $43($0, $18)
	$19 = [17]
	goto $label$8 
	
.LABEL $label$41
	if ( ((*($18) & [1]) == 0) ){ goto $label$24 }
	$19 = [18]
	goto $label$8 
	
.LABEL $label$40
	CALL $81(*(($18 + [8])))
	$19 = [1]
	goto $label$8 
	
.LABEL $label$39
	$6 = ($17 + [1])
	if ( ((uint_32)$6 >= (uint_32)$13) ){ goto $label$20 }
	$19 = [3]
	goto $label$8 
	
.LABEL $label$38
	$17 = *($2)
	if ( ($17 & [1]) ){ goto $label$26 }
	$19 = [21]
	goto $label$8 
	
.LABEL $label$37
	$14 = $5
	$15 = uint_32(($17 & [254]) >> [1])
	if ( ($15 <= $6) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$36
	$14 = *(($2 + [8]))
	$15 = *(($2 + [4]))
	if ( ((uint_32)$15 >= (uint_32)$6) ){ goto $label$25 }
	$19 = [20]
	goto $label$8 
	
.LABEL $label$35
	$17 = $6
	goto $label$21 
	
.LABEL $label$34
	$17 = $6
	$10 = ($8 & [1])
	$8 = *($3)
	$8 = ( *($11) ? uint_32($8 >> [1]) : $10 )
	if ( ($8 == 0) ){ goto $label$17 }
	$19 = [6]
	goto $label$8 
	
.LABEL $label$33
	$9 = ($14 + $15)
	$17 = $9
	$16 = ($14 + $6)
	$15 = ($9 - $16)
	if ( ((int_32)$15 < (int_32)$8) ){ goto $label$16 }
	$19 = [7]
	goto $label$8 
	
.LABEL $label$32
	$7 = ( *($12) ? $4 : $10 )
	$10 = *($7)
	$19 = [8]
	goto $label$8 
	
.LABEL $label$31
	$17 = (($15 - $8) + [1])
	if ( ($17 == 0) ){ goto $label$13 }
	$19 = [9]
	goto $label$8 
	
.LABEL $label$30
	$17 = CALL memchr($16, $10, $17)
	if ( ($17 == 0) ){ goto $label$12 }
	$19 = [10]
	goto $label$8 
	
.LABEL $label$29
	if ( (CALL memcmp($17, $7, $8) == 0) ){ goto $label$11 }
	$19 = [11]
	goto $label$8 
	
.LABEL $label$28
	$16 = ($17 + [1])
	$15 = ($9 - $16)
	if ( ((int_32)$15 >= (int_32)$8) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$27
	*([0] + [4]) = ($18 + [16])
	return 
	
.LABEL $label$26
	$19 = [4]
	goto $label$8 
	
.LABEL $label$25
	$19 = [5]
	goto $label$8 
	
.LABEL $label$24
	$19 = [1]
	goto $label$8 
	
.LABEL $label$23
	$19 = [1]
	goto $label$8 
	
.LABEL $label$22
	$19 = [0]
	goto $label$8 
	
.LABEL $label$21
	$19 = [1]
	goto $label$8 
	
.LABEL $label$20
	$19 = [2]
	goto $label$8 
	
.LABEL $label$19
	$19 = [20]
	goto $label$8 
	
.LABEL $label$18
	$19 = [5]
	goto $label$8 
	
.LABEL $label$17
	$19 = [14]
	goto $label$8 
	
.LABEL $label$16
	$19 = [13]
	goto $label$8 
	
.LABEL $label$15
	$19 = [12]
	goto $label$8 
	
.LABEL $label$14
	$19 = [8]
	goto $label$8 
	
.LABEL $label$13
	$19 = [12]
	goto $label$8 
	
.LABEL $label$12
	$19 = [12]
	goto $label$8 
	
.LABEL $label$11
	$19 = [13]
	goto $label$8 
	
.LABEL $label$10
	$19 = [19]
	goto $label$8 
	
.LABEL $label$9
	$19 = [17]
	goto $label$8 
	$19
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN5eosio8gambling2onERKNS_8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL prints([16])
	$4 = *($0)
	$3 = *($1)
	if ( ((int_64)$3 == (int_64)$4) ){ goto $label$1 }
	if ( ((int_64)*($1 + [8]) != (int_64)$4) ){ goto $label$1 }
	CALL $92($5, ($1 + [32]))
	CALL _ZN5eosio8gambling3betEyRKNS_5assetENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE($0, $3, ($1 + [16]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$2 }
	CALL $81(*($5 + [8]))
	
.LABEL $label$2
	$4 = *(($1 + [8]))
	$3 = *($1)
	CALL prints([32])
	CALL printn($3)
	CALL prints([48])
	CALL printn($4)
	CALL prints([64])
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $80(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL $81(*(($1 + [32])))
	
.LABEL $label$11
	CALL $81($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $81($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [108]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1504])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4229679821141016576)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1440])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1440])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $30(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1136])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $80([128])
	CALL $19($6)
	*($6 + [112]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [24])
	*($8 + [48]) = ($6 + [32])
	*($8 + [52]) = ($6 + [48])
	*($8 + [56]) = ($6 + [64])
	*($8 + [60]) = ($6 + [72])
	*($8 + [64]) = ($6 + [80])
	*($8 + [68]) = ($6 + [88])
	*($8 + [72]) = ($6 + [96])
	CALL $38(($8 + [32]), ($8 + [24]))
	*($6 + [120]) = [-1]
	*($6 + [116]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [116])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $21(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $81(*(($4 + [40])))
	
.LABEL $label$10
	CALL $81($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [116]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1504])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4229888623173959680)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1440])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1440])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $16(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $10 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $80([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $34($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $41(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $34($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [992])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [992])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $40(CALL $39($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $12 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [40]) = (int_64)0
	$2 = [0]
	*(($0 + [32])) = [0]
	*(($3 = ($0 + [48]))) = (int_64)1397703940
	CALL eosio_assert([1], [208])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [272])
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [208])
	$1 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [272])
	*(($0 + [96])) = (int_64)1397703940
	*($0 + [88]) = (int_64)0
	return $0
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [64])
	$15 = $16
	*([0] + [4]) = $16
	$2 = *($0)
	$12 = *($0 + [4])
	$14 = *($12)
	$13 = *($14 + [16])
	if ( ((int_64)$13 != (int_64)-1) ){ goto $label$1 }
	$13 = (int_64)0
	$6 = CALL db_lowerbound_i64(*($14), *($14 + [8]), (int_64)4229679821141016576, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $30($14, $6)
	*($15 + [28]) = [0]
	*($15 + [24]) = $14
	$13 = *(*(CALL $15(($15 + [24])) + [4]))
	$13 = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($14 + [16])) = $13
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($13 <= (int_64)-2), [1200])
	*($1) = *(($14 + [16]))
	*($1 + [8]) = *(*(*($12 + [4]) + [4]) + [8])
	*($1 + [16]) = *(*($12 + [8]))
	$14 = *($12 + [12])
	*($1 + [40]) = *($14)
	*(($1 + [48])) = *(($14 + [8]))
	$6 = ($1 + [24])
	CALL $83($6, *($12 + [16]))
	*($1 + [56]) = *(*($12 + [20]))
	$13 = CALL current_time()
	*($1 + [72]) = (int_64)0
	*($1 + [64]) = ((int_64)((uint_64)$13 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$12 = *($1 + [24])
	$14 = ( *(($1 + [28])) ? uint_32($12 >> [1]) : ($12 & [1]) )
	$12 = ($14 + [88])
	$13 = (CASTING uint_64)(uint_32 $14)
	$9 = ($1 + [72])
	$8 = ($1 + [64])
	$7 = ($1 + [56])
	$5 = ($1 + [40])
	$4 = ($1 + [16])
	$3 = ($1 + [8])
	
.LOOP $label$3:
	$12 = ($12 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$3 }
	if ( ($12 <= [513]) ){ goto $label$5 }
	$14 = CALL malloc($12)
	goto $label$4 
	
.LABEL $label$5
	$14 = ($16 - (($12 + [15]) & [-16]))
	*([0] + [4]) = $14
	
.LABEL $label$4
	*($15 + [4]) = $14
	*($15) = $14
	*($15 + [8]) = ($14 + $12)
	*($15 + [16]) = $15
	*($15 + [28]) = $3
	*($15 + [24]) = $1
	*($15 + [32]) = $4
	*($15 + [36]) = $6
	*($15 + [40]) = $5
	*($15 + [44]) = $7
	*($15 + [48]) = $8
	*($15 + [52]) = $9
	*($15 + [56]) = ($1 + [80])
	*($15 + [60]) = ($1 + [88])
	CALL $37(($15 + [24]), ($15 + [16]))
	$13 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($2 + [8]), (int_64)4229679821141016576, *(*($0 + [8])), $13, $14, $12)
	if ( ($12 <= [513]) ){ goto $label$6 }
	CALL free($14)
	
.LABEL $label$6
	if ( (uint_64)($13 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$12 = ($2 + [8])
	$13 = *($12)
	$14 = *(($0 + [8]))
	$10 = *($14)
	$11 = *($1)
	*($15 + [24]) = *(($1 + [8]))
	*($1 + [112]) = CALL db_idx64_store($13, (int_64)4229679821141016576, $10, $11, ($15 + [24]))
	$13 = *($14)
	$10 = *($12)
	$11 = *($1)
	*($15 + [24]) = *(($1 + [16]))
	*(($1 + [116])) = CALL db_idx64_store($10, (int_64)4229679821141016577, $13, $11, ($15 + [24]))
	*([0] + [4]) = ($15 + [64])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$5 = *($0 + [4])
	*($1 + [8]) = (int_64)1000
	*($1) = *(*($5))
	$2 = *($0)
	CALL eosio_assert([1], [208])
	$3 = ($1 + [8])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [272])
	*(($1 + [24])) = (int_64)1397703940
	*($1 + [16]) = (int_64)0
	*($1 + [32]) = (int_64)0
	$6 = $8
	$5 = ($6 + [-48])
	*([0] + [4]) = $5
	*($7 + [12]) = $5
	*($7 + [8]) = $5
	*($7 + [16]) = ($6 + [-8])
	*($7 + [24]) = ($7 + [8])
	*($7 + [36]) = $3
	*($7 + [32]) = $1
	*($7 + [40]) = ($1 + [16])
	*($7 + [44]) = ($1 + [32])
	CALL $9(($7 + [32]), ($7 + [24]))
	$4 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)-6030999592743469056, *(*($0 + [8])), $4, $5, [40])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1312])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1376])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $81(*(($4 + [40])))
	
.LABEL $label$7
	CALL $81($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $81(*(($4 + [40])))
	
.LABEL $label$10
	CALL $81($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [116]))
	$7 = *(($1 + [120]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229888623173959680, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $19 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [32 align=4]) = (int_64)0
	*($0 + [48]) = (int_64)0
	$2 = [0]
	*(($0 + [40])) = [0]
	*(($3 = ($0 + [56]))) = (int_64)1397703940
	CALL eosio_assert([1], [208])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [272])
	*($0 + [88]) = (int_64)0
	CALL eosio_assert([1], [208])
	$1 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [272])
	*(($0 + [104])) = (int_64)1397703940
	*($0 + [96]) = (int_64)0
	return $0
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [44]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1504])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-8272095835152449536)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1440])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1440])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $57(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1312])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1376])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $81(*(($4 + [24])))
	
.LABEL $label$7
	CALL $81($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL $81(*(($4 + [24])))
	
.LABEL $label$10
	CALL $81($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $80(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $81(*(($1 + [16])))
	
.LABEL $label$11
	CALL $81($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $81($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [36]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1504])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-8272096940049940480)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1440])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1440])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $64(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4229679821141016576, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [104]) == (int_32)$4), [144])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $30($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)4229679821141016576, $5))
	CALL eosio_assert(((int_32)*($2 + [104]) == (int_32)$4), [144])
	
.LABEL $label$4
	*(($2 + [112])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	$4 = ($1 + [8])
	*(($13 = $12) + [16]) = *($4)
	$5 = ($1 + [16])
	*($13 + [24]) = *($5)
	$7 = *($1)
	$3 = *($3)
	*(($1 + [96])) = *(($3 + [8]))
	*($1 + [88]) = *($3)
	*($1 + [80]) = (int_64)1
	CALL eosio_assert([1], [560])
	$3 = *($1 + [24])
	$10 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($10 + [88])
	$11 = (CASTING uint_64)(uint_32 $10)
	$10 = ($1 + [24])
	$9 = ($1 + [80])
	$8 = ($1 + [88])
	$6 = (($13 + [16]) + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$12 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$12 = ($12 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $12
	
.LABEL $label$2
	*($13 + [4]) = $12
	*($13) = $12
	*($13 + [8]) = ($12 + $3)
	*($13 + [32]) = $13
	*($13 + [44]) = $4
	*($13 + [48]) = $5
	*($13 + [52]) = $10
	*($13 + [40]) = $1
	*($13 + [56]) = ($1 + [40])
	*($13 + [60]) = ($1 + [56])
	*($13 + [64]) = ($1 + [64])
	*($13 + [68]) = ($1 + [72])
	*($13 + [72]) = $9
	*($13 + [76]) = $8
	CALL $37(($13 + [40]), ($13 + [32]))
	CALL db_update_i64(*($1 + [108]), $2, $12, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($12)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($13 + [40]) = *($4)
	if ( (CALL memcmp(($13 + [16]), ($13 + [40]), [8]) == 0) ){ goto $label$6 }
	$12 = ($1 + [112])
	$3 = *($12)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229679821141016576, ($13 + [32]), $7)
	*($12) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($13 + [40]))
	
.LABEL $label$6
	*($13 + [40]) = *($5)
	if ( (CALL memcmp($6, ($13 + [40]), [8]) == 0) ){ goto $label$8 }
	$1 = ($1 + [116])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$9 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229679821141016577, ($13 + [32]), $7)
	*($1) = $3
	
.LABEL $label$9
	CALL db_idx64_update($3, $2, ($13 + [40]))
	
.LABEL $label$8
	*([0] + [4]) = ($13 + [80])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4229888623173959680, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [112]) == (int_32)$4), [144])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $16($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)4229888623173959680, $5))
	CALL eosio_assert(((int_32)*($2 + [112]) == (int_32)$4), [144])
	
.LABEL $label$4
	*(($2 + [120])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $80($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $91($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $81($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [960])
	$6 = *($0 + [4])
	$7 = *($6 + [112])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4229679821141016576, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [112]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$2), [144])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $30($2, CALL $fimport$5(*($2), *($2 + [8]), (int_64)4229679821141016576, $3))
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$2), [144])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [112])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1136])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $80([56])
	$6 = CALL $63($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [44])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $61(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL $81(*(($4 + [24])))
	
.LABEL $label$10
	CALL $81($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $36(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), $2, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4229679821141016577, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [104]) == (int_32)$4), [144])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $30($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)4229679821141016576, $5))
	CALL eosio_assert(((int_32)*($2 + [104]) == (int_32)$4), [144])
	
.LABEL $label$4
	*(($2 + [116])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [80])
	$16 = $17
	*([0] + [4]) = $17
	$2 = *($0)
	$13 = *($0 + [4])
	$15 = *($13)
	$14 = *($15 + [16])
	if ( ((int_64)$14 != (int_64)-1) ){ goto $label$1 }
	$14 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($15), *($15 + [8]), (int_64)4229888623173959680, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $16($15, $7)
	*($16 + [36]) = [0]
	*($16 + [32]) = $15
	$14 = *(*(CALL $17(($16 + [32])) + [4]))
	$14 = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($15 + [16])) = $14
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($14 <= (int_64)-2), [1200])
	*($1) = *(($15 + [16]))
	*($1 + [8]) = *(*(*($13 + [4]) + [4]))
	*($1 + [16]) = *(*(*($13 + [4]) + [4]) + [8])
	*($1 + [24]) = *(*(*($13 + [4]) + [4]) + [16])
	$15 = *(*($13 + [4]) + [4])
	*($1 + [48]) = *($15 + [40])
	*(($1 + [56])) = *(($15 + [48]))
	$7 = ($1 + [32])
	CALL $83($7, (*(*($13 + [4]) + [4]) + [24]))
	*($1 + [64]) = *(*($13 + [8]))
	$14 = CALL current_time()
	*($1 + [80]) = (int_64)1
	*($1 + [72]) = ((int_64)((uint_64)$14 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$13 = *($1 + [32])
	$15 = ( *(($1 + [36])) ? uint_32($13 >> [1]) : ($13 & [1]) )
	$13 = ($15 + [96])
	$14 = (CASTING uint_64)(uint_32 $15)
	$10 = ($1 + [80])
	$9 = ($1 + [72])
	$8 = ($1 + [64])
	$6 = ($1 + [48])
	$5 = ($1 + [24])
	$4 = ($1 + [16])
	$3 = ($1 + [8])
	
.LOOP $label$3:
	$13 = ($13 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$3 }
	if ( ($13 <= [513]) ){ goto $label$5 }
	$15 = CALL malloc($13)
	goto $label$4 
	
.LABEL $label$5
	$15 = ($17 - (($13 + [15]) & [-16]))
	*([0] + [4]) = $15
	
.LABEL $label$4
	*($16 + [12]) = $15
	*($16 + [8]) = $15
	*($16 + [16]) = ($15 + $13)
	*($16 + [24]) = ($16 + [8])
	*($16 + [36]) = $3
	*($16 + [32]) = $1
	*($16 + [40]) = $4
	*($16 + [44]) = $5
	*($16 + [48]) = $7
	*($16 + [52]) = $6
	*($16 + [56]) = $8
	*($16 + [60]) = $9
	*($16 + [64]) = $10
	*($16 + [68]) = ($1 + [88])
	*($16 + [72]) = ($1 + [96])
	CALL $35(($16 + [32]), ($16 + [24]))
	$14 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($2 + [8]), (int_64)4229888623173959680, *(*($0 + [8])), $14, $15, $13)
	if ( ($13 <= [513]) ){ goto $label$6 }
	CALL free($15)
	
.LABEL $label$6
	if ( (uint_64)($14 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$14 = *(($2 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($16 + [32]) = *(($1 + [8]))
	*($1 + [120]) = CALL db_idx64_store($14, (int_64)4229888623173959680, $11, $12, ($16 + [32]))
	*([0] + [4]) = ($16 + [80])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	$3 = *($3)
	*($1 + [96]) = *($3)
	*(($1 + [108])) = *(($3 + [12]))
	*(($1 + [104])) = *(($3 + [8]))
	*(($1 + [100])) = *(($3 + [4]))
	$4 = ($1 + [8])
	*(($11 = $10) + [16]) = *($4)
	$5 = *($1)
	*($1 + [88]) = (int_64)1
	CALL eosio_assert([1], [560])
	$3 = *($1 + [32])
	$8 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [96])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [32])
	$7 = ($1 + [88])
	$6 = ($1 + [96])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$10 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$2
	*($11 + [4]) = $10
	*($11) = $10
	*($11 + [8]) = ($10 + $3)
	*($11 + [24]) = $11
	*($11 + [36]) = $4
	*($11 + [48]) = $8
	*($11 + [32]) = $1
	*($11 + [40]) = ($1 + [16])
	*($11 + [44]) = ($1 + [24])
	*($11 + [52]) = ($1 + [48])
	*($11 + [56]) = ($1 + [64])
	*($11 + [60]) = ($1 + [72])
	*($11 + [64]) = ($1 + [80])
	*($11 + [68]) = $7
	*($11 + [72]) = $6
	CALL $35(($11 + [32]), ($11 + [24]))
	CALL db_update_i64(*($1 + [116]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($10)
	
.LABEL $label$4
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($11 + [32]) = *($4)
	if ( (CALL memcmp(($11 + [16]), ($11 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [120])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229888623173959680, ($11 + [24]), $5)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($11 + [32]))
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [80])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $80(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $81(*(($1 + [40])))
	
.LABEL $label$11
	CALL $81($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $81($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [80])
	$16 = $17
	*([0] + [4]) = $17
	$2 = *($0)
	$13 = *($0 + [4])
	$15 = *($13)
	$14 = *($15 + [16])
	if ( ((int_64)$14 != (int_64)-1) ){ goto $label$1 }
	$14 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($15), *($15 + [8]), (int_64)4229888623173959680, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $16($15, $7)
	*($16 + [36]) = [0]
	*($16 + [32]) = $15
	$14 = *(*(CALL $17(($16 + [32])) + [4]))
	$14 = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($15 + [16])) = $14
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($14 <= (int_64)-2), [1200])
	*($1) = *(($15 + [16]))
	*($1 + [8]) = *(*(*($13 + [4]) + [4]))
	*($1 + [16]) = *(*(*($13 + [8]) + [4]) + [8])
	*($1 + [24]) = *(*(*($13 + [4]) + [4]) + [16])
	$15 = *(*($13 + [4]) + [4])
	*($1 + [48]) = *($15 + [40])
	*(($1 + [56])) = *(($15 + [48]))
	$7 = ($1 + [32])
	CALL $83($7, (*(*($13 + [4]) + [4]) + [24]))
	*($1 + [64]) = *(*($13 + [12]))
	$14 = CALL current_time()
	*($1 + [80]) = (int_64)0
	*($1 + [72]) = ((int_64)((uint_64)$14 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$13 = *($1 + [32])
	$15 = ( *(($1 + [36])) ? uint_32($13 >> [1]) : ($13 & [1]) )
	$13 = ($15 + [96])
	$14 = (CASTING uint_64)(uint_32 $15)
	$10 = ($1 + [80])
	$9 = ($1 + [72])
	$8 = ($1 + [64])
	$6 = ($1 + [48])
	$5 = ($1 + [24])
	$4 = ($1 + [16])
	$3 = ($1 + [8])
	
.LOOP $label$3:
	$13 = ($13 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$3 }
	if ( ($13 <= [513]) ){ goto $label$5 }
	$15 = CALL malloc($13)
	goto $label$4 
	
.LABEL $label$5
	$15 = ($17 - (($13 + [15]) & [-16]))
	*([0] + [4]) = $15
	
.LABEL $label$4
	*($16 + [12]) = $15
	*($16 + [8]) = $15
	*($16 + [16]) = ($15 + $13)
	*($16 + [24]) = ($16 + [8])
	*($16 + [36]) = $3
	*($16 + [32]) = $1
	*($16 + [40]) = $4
	*($16 + [44]) = $5
	*($16 + [48]) = $7
	*($16 + [52]) = $6
	*($16 + [56]) = $8
	*($16 + [60]) = $9
	*($16 + [64]) = $10
	*($16 + [68]) = ($1 + [88])
	*($16 + [72]) = ($1 + [96])
	CALL $35(($16 + [32]), ($16 + [24]))
	$14 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($2 + [8]), (int_64)4229888623173959680, *(*($0 + [8])), $14, $15, $13)
	if ( ($13 <= [513]) ){ goto $label$6 }
	CALL free($15)
	
.LABEL $label$6
	if ( (uint_64)($14 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$14 = *(($2 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($16 + [32]) = *(($1 + [8]))
	*($1 + [120]) = CALL db_idx64_store($14, (int_64)4229888623173959680, $11, $12, ($16 + [32]))
	*([0] + [4]) = ($16 + [80])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1136])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $80([32])) + [16]) = $0
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [1168])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [1168])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [24]) = [-1]
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $24(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $81($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [80])
	$16 = $17
	*([0] + [4]) = $17
	$2 = *($0)
	$13 = *($0 + [4])
	$15 = *($13)
	$14 = *($15 + [16])
	if ( ((int_64)$14 != (int_64)-1) ){ goto $label$1 }
	$14 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($15), *($15 + [8]), (int_64)4229888623173959680, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $16($15, $7)
	*($16 + [36]) = [0]
	*($16 + [32]) = $15
	$14 = *(*(CALL $17(($16 + [32])) + [4]))
	$14 = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($15 + [16])) = $14
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($14 <= (int_64)-2), [1200])
	*($1) = *(($15 + [16]))
	*($1 + [8]) = *(*(*($13 + [4]) + [4]))
	*($1 + [16]) = *(*(*($13 + [8]) + [4]) + [8])
	*($1 + [24]) = *(*(*($13 + [4]) + [4]) + [16])
	$15 = *(*($13 + [4]) + [4])
	*($1 + [48]) = *($15 + [40])
	*(($1 + [56])) = *(($15 + [48]))
	$7 = ($1 + [32])
	CALL $83($7, (*(*($13 + [4]) + [4]) + [24]))
	*($1 + [64]) = *(*($13 + [12]))
	$14 = CALL current_time()
	*($1 + [80]) = (int_64)0
	*($1 + [72]) = ((int_64)((uint_64)$14 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$13 = *($1 + [32])
	$15 = ( *(($1 + [36])) ? uint_32($13 >> [1]) : ($13 & [1]) )
	$13 = ($15 + [96])
	$14 = (CASTING uint_64)(uint_32 $15)
	$10 = ($1 + [80])
	$9 = ($1 + [72])
	$8 = ($1 + [64])
	$6 = ($1 + [48])
	$5 = ($1 + [24])
	$4 = ($1 + [16])
	$3 = ($1 + [8])
	
.LOOP $label$3:
	$13 = ($13 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$3 }
	if ( ($13 <= [513]) ){ goto $label$5 }
	$15 = CALL malloc($13)
	goto $label$4 
	
.LABEL $label$5
	$15 = ($17 - (($13 + [15]) & [-16]))
	*([0] + [4]) = $15
	
.LABEL $label$4
	*($16 + [12]) = $15
	*($16 + [8]) = $15
	*($16 + [16]) = ($15 + $13)
	*($16 + [24]) = ($16 + [8])
	*($16 + [36]) = $3
	*($16 + [32]) = $1
	*($16 + [40]) = $4
	*($16 + [44]) = $5
	*($16 + [48]) = $7
	*($16 + [52]) = $6
	*($16 + [56]) = $8
	*($16 + [60]) = $9
	*($16 + [64]) = $10
	*($16 + [68]) = ($1 + [88])
	*($16 + [72]) = ($1 + [96])
	CALL $35(($16 + [32]), ($16 + [24]))
	$14 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($2 + [8]), (int_64)4229888623173959680, *(*($0 + [8])), $14, $15, $13)
	if ( ($13 <= [513]) ){ goto $label$6 }
	CALL free($15)
	
.LABEL $label$6
	if ( (uint_64)($14 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$14 = *(($2 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($16 + [32]) = *(($1 + [8]))
	*($1 + [120]) = CALL db_idx64_store($14, (int_64)4229888623173959680, $11, $12, ($16 + [32]))
	*([0] + [4]) = ($16 + [80])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $80(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $81($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $81($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $80(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $81($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $81($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [80])
	$16 = $17
	*([0] + [4]) = $17
	$2 = *($0)
	$13 = *($0 + [4])
	$15 = *($13)
	$14 = *($15 + [16])
	if ( ((int_64)$14 != (int_64)-1) ){ goto $label$1 }
	$14 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($15), *($15 + [8]), (int_64)4229888623173959680, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $16($15, $7)
	*($16 + [36]) = [0]
	*($16 + [32]) = $15
	$14 = *(*(CALL $17(($16 + [32])) + [4]))
	$14 = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($15 + [16])) = $14
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($14 <= (int_64)-2), [1200])
	*($1) = *(($15 + [16]))
	*($1 + [8]) = *(*(*($13 + [4]) + [4]))
	*($1 + [16]) = *(*(*($13 + [4]) + [4]) + [8])
	*($1 + [24]) = *(*(*($13 + [4]) + [4]) + [16])
	$15 = *(*($13 + [4]) + [4])
	*($1 + [48]) = *($15 + [40])
	*(($1 + [56])) = *(($15 + [48]))
	$7 = ($1 + [32])
	CALL $83($7, (*(*($13 + [4]) + [4]) + [24]))
	*($1 + [64]) = *(*($13 + [8]))
	$14 = CALL current_time()
	*($1 + [80]) = (int_64)1
	*($1 + [72]) = ((int_64)((uint_64)$14 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$13 = *($1 + [32])
	$15 = ( *(($1 + [36])) ? uint_32($13 >> [1]) : ($13 & [1]) )
	$13 = ($15 + [96])
	$14 = (CASTING uint_64)(uint_32 $15)
	$10 = ($1 + [80])
	$9 = ($1 + [72])
	$8 = ($1 + [64])
	$6 = ($1 + [48])
	$5 = ($1 + [24])
	$4 = ($1 + [16])
	$3 = ($1 + [8])
	
.LOOP $label$3:
	$13 = ($13 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$3 }
	if ( ($13 <= [513]) ){ goto $label$5 }
	$15 = CALL malloc($13)
	goto $label$4 
	
.LABEL $label$5
	$15 = ($17 - (($13 + [15]) & [-16]))
	*([0] + [4]) = $15
	
.LABEL $label$4
	*($16 + [12]) = $15
	*($16 + [8]) = $15
	*($16 + [16]) = ($15 + $13)
	*($16 + [24]) = ($16 + [8])
	*($16 + [36]) = $3
	*($16 + [32]) = $1
	*($16 + [40]) = $4
	*($16 + [44]) = $5
	*($16 + [48]) = $7
	*($16 + [52]) = $6
	*($16 + [56]) = $8
	*($16 + [60]) = $9
	*($16 + [64]) = $10
	*($16 + [68]) = ($1 + [88])
	*($16 + [72]) = ($1 + [96])
	CALL $35(($16 + [32]), ($16 + [24]))
	$14 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($2 + [8]), (int_64)4229888623173959680, *(*($0 + [8])), $14, $15, $13)
	if ( ($13 <= [513]) ){ goto $label$6 }
	CALL free($15)
	
.LABEL $label$6
	if ( (uint_64)($14 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$14 = *(($2 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($16 + [32]) = *(($1 + [8]))
	*($1 + [120]) = CALL db_idx64_store($14, (int_64)4229888623173959680, $11, $12, ($16 + [32]))
	*([0] + [4]) = ($16 + [80])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [64])
	$15 = $16
	*([0] + [4]) = $16
	$2 = *($0)
	$12 = *($0 + [4])
	$14 = *($12)
	$13 = *($14 + [16])
	if ( ((int_64)$13 != (int_64)-1) ){ goto $label$1 }
	$13 = (int_64)0
	$6 = CALL db_lowerbound_i64(*($14), *($14 + [8]), (int_64)4229679821141016576, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $30($14, $6)
	*($15 + [28]) = [0]
	*($15 + [24]) = $14
	$13 = *(*(CALL $15(($15 + [24])) + [4]))
	$13 = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($14 + [16])) = $13
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($13 <= (int_64)-2), [1200])
	*($1) = *(($14 + [16]))
	*($1 + [8]) = *(*(*($12 + [4]) + [4]) + [8])
	*($1 + [16]) = *(*($12 + [8]))
	$14 = *($12 + [12])
	*($1 + [40]) = *($14)
	*(($1 + [48])) = *(($14 + [8]))
	$6 = ($1 + [24])
	CALL $83($6, *($12 + [16]))
	*($1 + [56]) = *(*($12 + [20]))
	$13 = CALL current_time()
	*($1 + [72]) = (int_64)1
	*($1 + [64]) = ((int_64)((uint_64)$13 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$12 = *($1 + [24])
	$14 = ( *(($1 + [28])) ? uint_32($12 >> [1]) : ($12 & [1]) )
	$12 = ($14 + [88])
	$13 = (CASTING uint_64)(uint_32 $14)
	$9 = ($1 + [72])
	$8 = ($1 + [64])
	$7 = ($1 + [56])
	$5 = ($1 + [40])
	$4 = ($1 + [16])
	$3 = ($1 + [8])
	
.LOOP $label$3:
	$12 = ($12 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$3 }
	if ( ($12 <= [513]) ){ goto $label$5 }
	$14 = CALL malloc($12)
	goto $label$4 
	
.LABEL $label$5
	$14 = ($16 - (($12 + [15]) & [-16]))
	*([0] + [4]) = $14
	
.LABEL $label$4
	*($15 + [4]) = $14
	*($15) = $14
	*($15 + [8]) = ($14 + $12)
	*($15 + [16]) = $15
	*($15 + [28]) = $3
	*($15 + [24]) = $1
	*($15 + [32]) = $4
	*($15 + [36]) = $6
	*($15 + [40]) = $5
	*($15 + [44]) = $7
	*($15 + [48]) = $8
	*($15 + [52]) = $9
	*($15 + [56]) = ($1 + [80])
	*($15 + [60]) = ($1 + [88])
	CALL $37(($15 + [24]), ($15 + [16]))
	$13 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($2 + [8]), (int_64)4229679821141016576, *(*($0 + [8])), $13, $14, $12)
	if ( ($12 <= [513]) ){ goto $label$6 }
	CALL free($14)
	
.LABEL $label$6
	if ( (uint_64)($13 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$12 = ($2 + [8])
	$13 = *($12)
	$14 = *(($0 + [8]))
	$10 = *($14)
	$11 = *($1)
	*($15 + [24]) = *(($1 + [8]))
	*($1 + [112]) = CALL db_idx64_store($13, (int_64)4229679821141016576, $10, $11, ($15 + [24]))
	$13 = *($14)
	$10 = *($12)
	$11 = *($1)
	*($15 + [24]) = *(($1 + [16]))
	*(($1 + [116])) = CALL db_idx64_store($10, (int_64)4229679821141016577, $13, $11, ($15 + [24]))
	*([0] + [4]) = ($15 + [64])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $32(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $92(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $92(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $81(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $81(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $81(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1168])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN5eosio8gambling5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [128])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [816]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $66(($9 + [80]))
	CALL _ZN5eosio8gambling2onERKNS_8currency8transferEy($0, ($9 + [80]), $6)
	if ( ((*($9 + [112]) & [1]) == 0) ){ goto $label$7 }
	CALL $81(*(($9 + [120])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 <= (int_64)-4994302320998088705) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-2616330978981663232) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-4994302089740943360) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-4994302320998088704) ){ goto $label$7 }
	*($9 + [76]) = [0]
	*($9 + [72]) = [1]
	*($9) = *($9 + [72])
	CALL $67($0, $9)
	goto $label$7 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-8283087284966785024) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-8272103852073811968) ){ goto $label$7 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [2]
	*($9 + [16 align=4]) = *($9 + [56])
	CALL $69($0, ($9 + [16]))
	goto $label$7 
	
.LABEL $label$11
	*($9 + [44]) = [0]
	*($9 + [40]) = [3]
	*($9 + [32 align=4]) = *($9 + [40])
	CALL $70($0, ($9 + [32]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [52]) = [0]
	*($9 + [48]) = [4]
	*($9 + [24 align=4]) = *($9 + [48])
	CALL $68($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$9
	*($9 + [68]) = [0]
	*($9 + [64]) = [5]
	*($9 + [8 align=4]) = *($9 + [64])
	CALL $68($0, ($9 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [128])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1136])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $80([48]))) = (int_64)1000
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16]) = [0]
	*($6 + [32]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1168])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $32(($8 + [32]), ($6 + [8]))
	CALL eosio_assert(((uint_32)(*((($8 + [32]) + [8])) - *($8 + [36])) > (uint_32)[7]), [1168])
	CALL memcpy(($6 + [24]), *($8 + [36]), [8])
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	*($8 + [36]) = (*($8 + [36]) + [8])
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $50(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $81(*(($4 + [16])))
	
.LABEL $label$10
	CALL $81($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [208])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [272])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $71($6, $0)
	if ( ($1 <= [513]) ){ goto $label$8 }
	CALL free($2)
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $80(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $81(*(($1 + [24])))
	
.LABEL $label$11
	CALL $81($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $81($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	$2 = *($0)
	$7 = *($0 + [4])
	$9 = *($7)
	$8 = *($9 + [16])
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($9), *($9 + [8]), (int_64)-8272095835152449536, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $57($9, $4)
	*($10 + [4]) = [0]
	*($10) = $9
	$8 = *(*(CALL $58($10) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($9 + [16])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [1200])
	*($1) = *(($9 + [16]))
	*($1 + [8]) = *(*(*($7 + [4]) + [4]))
	$4 = ($1 + [16])
	CALL $83($4, (*(*($7 + [4]) + [4]) + [8]))
	*($1 + [32]) = *(*(*($7 + [4]) + [4]) + [24])
	$7 = *($1 + [16])
	$9 = ( *(($1 + [20])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($9 + [24])
	$8 = (CASTING uint_64)(uint_32 $9)
	$5 = ($1 + [32])
	$3 = ($1 + [8])
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($11 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10) = $9
	$11 = ($9 + $7)
	*($10 + [8]) = $11
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [992])
	CALL memcpy($9, $1, [8])
	$6 = ($9 + [8])
	CALL eosio_assert(((int_32)($11 - $6) > (int_32)[7]), [992])
	CALL memcpy($6, $3, [8])
	*($10 + [4]) = ($9 + [16])
	CALL $36($10, $4)
	CALL eosio_assert(((int_32)(*($10 + [8]) - *($10 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($10 + [4]), $5, [8])
	*($10 + [4]) = (*($10 + [4]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)-8272095835152449536, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0 + [8]) = (int_64)1000
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [40]) = $1
	*(($0 + [24])) = [0]
	$1 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($0, *($1 + [4]), [8])
	$3 = (*($1 + [4]) + [8])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]), [1168])
	CALL memcpy(($0 + [8]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	CALL $32($1, ($0 + [16]))
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy(($0 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	*($0 + [44]) = *(*($2 + [8]))
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	$2 = *($0)
	$7 = *($0 + [4])
	$9 = *($7)
	$8 = *($9 + [16])
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($9), *($9 + [8]), (int_64)-8272095835152449536, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $57($9, $4)
	*($10 + [4]) = [0]
	*($10) = $9
	$8 = *(*(CALL $58($10) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($9 + [16])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [1200])
	*($1) = *(($9 + [16]))
	*($1 + [8]) = *(*(*($7 + [4]) + [4]))
	$4 = ($1 + [16])
	CALL $83($4, (*(*($7 + [4]) + [4]) + [8]))
	*($1 + [32]) = *(*(*($7 + [4]) + [4]) + [24])
	$7 = *($1 + [16])
	$9 = ( *(($1 + [20])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($9 + [24])
	$8 = (CASTING uint_64)(uint_32 $9)
	$5 = ($1 + [32])
	$3 = ($1 + [8])
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($11 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10) = $9
	$11 = ($9 + $7)
	*($10 + [8]) = $11
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [992])
	CALL memcpy($9, $1, [8])
	$6 = ($9 + [8])
	CALL eosio_assert(((int_32)($11 - $6) > (int_32)[7]), [992])
	CALL memcpy($6, $3, [8])
	*($10 + [4]) = ($9 + [16])
	CALL $36($10, $4)
	CALL eosio_assert(((int_32)(*($10 + [8]) - *($10 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($10 + [4]), $5, [8])
	*($10 + [4]) = (*($10 + [4]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)-8272095835152449536, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $104 ()
{
	(unreachable)
}

void .FUNC $89 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $90($1, $0, [10272])
	CALL abort()
	(unreachable)
}

void .FUNC $88 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $90($1, $0, [10288])
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = CALL strlen([10256])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($6) = ($3 << [1])
	$5 = ($6 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $80($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($5, [10256], $3)
	
.LABEL $label$4
	*(($5 + $3)) = [0]
	*($6 + [12]) = [0]
	$3 = *($0 + [8])
	$5 = *($0)
	$4 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($5 & [1]) )
	$2 = CALL strtol($3, ($6 + [12]), $2)
	$0 = CALL __errno_location()
	$5 = *($0)
	*($0) = $4
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($6 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL $81(*($6 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
	return $2
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $88($6)
	
.LABEL $label$1
	CALL $89($6)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $84($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $80(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $81($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $80($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $81($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $84($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $82 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $81 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10252])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	CALL _ZN5eosio8gambling5applyEyy(CALL $73($3, $0), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC $73 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = $1
	*(($0 + [24])) = $1
	*(($0 + [32])) = (int_64)-1
	*(($0 + [40])) = (int_64)0
	*(($0 + [48])) = [0]
	*(($0 + [52])) = [0]
	*($0 + [56]) = $1
	*(($0 + [64])) = $1
	*(($0 + [72])) = (int_64)-1
	*(($0 + [80])) = [0]
	*(($0 + [84])) = [0]
	*(($0 + [88])) = [0]
	$2 = ($0 + [56])
	$3 = CALL db_find_i64($1, $1, (int_64)-6030999592743469056, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $8($2, $3) + [40]) == (int_32)$2), [144])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	*($4 + [8]) = $0
	CALL $74($4, $2, $1, ($4 + [8]))
	*($0 + [8]) = (int_64)1000
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1168])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [1168])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $32($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1168])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1168])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1168])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $77([1752], $0)
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $78($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10160])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [848])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $80([56])) + [8]) = (int_64)10000
	CALL eosio_assert([1], [208])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [272])
	*($4 + [24]) = (int_64)1397703940
	*($4 + [16]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = $1
	CALL $75(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [44])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $25(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $81($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [992])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [992])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [992])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [992])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [992])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $36(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), $2, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $78 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10246]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10248])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10246]) = [1]
	$7 = ($7 << [16])
	*([0] + [10248]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10248])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10248]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10246]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10246]) = [1]
	$3 = ($3 << [16])
	*([0] + [10248]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10248])
	
.LABEL $label$8
	*([0] + [10248]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10136])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9944]
	$1 = (((int_32)$2 * (int_32)[12]) + [9944])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $33($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $85($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $80($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $85($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $81($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $82($7)
	return (unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1184])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $34($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [1168])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1136])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $80([120])
	CALL $12($6)
	*($6 + [104]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [40])
	*($8 + [60]) = ($6 + [56])
	*($8 + [64]) = ($6 + [64])
	*($8 + [68]) = ($6 + [72])
	*($8 + [72]) = ($6 + [80])
	*($8 + [76]) = ($6 + [88])
	CALL $31(($8 + [40]), ($8 + [32]))
	*($6 + [112]) = [-1]
	*($6 + [108]) = $1
	*($6 + [116]) = [-1]
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [108])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $14(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL $81(*(($4 + [32])))
	
.LABEL $label$10
	CALL $81($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $32(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1168])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1168])
	CALL memcpy($2, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [1168])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}