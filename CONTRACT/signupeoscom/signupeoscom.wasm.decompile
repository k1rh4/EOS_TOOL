(data (i32.const 4) "\90i\00\00")
(data (i32.const 16) "\00")
(data (i32.const 288) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 352) "invalid symbol name\00")
(data (i32.const 384) "unexpected asset symbol input\00")
(data (i32.const 416) "invalid sell\00")
(data (i32.const 432) "invalid conversion\00")
(data (i32.const 464) "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\00")
(data (i32.const 528) "EOS\00")
(data (i32.const 544) "PUB_R1_\00")
(data (i32.const 560) "unrecognized public key format\00")
(data (i32.const 592) "invalid base-58 value\00")
(data (i32.const 624) "base-58 value is out of range\00")
(data (i32.const 656) "eosio\00")
(data (i32.const 672) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 736) "RAMCORE market not found\00")
(data (i32.const 768) "error reading iterator\00")
(data (i32.const 800) "read\00")
(data (i32.const 816) "onerror\00")
(data (i32.const 832) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 896) "transfer\00")
(data (i32.const 912) "eosio.token\00")
(data (i32.const 928) "cannot pass end iterator to erase\00")
(data (i32.const 976) "cannot increment end iterator\00")
(data (i32.const 1008) "object passed to erase is not in multi_index\00")
(data (i32.const 1056) "cannot erase objects in table of another contract\00")
(data (i32.const 1120) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1184) "get\00")
(data (i32.const 1200) "unexpected error in fixed_key constructor\00")
(data (i32.const 1248) "cannot create objects in table of another contract\00")
(data (i32.const 1312) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1376) "write\00")
(data (i32.const 1392) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1456) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1504) "undefinedeos\00")
(data (i32.const 1520) "Invalid token transfer\00")
(data (i32.const 1552) "Quantity must be positive\00")
(data (i32.const 1584) "unable to find secondary key\00")
(data (i32.const 1616) "Incorrect memo length\00")
(data (i32.const 1648) "Incorrect memo format\00")
(data (i32.const 1680) "attempt to add asset with different symbol\00")
(data (i32.const 1728) "addition underflow\00")
(data (i32.const 1760) "addition overflow\00")
(data (i32.const 1792) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1856) "Not enough money\00")
(data (i32.const 1888) "attempt to subtract asset with different symbol\00")
(data (i32.const 1936) "subtraction underflow\00")
(data (i32.const 1968) "subtraction overflow\00")
(data (i32.const 2000) "active\00")
(data (i32.const 2016) "invite rewards\00")
(data (i32.const 2032) "eosregisterr\00")
(data (i32.const 2048) "charge fees\00")
(data (i32.const 2064) "remain balance\00")
(data (i32.const 2080) "Must be CORE_SYMBOL\00")
(data (i32.const 10496) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10592) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 10608) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 10624) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx256_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i32 i64) (result i32)))
(import "env" "db_idx256_lowerbound" (func $fimport$8 (param i64 i64 i64 i32 i32 i32) (result i32)))
(import "env" "db_idx256_remove" (func $fimport$9 (param i32)))
(import "env" "db_idx256_store" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$11 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$12 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$14 (param i32)))
(import "env" "db_idx64_store" (func $fimport$15 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "db_store_i64" (func $fimport$20 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$21 (param i32 i32)))
(import "env" "is_account" (func $fimport$22 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$27 (param i64)))
(import "env" "require_auth2" (func $fimport$28 (param i64 i64)))
(import "env" "send_inline" (func $fimport$29 (param i32 i32)))
(import "env" "sha256" (func $fimport$30 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN11eosiosystem14exchange_state19convert_to_exchangeERNS0_9connectorEN5eosio5assetE" (func $5))
(export "_ZN11eosiosystem14exchange_state21convert_from_exchangeERNS0_9connectorEN5eosio5assetE" (func $6))
(export "_ZN11eosiosystem14exchange_state7convertEN5eosio5assetENS1_11symbol_typeE" (func $7))
(export "_ZN6abieos14get_base58_mapEv" (func $8))
(export "_ZN6abieos20string_to_public_keyENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE" (func $9))
(export "_ZN5eosio11buyrambytesEm" (func $11))
(export "apply" (func $16))
(export "malloc" (func $61))
(export "free" (func $64))
(export "pow" (func $74))
(export "sqrt" (func $75))
(export "fabs" (func $76))
(export "scalbn" (func $77))
(export "memcmp" (func $78))
(export "strlen" (func $79))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $80 $17 $19 $21)



int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = (*([0] + [4]) - [96])
	$7 = $2
	*([0] + [4]) = $2
	$3 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($4)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($2 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $4)
	
.LABEL $label$1
	*((($2 = CALL memset($7, [0], [48])) + [24])) = (int_64)1397703940
	*($2 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$6 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	CALL eosio_assert($7, [352])
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	*($2 + [52]) = $5
	*($2 + [48]) = $5
	*($2 + [56]) = ($5 + $4)
	CALL $38(($2 + [48]), $2)
	if ( ($4 <= [513]) ){ goto $label$9 }
	CALL free($5)
	
.LABEL $label$9
	*((($2 + [48]) + [24])) = *(($2 + [24]))
	*((($2 + [48]) + [16])) = *(($2 + [16]))
	*((($2 + [48]) + [8])) = *(($2 + [8]))
	*($2 + [48]) = *($2)
	CALL $72((($2 + [48]) + [32]), ($2 + [32]))
	$1 = ($0 + int_32($3 >> [1]))
	if ( (($3 & [1]) == 0) ){ goto $label$10 }
	$8 = *((*($1) + $8))
	
.LABEL $label$10
	CALL void $1((int_32 ($2 + [48])), (int_32 $8))
	if ( ((*((($2 + [48]) + [32])) & [1]) == 0) ){ goto $label$11 }
	CALL $66(*(($2 + [88])))
	
.LABEL $label$11
	if ( ((*(($2 + [32])) & [1]) == 0) ){ goto $label$12 }
	CALL $66(*(($2 + [40])))
	
.LABEL $label$12
	*([0] + [4]) = ($2 + [96])
	return [1]
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $63($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10496])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	CALL require_auth($1)
	$5 = ($0 + [16])
	*($11 + [32]) = $5
	$7 = *($2 + [24])
	$8 = *($2 + [16])
	$9 = *($2 + [8])
	$10 = *($2)
	CALL eosio_assert([1], [1200])
	*($11 + [8]) = $10
	*($11) = $9
	CALL eosio_assert([1], [1200])
	*(($11 + [24])) = $8
	*($11 + [16]) = $7
	CALL $32(($11 + [40]), ($11 + [32]), $11)
	$6 = *($11 + [44])
	if ( ($6 == 0) ){ goto $label$2 }
	$9 = *(($6 + [40]))
	$10 = *(($6 + [32]))
	$7 = *(($6 + [24]))
	$8 = *($6 + [16])
	CALL eosio_assert([1], [1200])
	CALL eosio_assert([1], [1200])
	if ( ((int_64)((int_64)((int_64)$7 ^ (int_64)*($11)) | (int_64)((int_64)$8 ^ (int_64)*($11 + [8]))) != (int_64)0) ){ goto $label$2 }
	if ( ((int_64)((int_64)((int_64)*(($11 + [16])) ^ (int_64)$9) | (int_64)((int_64)*(($11 + [24])) ^ (int_64)$10)) != (int_64)0) ){ goto $label$2 }
	if ( *($11 + [44]) ){ goto $label$1 }
	
.LABEL $label$2
	*($11 + [4]) = $2
	*($11) = $0
	*($11 + [8]) = $3
	*($11 + [12]) = $4
	CALL $33(($11 + [40]), $5, $1, $11)
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [48])
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

void .FUNC $66 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10588])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $40($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $70($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $65($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $70($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $66($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $67($7)
	return (unreachable)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $65($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $67 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$7 = (*($0 + [4]) + [8])
	*($0 + [4]) = $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $7) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$7 = (*($0 + [4]) + [4])
	*($0 + [4]) = $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $7) > (uint_32)[31]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [32])
	$7 = (*($0 + [4]) + [32])
	*($0 + [4]) = $7
	$3 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *(($0 + [8]))), [1184])
	$4 = ($0 + [4])
	$7 = *($4)
	$6 = *($7)
	$7 = ($7 + [1])
	*($4) = $7
	$3 = ($3 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($6 & [127]) << $3)) | (int_64)$5)
	$3 = ($3 + [7])
	if ( uint_32($6 >> [7]) ){ goto $label$1 }
	*(($1 + [48])) = $5
	$4 = ($1 + [52])
	$6 = [0]
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$2:
	CALL eosio_assert(((int_32)*($2) != (int_32)$7), [800])
	CALL memcpy(($4 + $6), *($3), [1])
	$7 = (*($3) + [1])
	*($3) = $7
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[33]) ){ goto $label$2 }
	$3 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(($7 <= *($2)), [1184])
	$7 = *($4)
	$6 = *($7)
	$7 = ($7 + [1])
	*($4) = $7
	$3 = ($3 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($6 & [127]) << $3)) | (int_64)$5)
	$3 = ($3 + [7])
	if ( uint_32($6 >> [7]) ){ goto $label$3 }
	*(($1 + [88])) = $5
	$4 = ($1 + [92])
	$6 = [0]
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$4:
	CALL eosio_assert(((int_32)*($2) != (int_32)$7), [800])
	CALL memcpy(($4 + $6), *($3), [1])
	$7 = (*($3) + [1])
	*($3) = $7
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[33]) ){ goto $label$4 }
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = *($0)
	$3 = *($4 + [4])
	$5 = *($3 + [136])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = *($4)
	*(($6 + [24])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6) = (int_64)0
	$5 = CALL db_idx256_find_primary(*($5), *($5 + [8]), (int_64)-6497942746098040832, $6, [2], *($3))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx256_remove($5)
	
.LABEL $label$1
	$5 = *($0)
	$4 = *($5 + [4])
	$0 = *(($4 + [140]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = *($5)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6497942746098040831, $6, *($4))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $21 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [48])
	*([0] + [4]) = $14
	*($14 + [32]) = [0]
	*($14 + [24]) = (int_64)0
	$2 = ($0 + [16])
	*($14 + [16]) = $2
	*($14 + [40]) = (int_64)0
	CALL $23(($14 + [8]), ($14 + [16]), ($14 + [40]))
	$12 = *($14 + [12])
	if ( ($12 == 0) ){ goto $label$1 }
	$13 = ($14 + [32])
	
.LOOP $label$3:
	if ( ((uint_32)*($12 + [8]) >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$2 }
	$5 = *($14 + [28])
	if ( ((int_32)$5 == (int_32)*($13)) ){ goto $label$5 }
	*($14 + [28]) = (CALL memcpy($5, $12, [128]) + [128])
	goto $label$4 
	
.LABEL $label$5
	CALL $24(($14 + [24]), $12)
	
.LABEL $label$4
	CALL $25(($14 + [8]))
	$12 = *($14 + [12])
	if ( $12 ){ goto $label$3 }
	
.LABEL $label$2
	$10 = *($14 + [28])
	$11 = *($14 + [24])
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$6 }
	$6 = ($0 + [40])
	$7 = ($0 + [44])
	$8 = ($0 + [24])
	$9 = ($0 + [16])
	
.LOOP $label$7:
	$3 = *($11)
	$4 = *($6)
	$13 = *($7)
	if ( ((int_32)$13 == (int_32)$4) ){ goto $label$8 }
	$12 = ($13 + [-24])
	$0 = ([0] - $4)
	
.LOOP $label$9:
	if ( ((int_64)*(*($12)) == (int_64)$3) ){ goto $label$8 }
	$13 = $12
	$5 = ($12 + [-24])
	$12 = $5
	if ( ((int_32)($5 + $0) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_32)$13 == (int_32)$4) ){ goto $label$11 }
	$12 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [128]) == (int_32)$2), [672])
	goto $label$10 
	
.LABEL $label$11
	$12 = [0]
	$5 = CALL db_find_i64(*($9), *($8), (int_64)-6497942746098040832, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$12 = CALL $26($2, $5)
	CALL eosio_assert(((int_32)*($12 + [128]) == (int_32)$2), [672])
	
.LABEL $label$10
	$5 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($5, [928])
	CALL eosio_assert($5, [976])
	$5 = CALL db_next_i64(*($12 + [132]), ($14 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	CALL $26($2, $5)
	
.LABEL $label$12
	CALL $27($2, $12)
	$11 = ($11 + [128])
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$7 }
	$10 = *($14 + [24])
	
.LABEL $label$6
	if ( ($10 == 0) ){ goto $label$1 }
	*($14 + [28]) = $10
	CALL $66($10)
	
.LABEL $label$1
	*([0] + [4]) = ($14 + [48])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [576])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*((($7 + [112]) + [40])) = (int_64)0
	*(($7 + [144])) = (int_64)0
	*((($7 + [112]) + [24])) = (int_64)0
	*($7 + [128]) = (int_64)0
	*($7 + [112]) = (int_64)0
	CALL memset(($7 + [164]), [0], [36])
	*($7 + [160]) = [0]
	CALL memset(($7 + [204]), [0], [36])
	*($7 + [200]) = [0]
	*($7 + [508]) = $5
	*($7 + [504]) = $5
	*($7 + [512]) = ($5 + $3)
	*($7 + [424]) = ($7 + [504])
	*($7 + [464]) = ($7 + [112])
	CALL $31(($7 + [464]), ($7 + [424]))
	$1 = (($7 + [112]) + [16])
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($5)
	
.LABEL $label$4
	*(($5 = (($7 + [320]) + [24]))) = *(($1 + [24]))
	*(($3 = (($7 + [320]) + [16]))) = *(($1 + [16]))
	*($7 + [332]) = *(($1 + [12]))
	*($7 + [328]) = *(($1 + [8]))
	$4 = *($7 + [112])
	*($7 + [320]) = *($1)
	CALL memcpy(($7 + [280]), ($7 + [160]), [40])
	CALL memcpy(($7 + [240]), ($7 + [200]), [40])
	CALL memcpy(($7 + [424]), ($7 + [240]), [40])
	CALL memcpy(($7 + [384]), ($7 + [280]), [40])
	*((($7 + [352]) + [24])) = *($5)
	*((($7 + [352]) + [16])) = *($3)
	*($7 + [360]) = *($7 + [328])
	*($7 + [352]) = *($7 + [320])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	*(($5 = (($7 + [544]) + [24]))) = *((($7 + [352]) + [24]))
	*(($3 = (($7 + [544]) + [16]))) = *((($7 + [352]) + [16]))
	*($7 + [552]) = *($7 + [360])
	*($7 + [544]) = *($7 + [352])
	CALL memcpy(($7 + [504]), ($7 + [384]), [40])
	CALL memcpy(($7 + [464]), ($7 + [424]), [40])
	*((($7 + [80]) + [24])) = *($5)
	*((($7 + [80]) + [16])) = *($3)
	*($7 + [88]) = *($7 + [552])
	*($7 + [80]) = *($7 + [544])
	CALL memcpy(($7 + [40]), ($7 + [504]), [40])
	$7 = CALL memcpy($7, ($7 + [464]), [40])
	CALL void $1((int_32 $4), (int_64 ($7 + [80])), (int_32 ($7 + [40])), (int_32 $7), (int_32 $6))
	*([0] + [4]) = ($7 + [576])
	return [1]
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-6497942746098040831, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [128]) == (int_32)$4), [672])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $26($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)-6497942746098040832, $5))
	CALL eosio_assert(((int_32)*($2 + [128]) == (int_32)$4), [672])
	
.LABEL $label$4
	*(($2 + [140])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [800])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [976])
	$6 = *($0 + [4])
	$7 = *(($6 + [140]))
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-6497942746098040831, ($9 + [8]), *($6))
	*((*(($0 + [4])) + [140])) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [128]) == (int_32)$2), [672])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $26($2, CALL $fimport$5(*($2), *($2 + [8]), (int_64)-6497942746098040832, $3))
	CALL eosio_assert(((int_32)*($7 + [128]) == (int_32)$2), [672])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [140])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [7])
	$7 = ($2 + [1])
	if ( ((uint_32)$7 >= (uint_32)[33554432]) ){ goto $label$3 }
	$4 = [33554431]
	$3 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($3 >> [7]) > (uint_32)[16777214]) ){ goto $label$5 }
	$4 = int_32($3 >> [6])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[33554432]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $65(($4 << [7]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $71($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$6 = ($6 - $5)
	$2 = CALL memcpy(($7 + ($2 << [7])), $1, [128])
	$1 = ($2 - $6)
	$4 = ($7 + ($4 << [7]))
	$7 = ($2 + [128])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $66($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1056])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1120])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $66($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $66($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [132]))
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [8]) = $9
	CALL $28(($9 + [8]), ($0 + [36]), ($0 + [37]))
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $65([144])) + [88]) = [0]
	*($6 + [48]) = [0]
	*($6 + [128]) = $0
	CALL $29(($8 + [32]), $6)
	*($6 + [136]) = [-1]
	*($6 + [132]) = $1
	*($6 + [140]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [132])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $30(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $66($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [10608])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [10592]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [10624]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1376])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1376])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1376])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $41($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1376])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1376])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $50(CALL $49($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $65($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $66($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $69($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $80 ()
{
	(unreachable)
}

void .FUNC $43 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	$3 = *($1 + [8])
	*($1 + [8]) = [0]
	$4 = *($1)
	*($1 + [4]) = [0]
	*($8 + [96]) = $4
	*($8 + [104]) = $3
	*($1) = [0]
	*($8) = *($2)
	*($8 + [8]) = *($2 + [8])
	*($8 + [16]) = *($2 + [16])
	$1 = ($2 + [20])
	*(($8 + [20])) = *($1)
	$3 = ($2 + [24])
	*(($8 + [24])) = *($3)
	*($3) = [0]
	$3 = ($2 + [28])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [28])) = $5
	*($1) = [0]
	$1 = ($2 + [32])
	*(($8 + [32])) = *($1)
	$3 = ($2 + [36])
	*(($8 + [36])) = *($3)
	*($3) = [0]
	$3 = ($2 + [40])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [40])) = $5
	*($1) = [0]
	$1 = ($2 + [44])
	*(($8 + [44])) = *($1)
	$3 = ($2 + [48])
	*(($8 + [48])) = *($3)
	*($3) = [0]
	$3 = ($2 + [52])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [52])) = $5
	*($1) = [0]
	*($8 + [56]) = *($2 + [56])
	$1 = ($2 + [60])
	*(($8 + [60])) = *($1)
	$3 = ($2 + [64])
	*(($8 + [64])) = *($3)
	*($3) = [0]
	$3 = ($2 + [68])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [68])) = $5
	*($1) = [0]
	$3 = ($2 + [72])
	*(($1 = ($8 + [72]))) = *($3)
	$5 = ($2 + [76])
	*(($8 + [76])) = *($5)
	*($5) = [0]
	$5 = ($2 + [80])
	$6 = *($5)
	*($5) = [0]
	*(($8 + [80])) = $6
	*($3) = [0]
	$5 = ($2 + [84])
	*(($3 = ($8 + [84]))) = *($5)
	$6 = ($2 + [88])
	*(($7 = ($8 + [88]))) = *($6)
	*($6) = [0]
	$2 = ($2 + [92])
	$6 = *($2)
	*($2) = [0]
	*(($8 + [92])) = $6
	*($5) = [0]
	CALL $54($0, (int_64)-7297973096368160768, ($8 + [96]), $8)
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$1 }
	*($7) = $2
	CALL $66($2)
	
.LABEL $label$1
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$2 }
	*(($8 + [76])) = $2
	CALL $66($2)
	
.LABEL $label$2
	$2 = *(($8 + [60]))
	if ( ($2 == 0) ){ goto $label$3 }
	*(($8 + [64])) = $2
	CALL $66($2)
	
.LABEL $label$3
	$2 = *(($8 + [44]))
	if ( ($2 == 0) ){ goto $label$4 }
	*(($8 + [48])) = $2
	CALL $66($2)
	
.LABEL $label$4
	$2 = *(($8 + [32]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($8 + [36])) = $2
	CALL $66($2)
	
.LABEL $label$5
	$2 = *(($8 + [20]))
	if ( ($2 == 0) ){ goto $label$6 }
	*(($8 + [24])) = $2
	CALL $66($2)
	
.LABEL $label$6
	$2 = *($8 + [96])
	if ( ($2 == 0) ){ goto $label$7 }
	*($8 + [100]) = $2
	CALL $66($2)
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [112])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 + [8])) = (int_64)0
	*($0 + [4]) = [0]
	*($0) = *($1)
	$2 = (*(($1 + [8])) - *($1 + [4]))
	$3 = ((int_32)$2 / (int_32)[44])
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[97612894]) ){ goto $label$3 }
	$2 = CALL $65($2)
	*(($0 + [4])) = $2
	*(($0 + [12])) = ($2 + ((int_32)$3 * (int_32)[44]))
	*(($3 = ($0 + [8]))) = $2
	$4 = *(($1 + [4]))
	$5 = (*(($1 + [8])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[44]) * (int_32)[44]))
	
.LABEL $label$4
	*($0 + [16 align=4]) = (int_64)0
	*(($0 + [24])) = [0]
	$2 = (*(($1 + [20])) - *($1 + [16]))
	$3 = ((int_32)$2 / (int_32)[24])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$2 }
	$2 = CALL $65($2)
	*(($0 + [16])) = $2
	*(($0 + [24])) = ($2 + ((int_32)$3 * (int_32)[24]))
	*(($3 = ($0 + [20]))) = $2
	$4 = *(($1 + [16]))
	$5 = (*(($1 + [20])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$5
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$2 = (*(($1 + [32])) - *($1 + [28]))
	$3 = int_32($2 >> [3])
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$2 = CALL $65($2)
	*(($0 + [28])) = $2
	*(($0 + [36])) = ($2 + ($3 << [3]))
	*(($3 = ($0 + [32]))) = $2
	$5 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $5, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$6
	return $0
	
.LABEL $label$3
	CALL $71(($0 + [4]))
	
.LABEL $label$2
	CALL $71(($0 + [16]))
	
.LABEL $label$1
	CALL $71(($0 + [28]))
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $65($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $71($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $66($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1184])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $41($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [800])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1376])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1376])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1376])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1376])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $51(*($1), ($0 + [32]))
}

void .FUNC $46 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $65($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*((($9 + [24]) + [32])) = [0]
	*((($9 + [24]) + [36])) = [0]
	$8 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($9 + [52])
	
.LOOP $label$4:
	$8 = ($8 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($8 == 0) ){ goto $label$6 }
	CALL $41($2, $8)
	$2 = *(($9 + [56]))
	$8 = *(($9 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$8 = [0]
	
.LABEL $label$5
	*($9 + [84]) = $8
	*($9 + [80]) = $8
	*($9 + [88]) = $2
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $47(($9 + [72]), ($9 + [64]))
	CALL $48(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [84]) = $8
	CALL $66($8)
	
.LABEL $label$7
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($9 + [56])) = $8
	CALL $66($8)
	
.LABEL $label$8
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$9 }
	*(($9 + [44])) = $8
	CALL $66($8)
	
.LABEL $label$9
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*($9 + [12]) = $8
	CALL $66($8)
	
.LABEL $label$10
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $71(($9 + [8]))
}

void .FUNC $45 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $65($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*(($8 = ($9 + [56]))) = [0]
	*(($9 + [60])) = [0]
	CALL $41(($9 + [52]), [49])
	$8 = *($8)
	$2 = *($9 + [52])
	*($9 + [84]) = $2
	*($9 + [80]) = $2
	*($9 + [88]) = $8
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $52(($9 + [72]), ($9 + [64]))
	CALL $48(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [84]) = $8
	CALL $66($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $66($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $66($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $66($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $71(($9 + [8]))
}

void .FUNC $44 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $65($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*(($8 = (($9 + [24]) + [32]))) = [0]
	*(($9 + [60])) = [0]
	CALL $41(($9 + [52]), [32])
	$8 = *($8)
	$2 = *($9 + [52])
	*($9 + [84]) = $2
	*($9 + [80]) = $2
	*($9 + [88]) = $8
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $53(($9 + [72]), ($9 + [64]))
	CALL $48(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [84]) = $8
	CALL $66($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $66($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $66($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $66($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $71(($9 + [8]))
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $65($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1376])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1376])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $65(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $66($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1376])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[3]), [1376])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, [4])
	$6 = (*($4) + [4])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[1]), [1376])
	CALL memcpy(*($4), ($7 + [4]), [2])
	$6 = (*($4) + [2])
	*($4) = $6
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $71 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZN6abieos14get_base58_mapEv (int_32 $0)
{
	int_32 $1
	if ( *([0] + [16]) ){ goto $label$1 }
	$1 = [-256]
	
.LOOP $label$2:
	*(($1 + [288])) = [255]
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$2 }
	$1 = [0]
	
.LOOP $label$3:
	*((*(($1 + [464])) + [32])) = $1
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[59]) ){ goto $label$3 }
	*([0] + [16]) = [1]
	
.LABEL $label$1
	CALL memcpy($0, [32], [256])
}

void .FUNC _ZN6abieos20string_to_public_keyENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	$2 = *($1 + [4])
	if ( ($2 <= [3]) ){ goto $label$2 }
	$1 = *($1)
	if ( ((int_32)CALL strlen([528]) != (int_32)[3]) ){ goto $label$4 }
	if ( (CALL memcmp($1, [528], [3]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($2 <= [7]) ){ goto $label$2 }
	if ( ((int_32)CALL strlen([544]) != (int_32)[7]) ){ goto $label$2 }
	if ( CALL memcmp($1, [544], [7]) ){ goto $label$2 }
	*($3 + [36]) = ($2 + [-7])
	*($3 + [32]) = ($1 + [7])
	*($3 + [16 align=4]) = *($3 + [32])
	CALL $10(($3 + [40]), ($3 + [16]))
	*($0) = [1]
	CALL memcpy(CALL $fimport$25(($0 + [1]), [0], [33]), ($3 + [40]), [33])
	goto $label$1 
	
.LABEL $label$3
	*($3 + [28]) = ($2 + [-3])
	*($3 + [24]) = ($1 + [3])
	*($3 + [8 align=4]) = *($3 + [24])
	CALL $10(($3 + [40]), ($3 + [8]))
	*($0) = [0]
	CALL memcpy(CALL $fimport$25(($0 + [1]), [0], [33]), ($3 + [40]), [33])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [560])
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [80])
	(unreachable)
}

void .FUNC _ZN11eosiosystem14exchange_state21convert_from_exchangeERNS0_9connectorEN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	float_64 $5
	int_64 $6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($1 + [8])), [384])
	$4 = *($2)
	$6 = *($3)
	$5 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 (int_64))(*($1) - $6))) + (float_64)(float_64)1), ((float_64)(float_64)1e3 / (float_64)*($2 + [16])))
	*($1) = (int_64))(*($1) - $6)
	$6 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $4) * (float_64)((float_64)$5 + (float_64)(float_64)-1)))
	*($0) = $6
	*($2) = (int_64))(*($2) - $6)
	$4 = *($2 + [8])
	*($0 + [8]) = $4
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [288])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	CALL eosio_assert($1, [352])
}

void .FUNC _ZN11eosiosystem14exchange_state7convertEN5eosio5assetENS1_11symbol_typeE (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	int_64 $5
	float_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	$5 = *(($1 + [48]))
	$7 = *(($1 + [24]))
	$4 = *($2 + [8])
	if ( ((int_64)$4 != (int_64)*($1 + [8])) ){ goto $label$10 }
	if ( ((int_64)$7 != (int_64)$3) ){ goto $label$9 }
	$9 = ($2 + [8])
	*(($8 = (($10 + [80]) + [8]))) = *($9)
	$7 = *($2)
	*((($10 + [16]) + [12])) = *((($10 + [80]) + [12]))
	*((($10 + [16]) + [8])) = *($8)
	*($10 + [80]) = $7
	*($10 + [20]) = *($10 + [84])
	*($10 + [16]) = *($10 + [80])
	CALL _ZN11eosiosystem14exchange_state21convert_from_exchangeERNS0_9connectorEN5eosio5assetE(($10 + [96]), $1, ($1 + [16]), ($10 + [16]))
	*($9) = *((($10 + [96]) + [8]))
	*($2) = *($10 + [96])
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$4 != (int_64)$7) ){ goto $label$8 }
	$4 = *($1)
	$8 = ($1 + [16])
	$7 = *($2)
	$6 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $7) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$7))) + (float_64)(float_64)1), ((float_64)*(($1 + [32])) / (float_64)(float_64)1e3))
	*($8) = ((int_64)$7 + (int_64)*($8))
	$4 = (Rounds 0)(!(float_64)((float_64)(CASTING float_64)(int_64 $4) * (float_64)(float_64))((float_64)1 - $6))
	*($1) = ((int_64)$4) + (int_64)*($1))
	$5 = *(($1 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [288])
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$11 }
	goto $label$6 
	
.LABEL $label$9
	if ( ((int_64)$5 != (int_64)$3) ){ goto $label$5 }
	$9 = ($2 + [8])
	*(($8 = (($10 + [64]) + [8]))) = *($9)
	$7 = *($2)
	*((($10 + [32]) + [12])) = *((($10 + [64]) + [12]))
	*((($10 + [32]) + [8])) = *($8)
	*($10 + [64]) = $7
	*($10 + [36]) = *($10 + [68])
	*($10 + [32]) = *($10 + [64])
	CALL _ZN11eosiosystem14exchange_state21convert_from_exchangeERNS0_9connectorEN5eosio5assetE(($10 + [96]), $1, ($1 + [40]), ($10 + [32]))
	*($9) = *((($10 + [96]) + [8]))
	*($2) = *($10 + [96])
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$4 != (int_64)$5) ){ goto $label$4 }
	$4 = *($1)
	$8 = ($1 + [40])
	$7 = *($2)
	$6 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $7) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$7))) + (float_64)(float_64)1), ((float_64)*(($1 + [56])) / (float_64)(float_64)1e3))
	*($8) = ((int_64)$7 + (int_64)*($8))
	$4 = (Rounds 0)(!(float_64)((float_64)(CASTING float_64)(int_64 $4) * (float_64)(float_64))((float_64)1 - $6))
	*($1) = ((int_64)$4) + (int_64)*($1))
	$5 = *(($1 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [288])
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$14 }
	goto $label$2 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [352])
	*(($2 + [8])) = $5
	*($2) = $4
	goto $label$1 
	
.LABEL $label$5
	CALL eosio_assert([0], [432])
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [416])
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	
.LABEL $label$2
	CALL eosio_assert($9, [352])
	*(($2 + [8])) = $5
	*($2) = $4
	
.LABEL $label$1
	$8 = ($2 + [8])
	if ( ((int_64)*($8) != (int_64)$3) ){ goto $label$18 }
	*($0) = *($2)
	*(($0 + [8])) = *($8)
	goto $label$17 
	
.LABEL $label$18
	$7 = *($8)
	*((($10 + [48]) + [8])) = $7
	$4 = *($2)
	*(($10 + [8])) = $7
	*($10 + [48]) = $4
	*($10 + [4]) = *($10 + [52])
	*($10) = *($10 + [48])
	CALL _ZN11eosiosystem14exchange_state7convertEN5eosio5assetENS1_11symbol_typeE($0, $1, $10, $3)
	
.LABEL $label$17
	*([0] + [4]) = ($10 + [112])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN11eosiosystem14exchange_state19convert_to_exchangeERNS0_9connectorEN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	float_64 $5
	int_64 $6
	$4 = *($1)
	$6 = *($3)
	$5 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 ((int_64)$6 + (int_64)*($2)))) + (float_64)(float_64)1), ((float_64)*($2 + [16]) / (float_64)(float_64)1e3))
	*($2) = ((int_64)$6 + (int_64)*($2))
	$6 = (Rounds 0)(!(float_64)((float_64)(CASTING float_64)(int_64 $4) * (float_64)(float_64))((float_64)1 - $5))
	*($0) = $6)
	$4 = *($1 + [8])
	*($0 + [8]) = $4
	*($1) = ((int_64)$6 + (int_64)*($1))
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [288])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$2 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [352])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0 + [4])
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [32]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [40]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [48]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [56]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	*($1 + [68]) = *(*($0 + [8]))
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $65(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $71($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $66($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $66($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [112])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [816]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [656]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [832])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [896]
	$9 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$18
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [912]
	$9 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$28 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$24
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$23 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$29 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [896]
	$9 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$35 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$3 = ($3 + [165])
	goto $label$33 
	
.LABEL $label$35
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$31
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$30 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$29
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [816]
	$9 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$41 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$3 = ($3 + [165])
	goto $label$39 
	
.LABEL $label$41
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$37
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$36 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($11 + [80])) = $0
	*(($11 + [88])) = (int_64)-1
	*(($11 + [96])) = [0]
	*(($11 + [100])) = [0]
	*($11 + [64]) = [3600]
	*($11 + [56]) = $0
	*($11 + [72]) = $0
	*(($11 + [104])) = [0]
	*(($11 + [108])) = [0]
	if ( ((int_64)$2 == (int_64)-5920697278157640192) ){ goto $label$44 }
	if ( ((int_64)$2 == (int_64)4923678677850772624) ){ goto $label$43 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$42 }
	*($11 + [52]) = [0]
	*($11 + [48]) = [1]
	*($11 + [8 align=4]) = *($11 + [48])
	CALL $18(($11 + [56]), ($11 + [8]))
	goto $label$42 
	
.LABEL $label$44
	*($11 + [44]) = [0]
	*($11 + [40]) = [2]
	*($11 + [16 align=4]) = *($11 + [40])
	CALL $20(($11 + [56]), ($11 + [16]))
	goto $label$42 
	
.LABEL $label$43
	*($11 + [36]) = [0]
	*($11 + [32]) = [3]
	*($11 + [24 align=4]) = *($11 + [32])
	CALL $22(($11 + [56]), ($11 + [24]))
	
.LABEL $label$42
	$4 = *(($11 + [96]))
	if ( ($4 == 0) ){ goto $label$14 }
	$5 = ($11 + [100])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$46 }
	
.LOOP $label$47:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$48 }
	CALL $66($3)
	
.LABEL $label$48
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$47 }
	$6 = *(($11 + [96]))
	goto $label$45 
	
.LABEL $label$46
	$6 = $4
	
.LABEL $label$45
	*($5) = $4
	CALL $66($6)
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [112])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_32 $21
	$21 = (*([0] + [4]) - [864])
	*([0] + [4]) = $21
	$14 = *($0)
	$19 = *($1)
	if ( ((int_64)$19 == (int_64)$14) ){ goto $label$4 }
	if ( ((int_64)*($1 + [8]) != (int_64)$14) ){ goto $label$4 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1504]
	$15 = (int_64)0
	
.LOOP $label$5:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$6 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$18 = ($18 + [165])
	goto $label$7 
	
.LABEL $label$8
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($18 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$6
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$5 }
	if ( ((int_64)$19 == (int_64)$15) ){ goto $label$4 }
	$12 = ($1 + [24])
	CALL eosio_assert(((int_64)*($12) == (int_64)1397703940), [2080])
	$18 = [0]
	if ( ((uint_64)((int_64)*($1 + [16]) + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$9 }
	$14 = (uint_64)*($12) >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$18 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$18 = [0]
	
.LABEL $label$9
	CALL eosio_assert($18, [1520])
	CALL eosio_assert(((int_64)*(($1 + [16])) > (int_64)0), [1552])
	$12 = *($1 + [32])
	if ( ($12 & [1]) ){ goto $label$15 }
	$12 = uint_32($12 >> [1])
	goto $label$14 
	
.LABEL $label$15
	$12 = *(($1 + [36]))
	
.LABEL $label$14
	$17 = ($1 + [32])
	if ( ((int_32)$12 != (int_32)[40]) ){ goto $label$17 }
	CALL $73(($21 + [544]), $17, [28], [12], $17)
	$3 = (*($21 + [544]) & [1])
	$4 = *($21 + [552])
	$12 = ( $4 ? (($21 + [544]) | [1]) : $3 )
	$18 = [-1]
	
.LOOP $label$18:
	$11 = ($12 + $18)
	$6 = ($18 + [1])
	$18 = $6
	if ( *(($11 + [1])) ){ goto $label$18 }
	$15 = (CASTING uint_64)(uint_32 $6)
	$14 = (int_64)0
	$13 = (int_64)59
	$2 = (int_64)0
	
.LOOP $label$19:
	$16 = (int_64)0
	if ( ((uint_64)$14 >= (uint_64)$15) ){ goto $label$20 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$18 = ($18 + [165])
	goto $label$21 
	
.LABEL $label$22
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$24 }
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$23 
	
.LABEL $label$24
	$16 = ((int_64)$16 & (int_64)15)
	
.LABEL $label$23
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$2 = ((int_64)$16 | (int_64)$2)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$19 }
	if ( ($3 == 0) ){ goto $label$16 }
	CALL $66($4)
	goto $label$16 
	
.LABEL $label$17
	
.LABEL $label$16
	$18 = [0]
	CALL $73(($21 + [640]), $17, [0], [28], $17)
	CALL sha256(( *($21 + [648]) ? (($21 + [640]) | [1]) : (*($21 + [640]) & [1]) ), [28], ($21 + [656]))
	$3 = ($0 + [16])
	*($21 + [632]) = $3
	$14 = *($21 + [680])
	$13 = *($21 + [672])
	$16 = *($21 + [664])
	$15 = *($21 + [656])
	CALL eosio_assert([1], [1200])
	*($21 + [552]) = $15
	*($21 + [544]) = $16
	CALL eosio_assert([1], [1200])
	*((($21 + [544]) + [24])) = $13
	*($21 + [560]) = $14
	CALL $32(($21 + [800]), ($21 + [632]), ($21 + [544]))
	$12 = *($21 + [804])
	if ( ($12 == 0) ){ goto $label$25 }
	$16 = *(($12 + [40]))
	$15 = *(($12 + [32]))
	$14 = *(($12 + [24]))
	$13 = *($12 + [16])
	CALL eosio_assert([1], [1200])
	CALL eosio_assert([1], [1200])
	if ( ((int_64)((int_64)((int_64)$14 ^ (int_64)*($21 + [544])) | (int_64)((int_64)$13 ^ (int_64)*($21 + [552]))) != (int_64)0) ){ goto $label$25 }
	if ( ((int_64)((int_64)((int_64)*(($21 + [560])) ^ (int_64)$16) | (int_64)((int_64)*(($21 + [568])) ^ (int_64)$15)) != (int_64)0) ){ goto $label$25 }
	$18 = *($21 + [804])
	
.LABEL $label$25
	if ( ($18 == 0) ){ goto $label$27 }
	$14 = *((($21 + [656]) + [24]))
	$13 = *(($21 + [672]))
	$16 = *($21 + [664])
	$15 = *($21 + [656])
	$4 = [1]
	CALL eosio_assert([1], [1200])
	*($21 + [808]) = $15
	*($21 + [800]) = $16
	CALL eosio_assert([1], [1200])
	*((($21 + [800]) + [24])) = $13
	*($21 + [816]) = $14
	CALL $32(($21 + [544]), ($21 + [632]), ($21 + [800]))
	$12 = [0]
	$18 = *($21 + [548])
	if ( ($18 == 0) ){ goto $label$28 }
	$16 = *(($18 + [40]))
	$15 = *(($18 + [32]))
	$14 = *(($18 + [24]))
	$13 = *($18 + [16])
	CALL eosio_assert([1], [1200])
	CALL eosio_assert([1], [1200])
	$12 = [0]
	if ( ((int_64)((int_64)((int_64)$14 ^ (int_64)*($21 + [800])) | (int_64)((int_64)$13 ^ (int_64)*($21 + [808]))) != (int_64)0) ){ goto $label$28 }
	$12 = [0]
	if ( ((int_64)((int_64)((int_64)*(($21 + [816])) ^ (int_64)$16) | (int_64)((int_64)*(($21 + [824])) ^ (int_64)$15)) != (int_64)0) ){ goto $label$28 }
	$12 = *($21 + [548])
	
.LABEL $label$28
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [1584])
	$5 = *($12)
	CALL memcpy(($21 + [544]), ($12 + [8]), [77])
	CALL memcpy(($21 + [504]), ($12 + [85]), [40])
	CALL memcpy(($21 + [728]), ($21 + [588]), [33])
	CALL memcpy(($21 + [688]), ($21 + [511]), [33])
	goto $label$26 
	
.LABEL $label$27
	$11 = *($17)
	$6 = ($11 & [1])
	if ( $6 ){ goto $label$30 }
	$18 = uint_32($11 >> [1])
	goto $label$29 
	
.LABEL $label$30
	$18 = *(($1 + [36]))
	
.LABEL $label$29
	$12 = [1]
	if ( ((int_32)$18 == (int_32)[120]) ){ goto $label$31 }
	if ( $6 ){ goto $label$33 }
	$12 = uint_32($11 >> [1])
	goto $label$32 
	
.LABEL $label$33
	$12 = *(($1 + [36]))
	
.LABEL $label$32
	$12 = ((int_32)$12 == (int_32)[66])
	
.LABEL $label$31
	CALL eosio_assert($12, [1616])
	$11 = (*($17) & [1])
	if ( $11 ){ goto $label$35 }
	$18 = ($17 + [1])
	goto $label$34 
	
.LABEL $label$35
	$18 = *(($1 + [40]))
	
.LABEL $label$34
	$12 = [1]
	if ( ((int_32)*($18 + [12]) == (int_32)[58]) ){ goto $label$36 }
	if ( $11 ){ goto $label$38 }
	$12 = ($17 + [1])
	goto $label$37 
	
.LABEL $label$38
	$12 = *(($1 + [40]))
	
.LABEL $label$37
	$12 = ((int_32)*($12 + [12]) == (int_32)[45])
	
.LABEL $label$36
	CALL eosio_assert($12, [1648])
	CALL $73(($21 + [504]), $17, [13], [53], $17)
	*($21 + [440]) = [0]
	*($21 + [432]) = (int_64)0
	$18 = (*($17) & [1])
	if ( $18 ){ goto $label$40 }
	$12 = ($17 + [1])
	goto $label$39 
	
.LABEL $label$40
	$12 = *(($1 + [40]))
	
.LABEL $label$39
	if ( ((int_32)*($12 + [66]) == (int_32)[58]) ){ goto $label$43 }
	if ( $18 ){ goto $label$45 }
	$12 = ($17 + [1])
	goto $label$44 
	
.LABEL $label$45
	$12 = *(($1 + [40]))
	
.LABEL $label$44
	if ( ((int_32)*($12 + [66]) != (int_32)[45]) ){ goto $label$42 }
	
.LABEL $label$43
	CALL $73(($21 + [544]), $17, [67], [53], $17)
	if ( (*($21 + [432]) & [1]) ){ goto $label$47 }
	*($21 + [432]) = [0]
	goto $label$46 
	
.LABEL $label$47
	*(*(($21 + [440]))) = [0]
	*($21 + [436]) = [0]
	
.LABEL $label$46
	CALL $70(($21 + [432]), [0])
	*((($21 + [432]) + [8])) = *((($21 + [544]) + [8]))
	*($21 + [432]) = *($21 + [544])
	goto $label$41 
	
.LABEL $label$42
	CALL $68(($21 + [432]), ($21 + [504]))
	
.LABEL $label$41
	$12 = ($12 & [1])
	$12 = *($21 + [504])
	*($21 + [500]) = ( *($21 + [508]) ? uint_32($12 >> [1]) : $12 )
	*($21 + [496]) = ( *($21 + [512]) ? (($21 + [504]) | [1]) : $12 )
	*($21 + [136 align=4]) = *($21 + [496])
	CALL _ZN6abieos20string_to_public_keyENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE(($21 + [544]), ($21 + [136]))
	$12 = ($12 & [1])
	$12 = *($21 + [432])
	*($21 + [492]) = ( *($21 + [436]) ? uint_32($12 >> [1]) : $12 )
	$18 = (($21 + [432]) + [8])
	*($21 + [488]) = ( *($18) ? (($21 + [432]) | [1]) : $12 )
	*($21 + [128 align=4]) = *($21 + [488])
	CALL _ZN6abieos20string_to_public_keyENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE(($21 + [800]), ($21 + [128]))
	*($21 + [729]) = *($21 + [546])
	*($21 + [728]) = *($21 + [545])
	*($21 + [730]) = *($21 + [547])
	*($21 + [731]) = *($21 + [548])
	*($21 + [732]) = *($21 + [549])
	*($21 + [733]) = *($21 + [550])
	*($21 + [734]) = *($21 + [551])
	*($21 + [735]) = *((($21 + [544]) + [8]))
	*($21 + [736]) = *((($21 + [544]) + [9]))
	*($21 + [737]) = *((($21 + [544]) + [10]))
	*($21 + [738]) = *((($21 + [544]) + [11]))
	*($21 + [739]) = *((($21 + [544]) + [12]))
	*($21 + [740]) = *((($21 + [544]) + [13]))
	*($21 + [741]) = *((($21 + [544]) + [14]))
	*($21 + [742]) = *((($21 + [544]) + [15]))
	*($21 + [743]) = *((($21 + [544]) + [16]))
	*($21 + [744]) = *((($21 + [544]) + [17]))
	*($21 + [745]) = *((($21 + [544]) + [18]))
	*($21 + [746]) = *((($21 + [544]) + [19]))
	*($21 + [747]) = *((($21 + [544]) + [20]))
	*($21 + [748]) = *((($21 + [544]) + [21]))
	*($21 + [749]) = *((($21 + [544]) + [22]))
	*($21 + [750]) = *((($21 + [544]) + [23]))
	*($21 + [751]) = *((($21 + [544]) + [24]))
	*($21 + [752]) = *((($21 + [544]) + [25]))
	*($21 + [753]) = *((($21 + [544]) + [26]))
	*($21 + [754]) = *((($21 + [544]) + [27]))
	*($21 + [755]) = *((($21 + [544]) + [28]))
	*($21 + [756]) = *((($21 + [544]) + [29]))
	*($21 + [757]) = *((($21 + [544]) + [30]))
	*($21 + [758]) = *((($21 + [544]) + [31]))
	*($21 + [759]) = *((($21 + [544]) + [32]))
	*($21 + [760]) = *((($21 + [544]) + [33]))
	*($21 + [688]) = *($21 + [801])
	*($21 + [689]) = *($21 + [802])
	*($21 + [690]) = *($21 + [803])
	*($21 + [691]) = *($21 + [804])
	*($21 + [692]) = *($21 + [805])
	*($21 + [693]) = *($21 + [806])
	*($21 + [694]) = *($21 + [807])
	*($21 + [695]) = *((($21 + [800]) + [8]))
	*($21 + [696]) = *((($21 + [800]) + [9]))
	*($21 + [697]) = *((($21 + [800]) + [10]))
	*($21 + [698]) = *((($21 + [800]) + [11]))
	*($21 + [699]) = *((($21 + [800]) + [12]))
	*($21 + [700]) = *((($21 + [800]) + [13]))
	*($21 + [701]) = *((($21 + [800]) + [14]))
	*($21 + [702]) = *((($21 + [800]) + [15]))
	*($21 + [703]) = *((($21 + [800]) + [16]))
	*($21 + [704]) = *((($21 + [800]) + [17]))
	*($21 + [705]) = *((($21 + [800]) + [18]))
	*($21 + [706]) = *((($21 + [800]) + [19]))
	*($21 + [707]) = *((($21 + [800]) + [20]))
	*($21 + [708]) = *((($21 + [800]) + [21]))
	*($21 + [709]) = *((($21 + [800]) + [22]))
	*($21 + [710]) = *((($21 + [800]) + [23]))
	*($21 + [711]) = *((($21 + [800]) + [24]))
	*($21 + [712]) = *((($21 + [800]) + [25]))
	*($21 + [713]) = *((($21 + [800]) + [26]))
	*($21 + [714]) = *((($21 + [800]) + [27]))
	*($21 + [715]) = *((($21 + [800]) + [28]))
	*($21 + [716]) = *((($21 + [800]) + [29]))
	*($21 + [717]) = *((($21 + [800]) + [30]))
	*($21 + [718]) = *((($21 + [800]) + [31]))
	*($21 + [719]) = *((($21 + [800]) + [32]))
	*($21 + [720]) = *((($21 + [800]) + [33]))
	if ( ((*($21 + [432]) & [1]) == 0) ){ goto $label$48 }
	CALL $66(*($18))
	
.LABEL $label$48
	if ( ((*($21 + [504]) & [1]) == 0) ){ goto $label$49 }
	CALL $66(*(($21 + [512])))
	
.LABEL $label$49
	$4 = [0]
	
.LABEL $label$26
	CALL $73(($21 + [472]), $17, [0], [12], $17)
	$12 = ( *($21 + [480]) ? (($21 + [472]) | [1]) : (*($21 + [472]) & [1]) )
	$18 = [-1]
	
.LOOP $label$50:
	$11 = ($12 + $18)
	$6 = ($18 + [1])
	$18 = $6
	if ( *(($11 + [1])) ){ goto $label$50 }
	$19 = (CASTING uint_64)(uint_32 $6)
	$14 = (int_64)0
	$13 = (int_64)59
	$15 = (int_64)0
	
.LOOP $label$51:
	$16 = (int_64)0
	if ( ((uint_64)$14 >= (uint_64)$19) ){ goto $label$52 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$18 = ($18 + [165])
	goto $label$53 
	
.LABEL $label$54
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$56 }
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$55 
	
.LABEL $label$56
	$16 = ((int_64)$16 & (int_64)15)
	
.LABEL $label$55
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$51 }
	*($21 + [432]) = [1]
	*($21 + [800]) = [0]
	$18 = CALL memcpy((($21 + [800]) | [4]), ($21 + [728]), [33])
	*(($11 = (($21 + [432]) + [12]))) = [0]
	*($21 + [840]) = [1]
	*($21 + [436 align=4]) = (int_64)0
	$12 = CALL $65([44])
	$6 = ($12 + [44])
	*($11) = $6
	*($21 + [436]) = $12
	CALL memcpy($12, ($21 + [800]), [44])
	*((($21 + [432]) + [8])) = $6
	*((($21 + [432]) + [20])) = [0]
	*((($21 + [432]) + [24])) = [0]
	*((($21 + [432]) + [32])) = [0]
	*((($21 + [432]) + [36])) = [0]
	*($21 + [448]) = [0]
	*($21 + [460]) = [0]
	*($21 + [392]) = [1]
	*($21 + [800]) = [0]
	CALL memcpy($18, ($21 + [688]), [33])
	*(($18 = (($21 + [392]) + [12]))) = [0]
	*($21 + [840]) = [1]
	*($21 + [396 align=4]) = (int_64)0
	$12 = CALL $65([44])
	$11 = ($12 + [44])
	*($18) = $11
	*($21 + [396]) = $12
	CALL memcpy($12, ($21 + [800]), [44])
	*((($21 + [392]) + [8])) = $11
	*((($21 + [392]) + [20])) = [0]
	*((($21 + [392]) + [24])) = [0]
	*((($21 + [392]) + [32])) = [0]
	*((($21 + [392]) + [36])) = [0]
	*($21 + [408]) = [0]
	*($21 + [420]) = [0]
	CALL _ZN5eosio11buyrambytesEm(($21 + [376]), [4096])
	CALL _ZN5eosio11buyrambytesEm(($21 + [360]), [256])
	CALL eosio_assert([1], [288])
	$14 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$58 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$60 }
	
.LOOP $label$61:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$58 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$61 }
	
.LABEL $label$60
	$18 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$58
	$18 = [0]
	
.LABEL $label$57
	CALL eosio_assert($18, [352])
	CALL eosio_assert([1], [288])
	$14 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$64:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$63 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$65 }
	
.LOOP $label$66:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$63 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$66 }
	
.LABEL $label$65
	$18 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$64 }
	goto $label$62 
	
.LABEL $label$63
	$18 = [0]
	
.LABEL $label$62
	CALL eosio_assert($18, [352])
	$14 = *(($1 + [16]))
	CALL eosio_assert([1], [288])
	$14 = ((int_64)((int_64)$14 + (int_64)119) / (int_64)200)
	$10 = ( $14 ? (int_64)2000 : ((int_64)$14 > (int_64)2000) )
	$14 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$69:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$68 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$70 }
	
.LOOP $label$71:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$68 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$71 }
	
.LABEL $label$70
	$18 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$69 }
	goto $label$67 
	
.LABEL $label$68
	$18 = [0]
	
.LABEL $label$67
	CALL eosio_assert($18, [352])
	CALL eosio_assert(((int_64)1397703940 == (int_64)1397703940), [1680])
	CALL eosio_assert([1], [1728])
	CALL eosio_assert([1], [1760])
	$13 = *($21 + [384])
	CALL eosio_assert(((int_64)$13 == (int_64)1397703940), [1680])
	$16 = *($21 + [376])
	$14 = ((int_64)$16 + (int_64)2000)
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [1728])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1760])
	CALL eosio_assert(((int_64)1397703940 == (int_64)1397703940), [1680])
	$14 = ((int_64)$14 + (int_64)$10)
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [1728])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1760])
	$19 = *($21 + [368])
	CALL eosio_assert(((int_64)$19 == (int_64)1397703940), [1680])
	$20 = *($21 + [360])
	$14 = ((int_64)$20 + (int_64)$14)
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [1728])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1760])
	$12 = ($1 + [24])
	CALL eosio_assert(((int_64)1397703940 == (int_64)*($12)), [1792])
	$18 = ($1 + [16])
	CALL eosio_assert(((int_64)$14 <= (int_64)*($18)), [1856])
	$14 = *($18)
	$7 = *($12)
	CALL eosio_assert(((int_64)1397703940 == (int_64)$7), [1888])
	$8 = ((int_64)$14 + (int_64)-1500)
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1936])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [1968])
	CALL eosio_assert(((int_64)$7 == (int_64)1397703940), [1888])
	$14 = ((int_64)$14 + (int_64)-2000)
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [1936])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1968])
	CALL eosio_assert(((int_64)$13 == (int_64)$7), [1888])
	$14 = (int_64)
	CALL eosio_assert(((int_64)$14($14 - $16)) > (int_64)-4611686018427387904), [1936])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1968])
	CALL eosio_assert(((int_64)$7 == (int_64)1397703940), [1888])
	$14 = (int_64)
	CALL eosio_assert(((int_64)$14($14 - $10)) > (int_64)-4611686018427387904), [1936])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1968])
	CALL eosio_assert(((int_64)$19 == (int_64)$7), [1888])
	$8 = (int_64)
	CALL eosio_assert(((int_64)$8($14 - $20)) > (int_64)-4611686018427387904), [1936])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [1968])
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [656]
	$19 = (int_64)0
	
.LOOP $label$72:
	if ( ((uint_64)$14 > (uint_64)(int_64)4) ){ goto $label$77 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$76 }
	$18 = ($18 + [165])
	goto $label$75 
	
.LABEL $label$77
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$76
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$75
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$74
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$73
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$19 = ((int_64)$13 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$72 }
	$9 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [2000]
	$20 = (int_64)0
	
.LOOP $label$78:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$83 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$82 }
	$18 = ($18 + [165])
	goto $label$81 
	
.LABEL $label$83
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$82
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$81
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$80
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$79
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$20 = ((int_64)$13 | (int_64)$20)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$78 }
	*($21 + [808]) = $20
	*($21 + [800]) = $9
	*($21 + [352]) = [0]
	*($21 + [344]) = (int_64)0
	*((($12 = CALL $65([16])) + [12])) = *((($21 + [800]) + [12]))
	*(($12 + [4])) = *($21 + [804])
	*($21 + [344]) = $12
	*($12) = *($21 + [800])
	$18 = ($12 + [16])
	*($21 + [352]) = $18
	*(($12 + [8])) = *($21 + [808])
	*($21 + [348]) = $18
	*($21 + [248]) = *($0)
	*($21 + [256]) = $15
	CALL $42((($21 + [248]) + [16]), ($21 + [432]))
	CALL $42(($21 + [304]), ($21 + [392]))
	CALL $43($19, ($21 + [344]), ($21 + [248]))
	$12 = *(($21 + [332]))
	if ( ($12 == 0) ){ goto $label$84 }
	*(($21 + [336])) = $12
	CALL $66($12)
	
.LABEL $label$84
	$12 = *(($21 + [320]))
	if ( ($12 == 0) ){ goto $label$85 }
	*(($21 + [324])) = $12
	CALL $66($12)
	
.LABEL $label$85
	$12 = *(($21 + [308]))
	if ( ($12 == 0) ){ goto $label$86 }
	*(($21 + [312])) = $12
	CALL $66($12)
	
.LABEL $label$86
	$12 = *(($21 + [292]))
	if ( ($12 == 0) ){ goto $label$87 }
	*(($21 + [296])) = $12
	CALL $66($12)
	
.LABEL $label$87
	$12 = *(($21 + [280]))
	if ( ($12 == 0) ){ goto $label$88 }
	*(($21 + [284])) = $12
	CALL $66($12)
	
.LABEL $label$88
	$12 = *(($21 + [268]))
	if ( ($12 == 0) ){ goto $label$89 }
	*(($21 + [272])) = $12
	CALL $66($12)
	
.LABEL $label$89
	$12 = *($21 + [344])
	if ( ($12 == 0) ){ goto $label$90 }
	*($21 + [348]) = $12
	CALL $66($12)
	
.LABEL $label$90
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [656]
	$19 = (int_64)0
	
.LOOP $label$91:
	if ( ((uint_64)$14 > (uint_64)(int_64)4) ){ goto $label$96 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$95 }
	$18 = ($18 + [165])
	goto $label$94 
	
.LABEL $label$96
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$95
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$94
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$93
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$92
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$19 = ((int_64)$13 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$91 }
	$9 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [2000]
	$20 = (int_64)0
	
.LOOP $label$97:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$102 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$101 }
	$18 = ($18 + [165])
	goto $label$100 
	
.LABEL $label$102
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$101
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$100
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$99
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$98
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$20 = ((int_64)$13 | (int_64)$20)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$97 }
	*($21 + [240]) = $20
	*($21 + [232]) = $9
	*((($12 = CALL $65([16])) + [8])) = *($21 + [240])
	*($12) = *($21 + [232])
	*(($18 = (($21 + [216]) + [8]))) = *((($21 + [376]) + [8]))
	*($21 + [216]) = *($21 + [376])
	$14 = *($0)
	*(($11 = (($21 + [768]) + [8]))) = *($18)
	*($21 + [768]) = *($21 + [216])
	*($21 + [784]) = $12
	$12 = ($12 + [16])
	*($21 + [792]) = $12
	*($21 + [788]) = $12
	*($21 + [808]) = $15
	*($21 + [800]) = $14
	*(($12 = (($21 + [800]) + [24]))) = *($11)
	*((($21 + [96]) + [8])) = *($21 + [808])
	*($21 + [816]) = *($21 + [768])
	*((($21 + [96]) + [24])) = *($12)
	*((($21 + [96]) + [16])) = *($21 + [816])
	*($21 + [96]) = *($21 + [800])
	CALL $44($19, (int_64)4520896354024685568, ($21 + [784]), ($21 + [96]))
	$12 = *($21 + [784])
	if ( ($12 == 0) ){ goto $label$103 }
	*($21 + [788]) = $12
	CALL $66($12)
	
.LABEL $label$103
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [656]
	$19 = (int_64)0
	
.LOOP $label$104:
	if ( ((uint_64)$14 > (uint_64)(int_64)4) ){ goto $label$109 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$108 }
	$18 = ($18 + [165])
	goto $label$107 
	
.LABEL $label$109
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$106 }
	goto $label$105 
	
.LABEL $label$108
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$107
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$106
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$105
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$19 = ((int_64)$13 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$104 }
	$9 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [2000]
	$20 = (int_64)0
	
.LOOP $label$110:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$115 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$114 }
	$18 = ($18 + [165])
	goto $label$113 
	
.LABEL $label$115
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$112 }
	goto $label$111 
	
.LABEL $label$114
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$113
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$112
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$111
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$20 = ((int_64)$13 | (int_64)$20)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$110 }
	*($21 + [240]) = $20
	*($21 + [232]) = $9
	*((($12 = CALL $65([16])) + [8])) = *($21 + [240])
	*($12) = *($21 + [232])
	*(($18 = (($21 + [200]) + [8]))) = *((($21 + [360]) + [8]))
	*($21 + [200]) = *($21 + [360])
	$14 = *($0)
	*(($11 = (($21 + [768]) + [8]))) = *($18)
	*($21 + [768]) = *($21 + [200])
	*($21 + [784]) = $12
	$12 = ($12 + [16])
	*($21 + [792]) = $12
	*($21 + [788]) = $12
	*($21 + [808]) = $14
	*($21 + [800]) = $14
	*(($12 = (($21 + [800]) + [24]))) = *($11)
	*((($21 + [64]) + [8])) = *($21 + [808])
	*($21 + [816]) = *($21 + [768])
	*((($21 + [64]) + [24])) = *($12)
	*((($21 + [64]) + [16])) = *($21 + [816])
	*($21 + [64]) = *($21 + [800])
	CALL $44($19, (int_64)4520896354024685568, ($21 + [784]), ($21 + [64]))
	$12 = *($21 + [784])
	if ( ($12 == 0) ){ goto $label$116 }
	*($21 + [788]) = $12
	CALL $66($12)
	
.LABEL $label$116
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [656]
	$19 = (int_64)0
	
.LOOP $label$117:
	if ( ((uint_64)$14 > (uint_64)(int_64)4) ){ goto $label$122 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$121 }
	$18 = ($18 + [165])
	goto $label$120 
	
.LABEL $label$122
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$121
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$120
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$119
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$118
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$19 = ((int_64)$13 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$117 }
	$9 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [2000]
	$20 = (int_64)0
	
.LOOP $label$123:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$128 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$127 }
	$18 = ($18 + [165])
	goto $label$126 
	
.LABEL $label$128
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$125 }
	goto $label$124 
	
.LABEL $label$127
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$126
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$125
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$124
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$20 = ((int_64)$13 | (int_64)$20)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$123 }
	*($21 + [776]) = $20
	*($21 + [768]) = $9
	*((($12 = CALL $65([16])) + [8])) = *($21 + [776])
	*($12) = *($21 + [768])
	$14 = *($0)
	*(($18 = (($21 + [784]) + [6]))) = *((($21 + [193]) + [6]))
	*(($11 = (($21 + [784]) + [4]))) = *((($21 + [193]) + [4]))
	*($21 + [784]) = *($21 + [193 align=1])
	$6 = ($12 + [16])
	*($21 + [236]) = $6
	*($21 + [232]) = $12
	*($21 + [240]) = $6
	*($21 + [800]) = $14
	*($21 + [808]) = $15
	*($21 + [816]) = (int_64)500
	*(($21 + [824])) = (int_64)1397703940
	*($21 + [832]) = (int_64)1500
	*(($21 + [840])) = (int_64)1397703940
	*($21 + [848]) = [1]
	*(($21 + [855])) = *($18)
	*(($21 + [853])) = *($11)
	*($21 + [849 align=1]) = *($21 + [784])
	CALL memcpy(($21 + [8]), ($21 + [800]), [56])
	CALL $45($19, (int_64)5378043540636893184, ($21 + [232]), ($21 + [8]))
	$12 = *($21 + [232])
	if ( ($12 == 0) ){ goto $label$129 }
	*($21 + [236]) = $12
	CALL $66($12)
	
.LABEL $label$129
	if ( ((int_64)$15 == (int_64)$2) ){ goto $label$130 }
	if ( (CALL is_account($2) == 0) ){ goto $label$130 }
	CALL eosio_assert([1], [288])
	$14 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$133:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$132 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$134 }
	
.LOOP $label$135:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$132 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$135 }
	
.LABEL $label$134
	$18 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$133 }
	goto $label$131 
	
.LABEL $label$132
	$18 = [0]
	
.LABEL $label$131
	CALL eosio_assert($18, [352])
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [912]
	$19 = (int_64)0
	
.LOOP $label$136:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$141 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$140 }
	$18 = ($18 + [165])
	goto $label$139 
	
.LABEL $label$141
	$13 = (int_64)0
	if ( ((int_64)$14 == (int_64)11) ){ goto $label$138 }
	goto $label$137 
	
.LABEL $label$140
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$139
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$138
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$137
	$12 = ($12 + [1])
	$16 = ((int_64)$16 + (int_64)-5)
	$19 = ((int_64)$13 | (int_64)$19)
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((int_64)$14 != (int_64)13) ){ goto $label$136 }
	$9 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [2000]
	$20 = (int_64)0
	
.LOOP $label$142:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$147 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$146 }
	$18 = ($18 + [165])
	goto $label$145 
	
.LABEL $label$147
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$144 }
	goto $label$143 
	
.LABEL $label$146
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$145
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$144
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$143
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$20 = ((int_64)$13 | (int_64)$20)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$142 }
	*($21 + [776]) = $20
	*($21 + [768]) = $9
	*((($12 = CALL $65([16])) + [12])) = *((($21 + [768]) + [12]))
	*(($12 + [4])) = *($21 + [772])
	*($21 + [176]) = $12
	*($12) = *($21 + [768])
	$18 = ($12 + [16])
	*($21 + [184]) = $18
	*(($12 + [8])) = *($21 + [776])
	*($21 + [180]) = $18
	*((($21 + [784]) + [8])) = [0]
	*($21 + [784]) = (int_64)0
	$12 = CALL strlen([2016])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$150 }
	*($21 + [784]) = ($12 << [1])
	$18 = (($21 + [784]) | [1])
	if ( $12 ){ goto $label$149 }
	goto $label$148 
	
.LABEL $label$150
	$11 = (($12 + [16]) & [-16])
	$18 = CALL $65($11)
	*($21 + [784]) = ($11 | [1])
	*($21 + [792]) = $18
	*($21 + [788]) = $12
	
.LABEL $label$149
	CALL memcpy($18, [2016], $12)
	
.LABEL $label$148
	*(($18 + $12)) = [0]
	$12 = *($21 + [784])
	*($21 + [784]) = [0]
	$18 = *($21 + [788])
	*($21 + [788]) = [0]
	$11 = *($21 + [792])
	*($21 + [792]) = [0]
	$14 = *($0)
	$6 = ($21 + [184])
	*($21 + [240]) = *($6)
	*($6) = [0]
	*($21 + [232]) = *($21 + [176])
	*($21 + [236]) = *($21 + [180])
	*($21 + [180]) = [0]
	*($21 + [176]) = [0]
	*($21 + [808]) = $2
	*($21 + [800]) = $14
	*($21 + [816]) = (int_64)1000
	*(($21 + [824])) = (int_64)1397703940
	*($21 + [832]) = $12
	*(($21 + [836])) = $18
	*(($12 = ($21 + [840]))) = $11
	CALL $46($19, (int_64)-3617168760277827584, ($21 + [232]), ($21 + [800]))
	if ( ((*($21 + [832]) & [1]) == 0) ){ goto $label$151 }
	CALL $66(*($12))
	
.LABEL $label$151
	$12 = *($21 + [232])
	if ( ($12 == 0) ){ goto $label$152 }
	*($21 + [236]) = $12
	CALL $66($12)
	
.LABEL $label$152
	if ( ((*($21 + [784]) & [1]) == 0) ){ goto $label$153 }
	CALL $66(*(($21 + [792])))
	
.LABEL $label$153
	CALL eosio_assert(((int_64)1397703940 == (int_64)1397703940), [1888])
	$10 = ((int_64)$10 + (int_64)-1000)
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [1936])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [1968])
	
.LABEL $label$130
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [912]
	$19 = (int_64)0
	
.LOOP $label$154:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$159 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$158 }
	$18 = ($18 + [165])
	goto $label$157 
	
.LABEL $label$159
	$13 = (int_64)0
	if ( ((int_64)$14 == (int_64)11) ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$158
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$157
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$156
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$155
	$12 = ($12 + [1])
	$16 = ((int_64)$16 + (int_64)-5)
	$19 = ((int_64)$13 | (int_64)$19)
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((int_64)$14 != (int_64)13) ){ goto $label$154 }
	$2 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [2000]
	$20 = (int_64)0
	
.LOOP $label$160:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$165 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$164 }
	$18 = ($18 + [165])
	goto $label$163 
	
.LABEL $label$165
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$162 }
	goto $label$161 
	
.LABEL $label$164
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$163
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$162
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$161
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$20 = ((int_64)$13 | (int_64)$20)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$160 }
	*($21 + [776]) = $20
	*($21 + [768]) = $2
	*((($12 = CALL $65([16])) + [12])) = *((($21 + [768]) + [12]))
	*(($12 + [4])) = *($21 + [772])
	*($21 + [160]) = $12
	*($12) = *($21 + [768])
	$18 = ($12 + [16])
	*($21 + [168]) = $18
	*(($12 + [8])) = *($21 + [776])
	*($21 + [164]) = $18
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [2032]
	$20 = (int_64)0
	
.LOOP $label$166:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$167 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$169 }
	$18 = ($18 + [165])
	goto $label$168 
	
.LABEL $label$169
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$168
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($18 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$167
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$20 = ((int_64)$16 | (int_64)$20)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$166 }
	*(($21 + [792])) = [0]
	*($21 + [784]) = (int_64)0
	$12 = CALL strlen([2048])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$172 }
	*($21 + [784]) = ($12 << [1])
	$18 = (($21 + [784]) | [1])
	if ( $12 ){ goto $label$171 }
	goto $label$170 
	
.LABEL $label$172
	$11 = (($12 + [16]) & [-16])
	$18 = CALL $65($11)
	*($21 + [784]) = ($11 | [1])
	*($21 + [792]) = $18
	*($21 + [788]) = $12
	
.LABEL $label$171
	CALL memcpy($18, [2048], $12)
	
.LABEL $label$170
	*(($18 + $12)) = [0]
	$12 = *($21 + [784])
	*($21 + [784]) = [0]
	$18 = *($21 + [788])
	*($21 + [788]) = [0]
	$11 = *($21 + [792])
	*($21 + [792]) = [0]
	$14 = *($0)
	$6 = ($21 + [168])
	*($21 + [240]) = *($6)
	*($6) = [0]
	*($21 + [232]) = *($21 + [160])
	*($21 + [236]) = *($21 + [164])
	*($21 + [164]) = [0]
	*($21 + [160]) = [0]
	*($21 + [808]) = $20
	*($21 + [800]) = $14
	*($21 + [816]) = $10
	*(($21 + [824])) = (int_64)1397703940
	*($21 + [832]) = $12
	*(($21 + [836])) = $18
	*(($12 = ($21 + [840]))) = $11
	CALL $46($19, (int_64)-3617168760277827584, ($21 + [232]), ($21 + [800]))
	if ( ((*($21 + [832]) & [1]) == 0) ){ goto $label$173 }
	CALL $66(*($12))
	
.LABEL $label$173
	$12 = *($21 + [232])
	if ( ($12 == 0) ){ goto $label$174 }
	*($21 + [236]) = $12
	CALL $66($12)
	
.LABEL $label$174
	if ( ((*($21 + [784]) & [1]) == 0) ){ goto $label$175 }
	CALL $66(*(($21 + [792])))
	
.LABEL $label$175
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$176 }
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [912]
	$19 = (int_64)0
	
.LOOP $label$177:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$182 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$181 }
	$18 = ($18 + [165])
	goto $label$180 
	
.LABEL $label$182
	$13 = (int_64)0
	if ( ((int_64)$14 == (int_64)11) ){ goto $label$179 }
	goto $label$178 
	
.LABEL $label$181
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$180
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$179
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$178
	$12 = ($12 + [1])
	$16 = ((int_64)$16 + (int_64)-5)
	$19 = ((int_64)$13 | (int_64)$19)
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((int_64)$14 != (int_64)13) ){ goto $label$177 }
	$2 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [2000]
	$20 = (int_64)0
	
.LOOP $label$183:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$188 }
	$18 = *($12)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$187 }
	$18 = ($18 + [165])
	goto $label$186 
	
.LABEL $label$188
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$185 }
	goto $label$184 
	
.LABEL $label$187
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$186
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$185
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$184
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$20 = ((int_64)$13 | (int_64)$20)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$183 }
	*($21 + [776]) = $20
	*($21 + [768]) = $2
	*((($12 = CALL $65([16])) + [12])) = *((($21 + [768]) + [12]))
	*(($12 + [4])) = *($21 + [772])
	*($21 + [144]) = $12
	*($12) = *($21 + [768])
	$18 = ($12 + [16])
	*($21 + [152]) = $18
	*(($12 + [8])) = *($21 + [776])
	*($21 + [148]) = $18
	*((($21 + [784]) + [8])) = [0]
	*($21 + [784]) = (int_64)0
	$12 = CALL strlen([2064])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$191 }
	*($21 + [784]) = ($12 << [1])
	$18 = (($21 + [784]) | [1])
	if ( $12 ){ goto $label$190 }
	goto $label$189 
	
.LABEL $label$191
	$11 = (($12 + [16]) & [-16])
	$18 = CALL $65($11)
	*($21 + [784]) = ($11 | [1])
	*($21 + [792]) = $18
	*($21 + [788]) = $12
	
.LABEL $label$190
	CALL memcpy($18, [2064], $12)
	
.LABEL $label$189
	*(($18 + $12)) = [0]
	$12 = *($21 + [784])
	*($21 + [784]) = [0]
	$18 = *($21 + [788])
	*($21 + [788]) = [0]
	$11 = *($21 + [792])
	*($21 + [792]) = [0]
	$14 = *($0)
	$6 = ($21 + [152])
	*($21 + [240]) = *($6)
	*($6) = [0]
	*($21 + [232]) = *($21 + [144])
	*($21 + [236]) = *($21 + [148])
	*($21 + [148]) = [0]
	*($21 + [144]) = [0]
	*($21 + [808]) = $15
	*($21 + [800]) = $14
	*($21 + [816]) = $8
	*(($21 + [824])) = $7
	*($21 + [832]) = $12
	*(($21 + [836])) = $18
	*(($12 = ($21 + [840]))) = $11
	CALL $46($19, (int_64)-3617168760277827584, ($21 + [232]), ($21 + [800]))
	if ( ((*($21 + [832]) & [1]) == 0) ){ goto $label$192 }
	CALL $66(*($12))
	
.LABEL $label$192
	$12 = *($21 + [232])
	if ( ($12 == 0) ){ goto $label$193 }
	*($21 + [236]) = $12
	CALL $66($12)
	
.LABEL $label$193
	if ( ((*($21 + [784]) & [1]) == 0) ){ goto $label$176 }
	CALL $66(*(($21 + [792])))
	
.LABEL $label$176
	if ( ($4 == 0) ){ goto $label$194 }
	$1 = *(($0 + [40]))
	$11 = *(($0 + [44]))
	if ( ((int_32)$11 == (int_32)$1) ){ goto $label$195 }
	$12 = ($11 + [-24])
	$6 = ([0] - $1)
	
.LOOP $label$196:
	if ( ((int_64)*(*($12)) == (int_64)$5) ){ goto $label$195 }
	$11 = $12
	$18 = ($12 + [-24])
	$12 = $18
	if ( ((int_32)($18 + $6) != (int_32)[-24]) ){ goto $label$196 }
	
.LABEL $label$195
	if ( ((int_32)$11 == (int_32)$1) ){ goto $label$198 }
	$12 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [128]) == (int_32)$3), [672])
	goto $label$197 
	
.LABEL $label$198
	$12 = [0]
	$18 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-6497942746098040832, $5)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$197 }
	$12 = CALL $26($3, $18)
	CALL eosio_assert(((int_32)*($12 + [128]) == (int_32)$3), [672])
	
.LABEL $label$197
	$18 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($18, [928])
	CALL eosio_assert($18, [976])
	$18 = CALL db_next_i64(*($12 + [132]), ($21 + [800]))
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$199 }
	CALL $26($3, $18)
	
.LABEL $label$199
	CALL $27($3, $12)
	
.LABEL $label$194
	$12 = *(($21 + [420]))
	if ( ($12 == 0) ){ goto $label$200 }
	*(($21 + [424])) = $12
	CALL $66($12)
	
.LABEL $label$200
	$12 = *(($21 + [408]))
	if ( ($12 == 0) ){ goto $label$201 }
	*(($21 + [412])) = $12
	CALL $66($12)
	
.LABEL $label$201
	$12 = *($21 + [396])
	if ( ($12 == 0) ){ goto $label$202 }
	*(($21 + [400])) = $12
	CALL $66($12)
	
.LABEL $label$202
	$12 = *(($21 + [460]))
	if ( ($12 == 0) ){ goto $label$203 }
	*(($21 + [464])) = $12
	CALL $66($12)
	
.LABEL $label$203
	$12 = *(($21 + [448]))
	if ( ($12 == 0) ){ goto $label$204 }
	*(($21 + [452])) = $12
	CALL $66($12)
	
.LABEL $label$204
	$12 = *($21 + [436])
	if ( ($12 == 0) ){ goto $label$205 }
	*(($21 + [440])) = $12
	CALL $66($12)
	
.LABEL $label$205
	if ( ((*($21 + [472]) & [1]) == 0) ){ goto $label$206 }
	CALL $66(*(($21 + [480])))
	
.LABEL $label$206
	if ( ((*($21 + [640]) & [1]) == 0) ){ goto $label$4 }
	CALL $66(*(($21 + [648])))
	
.LABEL $label$4
	*([0] + [4]) = ($21 + [864])
	return (unreachable)
	
.LABEL $label$3
	CALL $67(($21 + [784]))
	
.LABEL $label$2
	CALL $67(($21 + [784]))
	
.LABEL $label$1
	CALL $67(($21 + [784]))
	(unreachable)
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [256])
	*([0] + [4]) = $7
	$2 = CALL memset($0, [0], [37])
	$6 = *($1 + [4])
	if ( ($6 == 0) ){ goto $label$1 }
	$5 = *($1)
	$3 = ($5 + $6)
	
.LOOP $label$2:
	if ( *([0] + [16]) ){ goto $label$3 }
	$1 = [-256]
	
.LOOP $label$4:
	*(($1 + [288])) = [255]
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$4 }
	$1 = [0]
	
.LOOP $label$5:
	*((*(($1 + [464])) + [32])) = $1
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[59]) ){ goto $label$5 }
	*([0] + [16]) = [1]
	
.LABEL $label$3
	$6 = *((CALL memcpy($7, [32], [256]) + *($5)))
	if ( ((int_32)$6 >= (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [592])
	
.LABEL $label$6
	$1 = [0]
	
.LOOP $label$7:
	$6 = (((int_32)*($4) * (int_32)[58]) + $6)
	*(($4 = ($2 + $1))) = $6
	$6 = int_32($6 >> [8])
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[37]) ){ goto $label$7 }
	if ( ($6 == 0) ){ goto $label$8 }
	CALL eosio_assert([0], [624])
	
.LABEL $label$8
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($2 + [36])
	
.LOOP $label$9:
	$6 = *($0)
	*($0) = *($1)
	*($1) = $6
	$1 = ($1 + [-1])
	$0 = ($0 + [1])
	if ( ($0 <= $1) ){ goto $label$9 }
	*([0] + [4]) = ($7 + [256])
}

void .FUNC _ZN5eosio11buyrambytesEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [144])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [656]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [656]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$12 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	$4 = [0]
	*(($10 + [136])) = [0]
	*($10 + [120]) = (int_64)-1
	*($10 + [128]) = (int_64)0
	*($10 + [112]) = $9
	*($10 + [104]) = $7
	$2 = [0]
	$3 = CALL db_find_i64($7, $9, (int_64)-5069606918720847872, (int_64)4995142087184830980)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$13 }
	$2 = CALL $12(($10 + [104]), $3)
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)($10 + [104])), [672])
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [736])
	CALL memcpy(($10 + [40]), $2, [64])
	*($10 + [32]) = (int_64)1296126464
	*($10 + [24]) = (CASTING uint_64)(uint_32 $1)
	CALL eosio_assert([1], [288])
	$6 = (int_64)5062994
	
.LOOP $label$15:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$2 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	CALL eosio_assert($2, [352])
	*((($10 + [8]) + [8])) = *((($10 + [24]) + [8]))
	*($10 + [8]) = *($10 + [24])
	CALL _ZN11eosiosystem14exchange_state7convertEN5eosio5assetENS1_11symbol_typeE($0, ($10 + [40]), ($10 + [8]), (int_64)1397703940)
	$0 = *($10 + [128])
	if ( ($0 == 0) ){ goto $label$18 }
	$1 = ($10 + [132])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$20 }
	
.LOOP $label$21:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$22 }
	CALL $66($2)
	
.LABEL $label$22
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$21 }
	$4 = *(($10 + [128]))
	goto $label$19 
	
.LABEL $label$20
	$4 = $0
	
.LABEL $label$19
	*($1) = $0
	CALL $66($4)
	
.LABEL $label$18
	*([0] + [4]) = ($10 + [144])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [8]) = $0
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	$6 = CALL $65([80])
	CALL $13($6)
	*($6 + [64]) = $0
	CALL $14(($8 + [8]), $6)
	*($8 + [24]) = $6
	$5 = *($6 + [8])
	*($8 + [8]) = $5
	$7 = *($6 + [68])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $15(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $66($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $13 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [352])
	*(($2 = ($0 + [24]))) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [352])
	*($0 + [40]) = (int_64)0
	*(($0 + [32])) = (int_64)4602678819172646912
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [352])
	*(($0 + [56])) = (int_64)4602678819172646912
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $37(CALL $37($0, ($1 + [48])), ($1 + [88]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1376])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1376])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [1376])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [32])
	return *($0 + [4]) = (*($0 + [4]) + [32])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = *($0 + [4])
	$6 = *($1)
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$5 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $7) > (int_32)[0]), [1376])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$7 = (*($4) + [1])
	*($4) = $7
	if ( $2 ){ goto $label$1 }
	$2 = ($0 + [8])
	$4 = [4]
	
.LOOP $label$2:
	CALL eosio_assert(((int_32)(*($2) - $7) > (int_32)[0]), [1376])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ($1 + $4), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[37]) ){ goto $label$2 }
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [48])
	$15 = $16
	*([0] + [4]) = $16
	$2 = *($0)
	$13 = *($0 + [4])
	$14 = *($13)
	$5 = ($14 + [32])
	$12 = *($5)
	if ( ((int_64)$12 != (int_64)-1) ){ goto $label$1 }
	$12 = (int_64)0
	$3 = ($14 + [16])
	$4 = CALL db_lowerbound_i64(*($3), *(($14 + [24])), (int_64)-6497942746098040832, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $26($3, $4)
	*($15 + [20]) = [0]
	*($15 + [16]) = $3
	$12 = *(*(CALL $35(($15 + [16])) + [4]))
	$12 = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($14 + [32])) = $12
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($12 <= (int_64)-2), [1312])
	*($1) = *($5)
	*($1 + [8]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + *($14 + [8]))
	$14 = *($13 + [4])
	*($1 + [16]) = *($14)
	*(($1 + [40])) = *(($14 + [24]))
	*(($1 + [32])) = *(($14 + [16]))
	*(($1 + [24])) = *(($14 + [8]))
	CALL memcpy(($1 + [48]), *($13 + [8]), [37])
	CALL memcpy(($1 + [88]), *($13 + [12]), [37])
	$12 = *($1 + [48])
	$13 = [110]
	
.LOOP $label$3:
	$13 = ($13 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$3 }
	$12 = *($1 + [88])
	
.LOOP $label$4:
	$13 = ($13 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$4 }
	if ( ($13 <= [513]) ){ goto $label$6 }
	$14 = CALL malloc($13)
	goto $label$5 
	
.LABEL $label$6
	$14 = ($16 - (($13 + [15]) & [-16]))
	*([0] + [4]) = $14
	
.LABEL $label$5
	*($15 + [4]) = $14
	*($15) = $14
	*($15 + [8]) = ($14 + $13)
	CALL $36($15, $1)
	$12 = *($1)
	*($1 + [132]) = CALL db_store_i64(*($2 + [8]), (int_64)-6497942746098040832, *(*($0 + [8])), $12, $14, $13)
	if ( ($13 <= [513]) ){ goto $label$7 }
	CALL free($14)
	
.LABEL $label$7
	if ( (uint_64)($12 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$13 = ($2 + [8])
	$12 = *($13)
	$14 = *(($0 + [8]))
	$6 = *($14)
	$7 = *($1)
	$8 = *(($1 + [40]))
	$9 = *(($1 + [32]))
	$10 = *(($1 + [24]))
	$11 = *($1 + [16])
	CALL eosio_assert([1], [1200])
	*($15 + [24]) = $11
	*($15 + [16]) = $10
	CALL eosio_assert([1], [1200])
	*((($15 + [16]) + [24])) = $9
	*($15 + [32]) = $8
	*($1 + [136]) = CALL db_idx256_store($12, (int_64)-6497942746098040832, $6, $7, ($15 + [16]), [2])
	$12 = *($14)
	$6 = *($13)
	$7 = *($1)
	*($15 + [16]) = *(($1 + [8]))
	*(($1 + [140])) = CALL db_idx64_store($6, (int_64)-6497942746098040831, $12, $7, ($15 + [16]))
	*([0] + [4]) = ($15 + [48])
}

int_32 .FUNC $35 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [132]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1456])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6497942746098040832)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1392])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1392])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $26(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	*($10 + [40]) = (int_64)0
	*(($10 + [24])) = *(($2 + [24]))
	*(($10 + [16])) = *(($2 + [16]))
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx256_lowerbound(*($8), *($8 + [8]), (int_64)-6497942746098040832, $10, [2], ($10 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [40])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [128]) == (int_32)$4), [672])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $26($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)-6497942746098040832, $5))
	CALL eosio_assert(((int_32)*($2 + [128]) == (int_32)$4), [672])
	
.LABEL $label$4
	*(($2 + [136])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1248])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $65([144])) + [88]) = [0]
	*($3 + [48]) = [0]
	*($3 + [128]) = $1
	CALL $34(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [132])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $30(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $66($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $65(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $71($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $66($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $66($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$6 = *($0)
	$8 = *($1)
	CALL eosio_assert(((uint_32)(*($8 + [8]) - *($8 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($6, *($8 + [4]), [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	$2 = *($0)
	$8 = *($1)
	CALL eosio_assert(((uint_32)(*($8 + [8]) - *($8 + [4])) > (uint_32)[31]), [800])
	CALL memcpy(($2 + [16]), *($8 + [4]), [32])
	*($8 + [4]) = (*($8 + [4]) + [32])
	$3 = *($1)
	$8 = *($3 + [4])
	$6 = [0]
	$7 = (int_64)0
	$4 = ($3 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($8 <= *(($3 + [8]))), [1184])
	$8 = *($4)
	$0 = *($8)
	$8 = ($8 + [1])
	*($4) = $8
	$6 = ($6 & [255])
	$7 = ((int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $6)) | (int_64)$7)
	$6 = ($6 + [7])
	if ( uint_32($0 >> [7]) ){ goto $label$1 }
	*(($2 + [48])) = $7
	$4 = ($2 + [52])
	$0 = [0]
	$5 = ($3 + [8])
	$6 = ($3 + [4])
	
.LOOP $label$2:
	CALL eosio_assert(((int_32)*($5) != (int_32)$8), [800])
	CALL memcpy(($4 + $0), *($6), [1])
	$8 = (*($6) + [1])
	*($6) = $8
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[33]) ){ goto $label$2 }
	$5 = *($1)
	$8 = *($5 + [4])
	$6 = [0]
	$7 = (int_64)0
	$3 = ($5 + [8])
	$4 = ($5 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(($8 <= *($3)), [1184])
	$8 = *($4)
	$0 = *($8)
	$8 = ($8 + [1])
	*($4) = $8
	$6 = ($6 & [255])
	$7 = ((int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $6)) | (int_64)$7)
	$6 = ($6 + [7])
	if ( uint_32($0 >> [7]) ){ goto $label$3 }
	*(($2 + [88])) = $7
	$4 = ($2 + [92])
	$0 = [0]
	$3 = ($5 + [8])
	$6 = ($5 + [4])
	
.LOOP $label$4:
	CALL eosio_assert(((int_32)*($3) != (int_32)$8), [800])
	CALL memcpy(($4 + $0), *($6), [1])
	$8 = (*($6) + [1])
	*($6) = $8
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[33]) ){ goto $label$4 }
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[44]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [1376])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = CALL $37($0, $7)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[1]), [1376])
	CALL memcpy(*($5 + [4]), ($7 + [40]), [2])
	*($5 + [4]) = (*($5 + [4]) + [2])
	$7 = ($7 + [44])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1376])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1376])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1376])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[1]), [1376])
	CALL memcpy(*($4), ($7 + [16]), [2])
	$6 = (*($4) + [2])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $62([2100], $0)
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10582]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10584])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10582]) = [1]
	$7 = ($7 << [16])
	*([0] + [10584]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10584])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10584]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10582]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10582]) = [1]
	$3 = ($3 << [16])
	*([0] + [10584]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10584])
	
.LABEL $label$8
	*([0] + [10584]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10484])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10292]
	$1 = (((int_32)$2 * (int_32)[12]) + [10292])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1376])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1376])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $39($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1376])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1376])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1376])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1376])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1376])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1376])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	*($4 + [15]) = *($0 + [48])
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [1376])
	CALL memcpy(*($3 + [4]), ($4 + [15]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1376])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1376])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1376])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [1376])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $54 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $65($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	CALL $55(($9 + [52]), $3)
	CALL $48(($9 + [64]), ($9 + [24]))
	$8 = *($9 + [64])
	CALL send_inline($8, (*($9 + [68]) - $8))
	$8 = *($9 + [64])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [68]) = $8
	CALL $66($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $66($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $66($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $66($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $71(($9 + [8]))
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [16]
	*($4 + [8]) = $4
	*($4 + [20]) = ($1 + [20])
	*($4 + [16]) = ($1 + [16])
	*($4 + [24]) = ($1 + [32])
	*($4 + [28]) = ($1 + [44])
	CALL $56(($4 + [16]), ($4 + [8]))
	*($4 + [8]) = $4
	*($4 + [20]) = ($1 + [60])
	*($4 + [16]) = ($1 + [56])
	*($4 + [24]) = ($1 + [72])
	*($4 + [28]) = ($1 + [84])
	CALL $56(($4 + [16]), ($4 + [8]))
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $41($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $0
	*($4 + [16]) = $0
	*($4 + [24]) = $3
	*($4) = ($4 + [16])
	*($4 + [8]) = $1
	CALL $57(($4 + [8]), $4)
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	*(($6 = *($1))) = (*($6) + [4])
	$5 = *($6)
	$6 = *($0 + [4])
	$3 = *($6 + [4])
	$7 = (CASTING uint_64)(uint_32 ((int_32)($3 - $5) / (int_32)[44]))
	$2 = *($1)
	$6 = *($2)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	*($2) = $6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$6 = ($6 + [35])
	$7 = *($5)
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	$5 = ($5 + [44])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$3 }
	*($2) = $6
	
.LABEL $label$2
	$3 = *($6)
	$6 = *($0 + [8])
	$5 = *($6 + [4])
	$4 = ($5 - $3)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$4 / (int_32)[24]))
	$2 = *($1)
	$6 = *($2)
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$6 = ((((int_32)((uint_32)($4 + [-24]) / (uint_32)[24]) * (int_32)[18]) + $6) + [18])
	
.LABEL $label$6
	*($2) = $6
	$3 = *($6)
	$6 = *($0 + [12])
	$5 = *($6 + [4])
	$0 = ($5 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($0 >> [3]))
	$1 = *($1)
	$6 = *($1)
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = ((((int_32)uint_32(($0 + [-8]) >> [3]) * (int_32)[6]) + $6) + [6])
	
.LABEL $label$8
	*($1) = $6
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1376])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1376])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1376])
	CALL memcpy(*($0 + [4]), ($3 + [16]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $58($0, ($3 + [20]))
	CALL $59($0, ($3 + [32]))
	CALL $60($0, ($3 + [44]))
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1376])
	CALL memcpy(*($0 + [4]), ($3 + [56]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $58($0, ($3 + [60]))
	CALL $59($0, ($3 + [72]))
	CALL $60($0, ($3 + [84]))
}