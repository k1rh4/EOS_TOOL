(data (i32.const 16684) "0123456789abcdef\00\00\01\02\04\07\03\06\05\00unexpected error in fixed_bytes constructor\00")
(data (i32.const 16754) "length must be even\00")
(data (i32.const 16774) "not a hex digit\00stoul\00")
(data (i32.const 16796) "seed hash length mismatch\00")
(data (i32.const 16822) "seed hash mismatch\00")
(data (i32.const 16842) "mapBase58.size() should be 256\00")
(data (i32.const 16880) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 17136) "No delimiter in signature\00")
(data (i32.const 17162) "SIG\00")
(data (i32.const 17166) "Signature Key has invalid prefix\00")
(data (i32.const 17199) "No curve in signature\00")
(data (i32.const 17221) "K1\00")
(data (i32.const 17224) "R1\00")
(data (i32.const 17227) "Incorrect curve\00%llu\00")
(data (i32.const 17248) "Signature has no data\00")
(data (i32.const 17270) "Decode signature failed\00")
(data (i32.const 17294) "Invalid signature\00")
(data (i32.const 17312) "Signature checksum mismatch\00")
(data (i32.const 17340) "EOS\00")
(data (i32.const 17344) "Invalid public key\00")
(data (i32.const 17363) "Decode public key failed\00")
(data (i32.const 17388) "Public key checksum mismatch\00")
(data (i32.const 17417) "multiplication overflow\00")
(data (i32.const 17441) "multiplication underflow\00")
(data (i32.const 17466) "EOS6iPGxt9McG4S8gnUTgDn2foHdMexbfCb3PYqyxkJYzLqpgywe8\00: no conversion\00")
(data (i32.const 17536) "-\00: out of range\00")
(data (i32.const 17553) "invalid memo\00")
(data (i32.const 17566) "no crash id\00")
(data (i32.const 17578) "no referrer\00")
(data (i32.const 17590) "invalid referrer\00")
(data (i32.const 17607) "no payout\00")
(data (i32.const 17617) "invalid odds\00")
(data (i32.const 17630) "no signature\00")
(data (i32.const 17643) "Crash payout:\00")
(data (i32.const 17657) " id \00")
(data (i32.const 17662) ", bettor \00")
(data (i32.const 17672) "Crash expense:\00")
(data (i32.const 17687) "Crash dividend:\00")
(data (i32.const 17703) "Crash pay lucky to: \00")
(data (i32.const 17724) ", crash id \00")
(data (i32.const 17736) "Crash pool:\00")
(data (i32.const 17748) "Crash airdrop ET:\00")
(data (i32.const 17766) ", to beneficiary \00")
(data (i32.const 17784) ", to referrer \00")
(data (i32.const 17800) "\10\e04\07c\15\d3T")
(data (i32.const 17808) "offered overflow, expected earning is greater than the maximum bonus\00")
(data (i32.const 17877) "must reveal the pending crash before creating a new one\00")
(data (i32.const 17933) "create\00")
(data (i32.const 17940) "can\'t find crash\00")
(data (i32.const 17957) "crash is on betting\00")
(data (i32.const 17977) "reveal\00")
(data (i32.const 17984) "unable to find bet id\00")
(data (i32.const 18006) "unable to find key\00")
(data (i32.const 18025) "crash is not revealed yet\00")
(data (i32.const 18051) "payout\00")
(data (i32.const 18058) "unable to find crash id when erase\00")
(data (i32.const 18096) "\d0U\ae\14c\15\d3T")
(data (i32.const 18104) "##\00")
(data (i32.const 18107) "crash is empty\00")
(data (i32.const 18122) "crash was revealed\00")
(data (i32.const 18141) "not present crash id\00")
(data (i32.const 18162) "referrer can not be self\00")
(data (i32.const 18187) "quantity must be greater than min\00")
(data (i32.const 18221) "crash is expired\00")
(data (i32.const 18240) "0\d3v\tc\15\d3T")
(data (i32.const 18248) "player already bet in this crash\00")
(data (i32.const 18281) "bet\00")
(data (i32.const 18285) "issue\00")
(data (i32.const 18291) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18340) "invalid symbol name\00")
(data (i32.const 18360) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18411) "error reading iterator\00")
(data (i32.const 18434) "read\00")
(data (i32.const 18439) "string is too long to be a valid name\00")
(data (i32.const 18477) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 18544) "character is not in allowed character set for names\00")
(data (i32.const 18596) "\a8H\00\00")
(data (i32.const 18600) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 18633) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 18692) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 18746) "cannot decrement iterator at beginning of table\00")
(data (i32.const 18794) "get\00")
(data (i32.const 18798) "write\00")
(data (i32.const 18804) "cannot create objects in table of another contract\00")
(data (i32.const 18855) "cannot pass end iterator to modify\00")
(data (i32.const 18890) "object passed to modify is not in multi_index\00")
(data (i32.const 18936) "cannot modify objects in table of another contract\00")
(data (i32.const 18987) "updater cannot change primary key when modifying an object\00")
(data (i32.const 19046) "cannot pass end iterator to erase\00")
(data (i32.const 19080) "cannot increment end iterator\00")
(data (i32.const 19110) "object passed to erase is not in multi_index\00")
(data (i32.const 19155) "cannot erase objects in table of another contract\00")
(data (i32.const 19205) "attempt to remove object that was not in multi_index\00")
(data (i32.const 19264) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 19344) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 19601) "malloc_from_freed was designed to only be called after _heap was completely allocated\00write\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "memcpy" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$2))
(import "env" "memset" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$5 (param i64) (result i32)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$13 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$14 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$15 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$16 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$17 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "transaction_size" (func $fimport$19 (result i32)))
(import "env" "read_transaction" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$21 (result i32)))
(import "env" "read_action_data" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$25 (param i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$26 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$27 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$28 (param i32)))
(import "env" "prints_l" (func $fimport$29 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$40 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$41 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$44 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$46 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$47 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$48 (param i32 i32) (result i32)))
(import "env" "assert_sha256" (func $fimport$49 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$50 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$51 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$52 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$53 (param i32 i32 i32)))
(import "env" "__ashlti3" (func $fimport$54 (param i32 i64 i64 i32)))
(import "env" "sha1" (func $fimport$55 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$56 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$57 (param i32 i32 i32)))
(import "env" "recover_key" (func $fimport$58 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$59 (param i32 i32 i32 i32 i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $70))
(export "_Znwj" (func $95))
(export "_ZdlPv" (func $97))
(export "_Znaj" (func $96))
(export "_ZdaPv" (func $98))
(export "_ZnwjSt11align_val_t" (func $99))
(export "_ZnajSt11align_val_t" (func $100))
(export "_ZdlPvSt11align_val_t" (func $101))
(export "_ZdaPvSt11align_val_t" (func $102))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $26 $55 $37 $46 $33 $54 $126 $128)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19693))
(global $global$2 i32 (i32.const 19693))


void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $139(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8268])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $139(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $94 ()
{
	int_32 $0
	int_64 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$0 = [0]
	*([0] + [8200]) = (int_64)1397703940
	*([0] + [8192]) = (int_64)0
	CALL eosio_assert([1], [18291])
	$1 = (uint_64)*([0] + [8200]) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $2
	$3 = [1]
	$4 = $0
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $2
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$5 }
	$3 = [1]
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [18340])
	*([0] + [8216]) = (int_64)5522692
	*([0] + [8208]) = (int_64)0
	CALL eosio_assert([1], [18291])
	$1 = (uint_64)*([0] + [8216]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $2
	$5 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$1 = $2
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$11 }
	$5 = [1]
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($5, [18340])
	return 
	
.LABEL $label$7
	CALL eosio_assert([0], [18340])
	return 
	
.LABEL $label$6
	CALL eosio_assert([0], [18340])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $141($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8268])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $141($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $144($0)
	
.LABEL $label$1
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $65(*($1), *($0 + [4]))
	CALL $65(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [18798])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [18798])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [18798])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18434])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18434])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $122($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $138 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $123 ()
{
	return [8272]
}

void .FUNC $115 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $119($1, $0, [17538])
	CALL $120()
	(unreachable)
}

void .FUNC $122 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $130 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $131 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $130($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $132 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $133 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $131($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_64 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $133($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $123()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $133($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19345]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $132($0, (int_64)0)
	*(CALL $123()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $133($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $133($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $133($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $133($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19345])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19345]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19345]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $133($0)
	$5 = *(($6 + [19345]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $133($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19345]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [16701]))
	$8 = (int_64)0
	$5 = *(($6 + [19345]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19345]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $133($0)
	$5 = *(($6 + [19345]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $133($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19345]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $132($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19345]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19345]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $133($0) + [19345]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $123()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $123()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $123()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $121 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $136 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $120 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	$6 = ($5 + [-24])
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$2 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [52]) == (int_32)$1), [18360])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$1
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4229443000054317056, $2)
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), $3)
	$6 = CALL $43($1, $6)
	CALL eosio_assert(((int_32)*($6 + [52]) == (int_32)$1), [18360])
	*($0 + [4]) = $6
	*($0) = $1
}

void .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $49($0, *($1))
	CALL $49($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [18798])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [7] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $127($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $127($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $127($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $127($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19264]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $127($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $127($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $127($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18411])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $141($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [52]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [48])
	CALL $91(($3 + [40]), ($3 + [32]))
	*($5 + [56]) = $1
	*($5 + [60 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $63(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $144($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [6])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[67108864]) ){ goto $label$3 }
	$6 = [67108863]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [6]) > (uint_32)[33554430]) ){ goto $label$5 }
	$6 = int_32($7 >> [5])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[67108864]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [6]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $122($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [6])))) = *($1)
	*(($4 + [56])) = *(($1 + [56]))
	*(($4 + [48])) = *(($1 + [48]))
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [6]))
	$4 = ($4 + [64])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	float_64 $7
	int_64 $8
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = *($2 + [48])
	if ( ((uint_64)(CASTING uint_64)(uint_32 ((uint_32)[9800000] / (uint_32)$5)) <= (uint_64)$3) ){ goto $label$3 }
	$3 = *($2 + [32])
	*($0) = $3
	*(($6 = ($0 + [8]))) = *(($2 + [40]))
	$7 = ((float_64)((float_64)(CASTING float_64)(uint_32 $5) / (float_64)(float_64)100) * (float_64)(CASTING float_64)(int_64 $3))
	CALL eosio_assert(((float_64)$7 <= (float_64)(float_64)4611686018427387904), [17417])
	CALL eosio_assert(((float_64)$7 >= (float_64)(float_64)-4611686018427387904), [17441])
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$3 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$3
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [18291])
	$3 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$3 = $8
	$0 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$3 = $8
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$0 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $0 ){ goto $label$8 }
	$0 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	CALL eosio_assert($0, [18340])
	$global$0 = ($4 + [144])
	return 
	
.LABEL $label$2
	$3 = (Rounds 0)($7)
	
.LABEL $label$1
	*($0) = $3
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18291])
	*($4 + [80]) = (int_64)3617214756542218240
	*($4 + [72]) = (int_64)6112252634338746384
	CALL $18(($4 + [8]), *($2 + [8]), ($2 + [16]))
	*(($4 + [48])) = *($6)
	$5 = (($4 + [8]) + [8])
	*((($4 + [24]) + [40])) = *($5)
	*($5) = [0]
	*($4 + [24]) = (int_64)6112252634338746384
	*($4 + [32]) = *($2 + [16])
	*($4 + [40]) = *($0)
	*($4 + [56]) = *($4 + [8])
	*($4 + [8]) = (int_64)0
	$2 = CALL $50(($4 + [88]), ($4 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($4 + [24]))
	CALL $32(($4 + [128]), $2)
	$0 = *($4 + [128])
	CALL send_inline($0, (*($4 + [132]) - $0))
	$0 = *($4 + [128])
	if ( ($0 == 0) ){ goto $label$9 }
	*($4 + [132]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$0 = *($2 + [28])
	if ( ($0 == 0) ){ goto $label$10 }
	*(($2 + [32])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$0 = *($2 + [16])
	if ( ($0 == 0) ){ goto $label$11 }
	*(($2 + [20])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( (*(($4 + [56])) & [1]) ){ goto $label$14 }
	if ( (*($4 + [8]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($4 + [64])))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [16])))
	$global$0 = ($4 + [144])
	return 
	
.LABEL $label$12
	$global$0 = ($4 + [144])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $122($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [112])
	$global$0 = $2
	CALL require_auth((int_64)6112252634446868640)
	*((($2 + [64]) + [32])) = [0]
	*($2 + [80]) = (int_64)-1
	*($2 + [88]) = (int_64)0
	$3 = *($0)
	*($2 + [64]) = $3
	*($2 + [72]) = $3
	*((($2 + [24]) + [32])) = [0]
	*($2 + [32]) = $3
	*($2 + [24]) = $3
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	*($2 + [60]) = [0]
	$4 = *($1 + [4])
	$1 = *($1)
	*($2 + [16]) = ($2 + [24])
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$2:
	*($2 + [8]) = *($1)
	CALL $51(($2 + [104]), ($2 + [16]), ($2 + [8]))
	$3 = *($2 + [8])
	$0 = *($2 + [108])
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ((int_64)$3 == (int_64)*($0 + [8])) ){ goto $label$3 }
	
.LABEL $label$4
	CALL $34($2, ($2 + [64]), $3, [18058])
	$5 = *($2)
	$0 = *($2 + [4])
	$6 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($6, [19046])
	CALL eosio_assert($6, [19080])
	$6 = CALL db_next_i64(*($0 + [52]), ($2 + [104]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $27($5, $6)
	
.LABEL $label$5
	CALL $52(($2 + [64]), $0)
	
.LABEL $label$3
	$1 = ($1 + [8])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$2 }
	$6 = *($2 + [48])
	if ( ($6 == 0) ){ goto $label$1 }
	$5 = ($2 + [52])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$8 }
	$1 = *(($2 + [48]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $6
	
.LABEL $label$6
	*($5) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$6 = *($2 + [88])
	if ( ($6 == 0) ){ goto $label$10 }
	$5 = ($2 + [92])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($0 + [16])))
	
.LABEL $label$15
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($2 + [88]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $6
	
.LABEL $label$11
	*($5) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [112])
}

int_32 .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = $1
	
.LOOP $label$3:
	$5 = $3
	$6 = $4
	$3 = *($6 + [4])
	if ( ($3 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = $3
	$3 = *($4)
	if ( $3 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = *($6 + [8])
	if ( ((int_32)*($4) == (int_32)$6) ){ goto $label$4 }
	$6 = ($6 + [8])
	
.LOOP $label$7:
	$3 = *($6)
	$6 = ($3 + [8])
	$4 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($4)) ){ goto $label$7 }
	
.LABEL $label$4
	$3 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[536870911]) ){ goto $label$1 }
	$3 = ($3 << [3])
	$6 = CALL _Znwj($3)
	*($0) = $6
	*(($5 = ($0 + [4]))) = $6
	*(($0 + [8])) = ($6 + $3)
	
.LOOP $label$8:
	$4 = $1
	*($6) = *($4 + [16])
	$3 = *($4 + [4])
	if ( ($3 == 0) ){ goto $label$10 }
	
.LOOP $label$11:
	$1 = $3
	$3 = *($1)
	if ( $3 ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$1 = *($4 + [8])
	if ( ((int_32)*($1) == (int_32)$4) ){ goto $label$9 }
	$4 = ($4 + [8])
	
.LOOP $label$12:
	$3 = *($4)
	$4 = ($3 + [8])
	$1 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($1)) ){ goto $label$12 }
	
.LABEL $label$9
	$6 = ($6 + [8])
	*($5) = $6
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$2
	return $0
	
.LABEL $label$1
	CALL $122($0)
	return (unreachable)
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [19110])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [19155])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19205])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [56]))
	$6 = *($1 + [60])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229443000054317056, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [64]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229443000054317057, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $124 (int_32 $0)
{
}

void .FUNC $128 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $8 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [18360])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $83($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [18360])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	if ( ((uint_32)($3 + [-9]) >= (uint_32)[5]) ){ goto $label$2 }
	$4 = [52]
	goto $label$1 
	
.LABEL $label$2
	$4 = [41]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$92 
	
.LABEL $label$103
	$0 = ($0 + [1])
	$3 = *($0)
	if ( (($3 + [-9]) <= [5]) ){ goto $label$9 }
	$4 = [41]
	goto $label$3 
	
.LABEL $label$102
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$50 }
	$4 = [42]
	goto $label$3 
	
.LABEL $label$101
	if ( ((int_32)$3 != (int_32)[49]) ){ goto $label$8 }
	$4 = [49]
	goto $label$3 
	
.LABEL $label$100
	$3 = [0]
	$4 = [50]
	goto $label$3 
	
.LABEL $label$99
	$5 = ($0 + $3)
	$6 = ($3 + [1])
	$3 = $6
	if ( ((int_32)*(($5 + [1])) == (int_32)[49]) ){ goto $label$4 }
	$4 = [51]
	goto $label$3 
	
.LABEL $label$98
	$0 = ($0 + $6)
	goto $label$7 
	
.LABEL $label$97
	$6 = [0]
	$4 = [44]
	goto $label$3 
	
.LABEL $label$96
	$7 = ((uint_32)((int_32)CALL $138($0) * (int_32)[733]) / (uint_32)[1000])
	$8 = ($7 + [1])
	$9 = CALL _Znwj($8)
	$10 = ($9 + $7)
	$3 = [0]
	$4 = [45]
	goto $label$3 
	
.LABEL $label$95
	*(($9 + $3)) = [0]
	$3 = ($3 + [1])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$6 }
	$4 = [46]
	goto $label$3 
	
.LABEL $label$94
	CALL eosio_assert([1], [16842])
	$11 = ($9 + $8)
	if ( ($8 == 0) ){ goto $label$5 }
	$4 = [47]
	goto $label$3 
	
.LABEL $label$93
	$12 = [0]
	$3 = *($0)
	$5 = ($3 + [-9])
	if ( ((uint_32)$5 > (uint_32)[23]) ){ goto $label$44 }
	$4 = [0]
	goto $label$3 
	
.LABEL $label$92
	if ( ((([1] << $5) & [8388639]) == 0) ){ goto $label$45 }
	goto $label$46 
	
.LABEL $label$91
	CALL eosio_assert(($13 == 0), [16841])
	$12 = $3
	$0 = ($0 + [1])
	$3 = *($0)
	$5 = ($3 + [-9])
	if ( ((uint_32)$5 <= (uint_32)[23]) ){ goto $label$43 }
	$4 = [1]
	goto $label$3 
	
.LABEL $label$90
	if ( ($3 == 0) ){ goto $label$42 }
	$4 = [2]
	goto $label$3 
	
.LABEL $label$89
	$13 = *(($3 + [16880]))
	if ( ((int_32)$13 == (int_32)[-1]) ){ goto $label$41 }
	$4 = [3]
	goto $label$3 
	
.LABEL $label$88
	if ( ((int_32)$3 != (int_32)[49]) ){ goto $label$40 }
	$4 = [4]
	goto $label$3 
	
.LABEL $label$87
	$3 = [0]
	if ( ($12 == 0) ){ goto $label$37 }
	$4 = [6]
	goto $label$3 
	
.LABEL $label$86
	$5 = [0]
	$14 = $9
	$4 = [7]
	goto $label$3 
	
.LABEL $label$85
	$15 = (((int_32)*($3) * (int_32)[58]) + $13)
	*(($3 = ($14 + $7))) = $15
	$3 = ($5 + [1])
	$13 = ((int_32)$15 / (int_32)[256])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$36 }
	$4 = [8]
	goto $label$3 
	
.LABEL $label$84
	$14 = ($14 + [-1])
	$5 = $3
	if ( (((uint_32)($15 + [255]) > (uint_32)[510]) | ($3 <= $12)) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$83
	$3 = *($0)
	$5 = ($3 + [-9])
	if ( ((uint_32)$5 > (uint_32)[23]) ){ goto $label$12 }
	$4 = [36]
	goto $label$3 
	
.LABEL $label$82
	if ( ((([1] << $5) & [8388639]) == 0) ){ goto $label$47 }
	goto $label$48 
	
.LABEL $label$81
	CALL eosio_assert(((int_32)$3 == (int_32)[49]), [16841])
	$0 = ($0 + [1])
	$3 = *($0)
	$5 = ($3 + [-9])
	if ( ((uint_32)$5 <= (uint_32)[23]) ){ goto $label$11 }
	$4 = [37]
	goto $label$3 
	
.LABEL $label$80
	if ( ($3 == 0) ){ goto $label$10 }
	$4 = [38]
	goto $label$3 
	
.LABEL $label$79
	if ( ((int_32)*(($3 + [16880])) != (int_32)[255]) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$78
	$13 = $11
	goto $label$29 
	
.LABEL $label$77
	$12 = [0]
	$13 = $9
	$4 = [13]
	goto $label$3 
	
.LABEL $label$76
	$5 = ($0 + [1])
	$3 = ($3 & [255])
	if ( ((uint_32)($3 + [-9]) >= (uint_32)[5]) ){ goto $label$28 }
	$4 = [35]
	goto $label$3 
	
.LABEL $label$75
	$3 = *($5)
	$5 = ($5 + [1])
	$3 = ($3 & [255])
	if ( (($3 + [-9]) <= [5]) ){ goto $label$27 }
	$4 = [14]
	goto $label$3 
	
.LABEL $label$74
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$49 }
	$4 = [15]
	goto $label$3 
	
.LABEL $label$73
	if ( $3 ){ goto $label$35 }
	$4 = [16]
	goto $label$3 
	
.LABEL $label$72
	$5 = ($9 + ($8 - $12))
	if ( ((int_32)$5 == (int_32)$13) ){ goto $label$26 }
	$4 = [17]
	goto $label$3 
	
.LABEL $label$71
	$3 = $5
	if ( *($5) ){ goto $label$25 }
	$4 = [29]
	goto $label$3 
	
.LABEL $label$70
	$15 = ([0] - $12)
	$3 = [-1]
	$14 = $10
	$4 = [30]
	goto $label$3 
	
.LABEL $label$69
	$5 = $14
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$13 }
	$4 = [31]
	goto $label$3 
	
.LABEL $label$68
	$3 = ($3 + [-1])
	$14 = ($5 + [1])
	if ( (*((($5 + $15) + [2])) == 0) ){ goto $label$14 }
	$4 = [32]
	goto $label$3 
	
.LABEL $label$67
	$3 = (($5 - $12) + [2])
	$5 = (($14 - $12) + [1])
	goto $label$24 
	
.LABEL $label$66
	$3 = [0]
	if ( ($9 == 0) ){ goto $label$30 }
	$4 = [10]
	goto $label$3 
	
.LABEL $label$65
	CALL _ZdlPv($9)
	$4 = [11]
	goto $label$3 
	
.LABEL $label$64
	$global$0 = ($2 + [16])
	return $3
	
.LABEL $label$63
	$3 = $13
	goto $label$23 
	
.LABEL $label$62
	$3 = (($5 - $12) + [2])
	$5 = $3
	$4 = [18]
	goto $label$3 
	
.LABEL $label$61
	$5 = (($11 - $5) + $6)
	$14 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $14) >= (uint_32)$5) ){ goto $label$22 }
	$4 = [25]
	goto $label$3 
	
.LABEL $label$60
	$15 = *($1 + [4])
	$14 = *($1)
	$15 = (*($1 + [4]) - $14)
	$12 = CALL _Znwj($5)
	$0 = ($12 + ($15 - $14))
	$7 = ($0 - $15)
	$5 = ($12 + $5)
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$15 }
	$4 = [28]
	goto $label$3 
	
.LABEL $label$59
	CALL memcpy($7, $14, $15)
	$14 = *($1)
	$4 = [26]
	goto $label$3 
	
.LABEL $label$58
	*($1) = $7
	*(($1 + [4])) = $0
	*(($1 + [8])) = $5
	if ( ($14 == 0) ){ goto $label$21 }
	$4 = [27]
	goto $label$3 
	
.LABEL $label$57
	CALL _ZdlPv($14)
	$4 = [19]
	goto $label$3 
	
.LABEL $label$56
	*($2 + [15]) = [0]
	CALL $10($1, $6, ($2 + [15]))
	if ( ((int_32)$3 == (int_32)$13) ){ goto $label$20 }
	$4 = [20]
	goto $label$3 
	
.LABEL $label$55
	$13 = ($10 + [1])
	$7 = ($1 + [8])
	$14 = ($1 + [4])
	$4 = [21]
	goto $label$3 
	
.LABEL $label$54
	$5 = ($3 + [1])
	$15 = *($14)
	if ( ((int_32)$15 == (int_32)*($7)) ){ goto $label$16 }
	$4 = [22]
	goto $label$3 
	
.LABEL $label$53
	*($15) = *($3)
	*($14) = (*($14) + [1])
	$3 = $5
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$52
	CALL $11($1, $3)
	$3 = $5
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$19 }
	$4 = [23]
	goto $label$3 
	
.LABEL $label$51
	$3 = [1]
	if ( $9 ){ goto $label$31 }
	goto $label$32 
	
.LABEL $label$50
	$4 = [52]
	goto $label$3 
	
.LABEL $label$49
	$4 = [35]
	goto $label$3 
	
.LABEL $label$48
	$4 = [40]
	goto $label$3 
	
.LABEL $label$47
	$4 = [37]
	goto $label$3 
	
.LABEL $label$46
	$4 = [12]
	goto $label$3 
	
.LABEL $label$45
	$4 = [1]
	goto $label$3 
	
.LABEL $label$44
	$4 = [1]
	goto $label$3 
	
.LABEL $label$43
	$4 = [0]
	goto $label$3 
	
.LABEL $label$42
	$4 = [12]
	goto $label$3 
	
.LABEL $label$41
	$4 = [9]
	goto $label$3 
	
.LABEL $label$40
	$4 = [6]
	goto $label$3 
	
.LABEL $label$39
	$4 = [7]
	goto $label$3 
	
.LABEL $label$38
	$4 = [5]
	goto $label$3 
	
.LABEL $label$37
	$4 = [5]
	goto $label$3 
	
.LABEL $label$36
	$4 = [5]
	goto $label$3 
	
.LABEL $label$35
	$4 = [9]
	goto $label$3 
	
.LABEL $label$34
	$4 = [9]
	goto $label$3 
	
.LABEL $label$33
	$4 = [39]
	goto $label$3 
	
.LABEL $label$32
	$4 = [11]
	goto $label$3 
	
.LABEL $label$31
	$4 = [10]
	goto $label$3 
	
.LABEL $label$30
	$4 = [11]
	goto $label$3 
	
.LABEL $label$29
	$4 = [13]
	goto $label$3 
	
.LABEL $label$28
	$4 = [14]
	goto $label$3 
	
.LABEL $label$27
	$4 = [35]
	goto $label$3 
	
.LABEL $label$26
	$4 = [34]
	goto $label$3 
	
.LABEL $label$25
	$4 = [18]
	goto $label$3 
	
.LABEL $label$24
	$4 = [18]
	goto $label$3 
	
.LABEL $label$23
	$4 = [18]
	goto $label$3 
	
.LABEL $label$22
	$4 = [19]
	goto $label$3 
	
.LABEL $label$21
	$4 = [19]
	goto $label$3 
	
.LABEL $label$20
	$4 = [23]
	goto $label$3 
	
.LABEL $label$19
	$4 = [21]
	goto $label$3 
	
.LABEL $label$18
	$4 = [23]
	goto $label$3 
	
.LABEL $label$17
	$4 = [21]
	goto $label$3 
	
.LABEL $label$16
	$4 = [24]
	goto $label$3 
	
.LABEL $label$15
	$4 = [26]
	goto $label$3 
	
.LABEL $label$14
	$4 = [30]
	goto $label$3 
	
.LABEL $label$13
	$4 = [33]
	goto $label$3 
	
.LABEL $label$12
	$4 = [37]
	goto $label$3 
	
.LABEL $label$11
	$4 = [36]
	goto $label$3 
	
.LABEL $label$10
	$4 = [40]
	goto $label$3 
	
.LABEL $label$9
	$4 = [52]
	goto $label$3 
	
.LABEL $label$8
	$4 = [43]
	goto $label$3 
	
.LABEL $label$7
	$4 = [44]
	goto $label$3 
	
.LABEL $label$6
	$4 = [45]
	goto $label$3 
	
.LABEL $label$5
	$4 = [48]
	goto $label$3 
	
.LABEL $label$4
	$4 = [50]
	goto $label$3 
	return $4
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$4 = ($3 & [1])
	CALL $145(($2 + [48]), ( *($0 + [8]) ? ($0 + [1]) : $4 ), ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 ))
	$5 = *($2 + [48])
	*($2 + [27]) = (uint_64)$5 >> (uint_64)(int_64)32)
	*($2 + [26]) = (uint_64)$5 >> (uint_64)(int_64)40)
	*($2 + [25]) = (uint_64)$5 >> (uint_64)(int_64)48)
	*($2 + [24]) = (uint_64)$5 >> (uint_64)(int_64)56)
	$6 = *($2 + [56])
	*($2 + [19]) = (uint_64)$6 >> (uint_64)(int_64)32)
	*($2 + [18]) = (uint_64)$6 >> (uint_64)(int_64)40)
	*($2 + [17]) = (uint_64)$6 >> (uint_64)(int_64)48)
	*($2 + [16]) = (uint_64)$6 >> (uint_64)(int_64)56)
	$0 = (CASTING uint_32)(uint_64 $5)
	*($2 + [31]) = $0
	*($2 + [30]) = uint_32($0 >> [8])
	*($2 + [29]) = uint_32($0 >> [16])
	*($2 + [28]) = uint_32($0 >> [24])
	$0 = (CASTING uint_32)(uint_64 $6)
	*($2 + [23]) = $0
	*($2 + [22]) = uint_32($0 >> [8])
	*($2 + [21]) = uint_32($0 >> [16])
	*($2 + [20]) = uint_32($0 >> [24])
	$5 = *((($2 + [48]) + [24]))
	*($2 + [39]) = $5
	$6 = *($2 + [64])
	*($2 + [43]) = (uint_64)$6 >> (uint_64)(int_64)32)
	*($2 + [42]) = (uint_64)$6 >> (uint_64)(int_64)40)
	*($2 + [41]) = (uint_64)$6 >> (uint_64)(int_64)48)
	*($2 + [40]) = (uint_64)$6 >> (uint_64)(int_64)56)
	*($2 + [35]) = (uint_64)$5 >> (uint_64)(int_64)32)
	*($2 + [34]) = (uint_64)$5 >> (uint_64)(int_64)40)
	*($2 + [33]) = (uint_64)$5 >> (uint_64)(int_64)48)
	*($2 + [32]) = (uint_64)$5 >> (uint_64)(int_64)56)
	$0 = (CASTING uint_32)(uint_64 $5)
	*($2 + [38]) = uint_32($0 >> [8])
	*($2 + [37]) = uint_32($0 >> [16])
	*($2 + [36]) = uint_32($0 >> [24])
	$0 = (CASTING uint_32)(uint_64 $6)
	*($2 + [47]) = $0
	*($2 + [46]) = uint_32($0 >> [8])
	*($2 + [45]) = uint_32($0 >> [16])
	*($2 + [44]) = uint_32($0 >> [24])
	CALL $1($2, $1)
	CALL eosio_assert(((int_32)(*($2 + [4]) - *($2)) == (int_32)[32]), [16796])
	CALL eosio_assert((CALL $137(($2 + [16]), *($2), [32]) == 0), [16822])
	$0 = *($2)
	if ( ($0 == 0) ){ goto $label$1 }
	*($2 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [80])
}

int_32 .FUNC $7 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [18360])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $80($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [18360])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($2 + [1])
	$6 = ($1 + [1])
	$7 = *($1 + [4])
	$8 = *($1)
	$9 = ($2 + [4])
	
.LOOP $label$1:
	$10 = ($8 & [1])
	$7 = ( $7 ? uint_32(($8 & [254]) >> [1]) : $10 )
	if ( ($7 <= $4) ){ goto $label$3 }
	$11 = $4
	$13 = ($8 & [1])
	$8 = *($2)
	$8 = ( *($9) ? uint_32($8 >> [1]) : $13 )
	if ( ($8 == 0) ){ goto $label$2 }
	$7 = ($12 + $4)
	$12 = ( *(($1 + [8])) ? $6 : $10 )
	$10 = ($12 + $7)
	$11 = ($10 - $7)
	if ( ((int_32)$11 < (int_32)$8) ){ goto $label$3 }
	$14 = ( *(($2 + [8])) ? $5 : $13 )
	$13 = *($14)
	
.LOOP $label$4:
	$11 = (($11 - $8) + [1])
	if ( ($11 == 0) ){ goto $label$3 }
	$11 = CALL $136($7, $13, $11)
	if ( ($11 == 0) ){ goto $label$3 }
	if ( (CALL $137($11, $14, $8) == 0) ){ goto $label$5 }
	$7 = ($11 + [1])
	$11 = ($10 - $7)
	if ( ((int_32)$11 >= (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$3 }
	$11 = ($11 - $12)
	if ( ((int_32)$11 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = *($1)
	if ( ($8 & [1]) ){ goto $label$6 }
	$11 = uint_32($8 >> [1])
	goto $label$2 
	
.LABEL $label$6
	$11 = *(($1 + [4]))
	
.LABEL $label$2
	$8 = CALL $105($3, $1, $4, ($11 - $4), $1)
	$4 = ($0 + [4])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)*(($0 + [8]))) ){ goto $label$8 }
	CALL $104($7, $8)
	*($4) = (*($4) + [12])
	goto $label$7 
	
.LABEL $label$8
	CALL $5($0, $8)
	
.LABEL $label$7
	$4 = *($2)
	$10 = *($9)
	if ( ((*($3) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$9
	$8 = *($1)
	$7 = *(($1 + [4]))
	$13 = ( $7 ? uint_32($8 >> [1]) : ($8 & [1]) )
	if ( ((uint_32)$11 >= (uint_32)$13) ){ goto $label$10 }
	$4 = (( $10 ? uint_32($4 >> [1]) : ($4 & [1]) ) + $11)
	if ( ($4 <= $13) ){ goto $label$1 }
	
.LABEL $label$10
	$global$0 = ($3 + [16])
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $104(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	$0 = ($0 & [1])
	$0 = *($1)
	$4 = ($0 & [1])
	$0 = *($2)
	$6 = uint_32($0 >> [1])
	$4 = *($1)
	$5 = CALL $105($2, $0, [0], ( *($1 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ), $0)
	$7 = ( *($5 + [4]) ? $6 : $4 )
	if ( ((int_32)$7 != (int_32)( *($1 + [4]) ? uint_32($0 >> [1]) : $0 )) ){ goto $label$6 }
	$1 = ( *($1 + [8]) ? ($1 + [1]) : $0 )
	$0 = ($5 + [1])
	if ( $4 ){ goto $label$7 }
	if ( ($7 == 0) ){ goto $label$5 }
	$4 = ([0] - $6)
	
.LOOP $label$8:
	if ( ((int_32)*($0) != (int_32)*($1)) ){ goto $label$3 }
	$3 = [1]
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$4 = ($4 + [1])
	if ( $4 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$7
	if ( ($7 == 0) ){ goto $label$4 }
	$3 = (CALL $137(( *($5 + [8]) ? $0 : $4 ), $1, $7) == 0)
	$4 = (*($2) & [1])
	
.LABEL $label$6
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	$global$0 = ($2 + [16])
	return [1]
	
.LABEL $label$4
	$3 = [1]
	goto $label$2 
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return [0]
	
.LABEL $label$2
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $3
}

void .FUNC memory ()
{
	CALL $94()
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	CALL eosio_assert((((int_32)$4 ^ (int_32)[-1]) & [1]), [16754])
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = uint_32($4 >> [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = CALL _Znwj($3)
	$6 = ($5 + $3)
	$3 = *($0)
	$7 = ($0 + [4])
	$8 = (*($7) - $3)
	$9 = ($5 - $8)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($9, $3, $8)
	$3 = *($0)
	
.LABEL $label$2
	*($0) = $9
	*($7) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	
.LABEL $label$1
	if ( ($4 == 0) ){ goto $label$3 }
	$10 = ($1 + [1])
	$11 = [0]
	$12 = ($1 + [8])
	
.LOOP $label$4:
	$6 = *((( *($12) ? $10 : (*($1) & [1]) ) + $11))
	$5 = [16]
	$3 = [16684]
	
.LOOP $label$5:
	$9 = ((int_32)*($9) < (int_32)$6)
	$8 = ((int_32)$5 / (int_32)[2])
	$9 = ($3 + $8)
	$3 = ( ($9 + [1]) ? $3 : $9 )
	$5 = ( (($5 + [-1]) - $8) ? $8 : $9 )
	if ( $5 ){ goto $label$5 }
	CALL eosio_assert(((int_32)$3 != (int_32)[16700]), [16774])
	$7 = *((( *($12) ? $10 : (*($1) & [1]) ) + ($11 | [1])))
	$8 = [16]
	$5 = [16684]
	
.LOOP $label$6:
	$6 = ((int_32)*($6) < (int_32)$7)
	$9 = ((int_32)$8 / (int_32)[2])
	$6 = ($5 + $9)
	$5 = ( ($6 + [1]) ? $5 : $6 )
	$8 = ( (($8 + [-1]) - $9) ? $9 : $6 )
	if ( $8 ){ goto $label$6 }
	CALL eosio_assert(((int_32)$5 != (int_32)[16700]), [16774])
	$5 = (($5 - [16684]) | (($3 - [16684]) << [4]))
	*($2 + [15]) = $5
	$3 = ($0 + [4])
	$8 = *($3)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [8]))) ){ goto $label$7 }
	*($8) = $5
	*($3) = (*($3) + [1])
	$11 = ($11 + [2])
	if ( ($11 <= $4) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$7
	CALL $2($0, ($2 + [15]))
	$11 = ($11 + [2])
	if ( ($11 <= $4) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	float_64 $11
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*(($2 + [40])) = [0]
	*($2 + [8]) = (int_64)6112252634648024368
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$4 = (int_64)21573
	*($2 + [16]) = (int_64)21573
	$5 = *(CALL $7(($2 + [8]), (int_64)21573, [18006]))
	$6 = *($2 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = ($2 + [36])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$5 }
	CALL _ZdlPv($9)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	$8 = *(($2 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$8 = $6
	
.LABEL $label$2
	*($7) = $6
	CALL _ZdlPv($8)
	
.LABEL $label$1
	*($0 + [8]) = (int_64)5522692
	*($0) = (int_64)0
	CALL eosio_assert([1], [18291])
	
.LOOP $label$7:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$10 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$4 = $10
	$6 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = $10
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$8 = ((int_32)$3 < (int_32)[6])
	$9 = ($3 + [1])
	$3 = $9
	if ( $8 ){ goto $label$9 }
	$6 = [1]
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert($6, [18340])
	if ( ((int_64)$5 > (int_64)1280000000000) ){ goto $label$15 }
	$11 = ((float_64)(CASTING float_64)(int_64 *($1)) * (float_64)(float_64)2.5)
	if ( ((float_64)(float_64)|$11| < (float_64)(float_64)9223372036854775808) ){ goto $label$14 }
	$4 = (int_64)-9223372036854775808
	goto $label$13 
	
.LABEL $label$15
	if ( ((int_64)$5 > (int_64)5120000000000) ){ goto $label$12 }
	$11 = ((float_64)(CASTING float_64)(int_64 *($1)) * (float_64)(float_64)1.25)
	if ( ((float_64)(float_64)|$11| < (float_64)(float_64)9223372036854775808) ){ goto $label$11 }
	$4 = (int_64)-9223372036854775808
	goto $label$10 
	
.LABEL $label$14
	$4 = (Rounds 0)($11)
	
.LABEL $label$13
	*($0) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18291])
	
.LABEL $label$12
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$11
	$4 = (Rounds 0)($11)
	
.LABEL $label$10
	*($0) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18291])
	$global$0 = ($2 + [48])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [112])
	$global$0 = $2
	if ( *([0] + [8264]) ){ goto $label$1 }
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$3 = CALL $138([17466])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($2 + [8]) = ($3 << [1])
	$4 = (($2 + [8]) | [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [8]) = ($5 | [1])
	*($2 + [16]) = $4
	*($2 + [12]) = $3
	
.LABEL $label$4
	CALL memcpy($4, [17466], $3)
	
.LABEL $label$3
	*(($4 + $3)) = [0]
	CALL $13([8224], ($2 + [8]), [1])
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($2 + [16]))
	
.LABEL $label$6
	*([0] + [8264]) = [1]
	goto $label$1 
	
.LABEL $label$2
	CALL $103(($2 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$4 = ($3 & [1])
	CALL $145(($2 + [80]), ( *($0 + [8]) ? ($0 + [1]) : $4 ), ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 ))
	CALL $12(($2 + [8]), $1, [1])
	CALL $147(($2 + [80]), ($2 + [8]), [8224])
	$global$0 = ($2 + [112])
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	$5 = CALL $138([17536])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	*($4 + [32]) = ($5 << [1])
	$6 = (($4 + [32]) | [1])
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [32]) = ($7 | [1])
	*($4 + [40]) = $6
	*($4 + [36]) = $5
	
.LABEL $label$8
	CALL memcpy($6, [17536], $5)
	
.LABEL $label$7
	*(($6 + $5)) = [0]
	CALL $4(($4 + [48]), $0, ($4 + [32]))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($4 + [40]))
	
.LABEL $label$10
	CALL eosio_assert(((int_32)(*($4 + [52]) - *($4 + [48])) == (int_32)[48]), [17553])
	$6 = *($4 + [32])
	$5 = CALL $104(($4 + [32]), *($4 + [48]))
	CALL eosio_assert(((int_32)( *($5 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) != (int_32)[0]), [17566])
	*($1) = (CASTING uint_64)(uint_32 CALL $117($5, [0], [10]))
	CALL $106($5, (*($4 + [48]) + [12]))
	$6 = *($4 + [32])
	CALL eosio_assert(((int_32)( *($5 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) != (int_32)[0]), [17578])
	$6 = *($4 + [32])
	$0 = ($6 & [1])
	*($4 + [24]) = ( *($5 + [8]) ? ($5 + [1]) : $0 )
	*($4 + [28]) = ( *($5 + [4]) ? uint_32($6 >> [1]) : $0 )
	*($4) = *($4 + [24])
	$8 = *(CALL $17(($4 + [8]), $4))
	*($2) = $8
	CALL eosio_assert(CALL $fimport$5($8), [17590])
	CALL $106($5, (*($4 + [48]) + [24]))
	$6 = *($4 + [32])
	CALL eosio_assert(((int_32)( *($5 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) != (int_32)[0]), [17607])
	$6 = CALL $117($5, [0], [10])
	*($3) = $6
	CALL eosio_assert((($6 + [-105]) <= [99896]), [17617])
	CALL $106($5, (*($4 + [48]) + [36]))
	$6 = *($4 + [32])
	CALL eosio_assert(((int_32)( *($5 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) != (int_32)[0]), [17630])
	$6 = CALL $104(($4 + [8]), *($4 + [48]))
	CALL $111($6, [17536])
	$1 = *($0 + [12])
	$2 = ($1 & [1])
	$0 = *($4 + [48])
	CALL $112($6, ( *(($0 + [20])) ? ($0 + [13]) : $2 ), ( *(($0 + [16])) ? uint_32($1 >> [1]) : $2 ))
	CALL $111($6, [17536])
	$1 = *($0 + [24])
	$2 = ($1 & [1])
	$0 = *($4 + [48])
	CALL $112($6, ( *(($0 + [32])) ? ($0 + [25]) : $2 ), ( *(($0 + [28])) ? uint_32($1 >> [1]) : $2 ))
	CALL $15($6, $5)
	if ( (*($4 + [8]) & [1]) ){ goto $label$12 }
	if ( (*($4 + [32]) & [1]) ){ goto $label$11 }
	goto $label$5 
	
.LABEL $label$12
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($5 + [8])))
	$0 = *($4 + [48])
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	CALL $103(($4 + [32]))
	
.LABEL $label$5
	$0 = *($4 + [48])
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = *($4 + [52])
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$2 }
	
.LOOP $label$13:
	$5 = ($6 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$14
	$6 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$13 }
	$5 = *($4 + [48])
	goto $label$1 
	
.LABEL $label$3
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$2
	$5 = $0
	
.LABEL $label$1
	*($4 + [52]) = $0
	CALL _ZdlPv($5)
	$global$0 = ($4 + [64])
	(unreachable)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [18439])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [18544])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [18477])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [18544])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL _ZdlPv($4)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($3 << [1])
	$5 = ( $1 ? $4 : ($4 <= $1) )
	
.LABEL $label$6
	$4 = CALL _Znwj($5)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $5)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = *($2)
	$4 = (*($0) + [1])
	*($0) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $4)
	$5 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($5 == 0) ){ goto $label$8 }
	CALL memset($4, *($2), $5)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$4 = ($0 + [4])
	$0 = *($4)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($4) + [1])
	*($4) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $122($0)
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [144])
	$global$0 = $3
	$4 = [0]
	$5 = CALL $113($1, [95], [0])
	CALL eosio_assert(((int_32)$5 != (int_32)[-1]), [17136])
	$6 = CALL $105(($3 + [128]), $1, [0], $5, $1)
	$8 = *($3 + [128])
	$7 = CALL $138([17162])
	if ( ((int_32)$7 != (int_32)( *($6 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$1 }
	$4 = (CALL $114($6, [0], [-1], [17162], $7) == 0)
	
.LABEL $label$1
	CALL eosio_assert($4, [17166])
	$8 = ($5 + [1])
	$4 = CALL $113($1, [95], $8)
	CALL eosio_assert(((int_32)$4 != (int_32)[-1]), [17199])
	$5 = CALL $105(($3 + [112]), $1, $8, ($4 + ((int_32)$5 ^ (int_32)[-1])), $1)
	$8 = *($3 + [112])
	$7 = CALL $138([17221])
	if ( ((int_32)$7 != (int_32)( *($5 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$4 }
	if ( (CALL $114($5, [0], [-1], [17221], $7) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = [0]
	$7 = *($3 + [112])
	$9 = CALL $138([17224])
	if ( ((int_32)$9 != (int_32)( *(($5 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	$8 = (CALL $114($5, [0], [-1], [17224], $9) == 0)
	goto $label$2 
	
.LABEL $label$3
	$8 = [1]
	
.LABEL $label$2
	CALL eosio_assert($8, [17227])
	$8 = [0]
	$7 = *($3 + [112])
	$9 = CALL $138([17221])
	if ( ((int_32)$9 != (int_32)( *(($5 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$5 }
	$8 = (CALL $114($5, [0], [-1], [17221], $9) == 0)
	
.LABEL $label$5
	$1 = *($3 + [96])
	$4 = CALL $105(($3 + [96]), $1, ($4 + [1]), [-1], $1)
	CALL eosio_assert(((int_32)( *($4 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) ) != (int_32)[0]), [17248])
	*($3 + [88]) = [0]
	*($3 + [80]) = (int_64)0
	CALL eosio_assert(CALL $9(( *($4 + [8]) ? ($4 + [1]) : (*($3 + [96]) & [1]) ), ($3 + [80])), [17270])
	*($0) = [0]
	CALL eosio_assert(((int_32)(*($3 + [84]) - *($3 + [80])) == (int_32)[69]), [17294])
	*($0) = ((int_32)$8 ^ (int_32)[1])
	$1 = *($3 + [80])
	*($0 + [4 align=1]) = *($1)
	*(($0 + [12])) = *($1 + [8 align=1])
	*(($0 + [16])) = *($1 + [12 align=1])
	*(($0 + [24])) = *($1 + [20 align=1])
	*(($0 + [32])) = *($1 + [28 align=1])
	*(($0 + [36])) = *($1 + [32 align=1])
	*(($0 + [38])) = *($1 + [34])
	*(($0 + [39])) = *($1 + [35])
	*(($0 + [40])) = *($1 + [36])
	*(($0 + [41])) = *($1 + [37])
	*(($0 + [42])) = *($1 + [38])
	*(($0 + [43])) = *($1 + [39])
	*(($0 + [44])) = *($1 + [40])
	*(($0 + [45])) = *($1 + [41])
	*(($0 + [46])) = *($1 + [42])
	*(($0 + [47])) = *($1 + [43])
	*(($0 + [48])) = *($1 + [44])
	*(($0 + [65])) = *($1 + [61 align=1])
	*(($0 + [49])) = *($1 + [45 align=1])
	*(($0 + [57])) = *($1 + [53 align=1])
	*(($0 + [59])) = *($1 + [55 align=1])
	*(($0 + [63])) = *($1 + [59 align=1])
	if ( ($2 == 0) ){ goto $label$6 }
	CALL memmove(($3 + [72]), (*($3 + [84]) + [-4]), [4])
	*(($0 = *($3 + [80])) + [65]) = ( [75] ? [82] : $8 )
	*($0 + [66]) = [49]
	CALL $146(($3 + [32]), $0, [67])
	$10 = *($3 + [32])
	*($3 + [19]) = (uint_64)$10 >> (uint_64)(int_64)32)
	*($3 + [18]) = (uint_64)$10 >> (uint_64)(int_64)40)
	*($3 + [17]) = (uint_64)$10 >> (uint_64)(int_64)48)
	*($3 + [16]) = (uint_64)$10 >> (uint_64)(int_64)56)
	$11 = *($3 + [40])
	*($3 + [11]) = (uint_64)$11 >> (uint_64)(int_64)32)
	*($3 + [10]) = (uint_64)$11 >> (uint_64)(int_64)40)
	*($3 + [9]) = (uint_64)$11 >> (uint_64)(int_64)48)
	*($3 + [8]) = (uint_64)$11 >> (uint_64)(int_64)56)
	$0 = (CASTING uint_32)(uint_64 $10)
	*($3 + [23]) = $0
	*($3 + [22]) = uint_32($0 >> [8])
	*($3 + [21]) = uint_32($0 >> [16])
	*($3 + [20]) = uint_32($0 >> [24])
	$0 = (CASTING uint_32)(uint_64 $11)
	*($3 + [15]) = $0
	*($3 + [14]) = uint_32($0 >> [8])
	*($3 + [13]) = uint_32($0 >> [16])
	*($3 + [12]) = uint_32($0 >> [24])
	$10 = *((($3 + [32]) + [24]))
	*($3 + [27]) = (uint_64)$10 >> (uint_64)(int_64)32)
	*($3 + [26]) = (uint_64)$10 >> (uint_64)(int_64)40)
	*($3 + [25]) = (uint_64)$10 >> (uint_64)(int_64)48)
	*($3 + [24]) = (uint_64)$10 >> (uint_64)(int_64)56)
	CALL eosio_assert((CALL $137(($3 + [72]), ($3 + [8]), [4]) == 0), [17312])
	
.LABEL $label$6
	$0 = *($3 + [80])
	if ( ($0 == 0) ){ goto $label$7 }
	*($3 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( (*($3 + [96]) & [1]) ){ goto $label$12 }
	if ( (*($3 + [112]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($3 + [128]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($3 + [144])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [128])
	$global$0 = $3
	*(($3 + [120])) = [0]
	*($3 + [112]) = (int_64)0
	$4 = CALL $138([17340])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [112]) = ($4 << [1])
	$5 = (($3 + [112]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [112]) = ($6 | [1])
	*($3 + [120]) = $5
	*($3 + [116]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [17340], $4)
	
.LABEL $label$3
	$7 = [0]
	*(($5 + $4)) = [0]
	$4 = ($4 & [1])
	$4 = *($3 + [112])
	$6 = ($4 & [1])
	$4 = *($3 + [32])
	$9 = uint_32($4 >> [1])
	$8 = CALL $105(($3 + [32]), $1, [0], ( *($3 + [116]) ? uint_32($4 >> [1]) : ($4 & [1]) ), $1)
	$10 = ( *($8 + [4]) ? $9 : $6 )
	if ( ((int_32)$10 != (int_32)( *($3 + [116]) ? uint_32($4 >> [1]) : $4 )) ){ goto $label$6 }
	$4 = ( *($3 + [120]) ? (($3 + [112]) | [1]) : $4 )
	$5 = ($8 + [1])
	if ( $6 ){ goto $label$9 }
	if ( ($10 == 0) ){ goto $label$8 }
	$6 = ([0] - $9)
	
.LOOP $label$10:
	if ( ((int_32)*($5) != (int_32)*($4)) ){ goto $label$7 }
	$7 = [1]
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	$6 = ($6 + [1])
	if ( $6 ){ goto $label$10 }
	goto $label$6 
	
.LABEL $label$9
	if ( ($10 == 0) ){ goto $label$8 }
	$7 = (CALL $137(( *($8 + [8]) ? $5 : $6 ), $4, $10) == 0)
	goto $label$6 
	
.LABEL $label$8
	$7 = [1]
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [17344])
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$11
	$4 = *($3 + [112])
	$5 = CALL $105(($3 + [96]), $1, ( *($3 + [116]) ? uint_32($4 >> [1]) : ($4 & [1]) ), [-1], $1)
	*($3 + [88]) = [0]
	*($3 + [80]) = (int_64)0
	CALL eosio_assert(CALL $9(( *($5 + [8]) ? ($5 + [1]) : (*($3 + [96]) & [1]) ), ($3 + [80])), [17363])
	*($0) = [0]
	CALL eosio_assert(((int_32)(*($3 + [84]) - *($3 + [80])) == (int_32)[37]), [17344])
	$4 = *($3 + [80])
	*($0 + [4 align=1]) = *($4)
	*(($0 + [12])) = *($4 + [8 align=1])
	*(($0 + [16])) = *($4 + [12 align=1])
	*(($0 + [24])) = *($4 + [20 align=1])
	*(($0 + [32])) = *($4 + [28 align=1])
	*(($0 + [36])) = *($4 + [32])
	if ( ($2 == 0) ){ goto $label$12 }
	CALL memmove(($3 + [72]), (*($3 + [84]) + [-4]), [4])
	CALL $146(($3 + [32]), *($3 + [80]), [33])
	$11 = *($3 + [32])
	*($3 + [19]) = (uint_64)$11 >> (uint_64)(int_64)32)
	*($3 + [18]) = (uint_64)$11 >> (uint_64)(int_64)40)
	*($3 + [17]) = (uint_64)$11 >> (uint_64)(int_64)48)
	*($3 + [16]) = (uint_64)$11 >> (uint_64)(int_64)56)
	$12 = *($3 + [40])
	*($3 + [11]) = (uint_64)$12 >> (uint_64)(int_64)32)
	*($3 + [10]) = (uint_64)$12 >> (uint_64)(int_64)40)
	*($3 + [9]) = (uint_64)$12 >> (uint_64)(int_64)48)
	*($3 + [8]) = (uint_64)$12 >> (uint_64)(int_64)56)
	$4 = (CASTING uint_32)(uint_64 $11)
	*($3 + [23]) = $4
	*($3 + [22]) = uint_32($4 >> [8])
	*($3 + [21]) = uint_32($4 >> [16])
	*($3 + [20]) = uint_32($4 >> [24])
	$4 = (CASTING uint_32)(uint_64 $12)
	*($3 + [15]) = $4
	*($3 + [14]) = uint_32($4 >> [8])
	*($3 + [13]) = uint_32($4 >> [16])
	*($3 + [12]) = uint_32($4 >> [24])
	$11 = *((($3 + [32]) + [24]))
	*($3 + [27]) = (uint_64)$11 >> (uint_64)(int_64)32)
	*($3 + [26]) = (uint_64)$11 >> (uint_64)(int_64)40)
	*($3 + [25]) = (uint_64)$11 >> (uint_64)(int_64)48)
	*($3 + [24]) = (uint_64)$11 >> (uint_64)(int_64)56)
	CALL eosio_assert((CALL $137(($3 + [72]), ($3 + [8]), [4]) == 0), [17388])
	
.LABEL $label$12
	$4 = *($3 + [80])
	if ( ($4 == 0) ){ goto $label$13 }
	*($3 + [84]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( (*($3 + [96]) & [1]) ){ goto $label$15 }
	if ( (*($3 + [112]) & [1]) ){ goto $label$14 }
	goto $label$1 
	
.LABEL $label$15
	CALL _ZdlPv(*(($5 + [8])))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$14
	CALL _ZdlPv(*($3 + [120]))
	$global$0 = ($3 + [128])
	return (unreachable)
	
.LABEL $label$2
	CALL $103(($3 + [112]))
	
.LABEL $label$1
	$global$0 = ($3 + [128])
}

int_32 .FUNC $75 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $141($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [88]))) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [120]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $78(($4 + [24]), ($4 + [120]))
	*(($9 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($3 = (($4 + [104]) + [8]))) = *($9)
	*($4 + [104]) = *($4 + [8])
	$10 = *($3)
	*(($9 = (($4 + [120]) + [8]))) = $10
	*(($4 + [48])) = $10
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [104])
	*($4 + [40]) = $0
	*($4 + [120]) = $0
	*($3) = *($8)
	*($4 + [104]) = *($4 + [80])
	$0 = *($4 + [96])
	$1 = *($4 + [72])
	*($9) = *($3)
	*($4 + [136]) = $1
	*($4 + [120]) = *($4 + [104])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [136])), (int_32 ($4 + [120])), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $144($2)
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $138([17643])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [17643], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	CALL $111($0, [17657])
	CALL $118(($3 + [16]), $1)
	$4 = *($3 + [16])
	$5 = ($4 & [1])
	CALL $112($0, ( *($3 + [24]) ? (($3 + [16]) | [1]) : $5 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	CALL $111($0, [17662])
	$1 = *($2)
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$9 }
	$5 = [0]
	$2 = *([0] + [18596])
	
.LOOP $label$11:
	*((($3 + [16]) + ($4 = $5))) = *(($2 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$5 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$10 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3) = ($5 << [1])
	$2 = ($3 | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$4 = ($3 | [1])
	$5 = $4
	goto $label$6 
	
.LABEL $label$8
	$6 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $2
	*($3 + [4]) = $5
	
.LABEL $label$7
	$6 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$12:
	*(($2 + $4)) = *((($3 + [16]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$12 }
	$5 = ($2 + $5)
	$4 = ($3 | [1])
	
.LABEL $label$6
	*($5) = [0]
	$5 = *($3)
	$2 = ($5 & [1])
	CALL $112($0, ( *($3 + [8]) ? $4 : $2 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $2 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$13
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $103($0)
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $138([17672])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [17672], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	CALL $111($0, [17657])
	CALL $118(($3 + [16]), $1)
	$4 = *($3 + [16])
	$5 = ($4 & [1])
	CALL $112($0, ( *($3 + [24]) ? (($3 + [16]) | [1]) : $5 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	CALL $111($0, [17662])
	$1 = *($2)
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$9 }
	$5 = [0]
	$2 = *([0] + [18596])
	
.LOOP $label$11:
	*((($3 + [16]) + ($4 = $5))) = *(($2 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$5 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$10 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3) = ($5 << [1])
	$2 = ($3 | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$4 = ($3 | [1])
	$5 = $4
	goto $label$6 
	
.LABEL $label$8
	$6 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $2
	*($3 + [4]) = $5
	
.LABEL $label$7
	$6 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$12:
	*(($2 + $4)) = *((($3 + [16]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$12 }
	$5 = ($2 + $5)
	$4 = ($3 | [1])
	
.LABEL $label$6
	*($5) = [0]
	$5 = *($3)
	$2 = ($5 & [1])
	CALL $112($0, ( *($3 + [8]) ? $4 : $2 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $2 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$13
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $103($0)
}

int_64 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$2 = *($0)
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	*($1) = (int_64)0
	$3 = CALL db_find_i64($2, $2, (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $66(($1 + [8]), $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)($1 + [8])), [18360])
	goto $label$1 
	
.LABEL $label$2
	$3 = $1
	
.LABEL $label$1
	*($1) = ((int_64)*($3) + (int_64)1)
	CALL $67(($1 + [8]), $1, *($0))
	$2 = *($1)
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = ($1 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($1 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($1 + [48])
	return $2
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4229443000054317057, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$7), [18360])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $43($7, CALL $fimport$11(*($7), *($7 + [8]), (int_64)4229443000054317056, $6))
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$7), [18360])
	
.LABEL $label$2
	*(($4 + [64])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $47($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $53(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4229443000054317056, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$7), [18360])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $43($7, CALL $fimport$11(*($7), *($7 + [8]), (int_64)4229443000054317056, $6))
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$7), [18360])
	
.LABEL $label$2
	*($4 + [60]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [19110])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [19155])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19205])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $65(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL require_auth((int_64)6112252634446868640)
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$1 }
	*($4 + [80]) = (int_64)3617214756542218240
	*($4 + [72]) = (int_64)6112252634564810192
	CALL $21(($4 + [8]), $1, $3)
	*(($4 + [48])) = *(($2 + [8]))
	$5 = (($4 + [8]) + [8])
	*(($4 + [64])) = *($5)
	*($5) = [0]
	*($4 + [24]) = (int_64)6112252634564810192
	*($4 + [32]) = *($1)
	*($4 + [40]) = *($2)
	*($4 + [56]) = *($4 + [8])
	*($4 + [8]) = (int_64)0
	$2 = CALL $50(($4 + [88]), ($4 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($4 + [24]))
	CALL $32(($4 + [128]), $2)
	$1 = *($4 + [128])
	CALL send_inline($1, (*($4 + [132]) - $1))
	$1 = *($4 + [128])
	if ( ($1 == 0) ){ goto $label$2 }
	*($4 + [132]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$1 = *($2 + [28])
	if ( ($1 == 0) ){ goto $label$3 }
	*(($2 + [32])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($2 + [20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$5
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$1
	$global$0 = ($4 + [144])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	$6 = ($5 + [-24])
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$2 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$1), [18360])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$1
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)5029824243156647936, $2)
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), $3)
	$6 = CALL $27($1, $6)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$1), [18360])
	*($0 + [4]) = $6
	*($0) = $1
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$1 }
	*($4 + [64]) = (int_64)3617214756542218240
	$5 = *($0)
	*($4 + [56]) = $5
	*(($4 + [32])) = *(($2 + [8]))
	*($4 + [8]) = $5
	*($4 + [16]) = *($1)
	*($4 + [24]) = *($2)
	CALL $104(($4 + [40]), $3)
	$2 = CALL $50(($4 + [72]), ($4 + [56]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($4 + [8]))
	CALL $32(($4 + [112]), $2)
	$0 = *($4 + [112])
	CALL send_inline($0, (*($4 + [116]) - $0))
	$0 = *($4 + [112])
	if ( ($0 == 0) ){ goto $label$2 }
	*($4 + [116]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$0 = *($2 + [28])
	if ( ($0 == 0) ){ goto $label$3 }
	*(($2 + [32])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$0 = *($2 + [16])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($2 + [20])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [128])
	$global$0 = $4
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$1 }
	*($4 + [48]) = [18285]
	*($4 + [52]) = CALL $138([18285])
	*($4) = *($4 + [48])
	$5 = CALL $17(($4 + [56]), $4)
	*((($4 + [8]) + [16])) = *(($2 + [8]))
	*($4 + [8]) = *($1)
	*($4 + [16]) = *($2)
	$1 = CALL $104((($4 + [8]) + [24]), $3)
	*($4 + [64]) = (int_64)6112252634648024368
	*($4 + [72]) = *($5)
	*(($2 = CALL _Znwj([16]))) = (int_64)6112252634648024368
	*($2 + [8]) = (int_64)3617214756542218240
	*(($4 + [100])) = [0]
	$3 = ($2 + [16])
	*((($4 + [64]) + [24])) = $3
	*(($4 + [84])) = $3
	*($4 + [80]) = $2
	*($4 + [92 align=4]) = (int_64)0
	$2 = *($1)
	$3 = ( *((($4 + [8]) + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($3 + [24])
	$6 = (CASTING uint_64)(uint_32 $3)
	$3 = (($4 + [64]) + [28])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($2 == 0) ){ goto $label$4 }
	CALL $47($3, $2)
	$3 = *(($4 + [96]))
	$2 = *(($4 + [92]))
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	
.LABEL $label$3
	*($4 + [104]) = $2
	*($4 + [112]) = $3
	$3 = ($3 - $2)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [18798])
	CALL memcpy($2, ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($3 + [-8]) > (int_32)[7]), [18798])
	CALL memcpy(($2 + [8]), (($4 + [8]) + [8]), [8])
	*($4 + [120]) = *((($4 + [8]) + [16]))
	CALL eosio_assert(((int_32)($3 + [-16]) > (int_32)[7]), [18798])
	CALL memcpy(($2 + [16]), ($4 + [120]), [8])
	*($4 + [108]) = ($2 + [24])
	CALL $65(($4 + [104]), $1)
	CALL $32(($4 + [104]), ($4 + [64]))
	$2 = *($4 + [104])
	CALL send_inline($2, (*($4 + [108]) - $2))
	$2 = *($4 + [104])
	if ( ($2 == 0) ){ goto $label$5 }
	*($4 + [108]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$2 = *($4 + [92])
	if ( ($2 == 0) ){ goto $label$6 }
	*(($4 + [96])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$2 = *($4 + [80])
	if ( ($2 == 0) ){ goto $label$7 }
	*(($4 + [84])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $116 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $119($1, $0, [17520])
	CALL $121()
	(unreachable)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $138([16790])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [16790], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $123())
	*(CALL $123()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $135($4, ($3 + [12]), $2)
	$5 = CALL $123()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $115($3)
	
.LABEL $label$1
	CALL $116($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $137(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = ($3 & [1])
	$5 = ( *($1 + [8]) ? ($1 + [1]) : $4 )
	$4 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $4 )
	if ( ($4 <= [4]) ){ goto $label$4 }
	$6 = ($4 + [-4])
	$1 = $5
	$3 = $4
	
.LOOP $label$5:
	CALL memcpy(($2 + [12]), $1, [4])
	$7 = ((int_32)*($2 + [12]) * (int_32)[1540483477])
	$3 = ((int_32)((int_32)((int_32)uint_32($7 >> [24]) ^ (int_32)$7) * (int_32)[1540483477]) ^ (int_32)((int_32)$3 * (int_32)[1540483477]))
	$1 = ($1 + [4])
	$4 = ($4 + [-4])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$5 }
	$1 = ($6 & [-4])
	$5 = (($5 + $1) + [4])
	$4 = ($6 - $1)
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = $4
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[3]) ){ goto $label$1 }
	$3 = ((int_32)(*($5 + [2]) << [16]) ^ (int_32)$3)
	
.LABEL $label$6
	$3 = ((int_32)(*($5 + [1]) << [8]) ^ (int_32)$3)
	
.LABEL $label$2
	$3 = ((int_32)((int_32)$3 ^ (int_32)*($5)) * (int_32)[1540483477])
	
.LABEL $label$1
	$3 = ((int_32)((int_32)uint_32($3 >> [13]) ^ (int_32)$3) * (int_32)[1540483477])
	$1 = *($0)
	*($0) = ((int_32)(((($1 << [6]) + uint_32($1 >> [2])) + ((int_32)uint_32($3 >> [15]) ^ (int_32)$3)) + [-1640531527]) ^ (int_32)$1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $107($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $136(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $138($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $107($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $139 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $123())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $140($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $118 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $109(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $129(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [17243], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $109(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $109(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $138($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $107($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $106($6, *($4 + [4]))
	*($1 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$4 = *($4 + [8])
	*(($1 + [40])) = *(($4 + [8]))
	*($1 + [32]) = *($4)
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [32])
	$9 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $141($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [20])
	*($3 + [36]) = $9
	*($3 + [40]) = $7
	CALL $89(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)5029824243156647936, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $144($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

int_32 .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18746])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)5029824243156647936)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18692])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18692])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $27(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	float_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_64 $17
	$5 = ($global$0 - [368])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$2 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$2 }
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	$2 = CALL $138([18104])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$5 }
	*($5 + [64]) = ($2 << [1])
	$7 = (($5 + [64]) | [1])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$8 = (($2 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($5 + [64]) = ($8 | [1])
	*($5 + [72]) = $7
	*($5 + [68]) = $2
	
.LABEL $label$4
	CALL memcpy($7, [18104], $2)
	
.LABEL $label$3
	*(($7 + $2)) = [0]
	$2 = CALL $3($4, ($5 + [64]))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($5 + [72]))
	
.LABEL $label$6
	if ( $2 ){ goto $label$2 }
	CALL require_auth(*($1))
	*(($5 + [312])) = [0]
	*($5 + [296]) = (int_64)-1
	$6 = *($0)
	*($5 + [280]) = $6
	*($5 + [288]) = $6
	*($5 + [304]) = (int_64)0
	$2 = [0]
	$7 = CALL db_lowerbound_i64($6, $6, (int_64)5029824243156647936, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	CALL $27(($5 + [280]), $7)
	$2 = [1]
	
.LABEL $label$7
	CALL eosio_assert($2, [18107])
	*($5 + [68]) = [0]
	*($5 + [64]) = ($5 + [280])
	$2 = *(CALL $28(($5 + [64])) + [4])
	*($5 + [232]) = *($2)
	$8 = CALL $104((($5 + [232]) + [8]), ($2 + [8]))
	*((($5 + [232]) + [44])) = *(($2 + [44]))
	*((($5 + [232]) + [36])) = *(($2 + [36]))
	*((($5 + [232]) + [28])) = *(($2 + [28]))
	*($5 + [252 align=4]) = *($2 + [20 align=4])
	CALL eosio_assert((*($5 + [252]) == 0), [18122])
	$6 = *($5 + [232])
	*($5 + [224]) = (int_64)0
	CALL $16($4, ($5 + [208]), ($5 + [224]), ($5 + [220]))
	CALL eosio_assert(((int_64)$6 == (int_64)*($5 + [208])), [18141])
	$9 = *($5 + [224])
	CALL eosio_assert(((int_64)$9 != (int_64)*($1)), [18162])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($5 + [272]))), [18633])
	CALL eosio_assert(((int_64)*($3) >= (int_64)*($5 + [264])), [18187])
	$4 = *($5 + [220])
	CALL $25($4, $3)
	$10 = CALL current_time()
	CALL eosio_assert(((uint_32)(*($5 + [256]) + [18]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$10 / (uint_64)(int_64)1000000))), [18221])
	*((($5 + [64]) + [8])) = *($3 + [8])
	$10 = *($3)
	*($5 + [64]) = $10
	$11 = ((float_64)(CASTING float_64)(int_64 $10) * (float_64)(float_64)0.98)
	CALL eosio_assert(((float_64)$11 <= (float_64)(float_64)4611686018427387904), [17417])
	CALL eosio_assert(((float_64)$11 >= (float_64)(float_64)-4611686018427387904), [17441])
	if ( ((float_64)(float_64)|$11| < (float_64)(float_64)9223372036854775808) ){ goto $label$9 }
	$10 = (int_64)-9223372036854775808
	goto $label$8 
	
.LABEL $label$9
	$10 = (Rounds 0)($11)
	
.LABEL $label$8
	*($5 + [64]) = $10
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18291])
	CALL $22(($5 + [152]), $6, $1)
	CALL $56($0, [17800], ($5 + [64]), ($5 + [152]))
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($5 + [160]))
	
.LABEL $label$10
	*((($5 + [64]) + [8])) = *(($3 + [8]))
	$10 = *($3)
	*($5 + [64]) = $10
	$11 = ((float_64)(CASTING float_64)(int_64 $10) * (float_64)(float_64)0.012)
	CALL eosio_assert(((float_64)$11 <= (float_64)(float_64)4611686018427387904), [17417])
	CALL eosio_assert(((float_64)$11 >= (float_64)(float_64)-4611686018427387904), [17441])
	if ( ((float_64)(float_64)|$11| < (float_64)(float_64)9223372036854775808) ){ goto $label$12 }
	$10 = (int_64)-9223372036854775808
	goto $label$11 
	
.LABEL $label$12
	$10 = (Rounds 0)($11)
	
.LABEL $label$11
	*($5 + [64]) = $10
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18291])
	CALL $19(($5 + [152]), $6, $1)
	CALL $56($0, [18096], ($5 + [64]), ($5 + [152]))
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($5 + [160]))
	
.LABEL $label$13
	*((($5 + [64]) + [8])) = *(($3 + [8]))
	$10 = *($3)
	*($5 + [64]) = $10
	$11 = ((float_64)(CASTING float_64)(int_64 $10) * (float_64)(float_64)0.008)
	CALL eosio_assert(((float_64)$11 <= (float_64)(float_64)4611686018427387904), [17417])
	CALL eosio_assert(((float_64)$11 >= (float_64)(float_64)-4611686018427387904), [17441])
	if ( ((float_64)(float_64)|$11| < (float_64)(float_64)9223372036854775808) ){ goto $label$15 }
	$10 = (int_64)-9223372036854775808
	goto $label$14 
	
.LABEL $label$15
	$10 = (Rounds 0)($11)
	
.LABEL $label$14
	*($5 + [64]) = $10
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18291])
	CALL $20(($5 + [152]), $6, $1)
	CALL $56($0, [18240], ($5 + [64]), ($5 + [152]))
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($5 + [160]))
	
.LABEL $label$16
	CALL $14(($5 + [192]), $3)
	CALL $23(($5 + [64]), $6, $1)
	CALL $57($5, $1, ($5 + [192]), ($5 + [64]))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($5 + [72]))
	
.LABEL $label$17
	*((($5 + [64]) + [8])) = *((($5 + [192]) + [8]))
	$10 = *($5 + [192])
	*($5 + [64]) = $10
	$11 = ((float_64)(CASTING float_64)(int_64 $10) * (float_64)(float_64)0.1)
	CALL eosio_assert(((float_64)$11 <= (float_64)(float_64)4611686018427387904), [17417])
	CALL eosio_assert(((float_64)$11 >= (float_64)(float_64)-4611686018427387904), [17441])
	if ( ((float_64)(float_64)|$11| < (float_64)(float_64)9223372036854775808) ){ goto $label$19 }
	$10 = (int_64)-9223372036854775808
	goto $label$18 
	
.LABEL $label$19
	$10 = (Rounds 0)($11)
	
.LABEL $label$18
	*($5 + [64]) = $10
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18291])
	CALL $24(($5 + [152]), $6, ($5 + [224]))
	CALL $57($5, ($5 + [224]), ($5 + [64]), ($5 + [152]))
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($5 + [160]))
	
.LABEL $label$20
	*((($5 + [152]) + [32])) = [0]
	*($5 + [168]) = (int_64)-1
	*($5 + [176]) = (int_64)0
	*($5 + [188]) = [0]
	$10 = *($0)
	*($5 + [152]) = $10
	*($5 + [160]) = $10
	$12 = CALL $58($0)
	*($5 + [144]) = ($5 + [152])
	CALL $59(($5 + [136]), ($5 + [144]), $1)
	CALL $60(($5 + [128]), ($5 + [144]), $1)
	$10 = *($5 + [136])
	*($5 + [64]) = $10
	$2 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)32)
	if ( ((int_32)*($5 + [132]) == (int_32)$2)) ){ goto $label$21 }
	
.LOOP $label$22:
	CALL eosio_assert(((int_64)*($2 + [8]) != (int_64)$6), [18248])
	CALL $61(($5 + [64]))
	$2 = *($5 + [68])
	if ( ((int_32)$2 != (int_32)*($5 + [132])) ){ goto $label$22 }
	
.LABEL $label$21
	$10 = *($0)
	CALL eosio_assert(((int_64)*($5 + [152]) == (int_64)CALL $fimport$8()), [18804])
	*(($2 = CALL _Znwj([72])) + [40]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [52]) = ($5 + [152])
	*($2 + [8]) = $6
	*($2) = $12
	*($2 + [24]) = $9
	*($2 + [48]) = $4
	*($2 + [16]) = *($1)
	*($2 + [32]) = *($3)
	*($2 + [40]) = *(($3 + [8]))
	*($5 + [352]) = (($5 + [64]) + [52])
	*($5 + [348]) = ($5 + [64])
	*($5 + [344]) = ($5 + [64])
	*($5 + [320]) = ($5 + [344])
	$13 = ($2 + [8])
	*($5 + [28]) = $13
	*($5 + [24]) = $2
	$14 = ($2 + [16])
	*($5 + [32]) = $14
	*($5 + [36]) = ($2 + [24])
	*($5 + [40]) = ($2 + [32])
	*($5 + [44]) = ($2 + [48])
	CALL $62(($5 + [24]), ($5 + [320]))
	$15 = *($2)
	$7 = (($5 + [152]) + [8])
	*($2 + [56]) = CALL db_store_i64(*($7), (int_64)4229443000054317056, $10, $15, ($5 + [64]), [52])
	$16 = (($5 + [152]) + [16])
	if ( (uint_64)($15 <= *($16)) ){ goto $label$23 }
	*($16) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	$15 = *($2)
	$17 = *($7)
	*($5 + [24]) = *($13)
	*($2 + [60]) = CALL db_idx64_store($17, (int_64)4229443000054317056, $10, $15, ($5 + [24]))
	$15 = *($2)
	$17 = *($7)
	*($5 + [24]) = *($14)
	*($2 + [64]) = CALL db_idx64_store($17, (int_64)4229443000054317057, $10, $15, ($5 + [24]))
	*($5 + [24]) = $2
	$10 = *($2)
	*($5 + [64]) = $10
	$13 = *(($2 + [56]))
	*($5 + [344]) = $13
	$14 = ($5 + [180])
	$7 = *($14)
	if ( ((uint_32)$7 >= (uint_32)*(($5 + [184]))) ){ goto $label$26 }
	*($7 + [8]) = $10
	*($7 + [16]) = $13
	*($5 + [24]) = [0]
	*($7) = $2
	*($14) = ($7 + [24])
	$2 = *($5 + [24])
	$7 = [0]
	*($5 + [24]) = [0]
	if ( $2 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	CALL $63(($5 + [176]), ($5 + [24]), ($5 + [64]), ($5 + [344]))
	$2 = *($5 + [24])
	$7 = [0]
	*($5 + [24]) = [0]
	if ( ($2 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	CALL _ZdlPv($2)
	
.LABEL $label$24
	*(($5 + [104])) = *(($3 + [8]))
	*($5 + [72]) = $6
	*($5 + [64]) = $12
	*($5 + [88]) = $9
	*($5 + [112]) = $4
	*($5 + [80]) = *($1)
	*($5 + [96]) = *($3)
	$6 = *($0)
	*($5 + [8]) = [18281]
	*($5 + [12]) = CALL $138([18281])
	*($5) = *($5 + [8])
	$2 = CALL $17(($5 + [16]), $5)
	*($5 + [24]) = (int_64)5029824546159636432
	*($5 + [32]) = *($2)
	*(($2 = CALL _Znwj([16]))) = $6
	*($2 + [8]) = (int_64)3617214756542218240
	*(($5 + [60])) = $7
	$1 = ($2 + [16])
	*((($5 + [24]) + [24])) = $1
	*(($5 + [44])) = $1
	*($5 + [40]) = $2
	*($5 + [52 align=4]) = (int_64)0
	CALL $47(($5 + [52]), [52])
	$2 = *((($5 + [24]) + [32]))
	$1 = *($5 + [52])
	*($5 + [324]) = $1
	*($5 + [320]) = $1
	*($5 + [328]) = $2
	*($5 + [336]) = ($5 + [320])
	*($5 + [348]) = (($5 + [64]) + [8])
	*($5 + [352]) = (($5 + [64]) + [16])
	*($5 + [356]) = (($5 + [64]) + [24])
	*($5 + [360]) = (($5 + [64]) + [32])
	*($5 + [364]) = ($5 + [112])
	*($5 + [344]) = ($5 + [64])
	CALL $64(($5 + [344]), ($5 + [336]))
	CALL $32(($5 + [344]), ($5 + [24]))
	$2 = *($5 + [344])
	CALL send_inline($2, (*($5 + [348]) - $2))
	$2 = *($5 + [344])
	if ( ($2 == 0) ){ goto $label$27 }
	*($5 + [348]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$27
	$2 = *($5 + [52])
	if ( ($2 == 0) ){ goto $label$28 }
	*(($5 + [56])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$28
	$2 = *($5 + [40])
	if ( ($2 == 0) ){ goto $label$29 }
	*(($5 + [44])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$29
	$0 = *($5 + [176])
	if ( ($0 == 0) ){ goto $label$30 }
	$3 = ($5 + [180])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$32 }
	
.LOOP $label$33:
	$2 = ($2 + [-24])
	$1 = *($2)
	*($2) = [0]
	if ( ($1 == 0) ){ goto $label$34 }
	CALL _ZdlPv($1)
	
.LABEL $label$34
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$33 }
	$2 = *(($5 + [176]))
	goto $label$31 
	
.LABEL $label$32
	$2 = $0
	
.LABEL $label$31
	*($3) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$30
	if ( ((*($8) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($5 + [248])))
	
.LABEL $label$35
	$0 = *($5 + [304])
	if ( ($0 == 0) ){ goto $label$2 }
	$3 = ($5 + [308])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$37 }
	
.LOOP $label$38:
	$2 = ($2 + [-24])
	$1 = *($2)
	*($2) = [0]
	if ( ($1 == 0) ){ goto $label$39 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$40
	CALL _ZdlPv($1)
	
.LABEL $label$39
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$38 }
	$2 = *(($5 + [304]))
	goto $label$36 
	
.LABEL $label$37
	$2 = $0
	
.LABEL $label$36
	*($3) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$global$0 = ($5 + [368])
	return (unreachable)
	
.LABEL $label$1
	CALL $103(($5 + [64]))
}

void .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $107($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $138([17703])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [17703], $4)
	
.LABEL $label$2
	$6 = [0]
	*(($5 + $4)) = [0]
	$7 = *($1)
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$8 }
	$5 = *([0] + [18596])
	
.LOOP $label$10:
	*((($3 + [16]) + ($4 = $6))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$6 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$9 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$10 }
	
.LABEL $label$9
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$7 }
	*($3) = ($6 << [1])
	$5 = ($3 | [1])
	goto $label$6 
	
.LABEL $label$8
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$4 = ($3 | [1])
	$6 = $4
	goto $label$5 
	
.LABEL $label$7
	$1 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($1)
	*($3) = ($1 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $6
	
.LABEL $label$6
	$1 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$11:
	*(($5 + $4)) = *((($3 + [16]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$11 }
	$6 = ($5 + $6)
	$4 = ($3 | [1])
	
.LABEL $label$5
	*($6) = [0]
	$6 = *($3)
	$5 = ($6 & [1])
	CALL $112($0, ( *($3 + [8]) ? $4 : $5 ), ( *($3 + [4]) ? uint_32($6 >> [1]) : $5 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$12
	CALL $111($0, [17724])
	CALL $118(($3 + [16]), $2)
	$4 = *($3 + [16])
	$6 = ($4 & [1])
	CALL $112($0, ( *($3 + [24]) ? (($3 + [16]) | [1]) : $6 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $6 ))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$13
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $103($0)
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $138([17687])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [17687], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	CALL $111($0, [17657])
	CALL $118(($3 + [16]), $1)
	$4 = *($3 + [16])
	$5 = ($4 & [1])
	CALL $112($0, ( *($3 + [24]) ? (($3 + [16]) | [1]) : $5 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	CALL $111($0, [17662])
	$1 = *($2)
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$9 }
	$5 = [0]
	$2 = *([0] + [18596])
	
.LOOP $label$11:
	*((($3 + [16]) + ($4 = $5))) = *(($2 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$5 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$10 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3) = ($5 << [1])
	$2 = ($3 | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$4 = ($3 | [1])
	$5 = $4
	goto $label$6 
	
.LABEL $label$8
	$6 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $2
	*($3 + [4]) = $5
	
.LABEL $label$7
	$6 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$12:
	*(($2 + $4)) = *((($3 + [16]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$12 }
	$5 = ($2 + $5)
	$4 = ($3 | [1])
	
.LABEL $label$6
	*($5) = [0]
	$5 = *($3)
	$2 = ($5 & [1])
	CALL $112($0, ( *($3 + [8]) ? $4 : $2 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $2 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$13
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $103($0)
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $138([17748])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [17748], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	CALL $111($0, [17657])
	CALL $118(($3 + [16]), $1)
	$4 = *($3 + [16])
	$5 = ($4 & [1])
	CALL $112($0, ( *($3 + [24]) ? (($3 + [16]) | [1]) : $5 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	CALL $111($0, [17766])
	$1 = *($2)
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$9 }
	$5 = [0]
	$2 = *([0] + [18596])
	
.LOOP $label$11:
	*((($3 + [16]) + ($4 = $5))) = *(($2 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$5 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$10 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3) = ($5 << [1])
	$2 = ($3 | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$4 = ($3 | [1])
	$5 = $4
	goto $label$6 
	
.LABEL $label$8
	$6 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $2
	*($3 + [4]) = $5
	
.LABEL $label$7
	$6 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$12:
	*(($2 + $4)) = *((($3 + [16]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$12 }
	$5 = ($2 + $5)
	$4 = ($3 | [1])
	
.LABEL $label$6
	*($5) = [0]
	$5 = *($3)
	$2 = ($5 & [1])
	CALL $112($0, ( *($3 + [8]) ? $4 : $2 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $2 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$13
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $103($0)
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $138([17736])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [17736], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	CALL $111($0, [17657])
	CALL $118(($3 + [16]), $1)
	$4 = *($3 + [16])
	$5 = ($4 & [1])
	CALL $112($0, ( *($3 + [24]) ? (($3 + [16]) | [1]) : $5 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	CALL $111($0, [17662])
	$1 = *($2)
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$9 }
	$5 = [0]
	$2 = *([0] + [18596])
	
.LOOP $label$11:
	*((($3 + [16]) + ($4 = $5))) = *(($2 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$5 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$10 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3) = ($5 << [1])
	$2 = ($3 | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$4 = ($3 | [1])
	$5 = $4
	goto $label$6 
	
.LABEL $label$8
	$6 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $2
	*($3 + [4]) = $5
	
.LABEL $label$7
	$6 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$12:
	*(($2 + $4)) = *((($3 + [16]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$12 }
	$5 = ($2 + $5)
	$4 = ($3 | [1])
	
.LABEL $label$6
	*($5) = [0]
	$5 = *($3)
	$2 = ($5 & [1])
	CALL $112($0, ( *($3 + [8]) ? $4 : $2 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $2 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$13
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $103($0)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	float_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = ((float_64)(CASTING float_64)(uint_32 ((uint_32)$0 / (uint_32)[100])) * (float_64)(CASTING float_64)(int_64 *($1)))
	CALL eosio_assert(((float_64)$4 <= (float_64)(float_64)4611686018427387904), [17417])
	CALL eosio_assert(((float_64)$4 >= (float_64)(float_64)-4611686018427387904), [17441])
	if ( ((float_64)(float_64)|$4| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$5 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$5 = (Rounds 0)($4)
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18291])
	*(($2 + [40])) = [0]
	*($2 + [16]) = (int_64)6112252634338746384
	*($2 + [8]) = (int_64)6138663591592764928
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$1 = CALL $8(($2 + [8]), (int_64)5459781, [18006])
	$6 = *($1 + [8])
	$7 = *($1)
	$8 = *($2 + [32])
	if ( ($8 == 0) ){ goto $label$3 }
	$9 = ($2 + [36])
	$1 = *($9)
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$6 }
	$1 = *(($2 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $8
	
.LABEL $label$4
	*($9) = $8
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$4 = ((float_64)(CASTING float_64)(int_64 $7) * (float_64)(float_64)0.02)
	CALL eosio_assert(((float_64)$4 <= (float_64)(float_64)4611686018427387904), [17417])
	CALL eosio_assert(((float_64)$4 >= (float_64)(float_64)-4611686018427387904), [17441])
	if ( ((float_64)(float_64)|$4| < (float_64)(float_64)9223372036854775808) ){ goto $label$9 }
	$7 = (int_64)-9223372036854775808
	goto $label$8 
	
.LABEL $label$9
	$7 = (Rounds 0)($4)
	
.LABEL $label$8
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18291])
	CALL eosio_assert(((int_64)$3 == (int_64)$6), [18633])
	CALL eosio_assert(((int_64)$5 <= (int_64)$7), [17808])
	$global$0 = ($2 + [48])
}

void .FUNC $24 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $138([17748])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [17748], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	CALL $111($0, [17657])
	CALL $118(($3 + [16]), $1)
	$4 = *($3 + [16])
	$5 = ($4 & [1])
	CALL $112($0, ( *($3 + [24]) ? (($3 + [16]) | [1]) : $5 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	CALL $111($0, [17784])
	$1 = *($2)
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$9 }
	$5 = [0]
	$2 = *([0] + [18596])
	
.LOOP $label$11:
	*((($3 + [16]) + ($4 = $5))) = *(($2 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$5 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$10 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3) = ($5 << [1])
	$2 = ($3 | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$4 = ($3 | [1])
	$5 = $4
	goto $label$6 
	
.LABEL $label$8
	$6 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $2
	*($3 + [4]) = $5
	
.LABEL $label$7
	$6 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$12:
	*(($2 + $4)) = *((($3 + [16]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$12 }
	$5 = ($2 + $5)
	$4 = ($3 | [1])
	
.LABEL $label$6
	*($5) = [0]
	$5 = *($3)
	$2 = ($5 & [1])
	CALL $112($0, ( *($3 + [8]) ? $4 : $2 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $2 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$13
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $103($0)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18411])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $141($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [20])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	CALL $85(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $30(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $144($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $26 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [192])
	$global$0 = $4
	*($4 + [152]) = $1
	CALL require_auth((int_64)6112252634446868640)
	*(($5 = ($4 + [144]))) = [0]
	*($4 + [128]) = (int_64)-1
	$1 = *($0)
	*($4 + [112]) = $1
	*($4 + [120]) = $1
	*($4 + [136]) = (int_64)0
	$6 = CALL db_lowerbound_i64($1, $1, (int_64)5029824243156647936, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $27(($4 + [112]), $6)
	*($4 + [64]) = ($4 + [112])
	*($4 + [68]) = [0]
	$6 = ((int_32)*(*(CALL $28(($4 + [64])) + [4]) + [20]) != (int_32)[0])
	goto $label$1 
	
.LABEL $label$2
	$6 = [1]
	
.LABEL $label$1
	CALL eosio_assert($6, [17877])
	$1 = *($0)
	*($4 + [28]) = $3
	*($4 + [32]) = $2
	*($4 + [24]) = ($4 + [152])
	*($4 + [176]) = $1
	CALL eosio_assert(((int_64)*($4 + [112]) == (int_64)CALL $fimport$8()), [18804])
	*($4 + [68]) = ($4 + [24])
	*($4 + [64]) = ($4 + [112])
	*($4 + [72]) = ($4 + [176])
	*(($2 = CALL _Znwj([64])) + [16]) = [0]
	*($2 + [8 align=4]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = ($4 + [112])
	CALL $29(($4 + [64]), $2)
	*($4 + [168]) = $2
	$1 = *($2)
	*($4 + [64]) = $1
	$7 = *($2 + [52])
	*($4 + [164]) = $7
	$8 = ($4 + [140])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*($5)) ){ goto $label$5 }
	*($6 + [8]) = $1
	*($6 + [16]) = $7
	*($4 + [168]) = [0]
	*($6) = $2
	*($8) = ($6 + [24])
	$2 = *($4 + [168])
	$6 = [0]
	*($4 + [168]) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	CALL $30(($4 + [136]), ($4 + [168]), ($4 + [64]), ($4 + [164]))
	$2 = *($4 + [168])
	$6 = [0]
	*($4 + [168]) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($2)
	
.LABEL $label$3
	*(($4 + [80])) = $6
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = *($4 + [152])
	$6 = ($4 + [72])
	$2 = CALL $138([16841])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$10 }
	*(($4 + [72])) = ($2 << [1])
	$6 = ($6 + [1])
	if ( $2 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*((($4 + [64]) + [16])) = $6
	*(($4 + [76])) = $2
	*($4 + [72]) = ($5 | [1])
	
.LABEL $label$9
	CALL memcpy($6, [16841], $2)
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	$3 = CALL $104((($4 + [64]) + [20]), $3)
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$1 = *($0)
	*($4 + [8]) = [17933]
	*($4 + [12]) = CALL $138([17933])
	*($4) = *($4 + [8])
	$2 = CALL $17(($4 + [16]), $4)
	*($4 + [24]) = (int_64)5029824546159636432
	*($4 + [32]) = *($2)
	*(($2 = CALL _Znwj([16]))) = $1
	*($2 + [8]) = (int_64)3617214756542218240
	$0 = ($2 + [16])
	*(($4 + [48])) = $0
	*((($4 + [24]) + [20])) = $0
	*($4 + [40]) = $2
	CALL $31(($4 + [52]), ($4 + [64]))
	CALL $32(($4 + [176]), ($4 + [24]))
	$2 = *($4 + [176])
	CALL send_inline($2, (*($4 + [180]) - $2))
	$2 = *($4 + [176])
	if ( ($2 == 0) ){ goto $label$11 }
	*($4 + [180]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$2 = *($4 + [52])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($4 + [56])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$2 = *($4 + [40])
	if ( ($2 == 0) ){ goto $label$13 }
	*(($4 + [44])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	if ( ((*($3) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [92])))
	
.LABEL $label$14
	if ( ((*(($4 + [72])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [80])))
	
.LABEL $label$15
	$3 = *($4 + [136])
	if ( ($3 == 0) ){ goto $label$16 }
	$6 = ($4 + [140])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$18 }
	
.LOOP $label$19:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$20 }
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($0 + [16])))
	
.LABEL $label$21
	CALL _ZdlPv($0)
	
.LABEL $label$20
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$19 }
	$2 = *(($4 + [136]))
	goto $label$17 
	
.LABEL $label$18
	$2 = $3
	
.LABEL $label$17
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$16
	$global$0 = ($4 + [192])
	return (unreachable)
	
.LABEL $label$7
	CALL $103($6)
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $110($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $135 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $132($3, (int_64)0)
	$4 = CALL $134($3, $2, [1], (int_64)4294967295)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18804])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [18798])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7235159537265672192
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $92(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [18890])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18936])
	*($1) = *(*($3))
	CALL eosio_assert([1], [18987])
	CALL eosio_assert([1], [18798])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18798])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18798])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [18798])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [18360])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $66($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [18360])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18855])
	CALL $68($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $69($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18411])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $141($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [18434])
	CALL memcpy($4, $2, [8])
	*($4 + [12]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $92(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $144($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [19080])
	$3 = *($0 + [4])
	$4 = *(($3 + [64]))
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4229443000054317057, ($1 + [8]), *($3))
	*((*(($0 + [4])) + [64])) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [52]) == (int_32)$7), [18360])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$4 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)4229443000054317056, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $43($7, $4)
	CALL eosio_assert(((int_32)*($2 + [52]) == (int_32)$7), [18360])
	
.LABEL $label$3
	*(($2 + [64])) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)4229443000054317057, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$7), [18360])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $43($7, CALL $fimport$11(*($7), *($7 + [8]), (int_64)4229443000054317056, $6))
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$7), [18360])
	
.LABEL $label$2
	*(($4 + [64])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [18798])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $144($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $103 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $65(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [18798])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [18798])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18798])
	CALL memcpy(*($0 + [4]), $4, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [18798])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18798])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18798])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18798])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18798])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18798])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18794])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $47($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18434])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $76(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18434])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18434])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy($4, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [18434])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($4 + [8]) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18411])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $141($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18434])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18434])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $84(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $144($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18434])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18434])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18411])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $141($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $81(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $82(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $144($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $145 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL sha256($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$1 == (int_32)[1]), [16710])
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$4 }
	if ( ($1 <= [2]) ){ goto $label$5 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$5
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $144 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16672])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16480]
	$3 = (((int_32)$1 * (int_32)[12]) + [16480])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $147 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [160])
	$global$0 = $3
	$4 = *($0)
	*($3 + [131]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($3 + [130]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($3 + [129]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($3 + [128]) = (uint_64)$4 >> (uint_64)(int_64)56)
	$5 = *(($0 + [8]))
	*($3 + [123]) = (uint_64)$5 >> (uint_64)(int_64)32)
	*($3 + [122]) = (uint_64)$5 >> (uint_64)(int_64)40)
	*($3 + [121]) = (uint_64)$5 >> (uint_64)(int_64)48)
	*($3 + [120]) = (uint_64)$5 >> (uint_64)(int_64)56)
	$6 = (CASTING uint_32)(uint_64 $4)
	*($3 + [135]) = $6
	*($3 + [134]) = uint_32($6 >> [8])
	*($3 + [133]) = uint_32($6 >> [16])
	*($3 + [132]) = uint_32($6 >> [24])
	$6 = (CASTING uint_32)(uint_64 $5)
	*($3 + [127]) = $6
	*($3 + [126]) = uint_32($6 >> [8])
	*($3 + [125]) = uint_32($6 >> [16])
	*($3 + [124]) = uint_32($6 >> [24])
	$4 = *(($0 + [24]))
	*($3 + [143]) = $4
	$5 = *($0 + [16])
	*($3 + [147]) = (uint_64)$5 >> (uint_64)(int_64)32)
	*($3 + [146]) = (uint_64)$5 >> (uint_64)(int_64)40)
	*($3 + [145]) = (uint_64)$5 >> (uint_64)(int_64)48)
	*($3 + [144]) = (uint_64)$5 >> (uint_64)(int_64)56)
	*($3 + [139]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($3 + [138]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($3 + [137]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($3 + [136]) = (uint_64)$4 >> (uint_64)(int_64)56)
	$0 = (CASTING uint_32)(uint_64 $4)
	*($3 + [142]) = uint_32($0 >> [8])
	*($3 + [141]) = uint_32($0 >> [16])
	*($3 + [140]) = uint_32($0 >> [24])
	$0 = (CASTING uint_32)(uint_64 $5)
	*($3 + [151]) = $0
	*($3 + [150]) = uint_32($0 >> [8])
	*($3 + [149]) = uint_32($0 >> [16])
	*($3 + [148]) = uint_32($0 >> [24])
	$7 = ($3 + [118])
	$4 = *($1)
	$6 = ($3 + [48])
	
.LOOP $label$1:
	$0 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($3) = (($8) << [7]) | ($0 & [127]))
	$0 = $6
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[0]), [19687])
	CALL memcpy($0, $3, [1])
	$6 = ($0 + [1])
	if ( $8 ){ goto $label$1 }
	CALL eosio_assert(((int_32)($7 - $6) > (int_32)[64]), [19687])
	CALL memcpy($6, ($1 + [4]), [65])
	$1 = ($0 + [66])
	$7 = ($3 + [38])
	$4 = *($2)
	$6 = $3
	
.LOOP $label$2:
	$0 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($3 + [159]) = (($8) << [7]) | ($0 & [127]))
	$0 = $6
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[0]), [19687])
	CALL memcpy($0, ($3 + [159]), [1])
	$6 = ($0 + [1])
	if ( $8 ){ goto $label$2 }
	CALL eosio_assert(((int_32)($7 - $6) > (int_32)[32]), [19687])
	CALL memcpy($6, ($2 + [4]), [33])
	CALL assert_recover_key(($3 + [120]), ($3 + [48]), ($1 - ($3 + [48])), $3, (($0 + [34]) - $3))
	$global$0 = ($3 + [160])
}

void .FUNC $146 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL ripemd160($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[20]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$1 == (int_32)[1]), [16710])
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[20]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$4 }
	if ( ($1 <= [2]) ){ goto $label$5 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$5
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

int_32 .FUNC $141 (int_32 $0)
{
	return CALL $142([8288], $0)
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $141($1)
	
.LABEL $label$2
	*(CALL $123()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $141(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $144($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $143 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8280]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8284])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8280]) = [1]
	$2 = ($2 << [16])
	*([0] + [8284]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8284])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8284]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8280]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8280]) = [1]
	$3 = ($3 << [16])
	*([0] + [8284]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8284])
	
.LABEL $label$10
	*([0] + [8284]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $143($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [19601])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $72 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $141($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [64]) + [24]))) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $79(($4 + [16]), ($4 + [144]))
	*(($9 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($3 = (($4 + [128]) + [8]))) = *($9)
	*($4 + [128]) = *($4)
	$10 = *($3)
	*(($9 = (($4 + [144]) + [8]))) = $10
	*((($4 + [16]) + [24])) = $10
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($3) = *($8)
	*($4 + [128]) = *($4 + [80])
	$0 = *($4 + [72])
	$1 = *($4 + [64])
	$8 = CALL $104(($4 + [112]), ($4 + [96]))
	*($9) = *($3)
	*($4 + [168]) = $1
	*($4 + [160]) = $0
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [168])), (int_32 ($4 + [160])), (int_32 ($4 + [144])), (int_32 $8), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $144($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [104])))
	$global$0 = ($4 + [176])
	return $2
}

int_32 .FUNC $73 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $141($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	CALL $77(($4 + [48]), ($4 + [64]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4)
	$3 = *($8)
	*((($4 + [96]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [80])
	*($4 + [32]) = $0
	*($4 + [96]) = $0
	*($4 + [104]) = [0]
	*($4 + [96]) = (int_64)0
	$3 = (*($4 + [68]) - *($4 + [64]))
	if ( ($3 == 0) ){ goto $label$5 }
	$8 = int_32($3 >> [3])
	if ( ((uint_32)$8 >= (uint_32)[536870912]) ){ goto $label$4 }
	$3 = CALL _Znwj($3)
	*(($4 + [104])) = ($3 + ($8 << [3]))
	*($4 + [96]) = $3
	*($4 + [100]) = $3
	$9 = *($4 + [64])
	$8 = (*($4 + [68]) - $9)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($3, $9, $8)
	*($4 + [100]) = (*($4 + [100]) + $8)
	
.LABEL $label$5
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 ($4 + [96])), (int_32 $6))
	$5 = *($4 + [96])
	if ( ($5 == 0) ){ goto $label$7 }
	*($4 + [100]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $144($2)
	
.LABEL $label$8
	$2 = *($4 + [64])
	if ( ($2 == 0) ){ goto $label$9 }
	*($4 + [68]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$global$0 = ($4 + [112])
	return [1]
	
.LABEL $label$4
	CALL $122(($4 + [96]))
	return (unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$6 }
	if ( ((int_64)$2 <= (int_64)-4997502827547852801) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-4997502827547852800) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$1 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [1]
	*($3) = *($3 + [88])
	CALL $71($1, $1, $3)
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [52]) = [0]
	*($3 + [48]) = [2]
	*($3 + [40]) = *($3 + [48])
	CALL $72($0, (int_64)6138663591592764928, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$2 == (int_64)-6215779878332006400) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-6215726818809348096) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [3]
	*($3 + [16]) = *($3 + [72])
	CALL $73($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [24]) = *($3 + [64])
	CALL $73($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [84]) = [0]
	*($3 + [80]) = [5]
	*($3 + [8]) = *($3 + [80])
	CALL $74($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [60]) = [0]
	*($3 + [56]) = [6]
	*($3 + [32]) = *($3 + [56])
	CALL $75($1, $1, ($3 + [32]))
	
.LABEL $label$1
	CALL $124([0])
	$global$0 = ($3 + [96])
}

int_32 .FUNC $71 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $141($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [72]) + [16]))) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [64]) = ($2 + $7)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18434])
	CALL memcpy(($4 + [72]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [18434])
	CALL memcpy((($4 + [72]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [18434])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($8) = *($4 + [24])
	*($4 + [60]) = ($2 + [24])
	$9 = (($4 + [72]) + [24])
	CALL $76(($4 + [56]), $9)
	*(($10 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($3 = (($4 + [128]) + [8]))) = *($10)
	*($4 + [128]) = *($4 + [8])
	$11 = *($3)
	*(($10 = (($4 + [144]) + [8]))) = $11
	*((($4 + [24]) + [24])) = $11
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($3) = *($8)
	*($4 + [128]) = *($4 + [80])
	$0 = *($4 + [72])
	$8 = CALL $104(($4 + [112]), $9)
	*($10) = *($3)
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($4 + [144])), (int_32 $8), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $144($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [104])))
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $86($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $108($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $108($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $103($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18794])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $93($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [18434])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $74 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $141($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = ($2 + $7)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18434])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [60]) = ($2 + [8])
	$8 = (($4 + [72]) + [8])
	CALL $76(($4 + [56]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($9 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($9)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	$8 = CALL $104(($4 + [112]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $8), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $144($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [128])
	return $2
}

int_32 .FUNC $39 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$0), [18360])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)5029824243156647936, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $27($0, $4)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$0), [18360])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [18890])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18936])
	*($1 + [20]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [18987])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	$9 = ($1 + [20])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $141($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [28]) = $7
	*($5 + [32]) = $9
	*($5 + [24]) = $1
	*($5 + [36]) = ($1 + [24])
	*($5 + [40]) = ($1 + [32])
	CALL $89(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [52]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $144($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	$2 = ($global$0 - [336])
	$global$0 = $2
	CALL require_auth((int_64)6112252634446868640)
	*((($2 + [288]) + [32])) = [0]
	*($2 + [304]) = (int_64)-1
	*($2 + [312]) = (int_64)0
	$3 = *($0)
	*($2 + [288]) = $3
	*($2 + [296]) = $3
	*((($2 + [248]) + [32])) = [0]
	*($2 + [256]) = $3
	*($2 + [248]) = $3
	*($2 + [264]) = (int_64)-1
	*($2 + [272]) = (int_64)0
	*($2 + [284]) = [0]
	$4 = (($2 + [232]) | [4])
	*($2 + [232]) = $4
	*($2 + [236 align=4]) = (int_64)0
	*($2 + [224]) = [0]
	*($2 + [216]) = (int_64)0
	$5 = $4
	$7 = *($1 + [4])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$1 }
	$8 = (($2 + [24]) + [40])
	$9 = (($2 + [152]) + [32])
	$10 = (($2 + [24]) + [24])
	$11 = ($2 + [124])
	$12 = (($2 + [104]) + [8])
	$13 = (($2 + [24]) + [56])
	
.LOOP $label$2:
	CALL $38(($2 + [208]), ($2 + [248]), *($6), [17984])
	$1 = *($2 + [212])
	*(($5 = (($2 + [152]) + [8]))) = *(($1 + [8]))
	*(($14 = (($2 + [152]) + [16]))) = *(($1 + [16]))
	*((($2 + [152]) + [24])) = *(($1 + [24]))
	*($9) = *(($1 + [32]))
	*((($2 + [152]) + [40])) = *(($1 + [40]))
	*(($15 = (($2 + [152]) + [48]))) = *(($1 + [48]))
	*($2 + [152]) = *($1)
	$16 = *($5)
	$1 = CALL $39(($2 + [288]), $16, [18006])
	*($2 + [104]) = *($1)
	CALL $104($12, ($1 + [8]))
	*(($11 + [24])) = *(($1 + [44]))
	*(($11 + [16])) = *(($1 + [36]))
	*(($11 + [8])) = *(($1 + [28]))
	*($11) = *($1 + [20 align=4])
	$1 = *($2 + [236])
	if ( ($1 == 0) ){ goto $label$6 }
	$5 = $4
	$17 = *($1 + [16])
	$3 = *($2 + [104])
	if ( ((uint_64)$3 >= (uint_64)$17) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	$5 = $4
	$19 = [3]
	goto $label$3 
	
.LABEL $label$5
	$19 = [16]
	goto $label$3 
	
.LABEL $label$4
	$19 = [2]
	
.LABEL $label$3
	
.LOOP $label$7:
	goto $label$35 
	
.LABEL $label$39
	$5 = $1
	$1 = $18
	$17 = *($1 + [16])
	if ( ((uint_64)$3 >= (uint_64)$17) ){ goto $label$21 }
	$19 = [16]
	goto $label$7 
	
.LABEL $label$38
	$18 = *($1)
	if ( $18 ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$37
	if ( ((uint_64)$17 >= (uint_64)$3) ){ goto $label$16 }
	$19 = [15]
	goto $label$7 
	
.LABEL $label$36
	$5 = ($1 + [4])
	$18 = *($1 + [4])
	if ( ($18 == 0) ){ goto $label$19 }
	$19 = [0]
	goto $label$7 
	
.LABEL $label$35
	$1 = $5
	goto $label$20 
	
.LABEL $label$34
	if ( *($5) ){ goto $label$15 }
	$19 = [12]
	goto $label$7 
	
.LABEL $label$33
	*(($18 = CALL _Znwj([24]))) = (int_64)0
	*($18 + [8]) = $1
	*($5) = $18
	*($18 + [16]) = *($2 + [104])
	$1 = *(*($2 + [232]))
	if ( ($1 == 0) ){ goto $label$8 }
	$19 = [13]
	goto $label$7 
	
.LABEL $label$32
	*($2 + [232]) = $1
	$18 = *($5)
	$19 = [14]
	goto $label$7 
	
.LABEL $label$31
	CALL $40(*($2 + [236]), $18)
	*(($1 = (($2 + [232]) + [8]))) = (*($1) + [1])
	goto $label$14 
	
.LABEL $label$30
	$5 = $1
	if ( (*($5) == 0) ){ goto $label$13 }
	$19 = [4]
	goto $label$7 
	
.LABEL $label$29
	CALL eosio_assert(((int_32)*($11) != (int_32)[0]), [18025])
	CALL $41(($2 + [88]), $1, ($2 + [152]), *($11))
	*(($5 = (($2 + [24]) + [8]))) = *($2 + [152])
	*(($18 = (($2 + [24]) + [16]))) = *($14)
	*($10) = *($9)
	*(($10 + [8])) = *(($9 + [8]))
	*($8) = *($2 + [88])
	*(($8 + [8])) = *((($2 + [88]) + [8]))
	*($13) = *($15)
	*($2 + [24]) = $16
	$1 = *($2 + [220])
	if ( ((int_32)$1 == (int_32)*((($2 + [216]) + [8]))) ){ goto $label$12 }
	$19 = [5]
	goto $label$7 
	
.LABEL $label$28
	*($1) = *($2 + [24])
	*(($1 + [56])) = *($13)
	*(($1 + [48])) = *((($2 + [24]) + [48]))
	*(($1 + [40])) = *($8)
	*(($1 + [32])) = *((($2 + [24]) + [32]))
	*(($1 + [24])) = *($10)
	*(($1 + [16])) = *($18)
	*(($1 + [8])) = *($5)
	*($2 + [220]) = ($1 + [64])
	goto $label$11 
	
.LABEL $label$27
	CALL $42(($2 + [216]), ($2 + [24]))
	$19 = [6]
	goto $label$7 
	
.LABEL $label$26
	$3 = *($2 + [208])
	$1 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ((int_32)$1) != (int_32)[0]
	CALL eosio_assert($5), [19046])
	CALL eosio_assert($5, [19080])
	$5 = CALL db_next_i64(*($1 + [56]), ($2 + [328]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$19 = [7]
	goto $label$7 
	
.LABEL $label$25
	CALL $43((CASTING uint_32)(uint_64 $3), $5)
	$19 = [8]
	goto $label$7 
	
.LABEL $label$24
	CALL $44(($2 + [248]), $1)
	if ( ((*($12) & [1]) == 0) ){ goto $label$9 }
	$19 = [9]
	goto $label$7 
	
.LABEL $label$23
	CALL _ZdlPv(*((($2 + [104]) + [16])))
	$19 = [10]
	goto $label$7 
	
.LABEL $label$22
	$6 = ($6 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$2 }
	$5 = *($2 + [232])
	goto $label$1 
	
.LABEL $label$21
	$19 = [2]
	goto $label$7 
	
.LABEL $label$20
	$19 = [1]
	goto $label$7 
	
.LABEL $label$19
	$19 = [3]
	goto $label$7 
	
.LABEL $label$18
	$19 = [17]
	goto $label$7 
	
.LABEL $label$17
	$19 = [1]
	goto $label$7 
	
.LABEL $label$16
	$19 = [3]
	goto $label$7 
	
.LABEL $label$15
	$19 = [4]
	goto $label$7 
	
.LABEL $label$14
	$19 = [4]
	goto $label$7 
	
.LABEL $label$13
	$19 = [12]
	goto $label$7 
	
.LABEL $label$12
	$19 = [11]
	goto $label$7 
	
.LABEL $label$11
	$19 = [6]
	goto $label$7 
	
.LABEL $label$10
	$19 = [8]
	goto $label$7 
	
.LABEL $label$9
	$19 = [10]
	goto $label$7 
	
.LABEL $label$8
	$19 = [14]
	goto $label$7 
	
.LABEL $label$1
	$6 = CALL $45(($2 + [88]), $5, $4)
	CALL $46($0, $6)
	$3 = *($0)
	*($2 + [8]) = [18051]
	*($2 + [12]) = CALL $138([18051])
	*($2) = *($2 + [8])
	$1 = CALL $17(($2 + [16]), $2)
	*(($5 = ($2 + [48]))) = [0]
	*($2 + [24]) = (int_64)5029824546159636432
	*($2 + [40]) = (int_64)0
	*($2 + [32]) = *($1)
	*(($1 = CALL _Znwj([16]))) = $3
	*($1 + [8]) = (int_64)3617214756542218240
	*(($2 + [60])) = [0]
	$18 = ($1 + [16])
	*($5) = $18
	*(($2 + [44])) = $18
	*($2 + [40]) = $1
	*($2 + [52 align=4]) = (int_64)0
	$11 = ($2 + [52])
	$1 = [60]
	$18 = *($2 + [216])
	$5 = *($2 + [220])
	$9 = ($5 - $18)
	$3 = (CASTING uint_64)(uint_32 int_32($9 >> [6]))
	$17 = $3
	
.LOOP $label$40:
	$1 = ($1 + [1])
	$17 = (uint_64)$17 >> (uint_64)(int_64)7
	if ( ((int_64)$17) != (int_64)0) ){ goto $label$40 }
	if ( ((int_32)$18 == (int_32)$5) ){ goto $label$43 }
	$1 = (((int_32)uint_32(($9 + [-64]) >> [6]) * (int_32)[60]) + $1)
	if ( $1 ){ goto $label$42 }
	$5 = [0]
	$1 = [0]
	goto $label$41 
	
.LABEL $label$43
	$1 = ($1 + [-60])
	
.LABEL $label$42
	CALL $47($11, $1)
	$3 = (CASTING uint_64)(uint_32 int_32((*($2 + [220]) - *($2 + [216])) >> [6]))
	$5 = *(($2 + [56]))
	$1 = *(($2 + [52]))
	
.LABEL $label$41
	*($2 + [108]) = $1
	*($2 + [104]) = $1
	*($2 + [112]) = $5
	$11 = ($2 + [112])
	
.LOOP $label$45:
	$18 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	*($2 + [152]) = ((((int_64)$3) != (int_64)0) << [7]) | ($18 & [127]))
	CALL eosio_assert(((int_32)($5 - $1) > (int_32)[0]), [18798])
	CALL memcpy(*($2 + [108]), ($2 + [152]), [1])
	$1 = (*($2 + [108]) + [1])
	*($2 + [108]) = $1
	if ( (int_64)($3 == 0) ){ goto $label$44 }
	$5 = *($11)
	goto $label$45 
	
.LABEL $label$44
	$5 = *($2 + [220])
	$1 = *($2 + [216])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$46 }
	$18 = ($2 + [164])
	$11 = ($2 + [172])
	
.LOOP $label$47:
	*($2 + [328]) = ($2 + [104])
	*($2 + [152]) = $1
	*((($2 + [152]) + [8])) = ($1 + [16])
	*($18) = ($1 + [24])
	*((($2 + [152]) + [16])) = ($1 + [40])
	*($11) = ($1 + [56])
	*($2 + [156]) = ($1 + [8])
	CALL $48(($2 + [152]), ($2 + [328]))
	$1 = ($1 + [64])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$47 }
	
.LABEL $label$46
	CALL $32(($2 + [152]), ($2 + [24]))
	$1 = *($2 + [152])
	CALL send_inline($1, (*($2 + [156]) - $1))
	$1 = *($2 + [152])
	if ( ($1 == 0) ){ goto $label$48 }
	*($2 + [156]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$48
	$1 = *($2 + [52])
	if ( ($1 == 0) ){ goto $label$49 }
	*(($2 + [56])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$49
	$1 = *($2 + [40])
	if ( ($1 == 0) ){ goto $label$50 }
	*(($2 + [44])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$50
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$51 }
	*($6 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$51
	$1 = *($2 + [216])
	if ( ($1 == 0) ){ goto $label$52 }
	*($2 + [220]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$52
	CALL $49(($2 + [232]), *($2 + [236]))
	$18 = *($2 + [272])
	if ( ($18 == 0) ){ goto $label$53 }
	$11 = ($2 + [276])
	$1 = *($11)
	if ( ((int_32)$1 == (int_32)$18) ){ goto $label$55 }
	
.LOOP $label$56:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$57 }
	CALL _ZdlPv($5)
	
.LABEL $label$57
	if ( ((int_32)$18 != (int_32)$1) ){ goto $label$56 }
	$1 = *(($2 + [272]))
	goto $label$54 
	
.LABEL $label$55
	$1 = $18
	
.LABEL $label$54
	*($11) = $18
	CALL _ZdlPv($1)
	
.LABEL $label$53
	$18 = *($2 + [312])
	if ( ($18 == 0) ){ goto $label$58 }
	$11 = ($2 + [316])
	$1 = *($11)
	if ( ((int_32)$1 == (int_32)$18) ){ goto $label$60 }
	
.LOOP $label$61:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$62 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$63
	CALL _ZdlPv($5)
	
.LABEL $label$62
	if ( ((int_32)$18 != (int_32)$1) ){ goto $label$61 }
	$1 = *(($2 + [312]))
	goto $label$59 
	
.LABEL $label$60
	$1 = $18
	
.LABEL $label$59
	*($11) = $18
	CALL _ZdlPv($1)
	
.LABEL $label$58
	$global$0 = ($2 + [336])
	$19
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18434])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18434])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18434])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $76(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $47($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18798])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18798])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $88(CALL $87($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $33 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL require_auth((int_64)6112252634446868640)
	*(($3 + [216])) = [0]
	*($3 + [200]) = (int_64)-1
	*($3 + [208]) = (int_64)0
	$4 = *($0)
	*($3 + [184]) = $4
	*($3 + [192]) = $4
	CALL $34(($3 + [176]), ($3 + [184]), $1, [17940])
	$5 = *($3 + [180])
	*($3 + [128]) = *($5)
	$6 = CALL $104((($3 + [128]) + [8]), ($5 + [8]))
	*((($3 + [128]) + [44])) = *(($5 + [44]))
	*((($3 + [128]) + [36])) = *(($5 + [36]))
	*((($3 + [128]) + [28])) = *(($5 + [28]))
	*($3 + [148 align=4]) = *($5 + [20 align=4])
	$4 = CALL current_time()
	CALL eosio_assert(((uint_32)(*($3 + [152]) + [18]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000))), [17957])
	CALL $6($2, $6)
	*($3 + [124]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL $35(($3 + [124]), $2)
	$7 = (((uint_32)*($3 + [124]) % (uint_32)[100000]) + [1])
	*($3 + [120]) = $7
	$5 = *($3 + [180])
	$4 = *($0)
	*($3 + [72]) = ($3 + [120])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18855])
	CALL $36(($3 + [184]), $5, $4, ($3 + [72]))
	*($3 + [72]) = $1
	$2 = CALL $104((($3 + [72]) + [8]), $2)
	$8 = CALL $104((($3 + [72]) + [20]), $6)
	$5 = ((uint_32)[9800000] / (uint_32)$7)
	*($3 + [104]) = ( $5 ? [100] : ((uint_32)$5 > (uint_32)[100]) )
	*($3 + [108]) = *($3 + [120])
	*($3 + [112]) = *($3 + [152])
	$1 = *($0)
	*($3 + [16]) = [17977]
	*($3 + [20]) = CALL $138([17977])
	*($3 + [8]) = *($3 + [16])
	$5 = CALL $17(($3 + [24]), ($3 + [8]))
	*($3 + [32]) = (int_64)5029824546159636432
	*($3 + [40]) = *($5)
	*(($5 = CALL _Znwj([16]))) = $1
	*($5 + [8]) = (int_64)3617214756542218240
	$0 = ($5 + [16])
	*(($3 + [56])) = $0
	*((($3 + [32]) + [20])) = $0
	*($3 + [48]) = $5
	CALL $31((($3 + [32]) + [28]), ($3 + [72]))
	CALL $32(($3 + [224]), ($3 + [32]))
	$5 = *($3 + [224])
	CALL send_inline($5, (*($3 + [228]) - $5))
	$5 = *($3 + [224])
	if ( ($5 == 0) ){ goto $label$1 }
	*($3 + [228]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$5 = *($3 + [60])
	if ( ($5 == 0) ){ goto $label$2 }
	*(($3 + [64])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$2
	$5 = *($3 + [48])
	if ( ($5 == 0) ){ goto $label$3 }
	*(($3 + [52])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$3
	if ( (*($8) & [1]) ){ goto $label$10 }
	if ( (*($2) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [100])))
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [88])))
	if ( ((*($6) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($6) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	$0 = *($3 + [208])
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [144])))
	$0 = *($3 + [208])
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$6 = ($3 + [212])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$14 }
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$15
	CALL _ZdlPv($2)
	
.LABEL $label$14
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$13 }
	$5 = *(($3 + [208]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $0
	
.LABEL $label$11
	*($6) = $0
	CALL _ZdlPv($5)
	$global$0 = ($3 + [240])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [240])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [8])
	$4 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-20] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = *($1 + [20])
	$4 = ( *(($1 + [24])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = ($3 - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$7 = ($1 + [20])
	
.LOOP $label$2:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $47($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	
.LABEL $label$3
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = $4
	*($2 + [16]) = $2
	*($2 + [28]) = $6
	*($2 + [32]) = $7
	*($2 + [24]) = $1
	*($2 + [36]) = ($1 + [32])
	*($2 + [40]) = ($1 + [36])
	*($2 + [44]) = ($1 + [40])
	CALL $90(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $129 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $125([8], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}