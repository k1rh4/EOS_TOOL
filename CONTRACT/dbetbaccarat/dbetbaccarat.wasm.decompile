(data (i32.const 4) "\d0k\00\00")
(data (i32.const 16) "baccarat apply: (receiver, code, action): (\00")
(data (i32.const 64) ",\00")
(data (i32.const 80) ")\n\00")
(data (i32.const 96) "eosio\00")
(data (i32.const 112) "onerror\00")
(data (i32.const 128) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 192) "eosio.token\00")
(data (i32.const 208) "dbetminepool\00")
(data (i32.const 224) "betdicetoken\00")
(data (i32.const 240) "bitpietokens\00")
(data (i32.const 256) "transfer\00")
(data (i32.const 272) "startgame\00")
(data (i32.const 288) "stopgame\00")
(data (i32.const 304) "setprofit\00")
(data (i32.const 320) "clear\00")
(data (i32.const 336) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 400) "invalid symbol name\00")
(data (i32.const 432) "read\00")
(data (i32.const 448) "attempt to subtract asset with different symbol\00")
(data (i32.const 496) "subtraction underflow\00")
(data (i32.const 528) "subtraction overflow\00")
(data (i32.const 560) "cannot pass end iterator to erase\00")
(data (i32.const 608) "active\00")
(data (i32.const 624) "dbetonesicbo\00")
(data (i32.const 640) "setdivpool\00")
(data (i32.const 656) "dbetbaccarat\00")
(data (i32.const 688) "We do not support this token currently\00")
(data (i32.const 736) "write\00")
(data (i32.const 752) "object passed to erase is not in multi_index\00")
(data (i32.const 800) "cannot erase objects in table of another contract\00")
(data (i32.const 864) "attempt to remove object that was not in multi_index\00")
(data (i32.const 928) "cannot increment end iterator\00")
(data (i32.const 960) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 1024) "error reading iterator\00")
(data (i32.const 1056) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1120) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1168) "cannot pass end iterator to modify\00")
(data (i32.const 1216) "object passed to modify is not in multi_index\00")
(data (i32.const 1264) "cannot modify objects in table of another contract\00")
(data (i32.const 1328) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1392) "table baccastat not exist ?\00")
(data (i32.const 1424) "cannot create objects in table of another contract\00")
(data (i32.const 1488) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1552) "get\00")
(data (i32.const 1568) "-\00")
(data (i32.const 1584) "Invalid token transfer\00")
(data (i32.const 1616) "Can not bet this moment\00")
(data (i32.const 1648) "You had bet this Type\00")
(data (i32.const 1680) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1744) "Quantity not enough\00")
(data (i32.const 1776) "bets is empty\00")
(data (i32.const 1792) "System error!\00")
(data (i32.const 1808) "dBet (https://tt.dbet.one \e6\9c\80\e9\ab\98\e8\b5\94\e7\8e\87\e6\9c\80\e9\ab\98\e5\88\86\e7\ba\a2\e9\aa\b0\e5\ae\9d\e6\b8\b8\e6\88\8f) \e9\82\80\e8\af\b7\e7\94\a8\e6\88\b7\00")
(data (i32.const 1888) "\e5\a5\96\e5\8a\b1!\00")
(data (i32.const 1904) "addenergy\00")
(data (i32.const 1920) "dbetactivity\00")
(data (i32.const 1936) "candy\00")
(data (i32.const 1952) "dbetonedice1\00")
(data (i32.const 1968) "attempt to add asset with different symbol\00")
(data (i32.const 2016) "addition underflow\00")
(data (i32.const 2048) "addition overflow\00")
(data (i32.const 2068) " \08\00\00")
(data (i32.const 2080) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 2128) "bacroll\00")
(data (i32.const 2144) "baccarat game mark error\00")
(data (i32.const 2176) "Quantity must be positive number\00")
(data (i32.const 2224) "memo error!\00")
(data (i32.const 2240) "EOS without bet type\00")
(data (i32.const 2272) "Bet type must be positive number\00")
(data (i32.const 2320) "bet type error\00")
(data (i32.const 2336) "Quantity must be biger than 0.1 EOS\00")
(data (i32.const 2384) "Quantity must not biger than 100 EOS\00")
(data (i32.const 2432) "Quantity must be biger than 100 DBET\00")
(data (i32.const 2480) "Quantity must not biger than 100K DBET\00")
(data (i32.const 2528) "Quantity must be biger than 10 DICE\00")
(data (i32.const 2576) "Quantity must not biger than 10K DICE\00")
(data (i32.const 2624) "Quantity must be biger than 0.1 EUSD\00")
(data (i32.const 2672) "Quantity must not biger than 100 EUSD\00")
(data (i32.const 11120) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$8 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$10 (param i32)))
(import "env" "db_idx64_store" (func $fimport$11 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$12 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$19 (param i32 i32)))
(import "env" "is_account" (func $fimport$20 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "printn" (func $fimport$24 (param i64)))
(import "env" "prints" (func $fimport$25 (param i32)))
(import "env" "read_action_data" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$27 (param i64)))
(import "env" "require_auth2" (func $fimport$28 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$29 (param i32 i64 i32 i32 i32)))
(import "env" "sha256" (func $fimport$30 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$31 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$32 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN8baccarat8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $6))
(export "_ZN8baccarat9startgameEy" (func $8))
(export "_ZN8baccarat8stopgameEy" (func $10))
(export "_ZN8baccarat5clearEy" (func $11))
(export "_ZN8baccarat9setprofitEyN5eosio5assetES1_S1_S1_" (func $12))
(export "_ZN8baccarat12_transfer_toEyN5eosio5assetERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEo" (func $22))
(export "_ZN8baccarat18_require_bet_quantEN5eosio5assetE" (func $52))
(export "_ZN8baccarat12_split_extraENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPN5eosio5assetEPySA_PNS0_6vectorI6OnebetNS4_ISC_EEEE" (func $53))
(export "_ZN8baccarat10_addinviteEyN5eosio5assetE" (func $58))
(export "_ZN8baccarat10_str2assetENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5eosio11symbol_typeE" (func $65))
(export "_Z8isdecnumNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $67))
(export "_Z8isdecnumPKc" (func $68))
(export "_ZN8baccarat16_generateRandNumEyPy" (func $69))
(export "_ZN8baccarat22_require_bet_rollunderEi" (func $70))
(export "malloc" (func $71))
(export "free" (func $74))
(export "isdigit" (func $90))
(export "atoi" (func $91))
(export "atoll" (func $92))
(export "memchr" (func $93))
(export "memcmp" (func $94))
(export "strlen" (func $95))
(table $0 6 6 anyfunc)
(elem (i32.const 0) $96 $6 $8 $10 $11 $12)



int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $96 ()
{
	(unreachable)
}

int_32 .FUNC isdigit (int_32 $0)
{
	return (($0 + [-48]) <= [10])
}

int_32 .FUNC atoi (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$1 = [1]
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$1 = [0]
	
.LABEL $label$2
	$2 = [0]
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $3)
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $1 )
}

int_64 .FUNC atoll (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$5 = (int_64)0
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$5 = (int_64)0
	
.LOOP $label$7:
	$5 = (int_64))(((int_64)$5 * (int_64)10) - (CASTING int_64)(int_32 $3))
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $5 ? (int_64))((int_64)0 - $5) : $2 )
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1024])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $75([88])) + [40]) = (int_64)1398362884
	*($4 + [32]) = (int_64)0
	CALL eosio_assert([1], [336])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [400])
	*($4 + [72]) = $0
	*($4 + [56]) = [0]
	CALL $41(($8 + [32]), $4)
	*($4 + [80]) = [-1]
	*($4 + [76]) = $1
	*($4 + [84]) = [-1]
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [76])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $42($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $76($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $88(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $88(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $76(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [432])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [432])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $50(*($1), ($0 + [32]))
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $87($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $76($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $76($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [432])
	CALL memcpy(($1 + [56]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [752])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [800])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [864])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $76($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $76($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
	$7 = *(($1 + [80]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4147959502518353920, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	$7 = *(($1 + [84]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4147959502518353921, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [44]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1120])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4147959718683869184)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1056])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1056])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $36(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($0)
	$5 = *(*($0 + [4]))
	$4 = *($5 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)4147959718683869184, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $36($5, $3)
	*($6 + [28]) = [0]
	*($6 + [24]) = $5
	$4 = *(*(CALL $47(($6 + [24])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [1488])
	*($1) = *(($5 + [16]))
	$4 = CALL current_time()
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = ((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$7 = $7
	$5 = ($7 + [-48])
	*([0] + [4]) = $5
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($7 + [-8])
	*($6 + [16]) = $6
	*($6 + [28]) = ($1 + [8])
	*($6 + [24]) = $1
	*($6 + [32]) = ($1 + [16])
	*($6 + [36]) = ($1 + [24])
	*($6 + [40]) = ($1 + [32])
	CALL $45(($6 + [24]), ($6 + [16]))
	$4 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)4147959718683869184, *(*($0 + [8])), $4, $5, [40])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [736])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [736])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [736])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [736])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [736])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $87($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $76($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $76($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN8baccarat9startgameEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [144])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	*(($2 = (($8 + [8]) + [32]))) = [0]
	*($8 + [24]) = (int_64)-1
	$4 = *($0)
	*($8 + [8]) = $4
	*($8 + [16]) = $4
	*($8 + [32]) = (int_64)0
	$3 = CALL db_find_i64($4, $4, (int_64)4147959718683869184, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $36(($8 + [8]), $3)
	CALL eosio_assert(((int_32)*($0 + [40]) == (int_32)($8 + [8])), [960])
	CALL eosio_assert([1], [1168])
	CALL eosio_assert(((int_32)*($0 + [40]) == (int_32)($8 + [8])), [1216])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)CALL $fimport$2()), [1264])
	$4 = *($0)
	$5 = CALL current_time()
	*($0 + [8]) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($0)), [1328])
	*($8 + [104]) = (($8 + [48]) + [40])
	*($8 + [100]) = ($8 + [48])
	*($8 + [96]) = ($8 + [48])
	*($8 + [112]) = ($8 + [96])
	*($8 + [124]) = ($0 + [8])
	*($8 + [120]) = $0
	*($8 + [128]) = ($0 + [16])
	*($8 + [132]) = ($0 + [24])
	*($8 + [136]) = ($0 + [32])
	CALL $45(($8 + [120]), ($8 + [112]))
	CALL db_update_i64(*($0 + [44]), (int_64)0, ($8 + [48]), [40])
	$0 = (($8 + [8]) + [16])
	if ( (uint_64)($4 <= *($0)) ){ goto $label$3 }
	*($0) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$2 = *($8 + [32])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$4 = *($0)
	*($8) = ($8 + [8])
	*($8 + [120]) = $4
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)CALL $fimport$2()), [1424])
	*($8 + [52]) = $8
	*($8 + [48]) = ($8 + [8])
	*($8 + [56]) = ($8 + [120])
	*(($0 = CALL $75([56])) + [40]) = ($8 + [8])
	CALL $46(($8 + [48]), $0)
	*($8 + [96]) = $0
	$4 = *($0)
	*($8 + [48]) = $4
	$7 = *($0 + [44])
	*($8 + [112]) = $7
	$6 = ($8 + [36])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*($2)) ){ goto $label$6 }
	*($3 + [8]) = $4
	*($3 + [16]) = $7
	*($8 + [96]) = [0]
	*($3) = $0
	*($6) = ($3 + [24])
	goto $label$5 
	
.LABEL $label$6
	CALL $44(($8 + [32]), ($8 + [96]), ($8 + [48]), ($8 + [112]))
	
.LABEL $label$5
	$0 = *($8 + [96])
	*($8 + [96]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	CALL $76($0)
	
.LABEL $label$3
	$2 = *($8 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($8 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	CALL $76($3)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($8 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $2
	
.LABEL $label$7
	*($7) = $2
	CALL $76($0)
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [144])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [432])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN8baccarat8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [384])
	*([0] + [4]) = $17
	*($17 + [376]) = $1
	$15 = *($0)
	if ( ((int_64)$15 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$15 != (int_64)$2) ){ goto $label$2 }
	$14 = *($4)
	$8 = ($14 & [1])
	if ( $8 ){ goto $label$4 }
	if ( uint_32($14 >> [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($4 + [4]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	if ( $8 ){ goto $label$6 }
	$8 = uint_32($14 >> [1])
	$10 = ($4 + [1])
	goto $label$5 
	
.LABEL $label$6
	$8 = *($4 + [4])
	$10 = *($4 + [8])
	
.LABEL $label$5
	$14 = CALL strlen([1568])
	if ( ($14 == 0) ){ goto $label$7 }
	if ( ((int_32)$8 < (int_32)$14) ){ goto $label$2 }
	$9 = ($10 + $8)
	$6 = $10
	
.LOOP $label$8:
	$8 = (($8 - $14) + [1])
	if ( ($8 == 0) ){ goto $label$2 }
	$8 = CALL memchr($6, [45], $8)
	if ( ($8 == 0) ){ goto $label$2 }
	if ( (CALL memcmp($8, [1568], $14) == 0) ){ goto $label$9 }
	$6 = ($8 + [1])
	$8 = ($9 - $6)
	if ( ((int_32)$8 >= (int_32)$14) ){ goto $label$8 }
	goto $label$2 
	
.LABEL $label$9
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	if ( ((int_32)($8 - $10) == (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$7
	$8 = [0]
	$5 = *($3)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$10 }
	$1 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$8 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$8 = [0]
	
.LABEL $label$10
	CALL eosio_assert($8, [1584])
	*(($14 = (($17 + [360]) + [8]))) = *(($3 + [8]))
	$1 = *($3)
	*((($17 + [32]) + [12])) = *((($17 + [360]) + [12]))
	*((($17 + [32]) + [8])) = *($14)
	*($17 + [360]) = $1
	*($17 + [36]) = *($17 + [364])
	*($17 + [32]) = *($17 + [360])
	CALL _ZN8baccarat18_require_bet_quantEN5eosio5assetE($14, ($17 + [32]))
	*(($17 + [352])) = [0]
	*($17 + [336]) = (int_64)-1
	$1 = *($0)
	*($17 + [320]) = $1
	*($17 + [328]) = $1
	*($17 + [344]) = (int_64)0
	$14 = CALL db_find_i64($1, $1, (int_64)4147959718683869184, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$16 }
	$14 = CALL $36(($17 + [320]), $14)
	CALL eosio_assert(((int_32)*($14 + [40]) == (int_32)($17 + [320])), [960])
	if ( (int_64)(*($14 + [32]) == 0) ){ goto $label$17 }
	if ( (uint_64)((int_64))(((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *(($14 + [32]))) <= (int_64)51) ){ goto $label$15 }
	
.LABEL $label$17
	CALL eosio_assert([0], [1616])
	goto $label$15 
	
.LABEL $label$16
	CALL eosio_assert([0], [1616])
	
.LABEL $label$15
	*($17 + [312]) = (int_64)1398362884
	*($17 + [304]) = (int_64)0
	CALL eosio_assert([1], [336])
	$1 = (int_64)5462355
	$14 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	
.LOOP $label$22:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$22 }
	
.LABEL $label$21
	$8 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$8 = [0]
	
.LABEL $label$18
	CALL eosio_assert($8, [400])
	$2 = *($3 + [8])
	*((($17 + [304]) + [8])) = $2
	*($17 + [304]) = (int_64)0
	*($17 + [296]) = (int_64)0
	*($17 + [288]) = (int_64)0
	*($17 + [280]) = [0]
	*($17 + [272]) = (int_64)0
	CALL $88(($17 + [256]), $4)
	CALL _ZN8baccarat12_split_extraENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPN5eosio5assetEPySA_PNS0_6vectorI6OnebetNS4_ISC_EEEE($0, ($17 + [256]), ($17 + [304]), ($17 + [296]), ($17 + [288]), ($17 + [272]))
	if ( ((*($17 + [256]) & [1]) == 0) ){ goto $label$23 }
	CALL $76(*($17 + [264]))
	
.LABEL $label$23
	$6 = ($0 + [8])
	*($17 + [248]) = $6
	CALL $54(($17 + [128]), ($17 + [248]), ($17 + [296]))
	$14 = *($17 + [132])
	if ( ($14 == 0) ){ goto $label$25 }
	if ( ((int_64)*($17 + [296]) != (int_64)*($14 + [16])) ){ goto $label$25 }
	$1 = *($17 + [128])
	*($17 + [240]) = $1
	$14 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($14) == 0) ){ goto $label$24 }
	
.LOOP $label$26:
	if ( ((int_64)*($14 + [8]) != (int_64)*($17 + [376])) ){ goto $label$27 }
	CALL eosio_assert([0], [1648])
	
.LABEL $label$27
	CALL $55(($17 + [240]))
	$14 = *($17 + [244])
	if ( $14 ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	*($17 + [244]) = [0]
	*($17 + [240]) = ($17 + [248])
	
.LABEL $label$24
	CALL eosio_assert(((int_64)$2 == (int_64)*((($17 + [304]) + [8]))), [1680])
	CALL eosio_assert(((int_64)$5 >= (int_64)*($17 + [304])), [1744])
	CALL eosio_assert(((int_32)*($17 + [272]) != (int_32)*($17 + [276])), [1776])
	$14 = *($17 + [272])
	*($17 + [104]) = $14
	if ( ((int_32)$14 == (int_32)*($17 + [276])) ){ goto $label$28 }
	$7 = ($0 + [32])
	$9 = ($17 + [140])
	$10 = ($17 + [144])
	$11 = ($0 + [40])
	$3 = ($0 + [36])
	
.LOOP $label$29:
	$1 = *($0)
	*($17 + [128]) = $0
	*((($17 + [128]) + [8])) = ($17 + [296])
	*($9) = ($17 + [104])
	*($10) = ($17 + [288])
	*($17 + [132]) = ($17 + [376])
	*($17 + [192]) = $1
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [1424])
	*($17 + [64]) = $6
	*((($17 + [64]) + [8])) = ($17 + [192])
	*($17 + [68]) = ($17 + [128])
	*(($8 = CALL $75([88])) + [40]) = (int_64)1398362884
	*($8 + [32]) = (int_64)0
	CALL eosio_assert([1], [336])
	$1 = (int_64)5462355
	$14 = [0]
	
.LOOP $label$31:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	
.LOOP $label$33:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$33 }
	
.LABEL $label$32
	$4 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$31 }
	
.LABEL $label$30
	CALL eosio_assert($4, [400])
	*($8 + [72]) = $6
	*($8 + [56]) = [0]
	CALL $56(($17 + [64]), $8)
	*($17 + [112]) = $8
	$1 = *($8)
	*($17 + [64]) = $1
	$4 = *($8 + [76])
	*($17 + [48]) = $4
	$14 = *($3)
	if ( ((uint_32)$14 >= (uint_32)*($11)) ){ goto $label$35 }
	*($14 + [8]) = $1
	*($14 + [16]) = $4
	*($17 + [112]) = [0]
	*($14) = $8
	*($3) = ($14 + [24])
	goto $label$34 
	
.LABEL $label$35
	CALL $42($7, ($17 + [112]), ($17 + [64]), ($17 + [48]))
	
.LABEL $label$34
	$14 = *($17 + [112])
	*($17 + [112]) = [0]
	if ( ($14 == 0) ){ goto $label$36 }
	CALL $76($14)
	
.LABEL $label$36
	$14 = (*($17 + [104]) + [24])
	*($17 + [104]) = $14
	if ( ((int_32)$14 != (int_32)*($17 + [276])) ){ goto $label$29 }
	
.LABEL $label$28
	$1 = *($17 + [288])
	if ( (int_64)($1 == 0) ){ goto $label$37 }
	if ( ((int_64)$1 == (int_64)*($17 + [376])) ){ goto $label$37 }
	CALL eosio_assert([1], [336])
	$1 = (int_64)5462355
	$14 = [0]
	
.LOOP $label$40:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$39 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$41 }
	
.LOOP $label$42:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$42 }
	
.LABEL $label$41
	$8 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$8 = [0]
	
.LABEL $label$38
	CALL eosio_assert($8, [400])
	$15 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $5) * (float_64)(float_64)0.002))
	$4 = ((int_64)$2 == (int_64)1397703940)
	if ( ($4 == 0) ){ goto $label$55 }
	CALL eosio_assert([1], [336])
	$1 = (int_64)5459781
	$14 = [0]
	
.LOOP $label$56:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$54 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$57 }
	
.LOOP $label$58:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$58 }
	
.LABEL $label$57
	$8 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$56 }
	goto $label$53 
	
.LABEL $label$55
	$4 = ((int_64)$2 == (int_64)361939223556)
	if ( ($4 == 0) ){ goto $label$52 }
	CALL eosio_assert([1], [336])
	$1 = (int_64)1413825092
	$14 = [0]
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$51 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$60 }
	
.LOOP $label$61:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$51 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$61 }
	
.LABEL $label$60
	$8 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$59 }
	goto $label$50 
	
.LABEL $label$54
	$8 = [0]
	
.LABEL $label$53
	CALL eosio_assert($8, [400])
	CALL eosio_assert($4, [1680])
	CALL eosio_assert(((int_64)$15 < (int_64)10000), [1792])
	goto $label$43 
	
.LABEL $label$52
	$4 = ((int_64)$2 == (int_64)297481618436)
	if ( ($4 == 0) ){ goto $label$49 }
	CALL eosio_assert([1], [336])
	$1 = (int_64)1162037572
	$14 = [0]
	
.LOOP $label$62:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$63 }
	
.LOOP $label$64:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$48 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$64 }
	
.LABEL $label$63
	$8 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$62 }
	goto $label$47 
	
.LABEL $label$51
	$8 = [0]
	
.LABEL $label$50
	CALL eosio_assert($8, [400])
	CALL eosio_assert($4, [1680])
	CALL eosio_assert(((int_64)$15 < (int_64)10000000), [1792])
	goto $label$43 
	
.LABEL $label$49
	$4 = ((int_64)$2 == (int_64)293455873288)
	if ( ($4 == 0) ){ goto $label$46 }
	CALL eosio_assert([1], [336])
	$1 = (int_64)1146312005
	$14 = [0]
	
.LOOP $label$65:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$45 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$66 }
	
.LOOP $label$67:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$45 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$67 }
	
.LABEL $label$66
	$8 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$65 }
	goto $label$44 
	
.LABEL $label$48
	$8 = [0]
	
.LABEL $label$47
	CALL eosio_assert($8, [400])
	CALL eosio_assert($4, [1680])
	CALL eosio_assert(((int_64)$15 < (int_64)1000000), [1792])
	goto $label$43 
	
.LABEL $label$46
	CALL eosio_assert([0], [688])
	goto $label$43 
	
.LABEL $label$45
	$8 = [0]
	
.LABEL $label$44
	CALL eosio_assert($8, [400])
	CALL eosio_assert($4, [1680])
	CALL eosio_assert(((int_64)$15 < (int_64)100000000), [1792])
	
.LABEL $label$43
	*($17 + [112]) = *($17 + [376])
	$1 = *($17 + [288])
	$16 = CALL current_time()
	*($17 + [232]) = $2
	$12 = *($17 + [288])
	$13 = *($17 + [376])
	*($17 + [224]) = $15
	CALL $57(($17 + [192]), ($17 + [112]))
	$14 = CALL $83(($17 + [192]), [0], [1808])
	$8 = ($14 + [8])
	*((($17 + [64]) + [8])) = *($8)
	*($17 + [64]) = *($14)
	*($14) = [0]
	*(($14 + [4])) = [0]
	*($8) = [0]
	$14 = CALL $81(($17 + [64]), [1888])
	$8 = ($14 + [8])
	*((($17 + [128]) + [8])) = *($8)
	*($17 + [128]) = *($14)
	*($14) = [0]
	*(($14 + [4])) = [0]
	*($8) = [0]
	*((($17 + [16]) + [8])) = *($17 + [232])
	*($17 + [16]) = *($17 + [224])
	CALL _ZN8baccarat12_transfer_toEyN5eosio5assetERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEo($0, $12, ($17 + [16]), ($17 + [128]), ((int_64)$13 + (int_64)((int_64)((uint_64)$16 / (uint_64)(int_64)1000000) & (int_64)4294967295)), $1)
	if ( ((*($17 + [128]) & [1]) == 0) ){ goto $label$68 }
	CALL $76(*($17 + [136]))
	
.LABEL $label$68
	if ( ((*($17 + [64]) & [1]) == 0) ){ goto $label$69 }
	CALL $76(*($17 + [72]))
	
.LABEL $label$69
	if ( ((*($17 + [192]) & [1]) == 0) ){ goto $label$70 }
	CALL $76(*($17 + [200]))
	
.LABEL $label$70
	*($17 + [216]) = $2
	*(($17 + [8])) = $2
	$1 = *($17 + [296])
	*($17 + [208]) = $15
	*($17) = *($17 + [208])
	CALL _ZN8baccarat10_addinviteEyN5eosio5assetE($0, $1, $17)
	
.LABEL $label$37
	if ( ((int_64)$2 != (int_64)1397703940) ){ goto $label$72 }
	$12 = *($0)
	$1 = (int_64)0
	$15 = (int_64)59
	$14 = [1904]
	$16 = (int_64)0
	
.LOOP $label$73:
	if ( ((uint_64)$1 > (uint_64)(int_64)8) ){ goto $label$78 }
	$8 = *($14)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$77 }
	$8 = ($8 + [165])
	goto $label$76 
	
.LABEL $label$78
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$77
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$76
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$75
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$74
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$2 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$73 }
	$1 = (int_64)0
	*($17 + [192]) = (int_64)0
	*($17 + [200]) = ((int_64)$16 + (int_64)$12)
	$2 = *($17 + [376])
	$16 = *($17 + [192])
	$15 = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) | (int_64)((int_64)$2 << (int_64)32))
	$2 = ((int_64)$15 + (int_64)$16)
	*($17 + [192]) = $2
	*($17 + [200]) = ((int_64)*($17 + [200]) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($2 <= $15)) : (uint_64)($2 <= $16) ))
	$2 = CALL current_time()
	*(($17 + [156])) = [0]
	*(($17 + [160])) = [0]
	*($17 + [140]) = [0]
	*($17 + [144]) = [0]
	*($17 + [148]) = [0]
	*($17 + [152]) = [0]
	*($17 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	*($17 + [164]) = [0]
	*(($17 + [168])) = [0]
	*(($17 + [172])) = [0]
	*($17 + [176]) = [0]
	*(($17 + [180])) = [0]
	*(($17 + [184])) = [0]
	$4 = ($17 + [164])
	$12 = *($0)
	$15 = (int_64)59
	$14 = [608]
	$16 = (int_64)0
	
.LOOP $label$79:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$84 }
	$8 = *($14)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$83 }
	$8 = ($8 + [165])
	goto $label$82 
	
.LABEL $label$84
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$83
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$82
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$81
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$80
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$2 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$79 }
	*($17 + [120]) = $16
	*($17 + [112]) = $12
	$1 = (int_64)0
	$2 = (int_64)59
	$14 = [1920]
	$16 = (int_64)0
	
.LOOP $label$85:
	$15 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$86 }
	$8 = *($14)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$88 }
	$8 = ($8 + [165])
	goto $label$87 
	
.LABEL $label$88
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$87
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$86
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$85 }
	*($17 + [48]) = $16
	$1 = (int_64)0
	$15 = (int_64)59
	$14 = [1904]
	$16 = (int_64)0
	
.LOOP $label$89:
	if ( ((uint_64)$1 > (uint_64)(int_64)8) ){ goto $label$94 }
	$8 = *($14)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$93 }
	$8 = ($8 + [165])
	goto $label$92 
	
.LABEL $label$94
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$93
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$92
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$91
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$90
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$2 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$89 }
	*($17 + [104]) = $16
	$1 = (int_64)0
	$2 = (int_64)59
	$14 = [656]
	$16 = (int_64)0
	
.LOOP $label$95:
	$15 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$96 }
	$8 = *($14)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$98 }
	$8 = ($8 + [165])
	goto $label$97 
	
.LABEL $label$98
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$97
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$96
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$95 }
	*($17 + [64]) = $16
	*($17 + [80]) = $5
	*($17 + [72]) = *($17 + [376])
	CALL $59($4, ($17 + [112]), ($17 + [48]), ($17 + [104]), ($17 + [64]))
	$1 = *($0)
	*(($17 + [148])) = [0]
	CALL $20(($17 + [64]), ($17 + [128]))
	$14 = *($17 + [64])
	CALL send_deferred(($17 + [192]), $1, $14, (*($17 + [68]) - $14), [0])
	$14 = *($17 + [64])
	if ( ($14 == 0) ){ goto $label$99 }
	*($17 + [68]) = $14
	CALL $76($14)
	
.LABEL $label$99
	CALL $21(($17 + [128]))
	goto $label$71 
	
.LABEL $label$72
	if ( ((int_64)$2 != (int_64)293455873288) ){ goto $label$71 }
	$12 = *($0)
	$1 = (int_64)0
	$15 = (int_64)59
	$14 = [1904]
	$16 = (int_64)0
	
.LOOP $label$100:
	if ( ((uint_64)$1 > (uint_64)(int_64)8) ){ goto $label$105 }
	$8 = *($14)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$104 }
	$8 = ($8 + [165])
	goto $label$103 
	
.LABEL $label$105
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$102 }
	goto $label$101 
	
.LABEL $label$104
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$103
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$102
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$101
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$2 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$100 }
	$1 = (int_64)0
	*($17 + [192]) = (int_64)0
	*($17 + [200]) = ((int_64)$16 + (int_64)$12)
	$2 = *($17 + [376])
	$16 = *($17 + [192])
	$15 = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) | (int_64)((int_64)$2 << (int_64)32))
	$2 = ((int_64)$15 + (int_64)$16)
	*($17 + [192]) = $2
	*($17 + [200]) = ((int_64)*($17 + [200]) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($2 <= $15)) : (uint_64)($2 <= $16) ))
	$2 = CALL current_time()
	*(($17 + [156])) = [0]
	*(($17 + [160])) = [0]
	*($17 + [140]) = [0]
	*($17 + [144]) = [0]
	*($17 + [148]) = [0]
	*($17 + [152]) = [0]
	*($17 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	*($17 + [164]) = [0]
	*(($17 + [168])) = [0]
	*(($17 + [172])) = [0]
	*($17 + [176]) = [0]
	*(($17 + [180])) = [0]
	*(($17 + [184])) = [0]
	$4 = ($17 + [164])
	$12 = *($0)
	$15 = (int_64)59
	$14 = [608]
	$16 = (int_64)0
	
.LOOP $label$106:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$111 }
	$8 = *($14)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$110 }
	$8 = ($8 + [165])
	goto $label$109 
	
.LABEL $label$111
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$108 }
	goto $label$107 
	
.LABEL $label$110
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$109
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$108
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$107
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$2 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$106 }
	*($17 + [120]) = $16
	*($17 + [112]) = $12
	$1 = (int_64)0
	$2 = (int_64)59
	$14 = [1920]
	$16 = (int_64)0
	
.LOOP $label$112:
	$15 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$113 }
	$8 = *($14)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$115 }
	$8 = ($8 + [165])
	goto $label$114 
	
.LABEL $label$115
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$114
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$113
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$112 }
	*($17 + [48]) = $16
	$1 = (int_64)0
	$15 = (int_64)59
	$14 = [1904]
	$16 = (int_64)0
	
.LOOP $label$116:
	if ( ((uint_64)$1 > (uint_64)(int_64)8) ){ goto $label$121 }
	$8 = *($14)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$120 }
	$8 = ($8 + [165])
	goto $label$119 
	
.LABEL $label$121
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$118 }
	goto $label$117 
	
.LABEL $label$120
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$119
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$118
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$117
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$2 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$116 }
	*($17 + [104]) = $16
	$1 = (int_64)0
	$2 = (int_64)59
	$14 = [656]
	$16 = (int_64)0
	
.LOOP $label$122:
	$15 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$123 }
	$8 = *($14)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$125 }
	$8 = ($8 + [165])
	goto $label$124 
	
.LABEL $label$125
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$124
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$123
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$122 }
	*($17 + [64]) = $16
	*($17 + [72]) = *($17 + [376])
	*($17 + [80]) = ((uint_32)(CASTING uint_32)(uint_64 $5) / (uint_32)[20000])
	CALL $59($4, ($17 + [112]), ($17 + [48]), ($17 + [104]), ($17 + [64]))
	$1 = *($0)
	*(($17 + [148])) = [0]
	CALL $20(($17 + [64]), ($17 + [128]))
	$14 = *($17 + [64])
	CALL send_deferred(($17 + [192]), $1, $14, (*($17 + [68]) - $14), [0])
	$14 = *($17 + [64])
	if ( ($14 == 0) ){ goto $label$126 }
	*($17 + [68]) = $14
	CALL $76($14)
	
.LABEL $label$126
	CALL $21(($17 + [128]))
	
.LABEL $label$71
	$5 = *($0)
	$1 = (int_64)0
	$15 = (int_64)59
	$14 = [1936]
	$16 = (int_64)0
	
.LOOP $label$127:
	if ( ((uint_64)$1 > (uint_64)(int_64)4) ){ goto $label$132 }
	$8 = *($14)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$131 }
	$8 = ($8 + [165])
	goto $label$130 
	
.LABEL $label$132
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$129 }
	goto $label$128 
	
.LABEL $label$131
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$130
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$129
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$128
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$2 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$127 }
	$1 = *($17 + [376])
	$2 = CALL current_time()
	*($17 + [200]) = ((int_64)$16 + (int_64)$5)
	*($17 + [192]) = ((int_64)((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295) | (int_64)((int_64)$1 << (int_64)32))
	$1 = CALL current_time()
	*(($17 + [156])) = [0]
	*(($17 + [160])) = [0]
	*($17 + [140]) = [0]
	*($17 + [144]) = [0]
	*($17 + [148]) = [0]
	*($17 + [152]) = [0]
	*($17 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	*($17 + [164]) = [0]
	*(($17 + [168])) = [0]
	*(($17 + [172])) = [0]
	*($17 + [176]) = [0]
	*(($17 + [180])) = [0]
	*(($17 + [184])) = [0]
	$4 = ($17 + [164])
	$5 = *($0)
	$1 = (int_64)0
	$15 = (int_64)59
	$14 = [608]
	$16 = (int_64)0
	
.LOOP $label$133:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$138 }
	$8 = *($14)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$137 }
	$8 = ($8 + [165])
	goto $label$136 
	
.LABEL $label$138
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$135 }
	goto $label$134 
	
.LABEL $label$137
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$136
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$135
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$134
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$2 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$133 }
	*($17 + [120]) = $16
	*($17 + [112]) = $5
	$1 = (int_64)0
	$2 = (int_64)59
	$14 = [1952]
	$16 = (int_64)0
	
.LOOP $label$139:
	$15 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$140 }
	$8 = *($14)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$142 }
	$8 = ($8 + [165])
	goto $label$141 
	
.LABEL $label$142
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$141
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$140
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$139 }
	*($17 + [104]) = $16
	$1 = (int_64)0
	$15 = (int_64)59
	$14 = [1936]
	$16 = (int_64)0
	
.LOOP $label$143:
	if ( ((uint_64)$1 > (uint_64)(int_64)4) ){ goto $label$148 }
	$8 = *($14)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$147 }
	$8 = ($8 + [165])
	goto $label$146 
	
.LABEL $label$148
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$145 }
	goto $label$144 
	
.LABEL $label$147
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$146
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$145
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$144
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$2 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$143 }
	*($17 + [96]) = $16
	*(($17 + [56])) = [0]
	*($17 + [48]) = (int_64)0
	$14 = CALL strlen([672])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$151 }
	*($17 + [48]) = ($14 << [1])
	$8 = (($17 + [48]) | [1])
	if ( $14 ){ goto $label$150 }
	goto $label$149 
	
.LABEL $label$151
	$6 = (($14 + [16]) & [-16])
	$8 = CALL $75($6)
	*($17 + [48]) = ($6 | [1])
	*($17 + [56]) = $8
	*($17 + [52]) = $14
	
.LABEL $label$150
	CALL memcpy($8, [672], $14)
	
.LABEL $label$149
	*(($8 + $14)) = [0]
	*(($17 + [84])) = *($17 + [52])
	*($17 + [64]) = *($0)
	*($17 + [72]) = *($17 + [376])
	$14 = ($17 + [56])
	*(($17 + [88])) = *($14)
	*($17 + [80]) = *($17 + [48])
	*($17 + [48]) = [0]
	*($17 + [52]) = [0]
	*($14) = [0]
	$14 = (($17 + [128]) + [40])
	$8 = *($14)
	if ( ((uint_32)$8 >= (uint_32)*(($17 + [172]))) ){ goto $label$153 }
	CALL $60($8, ($17 + [112]), *($17 + [104]), *($17 + [96]), ($17 + [64]))
	*($14) = (*($14) + [40])
	goto $label$152 
	
.LABEL $label$153
	CALL $61($4, ($17 + [112]), ($17 + [104]), ($17 + [96]), ($17 + [64]))
	
.LABEL $label$152
	if ( ((*(($17 + [80])) & [1]) == 0) ){ goto $label$154 }
	CALL $76(*(($17 + [88])))
	
.LABEL $label$154
	if ( ((*($17 + [48]) & [1]) == 0) ){ goto $label$155 }
	CALL $76(*(($17 + [56])))
	
.LABEL $label$155
	*(($17 + [148])) = [0]
	$1 = *($0)
	CALL $20(($17 + [64]), ($17 + [128]))
	$14 = *($17 + [64])
	CALL send_deferred(($17 + [192]), $1, $14, (*($17 + [68]) - $14), [0])
	$14 = *($17 + [64])
	if ( ($14 == 0) ){ goto $label$156 }
	*($17 + [68]) = $14
	CALL $76($14)
	
.LABEL $label$156
	CALL $21(($17 + [128]))
	$14 = *($17 + [272])
	if ( ($14 == 0) ){ goto $label$157 }
	*($17 + [276]) = $14
	CALL $76($14)
	
.LABEL $label$157
	$4 = *($17 + [344])
	if ( ($4 == 0) ){ goto $label$2 }
	$0 = ($17 + [348])
	$14 = *($0)
	if ( ((int_32)$14 == (int_32)$4) ){ goto $label$159 }
	
.LOOP $label$160:
	$14 = ($14 + [-24])
	$8 = *($14)
	*($14) = [0]
	if ( ($8 == 0) ){ goto $label$161 }
	CALL $76($8)
	
.LABEL $label$161
	if ( ((int_32)$4 != (int_32)$14) ){ goto $label$160 }
	$14 = *(($17 + [344]))
	goto $label$158 
	
.LABEL $label$159
	$14 = $4
	
.LABEL $label$158
	*($0) = $4
	CALL $76($14)
	
.LABEL $label$2
	*([0] + [4]) = ($17 + [384])
	return (unreachable)
	
.LABEL $label$1
	CALL $77(($17 + [48]))
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [336])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [400])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $48(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $49(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $76(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [176])
	*([0] + [4]) = $11
	CALL prints([16])
	CALL printn($0)
	CALL prints([64])
	CALL printn($1)
	CALL prints([64])
	CALL printn($2)
	CALL prints([80])
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [96]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [112]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [96]
	$9 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$19 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$14 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [128])
	
.LABEL $label$7
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [192]
	$9 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$25 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$3 = ($3 + [165])
	goto $label$23 
	
.LABEL $label$25
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$21
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$20 }
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$29 }
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [208]
	$9 = (int_64)0
	
.LOOP $label$30:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$31 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$31
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$30 }
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$29 }
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [224]
	$9 = (int_64)0
	
.LOOP $label$34:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$35 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$3 = ($3 + [165])
	goto $label$36 
	
.LABEL $label$37
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$35
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$34 }
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$29 }
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [240]
	$9 = (int_64)0
	
.LOOP $label$38:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$39 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$3 = ($3 + [165])
	goto $label$40 
	
.LABEL $label$41
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$39
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$38 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$28 }
	
.LABEL $label$29
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [256]
	$9 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$47 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$3 = ($3 + [165])
	goto $label$45 
	
.LABEL $label$47
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$43
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$42 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$27 }
	
.LABEL $label$28
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$26 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [272]
	$9 = (int_64)0
	
.LOOP $label$48:
	if ( ((uint_64)$8 > (uint_64)(int_64)8) ){ goto $label$53 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$3 = ($3 + [165])
	goto $label$51 
	
.LABEL $label$53
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$50
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$49
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$48 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$27 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [288]
	$9 = (int_64)0
	
.LOOP $label$54:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$59 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$3 = ($3 + [165])
	goto $label$57 
	
.LABEL $label$59
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$58
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$56
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$55
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$54 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$27 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [304]
	$9 = (int_64)0
	
.LOOP $label$60:
	if ( ((uint_64)$8 > (uint_64)(int_64)8) ){ goto $label$65 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$64 }
	$3 = ($3 + [165])
	goto $label$63 
	
.LABEL $label$65
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$64
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$63
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$62
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$61
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$60 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$27 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [320]
	$9 = (int_64)0
	
.LOOP $label$66:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$71 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$70 }
	$3 = ($3 + [165])
	goto $label$69 
	
.LABEL $label$71
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$70
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$69
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$68
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$67
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$66 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$26 }
	
.LABEL $label$27
	*(($11 + [104])) = $0
	*(($11 + [112])) = (int_64)-1
	*(($11 + [120])) = (int_64)0
	*(($11 + [128])) = [0]
	*($11 + [96]) = $0
	*($11 + [88]) = $0
	*(($11 + [132])) = [0]
	*($11 + [136]) = $0
	*(($11 + [144])) = $0
	*(($11 + [152])) = (int_64)-1
	*(($11 + [160])) = [0]
	*(($11 + [164])) = [0]
	*(($11 + [168])) = [0]
	*(($11 + [172])) = [0]
	if ( ((int_64)$2 <= (int_64)-4149690910734548993) ){ goto $label$76 }
	if ( ((int_64)$2 == (int_64)-4149690910734548992) ){ goto $label$75 }
	if ( ((int_64)$2 == (int_64)4923678490122780672) ){ goto $label$74 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$72 }
	*($11 + [84]) = [0]
	*($11 + [80]) = [1]
	*($11 + [8 align=4]) = *($11 + [80])
	CALL $7(($11 + [88]), ($11 + [8]))
	goto $label$72 
	
.LABEL $label$76
	if ( ((int_64)$2 == (int_64)-4417085854455431168) ){ goto $label$73 }
	if ( ((int_64)$2 != (int_64)-4157529782108553216) ){ goto $label$72 }
	*($11 + [76]) = [0]
	*($11 + [72]) = [2]
	*($11 + [16 align=4]) = *($11 + [72])
	CALL $9(($11 + [88]), ($11 + [16]))
	goto $label$72 
	
.LABEL $label$75
	*($11 + [68]) = [0]
	*($11 + [64]) = [3]
	*($11 + [24 align=4]) = *($11 + [64])
	CALL $9(($11 + [88]), ($11 + [24]))
	goto $label$72 
	
.LABEL $label$74
	*($11 + [60]) = [0]
	*($11 + [56]) = [4]
	*($11 + [32 align=4]) = *($11 + [56])
	CALL $9(($11 + [88]), ($11 + [32]))
	goto $label$72 
	
.LABEL $label$73
	*($11 + [52]) = [0]
	*($11 + [48]) = [5]
	*($11 + [40 align=4]) = *($11 + [48])
	CALL $13(($11 + [88]), ($11 + [40]))
	
.LABEL $label$72
	$4 = *(($11 + [160]))
	if ( ($4 == 0) ){ goto $label$77 }
	$5 = ($11 + [164])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$79 }
	
.LOOP $label$80:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$81 }
	CALL $76($3)
	
.LABEL $label$81
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$80 }
	$6 = *(($11 + [160]))
	goto $label$78 
	
.LABEL $label$79
	$6 = $4
	
.LABEL $label$78
	*($5) = $4
	CALL $76($6)
	
.LABEL $label$77
	$4 = *(($11 + [120]))
	if ( ($4 == 0) ){ goto $label$26 }
	$5 = ($11 + [124])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$83 }
	
.LOOP $label$84:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$85 }
	CALL $76($3)
	
.LABEL $label$85
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$84 }
	$6 = *(($11 + [120]))
	goto $label$82 
	
.LABEL $label$83
	$6 = $4
	
.LABEL $label$82
	*($5) = $4
	CALL $76($6)
	
.LABEL $label$26
	*([0] + [4]) = ($11 + [176])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($0 + [16])) = (int_64)1398362884
	CALL eosio_assert([1], [336])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [400])
	*(($0 + [32])) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [336])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [400])
	*(($0 + [48])) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [336])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [400])
	*(($0 + [64])) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [336])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$5 = [0]
	
.LABEL $label$16
	CALL eosio_assert($5, [400])
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $15(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [432])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [432])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($3 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [432])
	CALL memcpy(($3 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($3 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [432])
	CALL memcpy(($3 + [56]), *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [432])
	CALL memcpy(($3 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)7035932477462577152, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$4), [960])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $33($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)7035932477462577152, $5))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$4), [960])
	
.LABEL $label$4
	*(($2 + [40])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [928])
	$6 = *($0 + [4])
	$7 = *($6 + [40])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)7035932477462577152, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [40]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$2), [960])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $33($2, CALL $fimport$5(*($2), *($2 + [8]), (int_64)7035932477462577152, $3))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$2), [960])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [40])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC _ZN8baccarat8stopgameEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [144])
	*([0] + [4]) = $9
	CALL require_auth(*($0))
	*($9 + [8]) = ((int_32)CALL tapos_block_num() * (int_32)CALL $fimport$32())
	CALL sha256(($9 + [8]), [4], ($9 + [48]))
	$4 = *($9 + [64])
	$3 = *($9 + [56])
	$2 = *($9 + [48])
	*((($9 + [8]) + [32])) = [0]
	*($9 + [24]) = (int_64)-1
	$7 = *($0)
	*($9 + [8]) = $7
	*($9 + [16]) = $7
	*($9 + [32]) = (int_64)0
	$0 = CALL db_find_i64($7, $7, (int_64)4147959718683869184, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $36(($9 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [40]) == (int_32)($9 + [8])), [960])
	CALL eosio_assert([1], [1168])
	CALL eosio_assert(((int_32)*($0 + [40]) == (int_32)($9 + [8])), [1216])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)CALL $fimport$2()), [1264])
	*($0 + [32]) = (int_64)0
	*($0 + [8]) = $2
	*($0 + [16]) = $3
	*($0 + [24]) = $4
	$7 = *($0)
	CALL eosio_assert([1], [1328])
	*($9 + [104]) = (($9 + [48]) + [40])
	*($9 + [100]) = ($9 + [48])
	*($9 + [96]) = ($9 + [48])
	*($9 + [112]) = ($9 + [96])
	*($9 + [124]) = ($0 + [8])
	*($9 + [120]) = $0
	*($9 + [128]) = ($0 + [16])
	*($9 + [132]) = ($0 + [24])
	*($9 + [136]) = ($0 + [32])
	CALL $45(($9 + [120]), ($9 + [112]))
	CALL db_update_i64(*($0 + [44]), (int_64)0, ($9 + [48]), [40])
	$0 = (($9 + [8]) + [16])
	if ( (uint_64)($7 <= *($0)) ){ goto $label$3 }
	*($0) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$5 = *($9 + [32])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [1392])
	
.LABEL $label$3
	$5 = *($9 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($9 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$8 }
	CALL $76($6)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($9 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $5
	
.LABEL $label$5
	*($8) = $5
	CALL $76($0)
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [144])
}

void .FUNC _ZN8baccarat5clearEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	if ( ((int_64)$1 == (int_64)2) ){ goto $label$4 }
	if ( ((int_64)$1 != (int_64)1) ){ goto $label$1 }
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	$1 = *($0)
	*($6) = $1
	*($6 + [8]) = $1
	*($6 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($1, $1, (int_64)4147959718683869184, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $36($6, $0)
	
.LOOP $label$6:
	CALL eosio_assert([1], [560])
	CALL eosio_assert([1], [928])
	$0 = [0]
	$2 = CALL db_next_i64(*($5 + [44]), ($6 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$0 = CALL $36($6, $2)
	
.LABEL $label$7
	CALL $37($6, $5)
	$5 = $0
	if ( $0 ){ goto $label$6 }
	
.LABEL $label$5
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ($6 + [28])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL $76($5)
	
.LABEL $label$9
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($6 + [24]))
	goto $label$2 
	
.LABEL $label$4
	$5 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)4147959502518353920, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [8])
	$0 = CALL $38($3, $5)
	$1 = *($0)
	$4 = (CASTING uint_64)(uint_32 $3)
	*($6) = $4
	if ( ((int_64)$1 == (int_64)*(*(CALL $39($6) + [4]))) ){ goto $label$1 }
	
.LOOP $label$10:
	$5 = [0]
	$2 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($2, [560])
	CALL eosio_assert($2, [928])
	$2 = CALL db_next_i64(*($0 + [76]), $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$11 }
	$5 = CALL $38($3, $2)
	
.LABEL $label$11
	CALL $40($3, $0)
	$1 = *($5)
	*($6) = $4
	$0 = $5
	if ( ((int_64)$1 != (int_64)*(*(CALL $39($6) + [4]))) ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$3
	$0 = $2
	
.LABEL $label$2
	*($3) = $2
	CALL $76($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [48])
}

void .FUNC _ZN8baccarat9setprofitEyN5eosio5assetES1_S1_S1_ (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$20 = (*([0] + [4]) - [304])
	*([0] + [4]) = $20
	*($20 + [296]) = $1
	CALL require_auth(*($0))
	CALL eosio_assert([1], [336])
	$12 = [0]
	$1 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [400])
	$11 = *($2 + [8])
	$19 = *($2)
	CALL eosio_assert([1], [336])
	$1 = (int_64)5462355
	$12 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$8 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [400])
	$10 = *($3 + [8])
	$15 = *($3)
	CALL eosio_assert([1], [336])
	$1 = (int_64)5462355
	$12 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$8 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$8 = [0]
	
.LABEL $label$11
	CALL eosio_assert($8, [400])
	$9 = *($4 + [8])
	$14 = *($4)
	CALL eosio_assert([1], [336])
	$1 = (int_64)5462355
	$12 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$8 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$8 = [0]
	
.LABEL $label$16
	CALL eosio_assert($8, [400])
	$6 = *($5 + [8])
	$13 = *($5)
	*($20 + [288]) = ($0 + [48])
	CALL $16(($20 + [192]), ($20 + [288]), ($20 + [296]))
	$12 = *($20 + [196])
	if ( ($12 == 0) ){ goto $label$22 }
	if ( ((int_64)*($20 + [296]) != (int_64)*($12 + [8])) ){ goto $label$22 }
	$1 = *($20 + [192])
	*($20 + [280]) = $1
	$12 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($12) == 0) ){ goto $label$21 }
	
.LOOP $label$23:
	if ( ((int_64)*($12 + [8]) != (int_64)*($20 + [296])) ){ goto $label$21 }
	$1 = *($12 + [16])
	$18 = *(($12 + [24]))
	if ( ((int_64)$18 != (int_64)$11) ){ goto $label$25 }
	CALL eosio_assert([1], [448])
	$19 = (int_64)
	CALL eosio_assert(((int_64)$19($19 - $1)) > (int_64)-4611686018427387904), [496])
	CALL eosio_assert(((int_64)$19 < (int_64)4611686018427387904), [528])
	goto $label$24 
	
.LABEL $label$25
	if ( ((int_64)$18 != (int_64)$10) ){ goto $label$26 }
	CALL eosio_assert([1], [448])
	$15 = (int_64)
	CALL eosio_assert(((int_64)$15($15 - $1)) > (int_64)-4611686018427387904), [496])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [528])
	goto $label$24 
	
.LABEL $label$26
	if ( ((int_64)$18 != (int_64)$9) ){ goto $label$27 }
	CALL eosio_assert([1], [448])
	$14 = (int_64)
	CALL eosio_assert(((int_64)$14($14 - $1)) > (int_64)-4611686018427387904), [496])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [528])
	goto $label$24 
	
.LABEL $label$27
	if ( ((int_64)$18 != (int_64)$6) ){ goto $label$24 }
	CALL eosio_assert([1], [448])
	$13 = (int_64)
	CALL eosio_assert(((int_64)$13($13 - $1)) > (int_64)-4611686018427387904), [496])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [528])
	
.LABEL $label$24
	CALL $17(($20 + [280]))
	$12 = *($20 + [284])
	if ( $12 ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	*($20 + [284]) = [0]
	*($20 + [280]) = ($20 + [288])
	
.LABEL $label$21
	*($20 + [192]) = (int_64)0
	CALL $16(($20 + [272]), ($20 + [288]), ($20 + [192]))
	if ( (*($20 + [276]) == 0) ){ goto $label$28 }
	$1 = *($20 + [272])
	
.LOOP $label$29:
	*($20 + [192]) = $1
	$12 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$12) != (int_32)[0]), [560])
	CALL $17(($20 + [192]))
	CALL $18(*($20 + [288]), $12)
	$1 = *($20 + [192])
	*($20 + [272]) = $1
	if ( ((uint_64)$1 > (uint_64)(int_64)4294967295) ){ goto $label$29 }
	
.LABEL $label$28
	if ( (int_64)($19 == 0) ){ goto $label$30 }
	$7 = *($0)
	$1 = (int_64)0
	$16 = (int_64)59
	$12 = [304]
	$17 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$1 > (uint_64)(int_64)8) ){ goto $label$36 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$8 = ($8 + [165])
	goto $label$34 
	
.LABEL $label$36
	$18 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$32
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$31 }
	$18 = CALL current_time()
	$1 = (int_64)0
	*($20 + [264]) = (int_64)0
	*($20 + [256]) = ((int_64)((int_64)((int_64)$7 + (int_64)$17) + (int_64)((int_64)((uint_64)$18 / (uint_64)(int_64)1000000) & (int_64)4294967295)) + (int_64)10)
	$18 = CALL current_time()
	*(($20 + [220])) = [0]
	*(($20 + [224])) = [0]
	*($20 + [204]) = [0]
	*($20 + [208]) = [0]
	*($20 + [212]) = [0]
	*($20 + [216]) = [0]
	*($20 + [192]) = ((CASTING uint_32)(uint_64 ((uint_64)$18 / (uint_64)(int_64)1000000)) + [60])
	*($20 + [228]) = [0]
	*(($20 + [232])) = [0]
	*(($20 + [236])) = [0]
	*($20 + [240]) = [0]
	*(($20 + [244])) = [0]
	*(($20 + [248])) = [0]
	$2 = ($20 + [228])
	$7 = *($0)
	$16 = (int_64)59
	$12 = [608]
	$17 = (int_64)0
	
.LOOP $label$37:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$42 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$8 = ($8 + [165])
	goto $label$40 
	
.LABEL $label$42
	$18 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$38
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$37 }
	*($20 + [184]) = $17
	*($20 + [176]) = $7
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [624]
	$17 = (int_64)0
	
.LOOP $label$43:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$44 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$8 = ($8 + [165])
	goto $label$45 
	
.LABEL $label$46
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$44
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$43 }
	*($20 + [168]) = $17
	$1 = (int_64)0
	$16 = (int_64)59
	$12 = [640]
	$17 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$52 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$8 = ($8 + [165])
	goto $label$50 
	
.LABEL $label$52
	$18 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$48
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$47 }
	*($20 + [160]) = $17
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [656]
	$17 = (int_64)0
	
.LOOP $label$53:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$54 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$8 = ($8 + [165])
	goto $label$55 
	
.LABEL $label$56
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$54
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$53 }
	*(($20 + [152])) = $11
	*($20 + [144]) = $19
	*($20 + [136]) = $17
	CALL $19($2, ($20 + [176]), ($20 + [168]), ($20 + [160]), ($20 + [136]))
	$1 = *($0)
	*(($20 + [212])) = [0]
	CALL $20(($20 + [136]), ($20 + [192]))
	$12 = *($20 + [136])
	CALL send_deferred(($20 + [256]), $1, $12, (*($20 + [140]) - $12), [0])
	$12 = *($20 + [136])
	if ( ($12 == 0) ){ goto $label$57 }
	*($20 + [140]) = $12
	CALL $76($12)
	
.LABEL $label$57
	CALL $21(($20 + [192]))
	
.LABEL $label$30
	if ( (int_64)($15 == 0) ){ goto $label$58 }
	$7 = *($0)
	$1 = (int_64)0
	$16 = (int_64)59
	$12 = [304]
	$17 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$1 > (uint_64)(int_64)8) ){ goto $label$64 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$8 = ($8 + [165])
	goto $label$62 
	
.LABEL $label$64
	$18 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$60
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$59 }
	$18 = CALL current_time()
	$1 = (int_64)0
	*($20 + [264]) = (int_64)0
	*($20 + [256]) = ((int_64)((int_64)((int_64)$7 + (int_64)$17) + (int_64)((int_64)((uint_64)$18 / (uint_64)(int_64)1000000) & (int_64)4294967295)) + (int_64)20)
	$18 = CALL current_time()
	*(($20 + [220])) = [0]
	*(($20 + [224])) = [0]
	*($20 + [204]) = [0]
	*($20 + [208]) = [0]
	*($20 + [212]) = [0]
	*($20 + [216]) = [0]
	*($20 + [192]) = ((CASTING uint_32)(uint_64 ((uint_64)$18 / (uint_64)(int_64)1000000)) + [60])
	*($20 + [228]) = [0]
	*(($20 + [232])) = [0]
	*(($20 + [236])) = [0]
	*($20 + [240]) = [0]
	*(($20 + [244])) = [0]
	*(($20 + [248])) = [0]
	$2 = ($20 + [228])
	$7 = *($0)
	$16 = (int_64)59
	$12 = [608]
	$17 = (int_64)0
	
.LOOP $label$65:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$70 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$8 = ($8 + [165])
	goto $label$68 
	
.LABEL $label$70
	$18 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$69
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$67
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$66
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$65 }
	*($20 + [184]) = $17
	*($20 + [176]) = $7
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [624]
	$17 = (int_64)0
	
.LOOP $label$71:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$72 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$74 }
	$8 = ($8 + [165])
	goto $label$73 
	
.LABEL $label$74
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$73
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$72
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$71 }
	*($20 + [168]) = $17
	$1 = (int_64)0
	$16 = (int_64)59
	$12 = [640]
	$17 = (int_64)0
	
.LOOP $label$75:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$80 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$79 }
	$8 = ($8 + [165])
	goto $label$78 
	
.LABEL $label$80
	$18 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$79
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$78
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$77
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$76
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$75 }
	*($20 + [160]) = $17
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [656]
	$17 = (int_64)0
	
.LOOP $label$81:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$82 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$84 }
	$8 = ($8 + [165])
	goto $label$83 
	
.LABEL $label$84
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$83
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$82
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$81 }
	*(($20 + [152])) = $10
	*($20 + [144]) = $15
	*($20 + [136]) = $17
	CALL $19($2, ($20 + [176]), ($20 + [168]), ($20 + [160]), ($20 + [136]))
	$1 = *($0)
	*(($20 + [212])) = [0]
	CALL $20(($20 + [136]), ($20 + [192]))
	$12 = *($20 + [136])
	CALL send_deferred(($20 + [256]), $1, $12, (*($20 + [140]) - $12), [0])
	$12 = *($20 + [136])
	if ( ($12 == 0) ){ goto $label$85 }
	*($20 + [140]) = $12
	CALL $76($12)
	
.LABEL $label$85
	CALL $21(($20 + [192]))
	
.LABEL $label$58
	if ( (int_64)($14 == 0) ){ goto $label$86 }
	$7 = *($0)
	$1 = (int_64)0
	$16 = (int_64)59
	$12 = [304]
	$17 = (int_64)0
	
.LOOP $label$87:
	if ( ((uint_64)$1 > (uint_64)(int_64)8) ){ goto $label$92 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$91 }
	$8 = ($8 + [165])
	goto $label$90 
	
.LABEL $label$92
	$18 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$91
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$90
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$89
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$88
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$87 }
	$18 = CALL current_time()
	$1 = (int_64)0
	*($20 + [264]) = (int_64)0
	*($20 + [256]) = ((int_64)((int_64)((int_64)$7 + (int_64)$17) + (int_64)((int_64)((uint_64)$18 / (uint_64)(int_64)1000000) & (int_64)4294967295)) + (int_64)30)
	$18 = CALL current_time()
	*(($20 + [220])) = [0]
	*(($20 + [224])) = [0]
	*($20 + [204]) = [0]
	*($20 + [208]) = [0]
	*($20 + [212]) = [0]
	*($20 + [216]) = [0]
	*($20 + [192]) = ((CASTING uint_32)(uint_64 ((uint_64)$18 / (uint_64)(int_64)1000000)) + [60])
	*($20 + [228]) = [0]
	*(($20 + [232])) = [0]
	*(($20 + [236])) = [0]
	*($20 + [240]) = [0]
	*(($20 + [244])) = [0]
	*(($20 + [248])) = [0]
	$2 = ($20 + [228])
	$7 = *($0)
	$16 = (int_64)59
	$12 = [608]
	$17 = (int_64)0
	
.LOOP $label$93:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$98 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$97 }
	$8 = ($8 + [165])
	goto $label$96 
	
.LABEL $label$98
	$18 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$97
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$96
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$95
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$94
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$93 }
	*($20 + [184]) = $17
	*($20 + [176]) = $7
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [624]
	$17 = (int_64)0
	
.LOOP $label$99:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$100 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$102 }
	$8 = ($8 + [165])
	goto $label$101 
	
.LABEL $label$102
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$101
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$100
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$99 }
	*($20 + [168]) = $17
	$1 = (int_64)0
	$16 = (int_64)59
	$12 = [640]
	$17 = (int_64)0
	
.LOOP $label$103:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$108 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$107 }
	$8 = ($8 + [165])
	goto $label$106 
	
.LABEL $label$108
	$18 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$107
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$106
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$105
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$104
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$103 }
	*($20 + [160]) = $17
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [656]
	$17 = (int_64)0
	
.LOOP $label$109:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$110 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$112 }
	$8 = ($8 + [165])
	goto $label$111 
	
.LABEL $label$112
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$111
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$110
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$109 }
	*(($20 + [152])) = $9
	*($20 + [144]) = $14
	*($20 + [136]) = $17
	CALL $19($2, ($20 + [176]), ($20 + [168]), ($20 + [160]), ($20 + [136]))
	$1 = *($0)
	*(($20 + [212])) = [0]
	CALL $20(($20 + [136]), ($20 + [192]))
	$12 = *($20 + [136])
	CALL send_deferred(($20 + [256]), $1, $12, (*($20 + [140]) - $12), [0])
	$12 = *($20 + [136])
	if ( ($12 == 0) ){ goto $label$113 }
	*($20 + [140]) = $12
	CALL $76($12)
	
.LABEL $label$113
	CALL $21(($20 + [192]))
	
.LABEL $label$86
	if ( (int_64)($13 == 0) ){ goto $label$114 }
	$7 = *($0)
	$1 = (int_64)0
	$16 = (int_64)59
	$12 = [304]
	$17 = (int_64)0
	
.LOOP $label$115:
	if ( ((uint_64)$1 > (uint_64)(int_64)8) ){ goto $label$120 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$119 }
	$8 = ($8 + [165])
	goto $label$118 
	
.LABEL $label$120
	$18 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$119
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$118
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$117
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$116
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$115 }
	$18 = CALL current_time()
	$1 = (int_64)0
	*($20 + [264]) = (int_64)0
	*($20 + [256]) = ((int_64)((int_64)((int_64)$7 + (int_64)$17) + (int_64)((int_64)((uint_64)$18 / (uint_64)(int_64)1000000) & (int_64)4294967295)) + (int_64)38)
	$18 = CALL current_time()
	*(($20 + [220])) = [0]
	*(($20 + [224])) = [0]
	*($20 + [204]) = [0]
	*($20 + [208]) = [0]
	*($20 + [212]) = [0]
	*($20 + [216]) = [0]
	*($20 + [192]) = ((CASTING uint_32)(uint_64 ((uint_64)$18 / (uint_64)(int_64)1000000)) + [60])
	*($20 + [228]) = [0]
	*(($20 + [232])) = [0]
	*(($20 + [236])) = [0]
	*($20 + [240]) = [0]
	*(($20 + [244])) = [0]
	*(($20 + [248])) = [0]
	$2 = ($20 + [228])
	$7 = *($0)
	$16 = (int_64)59
	$12 = [608]
	$17 = (int_64)0
	
.LOOP $label$121:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$126 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$125 }
	$8 = ($8 + [165])
	goto $label$124 
	
.LABEL $label$126
	$18 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$123 }
	goto $label$122 
	
.LABEL $label$125
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$124
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$123
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$122
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$121 }
	*($20 + [184]) = $17
	*($20 + [176]) = $7
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [624]
	$17 = (int_64)0
	
.LOOP $label$127:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$128 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$130 }
	$8 = ($8 + [165])
	goto $label$129 
	
.LABEL $label$130
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$129
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$128
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$127 }
	*($20 + [168]) = $17
	$1 = (int_64)0
	$16 = (int_64)59
	$12 = [640]
	$17 = (int_64)0
	
.LOOP $label$131:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$136 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$135 }
	$8 = ($8 + [165])
	goto $label$134 
	
.LABEL $label$136
	$18 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$133 }
	goto $label$132 
	
.LABEL $label$135
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$134
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$133
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$132
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$131 }
	*($20 + [160]) = $17
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [656]
	$17 = (int_64)0
	
.LOOP $label$137:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$138 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$140 }
	$8 = ($8 + [165])
	goto $label$139 
	
.LABEL $label$140
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$139
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$138
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$137 }
	*(($20 + [152])) = $6
	*($20 + [144]) = $13
	*($20 + [136]) = $17
	CALL $19($2, ($20 + [176]), ($20 + [168]), ($20 + [160]), ($20 + [136]))
	$1 = *($0)
	*(($20 + [212])) = [0]
	CALL $20(($20 + [136]), ($20 + [192]))
	$12 = *($20 + [136])
	CALL send_deferred(($20 + [256]), $1, $12, (*($20 + [140]) - $12), [0])
	$12 = *($20 + [136])
	if ( ($12 == 0) ){ goto $label$141 }
	*($20 + [140]) = $12
	CALL $76($12)
	
.LABEL $label$141
	CALL $21(($20 + [192]))
	
.LABEL $label$114
	if ( ((int_64)$19 < (int_64)1) ){ goto $label$146 }
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [624]
	$17 = (int_64)0
	
.LOOP $label$147:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$148 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$150 }
	$8 = ($8 + [165])
	goto $label$149 
	
.LABEL $label$150
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$149
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$148
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$147 }
	*($20 + [128]) = $11
	*($20 + [120]) = $19
	*(($20 + [200])) = [0]
	*($20 + [192]) = (int_64)0
	$12 = CALL strlen([672])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$145 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$153 }
	*($20 + [192]) = ($12 << [1])
	$8 = (($20 + [192]) | [1])
	if ( $12 ){ goto $label$152 }
	goto $label$151 
	
.LABEL $label$153
	$2 = (($12 + [16]) & [-16])
	$8 = CALL $75($2)
	*($20 + [192]) = ($2 | [1])
	*($20 + [200]) = $8
	*($20 + [196]) = $12
	
.LABEL $label$152
	CALL memcpy($8, [672], $12)
	
.LABEL $label$151
	*(($8 + $12)) = [0]
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [624]
	$19 = (int_64)0
	
.LOOP $label$154:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$155 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$157 }
	$8 = ($8 + [165])
	goto $label$156 
	
.LABEL $label$157
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$156
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$155
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$19 = ((int_64)$16 | (int_64)$19)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$154 }
	$1 = CALL current_time()
	*((($20 + [56]) + [8])) = *((($20 + [120]) + [8]))
	*($20 + [56]) = *($20 + [120])
	CALL _ZN8baccarat12_transfer_toEyN5eosio5assetERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEo($0, $17, ($20 + [56]), ($20 + [192]), ((int_64)((int_64)$19 + (int_64)((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)) + (int_64)1397703945), (int_64)0)
	if ( ((*($20 + [192]) & [1]) == 0) ){ goto $label$146 }
	CALL $76(*($20 + [200]))
	
.LABEL $label$146
	if ( ((int_64)$15 < (int_64)1) ){ goto $label$158 }
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [624]
	$17 = (int_64)0
	
.LOOP $label$159:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$160 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$162 }
	$8 = ($8 + [165])
	goto $label$161 
	
.LABEL $label$162
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$161
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$160
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$159 }
	*($20 + [112]) = $10
	*($20 + [104]) = $15
	*(($20 + [200])) = [0]
	*($20 + [192]) = (int_64)0
	$12 = CALL strlen([672])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$144 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$165 }
	*($20 + [192]) = ($12 << [1])
	$8 = (($20 + [192]) | [1])
	if ( $12 ){ goto $label$164 }
	goto $label$163 
	
.LABEL $label$165
	$2 = (($12 + [16]) & [-16])
	$8 = CALL $75($2)
	*($20 + [192]) = ($2 | [1])
	*($20 + [200]) = $8
	*($20 + [196]) = $12
	
.LABEL $label$164
	CALL memcpy($8, [672], $12)
	
.LABEL $label$163
	*(($8 + $12)) = [0]
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [624]
	$19 = (int_64)0
	
.LOOP $label$166:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$167 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$169 }
	$8 = ($8 + [165])
	goto $label$168 
	
.LABEL $label$169
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$168
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$167
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$19 = ((int_64)$16 | (int_64)$19)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$166 }
	$1 = CALL current_time()
	*((($20 + [40]) + [8])) = *((($20 + [104]) + [8]))
	*($20 + [40]) = *($20 + [104])
	CALL _ZN8baccarat12_transfer_toEyN5eosio5assetERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEo($0, $17, ($20 + [40]), ($20 + [192]), ((int_64)((int_64)$19 + (int_64)((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)) + (int_64)361939223571), (int_64)0)
	if ( ((*($20 + [192]) & [1]) == 0) ){ goto $label$158 }
	CALL $76(*($20 + [200]))
	
.LABEL $label$158
	if ( ((int_64)$14 < (int_64)1) ){ goto $label$170 }
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [624]
	$17 = (int_64)0
	
.LOOP $label$171:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$172 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$174 }
	$8 = ($8 + [165])
	goto $label$173 
	
.LABEL $label$174
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$173
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$172
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$171 }
	*($20 + [96]) = $9
	*($20 + [88]) = $14
	*(($20 + [200])) = [0]
	*($20 + [192]) = (int_64)0
	$12 = CALL strlen([672])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$143 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$177 }
	*($20 + [192]) = ($12 << [1])
	$8 = (($20 + [192]) | [1])
	if ( $12 ){ goto $label$176 }
	goto $label$175 
	
.LABEL $label$177
	$2 = (($12 + [16]) & [-16])
	$8 = CALL $75($2)
	*($20 + [192]) = ($2 | [1])
	*($20 + [200]) = $8
	*($20 + [196]) = $12
	
.LABEL $label$176
	CALL memcpy($8, [672], $12)
	
.LABEL $label$175
	*(($8 + $12)) = [0]
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [624]
	$19 = (int_64)0
	
.LOOP $label$178:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$179 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$181 }
	$8 = ($8 + [165])
	goto $label$180 
	
.LABEL $label$181
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$180
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$179
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$19 = ((int_64)$16 | (int_64)$19)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$178 }
	$1 = CALL current_time()
	*((($20 + [24]) + [8])) = *((($20 + [88]) + [8]))
	*($20 + [24]) = *($20 + [88])
	CALL _ZN8baccarat12_transfer_toEyN5eosio5assetERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEo($0, $17, ($20 + [24]), ($20 + [192]), ((int_64)((int_64)$19 + (int_64)((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)) + (int_64)297481618461), (int_64)0)
	if ( ((*($20 + [192]) & [1]) == 0) ){ goto $label$170 }
	CALL $76(*($20 + [200]))
	
.LABEL $label$170
	if ( ((int_64)$13 < (int_64)1) ){ goto $label$182 }
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [624]
	$17 = (int_64)0
	
.LOOP $label$183:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$184 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$186 }
	$8 = ($8 + [165])
	goto $label$185 
	
.LABEL $label$186
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$185
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$184
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$183 }
	*($20 + [80]) = $6
	*($20 + [72]) = $13
	*(($20 + [200])) = [0]
	*($20 + [192]) = (int_64)0
	$12 = CALL strlen([672])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$142 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$189 }
	*($20 + [192]) = ($12 << [1])
	$8 = (($20 + [192]) | [1])
	if ( $12 ){ goto $label$188 }
	goto $label$187 
	
.LABEL $label$189
	$2 = (($12 + [16]) & [-16])
	$8 = CALL $75($2)
	*($20 + [192]) = ($2 | [1])
	*($20 + [200]) = $8
	*($20 + [196]) = $12
	
.LABEL $label$188
	CALL memcpy($8, [672], $12)
	
.LABEL $label$187
	*(($8 + $12)) = [0]
	$1 = (int_64)0
	$18 = (int_64)59
	$12 = [624]
	$19 = (int_64)0
	
.LOOP $label$190:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$191 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$193 }
	$8 = ($8 + [165])
	goto $label$192 
	
.LABEL $label$193
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$192
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$191
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$19 = ((int_64)$16 | (int_64)$19)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$190 }
	$1 = CALL current_time()
	*((($20 + [8]) + [8])) = *((($20 + [72]) + [8]))
	*($20 + [8]) = *($20 + [72])
	CALL _ZN8baccarat12_transfer_toEyN5eosio5assetERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEo($0, $17, ($20 + [8]), ($20 + [192]), ((int_64)((int_64)$19 + (int_64)((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)) + (int_64)293455873318), (int_64)0)
	if ( ((*($20 + [192]) & [1]) == 0) ){ goto $label$182 }
	CALL $76(*($20 + [200]))
	
.LABEL $label$182
	*([0] + [4]) = ($20 + [304])
	return (unreachable)
	
.LABEL $label$145
	CALL $77(($20 + [192]))
	
.LABEL $label$144
	CALL $77(($20 + [192]))
	
.LABEL $label$143
	CALL $77(($20 + [192]))
	
.LABEL $label$142
	CALL $77(($20 + [192]))
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [336])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	$7 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $1)
	
.LABEL $label$1
	CALL $14(($9 + [72]), $7, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	*(($1 = (($9 + [192]) + [8]))) = *(($9 + [88]))
	$4 = *($9 + [80])
	*(($7 = (($9 + [176]) + [8]))) = *(($9 + [104]))
	$3 = *($9 + [72])
	*($9 + [192]) = $4
	*($9 + [176]) = *($9 + [96])
	*(($5 = (($9 + [160]) + [8]))) = *(($9 + [120]))
	*($9 + [160]) = *($9 + [112])
	*(($6 = (($9 + [144]) + [8]))) = *(($9 + [136]))
	*($9 + [144]) = *($9 + [128])
	*((($9 + [256]) + [8])) = *($6)
	*((($9 + [240]) + [8])) = *($5)
	*($9 + [256]) = *($9 + [144])
	*($9 + [240]) = *($9 + [160])
	*((($9 + [224]) + [8])) = *($7)
	*($9 + [224]) = *($9 + [176])
	*((($9 + [208]) + [8])) = *($1)
	*($9 + [208]) = *($9 + [192])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$8 = *((*($1) + $8))
	
.LABEL $label$6
	*(($7 = (($9 + [320]) + [8]))) = *((($9 + [208]) + [8]))
	*(($2 = (($9 + [304]) + [8]))) = *((($9 + [224]) + [8]))
	*($9 + [320]) = *($9 + [208])
	*($9 + [304]) = *($9 + [224])
	*(($0 = (($9 + [288]) + [8]))) = *((($9 + [240]) + [8]))
	*($9 + [288]) = *($9 + [240])
	*(($5 = (($9 + [272]) + [8]))) = *((($9 + [256]) + [8]))
	*($9 + [272]) = *($9 + [256])
	*((($9 + [56]) + [8])) = *($7)
	*($9 + [56]) = *($9 + [320])
	*((($9 + [40]) + [8])) = *($2)
	*($9 + [40]) = *($9 + [304])
	*((($9 + [24]) + [8])) = *($0)
	*($9 + [24]) = *($9 + [288])
	*((($9 + [8]) + [8])) = *($5)
	*($9 + [8]) = *($9 + [272])
	CALL void $1((int_32 $3), (int_64 ($9 + [56])), (int_32 ($9 + [40])), (int_32 ($9 + [24])), (int_32 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [336])
	return [1]
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11212])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [752])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [800])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [864])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $76($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $76($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
	$7 = *(($1 + [40]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035932477462577152, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $87($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $75([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $24(($8 + [28]), [24])
	$2 = *($8 + [28])
	$1 = (*($2) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [736])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [736])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [736])
	CALL memcpy(($2 + [16]), ($4 + [16]), [8])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($4 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$1 = ([0] - $4)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $76($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $76($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $76($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC _ZN8baccarat10_addinviteEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	*($7 + [24]) = $1
	$3 = ($0 + [48])
	*($7 + [16]) = $3
	CALL $16(($7 + [32]), ($7 + [16]), ($7 + [24]))
	$5 = *($7 + [36])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((int_64)*($7 + [24]) != (int_64)*($5 + [8])) ){ goto $label$2 }
	CALL eosio_assert([1], [1168])
	$0 = *($7 + [16])
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$0), [1216])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1264])
	$6 = ($5 + [8])
	*($7 + [72]) = *($6)
	$1 = *($5)
	$3 = ($5 + [24])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($3)), [1968])
	$4 = ((int_64)*($5 + [16]) + (int_64)*($2))
	*($5 + [16]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [2016])
	CALL eosio_assert(((int_64)*($5 + [16]) < (int_64)4611686018427387904), [2048])
	CALL eosio_assert(((int_64)$1 == (int_64)*($5)), [1328])
	CALL eosio_assert([1], [736])
	CALL memcpy(($7 + [32]), $5, [8])
	CALL eosio_assert([1], [736])
	CALL memcpy((($7 + [32]) | [8]), $6, [8])
	CALL eosio_assert([1], [736])
	CALL memcpy((($7 + [32]) + [16]), ($5 + [16]), [8])
	CALL eosio_assert([1], [736])
	CALL memcpy((($7 + [32]) + [24]), $3, [8])
	CALL db_update_i64(*($5 + [36]), (int_64)0, ($7 + [32]), [32])
	if ( (uint_64)($1 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($7) = *($6)
	if ( (CALL memcmp(($7 + [72]), $7, [8]) == 0) ){ goto $label$1 }
	$2 = ($5 + [40])
	$5 = *($2)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035932477462577152, ($7 + [88]), $1)
	*($2) = $5
	
.LABEL $label$4
	CALL db_idx64_update($5, (int_64)0, $7)
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	*($7) = $0
	*($7 + [8]) = $2
	*($7 + [4]) = ($7 + [24])
	*($7 + [88]) = $1
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$2()), [1424])
	*($7 + [32]) = $3
	*($7 + [36]) = $7
	*($7 + [40]) = ($7 + [88])
	*(($2 = CALL $75([48])) + [24]) = (int_64)1398362884
	*($2 + [16]) = (int_64)0
	CALL eosio_assert([1], [336])
	$1 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	
.LABEL $label$5
	CALL eosio_assert($6, [400])
	*($2 + [32]) = $3
	CALL $62(($7 + [32]), $2)
	*($7 + [72]) = $2
	$1 = *($2)
	*($7 + [32]) = $1
	$6 = *($2 + [36])
	*($7 + [84]) = $6
	$3 = ($0 + [76])
	$5 = *($3)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [80]))) ){ goto $label$11 }
	*($5 + [8]) = $1
	*($5 + [16]) = $6
	*($7 + [72]) = [0]
	*($5) = $2
	*($3) = ($5 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $35(($0 + [72]), ($7 + [72]), ($7 + [32]), ($7 + [84]))
	
.LABEL $label$10
	$5 = *($7 + [72])
	*($7 + [72]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $76($5)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [96])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $87($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $75([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $24(($8 + [28]), [20])
	$2 = *($8 + [28])
	$1 = (*($2) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [736])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [736])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[3]), [736])
	CALL memcpy(($2 + [16]), ($4 + [16]), [4])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($4 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$1 = ([0] - $4)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $76($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $76($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $76($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $51($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $80($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $75($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $80($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $76($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $77($7)
	return (unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1552])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $24($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [432])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC _ZN8baccarat18_require_bet_quantEN5eosio5assetE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	$2 = *($1)
	$3 = *($1 + [8])
	if ( ((int_64)$3 != (int_64)1397703940) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$2 > (int_64)999), [2336])
	CALL eosio_assert(((int_64)$2 < (int_64)1000001), [2384])
	return 
	
.LABEL $label$1
	if ( ((int_64)$3 != (int_64)361939223556) ){ goto $label$2 }
	CALL eosio_assert(((int_64)$2 > (int_64)999999), [2432])
	CALL eosio_assert(((int_64)$2 < (int_64)1000000001), [2480])
	return 
	
.LABEL $label$2
	if ( ((int_64)$3 != (int_64)297481618436) ){ goto $label$3 }
	CALL eosio_assert(((int_64)$2 > (int_64)99999), [2528])
	CALL eosio_assert(((int_64)$2 < (int_64)100000001), [2576])
	return 
	
.LABEL $label$3
	if ( ((int_64)$3 != (int_64)293455873288) ){ goto $label$4 }
	CALL eosio_assert(((int_64)$2 > (int_64)9999999), [2624])
	CALL eosio_assert(((int_64)$2 < (int_64)10000000001), [2672])
	return 
	
.LABEL $label$4
	CALL eosio_assert([0], [688])
}

void .FUNC _ZN8baccarat12_split_extraENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPN5eosio5assetEPySA_PNS0_6vectorI6OnebetNS4_ISC_EEEE (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_64 $23
	int_32 $24
	$24 = (*([0] + [4]) - [176])
	*([0] + [4]) = $24
	CALL $88(($24 + [160]), $1)
	$22 = *($24 + [160])
	$6 = (($24 + [160]) | [1])
	$10 = *($24 + [168])
	$14 = *($24 + [164])
	$8 = [0]
	$1 = [0]
	$15 = CALL strlen([1568])
	if ( ($15 == 0) ){ goto $label$1 }
	$22 = ( $14 ? uint_32($22 >> [1]) : $1 )
	$1 = ($22 & [1])
	$18 = ( $10 ? $6 : $1 )
	$10 = ($18 + $22)
	$1 = $10
	if ( ((int_32)$22 < (int_32)$15) ){ goto $label$2 }
	$1 = $18
	
.LOOP $label$4:
	$22 = (($22 - $15) + [1])
	if ( ($22 == 0) ){ goto $label$3 }
	$1 = CALL memchr($1, [45], $22)
	if ( ($1 == 0) ){ goto $label$3 }
	if ( (CALL memcmp($1, [1568], $15) == 0) ){ goto $label$2 }
	$1 = ($1 + [1])
	$22 = ($10 - $1)
	if ( ((int_32)$22 >= (int_32)$15) ){ goto $label$4 }
	
.LABEL $label$3
	$1 = $10
	
.LABEL $label$2
	$1 = ( [-1] ? ($1 - $18) : ((int_32)$1 == (int_32)$10) )
	
.LABEL $label$1
	CALL $89(($24 + [144]), ($24 + [160]), [0], $1, ($24 + [160]))
	$1 = *($24 + [160])
	$22 = *(($24 + [168]))
	$10 = *($24 + [164])
	$15 = CALL strlen([1568])
	if ( ($15 == 0) ){ goto $label$5 }
	$22 = ( $10 ? uint_32($1 >> [1]) : $14 )
	$14 = ($1 & [1])
	$8 = ( $22 ? $6 : $14 )
	$10 = ($8 + $22)
	$1 = $10
	if ( ((int_32)$22 < (int_32)$15) ){ goto $label$6 }
	$1 = $8
	
.LOOP $label$8:
	$22 = (($22 - $15) + [1])
	if ( ($22 == 0) ){ goto $label$7 }
	$1 = CALL memchr($1, [45], $22)
	if ( ($1 == 0) ){ goto $label$7 }
	if ( (CALL memcmp($1, [1568], $15) == 0) ){ goto $label$6 }
	$1 = ($1 + [1])
	$22 = ($10 - $1)
	if ( ((int_32)$22 >= (int_32)$15) ){ goto $label$8 }
	
.LABEL $label$7
	$1 = $10
	
.LABEL $label$6
	$8 = ( [-1] ? ($1 - $8) : ((int_32)$1 == (int_32)$10) )
	
.LABEL $label$5
	$1 = [0]
	CALL $78(($24 + [160]), CALL $85(($24 + [160]), [0], ($8 + [1])))
	$15 = *($24 + [144])
	$22 = CALL strlen([2128])
	if ( ((int_32)$22 != (int_32)( *($24 + [148]) ? uint_32($15 >> [1]) : ($15 & [1]) )) ){ goto $label$9 }
	$1 = (CALL $86(($24 + [144]), [0], [-1], [2128], $22) == 0)
	
.LABEL $label$9
	CALL eosio_assert($1, [2144])
	if ( ($3 == 0) ){ goto $label$15 }
	*($3) = (int_64)0
	$15 = *($24 + [160])
	$8 = ($24 + [168])
	$10 = *($8)
	$22 = *($24 + [164])
	$1 = CALL strlen([1568])
	if ( ($1 == 0) ){ goto $label$16 }
	$14 = ($15 & [1])
	$15 = ( $22 ? uint_32($15 >> [1]) : $14 )
	if ( ((int_32)$15 < (int_32)$1) ){ goto $label$15 }
	$14 = ( $10 ? $6 : $14 )
	$10 = ($14 + $15)
	$22 = $14
	
.LOOP $label$17:
	$15 = (($15 - $1) + [1])
	if ( ($15 == 0) ){ goto $label$15 }
	$15 = CALL memchr($22, [45], $15)
	if ( ($15 == 0) ){ goto $label$15 }
	if ( (CALL memcmp($15, [1568], $1) == 0) ){ goto $label$18 }
	$22 = ($15 + [1])
	$15 = ($10 - $22)
	if ( ((int_32)$15 >= (int_32)$1) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	if ( ((int_32)$15 == (int_32)$10) ){ goto $label$15 }
	if ( ((int_32)($15 - $14) == (int_32)[-1]) ){ goto $label$15 }
	
.LABEL $label$16
	$22 = *($24 + [160])
	$10 = *($8)
	$14 = *($24 + [164])
	$8 = [0]
	$1 = [0]
	$15 = CALL strlen([1568])
	if ( ($15 == 0) ){ goto $label$19 }
	$22 = ( $14 ? uint_32($22 >> [1]) : $1 )
	$1 = ($22 & [1])
	$18 = ( $10 ? $6 : $1 )
	$10 = ($18 + $22)
	$1 = $10
	if ( ((int_32)$22 < (int_32)$15) ){ goto $label$20 }
	$1 = $18
	
.LOOP $label$22:
	$22 = (($22 - $15) + [1])
	if ( ($22 == 0) ){ goto $label$21 }
	$1 = CALL memchr($1, [45], $22)
	if ( ($1 == 0) ){ goto $label$21 }
	if ( (CALL memcmp($1, [1568], $15) == 0) ){ goto $label$20 }
	$1 = ($1 + [1])
	$22 = ($10 - $1)
	if ( ((int_32)$22 >= (int_32)$15) ){ goto $label$22 }
	
.LABEL $label$21
	$1 = $10
	
.LABEL $label$20
	$1 = ( [-1] ? ($1 - $18) : ((int_32)$1 == (int_32)$10) )
	
.LABEL $label$19
	CALL $89(($24 + [8]), ($24 + [160]), [0], $1, ($24 + [160]))
	$1 = *($24 + [160])
	$22 = *((($24 + [160]) + [8]))
	$10 = *($24 + [164])
	$15 = CALL strlen([1568])
	if ( ($15 == 0) ){ goto $label$23 }
	$22 = ( $10 ? uint_32($1 >> [1]) : $14 )
	$14 = ($1 & [1])
	$8 = ( $22 ? $6 : $14 )
	$10 = ($8 + $22)
	$1 = $10
	if ( ((int_32)$22 < (int_32)$15) ){ goto $label$24 }
	$1 = $8
	
.LOOP $label$26:
	$22 = (($22 - $15) + [1])
	if ( ($22 == 0) ){ goto $label$25 }
	$1 = CALL memchr($1, [45], $22)
	if ( ($1 == 0) ){ goto $label$25 }
	if ( (CALL memcmp($1, [1568], $15) == 0) ){ goto $label$24 }
	$1 = ($1 + [1])
	$22 = ($10 - $1)
	if ( ((int_32)$22 >= (int_32)$15) ){ goto $label$26 }
	
.LABEL $label$25
	$1 = $10
	
.LABEL $label$24
	$8 = ( [-1] ? ($1 - $8) : ((int_32)$1 == (int_32)$10) )
	
.LABEL $label$23
	$1 = [0]
	CALL $78(($24 + [160]), CALL $85(($24 + [160]), [0], ($8 + [1])))
	CALL $88(($24 + [128]), ($24 + [8]))
	$10 = (($24 + [128]) | [1])
	$8 = (($24 + [128]) + [8])
	
.LOOP $label$30:
	$22 = ($15 & [1])
	$15 = *($24 + [128])
	if ( ((uint_32)$1 >= (uint_32)( *($24 + [132]) ? uint_32($15 >> [1]) : $22 )) ){ goto $label$29 }
	$15 = (( *($8) ? $10 : $22 ) + $1)
	$1 = ($1 + [1])
	if ( CALL isdigit(*($15)) ){ goto $label$30 }
	$1 = [0]
	if ( (*($24 + [128]) & [1]) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$1 = [1]
	if ( (($15 & [1]) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL $76(*(($24 + [136])))
	
.LABEL $label$27
	$15 = (*($24 + [8]) & [1])
	if ( ($1 == 0) ){ goto $label$14 }
	*($3) = CALL atoll(( *($24 + [16]) ? (($24 + [8]) | [1]) : $15 ))
	if ( ((*($24 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL $76(*(($24 + [16])))
	
.LABEL $label$15
	if ( ($4 == 0) ){ goto $label$11 }
	$15 = *($24 + [160])
	$8 = ($24 + [168])
	$10 = *($8)
	$22 = *($24 + [164])
	$1 = CALL strlen([1568])
	if ( ($1 == 0) ){ goto $label$12 }
	$3 = ($15 & [1])
	$15 = ( $22 ? uint_32($15 >> [1]) : $3 )
	if ( ((int_32)$15 < (int_32)$1) ){ goto $label$11 }
	$3 = ( $10 ? $6 : $3 )
	$10 = ($3 + $15)
	$22 = $3
	
.LOOP $label$31:
	$15 = (($15 - $1) + [1])
	if ( ($15 == 0) ){ goto $label$11 }
	$15 = CALL memchr($22, [45], $15)
	if ( ($15 == 0) ){ goto $label$11 }
	if ( (CALL memcmp($15, [1568], $1) == 0) ){ goto $label$13 }
	$22 = ($15 + [1])
	$15 = ($10 - $22)
	if ( ((int_32)$15 >= (int_32)$1) ){ goto $label$31 }
	goto $label$11 
	
.LABEL $label$14
	if ( ($15 == 0) ){ goto $label$10 }
	CALL $76(*($24 + [16]))
	goto $label$10 
	
.LABEL $label$13
	if ( ((int_32)$15 == (int_32)$10) ){ goto $label$11 }
	if ( ((int_32)($15 - $3) == (int_32)[-1]) ){ goto $label$11 }
	
.LABEL $label$12
	$22 = *($24 + [160])
	$10 = *($8)
	$8 = *($24 + [164])
	$1 = [0]
	$15 = CALL strlen([1568])
	if ( ($15 == 0) ){ goto $label$32 }
	$22 = ( $8 ? uint_32($22 >> [1]) : $1 )
	$1 = ($22 & [1])
	$3 = ( $10 ? $6 : $1 )
	$10 = ($3 + $22)
	$1 = $10
	if ( ((int_32)$22 < (int_32)$15) ){ goto $label$33 }
	$1 = $3
	
.LOOP $label$35:
	$22 = (($22 - $15) + [1])
	if ( ($22 == 0) ){ goto $label$34 }
	$1 = CALL memchr($1, [45], $22)
	if ( ($1 == 0) ){ goto $label$34 }
	if ( (CALL memcmp($1, [1568], $15) == 0) ){ goto $label$33 }
	$1 = ($1 + [1])
	$22 = ($10 - $1)
	if ( ((int_32)$22 >= (int_32)$15) ){ goto $label$35 }
	
.LABEL $label$34
	$1 = $10
	
.LABEL $label$33
	$1 = ( [-1] ? ($1 - $3) : ((int_32)$1 == (int_32)$10) )
	
.LABEL $label$32
	CALL $89(($24 + [8]), ($24 + [160]), [0], $1, ($24 + [160]))
	$22 = *($24 + [160])
	$10 = *(($24 + [168]))
	$8 = *($24 + [164])
	$1 = [1]
	$15 = CALL strlen([1568])
	if ( ($15 == 0) ){ goto $label$36 }
	$22 = ( $8 ? uint_32($22 >> [1]) : $1 )
	$1 = ($22 & [1])
	$3 = ( $10 ? $6 : $1 )
	$10 = ($3 + $22)
	$1 = $10
	if ( ((int_32)$22 < (int_32)$15) ){ goto $label$37 }
	$1 = $3
	
.LOOP $label$39:
	$22 = (($22 - $15) + [1])
	if ( ($22 == 0) ){ goto $label$38 }
	$1 = CALL memchr($1, [45], $22)
	if ( ($1 == 0) ){ goto $label$38 }
	if ( (CALL memcmp($1, [1568], $15) == 0) ){ goto $label$37 }
	$1 = ($1 + [1])
	$22 = ($10 - $1)
	if ( ((int_32)$22 >= (int_32)$15) ){ goto $label$39 }
	
.LABEL $label$38
	$1 = $10
	
.LABEL $label$37
	$1 = ( [0] ? (($1 - $3) + [1]) : ((int_32)$1 == (int_32)$10) )
	
.LABEL $label$36
	CALL $78(($24 + [160]), CALL $85(($24 + [160]), [0], $1))
	$1 = ($1 & [1])
	$1 = *($24 + [8])
	if ( ((int_32)( *($24 + [12]) ? uint_32($1 >> [1]) : $1 ) != (int_32)[12]) ){ goto $label$40 }
	$1 = ( *($24 + [16]) ? (($24 + [8]) | [1]) : $1 )
	$15 = [-1]
	
.LOOP $label$41:
	$22 = ($1 + $15)
	$10 = ($15 + [1])
	$15 = $10
	if ( *(($22 + [1])) ){ goto $label$41 }
	$7 = (CASTING uint_64)(uint_32 $10)
	$23 = (int_64)0
	$19 = (int_64)59
	$20 = (int_64)0
	
.LOOP $label$42:
	$21 = (int_64)0
	if ( ((uint_64)$23 >= (uint_64)$7) ){ goto $label$43 }
	$15 = *($1)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$15 = ($15 + [165])
	goto $label$44 
	
.LABEL $label$45
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$47 }
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	goto $label$46 
	
.LABEL $label$47
	$21 = ((int_64)$21 & (int_64)15)
	
.LABEL $label$46
	$1 = ($1 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$42 }
	if ( (CALL is_account($20) == 0) ){ goto $label$40 }
	*($4) = $20
	
.LABEL $label$40
	if ( ((*($24 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $76(*($24 + [16]))
	
.LABEL $label$11
	$11 = (($24 + [48]) | [1])
	$10 = (($24 + [32]) | [1])
	$9 = (($24 + [112]) | [1])
	$8 = (($24 + [96]) | [1])
	$4 = (($24 + [160]) + [8])
	$18 = (($24 + [8]) + [16])
	
.LOOP $label$48:
	$15 = *($24 + [160])
	$22 = ($15 & [1])
	$14 = *($4)
	$3 = *($24 + [164])
	$1 = CALL strlen([1568])
	if ( ($1 == 0) ){ goto $label$49 }
	$15 = ( $3 ? uint_32($15 >> [1]) : $22 )
	if ( ((int_32)$15 < (int_32)$1) ){ goto $label$10 }
	$14 = ( $14 ? $6 : $22 )
	$3 = ($14 + $15)
	$22 = $14
	
.LOOP $label$50:
	$15 = (($15 - $1) + [1])
	if ( ($15 == 0) ){ goto $label$10 }
	$15 = CALL memchr($22, [45], $15)
	if ( ($15 == 0) ){ goto $label$10 }
	if ( (CALL memcmp($15, [1568], $1) == 0) ){ goto $label$51 }
	$22 = ($15 + [1])
	$15 = ($3 - $22)
	if ( ((int_32)$15 >= (int_32)$1) ){ goto $label$50 }
	goto $label$10 
	
.LABEL $label$51
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$10 }
	if ( ((int_32)($15 - $14) == (int_32)[-1]) ){ goto $label$10 }
	
.LABEL $label$49
	$22 = *($24 + [160])
	$3 = *($4)
	$17 = *($24 + [164])
	$14 = [0]
	$1 = [0]
	$15 = CALL strlen([1568])
	if ( ($15 == 0) ){ goto $label$52 }
	$22 = ( $17 ? uint_32($22 >> [1]) : $1 )
	$1 = ($22 & [1])
	$12 = ( $3 ? $6 : $1 )
	$3 = ($12 + $22)
	$1 = $3
	if ( ((int_32)$22 < (int_32)$15) ){ goto $label$53 }
	$1 = $12
	
.LOOP $label$55:
	$22 = (($22 - $15) + [1])
	if ( ($22 == 0) ){ goto $label$54 }
	$1 = CALL memchr($1, [45], $22)
	if ( ($1 == 0) ){ goto $label$54 }
	if ( (CALL memcmp($1, [1568], $15) == 0) ){ goto $label$53 }
	$1 = ($1 + [1])
	$22 = ($3 - $1)
	if ( ((int_32)$22 >= (int_32)$15) ){ goto $label$55 }
	
.LABEL $label$54
	$1 = $3
	
.LABEL $label$53
	$1 = ( [-1] ? ($1 - $12) : ((int_32)$1 == (int_32)$3) )
	
.LABEL $label$52
	CALL $89(($24 + [112]), ($24 + [160]), [0], $1, ($24 + [160]))
	$1 = *($24 + [160])
	$22 = *($4)
	$3 = *($24 + [164])
	$15 = CALL strlen([1568])
	if ( ($15 == 0) ){ goto $label$56 }
	$22 = ( $3 ? uint_32($1 >> [1]) : $17 )
	$17 = ($1 & [1])
	$14 = ( $22 ? $6 : $17 )
	$3 = ($14 + $22)
	$1 = $3
	if ( ((int_32)$22 < (int_32)$15) ){ goto $label$57 }
	$1 = $14
	
.LOOP $label$59:
	$22 = (($22 - $15) + [1])
	if ( ($22 == 0) ){ goto $label$58 }
	$1 = CALL memchr($1, [45], $22)
	if ( ($1 == 0) ){ goto $label$58 }
	if ( (CALL memcmp($1, [1568], $15) == 0) ){ goto $label$57 }
	$1 = ($1 + [1])
	$22 = ($3 - $1)
	if ( ((int_32)$22 >= (int_32)$15) ){ goto $label$59 }
	
.LABEL $label$58
	$1 = $3
	
.LABEL $label$57
	$14 = ( [-1] ? ($1 - $14) : ((int_32)$1 == (int_32)$3) )
	
.LABEL $label$56
	$1 = [0]
	CALL $78(($24 + [160]), CALL $85(($24 + [160]), [0], ($14 + [1])))
	CALL $88(($24 + [96]), ($24 + [112]))
	
.LOOP $label$61:
	$22 = [1]
	$15 = ($15 & [1])
	$15 = *($24 + [96])
	if ( ((uint_32)$1 >= (uint_32)( *($24 + [100]) ? uint_32($15 >> [1]) : $15 )) ){ goto $label$60 }
	$15 = (( *((($24 + [96]) + [8])) ? $8 : $15 ) + $1)
	$1 = ($1 + [1])
	if ( CALL isdigit(*($15)) ){ goto $label$61 }
	$22 = [0]
	
.LABEL $label$60
	CALL eosio_assert($22, [2176])
	if ( ((*($24 + [96]) & [1]) == 0) ){ goto $label$62 }
	CALL $76(*((($24 + [96]) + [8])))
	
.LABEL $label$62
	$16 = (($24 + [112]) + [8])
	$23 = CALL atoll(( *($16) ? $9 : (*($24 + [112]) & [1]) ))
	CALL $88(($24 + [64]), ($24 + [112]))
	$17 = ($2 + [8])
	CALL _ZN8baccarat10_str2assetENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5eosio11symbol_typeE(($24 + [80]), $24, ($24 + [64]), *($17))
	if ( ((*($24 + [64]) & [1]) == 0) ){ goto $label$63 }
	CALL $76(*((($24 + [64]) + [8])))
	
.LABEL $label$63
	CALL eosio_assert(((int_64)$23 > (int_64)0), [2224])
	$22 = *($24 + [160])
	$3 = *($4)
	$12 = *($24 + [164])
	$14 = [0]
	$1 = [0]
	$15 = CALL strlen([1568])
	if ( ($15 == 0) ){ goto $label$64 }
	$22 = ( $12 ? uint_32($22 >> [1]) : $1 )
	$1 = ($22 & [1])
	$13 = ( $3 ? $6 : $1 )
	$3 = ($13 + $22)
	$1 = $3
	if ( ((int_32)$22 < (int_32)$15) ){ goto $label$65 }
	$1 = $13
	
.LOOP $label$67:
	$22 = (($22 - $15) + [1])
	if ( ($22 == 0) ){ goto $label$66 }
	$1 = CALL memchr($1, [45], $22)
	if ( ($1 == 0) ){ goto $label$66 }
	if ( (CALL memcmp($1, [1568], $15) == 0) ){ goto $label$65 }
	$1 = ($1 + [1])
	$22 = ($3 - $1)
	if ( ((int_32)$22 >= (int_32)$15) ){ goto $label$67 }
	
.LABEL $label$66
	$1 = $3
	
.LABEL $label$65
	$1 = ( [-1] ? ($1 - $13) : ((int_32)$1 == (int_32)$3) )
	
.LABEL $label$64
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [2240])
	$1 = *($24 + [160])
	$22 = *($4)
	$3 = *($24 + [164])
	$15 = CALL strlen([1568])
	if ( ($15 == 0) ){ goto $label$68 }
	$22 = ( $3 ? uint_32($1 >> [1]) : $12 )
	$12 = ($1 & [1])
	$14 = ( $22 ? $6 : $12 )
	$3 = ($14 + $22)
	$1 = $3
	if ( ((int_32)$22 < (int_32)$15) ){ goto $label$69 }
	$1 = $14
	
.LOOP $label$71:
	$22 = (($22 - $15) + [1])
	if ( ($22 == 0) ){ goto $label$70 }
	$1 = CALL memchr($1, [45], $22)
	if ( ($1 == 0) ){ goto $label$70 }
	if ( (CALL memcmp($1, [1568], $15) == 0) ){ goto $label$69 }
	$1 = ($1 + [1])
	$22 = ($3 - $1)
	if ( ((int_32)$22 >= (int_32)$15) ){ goto $label$71 }
	
.LABEL $label$70
	$1 = $3
	
.LABEL $label$69
	$14 = ( [-1] ? ($1 - $14) : ((int_32)$1 == (int_32)$3) )
	
.LABEL $label$68
	$1 = [0]
	CALL $89(($24 + [48]), ($24 + [160]), [0], $14, ($24 + [160]))
	$3 = *($24 + [160])
	$14 = *($4)
	$12 = *($24 + [164])
	$15 = [0]
	$22 = CALL strlen([1568])
	if ( ($22 == 0) ){ goto $label$72 }
	$3 = ( $12 ? uint_32($3 >> [1]) : $15 )
	$15 = ($3 & [1])
	$13 = ( $14 ? $6 : $15 )
	$14 = ($13 + $3)
	$15 = $14
	if ( ((int_32)$3 < (int_32)$22) ){ goto $label$73 }
	$15 = $13
	
.LOOP $label$75:
	$3 = (($3 - $22) + [1])
	if ( ($3 == 0) ){ goto $label$74 }
	$15 = CALL memchr($15, [45], $3)
	if ( ($15 == 0) ){ goto $label$74 }
	if ( (CALL memcmp($15, [1568], $22) == 0) ){ goto $label$73 }
	$15 = ($15 + [1])
	$3 = ($14 - $15)
	if ( ((int_32)$3 >= (int_32)$22) ){ goto $label$75 }
	
.LABEL $label$74
	$15 = $14
	
.LABEL $label$73
	$15 = ( [-1] ? ($15 - $13) : ((int_32)$15 == (int_32)$14) )
	
.LABEL $label$72
	CALL $78(($24 + [160]), CALL $85(($24 + [160]), [0], ($15 + [1])))
	CALL $88(($24 + [32]), ($24 + [48]))
	
.LOOP $label$77:
	$22 = [1]
	$15 = ($15 & [1])
	$15 = *($24 + [32])
	if ( ((uint_32)$1 >= (uint_32)( *($24 + [36]) ? uint_32($15 >> [1]) : $15 )) ){ goto $label$76 }
	$15 = (( *((($24 + [32]) + [8])) ? $10 : $15 ) + $1)
	$1 = ($1 + [1])
	if ( CALL isdigit(*($15)) ){ goto $label$77 }
	$22 = [0]
	
.LABEL $label$76
	CALL eosio_assert($22, [2272])
	if ( ((*($24 + [32]) & [1]) == 0) ){ goto $label$78 }
	CALL $76(*((($24 + [32]) + [8])))
	
.LABEL $label$78
	$14 = (($24 + [48]) + [8])
	$3 = CALL atoi(( *($14) ? $11 : (*($24 + [48]) & [1]) ))
	if ( ($3 <= [4]) ){ goto $label$79 }
	CALL eosio_assert([0], [2320])
	
.LABEL $label$79
	*(($22 = (($24 + [8]) + [8]))) = (int_64)1398362884
	*($24 + [8]) = (int_64)0
	CALL eosio_assert([1], [336])
	$23 = (uint_64)*($22) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$82:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $23) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$81 }
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$83 }
	
.LOOP $label$84:
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$81 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$84 }
	
.LABEL $label$83
	$15 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$82 }
	goto $label$80 
	
.LABEL $label$81
	$15 = [0]
	
.LABEL $label$80
	CALL eosio_assert($15, [400])
	*($18) = (CASTING int_64)(int_32 $3)
	$3 = (($24 + [80]) + [8])
	*($22) = *($3)
	*($24 + [8]) = *($24 + [80])
	$15 = ($5 + [4])
	$1 = *($15)
	if ( ((int_32)$1 == (int_32)*(($5 + [8]))) ){ goto $label$86 }
	*($1) = *($24 + [8])
	*(($1 + [16])) = *($18)
	*(($1 + [8])) = *($22)
	*($15) = (*($15) + [24])
	goto $label$85 
	
.LABEL $label$86
	CALL $66($5, ($24 + [8]))
	
.LABEL $label$85
	CALL eosio_assert(((int_64)*($3) == (int_64)*($17)), [1968])
	$23 = ((int_64)*($2) + (int_64)*($24 + [80]))
	*($2) = $23
	CALL eosio_assert(((int_64)$23 > (int_64)-4611686018427387904), [2016])
	CALL eosio_assert(((int_64)*($2) < (int_64)4611686018427387904), [2048])
	if ( ((*($24 + [48]) & [1]) == 0) ){ goto $label$87 }
	CALL $76(*($14))
	
.LABEL $label$87
	if ( ((*($24 + [112]) & [1]) == 0) ){ goto $label$48 }
	CALL $76(*($16))
	goto $label$48 
	
.LABEL $label$10
	if ( ((*($24 + [144]) & [1]) == 0) ){ goto $label$88 }
	CALL $76(*($24 + [152]))
	
.LABEL $label$88
	if ( ((*($24 + [160]) & [1]) == 0) ){ goto $label$89 }
	CALL $76(*(($24 + [168])))
	
.LABEL $label$89
	*([0] + [4]) = ($24 + [176])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4147959502518353920, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)$4), [960])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $38($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)4147959502518353920, $5))
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)$4), [960])
	
.LABEL $label$4
	*(($2 + [80])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	$11 = $12
	*([0] + [4]) = $12
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [24])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [8])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [16])), (int_64)4147959502518353920, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $38($5, $6)
	*($11 + [12]) = [0]
	*($11 + [8]) = $5
	$7 = *(*(CALL $39(($11 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [24])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [1488])
	*($1) = *($8)
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [24]) = *(*(*($3 + [12])) + [16])
	$4 = *(*($3 + [12]))
	*($1 + [32]) = *($4)
	*(($1 + [40])) = *(($4 + [8]))
	$7 = *(*($3 + [16]))
	*($1 + [48]) = ( (int_64)0 ? $7 : ((int_64)$7 == (int_64)*(*($3 + [4]))) )
	$7 = CALL current_time()
	*($1 + [64]) = (int_64)0
	*($1 + [56]) = ((uint_64)$7 / (uint_64)(int_64)1000000)
	$12 = $12
	$3 = ($12 + [-80])
	*([0] + [4]) = $3
	*($11 + [12]) = $3
	*($11 + [8]) = $3
	*($11 + [16]) = ($12 + [-12])
	CALL $64(($11 + [8]), $1)
	$7 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($2 + [8]), (int_64)4147959502518353920, *(*($0 + [8])), $7, $3, [68])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$3 = ($2 + [8])
	$7 = *($3)
	$0 = *(($0 + [8]))
	$9 = *($0)
	$10 = *($1)
	*($11 + [24]) = *(($1 + [16]))
	*($1 + [80]) = CALL db_idx64_store($7, (int_64)4147959502518353920, $9, $10, ($11 + [24]))
	$7 = *($0)
	$9 = *($3)
	$10 = *($1)
	*($11 + [24]) = *(($1 + [8]))
	*(($1 + [84])) = CALL db_idx64_store($9, (int_64)4147959502518353921, $7, $10, ($11 + [24]))
	*([0] + [4]) = ($11 + [32])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $75([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [2068]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $89($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $80($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $87($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $76($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $76($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [736])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [736])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [736])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $31(CALL $32($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [736])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [736])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [736])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [736])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [736])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [736])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [928])
	$6 = *($0 + [4])
	$7 = *($6 + [80])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4147959502518353920, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [80]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$2), [960])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $38($2, CALL $fimport$5(*($2), *($2 + [8]), (int_64)4147959502518353920, $3))
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$2), [960])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [80])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $76($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $76($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $76($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $76($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $76($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $76($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $76($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $76($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $27($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $24($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $28($4, $1)
	CALL $30(CALL $29(CALL $29($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $87($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $75([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($5 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$8 = (CASTING uint_64)(uint_32 $1)
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$1 = ($9 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $24($1, $2)
	$7 = *($5)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $7
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	$5 = ($9 + [40])
	CALL $25(($10 + [24]), ($10 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$10:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($4 = ($9 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($9 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($0) = $9
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$1 = ([0] - $4)
	$9 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [16])) = $2
	CALL $76($2)
	
.LABEL $label$13
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($9 + [4])) = $2
	CALL $76($2)
	
.LABEL $label$14
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $76($4)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC _ZN8baccarat12_transfer_toEyN5eosio5assetERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEo (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_64 $5)
{
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [160])
	*([0] + [4]) = $12
	*($12 + [152]) = $5
	*($12 + [144]) = $4
	$4 = *($2 + [8])
	if ( ((int_64)$4 != (int_64)1397703940) ){ goto $label$2 }
	$4 = CALL current_time()
	*(($12 + [108])) = [0]
	*(($12 + [112])) = [0]
	*($12 + [92]) = [0]
	*($12 + [96]) = [0]
	*($12 + [100]) = [0]
	*($12 + [104]) = [0]
	*($12 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	*($12 + [116]) = [0]
	*(($12 + [120])) = [0]
	*(($12 + [124])) = [0]
	*($12 + [128]) = [0]
	*(($12 + [132])) = [0]
	*(($12 + [136])) = [0]
	$7 = ($12 + [116])
	$6 = *($0)
	$4 = (int_64)0
	$10 = (int_64)59
	$9 = [608]
	$11 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$8 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$8 = ($8 + [165])
	goto $label$6 
	
.LABEL $label$8
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$4
	$9 = ($9 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$5 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$3 }
	*($12 + [72]) = $11
	*($12 + [64]) = $6
	$4 = (int_64)0
	$10 = (int_64)59
	$9 = [192]
	$11 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$14 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$8 = ($8 + [165])
	goto $label$12 
	
.LABEL $label$14
	$5 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$10
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$11 = ((int_64)$5 | (int_64)$11)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$9 }
	*($12 + [56]) = $11
	$4 = (int_64)0
	$10 = (int_64)59
	$9 = [256]
	$11 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$20 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$8 = ($8 + [165])
	goto $label$18 
	
.LABEL $label$20
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$16
	$9 = ($9 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$5 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$15 }
	*($12 + [48]) = $11
	*(($12 + [28])) = *(($2 + [12]))
	*(($12 + [24])) = *(($2 + [8]))
	*(($12 + [20])) = *(($2 + [4]))
	*($12 + [8]) = $1
	*($12) = $6
	*($12 + [16]) = *($2)
	CALL $88(($12 + [32]), $3)
	CALL $23($7, ($12 + [64]), ($12 + [56]), ($12 + [48]), $12)
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$21 }
	CALL $76(*(($12 + [40])))
	
.LABEL $label$21
	*((($12 + [80]) + [20])) = [0]
	$4 = *($0)
	CALL $20($12, ($12 + [80]))
	$9 = *($12)
	CALL send_deferred(($12 + [144]), $4, $9, (*($12 + [4]) - $9), [0])
	$9 = *($12)
	if ( ($9 == 0) ){ goto $label$22 }
	*($12 + [4]) = $9
	CALL $76($9)
	
.LABEL $label$22
	CALL $21(($12 + [80]))
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$4 != (int_64)361939223556) ){ goto $label$23 }
	$4 = CALL current_time()
	*(($12 + [108])) = [0]
	*(($12 + [112])) = [0]
	*($12 + [92]) = [0]
	*($12 + [96]) = [0]
	*($12 + [100]) = [0]
	*($12 + [104]) = [0]
	*($12 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	*($12 + [116]) = [0]
	*(($12 + [120])) = [0]
	*(($12 + [124])) = [0]
	*($12 + [128]) = [0]
	*(($12 + [132])) = [0]
	*(($12 + [136])) = [0]
	$7 = ($12 + [116])
	$6 = *($0)
	$4 = (int_64)0
	$10 = (int_64)59
	$9 = [608]
	$11 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$29 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$8 = ($8 + [165])
	goto $label$27 
	
.LABEL $label$29
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$25
	$9 = ($9 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$5 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$24 }
	*($12 + [72]) = $11
	*($12 + [64]) = $6
	$4 = (int_64)0
	$5 = (int_64)59
	$9 = [208]
	$11 = (int_64)0
	
.LOOP $label$30:
	$10 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$31 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$8 = ($8 + [165])
	goto $label$32 
	
.LABEL $label$33
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$31
	$9 = ($9 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$30 }
	*($12 + [56]) = $11
	$4 = (int_64)0
	$10 = (int_64)59
	$9 = [256]
	$11 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$39 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$8 = ($8 + [165])
	goto $label$37 
	
.LABEL $label$39
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$35
	$9 = ($9 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$5 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$34 }
	*($12 + [48]) = $11
	*(($12 + [28])) = *(($2 + [12]))
	*(($12 + [24])) = *(($2 + [8]))
	*(($12 + [20])) = *(($2 + [4]))
	*($12 + [8]) = $1
	*($12) = $6
	*($12 + [16]) = *($2)
	CALL $88(($12 + [32]), $3)
	CALL $23($7, ($12 + [64]), ($12 + [56]), ($12 + [48]), $12)
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$40 }
	CALL $76(*(($12 + [40])))
	
.LABEL $label$40
	*((($12 + [80]) + [20])) = [0]
	$4 = *($0)
	CALL $20($12, ($12 + [80]))
	$9 = *($12)
	CALL send_deferred(($12 + [144]), $4, $9, (*($12 + [4]) - $9), [0])
	$9 = *($12)
	if ( ($9 == 0) ){ goto $label$41 }
	*($12 + [4]) = $9
	CALL $76($9)
	
.LABEL $label$41
	CALL $21(($12 + [80]))
	goto $label$1 
	
.LABEL $label$23
	if ( ((int_64)$4 != (int_64)297481618436) ){ goto $label$42 }
	$4 = CALL current_time()
	*(($12 + [108])) = [0]
	*(($12 + [112])) = [0]
	*($12 + [92]) = [0]
	*($12 + [96]) = [0]
	*($12 + [100]) = [0]
	*($12 + [104]) = [0]
	*($12 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	*($12 + [116]) = [0]
	*(($12 + [120])) = [0]
	*(($12 + [124])) = [0]
	*($12 + [128]) = [0]
	*(($12 + [132])) = [0]
	*(($12 + [136])) = [0]
	$7 = ($12 + [116])
	$6 = *($0)
	$4 = (int_64)0
	$10 = (int_64)59
	$9 = [608]
	$11 = (int_64)0
	
.LOOP $label$43:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$48 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$8 = ($8 + [165])
	goto $label$46 
	
.LABEL $label$48
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$45
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$44
	$9 = ($9 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$5 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$43 }
	*($12 + [72]) = $11
	*($12 + [64]) = $6
	$4 = (int_64)0
	$5 = (int_64)59
	$9 = [224]
	$11 = (int_64)0
	
.LOOP $label$49:
	$10 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$50 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$8 = ($8 + [165])
	goto $label$51 
	
.LABEL $label$52
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$50
	$9 = ($9 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$49 }
	*($12 + [56]) = $11
	$4 = (int_64)0
	$10 = (int_64)59
	$9 = [256]
	$11 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$58 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$8 = ($8 + [165])
	goto $label$56 
	
.LABEL $label$58
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$54
	$9 = ($9 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$5 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$53 }
	*($12 + [48]) = $11
	*(($12 + [28])) = *(($2 + [12]))
	*(($12 + [24])) = *(($2 + [8]))
	*(($12 + [20])) = *(($2 + [4]))
	*($12 + [8]) = $1
	*($12) = $6
	*($12 + [16]) = *($2)
	CALL $88(($12 + [32]), $3)
	CALL $23($7, ($12 + [64]), ($12 + [56]), ($12 + [48]), $12)
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$59 }
	CALL $76(*(($12 + [40])))
	
.LABEL $label$59
	*((($12 + [80]) + [20])) = [0]
	$4 = *($0)
	CALL $20($12, ($12 + [80]))
	$9 = *($12)
	CALL send_deferred(($12 + [144]), $4, $9, (*($12 + [4]) - $9), [0])
	$9 = *($12)
	if ( ($9 == 0) ){ goto $label$60 }
	*($12 + [4]) = $9
	CALL $76($9)
	
.LABEL $label$60
	CALL $21(($12 + [80]))
	goto $label$1 
	
.LABEL $label$42
	if ( ((int_64)$4 != (int_64)293455873288) ){ goto $label$61 }
	$4 = CALL current_time()
	*(($12 + [108])) = [0]
	*(($12 + [112])) = [0]
	*($12 + [92]) = [0]
	*($12 + [96]) = [0]
	*($12 + [100]) = [0]
	*($12 + [104]) = [0]
	*($12 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	*($12 + [116]) = [0]
	*(($12 + [120])) = [0]
	*(($12 + [124])) = [0]
	*($12 + [128]) = [0]
	*(($12 + [132])) = [0]
	*(($12 + [136])) = [0]
	$7 = ($12 + [116])
	$6 = *($0)
	$4 = (int_64)0
	$10 = (int_64)59
	$9 = [608]
	$11 = (int_64)0
	
.LOOP $label$62:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$67 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$8 = ($8 + [165])
	goto $label$65 
	
.LABEL $label$67
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$66
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$64
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$63
	$9 = ($9 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$5 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$62 }
	*($12 + [72]) = $11
	*($12 + [64]) = $6
	$4 = (int_64)0
	$5 = (int_64)59
	$9 = [240]
	$11 = (int_64)0
	
.LOOP $label$68:
	$10 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$69 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$71 }
	$8 = ($8 + [165])
	goto $label$70 
	
.LABEL $label$71
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$70
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$69
	$9 = ($9 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$68 }
	*($12 + [56]) = $11
	$4 = (int_64)0
	$10 = (int_64)59
	$9 = [256]
	$11 = (int_64)0
	
.LOOP $label$72:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$77 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$76 }
	$8 = ($8 + [165])
	goto $label$75 
	
.LABEL $label$77
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$76
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$75
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$74
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$73
	$9 = ($9 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$5 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$72 }
	*($12 + [48]) = $11
	*(($12 + [28])) = *(($2 + [12]))
	*(($12 + [24])) = *(($2 + [8]))
	*(($12 + [20])) = *(($2 + [4]))
	*($12 + [8]) = $1
	*($12) = $6
	*($12 + [16]) = *($2)
	CALL $88(($12 + [32]), $3)
	CALL $23($7, ($12 + [64]), ($12 + [56]), ($12 + [48]), $12)
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$78 }
	CALL $76(*(($12 + [40])))
	
.LABEL $label$78
	*((($12 + [80]) + [20])) = [0]
	$4 = *($0)
	CALL $20($12, ($12 + [80]))
	$9 = *($12)
	CALL send_deferred(($12 + [144]), $4, $9, (*($12 + [4]) - $9), [0])
	$9 = *($12)
	if ( ($9 == 0) ){ goto $label$79 }
	*($12 + [4]) = $9
	CALL $76($9)
	
.LABEL $label$79
	CALL $21(($12 + [80]))
	goto $label$1 
	
.LABEL $label$61
	CALL eosio_assert([0], [688])
	
.LABEL $label$1
	*([0] + [4]) = ($12 + [160])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [736])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [736])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [736])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [736])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $26(*($1), ($0 + [32]))
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $75($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $87($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $76($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [736])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [736])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC _ZN8baccarat16_generateRandNumEyPy (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [48])
	*([0] + [4]) = $3
	*($3 + [12]) = ((int_32)CALL tapos_block_num() * (int_32)CALL $fimport$32())
	CALL sha256(($3 + [12]), [4], ($3 + [16]))
	*($2) = *($3 + [16])
	*($2 + [8]) = *($3 + [24])
	*($2 + [16]) = *($3 + [32])
	*([0] + [4]) = ($3 + [48])
}

int_32 .FUNC _Z8isdecnumPKc (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	if ( ($0 == 0) ){ goto $label$6 }
	*(($6 + [24])) = [0]
	*($6 + [16]) = (int_64)0
	$4 = CALL strlen($0)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($6 + [16]) = ($4 << [1])
	$2 = (($6 + [16]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$5 = [0]
	goto $label$2 
	
.LABEL $label$5
	$1 = (($4 + [16]) & [-16])
	$2 = CALL $75($1)
	*($6 + [16]) = ($1 | [1])
	*($6 + [24]) = $2
	*($6 + [20]) = $4
	
.LABEL $label$4
	CALL memcpy($2, $0, $4)
	
.LABEL $label$3
	$0 = [0]
	*(($2 + $4)) = [0]
	CALL $88($6, ($6 + [16]))
	$5 = [1]
	$1 = ($6 | [1])
	$3 = ($6 + [8])
	
.LOOP $label$8:
	$2 = ($4 & [1])
	$4 = *($6)
	if ( ((uint_32)$0 >= (uint_32)( *($6 + [4]) ? uint_32($4 >> [1]) : $2 )) ){ goto $label$7 }
	$4 = (( *($3) ? $1 : $2 ) + $0)
	$0 = ($0 + [1])
	if ( CALL isdigit(*($4)) ){ goto $label$8 }
	$5 = [0]
	$4 = *($6)
	
.LABEL $label$7
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	CALL $76(*(($6 + [8])))
	
.LABEL $label$9
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*($6 + [24]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [32])
	return $5
	
.LABEL $label$1
	CALL $77(($6 + [16]))
	return (unreachable)
}

void .FUNC _ZN8baccarat10_str2assetENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5eosio11symbol_typeE (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [336])
	$5 = [0]
	$4 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [400])
	if ( (*($2) & [1]) ){ goto $label$7 }
	$5 = ($2 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($2 + [8])
	
.LABEL $label$6
	$4 = CALL atoll($5)
	*(($0 + [8])) = $3
	*($0) = ( ((int_64)$4 * (int_64)10000) ? $4 : ((int_64)293455873288 == (int_64)$3) )
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [736])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [736])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [736])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [736])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [736])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [736])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [736])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [736])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [736])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC _Z8isdecnumNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($0 + [1])
	$5 = [0]
	$4 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$2:
	$6 = *($0)
	$2 = ($6 & [1])
	if ( $2 ){ goto $label$4 }
	if ( ($5 <= uint_32($6 >> [1])) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)*($3)) ){ goto $label$1 }
	
.LABEL $label$3
	$6 = $1
	if ( ($2 == 0) ){ goto $label$5 }
	$6 = *($4)
	
.LABEL $label$5
	$6 = ($6 + $5)
	$5 = ($5 + [1])
	if ( CALL isdigit(*($6)) ){ goto $label$2 }
	return [0]
	
.LABEL $label$1
	return [1]
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $75(((int_32)$6 * (int_32)[24]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $87($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[24])))) = *($1)
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($7 + ((int_32)$6 * (int_32)[24]))
	$3 = ($3 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $76($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = *($0)
	$9 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$5 = ($9 + [1])
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$7 = ($8 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $75(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $87($0)
	
.LABEL $label$1
	$5 = ($8 + ((int_32)$7 * (int_32)[40]))
	$9 = ($8 + ((int_32)$9 * (int_32)[40]))
	$8 = CALL $60($9, $1, *($2), *($3), $4)
	$6 = ($8 + [40])
	$7 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$6 }
	$4 = ([0] - $7)
	$7 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($7 + [-12]))
	*(($8 + [-40])) = *(($7 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($2 = ($8 + [-16]))) = [0]
	$3 = ($7 + [-4])
	*($1) = *($3)
	*(($8 + [-20])) = *($7)
	$1 = ($7 + [4])
	*($2) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($3) = (int_64)0
	*(($2 = ($8 + [-4]))) = [0]
	$3 = ($7 + [8])
	*($1) = *($3)
	*(($8 + [-8])) = *(($7 + [12]))
	$8 = ($7 + [16])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$9 = ($9 + [-40])
	$8 = $9
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $4) != (int_32)[-20]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $7
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	$9 = ([0] - $1)
	$7 = ($7 + [-24])
	
.LOOP $label$9:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($7 + [16])) = $8
	CALL $76($8)
	
.LABEL $label$10
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$11 }
	*(($7 + [4])) = $8
	CALL $76($8)
	
.LABEL $label$11
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $9) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $76($1)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $75([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [16])
	$1 = ( *(($4 + [20])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [16])
	$2 = (CASTING uint_64)(uint_32 $1)
	$5 = ($4 + [16])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $24($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = $1
	CALL eosio_assert(((int_32)($1 - $8) > (int_32)[7]), [736])
	CALL memcpy($8, $4, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [736])
	CALL memcpy($6, ($4 + [8]), [8])
	*($9 + [4]) = ($8 + [16])
	CALL $26($9, $5)
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [36]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1120])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7035932477462577152)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1056])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1056])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $33(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$9 = (*([0] + [4]) - [16])
	$12 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [64])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [48])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [56])), (int_64)7035932477462577152, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $33($5, $6)
	*($12 + [12]) = [0]
	*($12 + [8]) = $5
	$7 = *(*(CALL $63(($12 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [64])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [1488])
	*($1) = *($8)
	*($1 + [8]) = *(*($3 + [4]))
	$3 = *($3 + [8])
	*($1 + [16]) = *($3)
	*(($4 = ($1 + [24]))) = *(($3 + [8]))
	$9 = $9
	$3 = ($9 + [-32])
	*([0] + [4]) = $3
	CALL eosio_assert([1], [736])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert([1], [736])
	$8 = ($1 + [8])
	CALL memcpy(($9 + [-24]), $8, [8])
	CALL eosio_assert([1], [736])
	CALL memcpy(($9 + [-16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [736])
	CALL memcpy(($9 + [-8]), $4, [8])
	$7 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)7035932477462577152, *(*($0 + [8])), $7, $3, [32])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$7 = *(($2 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	*($12 + [8]) = *($8)
	*($1 + [40]) = CALL db_idx64_store($7, (int_64)7035932477462577152, $10, $11, ($12 + [8]))
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $75($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $75($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $87 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$4 = uint_32($5 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $6 ){ goto $label$5 }
	$6 = [10]
	goto $label$4 
	
.LABEL $label$5
	$5 = *($0)
	$6 = (($5 & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$6 }
	CALL $79($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	return $0
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ($5 & [1]) ){ goto $label$8 }
	$5 = ($0 + [1])
	goto $label$7 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	
.LABEL $label$7
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL memmove(($6 + $3), $6, $1)
	$2 = ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) )
	
.LABEL $label$10
	CALL memmove($6, $2, $3)
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$12 }
	*($0) = ($3 << [1])
	goto $label$11 
	
.LABEL $label$12
	*($0 + [4]) = $3
	
.LABEL $label$11
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $84($0, $1, $2, CALL $95($2))
}

int_32 .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $79($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	return CALL $82($0, $1, CALL $95($1))
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $75(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $76($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $73($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11120])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $73 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11206]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11208])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11206]) = [1]
	$7 = ($7 << [16])
	*([0] + [11208]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11208])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11208]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11206]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11206]) = [1]
	$3 = ($3 << [16])
	*([0] + [11208]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11208])
	
.LABEL $label$8
	*([0] + [11208]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC _ZN8baccarat22_require_bet_rollunderEi (int_32 $0, int_32 $1)
{
	if ( ($1 <= [4]) ){ goto $label$1 }
	CALL eosio_assert([0], [2320])
	
.LABEL $label$1
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $72([2712], $0)
}

void .FUNC $76 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $77 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11096])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10904]
	$1 = (((int_32)$2 * (int_32)[12]) + [10904])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [76]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1120])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4147959502518353920)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1056])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1056])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $38(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1024])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $75([56])) + [40]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [32])
	CALL $43(($8 + [40]), ($8 + [32]))
	*($6 + [44]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $44(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $76($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [752])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [800])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [864])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $76($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $76($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $79($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $75($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $76($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [736])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [736])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [736])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1024])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $75([48])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [336])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [400])
	*($4 + [32]) = $0
	CALL $34(($8 + [32]), $4)
	*($4 + [40]) = [-1]
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [36])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $35($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $76($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [736])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [736])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $31($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [736])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [736])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}