(data (i32.const 4) "@k\00\00")
(data (i32.const 16) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 80) "invalid symbol name\00")
(data (i32.const 112) "unexpected asset symbol input\00")
(data (i32.const 144) "invalid sell eos\00")
(data (i32.const 176) "invalid sell dep\00")
(data (i32.const 208) "0 24 001234\00")
(data (i32.const 224) "0 24 104\00")
(data (i32.const 240) "0 24 30\00")
(data (i32.const 256) "active\00")
(data (i32.const 272) "eosio.token\00")
(data (i32.const 288) "transfer\00")
(data (i32.const 304) "must purchase a positive amount\00")
(data (i32.const 336) "game not find global\00")
(data (i32.const 368) "game not start\00")
(data (i32.const 384) "quantity not in range\00")
(data (i32.const 416) " \00")
(data (i32.const 432) "err memo\00")
(data (i32.const 448) "operate err\00")
(data (i32.const 464) "farmeosbank4\00")
(data (i32.const 480) "over room max limit\00")
(data (i32.const 512) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 576) "room id exist\00")
(data (i32.const 592) "room type err\00")
(data (i32.const 608) "cannot create objects in table of another contract\00")
(data (i32.const 672) "cannot pass end iterator to modify\00")
(data (i32.const 720) "object passed to modify is not in multi_index\00")
(data (i32.const 768) "cannot modify objects in table of another contract\00")
(data (i32.const 832) "updater cannot change primary key when modifying an object\00")
(data (i32.const 896) "only accepts EOS \00")
(data (i32.const 928) "not find room_id\00")
(data (i32.const 960) "room status invalied\00")
(data (i32.const 992) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1056) "amount not equal\00")
(data (i32.const 1088) "p1 payed\00")
(data (i32.const 1104) "p2 payed\00")
(data (i32.const 1120) "not find account\00")
(data (i32.const 1152) "write\00")
(data (i32.const 1168) "no seat\00")
(data (i32.const 1184) "p1 == p2\00")
(data (i32.const 1200) "p1 p2 p3 not equal\00")
(data (i32.const 1232) "error reading iterator\00")
(data (i32.const 1264) "read\00")
(data (i32.const 1280) "get\00")
(data (i32.const 1296) "farmeosubmit\00")
(data (i32.const 1312) "not find game_id\00")
(data (i32.const 1344) "status not right\00")
(data (i32.const 1392) "p1 hash exist\00")
(data (i32.const 1408) "p2 hash exist\00")
(data (i32.const 1424) "p3 hash exist\00")
(data (i32.const 1440) "multiplication overflow\00")
(data (i32.const 1472) "multiplication underflow\00")
(data (i32.const 1504) "divide by zero\00")
(data (i32.const 1520) "signed division overflow\00")
(data (i32.const 1552) "farmeosbank2\00")
(data (i32.const 1568) "buyfarm\00")
(data (i32.const 1584) "buy token\00")
(data (i32.const 1600) "cannot pass end iterator to erase\00")
(data (i32.const 1648) "cannot increment end iterator\00")
(data (i32.const 1680) "object passed to erase is not in multi_index\00")
(data (i32.const 1728) "cannot erase objects in table of another contract\00")
(data (i32.const 1792) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1856) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1920) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1968) "You win! Congratulations!\00")
(data (i32.const 2000) "farmeostaked\00")
(data (i32.const 2016) "\9a\99\99\99\99\99\b9?\9a\99\99\99\99\99\c9?333333\d3?\9a\99\99\99\99\99\d9?\00\00\00\00\00\00\e0?333333\e3?ffffff\e6?\9a\99\99\99\99\99\e9?\cd\cc\cc\cc\cc\cc\ec?")
(data (i32.const 2096) "cannot decrement end iterator when the index is empty\00")
(data (i32.const 2160) "cannot decrement iterator at beginning of index\00")
(data (i32.const 2208) "not find room id\00")
(data (i32.const 2240) "p1 seed exist\00")
(data (i32.const 2256) "p2 seed exist\00")
(data (i32.const 2272) "invalid checksum\00")
(data (i32.const 2304) "status invalied\00")
(data (i32.const 2320) " not find account\00")
(data (i32.const 2352) "payed\00")
(data (i32.const 2368) "room destory time\00")
(data (i32.const 2400) "farmeos refund\00")
(data (i32.const 2416) "0\00")
(data (i32.const 2432) "onerror\00")
(data (i32.const 2448) "eosio\00")
(data (i32.const 2464) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 10928) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 11024) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 11040) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 11056) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "assert_sha256" (func $fimport$3 (param i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "current_time" (func $fimport$5 (result i64)))
(import "env" "db_end_i64" (func $fimport$6 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_end" (func $fimport$9 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$10 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$11 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_previous" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$19 (param i32 i32)))
(import "env" "is_account" (func $fimport$20 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$24 (param i64)))
(import "env" "require_auth2" (func $fimport$25 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$26 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$27 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN14exchange_state19convert_to_exchangeERNS_9connectorEN5eosio5assetE" (func $5))
(export "_ZN14exchange_state21convert_from_exchangeERNS_9connectorEN5eosio5assetE" (func $6))
(export "_ZN14exchange_state7convertEN5eosio5assetENS0_11symbol_typeE" (func $7))
(export "_ZN14exchange_state21GetSupplyCurrentPriceEv" (func $8))
(export "_ZN10farmeosrcp8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $9))
(export "_ZN10farmeosrcp8joinroomEyN5eosio5assetEmy" (func $20))
(export "_ZN10farmeosrcp9nextroundEyN5eosio5assetEmy" (func $21))
(export "_ZN10farmeosrcp10submithashEymNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $38))
(export "_ZN10farmeosrcp12flowtobancorEyN5eosio5assetEy" (func $40))
(export "_ZN10farmeosrcp7processEm" (func $42))
(export "_ZN10farmeosrcp10get_payoutEy" (func $45))
(export "_ZN10farmeosrcp13delaytransferEmyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $46))
(export "_ZN10farmeosrcp6recordEmmymN5eosio5assetES1_y" (func $47))
(export "_ZN10farmeosrcp10submitseedEymNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $77))
(export "_ZN10farmeosrcp6insertEmmmm" (func $80))
(export "_ZN10farmeosrcp6updateEmxxm" (func $82))
(export "_ZN10farmeosrcp9leaveroomEym" (func $83))
(export "_ZN10farmeosrcp7destoryEm" (func $85))
(export "_Z1av" (func $88))
(export "apply" (func $89))
(export "malloc" (func $101))
(export "free" (func $104))
(export "pow" (func $116))
(export "sqrt" (func $117))
(export "fabs" (func $118))
(export "scalbn" (func $119))
(export "atoi" (func $120))
(export "atoll" (func $121))
(export "memchr" (func $122))
(export "memcmp" (func $123))
(export "strlen" (func $124))
(table $0 8 8 anyfunc)
(elem (i32.const 0) $125 $82 $77 $80 $9 $83 $38 $85)



void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy(($0 + [4]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy(($0 + [8]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy(($0 + [12]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [1264])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $28(*($1), ($0 + [32]))
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1264])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[8]), [1264])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [8]), [4])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7)
	$3 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $4), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [1264])
	CALL memcpy(($5 + [8]), $3, [4])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy(($0 + [24]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $114($5, ($1 + [12]))
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $114(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 $3), (int_32 ($5 + [16])), (int_32 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $106(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $106(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [16])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [80])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $99(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $100(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $106(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($6) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [20]) = $1
	*($6 + [16]) = $1
	*($6 + [24]) = ($1 + $3)
	*($6 + [32]) = ($6 + [16])
	*($6 + [40]) = $6
	CALL $98(($6 + [40]), ($6 + [32]))
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($6 + [12]))
	$7 = *(($6 + [8]))
	$0 = *($6 + [4])
	$4 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $4), (int_32 $0), (int_32 $7), (int_32 $3), (int_32 $5))
	*([0] + [4]) = ($6 + [48])
	return [1]
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [1264])
	CALL memcpy(($3 + [8]), $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[3]), [1264])
	CALL memcpy((($3 + [8]) + [8]), $2, [4])
	*($3 + [52]) = ($1 + [12])
	CALL $28(($3 + [48]), (($3 + [8]) + [12]))
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $97(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL $106(*(($3 + [28])))
	
.LABEL $label$6
	*([0] + [4]) = ($3 + [64])
	return [1]
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($7 + [8]) = (int_64)0
	*($7) = [0]
	*($7 + [16]) = (int_64)0
	*($7 + [24]) = [0]
	*($7 + [36]) = $1
	*($7 + [32]) = $1
	*($7 + [40]) = ($1 + $3)
	*($7 + [48]) = ($7 + [32])
	*($7 + [56]) = $7
	CALL $96(($7 + [56]), ($7 + [48]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($7 + [24]))
	$5 = *(($7 + [16]))
	$4 = *(($7 + [8]))
	$8 = *($7)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $8), (int_32 $4), (int_64 $5), (int_64 $3), (int_32 $6))
	*([0] + [4]) = ($7 + [64])
	return [1]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $105($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_64 .FUNC atoll (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$5 = (int_64)0
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$5 = (int_64)0
	
.LOOP $label$7:
	$5 = (int_64))(((int_64)$5 * (int_64)10) - (CASTING int_64)(int_32 $3))
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $5 ? (int_64))((int_64)0 - $5) : $2 )
}

int_32 .FUNC atoi (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$1 = [1]
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$1 = [0]
	
.LABEL $label$2
	$2 = [0]
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $3)
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $1 )
}

void .FUNC _ZN10farmeosrcp10submithashEymNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [64])
	*([0] + [4]) = $14
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1296]
	$11 = (int_64)0
	
.LOOP $label$1:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($11)
	$5 = *(($0 + [72]))
	$13 = *(($0 + [76]))
	if ( ((int_32)$13 == (int_32)$5) ){ goto $label$5 }
	$8 = ($13 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$6:
	if ( ((int_32)*(*($8)) == (int_32)$2) ){ goto $label$5 }
	$13 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = ($0 + [48])
	if ( ((int_32)$13 == (int_32)$5) ){ goto $label$8 }
	$8 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [204]) == (int_32)$4), [512])
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	$13 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-4816278077707386880, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $14($4, $13)
	CALL eosio_assert(((int_32)*($8 + [204]) == (int_32)$4), [512])
	
.LABEL $label$7
	$2 = [0]
	$13 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($13, [1312])
	CALL eosio_assert(((int_32)*($8 + [144]) == (int_32)[2]), [1344])
	$6 = ($8 + [56])
	CALL $114(($14 + [48]), $6)
	$5 = ($8 + [68])
	CALL $114(($14 + [32]), $5)
	$7 = ($8 + [80])
	CALL $114(($14 + [16]), $7)
	if ( ((int_64)*($8 + [8]) != (int_64)$1) ){ goto $label$10 }
	$5 = *($6)
	$7 = CALL strlen([1376])
	if ( ((int_32)$7 != (int_32)( *(($8 + [60])) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$11 }
	$2 = (CALL $112($6, [0], [-1], [1376], $7) == 0)
	
.LABEL $label$11
	CALL eosio_assert($2, [1392])
	CALL $108(($14 + [48]), $3)
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_64)*($8 + [16]) != (int_64)$1) ){ goto $label$12 }
	$2 = [0]
	$6 = *(($8 + [68]))
	$7 = CALL strlen([1376])
	if ( ((int_32)$7 != (int_32)( *(($8 + [72])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$13 }
	$2 = (CALL $112($5, [0], [-1], [1376], $7) == 0)
	
.LABEL $label$13
	CALL eosio_assert($2, [1408])
	CALL $108(($14 + [32]), $3)
	goto $label$9 
	
.LABEL $label$12
	if ( ((int_64)*($8 + [24]) != (int_64)$1) ){ goto $label$9 }
	$2 = [0]
	$6 = *(($8 + [80]))
	$5 = CALL strlen([1376])
	if ( ((int_32)$5 != (int_32)( *(($8 + [84])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$14 }
	$2 = (CALL $112($7, [0], [-1], [1376], $5) == 0)
	
.LABEL $label$14
	CALL eosio_assert($2, [1424])
	CALL $108(($14 + [16]), $3)
	
.LABEL $label$9
	$10 = *($0)
	*($14 + [4]) = ($14 + [32])
	*($14) = ($14 + [48])
	*($14 + [8]) = ($14 + [16])
	CALL eosio_assert($13, [672])
	CALL $39($4, $8, $10, $14)
	if ( ((*($14 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL $106(*($14 + [24]))
	
.LABEL $label$15
	if ( ((*($14 + [32]) & [1]) == 0) ){ goto $label$16 }
	CALL $106(*($14 + [40]))
	
.LABEL $label$16
	if ( ((*($14 + [48]) & [1]) == 0) ){ goto $label$17 }
	CALL $106(*($14 + [56]))
	
.LABEL $label$17
	*([0] + [4]) = ($14 + [64])
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [92]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1920])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4816270321298804736)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1856])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1856])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $48(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1232])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $105([104])
	$6 = CALL $53($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [92])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $52(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $106($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $125 ()
{
	(unreachable)
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_64 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_64 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	$40 = (*([0] + [4]) - [752])
	$39 = $40
	*([0] + [4]) = $40
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [720])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [768])
	$6 = ($1 + [92])
	$4 = *($1)
	$5 = *($3 + [4])
	if ( (*($1 + [92]) & [1]) ){ goto $label$2 }
	$37 = ($6 + [1])
	goto $label$1 
	
.LABEL $label$2
	$37 = *(($1 + [100]))
	
.LABEL $label$1
	$8 = ($1 + [104])
	$37 = *($37)
	if ( (*($1 + [104]) & [1]) ){ goto $label$4 }
	$14 = ($8 + [1])
	goto $label$3 
	
.LABEL $label$4
	$14 = *(($1 + [112]))
	
.LABEL $label$3
	$14 = *($14)
	$38 = [0]
	$10 = [0]
	if ( ((int_32)*($1 + [4]) != (int_32)[3]) ){ goto $label$5 }
	if ( (*($1 + [116]) & [1]) ){ goto $label$7 }
	$15 = (($1 + [116]) + [1])
	goto $label$6 
	
.LABEL $label$7
	$15 = *(($1 + [124]))
	
.LABEL $label$6
	$10 = (*($15) + [-48])
	
.LABEL $label$5
	$7 = ($37 + [-48])
	$9 = ($14 + [-48])
	$37 = *(*($3) + [4])
	$14 = *($37 + [4])
	if ( ((int_32)$14 == (int_32)[3]) ){ goto $label$25 }
	$36 = (int_64)0
	if ( ((int_32)$14 != (int_32)[2]) ){ goto $label$26 }
	if ( $7 ){ goto $label$24 }
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$24 }
	
.LABEL $label$26
	$34 = [0]
	goto $label$14 
	
.LABEL $label$25
	$35 = [0]
	*(($39 + [288])) = [0]
	*($39 + [272]) = (int_64)-1
	$36 = (int_64)0
	*($39 + [280]) = (int_64)0
	$12 = *($5)
	*($39 + [256]) = $12
	*($39 + [264]) = $12
	$37 = CALL db_find_i64($12, $12, (int_64)-5031952737181368320, (CASTING uint_64)(uint_32 ((((int_32)$9 * (int_32)[10]) + ((int_32)$7 * (int_32)[100])) + $10)))
	if ( ((int_32)$37 < (int_32)[0]) ){ goto $label$23 }
	$37 = CALL $44(($39 + [256]), $37)
	CALL eosio_assert(((int_32)*($37 + [16]) == (int_32)($39 + [256])), [512])
	$38 = *($37 + [12])
	$34 = *($37 + [8])
	$32 = [0]
	$35 = *($37 + [4])
	if ( ((int_32)$35 == (int_32)[2]) ){ goto $label$21 }
	if ( ((int_32)$35 != (int_32)[1]) ){ goto $label$27 }
	$32 = [1]
	
.LABEL $label$27
	$36 = (int_64)0
	$37 = ((((int_32)$38 == (int_32)[1]) + ((int_32)$34 == (int_32)[1])) + $32)
	if ( ((int_32)$37 == (int_32)[3]) ){ goto $label$20 }
	if ( ((int_32)$37 != (int_32)[2]) ){ goto $label$28 }
	$36 = (int_64)15
	
.LABEL $label$28
	$36 = ( ( (int_64)30 ? $36 : ((int_32)$37 == (int_32)[1]) ) ? (int_64)0 : $37 )
	$33 = [0]
	$32 = [0]
	$15 = *($39 + [280])
	if ( $15 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$24
	if ( ($7 == 0) ){ goto $label$22 }
	if ( ($9 == 0) ){ goto $label$22 }
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$15 }
	$38 = [0]
	$34 = [2]
	$35 = [2]
	goto $label$17 
	
.LABEL $label$23
	$32 = [1]
	$33 = [0]
	$38 = [0]
	$34 = [0]
	$15 = *($39 + [280])
	if ( $15 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$22
	$34 = ((uint_32)$7 <= (uint_32)$9)
	$35 = ((uint_32)$7 > (uint_32)$9)
	$36 = (int_64)20
	goto $label$13 
	
.LABEL $label$21
	$33 = [1]
	$35 = [2]
	$15 = *($39 + [280])
	if ( $15 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$33 = [0]
	$32 = [1]
	$15 = *($39 + [280])
	if ( ($15 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$16 = ($39 + [284])
	$37 = *($16)
	if ( ((int_32)$37 == (int_32)$15) ){ goto $label$30 }
	
.LOOP $label$31:
	$37 = ($37 + [-24])
	$14 = *($37)
	*($37) = [0]
	if ( ($14 == 0) ){ goto $label$32 }
	CALL $106($14)
	
.LABEL $label$32
	if ( ((int_32)$15 != (int_32)$37) ){ goto $label$31 }
	$37 = *(($39 + [280]))
	goto $label$29 
	
.LABEL $label$30
	$37 = $15
	
.LABEL $label$29
	*($16) = $15
	CALL $106($37)
	
.LABEL $label$18
	if ( ($32 == 0) ){ goto $label$33 }
	$9 = ($1 + [160])
	$34 = ($1 + [156])
	$38 = ($1 + [152])
	$35 = ($1 + [136])
	$7 = ($1 + [116])
	$3 = ($1 + [80])
	$5 = ($1 + [68])
	$15 = ($1 + [56])
	goto $label$11 
	
.LABEL $label$33
	if ( ($33 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	*($1 + [144]) = [2]
	goto $label$12 
	
.LABEL $label$16
	$37 = *(*($3) + [4])
	goto $label$13 
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)[1]) ){ goto $label$35 }
	if ( ((int_32)$9 == (int_32)[2]) ){ goto $label$34 }
	
.LABEL $label$35
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$36 }
	if ( ((int_32)$9 == (int_32)[3]) ){ goto $label$34 }
	
.LABEL $label$36
	$36 = (int_64)20
	$38 = [0]
	$34 = [1]
	if ( ((int_32)$7 != (int_32)[3]) ){ goto $label$14 }
	if ( ((int_32)$9 != (int_32)[1]) ){ goto $label$14 }
	
.LABEL $label$34
	$35 = [1]
	$36 = (int_64)20
	$34 = [0]
	$38 = [0]
	goto $label$13 
	
.LABEL $label$14
	$35 = [0]
	
.LABEL $label$13
	$12 = *($37 + [184])
	CALL __multi3(($39 + [240]), $12, (int_64)$12 >> (int_64)63), ((int_64)$36 & (int_64)4294967295), (int_64)0)
	$11 = *(($37 + [192]))
	$36 = *(($39 + [248]))
	$12 = *($39 + [240])
	CALL eosio_assert(( (uint_64)($12 <= (int_64)4611686018427387904) ? ((int_64)$36 < (int_64)0) : (int_64)($36 == 0) ), [1440])
	CALL eosio_assert(( ((uint_64)$12 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$36 > (int_64)-1) : ((int_64)$36 == (int_64)-1) ), [1472])
	if ( ($35 == 0) ){ goto $label$41 }
	$36 = $12
	if ( ((int_32)$35 != (int_32)[1]) ){ goto $label$37 }
	$36 = (Rounds 0)(CALL _ZN10farmeosrcp10get_payoutEy($39, *($1 + [8])))
	CALL __multi3(($39 + [224]), $36, (int_64)$36 >> (int_64)63), $12, (int_64)$12 >> (int_64)63))
	$37 = *(*($3) + [4])
	$13 = *($37 + [8])
	$15 = *($37)
	$36 = *((($39 + [224]) + [8]))
	$31 = *($39 + [224])
	CALL eosio_assert(( (uint_64)($31 <= (int_64)4611686018427387904) ? ((int_64)$36 < (int_64)0) : (int_64)($36 == 0) ), [1440])
	CALL eosio_assert(( ((uint_64)$31 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$36 > (int_64)-1) : ((int_64)$36 == (int_64)-1) ), [1472])
	*($39 + [656]) = $11
	CALL eosio_assert([1], [1504])
	CALL eosio_assert([1], [1520])
	*((($39 + [632]) + [8])) = [0]
	*($39 + [648]) = ((int_64)$31 / (int_64)1000)
	*($39 + [632]) = (int_64)0
	$37 = CALL strlen([1376])
	if ( ((uint_32)$37 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$37 >= (uint_32)[11]) ){ goto $label$40 }
	*($39 + [632]) = ($37 << [1])
	$14 = (($39 + [632]) | [1])
	if ( $37 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	CALL eosio_assert([1], [16])
	$36 = (uint_64)$11 >> (uint_64)(int_64)8)
	$37 = [0]
	
.LOOP $label$44:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $36) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$36 = (uint_64)$36 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$36) & (int_64)255) != (int_64)0) ){ goto $label$45 }
	
.LOOP $label$46:
	$36 = (uint_64)$36 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$36) & (int_64)255) != (int_64)0) ){ goto $label$43 }
	$37 = ($37 + [1])
	if ( ((int_32)$37 < (int_32)[7]) ){ goto $label$46 }
	
.LABEL $label$45
	$14 = [1]
	$37 = ($37 + [1])
	if ( ((int_32)$37 < (int_32)[7]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	$14 = [0]
	
.LABEL $label$42
	CALL eosio_assert($14, [80])
	$36 = (int_64)0
	goto $label$37 
	
.LABEL $label$40
	$32 = (($37 + [16]) & [-16])
	$14 = CALL $105($32)
	*($39 + [632]) = ($32 | [1])
	*($39 + [640]) = $14
	*($39 + [636]) = $37
	
.LABEL $label$39
	CALL memcpy($14, [1376], $37)
	
.LABEL $label$38
	*(($14 + $37)) = [0]
	*((($39 + [208]) + [8])) = *((($39 + [648]) + [8]))
	*($39 + [208]) = *($39 + [648])
	CALL _ZN10farmeosrcp13delaytransferEmyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($5, $15, $13, ($39 + [208]), ($39 + [632]))
	$36 = $12
	if ( ((*($39 + [632]) & [1]) == 0) ){ goto $label$37 }
	CALL $106(*($39 + [640]))
	$36 = $12
	
.LABEL $label$37
	$37 = *(*($3 + [8]))
	*(($39 + [628])) = *(($1 + [196]))
	*(($14 = (($39 + [616]) + [8]))) = *(($1 + [192]))
	*($39 + [620]) = *(($1 + [188]))
	*($39 + [616]) = *($1 + [184])
	$31 = *($1 + [8])
	$15 = *($1 + [200])
	*($39 + [600]) = $36
	*($39 + [608]) = $11
	*((($39 + [192]) + [8])) = *($14)
	*($39 + [192]) = *($39 + [616])
	*((($39 + [176]) + [8])) = *($39 + [608])
	*($39 + [176]) = *($39 + [600])
	CALL _ZN10farmeosrcp6recordEmmymN5eosio5assetES1_y($5, $37, $15, $31, $7, ($39 + [192]), ($39 + [176]), $36)
	if ( ($34 == 0) ){ goto $label$51 }
	$36 = $12
	if ( ((int_32)$34 != (int_32)[1]) ){ goto $label$47 }
	$36 = (Rounds 0)(CALL _ZN10farmeosrcp10get_payoutEy($39, *($1 + [16])))
	CALL __multi3(($39 + [160]), $36, (int_64)$36 >> (int_64)63), $12, (int_64)$12 >> (int_64)63))
	$37 = *(*($3) + [4])
	$13 = *($37 + [16])
	$15 = *($37)
	$36 = *((($39 + [160]) + [8]))
	$31 = *($39 + [160])
	CALL eosio_assert(( (uint_64)($31 <= (int_64)4611686018427387904) ? ((int_64)$36 < (int_64)0) : (int_64)($36 == 0) ), [1440])
	CALL eosio_assert(( ((uint_64)$31 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$36 > (int_64)-1) : ((int_64)$36 == (int_64)-1) ), [1472])
	*($39 + [592]) = $11
	CALL eosio_assert([1], [1504])
	CALL eosio_assert([1], [1520])
	*((($39 + [568]) + [8])) = [0]
	*($39 + [584]) = ((int_64)$31 / (int_64)1000)
	*($39 + [568]) = (int_64)0
	$37 = CALL strlen([1376])
	if ( ((uint_32)$37 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$37 >= (uint_32)[11]) ){ goto $label$50 }
	*($39 + [568]) = ($37 << [1])
	$14 = (($39 + [568]) | [1])
	if ( $37 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	CALL eosio_assert([1], [16])
	$36 = (uint_64)$11 >> (uint_64)(int_64)8)
	$37 = [0]
	
.LOOP $label$54:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $36) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$53 }
	$36 = (uint_64)$36 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$36) & (int_64)255) != (int_64)0) ){ goto $label$55 }
	
.LOOP $label$56:
	$36 = (uint_64)$36 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$36) & (int_64)255) != (int_64)0) ){ goto $label$53 }
	$37 = ($37 + [1])
	if ( ((int_32)$37 < (int_32)[7]) ){ goto $label$56 }
	
.LABEL $label$55
	$14 = [1]
	$37 = ($37 + [1])
	if ( ((int_32)$37 < (int_32)[7]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	$14 = [0]
	
.LABEL $label$52
	CALL eosio_assert($14, [80])
	$36 = (int_64)0
	goto $label$47 
	
.LABEL $label$50
	$32 = (($37 + [16]) & [-16])
	$14 = CALL $105($32)
	*($39 + [568]) = ($32 | [1])
	*($39 + [576]) = $14
	*($39 + [572]) = $37
	
.LABEL $label$49
	CALL memcpy($14, [1376], $37)
	
.LABEL $label$48
	*(($14 + $37)) = [0]
	*((($39 + [144]) + [8])) = *((($39 + [584]) + [8]))
	*($39 + [144]) = *($39 + [584])
	CALL _ZN10farmeosrcp13delaytransferEmyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($5, $15, $13, ($39 + [144]), ($39 + [568]))
	$36 = $12
	if ( ((*($39 + [568]) & [1]) == 0) ){ goto $label$47 }
	CALL $106(*($39 + [576]))
	$36 = $12
	
.LABEL $label$47
	$37 = *(*(($3 + [8])))
	$15 = ($1 + [184])
	$14 = ($15 + [12])
	*((($39 + [552]) + [12])) = *($14)
	$32 = ($15 + [8])
	*(($16 = (($39 + [552]) + [8]))) = *($32)
	$33 = ($15 + [4])
	*($39 + [556]) = *($33)
	*($39 + [552]) = *($15)
	$17 = *(($1 + [200]))
	$31 = *($1 + [16])
	*($39 + [536]) = $36
	*($39 + [544]) = $11
	*((($39 + [128]) + [8])) = *($16)
	*($39 + [128]) = *($39 + [552])
	*((($39 + [112]) + [8])) = *($39 + [544])
	*($39 + [112]) = *($39 + [536])
	CALL _ZN10farmeosrcp6recordEmmymN5eosio5assetES1_y($5, $37, $17, $31, $9, ($39 + [128]), ($39 + [112]), $36)
	$16 = ($1 + [4])
	if ( ((int_32)*($16) != (int_32)[3]) ){ goto $label$57 }
	if ( ($38 == 0) ){ goto $label$62 }
	if ( ((int_32)$38 != (int_32)[1]) ){ goto $label$58 }
	$36 = (Rounds 0)(CALL _ZN10farmeosrcp10get_payoutEy($39, *($1 + [24])))
	CALL __multi3(($39 + [96]), $36, (int_64)$36 >> (int_64)63), $12, (int_64)$12 >> (int_64)63))
	$37 = *(*($3) + [4])
	$13 = *($37 + [24])
	$18 = *($37)
	$36 = *((($39 + [96]) + [8]))
	$31 = *($39 + [96])
	CALL eosio_assert(( (uint_64)($31 <= (int_64)4611686018427387904) ? ((int_64)$36 < (int_64)0) : (int_64)($36 == 0) ), [1440])
	CALL eosio_assert(( ((uint_64)$31 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$36 > (int_64)-1) : ((int_64)$36 == (int_64)-1) ), [1472])
	*($39 + [528]) = $11
	CALL eosio_assert([1], [1504])
	CALL eosio_assert([1], [1520])
	*((($39 + [504]) + [8])) = [0]
	*($39 + [520]) = ((int_64)$31 / (int_64)1000)
	*($39 + [504]) = (int_64)0
	$37 = CALL strlen([1376])
	if ( ((uint_32)$37 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$37 >= (uint_32)[11]) ){ goto $label$61 }
	*($39 + [504]) = ($37 << [1])
	$17 = (($39 + [504]) | [1])
	if ( $37 ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$62
	CALL eosio_assert([1], [16])
	$36 = (uint_64)$11 >> (uint_64)(int_64)8)
	$37 = [0]
	
.LOOP $label$65:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $36) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$64 }
	$36 = (uint_64)$36 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$36) & (int_64)255) != (int_64)0) ){ goto $label$66 }
	
.LOOP $label$67:
	$36 = (uint_64)$36 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$36) & (int_64)255) != (int_64)0) ){ goto $label$64 }
	$37 = ($37 + [1])
	if ( ((int_32)$37 < (int_32)[7]) ){ goto $label$67 }
	
.LABEL $label$66
	$17 = [1]
	$37 = ($37 + [1])
	if ( ((int_32)$37 < (int_32)[7]) ){ goto $label$65 }
	goto $label$63 
	
.LABEL $label$64
	$17 = [0]
	
.LABEL $label$63
	CALL eosio_assert($17, [80])
	$12 = (int_64)0
	goto $label$58 
	
.LABEL $label$61
	$19 = (($37 + [16]) & [-16])
	$17 = CALL $105($19)
	*($39 + [504]) = ($19 | [1])
	*($39 + [512]) = $17
	*($39 + [508]) = $37
	
.LABEL $label$60
	CALL memcpy($17, [1376], $37)
	
.LABEL $label$59
	*(($17 + $37)) = [0]
	*((($39 + [80]) + [8])) = *((($39 + [520]) + [8]))
	*($39 + [80]) = *($39 + [520])
	CALL _ZN10farmeosrcp13delaytransferEmyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($5, $18, $13, ($39 + [80]), ($39 + [504]))
	if ( ((*($39 + [504]) & [1]) == 0) ){ goto $label$58 }
	CALL $106(*($39 + [512]))
	
.LABEL $label$58
	$37 = *(*(($3 + [8])))
	*((($39 + [488]) + [12])) = *(($15 + [12]))
	*(($17 = (($39 + [488]) + [8]))) = *(($15 + [8]))
	*($39 + [492]) = *(($15 + [4]))
	*($39 + [488]) = *($15)
	$18 = *(($1 + [200]))
	$36 = *($1 + [24])
	*($39 + [472]) = $12
	*($39 + [480]) = $11
	*((($39 + [64]) + [8])) = *($17)
	*($39 + [64]) = *($39 + [488])
	*((($39 + [48]) + [8])) = *($39 + [480])
	*($39 + [48]) = *($39 + [472])
	CALL _ZN10farmeosrcp6recordEmmymN5eosio5assetES1_y($5, $37, $18, $36, $10, ($39 + [64]), ($39 + [48]), $36)
	
.LABEL $label$57
	*((($39 + [456]) + [12])) = *($14)
	*(($37 = (($39 + [456]) + [8]))) = *($32)
	*($39 + [456]) = *($15)
	*($39 + [460]) = *($33)
	$36 = *(($1 + [8]))
	$12 = *($1 + [32])
	*((($39 + [32]) + [8])) = *($37)
	*($39 + [32]) = *($39 + [456])
	CALL _ZN10farmeosrcp12flowtobancorEyN5eosio5assetEy($5, $36, ($39 + [32]), $12)
	*((($39 + [440]) + [12])) = *($14)
	*(($37 = (($39 + [440]) + [8]))) = *($32)
	*($39 + [444]) = *($33)
	*($39 + [440]) = *($15)
	$36 = *(($1 + [16]))
	$12 = *($1 + [40])
	*((($39 + [16]) + [8])) = *($37)
	*($39 + [16]) = *($39 + [440])
	CALL _ZN10farmeosrcp12flowtobancorEyN5eosio5assetEy($5, $36, ($39 + [16]), $12)
	if ( ((int_32)*($16) != (int_32)[3]) ){ goto $label$68 }
	*((($39 + [424]) + [12])) = *(($15 + [12]))
	*(($37 = (($39 + [424]) + [8]))) = *(($15 + [8]))
	*($39 + [424]) = *($15)
	*($39 + [428]) = *(($15 + [4]))
	$36 = *($1 + [24])
	$12 = *($1 + [48])
	*(($39 + [8])) = *($37)
	*($39) = *($39 + [424])
	CALL _ZN10farmeosrcp12flowtobancorEyN5eosio5assetEy($5, $36, $39, $12)
	
.LABEL $label$68
	*($1 + [144]) = [4]
	$37 = [0]
	*($1 + [176]) = [0]
	*($1 + [178]) = [0]
	*($1 + [164]) = $7
	*($1 + [168]) = $9
	*($1 + [172]) = $10
	$7 = [1]
	*(($14 = ($1 + [200]))) = (*($14) + [1])
	*(($39 + [416])) = [0]
	$36 = *($5)
	*($39 + [392]) = $36
	*($39 + [384]) = $36
	*($39 + [400]) = (int_64)-1
	*($39 + [408]) = (int_64)0
	$14 = CALL db_lowerbound_i64($36, $36, (int_64)-4816270321298804736, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$69 }
	CALL $48(($39 + [384]), $14)
	*($39 + [380]) = [0]
	*($39 + [376]) = ($39 + [384])
	$14 = *(*(CALL $49(($39 + [376])) + [4]))
	$37 = *(CALL $48(($39 + [384]), CALL $fimport$13(*($39 + [384]), *(($39 + [392])), (int_64)-4816270321298804736, (int_64)0)))
	$7 = ($14 + [1])
	
.LABEL $label$69
	if ( (($7 - $37) <= [201]) ){ goto $label$70 }
	$37 = [0]
	$14 = CALL db_lowerbound_i64(*($39 + [384]), *(($39 + [392])), (int_64)-4816270321298804736, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$71 }
	$37 = CALL $48(($39 + [384]), $14)
	
.LABEL $label$71
	$14 = ((int_32)$37 != (int_32)[0])
	CALL eosio_assert($14, [1600])
	CALL eosio_assert($14, [1648])
	$14 = CALL db_next_i64(*($37 + [92]), ($39 + [256]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$72 }
	CALL $48(($39 + [384]), $14)
	
.LABEL $label$72
	CALL $50(($39 + [384]), $37)
	
.LABEL $label$70
	$9 = *(($3 + [8]))
	$12 = *($5)
	CALL eosio_assert(((int_64)*($39 + [384]) == (int_64)CALL $fimport$4()), [608])
	*(($14 = CALL $105([104])) + [80]) = (int_64)1398362884
	*($14 + [72]) = (int_64)0
	CALL eosio_assert([1], [16])
	$3 = ($14 + [72])
	$36 = (int_64)5462355
	$37 = [0]
	
.LOOP $label$75:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $36) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$74 }
	$36 = (uint_64)$36 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$36) & (int_64)255) != (int_64)0) ){ goto $label$76 }
	
.LOOP $label$77:
	$36 = (uint_64)$36 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$36) & (int_64)255) != (int_64)0) ){ goto $label$74 }
	$37 = ($37 + [1])
	if ( ((int_32)$37 < (int_32)[7]) ){ goto $label$77 }
	
.LABEL $label$76
	$5 = [1]
	$37 = ($37 + [1])
	if ( ((int_32)$37 < (int_32)[7]) ){ goto $label$75 }
	goto $label$73 
	
.LABEL $label$74
	$5 = [0]
	
.LABEL $label$73
	CALL eosio_assert($5, [80])
	*($14 + [88]) = ($39 + [384])
	*($14 + [60]) = *($9)
	*($14 + [64]) = *(($1 + [200]))
	*($14 + [8]) = *(($1 + [8]))
	*($14 + [16]) = *(($1 + [16]))
	*($14 + [24]) = *($1 + [24])
	*($14 + [36]) = *(($1 + [164]))
	*($14 + [40]) = *(($1 + [168]))
	*($14 + [44]) = *(($1 + [172]))
	*($14 + [48]) = $35
	*($14 + [52]) = $35
	*(($3 + [8])) = *(($15 + [8]))
	*($3) = *($15)
	$36 = CALL current_time()
	*($14) = $7
	*($14 + [68]) = ((uint_64)$36 / (uint_64)(int_64)1000000)
	*($14 + [32]) = *(($1 + [4]))
	*($39 + [672]) = (($39 + [256]) + [84])
	*($39 + [668]) = ($39 + [256])
	*($39 + [664]) = ($39 + [256])
	*($39 + [680]) = ($39 + [664])
	*($39 + [692]) = ($14 + [8])
	*($39 + [688]) = $14
	*($39 + [696]) = ($14 + [16])
	*($39 + [700]) = ($14 + [24])
	*($39 + [704]) = ($14 + [32])
	*($39 + [708]) = ($14 + [36])
	*($39 + [712]) = ($14 + [40])
	*($39 + [716]) = ($14 + [44])
	*($39 + [720]) = ($14 + [48])
	*($39 + [724]) = ($14 + [52])
	*($39 + [728]) = ($14 + [56])
	*($39 + [732]) = ($14 + [60])
	*($39 + [736]) = ($14 + [64])
	*($39 + [740]) = ($14 + [68])
	*($39 + [744]) = $3
	CALL $51(($39 + [688]), ($39 + [680]))
	$36 = *($14)
	$15 = CALL db_store_i64(*((($39 + [384]) + [8])), (int_64)-4816270321298804736, $12, $36, ($39 + [256]), [84])
	*($14 + [92]) = $15
	$37 = (($39 + [384]) + [16])
	if ( (uint_64)($36 <= *($37)) ){ goto $label$78 }
	*($37) = ((int_64)$36 + (int_64)1)
	
.LABEL $label$78
	*($39 + [688]) = $14
	$36 = *($14)
	*($39 + [256]) = $36
	*($39 + [664]) = $15
	$5 = ($39 + [412])
	$37 = *($5)
	if ( ((uint_32)$37 >= (uint_32)*((($39 + [384]) + [32]))) ){ goto $label$80 }
	*($37 + [8]) = $36
	*($37 + [16]) = $15
	*($39 + [688]) = [0]
	*($37) = $14
	*($5) = ($37 + [24])
	goto $label$79 
	
.LABEL $label$80
	CALL $52(($39 + [408]), ($39 + [688]), ($39 + [256]), ($39 + [664]))
	
.LABEL $label$79
	$37 = *($39 + [688])
	*($39 + [688]) = [0]
	if ( ($37 == 0) ){ goto $label$81 }
	CALL $106($37)
	
.LABEL $label$81
	$15 = *($39 + [408])
	if ( ($15 == 0) ){ goto $label$12 }
	$5 = ($39 + [412])
	$37 = *($5)
	if ( ((int_32)$37 == (int_32)$15) ){ goto $label$83 }
	
.LOOP $label$84:
	$37 = ($37 + [-24])
	$14 = *($37)
	*($37) = [0]
	if ( ($14 == 0) ){ goto $label$85 }
	CALL $106($14)
	
.LABEL $label$85
	if ( ((int_32)$15 != (int_32)$37) ){ goto $label$84 }
	$37 = *(($39 + [408]))
	goto $label$82 
	
.LABEL $label$83
	$37 = $15
	
.LABEL $label$82
	*($5) = $15
	CALL $106($37)
	
.LABEL $label$12
	$15 = ($1 + [56])
	CALL $111($15, [1376])
	$5 = ($1 + [68])
	CALL $111($5, [1376])
	$3 = ($1 + [80])
	CALL $111($3, [1376])
	CALL $111($6, [1376])
	CALL $111($8, [1376])
	$7 = ($1 + [116])
	CALL $111($7, [1376])
	*($1 + [156]) = $34
	*($1 + [152]) = $35
	*($1 + [160]) = $38
	*($1 + [136]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)60) & (int_64)4294967295)
	$35 = ($1 + [136])
	$9 = ($1 + [160])
	$34 = ($1 + [156])
	$38 = ($1 + [152])
	
.LABEL $label$11
	CALL eosio_assert(((int_32)$4 == (int_32)*($1)), [832])
	*($39 + [384]) = [0]
	*($39 + [688]) = ($39 + [384])
	$10 = ($1 + [4])
	*($39 + [260]) = $10
	*($39 + [256]) = $1
	$32 = ($1 + [8])
	*($39 + [264]) = $32
	$33 = ($1 + [16])
	*($39 + [268]) = $33
	$16 = ($1 + [24])
	*($39 + [272]) = $16
	$17 = ($1 + [32])
	*($39 + [276]) = $17
	$18 = ($1 + [40])
	*($39 + [280]) = $18
	$19 = ($1 + [48])
	*($39 + [284]) = $19
	*($39 + [288]) = $15
	*($39 + [292]) = $5
	*($39 + [296]) = $3
	*($39 + [300]) = $6
	*($39 + [304]) = $8
	*($39 + [308]) = $7
	$20 = ($1 + [128])
	*($39 + [312]) = $20
	*($39 + [316]) = $35
	$21 = ($1 + [144])
	*($39 + [320]) = $21
	$22 = ($1 + [148])
	*($39 + [324]) = $22
	*($39 + [328]) = $38
	*($39 + [332]) = $34
	*($39 + [336]) = $9
	$23 = ($1 + [164])
	*($39 + [340]) = $23
	$24 = ($1 + [168])
	*($39 + [344]) = $24
	$25 = ($1 + [172])
	*($39 + [348]) = $25
	$26 = ($1 + [176])
	*($39 + [352]) = $26
	$27 = ($1 + [177])
	*($39 + [356]) = $27
	$28 = ($1 + [178])
	*($39 + [360]) = $28
	$29 = ($1 + [184])
	*($39 + [364]) = $29
	$30 = ($1 + [200])
	*($39 + [368]) = $30
	CALL $23(($39 + [256]), ($39 + [688]))
	$14 = *($39 + [384])
	if ( ($14 <= [513]) ){ goto $label$87 }
	$37 = CALL malloc($14)
	goto $label$86 
	
.LABEL $label$87
	$37 = ($40 - (($14 + [15]) & [-16]))
	*([0] + [4]) = $37
	
.LABEL $label$86
	$36 = (CASTING uint_64)(uint_32 $4)
	*($39 + [692]) = $37
	*($39 + [688]) = $37
	*($39 + [696]) = ($37 + $14)
	*($39 + [384]) = ($39 + [688])
	*($39 + [260]) = $10
	*($39 + [264]) = $32
	*($39 + [268]) = $33
	*($39 + [272]) = $16
	*($39 + [276]) = $17
	*($39 + [280]) = $18
	*($39 + [256]) = $1
	*($39 + [284]) = $19
	*($39 + [288]) = $15
	*($39 + [292]) = $5
	*($39 + [296]) = $3
	*($39 + [300]) = $6
	*($39 + [304]) = $8
	*($39 + [308]) = $7
	*($39 + [312]) = $20
	*($39 + [316]) = $35
	*($39 + [320]) = $21
	*($39 + [324]) = $22
	*($39 + [328]) = $38
	*($39 + [332]) = $34
	*($39 + [336]) = $9
	*($39 + [340]) = $23
	*($39 + [344]) = $24
	*($39 + [348]) = $25
	*($39 + [352]) = $26
	*($39 + [356]) = $27
	*($39 + [360]) = $28
	*($39 + [364]) = $29
	*($39 + [368]) = $30
	CALL $24(($39 + [256]), ($39 + [384]))
	CALL db_update_i64(*($1 + [208]), $2, $37, $14)
	if ( ($14 <= [513]) ){ goto $label$88 }
	CALL free($37)
	
.LABEL $label$88
	if ( (uint_64)($36 <= *($0 + [16])) ){ goto $label$89 }
	*(($0 + [16])) = ((int_64)$36 + (int_64)1)
	
.LABEL $label$89
	*([0] + [4]) = ($39 + [752])
	return (unreachable)
	
.LABEL $label$10
	CALL $107(($39 + [632]))
	
.LABEL $label$9
	CALL $107(($39 + [568]))
	
.LABEL $label$8
	CALL $107(($39 + [504]))
	(unreachable)
	(unreachable)
}

void .FUNC _ZN10farmeosrcp7processEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	*($8 + [28]) = $1
	$2 = *(($0 + [72]))
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_32)*(*($6)) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [48])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [204]) == (int_32)$6), [512])
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-4816278077707386880, (CASTING uint_64)(uint_32 $1))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL $14($6, $4)
	CALL eosio_assert(((int_32)*($4 + [204]) == (int_32)$6), [512])
	goto $label$3 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$3
	*($8 + [20]) = $4
	*($8 + [16]) = $6
	$5 = *($0)
	*($8 + [4]) = $0
	*($8) = ($8 + [16])
	*($8 + [8]) = ($8 + [28])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [672])
	CALL $43($6, $4, $5, $8)
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1152])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC _ZN10farmeosrcp12flowtobancorEyN5eosio5assetEy (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [160])
	*([0] + [4]) = $15
	$10 = (int_64)0
	$12 = *($2)
	CALL __multi3(($15 + [8]), $12, (int_64)$12 >> (int_64)63), (int_64)75, (int_64)0)
	$4 = *($2 + [8])
	$12 = *(($15 + [16]))
	$9 = *($15 + [8])
	CALL eosio_assert(( (uint_64)($9 <= (int_64)4611686018427387904) ? ((int_64)$12 < (int_64)0) : (int_64)($12 == 0) ), [1440])
	CALL eosio_assert(( ((uint_64)$9 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$12 > (int_64)-1) : ((int_64)$12 == (int_64)-1) ), [1472])
	CALL eosio_assert([1], [1504])
	CALL eosio_assert([1], [1520])
	$6 = ((int_64)$9 / (int_64)10000)
	$5 = *($0)
	$9 = (int_64)59
	$2 = [256]
	$11 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$6 }
	$7 = *($2)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$7 = ($7 + [165])
	goto $label$4 
	
.LABEL $label$6
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$2 = ($2 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	$10 = (int_64)0
	$12 = (int_64)59
	$2 = [1552]
	$13 = (int_64)0
	
.LOOP $label$7:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$8 }
	$7 = *($2)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [165])
	goto $label$9 
	
.LABEL $label$10
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$8
	$2 = ($2 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$9 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$7 }
	$10 = (int_64)0
	$9 = (int_64)59
	$2 = [1568]
	$14 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$10 > (uint_64)(int_64)6) ){ goto $label$16 }
	$7 = *($2)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$7 = ($7 + [165])
	goto $label$14 
	
.LABEL $label$16
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$12
	$2 = ($2 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$11 }
	*((($15 + [56]) + [16])) = $4
	*($15 + [64]) = $6
	*($15 + [56]) = $5
	*($15 + [80]) = $1
	*($15 + [88]) = $3
	*($15 + [96]) = (int_64)0
	*($15 + [112]) = $14
	*($15 + [104]) = $13
	*(($2 = CALL $105([16]))) = $5
	*($2 + [8]) = $11
	*(($7 = ($15 + [136]))) = [0]
	$8 = ($2 + [16])
	*(($15 + [128])) = $8
	*(($15 + [124])) = $8
	*($15 + [120]) = $2
	*($15 + [132]) = [0]
	*(($15 + [140])) = [0]
	CALL $30(($15 + [132]), [48])
	$2 = *($7)
	$7 = *($15 + [132])
	*($15 + [44]) = $7
	*($15 + [40]) = $7
	*($15 + [48]) = $2
	*($15 + [24]) = ($15 + [40])
	*($15 + [144]) = ($15 + [56])
	CALL $41(($15 + [144]), ($15 + [24]))
	CALL $11(($15 + [40]), ($15 + [104]))
	$2 = *($15 + [40])
	CALL send_inline($2, (*($15 + [44]) - $2))
	$2 = *($15 + [40])
	if ( ($2 == 0) ){ goto $label$17 }
	*($15 + [44]) = $2
	CALL $106($2)
	
.LABEL $label$17
	$2 = *($15 + [132])
	if ( ($2 == 0) ){ goto $label$18 }
	*(($15 + [136])) = $2
	CALL $106($2)
	
.LABEL $label$18
	$2 = *($15 + [120])
	if ( ($2 == 0) ){ goto $label$19 }
	*(($15 + [124])) = $2
	CALL $106($2)
	
.LABEL $label$19
	$13 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$2 = [256]
	$11 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$25 }
	$7 = *($2)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$7 = ($7 + [165])
	goto $label$23 
	
.LABEL $label$25
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$21
	$2 = ($2 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$20 }
	*($15 + [48]) = $11
	*($15 + [40]) = $13
	$10 = (int_64)0
	$9 = (int_64)59
	$2 = [272]
	$11 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$31 }
	$7 = *($2)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$7 = ($7 + [165])
	goto $label$29 
	
.LABEL $label$31
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$27
	$2 = ($2 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$26 }
	$10 = (int_64)0
	$9 = (int_64)59
	$2 = [288]
	$13 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$37 }
	$7 = *($2)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$7 = ($7 + [165])
	goto $label$35 
	
.LABEL $label$37
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$33
	$2 = ($2 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$32 }
	$10 = (int_64)0
	$12 = (int_64)59
	$2 = [1552]
	$14 = (int_64)0
	
.LOOP $label$38:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$39 }
	$7 = *($2)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$7 = ($7 + [165])
	goto $label$40 
	
.LABEL $label$41
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$39
	$2 = ($2 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$14 = ((int_64)$9 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$38 }
	*(($15 + [32])) = [0]
	*($15 + [24]) = (int_64)0
	$2 = CALL strlen([1584])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$42 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$45 }
	*($15 + [24]) = ($2 << [1])
	$7 = (($15 + [24]) | [1])
	if ( $2 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$8 = (($2 + [16]) & [-16])
	$7 = CALL $105($8)
	*($15 + [24]) = ($8 | [1])
	*($15 + [32]) = $7
	*($15 + [28]) = $2
	
.LABEL $label$44
	CALL memcpy($7, [1584], $2)
	
.LABEL $label$43
	*(($7 + $2)) = [0]
	*(($15 + [80])) = $4
	*(($15 + [92])) = *($15 + [28])
	*($15 + [64]) = $14
	$2 = ($15 + [32])
	*(($15 + [96])) = *($2)
	*($15 + [56]) = *($0)
	*($15 + [72]) = $6
	*($15 + [88]) = *($15 + [24])
	*($15 + [24]) = [0]
	*($15 + [28]) = [0]
	*($2) = [0]
	$2 = CALL $10(($15 + [104]), ($15 + [40]), $11, $13, ($15 + [56]))
	CALL $11(($15 + [144]), $2)
	$7 = *($15 + [144])
	CALL send_inline($7, (*($15 + [148]) - $7))
	$7 = *($15 + [144])
	if ( ($7 == 0) ){ goto $label$46 }
	*($15 + [148]) = $7
	CALL $106($7)
	
.LABEL $label$46
	$7 = *($2 + [28])
	if ( ($7 == 0) ){ goto $label$47 }
	*(($2 + [32])) = $7
	CALL $106($7)
	
.LABEL $label$47
	$7 = *($2 + [16])
	if ( ($7 == 0) ){ goto $label$48 }
	*(($2 + [20])) = $7
	CALL $106($7)
	
.LABEL $label$48
	if ( ((*(($15 + [88])) & [1]) == 0) ){ goto $label$49 }
	CALL $106(*(($15 + [96])))
	
.LABEL $label$49
	if ( ((*($15 + [24]) & [1]) == 0) ){ goto $label$50 }
	CALL $106(*(($15 + [32])))
	
.LABEL $label$50
	*([0] + [4]) = ($15 + [160])
	return (unreachable)
	
.LABEL $label$42
	CALL $107(($15 + [24]))
}

void .FUNC _ZN10farmeosrcp6recordEmmymN5eosio5assetES1_y (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [208])
	*([0] + [4]) = $19
	*($19 + [72]) = $3
	*($19 + [64]) = [0]
	*($19 + [56]) = (int_64)0
	CALL $55(($19 + [56]), $0)
	$18 = *($19 + [60])
	if ( ((int_32)$18 == (int_32)*($19 + [64])) ){ goto $label$2 }
	*($18) = $3
	$11 = ($18 + [8])
	*($19 + [60]) = $11
	goto $label$1 
	
.LABEL $label$2
	CALL $55(($19 + [56]), ($19 + [72]))
	$11 = *($19 + [60])
	
.LABEL $label$1
	$18 = *($19 + [56])
	if ( ((int_32)$11 == (int_32)$18) ){ goto $label$3 }
	$9 = (($19 + [16]) + [24])
	$8 = (($19 + [80]) + [64])
	$12 = (($19 + [16]) + [8])
	$13 = (($19 + [16]) + [16])
	$15 = (($19 + [16]) + [28])
	$16 = (($19 + [16]) + [32])
	$17 = [0]
	
.LOOP $label$4:
	*($9) = [0]
	$3 = *(($18 + ($17 << [3])))
	*($12) = $3
	*($13) = (int_64)-1
	$14 = *($0)
	*($19 + [16]) = $14
	*($15) = [0]
	*($16) = [0]
	$11 = [1]
	$18 = [0]
	$10 = CALL db_lowerbound_i64($14, $3, (int_64)-5031787421168041984, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$5 }
	CALL $56(($19 + [16]), $10)
	*($19 + [12]) = [0]
	*($19 + [8]) = ($19 + [16])
	$11 = *(*(CALL $57(($19 + [8])) + [4]))
	$18 = *(CALL $56(($19 + [16]), CALL $fimport$13(*($19 + [16]), *($12), (int_64)-5031787421168041984, (int_64)0)))
	$11 = ($11 + [1])
	
.LABEL $label$5
	$18 = ($11 - $18)
	if ( ($17 == 0) ){ goto $label$8 }
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)$18 <= (uint_32)[200]) ){ goto $label$6 }
	
.LABEL $label$7
	$18 = [0]
	$10 = CALL db_lowerbound_i64(*($19 + [16]), *($12), (int_64)-5031787421168041984, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$9 }
	$18 = CALL $56(($19 + [16]), $10)
	
.LABEL $label$9
	$10 = ((int_32)$18 != (int_32)[0])
	CALL eosio_assert($10, [1600])
	CALL eosio_assert($10, [1648])
	$10 = CALL db_next_i64(*($18 + [76]), ($19 + [80]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$10 }
	CALL $56(($19 + [16]), $10)
	
.LABEL $label$10
	CALL $58(($19 + [16]), $18)
	
.LABEL $label$6
	$14 = *($0)
	CALL eosio_assert(((int_64)*($19 + [16]) == (int_64)CALL $fimport$4()), [608])
	$18 = CALL $105([88])
	CALL $59($18)
	*($18 + [72]) = ($19 + [16])
	*($18) = $11
	*($18 + [16]) = $1
	*($18 + [20]) = $2
	*($18 + [24]) = $4
	*($18 + [8]) = *($19 + [72])
	*(($18 + [52])) = *(($5 + [12]))
	*(($18 + [48])) = *(($5 + [8]))
	*($18 + [40]) = *($5)
	*(($18 + [64])) = *(($6 + [8]))
	*($18 + [56]) = *($6)
	*($18 + [32]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*((($19 + [144]) + [8])) = $8
	*($19 + [148]) = ($19 + [80])
	*($19 + [144]) = ($19 + [80])
	*($19 + [160]) = ($19 + [144])
	*((($19 + [168]) + [8])) = ($18 + [16])
	*((($19 + [168]) + [12])) = ($18 + [20])
	*((($19 + [168]) + [16])) = ($18 + [24])
	*((($19 + [168]) + [20])) = ($18 + [28])
	*((($19 + [168]) + [24])) = ($18 + [32])
	*($19 + [172]) = ($18 + [8])
	*($19 + [168]) = $18
	*((($19 + [168]) + [28])) = ($18 + [40])
	*((($19 + [168]) + [32])) = ($18 + [56])
	CALL $60(($19 + [168]), ($19 + [160]))
	$3 = *($18)
	$10 = CALL db_store_i64(*($12), (int_64)-5031787421168041984, $14, $3, ($19 + [80]), [64])
	*($18 + [76]) = $10
	if ( (uint_64)($3 <= *($13)) ){ goto $label$11 }
	*($13) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$11
	*($19 + [168]) = $18
	$3 = *($18)
	*($19 + [80]) = $3
	*($19 + [144]) = $10
	$11 = *($15)
	if ( ((uint_32)$11 >= (uint_32)*($16)) ){ goto $label$13 }
	*($11 + [8]) = $3
	*($11 + [16]) = $10
	*($19 + [168]) = [0]
	*($11) = $18
	*($15) = ($11 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $61($9, ($19 + [168]), ($19 + [80]), ($19 + [144]))
	
.LABEL $label$12
	$18 = *($19 + [168])
	*($19 + [168]) = [0]
	if ( ($18 == 0) ){ goto $label$14 }
	CALL $106($18)
	
.LABEL $label$14
	$10 = *($9)
	if ( ($10 == 0) ){ goto $label$15 }
	$18 = *($15)
	if ( ((int_32)$18 == (int_32)$10) ){ goto $label$17 }
	
.LOOP $label$18:
	$18 = ($18 + [-24])
	$11 = *($18)
	*($18) = [0]
	if ( ($11 == 0) ){ goto $label$19 }
	CALL $106($11)
	
.LABEL $label$19
	if ( ((int_32)$10 != (int_32)$18) ){ goto $label$18 }
	$18 = *($9)
	goto $label$16 
	
.LABEL $label$17
	$18 = $10
	
.LABEL $label$16
	*($15) = $10
	CALL $106($18)
	
.LABEL $label$15
	$18 = *($19 + [56])
	$17 = ($17 + [1])
	if ( ($17 <= int_32((*($19 + [60]) - $18) >> [3])) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($18 == 0) ){ goto $label$20 }
	*($19 + [60]) = $18
	CALL $106($18)
	
.LABEL $label$20
	*([0] + [4]) = ($19 + [208])
}

void .FUNC _ZN10farmeosrcp13delaytransferEmyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [144])
	*([0] + [4]) = $13
	$10 = CALL current_time()
	*(($13 + [108])) = [0]
	*(($13 + [112])) = [0]
	*($13 + [92]) = [0]
	*($13 + [96]) = [0]
	*($13 + [100]) = [0]
	*($13 + [104]) = [0]
	*($13 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$10 / (uint_64)(int_64)1000000)) + [60])
	*($13 + [116]) = [0]
	*(($13 + [120])) = [0]
	*(($13 + [124])) = [0]
	*($13 + [128]) = [0]
	*(($13 + [132])) = [0]
	*(($13 + [136])) = [0]
	$8 = *($4)
	$7 = CALL strlen([1376])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$1 }
	if ( CALL $112($4, [0], [-1], [1376], $7) ){ goto $label$1 }
	CALL $111($4, [1968])
	
.LABEL $label$1
	$6 = ($13 + [116])
	$5 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [256]
	$11 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$7 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$7 = ($7 + [165])
	goto $label$5 
	
.LABEL $label$7
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$3
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$2 }
	*($13 + [72]) = $11
	*($13 + [64]) = $5
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [272]
	$11 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$13 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$7 = ($7 + [165])
	goto $label$11 
	
.LABEL $label$13
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$9
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$8 }
	*($13 + [56]) = $11
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [288]
	$11 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$19 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$7 = ($7 + [165])
	goto $label$17 
	
.LABEL $label$19
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$15
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$14 }
	*($13 + [48]) = $11
	*(($13 + [28])) = *(($3 + [12]))
	*(($13 + [24])) = *(($3 + [8]))
	*(($13 + [20])) = *(($3 + [4]))
	*($13 + [8]) = $2
	*($13) = $5
	*($13 + [16]) = *($3)
	CALL $114(($13 + [32]), $4)
	CALL $63($6, ($13 + [64]), ($13 + [56]), ($13 + [48]), $13)
	if ( ((*($13 + [32]) & [1]) == 0) ){ goto $label$20 }
	CALL $106(*(($13 + [40])))
	
.LABEL $label$20
	*((($13 + [80]) + [20])) = [1]
	$10 = CALL current_time()
	*($13 + [8]) = (int_64)0
	*($13) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $1) + (int_64)$2) + (int_64)((int_64)((uint_64)$10 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	$10 = *($0)
	CALL $64(($13 + [64]), ($13 + [80]))
	$8 = *($13 + [64])
	CALL send_deferred($13, $10, $8, (*($13 + [68]) - $8), [0])
	$8 = *($13 + [64])
	if ( ($8 == 0) ){ goto $label$21 }
	*($13 + [68]) = $8
	CALL $106($8)
	
.LABEL $label$21
	CALL $65(($13 + [80]))
	*([0] + [4]) = ($13 + [144])
}

int_64 .FUNC _ZN10farmeosrcp10get_payoutEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	float_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [2000]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [2000]
	$10 = (int_64)0
	
.LOOP $label$5:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$6 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$2 = ($2 + [165])
	goto $label$7 
	
.LABEL $label$8
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$6
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$5 }
	*(($12 + [64])) = [0]
	*($12 + [48]) = (int_64)-1
	*($12 + [56]) = (int_64)0
	*($12 + [68]) = [0]
	*($12 + [40]) = $10
	*($12 + [32]) = $8
	$7 = (int_64)0
	$5 = CALL db_find_i64($8, $10, (int_64)8419268397136609280, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$5 = CALL $70(($12 + [32]), $5)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($12 + [32])), [512])
	$7 = *($5 + [8])
	
.LABEL $label$9
	*($12 + [24]) = ($12 + [32])
	*($12 + [72]) = (int_64)0
	CALL $71(($12 + [16]), ($12 + [24]), ($12 + [72]))
	if ( (*($12 + [20]) == 0) ){ goto $label$11 }
	*($12 + [12]) = [0]
	*($12 + [8]) = ($12 + [24])
	$11 = (float_64)99.25
	if ( ((int_64)*(*(CALL $72(($12 + [8])) + [4])) == (int_64)$1) ){ goto $label$10 }
	
.LABEL $label$11
	$5 = [8]
	if ( ((int_64)$7 >= (int_64)9000000000) ){ goto $label$12 }
	$5 = [7]
	if ( ((int_64)$7 >= (int_64)8000000000) ){ goto $label$12 }
	$5 = [6]
	if ( ((int_64)$7 > (int_64)6999999999) ){ goto $label$12 }
	$5 = [5]
	if ( ((int_64)$7 > (int_64)5999999999) ){ goto $label$12 }
	$5 = [4]
	if ( ((int_64)$7 > (int_64)4999999999) ){ goto $label$12 }
	$5 = [3]
	if ( ((int_64)$7 > (int_64)3999999999) ){ goto $label$12 }
	$5 = [2]
	if ( ((int_64)$7 > (int_64)2999999999) ){ goto $label$12 }
	$5 = [1]
	if ( ((int_64)$7 > (int_64)1999999999) ){ goto $label$12 }
	$5 = [0]
	$11 = (float_64)98.5
	if ( ((int_64)$7 < (int_64)1000000000) ){ goto $label$10 }
	
.LABEL $label$12
	$11 = ((float_64)((float_64)*((($5 << [3]) + [2016])) * (float_64)(float_64)0.75) + (float_64)(float_64)98.5)
	
.LABEL $label$10
	$3 = *($12 + [56])
	if ( ($3 == 0) ){ goto $label$13 }
	$4 = ($12 + [60])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	CALL $106($2)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$16 }
	$5 = *(($12 + [56]))
	goto $label$14 
	
.LABEL $label$15
	$5 = $3
	
.LABEL $label$14
	*($4) = $3
	CALL $106($5)
	
.LABEL $label$13
	*([0] + [4]) = ($12 + [80])
	return $11
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1232])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $105([28])) + [16]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [4])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [8])
	*($8 + [44]) = ($6 + [12])
	CALL $75(($8 + [32]), ($8 + [24]))
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [20])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $76(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $106($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC _ZN14exchange_state21GetSupplyCurrentPriceEv (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	$3 = *(($1 + [24]))
	*($0 + [8]) = $3
	$2 = (Rounds 0)(((float_64)*(($1 + [32])) * (float_64)((float_64)(CASTING float_64)(int_64 *($1 + [16])) / (float_64)(CASTING float_64)(int_64 *($1)))))
	*($0) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [16])
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$0 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [80])
}

void .FUNC _ZN10farmeosrcp8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [272])
	*([0] + [4]) = $17
	*($17 + [240]) = $1
	$15 = *($0)
	if ( ((int_64)$15 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$15 != (int_64)$2) ){ goto $label$2 }
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [896])
	$14 = *($4)
	$13 = CALL strlen([208])
	if ( ((int_32)$13 != (int_32)( *($4 + [4]) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$7 }
	if ( (CALL $112($4, [0], [-1], [208], $13) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$14 = *($4)
	$13 = ($4 + [4])
	$10 = CALL strlen([224])
	if ( ((int_32)$10 != (int_32)( *($13) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$8 }
	if ( (CALL $112($4, [0], [-1], [224], $10) == 0) ){ goto $label$6 }
	
.LABEL $label$8
	$14 = *($4)
	$10 = CALL strlen([240])
	if ( ((int_32)$10 != (int_32)( *($13) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$9 }
	if ( (CALL $112($4, [0], [-1], [240], $10) == 0) ){ goto $label$6 }
	
.LABEL $label$9
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [304])
	$1 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$13 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$13 = [0]
	
.LABEL $label$10
	CALL eosio_assert($13, [80])
	$5 = ($0 + [8])
	$12 = [0]
	$14 = [0]
	$13 = ($0 + [16])
	$10 = CALL db_lowerbound_i64(*($0 + [8]), *($13), (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$15 }
	$14 = CALL $12($5, $10)
	
.LABEL $label$15
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [336])
	$14 = CALL db_lowerbound_i64(*($5), *($13), (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$16 }
	$12 = CALL $12($5, $14)
	
.LABEL $label$16
	CALL eosio_assert(((int_32)*(CALL $12($5, CALL $fimport$13(*(($0 + [8])), *(($0 + [16])), (int_64)7235159550150574080, (int_64)0)) + [4]) == (int_32)[1]), [368])
	$14 = [0]
	$1 = *($3)
	if ( ((int_64)$1 < (int_64)*($12 + [24])) ){ goto $label$17 }
	$14 = ((int_64)$1 <= (int_64)*($12 + [16]))
	
.LABEL $label$17
	CALL eosio_assert($14, [384])
	*($17 + [256]) = [0]
	*($17 + [248]) = (int_64)0
	CALL $114(($17 + [96]), $4)
	*((($17 + [80]) + [8])) = [0]
	*($17 + [80]) = (int_64)0
	$14 = CALL strlen([416])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$5 }
	*($17 + [80]) = ($14 << [1])
	$13 = (($17 + [80]) | [1])
	if ( $14 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$11 = *($0)
	$1 = (int_64)0
	$15 = (int_64)59
	$14 = [256]
	$16 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$23 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$13 = ($13 + [165])
	goto $label$21 
	
.LABEL $label$23
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$19
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$2 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$18 }
	*($17 + [192]) = $16
	*($17 + [184]) = $11
	$1 = (int_64)0
	$15 = (int_64)59
	$14 = [272]
	$16 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$29 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$13 = ($13 + [165])
	goto $label$27 
	
.LABEL $label$29
	$2 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$25
	$14 = ($14 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$2 | (int_64)$16)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$24 }
	$1 = (int_64)0
	$15 = (int_64)59
	$14 = [288]
	$11 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$35 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$13 = ($13 + [165])
	goto $label$33 
	
.LABEL $label$35
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$31
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$11 = ((int_64)$2 | (int_64)$11)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$30 }
	CALL $114(($17 + [112]), $4)
	*(($17 + [156])) = *(($3 + [12]))
	*(($17 + [152])) = *(($3 + [8]))
	*(($17 + [148])) = *(($3 + [4]))
	*($17 + [128]) = *($0)
	*($17 + [144]) = *($3)
	*($17 + [136]) = *($17 + [240])
	$14 = (($17 + [112]) + [8])
	*(($17 + [168])) = *($14)
	*($17 + [160]) = *($17 + [112])
	*($17 + [112]) = [0]
	*($17 + [116]) = [0]
	*($14) = [0]
	$14 = CALL $10(($17 + [200]), ($17 + [184]), $16, $11, ($17 + [128]))
	CALL $11(($17 + [248]), $14)
	$13 = *($17 + [248])
	CALL send_inline($13, (*($17 + [252]) - $13))
	$13 = *($17 + [248])
	if ( ($13 == 0) ){ goto $label$36 }
	*($17 + [252]) = $13
	CALL $106($13)
	
.LABEL $label$36
	$13 = *($14 + [28])
	if ( ($13 == 0) ){ goto $label$37 }
	*(($14 + [32])) = $13
	CALL $106($13)
	
.LABEL $label$37
	$13 = *($14 + [16])
	if ( ($13 == 0) ){ goto $label$38 }
	*(($14 + [20])) = $13
	CALL $106($13)
	
.LABEL $label$38
	if ( ((*(($17 + [160])) & [1]) == 0) ){ goto $label$39 }
	CALL $106(*(($17 + [168])))
	
.LABEL $label$39
	if ( ((*($17 + [112]) & [1]) == 0) ){ goto $label$2 }
	CALL $106(*(($17 + [120])))
	goto $label$2 
	
.LABEL $label$5
	$4 = (($14 + [16]) & [-16])
	$13 = CALL $105($4)
	*($17 + [80]) = ($4 | [1])
	*($17 + [88]) = $13
	*($17 + [84]) = $14
	
.LABEL $label$4
	CALL memcpy($13, [416], $14)
	
.LABEL $label$3
	*(($13 + $14)) = [0]
	CALL $13($0, ($17 + [96]), ($17 + [80]), ($17 + [248]))
	if ( ((*($17 + [80]) & [1]) == 0) ){ goto $label$40 }
	CALL $106(*($17 + [88]))
	
.LABEL $label$40
	if ( ((*($17 + [96]) & [1]) == 0) ){ goto $label$41 }
	CALL $106(*($17 + [104]))
	
.LABEL $label$41
	CALL eosio_assert(((int_32)(*($17 + [252]) - *($17 + [248])) == (int_32)[48]), [432])
	$14 = *($17 + [248])
	if ( (*($14 + [12]) & [1]) ){ goto $label$43 }
	$14 = (($14 + [12]) + [1])
	goto $label$42 
	
.LABEL $label$43
	$14 = *(($14 + [20]))
	
.LABEL $label$42
	$7 = CALL atoi($14)
	$14 = *($17 + [248])
	if ( (*($14 + [24]) & [1]) ){ goto $label$45 }
	$14 = (($14 + [24]) + [1])
	goto $label$44 
	
.LABEL $label$45
	$14 = *(($14 + [32]))
	
.LABEL $label$44
	$8 = CALL atoll($14)
	$9 = (CASTING uint_32)(uint_64 $8)
	*($17 + [76]) = $9
	$14 = *($17 + [248])
	if ( (*($14 + [36]) & [1]) ){ goto $label$47 }
	$14 = (($14 + [36]) + [1])
	goto $label$46 
	
.LABEL $label$47
	$14 = *(($14 + [44]))
	
.LABEL $label$46
	*($17 + [72]) = CALL atoi($14)
	CALL eosio_assert((($7 + [-1]) <= [3]), [448])
	$14 = *($17 + [248])
	if ( (*($14) & [1]) ){ goto $label$49 }
	$14 = ($14 + [1])
	goto $label$48 
	
.LABEL $label$49
	$14 = *($14 + [8])
	
.LABEL $label$48
	$6 = ($12 + [24])
	$13 = [-1]
	
.LOOP $label$50:
	$4 = ($14 + $13)
	$10 = ($13 + [1])
	$13 = $10
	if ( *(($4 + [1])) ){ goto $label$50 }
	$11 = (CASTING uint_64)(uint_32 $10)
	$1 = (int_64)0
	$15 = (int_64)59
	$2 = (int_64)0
	
.LOOP $label$51:
	$16 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$11) ){ goto $label$52 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$13 = ($13 + [165])
	goto $label$53 
	
.LABEL $label$54
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$56 }
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	goto $label$55 
	
.LABEL $label$56
	$16 = ((int_64)$16 & (int_64)15)
	
.LABEL $label$55
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$2 = ((int_64)$16 | (int_64)$2)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$51 }
	*($17 + [112]) = $2
	$14 = CALL is_account($2)
	if ( ((int_64)$2 == (int_64)*($17 + [240])) ){ goto $label$58 }
	if ( (((int_32)$14 ^ (int_32)[1]) == 0) ){ goto $label$57 }
	
.LABEL $label$58
	$1 = (int_64)0
	$15 = (int_64)59
	$14 = [464]
	$2 = (int_64)0
	
.LOOP $label$59:
	$16 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$60 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$62 }
	$13 = ($13 + [165])
	goto $label$61 
	
.LABEL $label$62
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$61
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($13 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$60
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$2 = ((int_64)$16 | (int_64)$2)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$59 }
	*($17 + [112]) = $2
	
.LABEL $label$57
	if ( ((int_32)$7 == (int_32)[3]) ){ goto $label$67 }
	if ( ((int_32)$7 == (int_32)[2]) ){ goto $label$68 }
	if ( ((int_32)$7 != (int_32)[1]) ){ goto $label$64 }
	CALL eosio_assert(((*($12 + [32]) + [1]) <= *($12 + [36])), [480])
	$7 = *(($0 + [72]))
	$4 = *(($0 + [76]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$69 }
	$14 = ($4 + [-24])
	$10 = ([0] - $7)
	
.LOOP $label$70:
	if ( ((int_32)*(*($14)) == (int_32)$9) ){ goto $label$69 }
	$4 = $14
	$13 = ($14 + [-24])
	$14 = $13
	if ( ((int_32)($13 + $10) != (int_32)[-24]) ){ goto $label$70 }
	
.LABEL $label$69
	$13 = ($0 + [48])
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$66 }
	$14 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [204]) == (int_32)$13), [512])
	goto $label$65 
	
.LABEL $label$68
	*((($17 + [56]) + [12])) = *(($3 + [12]))
	*(($14 = (($17 + [56]) + [8]))) = *(($3 + [8]))
	$1 = *($17 + [240])
	*($17 + [56]) = *($3)
	*((($17 + [8]) + [8])) = *($14)
	*($17 + [8]) = *($17 + [56])
	CALL _ZN10farmeosrcp8joinroomEyN5eosio5assetEmy($0, $1, ($17 + [8]), $9, $2)
	$4 = *($17 + [248])
	if ( $4 ){ goto $label$63 }
	goto $label$2 
	
.LABEL $label$67
	*((($17 + [40]) + [12])) = *(($3 + [12]))
	*(($14 = (($17 + [40]) + [8]))) = *(($3 + [8]))
	$1 = *($17 + [240])
	*($17 + [40]) = *($3)
	*((($17 + [24]) + [8])) = *($14)
	*($17 + [24]) = *($17 + [40])
	CALL _ZN10farmeosrcp9nextroundEyN5eosio5assetEmy($0, $1, ($17 + [24]), $9, $2)
	$4 = *($17 + [248])
	if ( $4 ){ goto $label$63 }
	goto $label$2 
	
.LABEL $label$66
	$14 = [0]
	$4 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-4816278077707386880, ((int_64)$8 & (int_64)4294967295))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$65 }
	$14 = CALL $14($13, $4)
	CALL eosio_assert(((int_32)*($14 + [204]) == (int_32)$13), [512])
	
.LABEL $label$65
	CALL eosio_assert(($14 == 0), [576])
	CALL eosio_assert(((int_32)(*($17 + [72]) | [1]) == (int_32)[3]), [592])
	$1 = *($0)
	*($17 + [140]) = $3
	*($17 + [132]) = ($17 + [240])
	*($17 + [128]) = ($17 + [76])
	*($17 + [136]) = ($17 + [72])
	*($17 + [144]) = ($17 + [112])
	*($17 + [184]) = $1
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$4()), [608])
	*($17 + [200]) = $13
	*($17 + [204]) = ($17 + [128])
	*($17 + [208]) = ($17 + [184])
	$14 = CALL $105([216])
	CALL $15($14)
	*($14 + [204]) = $13
	CALL $16(($17 + [200]), $14)
	*($17 + [264]) = $14
	$1 = *($14)
	*($17 + [200]) = $1
	$4 = *($14 + [208])
	*($17 + [260]) = $4
	$10 = ($0 + [76])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [80]))) ){ goto $label$72 }
	*($13 + [8]) = $1
	*($13 + [16]) = $4
	*($17 + [264]) = [0]
	*($13) = $14
	*($10) = ($13 + [24])
	goto $label$71 
	
.LABEL $label$72
	CALL $17(($0 + [72]), ($17 + [264]), ($17 + [200]), ($17 + [260]))
	
.LABEL $label$71
	$13 = ($12 + [36])
	$4 = ($12 + [32])
	$14 = *($17 + [264])
	*($17 + [264]) = [0]
	if ( ($14 == 0) ){ goto $label$73 }
	CALL $18($14)
	CALL $106($14)
	
.LABEL $label$73
	$2 = *($0)
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [672])
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)$5), [720])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$4()), [768])
	*(($14 = ($12 + [32]))) = (*($14) + [1])
	$1 = *($12)
	CALL eosio_assert([1], [832])
	*($17 + [192]) = (($17 + [128]) + [40])
	*($17 + [188]) = ($17 + [128])
	*($17 + [184]) = ($17 + [128])
	*($17 + [264]) = ($17 + [184])
	*($17 + [204]) = ($12 + [4])
	*($17 + [200]) = $12
	*($17 + [208]) = ($12 + [8])
	*($17 + [212]) = ($12 + [16])
	*($17 + [216]) = $6
	*($17 + [220]) = $4
	*($17 + [224]) = $13
	CALL $19(($17 + [200]), ($17 + [264]))
	CALL db_update_i64(*(($12 + [44])), $2, ($17 + [128]), [40])
	$14 = ($0 + [24])
	if ( (uint_64)($1 <= *($14)) ){ goto $label$64 }
	*($14) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$64
	$4 = *($17 + [248])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$63
	$14 = *($17 + [252])
	if ( ((int_32)$14 == (int_32)$4) ){ goto $label$75 }
	$13 = ([0] - $4)
	$14 = ($14 + [-12])
	
.LOOP $label$76:
	if ( ((*($14) & [1]) == 0) ){ goto $label$77 }
	CALL $106(*(($14 + [8])))
	
.LABEL $label$77
	$14 = ($14 + [-12])
	if ( ((int_32)($14 + $13) != (int_32)[-12]) ){ goto $label$76 }
	$14 = *($17 + [248])
	goto $label$74 
	
.LABEL $label$75
	$14 = $4
	
.LABEL $label$74
	*($17 + [252]) = $4
	CALL $106($14)
	
.LABEL $label$2
	*([0] + [4]) = ($17 + [272])
	return (unreachable)
	
.LABEL $label$1
	CALL $107(($17 + [80]))
}

void .FUNC _ZN14exchange_state21convert_from_exchangeERNS_9connectorEN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	float_64 $5
	int_64 $6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($1 + [8])), [112])
	$4 = *($2)
	$6 = *($3)
	$5 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 (int_64))(*($1) - $6))) + (float_64)(float_64)1), ((float_64)(float_64)1 / (float_64)*($2 + [16])))
	*($1) = (int_64))(*($1) - $6)
	$6 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $4) * (float_64)((float_64)$5 + (float_64)(float_64)-1)))
	*($0) = $6
	*($2) = (int_64))(*($2) - $6)
	$4 = *($2 + [8])
	*($0 + [8]) = $4
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [16])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	CALL eosio_assert($1, [80])
}

void .FUNC _ZN14exchange_state7convertEN5eosio5assetENS0_11symbol_typeE (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	float_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$7 = *(($1 + [24]))
	$4 = *($2 + [8])
	if ( ((int_64)$4 != (int_64)*($1 + [8])) ){ goto $label$6 }
	if ( ((int_64)$7 != (int_64)$3) ){ goto $label$5 }
	$6 = ($2 + [8])
	*(($8 = (($9 + [16]) + [8]))) = *($6)
	$7 = *($2)
	*(($9 + [12])) = *((($9 + [16]) + [12]))
	*(($9 + [8])) = *($8)
	*($9 + [16]) = $7
	*($9 + [4]) = *($9 + [20])
	*($9) = *($9 + [16])
	CALL _ZN14exchange_state21convert_from_exchangeERNS_9connectorEN5eosio5assetE(($9 + [32]), $1, ($1 + [16]), $9)
	*($6) = *((($9 + [32]) + [8]))
	*($2) = *($9 + [32])
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$4 != (int_64)$7) ){ goto $label$4 }
	$7 = *($1)
	$8 = ($1 + [16])
	$3 = *($2)
	$5 = (CASTING float_64)(int_64 $3)
	$5 = CALL pow(((float_64)((float_64)((float_64)$5 / (float_64)(float_64)1e4) / (float_64)((float_64)((float_64)$5 + (float_64)(CASTING float_64)(int_64 *($8))) / (float_64)(float_64)1e4)) + (float_64)(float_64)1), *(($1 + [32])))
	*($8) = ((int_64)$3 + (int_64)*($8))
	$3 = (Rounds 0)(((float_64)((float_64)((float_64)(CASTING float_64)(int_64 $7) / (float_64)(float_64)1e4) * (float_64)((float_64)$5 + (float_64)(float_64)-1)) * (float_64)(float_64)1e4))
	*($1) = ((int_64)$3 + (int_64)*($1))
	$4 = *(($1 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [16])
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$5
	CALL eosio_assert([0], [176])
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [144])
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	CALL eosio_assert($8, [80])
	*(($2 + [8])) = $4
	*($2) = $3
	
.LABEL $label$1
	*($0) = *($2)
	*(($0 + [8])) = *(($2 + [8]))
	*([0] + [4]) = ($9 + [48])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN14exchange_state19convert_to_exchangeERNS_9connectorEN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	float_64 $5
	int_64 $6
	$6 = *($1)
	$4 = *($3)
	$5 = (CASTING float_64)(int_64 $4)
	$5 = CALL pow(((float_64)((float_64)((float_64)$5 / (float_64)(float_64)1e4) / (float_64)((float_64)((float_64)(CASTING float_64)(int_64 *($2)) + (float_64)$5) / (float_64)(float_64)1e4)) + (float_64)(float_64)1), *($2 + [16]))
	*($2) = ((int_64)$4 + (int_64)*($2))
	$6 = (Rounds 0)(((float_64)((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(float_64)1e4) * (float_64)((float_64)$5 + (float_64)(float_64)-1)) * (float_64)(float_64)1e4))
	*($0) = $6
	$4 = *($1 + [8])
	*($0 + [8]) = $4
	*($1) = ((int_64)$6 + (int_64)*($1))
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [16])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$2 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [80])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [160])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1232])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $105([216])
	CALL $15($6)
	*($6 + [204]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [4])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [8])
	*($8 + [52]) = ($6 + [16])
	*($8 + [56]) = ($6 + [24])
	*($8 + [60]) = ($6 + [32])
	*($8 + [64]) = ($6 + [40])
	*($8 + [68]) = ($6 + [48])
	*($8 + [72]) = ($6 + [56])
	*($8 + [76]) = ($6 + [68])
	*($8 + [80]) = ($6 + [80])
	*($8 + [84]) = ($6 + [92])
	*($8 + [88]) = ($6 + [104])
	*($8 + [92]) = ($6 + [116])
	*($8 + [96]) = ($6 + [128])
	*($8 + [100]) = ($6 + [136])
	*($8 + [104]) = ($6 + [144])
	*($8 + [108]) = ($6 + [148])
	*($8 + [112]) = ($6 + [152])
	*($8 + [116]) = ($6 + [156])
	*($8 + [120]) = ($6 + [160])
	*($8 + [124]) = ($6 + [164])
	*($8 + [128]) = ($6 + [168])
	*($8 + [132]) = ($6 + [172])
	*($8 + [136]) = ($6 + [176])
	*($8 + [140]) = ($6 + [177])
	*($8 + [144]) = ($6 + [178])
	*($8 + [148]) = ($6 + [184])
	*($8 + [152]) = ($6 + [200])
	CALL $27(($8 + [40]), ($8 + [32]))
	*($6 + [208]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [208])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $17(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $18($4)
	CALL $106($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [160])
	return $6
}

int_32 .FUNC $15 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [56 align=4]) = (int_64)0
	*($0 + [80 align=4]) = (int_64)0
	*(($0 + [64])) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*(($0 + [88])) = (int_64)0
	$2 = [0]
	*(($0 + [96])) = [0]
	*(($0 + [100])) = [0]
	*($0 + [104]) = [0]
	*(($0 + [108])) = [0]
	*(($0 + [112])) = [0]
	*($0 + [116]) = [0]
	*(($0 + [120])) = [0]
	*(($0 + [124])) = [0]
	*($0 + [184]) = (int_64)0
	*(($3 = ($0 + [192]))) = (int_64)1397703940
	CALL eosio_assert([1], [16])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [80])
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_64 $32
	int_64 $33
	int_32 $34
	int_32 $35
	$34 = (*([0] + [4]) - [144])
	*([0] + [4]) = $34
	$35 = *($0 + [4])
	*($1) = *(*($35))
	*($1 + [8]) = *(*($35 + [4]))
	$2 = *($0)
	*($1 + [4]) = *(*($35 + [8]))
	$32 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [128]) = $32
	*($1 + [136]) = ((int_64)$32 + (int_64)60)
	$31 = *($35 + [12])
	$32 = *(($31 + [8]))
	$33 = *($31)
	*($1 + [144]) = [1]
	*($1 + [176]) = [1]
	*($1 + [184]) = $33
	*(($1 + [192])) = $32
	*($1 + [32]) = *(*($35 + [16]))
	*(($35 = $34) + [16]) = [0]
	*($35) = ($35 + [16])
	$4 = ($1 + [4])
	*($35 + [28]) = $4
	*($35 + [24]) = $1
	$3 = ($1 + [8])
	*($35 + [32]) = $3
	$11 = ($1 + [16])
	*($35 + [36]) = $11
	$12 = ($1 + [24])
	*($35 + [40]) = $12
	$10 = ($1 + [32])
	*($35 + [44]) = $10
	$13 = ($1 + [40])
	*($35 + [48]) = $13
	$14 = ($1 + [48])
	*($35 + [52]) = $14
	$15 = ($1 + [56])
	*($35 + [56]) = $15
	$16 = ($1 + [68])
	*($35 + [60]) = $16
	$17 = ($1 + [80])
	*($35 + [64]) = $17
	$18 = ($1 + [92])
	*($35 + [68]) = $18
	$19 = ($1 + [104])
	*($35 + [72]) = $19
	$20 = ($1 + [116])
	*($35 + [76]) = $20
	$5 = ($1 + [128])
	*($35 + [80]) = $5
	$6 = ($1 + [136])
	*($35 + [84]) = $6
	$8 = ($1 + [144])
	*($35 + [88]) = $8
	$21 = ($1 + [148])
	*($35 + [92]) = $21
	$22 = ($1 + [152])
	*($35 + [96]) = $22
	$23 = ($1 + [156])
	*($35 + [100]) = $23
	$24 = ($1 + [160])
	*($35 + [104]) = $24
	$25 = ($1 + [164])
	*($35 + [108]) = $25
	$26 = ($1 + [168])
	*($35 + [112]) = $26
	$27 = ($1 + [172])
	*($35 + [116]) = $27
	$9 = ($1 + [176])
	*($35 + [120]) = $9
	$28 = ($1 + [177])
	*($35 + [124]) = $28
	$29 = ($1 + [178])
	*($35 + [128]) = $29
	$7 = ($1 + [184])
	*($35 + [132]) = $7
	$30 = ($1 + [200])
	*($35 + [136]) = $30
	CALL $23(($35 + [24]), $35)
	$31 = *($35 + [16])
	if ( ($31 <= [513]) ){ goto $label$2 }
	$34 = CALL malloc($31)
	goto $label$1 
	
.LABEL $label$2
	$34 = ($34 - (($31 + [15]) & [-16]))
	*([0] + [4]) = $34
	
.LABEL $label$1
	*($35 + [4]) = $34
	*($35) = $34
	*($35 + [8]) = ($34 + $31)
	*($35 + [16]) = $35
	*($35 + [28]) = $4
	*($35 + [24]) = $1
	*($35 + [32]) = $3
	*($35 + [36]) = $11
	*($35 + [40]) = $12
	*($35 + [44]) = $10
	*($35 + [48]) = $13
	*($35 + [52]) = $14
	*($35 + [56]) = $15
	*($35 + [60]) = $16
	*($35 + [64]) = $17
	*($35 + [68]) = $18
	*($35 + [72]) = $19
	*($35 + [76]) = $20
	*($35 + [80]) = $5
	*($35 + [84]) = $6
	*($35 + [88]) = $8
	*($35 + [92]) = $21
	*($35 + [96]) = $22
	*($35 + [100]) = $23
	*($35 + [104]) = $24
	*($35 + [108]) = $25
	*($35 + [112]) = $26
	*($35 + [116]) = $27
	*($35 + [120]) = $9
	*($35 + [124]) = $28
	*($35 + [128]) = $29
	*($35 + [132]) = $7
	*($35 + [136]) = $30
	CALL $24(($35 + [24]), ($35 + [16]))
	$32 = *($1)
	*($1 + [208]) = CALL db_store_i64(*($2 + [8]), (int_64)-4816278077707386880, *(*($0 + [8])), $32, $34, $31)
	if ( ($31 <= [513]) ){ goto $label$3 }
	CALL free($34)
	
.LABEL $label$3
	if ( (uint_64)($32 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ((int_64)$32 + (int_64)1)
	
.LABEL $label$4
	*([0] + [4]) = ($35 + [144])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $105(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $18($1)
	CALL $106($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $106($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $10 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $105([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $30($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $37(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $30($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1152])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1152])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $36(CALL $35($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1232])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $105([56])) + [40]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [4])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [8])
	*($8 + [44]) = ($6 + [16])
	*($8 + [48]) = ($6 + [24])
	*($8 + [52]) = ($6 + [32])
	*($8 + [56]) = ($6 + [36])
	CALL $33(($8 + [32]), ($8 + [24]))
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [44])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $34(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $106($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [32])
	*([0] + [4]) = $14
	$10 = *($3 + [4])
	if ( ((int_32)$10 == (int_32)*($3 + [8])) ){ goto $label$2 }
	CALL $114($10, $1)
	*(($1 = ($3 + [4]))) = (*($1) + [12])
	goto $label$1 
	
.LABEL $label$2
	CALL $31($3, $1)
	
.LABEL $label$1
	$1 = *($2)
	if ( ($1 & [1]) ){ goto $label$4 }
	$12 = uint_32($1 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$12 = *($2 + [4])
	
.LABEL $label$3
	*($14 + [24]) = [0]
	*($14 + [16]) = (int_64)0
	$5 = ($2 + [1])
	$4 = (($14 + [16]) | [1])
	
.LOOP $label$6:
	$11 = ($3 + [4])
	CALL $108(($14 + [16]), (*($11) + [-12]))
	$9 = *($14 + [16])
	$13 = ($9 & [1])
	$10 = [0]
	$7 = ($1 & [1])
	$1 = *($2)
	$1 = ( *(($2 + [4])) ? uint_32($1 >> [1]) : $7 )
	if ( ($1 == 0) ){ goto $label$7 }
	$10 = ( *($14 + [20]) ? uint_32($9 >> [1]) : $13 )
	if ( ((int_32)$10 < (int_32)$1) ){ goto $label$5 }
	$6 = ( *((($14 + [16]) + [8])) ? $4 : $13 )
	$8 = ($6 + $10)
	$7 = ( *(($2 + [8])) ? $5 : $7 )
	$9 = *($7)
	$13 = $6
	
.LOOP $label$8:
	$10 = (($10 - $1) + [1])
	if ( ($10 == 0) ){ goto $label$5 }
	$10 = CALL memchr($13, $9, $10)
	if ( ($10 == 0) ){ goto $label$5 }
	if ( (CALL memcmp($10, $7, $1) == 0) ){ goto $label$9 }
	$13 = ($10 + [1])
	$10 = ($8 - $13)
	if ( ((int_32)$10 >= (int_32)$1) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$9
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$5 }
	$10 = ($10 - $6)
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$5 }
	
.LABEL $label$7
	CALL $115($14, ($14 + [16]), [0], $10, ($14 + [16]))
	$13 = *($11)
	$1 = ($13 + [-12])
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*(($13 + [-4]))) = [0]
	*(($13 + [-8])) = [0]
	
.LABEL $label$10
	CALL $110($1, [0])
	$13 = ($14 + [8])
	*(($1 + [8])) = *($13)
	*($1) = *($14)
	$10 = *($14 + [16])
	$1 = ($10 + $12)
	CALL $115($14, ($14 + [16]), $1, (( *($14 + [20]) ? uint_32($10 >> [1]) : ($10 & [1]) ) - $1), ($14 + [16]))
	$1 = *($11)
	if ( ($1 <= *(($3 + [8]))) ){ goto $label$12 }
	CALL $32($3, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$6 }
	CALL $106(*($13))
	goto $label$6 
	
.LABEL $label$12
	*($1) = *($14)
	*(($1 + [8])) = *($13)
	*($13) = [0]
	*($14) = [0]
	*($14 + [4]) = [0]
	*($11) = (*($11) + [12])
	goto $label$6 
	
.LABEL $label$5
	if ( ((*($14 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL $106(*(($14 + [24])))
	
.LABEL $label$13
	*([0] + [4]) = ($14 + [32])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $18 (int_32 $0)
{
	if ( ((*($0 + [116]) & [1]) == 0) ){ goto $label$1 }
	CALL $106(*(($0 + [124])))
	
.LABEL $label$1
	if ( ((*($0 + [104]) & [1]) == 0) ){ goto $label$2 }
	CALL $106(*(($0 + [112])))
	
.LABEL $label$2
	if ( ((*($0 + [92]) & [1]) == 0) ){ goto $label$3 }
	CALL $106(*(($0 + [100])))
	
.LABEL $label$3
	if ( ((*($0 + [80]) & [1]) == 0) ){ goto $label$4 }
	CALL $106(*(($0 + [88])))
	
.LABEL $label$4
	if ( ((*($0 + [68]) & [1]) == 0) ){ goto $label$5 }
	CALL $106(*(($0 + [76])))
	
.LABEL $label$5
	if ( ((*($0 + [56]) & [1]) == 0) ){ goto $label$6 }
	CALL $106(*(($0 + [64])))
	
.LABEL $label$6
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [1680])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [1728])
	$2 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = *($1)
	$3 = ([0] - $2)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(*($8)) == (int_32)$6) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$2), [1792])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $106($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $106($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
}

int_32 .FUNC $59 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [40]) = (int_64)0
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [16])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [80])
	*(($2 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [16])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [80])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [1680])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [1728])
	$2 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = *($1)
	$3 = ([0] - $2)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(*($8)) == (int_32)$6) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$2), [1792])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $106($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $106($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [92]))
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [56])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($0 + [4]), $2, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [1152])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $105(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $106($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $106($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	*($0 + [72]) = (int_64)0
	*(($4 = ($0 + [80]))) = (int_64)1398362884
	CALL eosio_assert([1], [16])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [80])
	*($0 + [88]) = $1
	*($6 + [8]) = *($2 + [4])
	*($6 + [20]) = ($0 + [8])
	*($6 + [16]) = $0
	*($6 + [24]) = ($0 + [16])
	*($6 + [28]) = ($0 + [24])
	*($6 + [32]) = ($0 + [32])
	*($6 + [36]) = ($0 + [36])
	*($6 + [40]) = ($0 + [40])
	*($6 + [44]) = ($0 + [44])
	*($6 + [48]) = ($0 + [48])
	*($6 + [52]) = ($0 + [52])
	*($6 + [56]) = ($0 + [56])
	*($6 + [60]) = ($0 + [60])
	*($6 + [64]) = ($0 + [64])
	*($6 + [68]) = ($0 + [68])
	*($6 + [72]) = ($0 + [72])
	CALL $54(($6 + [16]), ($6 + [8]))
	*($0 + [92]) = *(*($2 + [8]))
	*([0] + [4]) = ($6 + [80])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [56])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($2, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [1264])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $105(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $106($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $106($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1232])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $105([88])
	CALL $59($6)
	*($6 + [72]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [20])
	*($8 + [56]) = ($6 + [24])
	*($8 + [60]) = ($6 + [28])
	*($8 + [64]) = ($6 + [32])
	*($8 + [68]) = ($6 + [40])
	*($8 + [72]) = ($6 + [56])
	CALL $62(($8 + [40]), ($8 + [32]))
	*($6 + [76]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $61(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $106($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

int_32 .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [76]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1920])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-5031787421168041984)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1856])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1856])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $56(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [11040])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [11024]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [11056]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $105($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1152])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1152])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1152])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $113 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $105(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $106($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $109($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1280])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $30($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [1264])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $29($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $110($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $105($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $110($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $106($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $107($7)
	return (unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $105(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $113($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $106($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $107 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $106 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC _ZN10farmeosrcp9nextroundEyN5eosio5assetEmy (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	*($10 + [40]) = $1
	*($10 + [32]) = $4
	$5 = *(($0 + [72]))
	$9 = *(($0 + [76]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_32)*(*($8)) == (int_32)$3) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [48])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$4 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [204]) == (int_32)$7), [512])
	goto $label$3 
	
.LABEL $label$4
	$8 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-4816278077707386880, (CASTING uint_64)(uint_32 $3))
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$5 }
	$8 = CALL $14($7, $8)
	CALL eosio_assert(((int_32)*($8 + [204]) == (int_32)$7), [512])
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$3
	*($10 + [28]) = $8
	*($10 + [24]) = $7
	$9 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($9, [928])
	$3 = *($8 + [144])
	CALL eosio_assert((((int_32)$3 == (int_32)[1]) | ((int_32)$3 == (int_32)[4])), [960])
	CALL eosio_assert(((int_64)*(($8 + [192])) == (int_64)*($2 + [8])), [992])
	CALL eosio_assert(((int_64)*($8 + [184]) == (int_64)*($2)), [1056])
	$4 = *($0)
	*($10 + [12]) = ($10 + [24])
	*($10 + [8]) = ($10 + [40])
	*($10 + [16]) = ($10 + [32])
	CALL eosio_assert($9, [672])
	CALL $22($7, $8, $4, ($10 + [8]))
	*([0] + [4]) = ($10 + [48])
}

void .FUNC _ZN10farmeosrcp8joinroomEyN5eosio5assetEmy (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($10 + [24]) = $1
	*($10 + [16]) = $4
	$5 = *(($0 + [72]))
	$9 = *(($0 + [76]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_32)*(*($8)) == (int_32)$3) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [48])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$4 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [204]) == (int_32)$7), [512])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-4816278077707386880, (CASTING uint_64)(uint_32 $3))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $14($7, $9)
	CALL eosio_assert(((int_32)*($8 + [204]) == (int_32)$7), [512])
	
.LABEL $label$3
	$9 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($9, [928])
	$3 = *($8 + [144])
	CALL eosio_assert((((int_32)$3 == (int_32)[1]) | ((int_32)$3 == (int_32)[4])), [960])
	CALL eosio_assert(((int_64)*(($8 + [192])) == (int_64)*($2 + [8])), [992])
	CALL eosio_assert(((int_64)*($8 + [184]) == (int_64)*($2)), [1056])
	$4 = *($0)
	*($10 + [12]) = ($10 + [16])
	*($10 + [8]) = ($10 + [24])
	CALL eosio_assert($9, [672])
	CALL $26($7, $8, $4, ($10 + [8]))
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	$4 = *($2)
	$2 = *($0 + [32])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $4)
	
.LABEL $label$2
	$4 = *($2)
	$2 = *($0 + [36])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($3) = ($2 + $4)
	
.LABEL $label$4
	$4 = *($2)
	$2 = *($0 + [40])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$6 }
	*($3) = ($2 + $4)
	
.LABEL $label$6
	$4 = *($2)
	$2 = *($0 + [44])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$7:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$8 }
	*($3) = ($2 + $4)
	
.LABEL $label$8
	$4 = *($2)
	$2 = *($0 + [48])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$9:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$9 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$10 }
	*($3) = ($2 + $4)
	
.LABEL $label$10
	$4 = *($0)
	$0 = *($0 + [52])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$2 = *($1)
	$4 = *($2)
	
.LOOP $label$11:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$11 }
	*($2) = $4
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$12 }
	*($2) = ($0 + $4)
	
.LABEL $label$12
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [1])
	*(($4 = *($1))) = (*($4) + [1])
	*(($4 = *($1))) = (*($4) + [1])
	*(($4 = *($1))) = (*($4) + [16])
	*(($4 = *($1))) = (*($4) + [4])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	$36 = (*([0] + [4]) - [144])
	$35 = $36
	*([0] + [4]) = $36
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [720])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [768])
	$4 = *($1)
	$34 = *(*($3 + [4]) + [4])
	$5 = *(*($3))
	if ( ((int_64)$5 != (int_64)*($34 + [8])) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($34 + [176]) ^ (int_32)[1]), [1088])
	$3 = *($3 + [8])
	*($1 + [176]) = [1]
	*($1 + [32]) = *($3)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$5 != (int_64)*($34 + [16])) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($34 + [177]) ^ (int_32)[1]), [1104])
	$3 = *($3 + [8])
	*($1 + [177]) = [1]
	*($1 + [40]) = *($3)
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)$5 != (int_64)*($34 + [24])) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($34 + [178]) ^ (int_32)[1]), [1104])
	$3 = *($3 + [8])
	*($1 + [178]) = [1]
	*($1 + [48]) = *($3)
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [1120])
	
.LABEL $label$1
	*($1 + [136]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)60) & (int_64)4294967295)
	$7 = ($1 + [4])
	$6 = ($1 + [136])
	$3 = *($1 + [4])
	if ( ((int_32)$3 == (int_32)[3]) ){ goto $label$7 }
	if ( ((int_32)$3 != (int_32)[2]) ){ goto $label$5 }
	if ( (*($1 + [176]) == 0) ){ goto $label$5 }
	if ( *($1 + [177]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( (*($1 + [176]) == 0) ){ goto $label$5 }
	if ( (*($1 + [177]) == 0) ){ goto $label$5 }
	if ( (*($1 + [178]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	*($1 + [144]) = [2]
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$4 == (int_32)*($1)), [832])
	*($35 + [16]) = [0]
	*($35) = ($35 + [16])
	*($35 + [28]) = $7
	*($35 + [24]) = $1
	$8 = ($1 + [8])
	*($35 + [32]) = $8
	$9 = ($1 + [16])
	*($35 + [36]) = $9
	$10 = ($1 + [24])
	*($35 + [40]) = $10
	$11 = ($1 + [32])
	*($35 + [44]) = $11
	$12 = ($1 + [40])
	*($35 + [48]) = $12
	$13 = ($1 + [48])
	*($35 + [52]) = $13
	$14 = ($1 + [56])
	*($35 + [56]) = $14
	$15 = ($1 + [68])
	*($35 + [60]) = $15
	$16 = ($1 + [80])
	*($35 + [64]) = $16
	$17 = ($1 + [92])
	*($35 + [68]) = $17
	$18 = ($1 + [104])
	*($35 + [72]) = $18
	$19 = ($1 + [116])
	*($35 + [76]) = $19
	$20 = ($1 + [128])
	*($35 + [80]) = $20
	*($35 + [84]) = $6
	$21 = ($1 + [144])
	*($35 + [88]) = $21
	$22 = ($1 + [148])
	*($35 + [92]) = $22
	$23 = ($1 + [152])
	*($35 + [96]) = $23
	$24 = ($1 + [156])
	*($35 + [100]) = $24
	$25 = ($1 + [160])
	*($35 + [104]) = $25
	$26 = ($1 + [164])
	*($35 + [108]) = $26
	$27 = ($1 + [168])
	*($35 + [112]) = $27
	$28 = ($1 + [172])
	*($35 + [116]) = $28
	$29 = ($1 + [176])
	*($35 + [120]) = $29
	$30 = ($1 + [177])
	*($35 + [124]) = $30
	$31 = ($1 + [178])
	*($35 + [128]) = $31
	$32 = ($1 + [184])
	*($35 + [132]) = $32
	$33 = ($1 + [200])
	*($35 + [136]) = $33
	CALL $23(($35 + [24]), $35)
	$34 = *($35 + [16])
	if ( ($34 <= [513]) ){ goto $label$9 }
	$3 = CALL malloc($34)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($36 - (($34 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$8
	$5 = (CASTING uint_64)(uint_32 $4)
	*($35 + [4]) = $3
	*($35) = $3
	*($35 + [8]) = ($3 + $34)
	*($35 + [16]) = $35
	*($35 + [28]) = $7
	*($35 + [32]) = $8
	*($35 + [36]) = $9
	*($35 + [40]) = $10
	*($35 + [44]) = $11
	*($35 + [48]) = $12
	*($35 + [24]) = $1
	*($35 + [52]) = $13
	*($35 + [56]) = $14
	*($35 + [60]) = $15
	*($35 + [64]) = $16
	*($35 + [68]) = $17
	*($35 + [72]) = $18
	*($35 + [76]) = $19
	*($35 + [80]) = $20
	*($35 + [84]) = $6
	*($35 + [88]) = $21
	*($35 + [92]) = $22
	*($35 + [96]) = $23
	*($35 + [100]) = $24
	*($35 + [104]) = $25
	*($35 + [108]) = $26
	*($35 + [112]) = $27
	*($35 + [116]) = $28
	*($35 + [120]) = $29
	*($35 + [124]) = $30
	*($35 + [128]) = $31
	*($35 + [132]) = $32
	*($35 + [136]) = $33
	CALL $24(($35 + [24]), ($35 + [16]))
	CALL db_update_i64(*($1 + [208]), $2, $3, $34)
	if ( ($34 <= [513]) ){ goto $label$10 }
	CALL free($3)
	
.LABEL $label$10
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$11
	*([0] + [4]) = ($35 + [144])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1152])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1152])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $25(*($1), *($0 + [32]))
	CALL $25(*($1), *($0 + [36]))
	CALL $25(*($1), *($0 + [40]))
	CALL $25(*($1), *($0 + [44]))
	CALL $25(*($1), *($0 + [48]))
	CALL $25(*($1), *($0 + [52]))
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($1)
	*($5 + [15]) = *(*($0 + [96]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1152])
	CALL memcpy(*($2 + [4]), ($5 + [15]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	*($5 + [14]) = *(*($0 + [100]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1152])
	CALL memcpy(*($2 + [4]), ($5 + [14]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	*($5 + [13]) = *(*($0 + [104]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1152])
	CALL memcpy(*($2 + [4]), ($5 + [13]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [112])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $28(*($1), *($0 + [32]))
	CALL $28(*($1), *($0 + [36]))
	CALL $28(*($1), *($0 + [40]))
	CALL $28(*($1), *($0 + [44]))
	CALL $28(*($1), *($0 + [48]))
	CALL $28(*($1), *($0 + [52]))
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1264])
	CALL memcpy(($5 + [15]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [15]) != (int_32)[0])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1264])
	CALL memcpy(($5 + [14]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [14]) != (int_32)[0])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1264])
	CALL memcpy(($5 + [13]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [13]) != (int_32)[0])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1264])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [112])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	$36 = (*([0] + [4]) - [144])
	$37 = $36
	*([0] + [4]) = $36
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [720])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [768])
	$6 = ($1 + [4])
	$4 = *($1)
	$34 = *($1 + [4])
	if ( ((int_32)$34 == (int_32)[2]) ){ goto $label$8 }
	if ( ((int_32)$34 != (int_32)[3]) ){ goto $label$7 }
	CALL eosio_assert((int_64)(((int_64)((int_64)*($1 + [16]) & (int_64)*($1 + [8])) & (int_64)*($1 + [24])) == 0), [1168])
	$34 = ($1 + [16])
	$5 = *($1 + [8])
	if ( ((int_64)$5 == (int_64)0) ){ goto $label$6 }
	$33 = *($34)
	if ( ((int_64)$33 == (int_64)0) ){ goto $label$3 }
	$35 = ($1 + [24])
	if ( ((int_64)*($35) != (int_64)0) ){ goto $label$2 }
	*($35) = *(*($3))
	$3 = *($3 + [4])
	*($1 + [178]) = [1]
	*($1 + [48]) = *($3)
	goto $label$2 
	
.LABEL $label$8
	CALL eosio_assert((int_64)(((int_64)*($1 + [16]) & (int_64)*($1 + [8])) == 0), [1168])
	$5 = *(*($3))
	$7 = *($1 + [8])
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$5 }
	*(($1 + [16])) = $5
	$3 = *($3 + [4])
	*($1 + [177]) = [1]
	*($1 + [40]) = *($3)
	$3 = ($1 + [176])
	$33 = $5
	$5 = $7
	goto $label$4 
	
.LABEL $label$7
	$34 = ($1 + [16])
	$35 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$6
	$5 = *(*($3))
	*(($1 + [8])) = $5
	$3 = *($3 + [4])
	*($1 + [176]) = [1]
	*($1 + [32]) = *($3)
	$33 = *(($1 + [16]))
	goto $label$2 
	
.LABEL $label$5
	*(($1 + [8])) = $5
	$3 = *($3 + [4])
	*($1 + [176]) = [1]
	*($1 + [32]) = *($3)
	$3 = ($1 + [176])
	$33 = *(($1 + [16]))
	
.LABEL $label$4
	$34 = ($1 + [16])
	$35 = ($1 + [8])
	CALL eosio_assert(((int_64)$5 != (int_64)$33), [1184])
	if ( (*($3) == 0) ){ goto $label$1 }
	if ( (*($1 + [177]) == 0) ){ goto $label$1 }
	*($1 + [144]) = [2]
	goto $label$1 
	
.LABEL $label$3
	$33 = *(*($3))
	*(($1 + [16])) = $33
	$3 = *($3 + [4])
	*($1 + [177]) = [1]
	*($1 + [40]) = *($3)
	
.LABEL $label$2
	$3 = [0]
	if ( ((int_64)$5 == (int_64)$33) ){ goto $label$9 }
	$7 = *(($1 + [24]))
	$3 = (((int_64)$5 != (int_64)$7) & ((int_64)$33 != (int_64)$7))
	
.LABEL $label$9
	$35 = ($1 + [8])
	CALL eosio_assert($3, [1200])
	if ( (*($1 + [176]) == 0) ){ goto $label$1 }
	if ( (*($1 + [177]) == 0) ){ goto $label$1 }
	if ( (*($1 + [178]) == 0) ){ goto $label$1 }
	*($1 + [144]) = [2]
	
.LABEL $label$1
	*($1 + [136]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)60) & (int_64)4294967295)
	CALL eosio_assert(((int_32)$4 == (int_32)*($1)), [832])
	*($37 + [16]) = [0]
	*($37) = ($37 + [16])
	*($37 + [28]) = $6
	*($37 + [24]) = $1
	*($37 + [32]) = $35
	*($37 + [36]) = $34
	$9 = ($1 + [24])
	*($37 + [40]) = $9
	$10 = ($1 + [32])
	*($37 + [44]) = $10
	$11 = ($1 + [40])
	*($37 + [48]) = $11
	$12 = ($1 + [48])
	*($37 + [52]) = $12
	$13 = ($1 + [56])
	*($37 + [56]) = $13
	$14 = ($1 + [68])
	*($37 + [60]) = $14
	$15 = ($1 + [80])
	*($37 + [64]) = $15
	$16 = ($1 + [92])
	*($37 + [68]) = $16
	$17 = ($1 + [104])
	*($37 + [72]) = $17
	$18 = ($1 + [116])
	*($37 + [76]) = $18
	$19 = ($1 + [128])
	*($37 + [80]) = $19
	$8 = ($1 + [136])
	*($37 + [84]) = $8
	$20 = ($1 + [144])
	*($37 + [88]) = $20
	$21 = ($1 + [148])
	*($37 + [92]) = $21
	$22 = ($1 + [152])
	*($37 + [96]) = $22
	$23 = ($1 + [156])
	*($37 + [100]) = $23
	$24 = ($1 + [160])
	*($37 + [104]) = $24
	$25 = ($1 + [164])
	*($37 + [108]) = $25
	$26 = ($1 + [168])
	*($37 + [112]) = $26
	$27 = ($1 + [172])
	*($37 + [116]) = $27
	$28 = ($1 + [176])
	*($37 + [120]) = $28
	$29 = ($1 + [177])
	*($37 + [124]) = $29
	$30 = ($1 + [178])
	*($37 + [128]) = $30
	$31 = ($1 + [184])
	*($37 + [132]) = $31
	$32 = ($1 + [200])
	*($37 + [136]) = $32
	CALL $23(($37 + [24]), $37)
	$3 = *($37 + [16])
	if ( ($3 <= [513]) ){ goto $label$11 }
	$36 = CALL malloc($3)
	goto $label$10 
	
.LABEL $label$11
	$36 = ($36 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $36
	
.LABEL $label$10
	$5 = (CASTING uint_64)(uint_32 $4)
	*($37 + [4]) = $36
	*($37) = $36
	*($37 + [8]) = ($36 + $3)
	*($37 + [16]) = $37
	*($37 + [28]) = $6
	*($37 + [32]) = $35
	*($37 + [36]) = $34
	*($37 + [40]) = $9
	*($37 + [44]) = $10
	*($37 + [48]) = $11
	*($37 + [24]) = $1
	*($37 + [52]) = $12
	*($37 + [56]) = $13
	*($37 + [60]) = $14
	*($37 + [64]) = $15
	*($37 + [68]) = $16
	*($37 + [72]) = $17
	*($37 + [76]) = $18
	*($37 + [80]) = $19
	*($37 + [84]) = $8
	*($37 + [88]) = $20
	*($37 + [92]) = $21
	*($37 + [96]) = $22
	*($37 + [100]) = $23
	*($37 + [104]) = $24
	*($37 + [108]) = $25
	*($37 + [112]) = $26
	*($37 + [116]) = $27
	*($37 + [120]) = $28
	*($37 + [124]) = $29
	*($37 + [128]) = $30
	*($37 + [132]) = $31
	*($37 + [136]) = $32
	CALL $24(($37 + [24]), ($37 + [16]))
	CALL db_update_i64(*($1 + [208]), $2, $36, $3)
	if ( ($3 <= [513]) ){ goto $label$12 }
	CALL free($36)
	
.LABEL $label$12
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$13
	*([0] + [4]) = ($37 + [144])
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $105($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $106($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1152])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [1152])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $36($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1152])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1152])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1152])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $36(CALL $35($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $109($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $106($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $106($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $106($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $106($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $106($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $106($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $106($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $106($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $66($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $30($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $67($4, $1)
	CALL $69(CALL $68(CALL $68($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [1152])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [1152])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [1152])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [1152])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [1152])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $105(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $106($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $106($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [1152])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($0 + [4]), $2, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [1152])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = *($0)
	$9 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$5 = ($9 + [1])
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$7 = ($8 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $105(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$5 = ($8 + ((int_32)$7 * (int_32)[40]))
	$9 = ($8 + ((int_32)$9 * (int_32)[40]))
	$8 = CALL $10($9, $1, *($2), *($3), $4)
	$6 = ($8 + [40])
	$7 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$6 }
	$4 = ([0] - $7)
	$7 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($7 + [-12]))
	*(($8 + [-40])) = *(($7 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($2 = ($8 + [-16]))) = [0]
	$3 = ($7 + [-4])
	*($1) = *($3)
	*(($8 + [-20])) = *($7)
	$1 = ($7 + [4])
	*($2) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($3) = (int_64)0
	*(($2 = ($8 + [-4]))) = [0]
	$3 = ($7 + [8])
	*($1) = *($3)
	*(($8 + [-8])) = *(($7 + [12]))
	$8 = ($7 + [16])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$9 = ($9 + [-40])
	$8 = $9
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $4) != (int_32)[-20]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $7
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	$9 = ([0] - $1)
	$7 = ($7 + [-24])
	
.LOOP $label$9:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($7 + [16])) = $8
	CALL $106($8)
	
.LABEL $label$10
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$11 }
	*(($7 + [4])) = $8
	CALL $106($8)
	
.LABEL $label$11
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $9) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $106($1)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1264])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($2, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [1264])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $102([2528], $0)
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $114(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $114(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $106(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $106(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $103 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11014]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11016])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11014]) = [1]
	$7 = ($7 << [16])
	*([0] + [11016]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11016])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11016]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11014]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11014]) = [1]
	$3 = ($3 << [16])
	*([0] + [11016]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11016])
	
.LABEL $label$8
	*([0] + [11016]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $103($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10928])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11020])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10912])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10720]
	$1 = (((int_32)$2 * (int_32)[12]) + [10720])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [208])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [2432]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [2448]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [2464])
	
.LABEL $label$7
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [272]
	$9 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$22 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [288]
	$9 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$24
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$20 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [288]
	$9 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$34 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$30
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	*(($11 + [136])) = $0
	*(($11 + [144])) = (int_64)-1
	*(($11 + [152])) = (int_64)0
	*(($11 + [160])) = [0]
	*($11 + [128]) = $0
	*($11 + [120]) = $0
	*($11 + [168]) = $0
	*(($11 + [176])) = $0
	*(($11 + [184])) = (int_64)-1
	*(($11 + [192])) = [0]
	*(($11 + [196])) = [0]
	*(($11 + [200])) = [0]
	if ( ((int_64)$2 <= (int_64)-3617168760277827585) ){ goto $label$41 }
	if ( ((int_64)$2 > (int_64)5382252765718249471) ){ goto $label$40 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$39 }
	if ( ((int_64)$2 != (int_64)-3075276126730321920) ){ goto $label$35 }
	*($11 + [84]) = [0]
	*($11 + [80]) = [1]
	*($11 + [40 align=4]) = *($11 + [80])
	CALL $93(($11 + [120]), ($11 + [40]))
	goto $label$35 
	
.LABEL $label$41
	if ( ((int_64)$2 == (int_64)-8462908706935275520) ){ goto $label$38 }
	if ( ((int_64)$2 == (int_64)-4139046214987202560) ){ goto $label$37 }
	if ( ((int_64)$2 != (int_64)-4139046209021919232) ){ goto $label$35 }
	*($11 + [100]) = [0]
	*($11 + [96]) = [2]
	*($11 + [24 align=4]) = *($11 + [96])
	CALL $92(($11 + [120]), ($11 + [24]))
	goto $label$35 
	
.LABEL $label$40
	if ( ((int_64)$2 == (int_64)5382252765718249472) ){ goto $label$36 }
	if ( ((int_64)$2 != (int_64)8426423898551091200) ){ goto $label$35 }
	*($11 + [108]) = [0]
	*($11 + [104]) = [3]
	*($11 + [16 align=4]) = *($11 + [104])
	CALL $91(($11 + [120]), ($11 + [16]))
	goto $label$35 
	
.LABEL $label$39
	*($11 + [116]) = [0]
	*($11 + [112]) = [4]
	*($11 + [8 align=4]) = *($11 + [112])
	CALL $90(($11 + [120]), ($11 + [8]))
	goto $label$35 
	
.LABEL $label$38
	*($11 + [76]) = [0]
	*($11 + [72]) = [5]
	*($11 + [48 align=4]) = *($11 + [72])
	CALL $94(($11 + [120]), ($11 + [48]))
	goto $label$35 
	
.LABEL $label$37
	*($11 + [92]) = [0]
	*($11 + [88]) = [6]
	*($11 + [32 align=4]) = *($11 + [88])
	CALL $92(($11 + [120]), ($11 + [32]))
	goto $label$35 
	
.LABEL $label$36
	*($11 + [68]) = [0]
	*($11 + [64]) = [7]
	*($11 + [56 align=4]) = *($11 + [64])
	CALL $95(($11 + [120]), ($11 + [56]))
	
.LABEL $label$35
	$4 = *(($11 + [192]))
	if ( ($4 == 0) ){ goto $label$42 }
	$5 = ($11 + [196])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$44 }
	
.LOOP $label$45:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$46 }
	CALL $18($3)
	CALL $106($3)
	
.LABEL $label$46
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$45 }
	$6 = *(($11 + [192]))
	goto $label$43 
	
.LABEL $label$44
	$6 = $4
	
.LABEL $label$43
	*($5) = $4
	CALL $106($6)
	
.LABEL $label$42
	$4 = *(($11 + [152]))
	if ( ($4 == 0) ){ goto $label$20 }
	$5 = ($11 + [156])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$48 }
	
.LOOP $label$49:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$50 }
	CALL $106($3)
	
.LABEL $label$50
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$49 }
	$6 = *(($11 + [152]))
	goto $label$47 
	
.LABEL $label$48
	$6 = $4
	
.LABEL $label$47
	*($5) = $4
	CALL $106($6)
	
.LABEL $label$20
	*([0] + [4]) = ($11 + [208])
}

void .FUNC _Z1av ()
{
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [1680])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [1728])
	$2 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = *($1)
	$3 = ([0] - $2)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(*($8)) == (int_32)$6) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$2), [1792])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $18($4)
	CALL $106($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $18($4)
	CALL $106($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [208]))
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	$36 = (*([0] + [4]) - [144])
	$35 = $36
	*([0] + [4]) = $36
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [720])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [768])
	$4 = *($1)
	$33 = *(*($3) + [4])
	if ( ((int_32)*($33 + [144]) != (int_32)[3]) ){ goto $label$2 }
	$34 = *($33 + [92])
	$6 = CALL strlen([1376])
	if ( ((int_32)$6 != (int_32)( *(($33 + [96])) ? uint_32($34 >> [1]) : ($34 & [1]) )) ){ goto $label$3 }
	if ( CALL $112(($33 + [92]), [0], [-1], [1376], $6) ){ goto $label$3 }
	CALL $111(($1 + [92]), [2416])
	
.LABEL $label$3
	$33 = *($3 + [104])
	$3 = *(*($3) + [4])
	$34 = CALL strlen([1376])
	if ( ((int_32)$34 != (int_32)( *(($3 + [108])) ? uint_32($33 >> [1]) : ($33 & [1]) )) ){ goto $label$4 }
	if ( CALL $112(($3 + [104]), [0], [-1], [1376], $34) ){ goto $label$4 }
	CALL $111(($1 + [104]), [2416])
	
.LABEL $label$4
	$34 = ($1 + [4])
	if ( ((int_32)*($1 + [4]) != (int_32)[3]) ){ goto $label$1 }
	$3 = *($1 + [116])
	$33 = CALL strlen([1376])
	if ( ((int_32)$33 != (int_32)( *(($1 + [120])) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$1 }
	$3 = ($1 + [116])
	if ( CALL $112($3, [0], [-1], [1376], $33) ){ goto $label$1 }
	CALL $111($3, [2416])
	goto $label$1 
	
.LABEL $label$2
	$34 = ($1 + [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 == (int_32)*($1)), [832])
	*($35 + [16]) = [0]
	*($35) = ($35 + [16])
	*($35 + [28]) = $34
	*($35 + [24]) = $1
	$6 = ($1 + [8])
	*($35 + [32]) = $6
	$7 = ($1 + [16])
	*($35 + [36]) = $7
	$8 = ($1 + [24])
	*($35 + [40]) = $8
	$9 = ($1 + [32])
	*($35 + [44]) = $9
	$10 = ($1 + [40])
	*($35 + [48]) = $10
	$11 = ($1 + [48])
	*($35 + [52]) = $11
	$12 = ($1 + [56])
	*($35 + [56]) = $12
	$13 = ($1 + [68])
	*($35 + [60]) = $13
	$14 = ($1 + [80])
	*($35 + [64]) = $14
	$15 = ($1 + [92])
	*($35 + [68]) = $15
	$16 = ($1 + [104])
	*($35 + [72]) = $16
	$17 = ($1 + [116])
	*($35 + [76]) = $17
	$18 = ($1 + [128])
	*($35 + [80]) = $18
	$19 = ($1 + [136])
	*($35 + [84]) = $19
	$20 = ($1 + [144])
	*($35 + [88]) = $20
	$21 = ($1 + [148])
	*($35 + [92]) = $21
	$22 = ($1 + [152])
	*($35 + [96]) = $22
	$23 = ($1 + [156])
	*($35 + [100]) = $23
	$24 = ($1 + [160])
	*($35 + [104]) = $24
	$25 = ($1 + [164])
	*($35 + [108]) = $25
	$26 = ($1 + [168])
	*($35 + [112]) = $26
	$27 = ($1 + [172])
	*($35 + [116]) = $27
	$28 = ($1 + [176])
	*($35 + [120]) = $28
	$29 = ($1 + [177])
	*($35 + [124]) = $29
	$30 = ($1 + [178])
	*($35 + [128]) = $30
	$31 = ($1 + [184])
	*($35 + [132]) = $31
	$32 = ($1 + [200])
	*($35 + [136]) = $32
	CALL $23(($35 + [24]), $35)
	$33 = *($35 + [16])
	if ( ($33 <= [513]) ){ goto $label$6 }
	$3 = CALL malloc($33)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($36 - (($33 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$5
	$5 = (CASTING uint_64)(uint_32 $4)
	*($35 + [4]) = $3
	*($35) = $3
	*($35 + [8]) = ($3 + $33)
	*($35 + [16]) = $35
	*($35 + [28]) = $34
	*($35 + [32]) = $6
	*($35 + [36]) = $7
	*($35 + [40]) = $8
	*($35 + [44]) = $9
	*($35 + [48]) = $10
	*($35 + [24]) = $1
	*($35 + [52]) = $11
	*($35 + [56]) = $12
	*($35 + [60]) = $13
	*($35 + [64]) = $14
	*($35 + [68]) = $15
	*($35 + [72]) = $16
	*($35 + [76]) = $17
	*($35 + [80]) = $18
	*($35 + [84]) = $19
	*($35 + [88]) = $20
	*($35 + [92]) = $21
	*($35 + [96]) = $22
	*($35 + [100]) = $23
	*($35 + [104]) = $24
	*($35 + [108]) = $25
	*($35 + [112]) = $26
	*($35 + [116]) = $27
	*($35 + [120]) = $28
	*($35 + [124]) = $29
	*($35 + [128]) = $30
	*($35 + [132]) = $31
	*($35 + [136]) = $32
	CALL $24(($35 + [24]), ($35 + [16]))
	CALL db_update_i64(*($1 + [208]), $2, $3, $33)
	if ( ($33 <= [513]) ){ goto $label$7 }
	CALL free($3)
	
.LABEL $label$7
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$8
	*([0] + [4]) = ($35 + [144])
}

void .FUNC _ZN10farmeosrcp7destoryEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [160])
	*([0] + [4]) = $11
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1296]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	$3 = *(($0 + [72]))
	$10 = *(($0 + [76]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$5 }
	$5 = ($10 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_32)*(*($5)) == (int_32)$1) ){ goto $label$5 }
	$10 = $5
	$2 = ($5 + [-24])
	$5 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [48])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$8 }
	$2 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [204]) == (int_32)$5), [512])
	*($11 + [148]) = $2
	*($11 + [144]) = $5
	$10 = (($11 + [144]) | [4])
	goto $label$7 
	
.LABEL $label$8
	$2 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-4816278077707386880, (CASTING uint_64)(uint_32 $1))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$9 }
	$2 = CALL $14($5, $2)
	CALL eosio_assert(((int_32)*($2 + [204]) == (int_32)$5), [512])
	*($11 + [148]) = $2
	*($11 + [144]) = $5
	$10 = (($11 + [144]) | [4])
	goto $label$7 
	
.LABEL $label$9
	$2 = [0]
	*($11 + [148]) = [0]
	*($11 + [144]) = $5
	$10 = (($11 + [144]) | [4])
	
.LABEL $label$7
	CALL eosio_assert(((uint_64)((int_64)((uint_64)CALL $fimport$5() / (uint_64)(int_64)1000000) & (int_64)4294967295) >= (uint_64)*($2 + [136])), [2368])
	$7 = *($0)
	*($11 + [152]) = ($11 + [144])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [672])
	CALL $86($5, $2, $7, ($11 + [152]))
	$2 = *($10)
	$4 = *($2 + [144])
	if ( ((int_32)$4 != (int_32)[3]) ){ goto $label$10 }
	CALL _ZN10farmeosrcp7processEm($0, $1)
	$2 = *($10)
	$4 = *($2 + [144])
	
.LABEL $label$10
	if ( ((uint_32)$4 > (uint_32)[4]) ){ goto $label$14 }
	if ( ((([1] << $4) & [22]) == 0) ){ goto $label$14 }
	if ( (*($2 + [176]) == 0) ){ goto $label$15 }
	*(($11 + [140])) = *(($2 + [196]))
	*((($11 + [128]) + [8])) = *(($2 + [192]))
	*($11 + [128]) = *($2 + [184])
	*($11 + [132]) = *(($2 + [188]))
	$7 = *($2 + [8])
	*((($11 + [112]) + [8])) = [0]
	*($11 + [112]) = (int_64)0
	$2 = CALL strlen([2400])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$18 }
	*($11 + [112]) = ($2 << [1])
	$4 = (($11 + [112]) | [1])
	if ( $2 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $105($3)
	*($11 + [112]) = ($3 | [1])
	*($11 + [120]) = $4
	*($11 + [116]) = $2
	
.LABEL $label$17
	CALL memcpy($4, [2400], $2)
	
.LABEL $label$16
	*(($4 + $2)) = [0]
	*((($11 + [32]) + [8])) = *((($11 + [128]) + [8]))
	*($11 + [32]) = *($11 + [128])
	CALL _ZN10farmeosrcp13delaytransferEmyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $1, $7, ($11 + [32]), ($11 + [112]))
	if ( ((*($11 + [112]) & [1]) == 0) ){ goto $label$15 }
	CALL $106(*($11 + [120]))
	
.LABEL $label$15
	$2 = *($10)
	if ( (*($2 + [177]) == 0) ){ goto $label$19 }
	*(($11 + [108])) = *(($2 + [196]))
	*((($11 + [96]) + [8])) = *(($2 + [192]))
	*($11 + [96]) = *($2 + [184])
	*($11 + [100]) = *(($2 + [188]))
	$7 = *($2 + [16])
	*((($11 + [80]) + [8])) = [0]
	*($11 + [80]) = (int_64)0
	$2 = CALL strlen([2400])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$22 }
	*($11 + [80]) = ($2 << [1])
	$4 = (($11 + [80]) | [1])
	if ( $2 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $105($3)
	*($11 + [80]) = ($3 | [1])
	*($11 + [88]) = $4
	*($11 + [84]) = $2
	
.LABEL $label$21
	CALL memcpy($4, [2400], $2)
	
.LABEL $label$20
	*(($4 + $2)) = [0]
	*((($11 + [16]) + [8])) = *((($11 + [96]) + [8]))
	*($11 + [16]) = *($11 + [96])
	CALL _ZN10farmeosrcp13delaytransferEmyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $1, $7, ($11 + [16]), ($11 + [80]))
	if ( ((*($11 + [80]) & [1]) == 0) ){ goto $label$19 }
	CALL $106(*($11 + [88]))
	
.LABEL $label$19
	$2 = *($10)
	if ( (*($2 + [178]) == 0) ){ goto $label$23 }
	*(($11 + [76])) = *(($2 + [196]))
	*((($11 + [64]) + [8])) = *(($2 + [192]))
	*($11 + [64]) = *($2 + [184])
	*($11 + [68]) = *(($2 + [188]))
	$7 = *($2 + [24])
	*((($11 + [48]) + [8])) = [0]
	*($11 + [48]) = (int_64)0
	$2 = CALL strlen([2400])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$26 }
	*($11 + [48]) = ($2 << [1])
	$10 = (($11 + [48]) | [1])
	if ( $2 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$4 = (($2 + [16]) & [-16])
	$10 = CALL $105($4)
	*($11 + [48]) = ($4 | [1])
	*($11 + [56]) = $10
	*($11 + [52]) = $2
	
.LABEL $label$25
	CALL memcpy($10, [2400], $2)
	
.LABEL $label$24
	*(($10 + $2)) = [0]
	*(($11 + [8])) = *((($11 + [64]) + [8]))
	*($11) = *($11 + [64])
	CALL _ZN10farmeosrcp13delaytransferEmyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $1, $7, $11, ($11 + [48]))
	if ( ((*($11 + [48]) & [1]) == 0) ){ goto $label$23 }
	CALL $106(*($11 + [56]))
	
.LABEL $label$23
	$2 = [0]
	$1 = CALL db_lowerbound_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-4816278077707386880, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$27 }
	$2 = CALL $14($5, $1)
	
.LABEL $label$27
	$1 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($1, [1600])
	CALL eosio_assert($1, [1648])
	$1 = CALL db_next_i64(*($2 + [208]), ($11 + [152]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$28 }
	CALL $14($5, $1)
	
.LABEL $label$28
	CALL $87($5, $2)
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [160])
	return (unreachable)
	
.LABEL $label$13
	CALL $107(($11 + [112]))
	
.LABEL $label$12
	CALL $107(($11 + [80]))
	
.LABEL $label$11
	CALL $107(($11 + [48]))
	(unreachable)
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	$36 = (*([0] + [4]) - [144])
	$35 = $36
	*([0] + [4]) = $36
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [720])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [768])
	$4 = *($1)
	$5 = *(*(($3 + [4])))
	$34 = *(*($3) + [4])
	if ( ((int_64)*($34 + [8]) != (int_64)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($34 + [176]) ^ (int_32)[1]), [2352])
	$3 = ($1 + [8])
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)*($34 + [16]) != (int_64)$5) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($34 + [177]) ^ (int_32)[1]), [2352])
	$3 = ($1 + [16])
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_64)*($34 + [24]) != (int_64)$5) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($34 + [178]) ^ (int_32)[1]), [2352])
	$3 = ($1 + [24])
	
.LABEL $label$2
	*($3) = (int_64)0
	
.LABEL $label$1
	*($1 + [136]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)60) & (int_64)4294967295)
	CALL eosio_assert(((int_32)$4 == (int_32)*($1)), [832])
	*($35 + [16]) = [0]
	*($35) = ($35 + [16])
	$7 = ($1 + [4])
	*($35 + [28]) = $7
	*($35 + [24]) = $1
	$8 = ($1 + [8])
	*($35 + [32]) = $8
	$9 = ($1 + [16])
	*($35 + [36]) = $9
	$10 = ($1 + [24])
	*($35 + [40]) = $10
	$11 = ($1 + [32])
	*($35 + [44]) = $11
	$12 = ($1 + [40])
	*($35 + [48]) = $12
	$13 = ($1 + [48])
	*($35 + [52]) = $13
	$14 = ($1 + [56])
	*($35 + [56]) = $14
	$15 = ($1 + [68])
	*($35 + [60]) = $15
	$16 = ($1 + [80])
	*($35 + [64]) = $16
	$17 = ($1 + [92])
	*($35 + [68]) = $17
	$18 = ($1 + [104])
	*($35 + [72]) = $18
	$19 = ($1 + [116])
	*($35 + [76]) = $19
	$20 = ($1 + [128])
	*($35 + [80]) = $20
	$6 = ($1 + [136])
	*($35 + [84]) = $6
	$21 = ($1 + [144])
	*($35 + [88]) = $21
	$22 = ($1 + [148])
	*($35 + [92]) = $22
	$23 = ($1 + [152])
	*($35 + [96]) = $23
	$24 = ($1 + [156])
	*($35 + [100]) = $24
	$25 = ($1 + [160])
	*($35 + [104]) = $25
	$26 = ($1 + [164])
	*($35 + [108]) = $26
	$27 = ($1 + [168])
	*($35 + [112]) = $27
	$28 = ($1 + [172])
	*($35 + [116]) = $28
	$29 = ($1 + [176])
	*($35 + [120]) = $29
	$30 = ($1 + [177])
	*($35 + [124]) = $30
	$31 = ($1 + [178])
	*($35 + [128]) = $31
	$32 = ($1 + [184])
	*($35 + [132]) = $32
	$33 = ($1 + [200])
	*($35 + [136]) = $33
	CALL $23(($35 + [24]), $35)
	$34 = *($35 + [16])
	if ( ($34 <= [513]) ){ goto $label$6 }
	$3 = CALL malloc($34)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($36 - (($34 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$5
	$5 = (CASTING uint_64)(uint_32 $4)
	*($35 + [4]) = $3
	*($35) = $3
	*($35 + [8]) = ($3 + $34)
	*($35 + [16]) = $35
	*($35 + [28]) = $7
	*($35 + [32]) = $8
	*($35 + [36]) = $9
	*($35 + [40]) = $10
	*($35 + [44]) = $11
	*($35 + [48]) = $12
	*($35 + [24]) = $1
	*($35 + [52]) = $13
	*($35 + [56]) = $14
	*($35 + [60]) = $15
	*($35 + [64]) = $16
	*($35 + [68]) = $17
	*($35 + [72]) = $18
	*($35 + [76]) = $19
	*($35 + [80]) = $20
	*($35 + [84]) = $6
	*($35 + [88]) = $21
	*($35 + [92]) = $22
	*($35 + [96]) = $23
	*($35 + [100]) = $24
	*($35 + [104]) = $25
	*($35 + [108]) = $26
	*($35 + [112]) = $27
	*($35 + [116]) = $28
	*($35 + [120]) = $29
	*($35 + [124]) = $30
	*($35 + [128]) = $31
	*($35 + [132]) = $32
	*($35 + [136]) = $33
	CALL $24(($35 + [24]), ($35 + [16]))
	CALL db_update_i64(*($1 + [208]), $2, $3, $34)
	if ( ($34 <= [513]) ){ goto $label$7 }
	CALL free($3)
	
.LABEL $label$7
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$8
	*([0] + [4]) = ($35 + [144])
}

void .FUNC _ZN10farmeosrcp9leaveroomEym (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	*([0] + [4]) = $12
	*($12 + [24]) = $1
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1296]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	$4 = *(($0 + [72]))
	$11 = *(($0 + [76]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$5 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_32)*(*($6)) == (int_32)$2) ){ goto $label$5 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = ($0 + [48])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$8 }
	$6 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [204]) == (int_32)$3), [512])
	goto $label$7 
	
.LABEL $label$8
	$6 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-4816278077707386880, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$9 }
	$6 = CALL $14($3, $6)
	CALL eosio_assert(((int_32)*($6 + [204]) == (int_32)$3), [512])
	goto $label$7 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$7
	*($12 + [20]) = $6
	*($12 + [16]) = $3
	$2 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($2, [928])
	$11 = [1]
	$5 = *($6 + [144])
	CALL eosio_assert((((int_32)$5 == (int_32)[4]) | ((int_32)$5 == (int_32)[1])), [2304])
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$10 }
	if ( ((int_64)*($6 + [16]) == (int_64)$1) ){ goto $label$10 }
	$11 = ((int_64)*($6 + [24]) == (int_64)$1)
	
.LABEL $label$10
	CALL eosio_assert($11, [2320])
	$8 = *($0)
	*($12 + [12]) = ($12 + [24])
	*($12 + [8]) = ($12 + [16])
	CALL eosio_assert($2, [672])
	CALL $84($3, $6, $8, ($12 + [8]))
	*([0] + [4]) = ($12 + [32])
}

void .FUNC _ZN10farmeosrcp6updateEmxxm (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	CALL require_auth(*($0))
	$5 = ($0 + [8])
	$6 = ($0 + [16])
	$7 = CALL db_lowerbound_i64(*($0 + [8]), *($6), (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL $12($5, $7)
	$8 = *($0)
	CALL eosio_assert([1], [672])
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$5), [720])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$4()), [768])
	*($7 + [4]) = $1
	*($7 + [16]) = $2
	*($7 + [24]) = $3
	*($7 + [36]) = $4
	$2 = *($7)
	CALL eosio_assert([1], [832])
	*($9 + [48]) = ($9 + [40])
	*($9 + [44]) = $9
	*($9 + [40]) = $9
	*($9 + [56]) = ($9 + [40])
	*($9 + [68]) = ($7 + [4])
	*($9 + [64]) = $7
	*($9 + [72]) = ($7 + [8])
	*($9 + [76]) = ($7 + [16])
	*($9 + [80]) = ($7 + [24])
	*($9 + [84]) = ($7 + [32])
	*($9 + [88]) = ($7 + [36])
	CALL $19(($9 + [64]), ($9 + [56]))
	CALL db_update_i64(*(($7 + [44])), $8, $9, [40])
	$7 = ($0 + [24])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$1 }
	*($7) = ((int_64)$2 + (int_64)1)
	goto $label$1 
	
.LABEL $label$2
	$8 = *($0)
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$4()), [608])
	*(($7 = CALL $105([56])) + [40]) = $5
	*($7 + [4]) = $1
	*($7) = [1]
	*($7 + [16]) = $2
	*($7 + [24]) = $3
	*($7 + [36]) = $4
	*($9 + [48]) = ($9 + [40])
	*($9 + [44]) = $9
	*($9 + [40]) = $9
	*($9 + [56]) = ($9 + [40])
	*($9 + [68]) = ($7 + [4])
	*($9 + [64]) = $7
	*($9 + [72]) = ($7 + [8])
	*($9 + [76]) = ($7 + [16])
	*($9 + [80]) = ($7 + [24])
	*($9 + [84]) = ($7 + [32])
	*($9 + [88]) = ($7 + [36])
	CALL $19(($9 + [64]), ($9 + [56]))
	$2 = *($7)
	$1 = CALL db_store_i64(*($6), (int_64)7235159550150574080, $8, $2, $9, [40])
	*($7 + [44]) = $1
	$5 = ($0 + [24])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$3 }
	*($5) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$3
	*($9 + [64]) = $7
	$2 = *($7)
	*($9) = $2
	*($9 + [40]) = $1
	$5 = *(($0 + [36]))
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [40]))) ){ goto $label$5 }
	*($5 + [8]) = $2
	*($5 + [16]) = $1
	*($9 + [64]) = [0]
	*($5) = $7
	*(($0 + [36])) = ($5 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $34(($0 + [32]), ($9 + [64]), $9, ($9 + [40]))
	
.LABEL $label$4
	$7 = *($9 + [64])
	*($9 + [64]) = [0]
	if ( ($7 == 0) ){ goto $label$1 }
	CALL $106($7)
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1152])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC _ZN10farmeosrcp6insertEmmmm (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$5 = *($0)
	*($8 + [8]) = $5
	*($8 + [16]) = $5
	$7 = CALL db_find_i64($5, $5, (int_64)-5031952737181368320, (CASTING uint_64)(uint_32 $1))
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL $44(($8 + [8]), $7)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($8 + [8])), [512])
	$6 = *($0)
	CALL eosio_assert([1], [672])
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($8 + [8])), [720])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)CALL $fimport$4()), [768])
	*($7 + [4]) = $2
	*($7 + [8]) = $3
	*($7 + [12]) = $4
	$5 = *($7)
	CALL eosio_assert([1], [832])
	*($8 + [80]) = (($8 + [48]) + [16])
	*($8 + [76]) = ($8 + [48])
	*($8 + [72]) = ($8 + [48])
	*($8 + [88]) = ($8 + [72])
	*($8 + [100]) = ($7 + [4])
	*($8 + [96]) = $7
	*($8 + [104]) = ($7 + [8])
	*($8 + [108]) = ($7 + [12])
	CALL $81(($8 + [96]), ($8 + [88]))
	CALL db_update_i64(*(($7 + [20])), $6, ($8 + [48]), [16])
	$7 = (($8 + [8]) + [16])
	if ( (uint_64)($5 <= *($7)) ){ goto $label$3 }
	*($7) = ((int_64)$5 + (int_64)1)
	$1 = *($8 + [32])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$6 = *($0)
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)CALL $fimport$4()), [608])
	*(($7 = CALL $105([28])) + [16]) = ($8 + [8])
	*($7 + [4]) = $2
	*($7) = $1
	*($7 + [8]) = $3
	*($7 + [12]) = $4
	*($8 + [80]) = (($8 + [48]) + [16])
	*($8 + [76]) = ($8 + [48])
	*($8 + [72]) = ($8 + [48])
	*($8 + [88]) = ($8 + [72])
	*($8 + [100]) = ($7 + [4])
	*($8 + [96]) = $7
	*($8 + [104]) = ($7 + [8])
	*($8 + [108]) = ($7 + [12])
	CALL $81(($8 + [96]), ($8 + [88]))
	$5 = *($7)
	$1 = CALL db_store_i64(*((($8 + [8]) + [8])), (int_64)-5031952737181368320, $6, $5, ($8 + [48]), [16])
	*($7 + [20]) = $1
	$0 = (($8 + [8]) + [16])
	if ( (uint_64)($5 <= *($0)) ){ goto $label$5 }
	*($0) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$5
	*($8 + [48]) = $7
	$5 = *($7)
	*($8 + [96]) = $5
	*($8 + [72]) = $1
	$0 = *((($8 + [8]) + [28]))
	if ( ((uint_32)$0 >= (uint_32)*(($8 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $5
	*($0 + [16]) = $1
	*($8 + [48]) = [0]
	*($0) = $7
	*(($8 + [36])) = ($0 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $76(($8 + [32]), ($8 + [48]), ($8 + [96]), ($8 + [72]))
	
.LABEL $label$6
	$7 = *($8 + [48])
	*($8 + [48]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $106($7)
	
.LABEL $label$3
	$1 = *($8 + [32])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = ($8 + [36])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $106($0)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$10 }
	$7 = *(($8 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$7 = $1
	
.LABEL $label$8
	*($2) = $1
	CALL $106($7)
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [112])
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($9 + [8]) = (int_64)0
	$7 = *($0 + [4])
	if ( ($7 == 0) ){ goto $label$2 }
	$5 = *($7 + [40])
	if ( ((int_32)$5 != (int_32)[-1]) ){ goto $label$3 }
	$5 = *(*($0))
	$5 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)8419268397136609280, $9, *($7))
	*(*(($0 + [4])) + [40]) = $5
	
.LABEL $label$3
	$6 = CALL db_idx64_previous($5, ($9 + [8]))
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [2160])
	goto $label$1 
	
.LABEL $label$2
	$7 = *(*($0))
	$7 = CALL db_idx64_end(*($7), *($7 + [8]), (int_64)8419268397136609280)
	CALL eosio_assert(((int_32)$7 != (int_32)[-1]), [2096])
	$6 = CALL db_idx64_previous($7, ($9 + [8]))
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [2096])
	
.LABEL $label$1
	$2 = *($9 + [8])
	$3 = *($1 + [24])
	$1 = *(*($0))
	$8 = *(($1 + [28]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	$7 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$5:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$4 }
	$8 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$7 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$1), [512])
	goto $label$6 
	
.LABEL $label$7
	$7 = CALL $70($1, CALL $fimport$7(*($1), *($1 + [8]), (int_64)8419268397136609280, $2))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$1), [512])
	
.LABEL $label$6
	*(($0 + [4])) = $7
	*(($7 + [40])) = $6
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1232])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $105([48])) + [32]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [24])
	CALL $73(($8 + [32]), ($8 + [24]))
	*($6 + [40]) = [-1]
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [36])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $74(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $106($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)8419268397136609280, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$4), [512])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $70($4, CALL $fimport$7(*($4), *($4 + [8]), (int_64)8419268397136609280, $5))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$4), [512])
	
.LABEL $label$4
	*(($2 + [40])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $105(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $106($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $106($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN10farmeosrcp10submitseedEymNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	*($12 + [120]) = $1
	$1 = (int_64)0
	$8 = (int_64)59
	$7 = [1296]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	$5 = *(($0 + [72]))
	$11 = *(($0 + [76]))
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$5 }
	$7 = ($11 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$6:
	if ( ((int_32)*(*($7)) == (int_32)$2) ){ goto $label$5 }
	$11 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [48])
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$8 }
	$7 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [204]) == (int_32)$6), [512])
	*($12 + [116]) = $7
	*($12 + [112]) = $6
	$4 = (($12 + [112]) | [4])
	goto $label$7 
	
.LABEL $label$8
	$7 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-4816278077707386880, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$9 }
	$7 = CALL $14($6, $7)
	CALL eosio_assert(((int_32)*($7 + [204]) == (int_32)$6), [512])
	*($12 + [116]) = $7
	*($12 + [112]) = $6
	$4 = (($12 + [112]) | [4])
	goto $label$7 
	
.LABEL $label$9
	$7 = [0]
	*($12 + [116]) = [0]
	*($12 + [112]) = $6
	$4 = (($12 + [112]) | [4])
	
.LABEL $label$7
	$11 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($11, [2208])
	CALL eosio_assert(((int_32)*($7 + [144]) == (int_32)[3]), [1344])
	CALL $114(($12 + [96]), ($7 + [92]))
	CALL $114(($12 + [80]), ($7 + [104]))
	CALL $114(($12 + [64]), ($7 + [116]))
	CALL $78($0, $3, ($12 + [32]))
	$1 = *($0)
	*($12 + [16]) = $0
	*($12 + [24]) = $3
	*($12 + [12]) = ($12 + [112])
	*($12 + [8]) = ($12 + [120])
	*($12 + [20]) = ($12 + [32])
	CALL eosio_assert($11, [672])
	CALL $79($6, $7, $1, ($12 + [8]))
	$7 = *($4)
	if ( ((int_32)*($7 + [4]) != (int_32)[3]) ){ goto $label$12 }
	$11 = *($7 + [92])
	$2 = CALL strlen([1376])
	if ( ((int_32)$2 != (int_32)( *(($7 + [96])) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$13 }
	if ( (CALL $112(($7 + [92]), [0], [-1], [1376], $2) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$11 = *($7 + [104])
	$7 = *($4)
	$2 = CALL strlen([1376])
	if ( ((int_32)$2 != (int_32)( *(($7 + [108])) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$14 }
	if ( (CALL $112(($7 + [104]), [0], [-1], [1376], $2) == 0) ){ goto $label$12 }
	
.LABEL $label$14
	$11 = *($7 + [116])
	$7 = *($4)
	$2 = CALL strlen([1376])
	if ( ((int_32)$2 != (int_32)( *(($7 + [120])) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$11 }
	if ( CALL $112(($7 + [116]), [0], [-1], [1376], $2) ){ goto $label$11 }
	
.LABEL $label$12
	$7 = *($4)
	if ( ((int_32)*($7 + [4]) != (int_32)[2]) ){ goto $label$10 }
	$11 = *($7 + [92])
	$2 = CALL strlen([1376])
	if ( ((int_32)$2 != (int_32)( *(($7 + [96])) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$15 }
	if ( (CALL $112(($7 + [92]), [0], [-1], [1376], $2) == 0) ){ goto $label$10 }
	
.LABEL $label$15
	$11 = *($7 + [104])
	$7 = *($4)
	$2 = CALL strlen([1376])
	if ( ((int_32)$2 != (int_32)( *(($7 + [108])) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$11 }
	if ( (CALL $112(($7 + [104]), [0], [-1], [1376], $2) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZN10farmeosrcp7processEm($0, *(*($4)))
	
.LABEL $label$10
	if ( ((*($12 + [64]) & [1]) == 0) ){ goto $label$16 }
	CALL $106(*($12 + [72]))
	
.LABEL $label$16
	if ( ((*($12 + [80]) & [1]) == 0) ){ goto $label$17 }
	CALL $106(*($12 + [88]))
	
.LABEL $label$17
	if ( ((*($12 + [96]) & [1]) == 0) ){ goto $label$18 }
	CALL $106(*($12 + [104]))
	
.LABEL $label$18
	*([0] + [4]) = ($12 + [128])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $105(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $106($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $106($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	$36 = (*([0] + [4]) - [144])
	$35 = $36
	*([0] + [4]) = $36
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [720])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [768])
	$4 = *($1)
	$6 = ($1 + [56])
	CALL $108($6, *($3))
	$7 = ($1 + [68])
	CALL $108($7, *($3 + [4]))
	$8 = ($1 + [80])
	CALL $108($8, *($3 + [8]))
	*($1 + [136]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)60) & (int_64)4294967295)
	$10 = ($1 + [4])
	$9 = ($1 + [136])
	$34 = *($1 + [4])
	if ( ((int_32)$34 != (int_32)[2]) ){ goto $label$3 }
	$11 = *($34)
	$34 = *($3)
	$12 = CALL strlen([1376])
	if ( ((int_32)$12 != (int_32)( *($34 + [4]) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$5 }
	if ( (CALL $112($34, [0], [-1], [1376], $12) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$11 = *($34)
	$34 = *(($3 + [4]))
	$12 = CALL strlen([1376])
	if ( ((int_32)$12 != (int_32)( *($34 + [4]) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$2 }
	if ( CALL $112($34, [0], [-1], [1376], $12) ){ goto $label$2 }
	
.LABEL $label$4
	$34 = *($10)
	
.LABEL $label$3
	if ( ((int_32)$34 != (int_32)[3]) ){ goto $label$1 }
	$11 = *($34)
	$34 = *($3)
	$12 = CALL strlen([1376])
	if ( ((int_32)$12 != (int_32)( *($34 + [4]) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$6 }
	if ( (CALL $112($34, [0], [-1], [1376], $12) == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$11 = *($34)
	$34 = *(($3 + [4]))
	$12 = CALL strlen([1376])
	if ( ((int_32)$12 != (int_32)( *($34 + [4]) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$7 }
	if ( (CALL $112($34, [0], [-1], [1376], $12) == 0) ){ goto $label$1 }
	
.LABEL $label$7
	$34 = *($3)
	$3 = *(($3 + [8]))
	$11 = CALL strlen([1376])
	if ( ((int_32)$11 != (int_32)( *($3 + [4]) ? uint_32($34 >> [1]) : ($34 & [1]) )) ){ goto $label$2 }
	if ( (CALL $112($3, [0], [-1], [1376], $11) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($1 + [144]) = [3]
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 == (int_32)*($1)), [832])
	*($35 + [16]) = [0]
	*($35) = ($35 + [16])
	*($35 + [28]) = $10
	*($35 + [24]) = $1
	$11 = ($1 + [8])
	*($35 + [32]) = $11
	$12 = ($1 + [16])
	*($35 + [36]) = $12
	$13 = ($1 + [24])
	*($35 + [40]) = $13
	$14 = ($1 + [32])
	*($35 + [44]) = $14
	$15 = ($1 + [40])
	*($35 + [48]) = $15
	$16 = ($1 + [48])
	*($35 + [52]) = $16
	*($35 + [56]) = $6
	*($35 + [60]) = $7
	*($35 + [64]) = $8
	$17 = ($1 + [92])
	*($35 + [68]) = $17
	$18 = ($1 + [104])
	*($35 + [72]) = $18
	$19 = ($1 + [116])
	*($35 + [76]) = $19
	$20 = ($1 + [128])
	*($35 + [80]) = $20
	*($35 + [84]) = $9
	$21 = ($1 + [144])
	*($35 + [88]) = $21
	$22 = ($1 + [148])
	*($35 + [92]) = $22
	$23 = ($1 + [152])
	*($35 + [96]) = $23
	$24 = ($1 + [156])
	*($35 + [100]) = $24
	$25 = ($1 + [160])
	*($35 + [104]) = $25
	$26 = ($1 + [164])
	*($35 + [108]) = $26
	$27 = ($1 + [168])
	*($35 + [112]) = $27
	$28 = ($1 + [172])
	*($35 + [116]) = $28
	$29 = ($1 + [176])
	*($35 + [120]) = $29
	$30 = ($1 + [177])
	*($35 + [124]) = $30
	$31 = ($1 + [178])
	*($35 + [128]) = $31
	$32 = ($1 + [184])
	*($35 + [132]) = $32
	$33 = ($1 + [200])
	*($35 + [136]) = $33
	CALL $23(($35 + [24]), $35)
	$34 = *($35 + [16])
	if ( ($34 <= [513]) ){ goto $label$9 }
	$3 = CALL malloc($34)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($36 - (($34 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$8
	$5 = (CASTING uint_64)(uint_32 $4)
	*($35 + [4]) = $3
	*($35) = $3
	*($35 + [8]) = ($3 + $34)
	*($35 + [16]) = $35
	*($35 + [28]) = $10
	*($35 + [32]) = $11
	*($35 + [36]) = $12
	*($35 + [40]) = $13
	*($35 + [44]) = $14
	*($35 + [48]) = $15
	*($35 + [24]) = $1
	*($35 + [52]) = $16
	*($35 + [56]) = $6
	*($35 + [60]) = $7
	*($35 + [64]) = $8
	*($35 + [68]) = $17
	*($35 + [72]) = $18
	*($35 + [76]) = $19
	*($35 + [80]) = $20
	*($35 + [84]) = $9
	*($35 + [88]) = $21
	*($35 + [92]) = $22
	*($35 + [96]) = $23
	*($35 + [100]) = $24
	*($35 + [104]) = $25
	*($35 + [108]) = $26
	*($35 + [112]) = $27
	*($35 + [116]) = $28
	*($35 + [120]) = $29
	*($35 + [124]) = $30
	*($35 + [128]) = $31
	*($35 + [132]) = $32
	*($35 + [136]) = $33
	CALL $24(($35 + [24]), ($35 + [16]))
	CALL db_update_i64(*($1 + [208]), $2, $3, $34)
	if ( ($34 <= [513]) ){ goto $label$10 }
	CALL free($3)
	
.LABEL $label$10
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$11
	*([0] + [4]) = ($35 + [144])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1152])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1152])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1152])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1152])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $25(*($1), ($0 + [32]))
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($1 + [1])
	$7 = [0]
	$6 = ($1 + [8])
	
.LOOP $label$1:
	$9 = *($1)
	$8 = *($6)
	$4 = *((( $8 ? $3 : ($9 & [1]) ) + $7))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$3 }
	$4 = ($4 + [208])
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)(($4 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$4 = ($4 + [201])
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$4 = ($4 + [169])
	goto $label$2 
	
.LABEL $label$5
	$4 = [0]
	CALL eosio_assert([0], [2272])
	$8 = *($6)
	$9 = *($1)
	
.LABEL $label$2
	$5 = ($4 << [4])
	$4 = *(((( $8 ? $3 : ($9 & [1]) ) + $7) + [1]))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$7 }
	$4 = ($4 + [208])
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($4 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$4 = ($4 + [201])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$9 }
	$4 = ($4 + [169])
	goto $label$6 
	
.LABEL $label$9
	$4 = [0]
	CALL eosio_assert([0], [2272])
	
.LABEL $label$6
	*($2) = ($4 + $5)
	$2 = ($2 + [1])
	$7 = ($7 + [2])
	if ( ((int_32)$7 != (int_32)[64]) ){ goto $label$1 }
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	$36 = (*([0] + [4]) - [160])
	$35 = $36
	*([0] + [4]) = $36
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [720])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [768])
	$7 = *($3 + [8])
	$4 = *($1)
	$34 = *(*($3 + [4]) + [4])
	$5 = *(*($3))
	if ( ((int_64)$5 != (int_64)*($34 + [8])) ){ goto $label$2 }
	$8 = [0]
	$9 = *($34 + [92])
	$10 = CALL strlen([1376])
	if ( ((int_32)$10 != (int_32)( *(($34 + [96])) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$3 }
	$8 = (CALL $112(($34 + [92]), [0], [-1], [1376], $10) == 0)
	
.LABEL $label$3
	CALL eosio_assert($8, [2240])
	CALL $78($7, (*(*(($3 + [4])) + [4]) + [56]), ($35 + [32]))
	CALL assert_sha256(*($3 + [12]), [32], ($35 + [32]))
	CALL $108(($1 + [92]), *($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$5 != (int_64)*($34 + [16])) ){ goto $label$4 }
	$8 = [0]
	$9 = *($34 + [104])
	$10 = CALL strlen([1376])
	if ( ((int_32)$10 != (int_32)( *(($34 + [108])) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$5 }
	$8 = (CALL $112(($34 + [104]), [0], [-1], [1376], $10) == 0)
	
.LABEL $label$5
	CALL eosio_assert($8, [2256])
	CALL $78($7, (*(*(($3 + [4])) + [4]) + [68]), ($35 + [32]))
	CALL assert_sha256(*($3 + [12]), [32], ($35 + [32]))
	CALL $108(($1 + [104]), *($3 + [16]))
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_64)$5 != (int_64)*($34 + [24])) ){ goto $label$6 }
	$8 = [0]
	$9 = *($34 + [116])
	$10 = CALL strlen([1376])
	if ( ((int_32)$10 != (int_32)( *(($34 + [120])) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$7 }
	$8 = (CALL $112(($34 + [116]), [0], [-1], [1376], $10) == 0)
	
.LABEL $label$7
	CALL eosio_assert($8, [1424])
	CALL $78($7, (*(*(($3 + [4])) + [4]) + [80]), ($35 + [32]))
	CALL assert_sha256(*($3 + [12]), [32], ($35 + [32]))
	CALL $108(($1 + [116]), *($3 + [16]))
	goto $label$1 
	
.LABEL $label$6
	CALL eosio_assert([0], [1120])
	
.LABEL $label$1
	*($1 + [136]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)60) & (int_64)4294967295)
	CALL eosio_assert(((int_32)$4 == (int_32)*($1)), [832])
	*($35 + [24]) = [0]
	*($35 + [8]) = ($35 + [24])
	$7 = ($1 + [4])
	*($35 + [36]) = $7
	*($35 + [32]) = $1
	$8 = ($1 + [8])
	*($35 + [40]) = $8
	$9 = ($1 + [16])
	*($35 + [44]) = $9
	$10 = ($1 + [24])
	*($35 + [48]) = $10
	$11 = ($1 + [32])
	*($35 + [52]) = $11
	$12 = ($1 + [40])
	*($35 + [56]) = $12
	$13 = ($1 + [48])
	*($35 + [60]) = $13
	$14 = ($1 + [56])
	*($35 + [64]) = $14
	$15 = ($1 + [68])
	*($35 + [68]) = $15
	$16 = ($1 + [80])
	*($35 + [72]) = $16
	$17 = ($1 + [92])
	*($35 + [76]) = $17
	$18 = ($1 + [104])
	*($35 + [80]) = $18
	$19 = ($1 + [116])
	*($35 + [84]) = $19
	$20 = ($1 + [128])
	*($35 + [88]) = $20
	$6 = ($1 + [136])
	*($35 + [92]) = $6
	$21 = ($1 + [144])
	*($35 + [96]) = $21
	$22 = ($1 + [148])
	*($35 + [100]) = $22
	$23 = ($1 + [152])
	*($35 + [104]) = $23
	$24 = ($1 + [156])
	*($35 + [108]) = $24
	$25 = ($1 + [160])
	*($35 + [112]) = $25
	$26 = ($1 + [164])
	*($35 + [116]) = $26
	$27 = ($1 + [168])
	*($35 + [120]) = $27
	$28 = ($1 + [172])
	*($35 + [124]) = $28
	$29 = ($1 + [176])
	*($35 + [128]) = $29
	$30 = ($1 + [177])
	*($35 + [132]) = $30
	$31 = ($1 + [178])
	*($35 + [136]) = $31
	$32 = ($1 + [184])
	*($35 + [140]) = $32
	$33 = ($1 + [200])
	*($35 + [144]) = $33
	CALL $23(($35 + [32]), ($35 + [8]))
	$34 = *($35 + [24])
	if ( ($34 <= [513]) ){ goto $label$9 }
	$3 = CALL malloc($34)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($36 - (($34 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$8
	$5 = (CASTING uint_64)(uint_32 $4)
	*($35 + [12]) = $3
	*($35 + [8]) = $3
	*($35 + [16]) = ($3 + $34)
	*($35 + [24]) = ($35 + [8])
	*($35 + [36]) = $7
	*($35 + [40]) = $8
	*($35 + [44]) = $9
	*($35 + [48]) = $10
	*($35 + [52]) = $11
	*($35 + [56]) = $12
	*($35 + [32]) = $1
	*($35 + [60]) = $13
	*($35 + [64]) = $14
	*($35 + [68]) = $15
	*($35 + [72]) = $16
	*($35 + [76]) = $17
	*($35 + [80]) = $18
	*($35 + [84]) = $19
	*($35 + [88]) = $20
	*($35 + [92]) = $6
	*($35 + [96]) = $21
	*($35 + [100]) = $22
	*($35 + [104]) = $23
	*($35 + [108]) = $24
	*($35 + [112]) = $25
	*($35 + [116]) = $26
	*($35 + [120]) = $27
	*($35 + [124]) = $28
	*($35 + [128]) = $29
	*($35 + [132]) = $30
	*($35 + [136]) = $31
	*($35 + [140]) = $32
	*($35 + [144]) = $33
	CALL $24(($35 + [32]), ($35 + [24]))
	CALL db_update_i64(*($1 + [208]), $2, $3, $34)
	if ( ($34 <= [513]) ){ goto $label$10 }
	CALL free($3)
	
.LABEL $label$10
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$11
	*([0] + [4]) = ($35 + [160])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $105(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $106(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $106($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1264])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1264])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $105($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $113($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $106($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $105(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $114($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $106(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $106($4)
	
.LABEL $label$11
	(unreachable)
}