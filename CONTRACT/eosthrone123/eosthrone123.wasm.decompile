(data (i32.const 8192) "eosio.token\00")
(data (i32.const 8204) "invalid symbol name\00")
(data (i32.const 8224) "Invalid token transfer\00")
(data (i32.const 8247) "must bet a positive amount\00")
(data (i32.const 8274) "symbol of the token are not allowed\00")
(data (i32.const 8310) "no balance object found\00")
(data (i32.const 8334) "overdrawn balance\00")
(data (i32.const 8352) "token with symbol already exists\00")
(data (i32.const 8385) "initial resources\00")
(data (i32.const 8403) "memo has more than 256 bytes\00")
(data (i32.const 8432) "token with symbol does not exist, create token before issue\00")
(data (i32.const 8492) "from account does not exist\00")
(data (i32.const 8520) "to account does not exist\00")
(data (i32.const 8546) "cannot transfer to itself\00")
(data (i32.const 8572) "symbol not exist\00")
(data (i32.const 8589) "user does not exist\00")
(data (i32.const 8609) "no changes\00")
(data (i32.const 8620) "from and to must have the same symbol\00")
(data (i32.const 8658) "balance error\00")
(data (i32.const 8672) "item not found\00")
(data (i32.const 8687) "no enough item\00")
(data (i32.const 8702) "----------------------------func name\00")
(data (i32.const 8740) "--------------func name: \00")
(data (i32.const 8766) "poolprize\00")
(data (i32.const 8776) "_\00")
(data (i32.const 8778) "pooltax not set\00")
(data (i32.const 8794) "userprice\00")
(data (i32.const 8804) "userprice not set\00")
(data (i32.const 8822) "quantity not equal the user price\00")
(data (i32.const 8856) "user is activated\00")
(data (i32.const 8874) "prizerate\00")
(data (i32.const 8884) "prizerate not set\00")
(data (i32.const 8902) "leaderrate\00")
(data (i32.const 8913) "leaderrate not set\00")
(data (i32.const 8932) "all faith: \00")
(data (i32.const 8944) "-----guild_id: \00")
(data (i32.const 8960) " guild_prize: \00")
(data (i32.const 8975) "======all_member_faith: \00")
(data (i32.const 9000) "-----member_prize: \00")
(data (i32.const 9020) "\e8\81\94\e7\9b\9f\e5\88\86\e7\ba\a2\e5\b7\b2\e5\88\b0\e8\b4\a6\ef\bc\8c\e8\af\b7\e6\b3\a8\e6\84\8f\e6\9f\a5\e6\94\b6\00")
(data (i32.const 9060) "tonartstoken\00")
(data (i32.const 9073) "-----leader: \00")
(data (i32.const 9087) "leader_prize: \00")
(data (i32.const 9102) "\e7\9b\9f\e4\b8\bb\e9\a2\9d\e5\a4\96\e5\88\86\e7\ba\a2\e5\b7\b2\e5\88\b0\e8\b4\a6\ef\bc\9b\e8\af\b7\e6\b3\a8\e6\84\8f\e6\9f\a5\e6\94\b6\00")
(data (i32.const 9148) "sellertax\00")
(data (i32.const 9158) "sellertax not set\00")
(data (i32.const 9176) "ticket\00")
(data (i32.const 9183) "ticket not set\00")
(data (i32.const 9198) "tkdiscount\00")
(data (i32.const 9209) "tkdiscount not set\00")
(data (i32.const 9228) "quantity to buy ticket is error\00")
(data (i32.const 9260) "ticketrate\00")
(data (i32.const 9271) "ticketrate not set\00")
(data (i32.const 9290) "inviterate\00")
(data (i32.const 9301) "inviterate not set\00")
(data (i32.const 9320) "invite rate is error\00")
(data (i32.const 9341) "inviter return\00")
(data (i32.const 9356) "reserveprize\00")
(data (i32.const 9369) "rsvtype\00")
(data (i32.const 9377) "rsvtype not set\00")
(data (i32.const 9393) "rsvinfo format error\00")
(data (i32.const 9414) "prize---: \00")
(data (i32.const 9425) "prize: \00")
(data (i32.const 9433) "count error to get reserve prize\00")
(data (i32.const 9466) "reserve prize\00")
(data (i32.const 9480) "lotteryrg\00")
(data (i32.const 9490) "lotteryrg not set\00")
(data (i32.const 9508) "lotteryrg format error\00")
(data (i32.const 9531) "reserve lottery\00")
(data (i32.const 9547) "privilege\00")
(data (i32.const 9557) "privilege not set\00")
(data (i32.const 9575) "quantity to buy privilege is error\00")
(data (i32.const 9610) "guild\00")
(data (i32.const 9616) "faith\00")
(data (i32.const 9622) "activate\00")
(data (i32.const 9631) "export :\00")
(data (i32.const 9640) ",\00")
(data (i32.const 9642) " ||| \00")
(data (i32.const 9648) "contract must extend the kh::contract\00")
(data (i32.const 9686) "onerror action\'s are only valid from the \'eosio\' system account\00")
(data (i32.const 9750) "call action error\00")
(data (i32.const 9768) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9817) "resreceipt\00")
(data (i32.const 9828) "write\00")
(data (i32.const 9834) "unable to find key\00")
(data (i32.const 9853) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9912) "itemreceipt\00")
(data (i32.const 9924) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9975) "error reading iterator\00")
(data (i32.const 9998) "read\00")
(data (i32.const 10003) "not get data before modify\00")
(data (i32.const 10030) "cannot create objects in table of another contract\00")
(data (i32.const 10081) "cannot pass end iterator to modify\00")
(data (i32.const 10116) "object passed to modify is not in multi_index\00")
(data (i32.const 10162) "cannot modify objects in table of another contract\00")
(data (i32.const 10213) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10272) "cannot pass end iterator to erase\00")
(data (i32.const 10306) "cannot increment end iterator\00")
(data (i32.const 10336) "object passed to erase is not in multi_index\00")
(data (i32.const 10381) "cannot erase objects in table of another contract\00")
(data (i32.const 10431) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10484) "divide by zero\00")
(data (i32.const 10499) "signed division overflow\00")
(data (i32.const 10524) "multiplication overflow\00")
(data (i32.const 10548) "multiplication underflow\00")
(data (i32.const 10573) "get\00")
(data (i32.const 10577) "true\00")
(data (i32.const 10582) "counter not exist\00")
(data (i32.const 10600) "guild faith has been existed\00")
(data (i32.const 10629) "guild not exist\00")
(data (i32.const 10645) "the leader to set is not the member of guild\00")
(data (i32.const 10690) "member is existed\00")
(data (i32.const 10708) "member not exist\00")
(data (i32.const 10725) "member faith not exist\00")
(data (i32.const 10748) "attempt to add asset with different symbol\00")
(data (i32.const 10791) "addition underflow\00")
(data (i32.const 10810) "addition overflow\00")
(data (i32.const 10828) "transfer\00")
(data (i32.const 10837) "notifytrans\00")
(data (i32.const 10849) "attempt to subtract asset with different symbol\00")
(data (i32.const 10897) "subtraction underflow\00")
(data (i32.const 10919) "subtraction overflow\00")
(data (i32.const 10940) "user not exist\00")
(data (i32.const 10955) "inviter not exist\00")
(data (i32.const 10973) "inviter is existed\00")
(data (i32.const 10992) "user buy no ticket\00")
(data (i32.const 11011) "user took the reserve prize before\00")
(data (i32.const 11046) "user has airdroped\00")
(data (i32.const 11065) "lottery count is max\00")
(data (i32.const 11086) "privilege to buy is too low\00")
(data (i32.const 11114) "reservev3\00")
(data (i32.const 11124) "invitev3\00")
(data (i32.const 11136) "\00\00\00\00\00\00\00\00)\00\00\00")
(data (i32.const 11148) "plugin.next\00")
(data (i32.const 11160) "plugin.trigger\00")
(data (i32.const 11175) "must call next on trigger method\00")
(data (i32.const 11208) "next plugin is already exist\00")
(data (i32.const 11237) "type cast error\00")
(data (i32.const 11256) "\00\00\00\00\00\00\00\00*\00\00\00")
(data (i32.const 11268) "plg_transfer_send_transcal\00")
(data (i32.const 11296) "\00\00\00\00\00\00\00\00+\00\00\00")
(data (i32.const 11308) "\00\00\00\00\00\00\00\00,\00\00\00")
(data (i32.const 11320) "plg_transcal_check_pause\00")
(data (i32.const 11345) "false\00")
(data (i32.const 11351) "plg_transcal_check_pause : game paused\00")
(data (i32.const 11392) "\00\00\00\00\00\00\00\00-\00\00\00")
(data (i32.const 11404) "plg_transcal_check_auth_of_from : auth error\00")
(data (i32.const 11452) "\00\00\00\00\00\00\00\00.\00\00\00")
(data (i32.const 11464) "function not in white list\00")
(data (i32.const 11491) "createguild\00")
(data (i32.const 11503) "tradebuy\00")
(data (i32.const 11512) "\00\00\00\00\00\00\00\00/\00\00\00")
(data (i32.const 11524) "tax\00")
(data (i32.const 11528) ".\00")
(data (i32.const 11530) " \00")
(data (i32.const 19940) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "memset" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_update_i64" (func $fimport$4 (param i32 i64 i32 i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$6 (param i32)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$8 (param i64)))
(import "env" "is_account" (func $fimport$9 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$10 (param i64)))
(import "env" "send_inline" (func $fimport$11 (param i32 i32)))
(import "env" "prints" (func $fimport$12 (param i32)))
(import "env" "prints_l" (func $fimport$13 (param i32 i32)))
(import "env" "printui" (func $fimport$14 (param i64)))
(import "env" "db_next_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "__multi3" (func $fimport$16 (param i32 i64 i64 i64 i64)))
(import "env" "publication_time" (func $fimport$17 (result i64)))
(import "env" "memmove" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$20 (result i64)))
(import "env" "sha256" (func $fimport$21 (param i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$22 (result i32)))
(import "env" "read_action_data" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$25))
(import "env" "printi" (func $fimport$26 (param i64)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $130))
(export "_ZdlPv" (func $289))
(export "_Znwj" (func $287))
(export "_Znaj" (func $288))
(export "_ZdaPv" (func $290))
(table $0 48 48 anyfunc)
(elem (i32.const 1) $96 $133 $87 $110 $137 $60 $140 $28 $73 $77 $112 $80 $17 $99 $46 $25 $148 $83 $151 $42 $10 $37 $129 $26 $156 $115 $38 $33 $13 $120 $98 $162 $117 $54 $15 $51 $14 $119 $84 $27 $259 $260 $263 $264 $272 $273 $277)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 20026))
(global $global$2 i32 (i32.const 20026))


void .FUNC $220 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $300($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $284 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([9640])
	
.LABEL $label$1
	$3 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)8)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)16)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)24)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)56)
	*($2 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	
.LABEL $label$2
	$global$0 = ($2 + [16])
}

void .FUNC $285 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $174 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($0 + [16])) = (int_64)1398362884
	CALL eosio_assert([1], [9768])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8204])
	*(($0 + [32])) = [0]
	*($0 + [24 align=4]) = (int_64)0
	*($3 + [8]) = ($1 + $2)
	*($3) = $1
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [9998])
	CALL memcpy($0, $1, [8])
	$5 = ($2 & [-8])
	CALL eosio_assert(((int_32)$5 != (int_32)[8]), [9998])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
	CALL eosio_assert(((int_32)$5 != (int_32)[16]), [9998])
	CALL memcpy(($0 + [16]), ($1 + [16]), [8])
	*($3 + [4]) = ($1 + [24])
	CALL $176($3, ($0 + [24]))
	$global$0 = ($3 + [16])
}

void .FUNC $6 (int_64 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = (int_64)6
	
.LOOP $label$1:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	*($4 + [16]) = $2
	*($4 + [8]) = $1
	*(($6 = CALL _Znwj([16]))) = $0
	*($6 + [8]) = (int_64)3617214756542218240
	*(($4 + [44])) = [0]
	$7 = ($6 + [16])
	*(($4 + [32])) = $7
	*(($4 + [28])) = $7
	*($4 + [24]) = $6
	*($4 + [36 align=4]) = (int_64)0
	$6 = *($3 + [40])
	$7 = ( *(($3 + [44])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [40])
	$5 = (CASTING uint_64)(uint_32 $7)
	$7 = ($4 + [36])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	if ( ($6 == 0) ){ goto $label$4 }
	CALL $30($7, $6)
	$7 = *(($4 + [40]))
	$6 = *(($4 + [36]))
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$6 = [0]
	
.LABEL $label$3
	*($4 + [68]) = $6
	*($4 + [64]) = $6
	*($4 + [72]) = $7
	*($4 + [48]) = ($4 + [64])
	*($4 + [56]) = $3
	CALL $200(($4 + [56]), ($4 + [48]))
	CALL $32(($4 + [64]), ($4 + [8]))
	$6 = *($4 + [64])
	CALL send_inline($6, (*($4 + [68]) - $6))
	$6 = *($4 + [64])
	if ( ($6 == 0) ){ goto $label$5 }
	*($4 + [68]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$6 = *($4 + [36])
	if ( ($6 == 0) ){ goto $label$6 }
	*(($4 + [40])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$6 = *($4 + [24])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [28])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $221($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $296($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $296($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $291($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $292($2, ($1 + [8]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$4 = CALL $292(($2 + [16]), $1)
	CALL void $5((int_32 $3), (int_64 $4), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $170 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [32])
	$global$0 = $1
	*(($1 + [24])) = [0]
	*($1 + [16]) = (int_64)0
	$2 = *($0 + [4])
	$3 = CALL $302([11208])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($1 + [16]) = ($3 << [1])
	$4 = (($1 + [16]) | [1])
	$5 = $4
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($1 + [16]) = ($4 | [1])
	*($1 + [24]) = $5
	*($1 + [20]) = $3
	$4 = (($1 + [16]) | [1])
	
.LABEL $label$4
	CALL memcpy($5, [11208], $3)
	
.LABEL $label$3
	*(($5 + $3)) = [0]
	CALL eosio_assert(($2 == 0), ( *($1 + [24]) ? $4 : (*($1 + [16]) & [1]) ))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$6
	*(($3 = CALL _Znwj([12]))) = (int_64)0
	*(($5 = ($3 + [8]))) = [0]
	*(($0 + [4])) = $3
	*(($1 + [8])) = [0]
	*($3 + [4]) = [0]
	*($3) = [11460]
	*($5) = [0]
	*($1) = (int_64)0
	$5 = CALL $302([11237])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	*($1) = ($5 << [1])
	$4 = ($1 | [1])
	$2 = $4
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($4)
	*($1) = ($4 | [1])
	*($1 + [8]) = $2
	*($1 + [4]) = $5
	$4 = ($1 | [1])
	
.LABEL $label$8
	CALL memcpy($2, [11237], $5)
	
.LABEL $label$7
	*(($2 + $5)) = [0]
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), ( *($1 + [8]) ? $4 : (*($1) & [1]) ))
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$10
	$3 = *(($0 + [4]))
	$global$0 = ($1 + [32])
	return $3
	
.LABEL $label$2
	CALL $291(($1 + [16]))
	
.LABEL $label$1
	CALL $291($1)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $171 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [32])
	$global$0 = $1
	*(($1 + [24])) = [0]
	*($1 + [16]) = (int_64)0
	$2 = *($0 + [4])
	$3 = CALL $302([11208])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($1 + [16]) = ($3 << [1])
	$4 = (($1 + [16]) | [1])
	$5 = $4
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($1 + [16]) = ($4 | [1])
	*($1 + [24]) = $5
	*($1 + [20]) = $3
	$4 = (($1 + [16]) | [1])
	
.LABEL $label$4
	CALL memcpy($5, [11208], $3)
	
.LABEL $label$3
	*(($5 + $3)) = [0]
	CALL eosio_assert(($2 == 0), ( *($1 + [24]) ? $4 : (*($1 + [16]) & [1]) ))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$6
	*(($3 = CALL _Znwj([12]))) = (int_64)0
	*(($5 = ($3 + [8]))) = [0]
	*(($0 + [4])) = $3
	*(($1 + [8])) = [0]
	*($3 + [4]) = [0]
	*($3) = [11520]
	*($5) = [0]
	*($1) = (int_64)0
	$5 = CALL $302([11237])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	*($1) = ($5 << [1])
	$4 = ($1 | [1])
	$2 = $4
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($4)
	*($1) = ($4 | [1])
	*($1 + [8]) = $2
	*($1 + [4]) = $5
	$4 = ($1 | [1])
	
.LABEL $label$8
	CALL memcpy($2, [11237], $5)
	
.LABEL $label$7
	*(($2 + $5)) = [0]
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), ( *($1 + [8]) ? $4 : (*($1) & [1]) ))
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$10
	$3 = *(($0 + [4]))
	$global$0 = ($1 + [32])
	return $3
	
.LABEL $label$2
	CALL $291(($1 + [16]))
	
.LABEL $label$1
	CALL $291($1)
	(unreachable)
	return (unreachable)
}

void .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $176(*($1), ($0 + [32]))
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9975])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $305($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([32])
	$6 = CALL $282($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $9(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $308($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

int_32 .FUNC $246 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$6 = CALL _Znwj([16])
	*($0 + [16]) = $6
	*(($7 = ($0 + [20]))) = $6
	$8 = ($6 + [16])
	*($5) = $8
	*(($6 + [8])) = *(($1 + [8]))
	*($6) = *($1)
	*($7) = $8
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	CALL $30(($0 + [28]), [24])
	$6 = *($0 + [28])
	$1 = (*(($0 + [32])) - $6)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [9828])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [9828])
	CALL memcpy(($6 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [9828])
	CALL memcpy(($6 + [16]), ($4 + [16]), [8])
	return $0
}

void .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $292(($2 + [32]), ($1 + [8]))
	*(($5 = (($2 + [16]) + [8]))) = *(($1 + [32]))
	*($2 + [16]) = *($1 + [24])
	*((($2 + [48]) + [8])) = *($5)
	*($2 + [48]) = *($2 + [16])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$5 = CALL $292(($2 + [80]), $4)
	$6 = *((($2 + [48]) + [8]))
	*((($2 + [64]) + [8])) = $6
	*(($2 + [8])) = $6
	$6 = *($2 + [48])
	*($2) = $6
	*($2 + [64]) = $6
	CALL void $0((int_32 $3), (int_64 $5), (int_32 $2), (int_32 $1))
	if ( (*($2 + [80]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $4 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9924])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4994488546135575680, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $7($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9924])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $276 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [64])
	$global$0 = $3
	$4 = *($0)
	$5 = (int_64)6
	
.LOOP $label$1:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	$0 = [0]
	
.LOOP $label$2:
	$6 = ($1 + $0)
	$7 = ($0 + [1])
	$0 = $7
	if ( *($6) ){ goto $label$2 }
	$8 = (CASTING uint_64)(uint_32 ($7 + [-1]))
	$5 = (int_64)0
	$9 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$3:
	$11 = (int_64)0
	if ( (uint_64)($5 <= $8) ){ goto $label$7 }
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$0 = ($0 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$5 }
	
.LABEL $label$6
	$11 = ((int_64)$11 & (int_64)15)
	goto $label$4 
	
.LABEL $label$5
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$4
	$1 = ($1 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$3 }
	*($3 + [16]) = $10
	*($3 + [8]) = $4
	*(($1 = CALL _Znwj([16]))) = $4
	*($1 + [8]) = (int_64)3617214756542218240
	*(($3 + [44])) = [0]
	$0 = ($1 + [16])
	*((($3 + [8]) + [24])) = $0
	*(($3 + [28])) = $0
	*($3 + [24]) = $1
	*($3 + [36 align=4]) = (int_64)0
	$1 = *($2 + [24])
	$0 = ( *(($2 + [28])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($0 + [24])
	$5 = (CASTING uint_64)(uint_32 $0)
	$6 = ($2 + [24])
	$0 = (($3 + [8]) + [28])
	
.LOOP $label$10:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$10 }
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $30($0, $1)
	$0 = *(($3 + [40]))
	$1 = *(($3 + [36]))
	goto $label$11 
	
.LABEL $label$12
	$0 = [0]
	$1 = [0]
	
.LABEL $label$11
	*($3 + [48]) = $1
	*($3 + [56]) = $0
	$0 = ($0 - $1)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9828])
	CALL memcpy($1, $2, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9828])
	CALL memcpy(($1 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)($0 + [-16]) > (int_32)[7]), [9828])
	CALL memcpy(($1 + [16]), ($2 + [16]), [8])
	*($3 + [52]) = ($1 + [24])
	CALL $201(($3 + [48]), $6)
	CALL $32(($3 + [48]), ($3 + [8]))
	$1 = *($3 + [48])
	CALL send_inline($1, (*($3 + [52]) - $1))
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$13 }
	*($3 + [52]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$1 = *($3 + [36])
	if ( ($1 == 0) ){ goto $label$14 }
	*(($3 + [40])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$1 = *($3 + [24])
	if ( ($1 == 0) ){ goto $label$15 }
	*(($3 + [28])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($3 + [64])
}

int_32 .FUNC $221 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10573])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $30($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9998])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [10336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10381])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10431])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [10336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10381])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10431])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [24])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [28])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [24])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [28])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [40]))
}

void .FUNC $3 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	$5 = ($global$0 - [192])
	$global$0 = $5
	*(($5 + [104])) = [0]
	*($5 + [80]) = $2
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($1)
	$6 = CALL $4(($5 + [72]), (uint_64)*($3 + [8]) >> (uint_64)(int_64)8), [8310]
	$7 = *($6))
	*(($5 + [64])) = [0]
	*($5 + [56]) = (int_64)0
	$8 = *($3)
	$9 = CALL $302([8334])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$4 }
	*($5 + [56]) = ($9 << [1])
	$10 = (($5 + [56]) | [1])
	$11 = $10
	if ( $9 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$12 = (($9 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($5 + [56]) = ($12 | [1])
	*($5 + [64]) = $11
	*($5 + [60]) = $9
	$10 = (($5 + [56]) | [1])
	
.LABEL $label$3
	CALL memcpy($11, [8334], $9)
	
.LABEL $label$2
	$12 = [0]
	*(($11 + $9)) = [0]
	CALL eosio_assert(((int_64)$7 >= (int_64)$8), ( *($5 + [64]) ? $10 : (*($5 + [56]) & [1]) ))
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$5
	*((($5 + [40]) + [8])) = *(($6 + [8]))
	*($5 + [40]) = *($6)
	CALL eosio_assert([1], [9768])
	$7 = (int_64)5462355
	
.LOOP $label$7:
	$10 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$7 = $8
	$10 = [1]
	$9 = $12
	$12 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$7 = $8
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$12 < (int_32)[6])
	$11 = ($12 + [1])
	$12 = $11
	if ( $9 ){ goto $label$9 }
	$10 = [1]
	$12 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert($10, [8204])
	$7 = *($3)
	if ( ((int_64)*($6) != (int_64)$7) ){ goto $label$11 }
	CALL $5(($5 + [72]), $6)
	$13 = *(($3 + [8]))
	$14 = (int_64)0
	goto $label$10 
	
.LABEL $label$11
	$8 = *($1)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($5 + [72])), [10116])
	CALL eosio_assert(((int_64)*($5 + [72]) == (int_64)CALL $fimport$3()), [10162])
	$15 = *($6 + [8])
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)$15), [10849])
	$7 = (int_64)
	*($6) = $7(*($6) - $7))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [10897])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [10919])
	$14 = *($6)
	$13 = *($6 + [8])
	$7 = (uint_64)$15 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)$13 >> (uint_64)(int_64)8)), [10213])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($5 + [128]), $6, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy((($5 + [128]) | [8]), ($6 + [8]), [8])
	CALL db_update_i64(*($6 + [20]), $8, ($5 + [128]), [16])
	$12 = (($5 + [72]) + [16])
	if ( (uint_64)($7 <= *($12)) ){ goto $label$10 }
	*($12) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$10
	*(($12 = (($5 + [24]) + [8]))) = *((($5 + [40]) + [8]))
	*($5 + [24]) = *($5 + [40])
	$11 = CALL $292(($5 + [8]), $4)
	*((($5 + [112]) + [8])) = *($12)
	*($5 + [112]) = *($5 + [24])
	$16 = *($1)
	$7 = (int_64)0
	$15 = (int_64)59
	$12 = [9817]
	$17 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$17 }
	$9 = *($12)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$9 = ($9 + [-91])
	goto $label$15 
	
.LABEL $label$17
	$8 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$13
	$12 = ($12 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$17 = ((int_64)$8 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)4294967291)
	if ( ((int_64)$15 != (int_64)55834574842) ){ goto $label$12 }
	*(($5 + [160])) = $13
	*(($5 + [144])) = *(($5 + [120]))
	*($5 + [128]) = $2
	*($5 + [152]) = $14
	*($5 + [136]) = *($5 + [112])
	CALL $292(($5 + [168]), $11)
	CALL $6($16, $16, $17, ($5 + [128]))
	if ( ((*($5 + [168]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($5 + [176])))
	
.LABEL $label$18
	if ( ((*($11) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($11 + [8]))
	
.LABEL $label$19
	*($0) = *($5 + [40])
	*($0 + [16]) = $14
	*(($0 + [24])) = $13
	*(($0 + [8])) = *((($5 + [40]) + [8]))
	$11 = *($5 + [96])
	if ( ($11 == 0) ){ goto $label$20 }
	$6 = ($5 + [100])
	$12 = *($6)
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$22 }
	
.LOOP $label$23:
	$12 = ($12 + [-24])
	$9 = *($12)
	*($12) = [0]
	if ( ($9 == 0) ){ goto $label$24 }
	CALL _ZdlPv($9)
	
.LABEL $label$24
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$23 }
	$12 = *(($5 + [96]))
	goto $label$21 
	
.LABEL $label$22
	$12 = $11
	
.LABEL $label$21
	*($6) = $11
	CALL _ZdlPv($12)
	
.LABEL $label$20
	$global$0 = ($5 + [192])
	return (unreachable)
	
.LABEL $label$1
	CALL $291(($5 + [56]))
}

void .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $292(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = *(*($0))
	$3 = (( ($3 + [40]) ? [0] : $3 ) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $292(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $188 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9768])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8204])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [9998])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [9998])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($0 + [64])
	$2 = *($0 + [32])
	$4 = *(($0 + [92]))
	$3 = *(($0 + [88]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$5:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$4 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$1), [9924])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *(($0 + [72])), (int_64)-5969210290865781248, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $214($1, $5)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$1), [9924])
	
.LABEL $label$2
	*($0 + [40]) = *($6)
	*(($0 + [56])) = *(($6 + [16]))
	*(($0 + [48])) = *(($6 + [8]))
	*($0) = [1]
	
.LABEL $label$1
	return ($0 + [40])
}

void .FUNC $48 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL require_auth(*($0 + [56]))
	*(($3 + [56])) = (int_64)0
	*(($3 + [64])) = (int_64)1398362884
	$4 = [0]
	*($3 + [8]) = [0]
	*($3 + [40]) = $1
	*($3 + [16]) = *($0)
	*($3 + [24]) = *($0 + [8])
	*($3 + [32]) = *($0 + [56])
	CALL eosio_assert([1], [9768])
	$5 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8204])
	*(($3 + [88])) = (int_64)-1
	*(($9 = ($3 + [96]))) = (int_64)0
	$4 = [0]
	*(($3 + [104])) = [0]
	*(($3 + [80])) = *(($0 + [8]))
	*($3 + [72]) = *($0)
	$7 = CALL $49(($3 + [8]))
	if ( (*($3 + [8]) == 0) ){ goto $label$7 }
	$6 = *(($7 + [16]))
	$5 = *($7 + [8])
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([1], [9768])
	$5 = (int_64)5459781
	
.LOOP $label$9:
	$0 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$5 = $6
	$0 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$11 }
	$0 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($0, [8204])
	$6 = (int_64)1397703940
	$5 = (int_64)0
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$6), [10748])
	$5 = ((int_64)*($2) + (int_64)$5)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [10791])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [10810])
	*(($3 + [56])) = $5
	*(($3 + [64])) = $6
	*($3 + [48]) = $1
	*($3 + [9]) = [1]
	CALL $50(($3 + [8]))
	$8 = *($9)
	if ( ($8 == 0) ){ goto $label$12 }
	$0 = ($3 + [100])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$16 }
	CALL _ZdlPv($7)
	
.LABEL $label$16
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$15 }
	$4 = *(($3 + [96]))
	goto $label$13 
	
.LABEL $label$14
	$4 = $8
	
.LABEL $label$13
	*($0) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$12
	$global$0 = ($3 + [112])
}

void .FUNC $264 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL prints([11320])
	$4 = ($2 + [16])
	$5 = (int_64)5
	
.LOOP $label$1:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	CALL $265(($3 + [32]), $4, (int_64)-6217917475468607488, [11345])
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	$4 = CALL $302([10577])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$9 }
	*($3 + [16]) = ($4 << [1])
	$6 = (($3 + [16]) | [1])
	if ( $4 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$7 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($3 + [16]) = ($7 | [1])
	*($3 + [24]) = $6
	*($3 + [20]) = $4
	
.LABEL $label$8
	CALL memcpy($6, [10577], $4)
	
.LABEL $label$7
	*(($6 + $4)) = [0]
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $302([11351])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$12 }
	*($3) = ($4 << [1])
	$6 = ($3 | [1])
	if ( $4 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$7 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($3) = ($7 | [1])
	*($3 + [8]) = $6
	*($3 + [4]) = $4
	
.LABEL $label$11
	CALL memcpy($6, [11351], $4)
	
.LABEL $label$10
	*(($6 + $4)) = [0]
	CALL $53(($3 + [32]), ($3 + [16]), $3)
	if ( (*($3) & [1]) ){ goto $label$14 }
	if ( (*($3 + [16]) & [1]) ){ goto $label$13 }
	goto $label$4 
	
.LABEL $label$14
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$13
	CALL _ZdlPv(*($3 + [24]))
	if ( (*($3 + [32]) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	CALL $291(($3 + [16]))
	
.LABEL $label$5
	CALL $291($3)
	
.LABEL $label$4
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [40]))
	
.LABEL $label$2
	CALL prints([11148])
	*($0 + [8]) = [0]
	$4 = *($0 + [4])
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $262($4, $1, $2)
	
.LABEL $label$15
	$global$0 = ($3 + [48])
	(unreachable)
	(unreachable)
}

void .FUNC memory ()
{
}

int_32 .FUNC $266 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [9975])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $305($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [36]) = $7
	*($3 + [32]) = $7
	*($3 + [40]) = ($7 + $6)
	*(($9 = CALL _Znwj([64])) + [20]) = [0]
	*($9 + [12 align=4]) = (int_64)0
	*($9 + [32]) = (int_64)0
	*($9 + [40]) = (int_64)1398362884
	CALL eosio_assert([1], [9768])
	$10 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$10 = $11
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$10 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [8204])
	*($9 + [48]) = $0
	CALL $270(($3 + [32]), $9)
	*($9 + [52]) = $1
	*($3 + [24]) = $9
	$10 = *($9)
	*($3 + [16]) = $10
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $10
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $269($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $308($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	if ( ((*($5 + [12]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [20])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [48])
	return $9
}

void .FUNC $236 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $300($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $43 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [112])
	$global$0 = $2
	CALL require_auth(*($0 + [56]))
	*(($2 + [80])) = (int_64)-1
	*(($3 = ($2 + [88]))) = (int_64)0
	*(($2 + [96])) = [0]
	$4 = *($0 + [8])
	*(($2 + [72])) = $4
	*($2 + [8]) = [0]
	$5 = *($0)
	*($2 + [16]) = $5
	*($2 + [24]) = $4
	*($2 + [32]) = *($0 + [56])
	*($2 + [64]) = $5
	*($2 + [40]) = $1
	$6 = CALL db_find_i64($5, $4, (int_64)6820293285731368960, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$0 = ($2 + [64])
	$6 = CALL $44($0, $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9924])
	CALL eosio_assert([1], [10272])
	CALL eosio_assert([1], [10306])
	$7 = CALL db_next_i64(*($6 + [20]), ($2 + [104]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $44($0, $7)
	
.LABEL $label$2
	CALL $45($0, $6)
	
.LABEL $label$1
	CALL $41(($2 + [8]))
	$6 = *($3)
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($2 + [92])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [88]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $6
	
.LABEL $label$4
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [112])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	CALL require_auth(*($0))
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$2 = [0]
	
.LOOP $label$3:
	$3 = ($1 + $2)
	$4 = ($2 + [1])
	$2 = $4
	if ( *($3) ){ goto $label$3 }
	$5 = (CASTING uint_64)(uint_32 ($4 + [-1]))
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = (int_64)0
	
.LOOP $label$4:
	$9 = (int_64)0
	if ( ((uint_64)$6 >= (uint_64)$5) ){ goto $label$5 }
	$2 = *($1)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$2 = ($2 + [-91])
	goto $label$6 
	
.LABEL $label$7
	$2 = ( ($2 + [-48]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$9 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$8
	$1 = ($1 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$4 }
	CALL $43(($0 + [264]), $8)
}

void .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [48])
	$global$0 = $1
	if ( (*($0 + [1]) == 0) ){ goto $label$3 }
	$2 = ($0 + [56])
	$3 = *($0 + [32])
	$5 = *(($0 + [84]))
	$4 = *(($0 + [80]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$6 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$2), [9924])
	goto $label$4 
	
.LABEL $label$5
	$6 = CALL db_find_i64(*($2), *(($0 + [64])), (int_64)6820293285731368960, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $44($2, $6)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$2), [9924])
	
.LABEL $label$4
	*(($1 + [16])) = [0]
	*($1 + [8]) = (int_64)0
	$6 = CALL $302([10003])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$10 }
	*($1 + [8]) = ($6 << [1])
	$5 = (($1 + [8]) | [1])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($1 + [8]) = ($4 | [1])
	*($1 + [16]) = $5
	*($1 + [12]) = $6
	
.LABEL $label$9
	CALL memcpy($5, [10003], $6)
	
.LABEL $label$8
	*(($5 + $6)) = [0]
	$6 = CALL $292(($1 + [32]), ($1 + [8]))
	CALL eosio_assert(*($0), ( *($6 + [8]) ? ($6 + [1]) : (*($1 + [32]) & [1]) ))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($1 + [16]))
	
.LABEL $label$12
	$3 = *($0 + [24])
	*($1 + [32]) = $0
	CALL eosio_assert([1], [10081])
	CALL $211($2, $7, $3, ($1 + [32]))
	
.LABEL $label$3
	$global$0 = ($1 + [48])
	return 
	
.LABEL $label$2
	$3 = *($0 + [24])
	*($1 + [24]) = $0
	CALL $212(($1 + [32]), $2, $3, ($1 + [24]))
	$global$0 = ($1 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $291(($1 + [8]))
}

int_32 .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($0 + [56])
	$2 = *($0 + [32])
	$4 = *(($0 + [84]))
	$3 = *(($0 + [80]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$5:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$4 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$1), [9924])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *(($0 + [64])), (int_64)6820293285731368960, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $44($1, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$1), [9924])
	
.LABEL $label$2
	*($0 + [40]) = *($6)
	*(($0 + [48])) = *(($6 + [8]))
	*($0) = [1]
	
.LABEL $label$1
	return ($0 + [40])
}

int_32 .FUNC $47 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL require_auth(*($0 + [56]))
	*(($3 + [72])) = (int_64)-1
	*(($4 = ($3 + [80]))) = (int_64)0
	*(($3 + [88])) = [0]
	$5 = *($0 + [8])
	*(($3 + [64])) = $5
	*($3) = [0]
	*($3 + [32]) = $1
	$1 = *($0)
	*($3 + [8]) = $1
	*($3 + [16]) = $5
	*($3 + [24]) = *($0 + [56])
	*($3 + [56]) = $1
	$6 = *(CALL $40($3) + [8])
	*($2) = *($3)
	CALL $41($3)
	$4 = *($4)
	if ( ($4 == 0) ){ goto $label$1 }
	$7 = ($3 + [84])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($3 + [80]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($7) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($3 + [96])
	return $6
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth(*($0))
	if ( (*($2) & [1]) ){ goto $label$2 }
	$2 = ($2 + [1])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($2 + [8])
	
.LABEL $label$1
	$4 = [0]
	
.LOOP $label$3:
	$5 = ($2 + $4)
	$6 = ($4 + [1])
	$4 = $6
	if ( *($5) ){ goto $label$3 }
	$7 = (CASTING uint_64)(uint_32 ($6 + [-1]))
	$8 = (int_64)0
	$9 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$4:
	$11 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$7) ){ goto $label$5 }
	$4 = *($2)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$4 = ($4 + [-91])
	goto $label$6 
	
.LABEL $label$7
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$9 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$8
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$4 }
	$2 = [0]
	*($3 + [63]) = [0]
	$0 = ($0 + [264])
	$4 = CALL $47($0, $10, ($3 + [63]))
	if ( (*($3 + [63]) == 0) ){ goto $label$10 }
	$8 = *($1)
	CALL __multi3(($3 + [24]), $8, (int_64)$8 >> (int_64)63), (CASTING uint_64)(uint_32 $4), (int_64)0)
	$7 = *($1 + [8])
	$8 = *(($3 + [32]))
	$10 = *($3 + [24])
	CALL eosio_assert(( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [10524])
	CALL eosio_assert(( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [10548])
	CALL eosio_assert([1], [10484])
	CALL eosio_assert([1], [10499])
	CALL eosio_assert([1], [9768])
	$12 = ((int_64)$10 / (int_64)100)
	$9 = (uint_64)$7 >> (uint_64)(int_64)8
	$8 = $9)
	
.LOOP $label$12:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$11 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$8 = $11
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$8 = $11
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$14 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$12 }
	
.LABEL $label$11
	CALL eosio_assert($6, [8204])
	CALL eosio_assert([1], [9853])
	if ( ((uint_64)((int_64)$10 + (int_64)99) > (uint_64)(int_64)198) ){ goto $label$15 }
	CALL eosio_assert([1], [9768])
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$8 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$9 = $8
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$9 = $8
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$20 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$4 = [0]
	
.LABEL $label$16
	CALL eosio_assert($4, [8204])
	$12 = (int_64)1
	
.LABEL $label$15
	$8 = (int_64)0
	$11 = (int_64)59
	$2 = [8766]
	$10 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$8 > (uint_64)(int_64)8) ){ goto $label$26 }
	$4 = *($2)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$4 = ($4 + [-91])
	goto $label$24 
	
.LABEL $label$26
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$22
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$21 }
	*(($3 + [16])) = $7
	*($3 + [48]) = $7
	*($3 + [8]) = $12
	*($3 + [40]) = $12
	CALL $48($0, $10, ($3 + [8]))
	
.LABEL $label$10
	$global$0 = ($3 + [64])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [10336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10381])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10431])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9975])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $305($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9998])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [9998])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $210(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $308($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $222 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [48])
	$global$0 = $1
	if ( (*($0 + [1]) == 0) ){ goto $label$5 }
	$2 = ($0 + [64])
	$3 = *($0 + [32])
	$5 = *(($0 + [92]))
	$4 = *(($0 + [88]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$10:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$9 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$2), [9924])
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$6 = CALL db_find_i64(*($2), *(($0 + [72])), (int_64)3617214701426458624, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $59($2, $6)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$2), [9924])
	
.LABEL $label$7
	*(($1 + [16])) = [0]
	*($1 + [8]) = (int_64)0
	$6 = CALL $302([10003])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$4 }
	*($1 + [8]) = ($6 << [1])
	$5 = (($1 + [8]) | [1])
	if ( $6 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [24])
	*($1 + [24]) = $0
	CALL $223(($1 + [32]), $2, $3, ($1 + [24]))
	
.LABEL $label$5
	$global$0 = ($1 + [48])
	return 
	
.LABEL $label$4
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($1 + [8]) = ($4 | [1])
	*($1 + [16]) = $5
	*($1 + [12]) = $6
	
.LABEL $label$3
	CALL memcpy($5, [10003], $6)
	
.LABEL $label$2
	*(($5 + $6)) = [0]
	$6 = CALL $292(($1 + [32]), ($1 + [8]))
	CALL eosio_assert(*($0), ( *($6 + [8]) ? ($6 + [1]) : (*($1 + [32]) & [1]) ))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($1 + [16]))
	
.LABEL $label$12
	$3 = *($0 + [24])
	*($1 + [32]) = $0
	CALL eosio_assert([1], [10081])
	CALL $224($2, $7, $3, ($1 + [32]))
	$global$0 = ($1 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $291(($1 + [8]))
}

void .FUNC $267 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [10030])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = [0]
	*(($5 = CALL _Znwj([64])) + [20]) = [0]
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)1398362884
	CALL eosio_assert([1], [9768])
	$2 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8204])
	*($5 + [48]) = $1
	CALL $268(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$7 = *($5 + [52])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $269(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [12]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [20])))
	
.LABEL $label$9
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

int_32 .FUNC $234 (int_32 $0, int_32 $1)
{
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9828])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $201($0, ($1 + [8]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9828])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $235($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9828])
	CALL memcpy(*($0 + [4]), ($1 + [44]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $233 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *(*($0 + [4]))
	*($1) = *($4 + [40])
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $294($6, ($4 + [48]))
	*($1 + [24]) = *(($4 + [64]))
	if ( ((int_32)($4 + [40]) == (int_32)$1) ){ goto $label$1 }
	CALL $66(($1 + [32]), *(($4 + [72])), *(($4 + [76])))
	
.LABEL $label$1
	*($1 + [44]) = *(($4 + [84]))
	$4 = *($6)
	$6 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [16])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	$8 = *($1 + [32])
	$6 = *(($1 + [36]))
	$9 = ($6 - $8)
	$7 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$4 }
	$4 = (($9 & [-8]) + $4)
	
.LABEL $label$4
	$6 = ($4 + [4])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL $305($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $234($3, $1)
	$7 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)7394089168667672576, *(*($0 + [8])), $7, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $308($4)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [16])
}

void .FUNC $249 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $300($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $252(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $226 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [48])
	$global$0 = $1
	if ( (*($0 + [1]) == 0) ){ goto $label$3 }
	$2 = ($0 + [88])
	$3 = *($0 + [32])
	$5 = *(($0 + [116]))
	$4 = *(($0 + [112]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$6 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [9924])
	goto $label$4 
	
.LABEL $label$5
	$6 = CALL db_find_i64(*($2), *(($0 + [96])), (int_64)7394089168667672576, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $125($2, $6)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [9924])
	
.LABEL $label$4
	*(($1 + [16])) = [0]
	*($1 + [8]) = (int_64)0
	$6 = CALL $302([10003])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$10 }
	*($1 + [8]) = ($6 << [1])
	$5 = (($1 + [8]) | [1])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($1 + [8]) = ($4 | [1])
	*($1 + [16]) = $5
	*($1 + [12]) = $6
	
.LABEL $label$9
	CALL memcpy($5, [10003], $6)
	
.LABEL $label$8
	*(($5 + $6)) = [0]
	$6 = CALL $292(($1 + [32]), ($1 + [8]))
	CALL eosio_assert(*($0), ( *($6 + [8]) ? ($6 + [1]) : (*($1 + [32]) & [1]) ))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($1 + [16]))
	
.LABEL $label$12
	$3 = *($0 + [24])
	*($1 + [32]) = $0
	CALL eosio_assert([1], [10081])
	CALL $231($2, $7, $3, ($1 + [32]))
	
.LABEL $label$3
	$global$0 = ($1 + [48])
	return 
	
.LABEL $label$2
	$3 = *($0 + [24])
	*($1 + [24]) = $0
	CALL $232(($1 + [32]), $2, $3, ($1 + [24]))
	$global$0 = ($1 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $291(($1 + [8]))
}

int_32 .FUNC $167 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [32])
	$global$0 = $1
	*(($1 + [24])) = [0]
	*($1 + [16]) = (int_64)0
	$2 = *($0 + [4])
	$3 = CALL $302([11208])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($1 + [16]) = ($3 << [1])
	$4 = (($1 + [16]) | [1])
	$5 = $4
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($1 + [16]) = ($4 | [1])
	*($1 + [24]) = $5
	*($1 + [20]) = $3
	$4 = (($1 + [16]) | [1])
	
.LABEL $label$4
	CALL memcpy($5, [11208], $3)
	
.LABEL $label$3
	*(($5 + $3)) = [0]
	CALL eosio_assert(($2 == 0), ( *($1 + [24]) ? $4 : (*($1 + [16]) & [1]) ))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$6
	*(($3 = CALL _Znwj([12]))) = (int_64)0
	*(($5 = ($3 + [8]))) = [0]
	*(($0 + [4])) = $3
	*(($1 + [8])) = [0]
	*($3 + [4]) = [0]
	*($3) = [11264]
	*($5) = [0]
	*($1) = (int_64)0
	$5 = CALL $302([11237])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	*($1) = ($5 << [1])
	$4 = ($1 | [1])
	$2 = $4
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($4)
	*($1) = ($4 | [1])
	*($1 + [8]) = $2
	*($1 + [4]) = $5
	$4 = ($1 | [1])
	
.LABEL $label$8
	CALL memcpy($2, [11237], $5)
	
.LABEL $label$7
	*(($2 + $5)) = [0]
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), ( *($1 + [8]) ? $4 : (*($1) & [1]) ))
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$10
	$3 = *(($0 + [4]))
	$global$0 = ($1 + [32])
	return $3
	
.LABEL $label$2
	CALL $291(($1 + [16]))
	
.LABEL $label$1
	CALL $291($1)
	(unreachable)
	return (unreachable)
}

void .FUNC $166 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [10030])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $258($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $236(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $165 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [304]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [308])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [304]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [240]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [244])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [240]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [176]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [112]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $305($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8204])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $172(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $308($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $190(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $305($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [40])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $1
	*($3 + [64]) = $1
	*($3 + [72]) = ($1 + $0)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $193(($3 + [88]), ($3 + [80]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $308($1)
	
.LABEL $label$4
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $194(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$5
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $162 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

int_32 .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $305($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($3 + [16]) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [52]) = $1
	*($3 + [48]) = $1
	*($3 + [56]) = ($1 + $0)
	CALL $176(($3 + [48]), ($3 + [8]))
	CALL eosio_assert(((uint_32)(*($3 + [56]) - *($3 + [52])) > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [24]), *($3 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $308($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $185(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $305($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $174(($3 + [8]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $308($2)
	
.LABEL $label$5
	*($3 + [4]) = ($3 + [48])
	*($3) = ($3 + [60])
	CALL $189($3, ($3 + [8]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$6
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $308($0)
	
.LABEL $label$1
}

void .FUNC $230 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $300($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $244 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5 + [40])
	*(($1 + [16])) = *(($5 + [56]))
	*(($1 + [8])) = *(($5 + [48]))
	$6 = [24]
	$7 = ($1 + [24])
	if ( ((int_32)($5 + [40]) == (int_32)$1) ){ goto $label$1 }
	CALL $71($7, *(($5 + [64])), *(($5 + [68])))
	
.LABEL $label$1
	$8 = *($1 + [24])
	$5 = *(($1 + [28]))
	$9 = ($5 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[24]))
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$3 }
	$6 = ((((int_32)((uint_32)($9 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $6) + [24])
	
.LABEL $label$3
	if ( ($6 <= [513]) ){ goto $label$5 }
	$5 = CALL $305($6)
	goto $label$4 
	
.LABEL $label$5
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$4
	*($3) = $5
	*($3 + [8]) = ($5 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [9828])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[7]), [9828])
	CALL memcpy(($5 + [8]), ($1 + [8]), [8])
	CALL eosio_assert(((int_32)($6 + [-16]) > (int_32)[7]), [9828])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	*($3 + [4]) = ($5 + [24])
	CALL $245($3, $7)
	$10 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($4 + [8]), (int_64)6457483382686220288, *(*($0 + [8])), $10, $5, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$10 >= (uint_64)*($4 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $308($5)
	if ( (uint_64)($10 <= *($4 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

int_32 .FUNC $169 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [32])
	$global$0 = $1
	*(($1 + [24])) = [0]
	*($1 + [16]) = (int_64)0
	$2 = *($0 + [4])
	$3 = CALL $302([11208])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($1 + [16]) = ($3 << [1])
	$4 = (($1 + [16]) | [1])
	$5 = $4
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($1 + [16]) = ($4 | [1])
	*($1 + [24]) = $5
	*($1 + [20]) = $3
	$4 = (($1 + [16]) | [1])
	
.LABEL $label$4
	CALL memcpy($5, [11208], $3)
	
.LABEL $label$3
	*(($5 + $3)) = [0]
	CALL eosio_assert(($2 == 0), ( *($1 + [24]) ? $4 : (*($1 + [16]) & [1]) ))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$6
	*(($3 = CALL _Znwj([12]))) = (int_64)0
	*(($5 = ($3 + [8]))) = [0]
	*(($0 + [4])) = $3
	*(($1 + [8])) = [0]
	*($3 + [4]) = [0]
	*($3) = [11400]
	*($5) = [0]
	*($1) = (int_64)0
	$5 = CALL $302([11237])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	*($1) = ($5 << [1])
	$4 = ($1 | [1])
	$2 = $4
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($4)
	*($1) = ($4 | [1])
	*($1 + [8]) = $2
	*($1 + [4]) = $5
	$4 = ($1 | [1])
	
.LABEL $label$8
	CALL memcpy($2, [11237], $5)
	
.LABEL $label$7
	*(($2 + $5)) = [0]
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), ( *($1 + [8]) ? $4 : (*($1) & [1]) ))
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$10
	$3 = *(($0 + [4]))
	$global$0 = ($1 + [32])
	return $3
	
.LABEL $label$2
	CALL $291(($1 + [16]))
	
.LABEL $label$1
	CALL $291($1)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $168 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [32])
	$global$0 = $1
	*(($1 + [24])) = [0]
	*($1 + [16]) = (int_64)0
	$2 = *($0 + [4])
	$3 = CALL $302([11208])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($1 + [16]) = ($3 << [1])
	$4 = (($1 + [16]) | [1])
	$5 = $4
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($1 + [16]) = ($4 | [1])
	*($1 + [24]) = $5
	*($1 + [20]) = $3
	$4 = (($1 + [16]) | [1])
	
.LABEL $label$4
	CALL memcpy($5, [11208], $3)
	
.LABEL $label$3
	*(($5 + $3)) = [0]
	CALL eosio_assert(($2 == 0), ( *($1 + [24]) ? $4 : (*($1 + [16]) & [1]) ))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$6
	*(($3 = CALL _Znwj([12]))) = (int_64)0
	*(($5 = ($3 + [8]))) = [0]
	*(($0 + [4])) = $3
	*(($1 + [8])) = [0]
	*($3 + [4]) = [0]
	*($3) = [11316]
	*($5) = [0]
	*($1) = (int_64)0
	$5 = CALL $302([11237])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	*($1) = ($5 << [1])
	$4 = ($1 | [1])
	$2 = $4
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($4)
	*($1) = ($4 | [1])
	*($1 + [8]) = $2
	*($1 + [4]) = $5
	$4 = ($1 | [1])
	
.LABEL $label$8
	CALL memcpy($2, [11237], $5)
	
.LABEL $label$7
	*(($2 + $5)) = [0]
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), ( *($1 + [8]) ? $4 : (*($1) & [1]) ))
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$10
	$3 = *(($0 + [4]))
	$global$0 = ($1 + [32])
	return $3
	
.LABEL $label$2
	CALL $291(($1 + [16]))
	
.LABEL $label$1
	CALL $291($1)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $245 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9828])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9828])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9828])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9828])
	CALL memcpy(*($6), ($7 + [16]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $279 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [10116])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10162])
	$6 = *($1)
	CALL $294(($1 + [12]), *($3))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10213])
	$3 = *($1 + [12])
	$7 = ( *(($1 + [16])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [36])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $305($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $271($5, $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $308($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $292(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $292(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $242 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [10030])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([48])) + [16]) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8204])
	*($5 + [32]) = [0]
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [36]) = $1
	CALL $244(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$7 = *($5 + [40])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $239(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	$7 = *($3 + [24])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($3 + [28])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $243 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [10116])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10162])
	$6 = *($1)
	$7 = *($3)
	*($1) = *($7 + [40])
	*(($1 + [8])) = *(($7 + [48]))
	*(($1 + [16])) = *(($7 + [56]))
	$3 = [24]
	$8 = ($1 + [24])
	if ( ((int_32)($7 + [40]) == (int_32)$1) ){ goto $label$1 }
	CALL $71($8, *(($7 + [64])), *(($7 + [68])))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10213])
	$9 = *($1 + [24])
	$7 = *(($1 + [28]))
	$10 = ($7 - $9)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$10 / (int_32)[24]))
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$3 }
	$3 = ((((int_32)((uint_32)($10 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $3) + [24])
	
.LABEL $label$3
	if ( ($3 <= [513]) ){ goto $label$5 }
	$7 = CALL $305($3)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	*($5) = $7
	*($5 + [8]) = ($7 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [9828])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert(((int_32)($3 + [-8]) > (int_32)[7]), [9828])
	CALL memcpy(($7 + [8]), ($1 + [8]), [8])
	CALL eosio_assert(((int_32)($3 + [-16]) > (int_32)[7]), [9828])
	CALL memcpy(($7 + [16]), ($1 + [16]), [8])
	*($5 + [4]) = ($7 + [24])
	CALL $245($5, $8)
	CALL db_update_i64(*($1 + [40]), $2, $7, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $308($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [16])
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $222($0)
	$1 = *(($0 + [88]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [92])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [88]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	if ( ((*(($0 + [48])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($0 + [56])))
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9975])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $305($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9998])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $176(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $220(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $308($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $271 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9828])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [9828])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $201($0, ($1 + [12]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9828])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9828])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9828])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $270 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9998])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $176($0, ($1 + [12]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9998])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9998])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $277 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($1 + [8])
	*(($3 + [8])) = *(($4 + [8]))
	*($3) = *($4)
	CALL $292(($3 + [16]), *($1 + [12]))
	CALL $278(($2 + [32]), [11524], $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$1
	CALL prints([11148])
	*($0 + [8]) = [0]
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL $262($0, $1, $2)
	
.LABEL $label$2
	$global$0 = ($3 + [32])
}

int_32 .FUNC $240 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10573])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = ((int_32)($5 - $2) / (int_32)[24])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $241($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ((int_32)$7 * (int_32)[24]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$6 = *($7)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [9998])
	CALL memcpy($2, *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [9998])
	CALL memcpy(($2 + [8]), *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [9998])
	CALL memcpy(($2 + [16]), *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	$2 = ($2 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $275 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = *($0)
	$5 = (int_64)6
	
.LOOP $label$1:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	*($3 + [16]) = (int_64)3617214756542218240
	*($3 + [8]) = $4
	$0 = [0]
	
.LOOP $label$2:
	$6 = ($1 + $0)
	$7 = ($0 + [1])
	$0 = $7
	if ( *($6) ){ goto $label$2 }
	$8 = (CASTING uint_64)(uint_32 ($7 + [-1]))
	$5 = (int_64)0
	$9 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$3:
	$11 = (int_64)0
	if ( ((uint_64)$5 >= (uint_64)$8) ){ goto $label$4 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$0 = ($0 + [-91])
	goto $label$5 
	
.LABEL $label$6
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$8 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$7 
	
.LABEL $label$8
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$7
	$1 = ($1 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$3 }
	$1 = CALL $246(($3 + [24]), ($3 + [8]), $4, $10, $2)
	CALL $32(($3 + [64]), $1)
	$0 = *($3 + [64])
	CALL send_inline($0, (*($3 + [68]) - $0))
	$0 = *($3 + [64])
	if ( ($0 == 0) ){ goto $label$9 }
	*($3 + [68]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$0 = *($1 + [28])
	if ( ($0 == 0) ){ goto $label$10 }
	*(($1 + [32])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$0 = *($1 + [16])
	if ( ($0 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$global$0 = ($3 + [80])
}

void .FUNC $274 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$5 = ($5 & [1])
	$5 = *($1)
	$7 = ($5 & [1])
	$5 = *($0)
	$6 = uint_32($5 >> [1])
	$8 = ( *($0 + [4]) ? $6 : $7 )
	if ( ((int_32)$8 != (int_32)( *($1 + [4]) ? uint_32($5 >> [1]) : $5 )) ){ goto $label$1 }
	$1 = ( *($1 + [8]) ? ($1 + [1]) : $5 )
	$5 = ($0 + [1])
	if ( $7 ){ goto $label$4 }
	if ( ($8 == 0) ){ goto $label$3 }
	$0 = ([0] - $6)
	
.LOOP $label$5:
	if ( ((int_32)*($5) != (int_32)*($1)) ){ goto $label$2 }
	$4 = [1]
	$1 = ($1 + [1])
	$5 = ($5 + [1])
	$0 = ($0 + [1])
	if ( $0 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	if ( ($8 == 0) ){ goto $label$3 }
	$4 = (CALL $303(( *($0 + [8]) ? $5 : $7 ), $1, $8) == 0)
	goto $label$1 
	
.LABEL $label$3
	$4 = [1]
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	$1 = CALL $292($3, $2)
	CALL eosio_assert($4, ( *($1 + [8]) ? ($1 + [1]) : (*($1) & [1]) ))
	if ( ((*($1) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [48])
	$global$0 = $1
	if ( (*($0 + [1]) == 0) ){ goto $label$3 }
	$2 = ($0 + [64])
	$3 = *($0 + [32])
	$5 = *(($0 + [92]))
	$4 = *(($0 + [88]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$6 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$2), [9924])
	goto $label$4 
	
.LABEL $label$5
	$6 = CALL db_find_i64(*($2), *(($0 + [72])), (int_64)-5969210290865781248, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $214($2, $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$2), [9924])
	
.LABEL $label$4
	*(($1 + [16])) = [0]
	*($1 + [8]) = (int_64)0
	$6 = CALL $302([10003])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$10 }
	*($1 + [8]) = ($6 << [1])
	$5 = (($1 + [8]) | [1])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($1 + [8]) = ($4 | [1])
	*($1 + [16]) = $5
	*($1 + [12]) = $6
	
.LABEL $label$9
	CALL memcpy($5, [10003], $6)
	
.LABEL $label$8
	*(($5 + $6)) = [0]
	$6 = CALL $292(($1 + [32]), ($1 + [8]))
	CALL eosio_assert(*($0), ( *($6 + [8]) ? ($6 + [1]) : (*($1 + [32]) & [1]) ))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($1 + [16]))
	
.LABEL $label$12
	$3 = *($0 + [24])
	*($1 + [32]) = $0
	CALL eosio_assert([1], [10081])
	CALL $217($2, $7, $3, ($1 + [32]))
	
.LABEL $label$3
	$global$0 = ($1 + [48])
	return 
	
.LABEL $label$2
	$3 = *($0 + [24])
	*($1 + [24]) = $0
	CALL $218(($1 + [32]), $2, $3, ($1 + [24]))
	$global$0 = ($1 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $291(($1 + [8]))
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [104])) = [0]
	*($3 + [96]) = (int_64)0
	$4 = CALL $302([8776])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [96]) = ($4 << [1])
	$5 = (($3 + [96]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [96]) = ($6 | [1])
	*($3 + [104]) = $5
	*($3 + [100]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [8776], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	$7 = (int_64)7
	
.LOOP $label$6:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$6 }
	$5 = CALL $292(($3 + [64]), ($3 + [96]))
	$6 = ($0 + [24])
	$4 = *($6)
	if ( $4 ){ goto $label$7 }
	*(($4 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48]) = [0]
	*($6) = $4
	$7 = *($0 + [16])
	*($4) = $7
	*($4 + [8]) = $7
	*($4 + [16]) = $7
	*($4 + [24]) = $7
	
.LABEL $label$7
	$6 = CALL $292(($3 + [112]), $5)
	CALL $52(($3 + [80]), $4, (int_64)-5969208376373018624, $6)
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$8
	if ( ((*($5) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$9
	*(($3 + [56])) = [0]
	*($3 + [48]) = (int_64)0
	$4 = CALL $302([8778])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$12 }
	*($3 + [48]) = ($4 << [1])
	$5 = (($3 + [48]) | [1])
	if ( $4 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [48]) = ($6 | [1])
	*($3 + [56]) = $5
	*($3 + [52]) = $4
	
.LABEL $label$11
	CALL memcpy($5, [8778], $4)
	
.LABEL $label$10
	*(($5 + $4)) = [0]
	CALL $53(($3 + [80]), ($3 + [96]), ($3 + [48]))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($3 + [56]))
	
.LABEL $label$13
	$6 = ($4 & [1])
	$4 = *($3 + [80])
	$5 = ( *($3 + [84]) ? uint_32($4 >> [1]) : $6 )
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$14 }
	$4 = ( *($3 + [88]) ? (($3 + [80]) | [1]) : $6 )
	$5 = ($4 + $5)
	$7 = (int_64)0
	
.LOOP $label$15:
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)*($4)) + (int_64)-48)
	$4 = ($4 + [1])
	if ( ($4 <= $5) ){ goto $label$15 }
	if ( (int_64)($7 == 0) ){ goto $label$14 }
	$8 = *($1)
	CALL __multi3(($3 + [16]), $8, (int_64)$8 >> (int_64)63), $7, (int_64)$7 >> (int_64)63))
	$9 = *($1 + [8])
	$7 = *(($3 + [24]))
	$10 = *($3 + [16])
	CALL eosio_assert(( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [10524])
	CALL eosio_assert(( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [10548])
	CALL eosio_assert([1], [10484])
	CALL eosio_assert([1], [10499])
	CALL eosio_assert([1], [9768])
	$11 = ((int_64)$10 / (int_64)100)
	$4 = [0]
	$8 = (uint_64)$9 >> (uint_64)(int_64)8
	$7 = $8)
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$12 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$7 = $12
	$5 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$7 = $12
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $5 ){ goto $label$20 }
	$5 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$5 = [0]
	
.LABEL $label$16
	CALL eosio_assert($5, [8204])
	CALL eosio_assert([1], [9853])
	if ( ((uint_64)((int_64)$10 + (int_64)99) > (uint_64)(int_64)198) ){ goto $label$21 }
	CALL eosio_assert([1], [9768])
	$4 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$8 = $7
	$5 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$25
	$8 = $7
	
.LOOP $label$26:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$23 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $5 ){ goto $label$26 }
	$5 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$5 = [0]
	
.LABEL $label$22
	CALL eosio_assert($5, [8204])
	$11 = (int_64)1
	
.LABEL $label$21
	$6 = ($0 + [264])
	$7 = (int_64)0
	$12 = (int_64)59
	$4 = [8766]
	$10 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$7 > (uint_64)(int_64)8) ){ goto $label$32 }
	$5 = *($4)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$5 = ($5 + [-91])
	goto $label$30 
	
.LABEL $label$32
	$8 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$28
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$27 }
	*(($3 + [8])) = $9
	*($3 + [40]) = $9
	$7 = (int_64)
	*($3) = $7((int_64)0 - $11))
	*($3 + [32]) = $7
	CALL $48($6, $10, $3)
	$6 = (*($3 + [80]) & [1])
	
.LABEL $label$14
	if ( ($6 == 0) ){ goto $label$33 }
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$33
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($3 + [104]))
	
.LABEL $label$34
	$global$0 = ($3 + [128])
	return (unreachable)
	
.LABEL $label$2
	CALL $291(($3 + [96]))
	
.LABEL $label$1
	CALL $291(($3 + [48]))
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [24]) = $2
	$5 = ($1 + [16])
	$7 = *(($1 + [44]))
	$6 = *(($1 + [40]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$5:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$4 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$5), [9924])
	if ( $9 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$8 = CALL db_find_i64(*($5), *(($1 + [24])), (int_64)3923610676896333824, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $266($5, $8)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$5), [9924])
	
.LABEL $label$2
	CALL $292($0, ($9 + [12]))
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$1
	$2 = *($1)
	*($4 + [20]) = $3
	*($4 + [16]) = ($4 + [24])
	CALL $267(($4 + [8]), $5, $2, ($4 + [16]))
	CALL $292($0, $3)
	$global$0 = ($4 + [32])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [1]
	$5 = ($5 & [1])
	$5 = *($1)
	$7 = ($5 & [1])
	$5 = *($0)
	$6 = uint_32($5 >> [1])
	$8 = ( *($0 + [4]) ? $6 : $7 )
	if ( ((int_32)$8 != (int_32)( *($1 + [4]) ? uint_32($5 >> [1]) : $5 )) ){ goto $label$1 }
	$1 = ( *($1 + [8]) ? ($1 + [1]) : $5 )
	$5 = ($0 + [1])
	if ( $7 ){ goto $label$3 }
	if ( ($8 == 0) ){ goto $label$2 }
	$0 = ([0] - $6)
	$4 = [1]
	
.LOOP $label$4:
	if ( ((int_32)*($5) != (int_32)*($1)) ){ goto $label$1 }
	$1 = ($1 + [1])
	$5 = ($5 + [1])
	$0 = ($0 + [1])
	if ( $0 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ($8 == 0) ){ goto $label$2 }
	$4 = ((int_32)CALL $303(( *($0 + [8]) ? $5 : $7 ), $1, $8) != (int_32)[0])
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	$1 = CALL $292($3, $2)
	CALL eosio_assert($4, ( *($1 + [8]) ? ($1 + [1]) : (*($1) & [1]) ))
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $54 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [320])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [296])) = [0]
	*($3 + [288]) = (int_64)0
	$4 = CALL $302([8776])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [288]) = ($4 << [1])
	$5 = (($3 + [288]) | [1])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [288]) = ($6 | [1])
	*($3 + [296]) = $5
	*($3 + [292]) = $4
	
.LABEL $label$7
	CALL memcpy($5, [8776], $4)
	
.LABEL $label$6
	*(($5 + $4)) = [0]
	$7 = (int_64)0
	$8 = (int_64)59
	$4 = [8794]
	$9 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$7 > (uint_64)(int_64)8) ){ goto $label$14 }
	$5 = *($4)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$5 = ($5 + [-91])
	goto $label$12 
	
.LABEL $label$14
	$10 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$10
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$9 }
	$5 = CALL $292(($3 + [256]), ($3 + [288]))
	$6 = ($0 + [24])
	$4 = *($6)
	if ( $4 ){ goto $label$15 }
	*(($4 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48]) = [0]
	*($6) = $4
	$7 = *($0 + [16])
	*($4) = $7
	*($4 + [8]) = $7
	*($4 + [16]) = $7
	*($4 + [24]) = $7
	
.LABEL $label$15
	$6 = CALL $292(($3 + [24]), $5)
	CALL $52(($3 + [272]), $4, $9, $6)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$16
	if ( ((*($5) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$17
	*(($3 + [248])) = [0]
	*($3 + [240]) = (int_64)0
	$4 = CALL $302([8804])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$20 }
	*($3 + [240]) = ($4 << [1])
	$5 = (($3 + [240]) | [1])
	if ( $4 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [240]) = ($6 | [1])
	*($3 + [248]) = $5
	*($3 + [244]) = $4
	
.LABEL $label$19
	CALL memcpy($5, [8804], $4)
	
.LABEL $label$18
	*(($5 + $4)) = [0]
	CALL $53(($3 + [272]), ($3 + [288]), ($3 + [240]))
	if ( ((*($3 + [240]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($3 + [248]))
	
.LABEL $label$21
	$10 = (int_64)0
	$4 = ($4 & [1])
	$4 = *($3 + [272])
	$5 = ( *($3 + [276]) ? uint_32($4 >> [1]) : $4 )
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$22 }
	$4 = ( *($3 + [280]) ? (($3 + [272]) | [1]) : $4 )
	$5 = ($4 + $5)
	$10 = (int_64)0
	
.LOOP $label$23:
	$10 = ((int_64)((int_64)((int_64)$10 * (int_64)10) + (int_64)*($4)) + (int_64)-48)
	$4 = ($4 + [1])
	if ( ($4 <= $5) ){ goto $label$23 }
	
.LABEL $label$22
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9768])
	$7 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$7 = $8
	$5 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$7 = $8
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $5 ){ goto $label$28 }
	$5 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$5 = [0]
	
.LABEL $label$24
	CALL eosio_assert($5, [8204])
	*(($3 + [232])) = [0]
	*($3 + [224]) = (int_64)0
	$4 = CALL $302([8822])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$31 }
	*($3 + [224]) = ($4 << [1])
	$5 = (($3 + [224]) | [1])
	if ( $4 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [224]) = ($6 | [1])
	*($3 + [232]) = $5
	*($3 + [228]) = $4
	
.LABEL $label$30
	CALL memcpy($5, [8822], $4)
	
.LABEL $label$29
	*(($5 + $4)) = [0]
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1397703940), [9853])
	$4 = CALL $292(($3 + [24]), ($3 + [224]))
	CALL eosio_assert(((int_64)*($2) == (int_64)$10), ( *($4 + [8]) ? ($4 + [1]) : (*($3 + [24]) & [1]) ))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$32
	if ( ((*($3 + [224]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*($3 + [232]))
	
.LABEL $label$33
	$7 = *($0)
	$0 = CALL $55(($3 + [24]), $7, $7, $1)
	$6 = CALL $56($0)
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$4 = CALL $302([8856])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$36 }
	*($3 + [8]) = ($4 << [1])
	$5 = (($3 + [8]) | [1])
	if ( $4 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$2 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($3 + [8]) = ($2 | [1])
	*($3 + [16]) = $5
	*($3 + [12]) = $4
	
.LABEL $label$35
	CALL memcpy($5, [8856], $4)
	
.LABEL $label$34
	*(($5 + $4)) = [0]
	$4 = CALL $292(($3 + [304]), ($3 + [8]))
	CALL eosio_assert(((int_32)$6 ^ (int_32)[1]), ( *($4 + [8]) ? ($4 + [1]) : (*($3 + [304]) & [1]) ))
	if ( ((*($3 + [304]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$37
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($3 + [16]))
	
.LABEL $label$38
	CALL $57($0)
	if ( ((*(($0 + [176])) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*(($0 + [184])))
	
.LABEL $label$39
	CALL $58(($0 + [64]))
	$6 = *(($0 + [40]))
	if ( ($6 == 0) ){ goto $label$40 }
	$2 = ($0 + [44])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$42 }
	
.LOOP $label$43:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$44 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$45
	CALL _ZdlPv($5)
	
.LABEL $label$44
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$43 }
	$4 = *(($0 + [40]))
	goto $label$41 
	
.LABEL $label$42
	$4 = $6
	
.LABEL $label$41
	*($2) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$40
	if ( (*($3 + [272]) & [1]) ){ goto $label$47 }
	if ( (*($3 + [288]) & [1]) ){ goto $label$46 }
	goto $label$1 
	
.LABEL $label$47
	CALL _ZdlPv(*(($3 + [280])))
	if ( ((*($3 + [288]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$46
	CALL _ZdlPv(*($3 + [296]))
	$global$0 = ($3 + [320])
	return (unreachable)
	
.LABEL $label$5
	CALL $291(($3 + [288]))
	
.LABEL $label$4
	CALL $291(($3 + [240]))
	
.LABEL $label$3
	CALL $291(($3 + [224]))
	
.LABEL $label$2
	CALL $291(($3 + [8]))
	
.LABEL $label$1
	$global$0 = ($3 + [320])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = $1
	*($0) = $1
	*($0 + [16]) = $1
	*($0 + [56]) = $3
	*($0 + [64]) = [0]
	*(($0 + [24])) = $1
	*(($0 + [32])) = (int_64)-1
	*(($0 + [40])) = (int_64)0
	*(($0 + [48])) = [0]
	*(($0 + [72])) = $1
	*(($0 + [80])) = $1
	*(($0 + [88])) = $2
	*(($0 + [96])) = $3
	*(($4 = ($0 + [112]))) = (int_64)0
	*(($0 + [120])) = [0]
	*(($5 = ($0 + [128]))) = $1
	*(($0 + [136])) = $1
	*(($0 + [144])) = (int_64)-1
	*(($0 + [160])) = [0]
	*(($0 + [152])) = (int_64)0
	*(($6 = ($0 + [176]))) = (int_64)0
	*(($0 + [184])) = [0]
	*($0 + [192]) = $2
	$7 = CALL db_find_i64($1, $1, (int_64)3617214701426458624, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $59($5, $7)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$5), [9924])
	*(($0 + [104])) = *($7)
	CALL $294($4, ($7 + [8]))
	*($0 + [64]) = [1]
	
.LABEL $label$1
	*($0 + [168]) = *(($0 + [104]))
	CALL $294($6, $4)
	*($0 + [168]) = *(($0 + [56]))
	return $0
}

int_32 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	if ( (*($0 + [64]) == 0) ){ goto $label$5 }
	*(($1 + [8])) = [0]
	*($1) = (int_64)0
	$2 = CALL $302([10577])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($1) = ($2 << [1])
	$3 = ($1 | [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$global$0 = ($1 + [16])
	return [0]
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1) = ($4 | [1])
	*($1 + [8]) = $3
	*($1 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($3, [10577], $2)
	
.LABEL $label$2
	$4 = [0]
	*(($3 + $2)) = [0]
	$8 = ($2 & [1])
	$2 = *($1)
	$6 = ($2 & [1])
	$2 = *(($0 + [176]))
	$5 = uint_32($2 >> [1])
	$7 = ( *(($0 + [180])) ? $5 : $6 )
	if ( ((int_32)$7 != (int_32)( *($1 + [4]) ? uint_32($2 >> [1]) : $8 )) ){ goto $label$8 }
	$2 = ( *($1 + [8]) ? ($1 | [1]) : $8 )
	$3 = (($0 + [176]) + [1])
	if ( $6 ){ goto $label$10 }
	if ( ($7 == 0) ){ goto $label$9 }
	$4 = [0]
	$0 = ([0] - $5)
	
.LOOP $label$11:
	if ( ((int_32)*($3) != (int_32)*($2)) ){ goto $label$8 }
	$2 = ($2 + [1])
	$3 = ($3 + [1])
	$0 = ($0 + [1])
	if ( $0 ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ($7 == 0) ){ goto $label$9 }
	$4 = (CALL $303(( *(($0 + [184])) ? $3 : $6 ), $2, $7) == 0)
	if ( (*($1) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$4 = [1]
	
.LABEL $label$8
	if ( ($8 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$6
	$global$0 = ($1 + [16])
	return $4
	
.LABEL $label$1
	CALL $291($1)
	return (unreachable)
}

void .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($0 + [168]) = *($0 + [56])
	*(($1 + [8])) = [0]
	*($1) = (int_64)0
	$2 = CALL $302([10577])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($1) = ($2 << [1])
	$3 = ($1 | [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1) = ($4 | [1])
	*($1 + [8]) = $3
	*($1 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($3, [10577], $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	$2 = ($0 + [176])
	if ( (*($2) & [1]) ){ goto $label$6 }
	*($2) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*(($0 + [184]))) = [0]
	*(($0 + [180])) = [0]
	
.LABEL $label$5
	CALL $296($2, [0])
	*(($2 + [8])) = *(($1 + [8]))
	*($2) = *($1)
	*(($0 + [104])) = *(($0 + [168]))
	CALL $294(($0 + [112]), $2)
	*(($0 + [65])) = [1]
	$global$0 = ($1 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $291($1)
}

int_32 .FUNC $247 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9975])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $305($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [12 align=4]) = (int_64)0
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [28 align=4]) = (int_64)0
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [44]) = [0]
	*($5 + [64]) = $0
	CALL $248(($3 + [32]), $5)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $249(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $308($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [36])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [40])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($1 + [24])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [28])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [20])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $173 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL prints([11160])
	*($0 + [8]) = [1]
	CALL void $0((int_32 $1), (int_32 $2), (int_32 *(*($0))))
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$2 = *($0 + [8])
	$0 = CALL $302([11175])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*($3) = ($0 << [1])
	$4 = ($3 | [1])
	$1 = $4
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($3) = ($4 | [1])
	*($3 + [8]) = $1
	*($3 + [4]) = $0
	$4 = ($3 | [1])
	
.LABEL $label$3
	CALL memcpy($1, [11175], $0)
	
.LABEL $label$2
	*(($1 + $0)) = [0]
	CALL eosio_assert((((int_32)$2 ^ (int_32)[1]) & [255]), ( *($3 + [8]) ? $4 : (*($3) & [1]) ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$5
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $291($3)
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $305($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [8]), $1, [8])
	*($3 + [52]) = ($1 + [8])
	CALL $176(($3 + [48]), (($3 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $308($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $186(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $305($6)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [36]) = $1
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + $6)
	CALL $176(($3 + [32]), $3)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL $308($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$6 = CALL $292(($3 + [16]), $3)
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	$4 = CALL $292(($3 + [32]), $6)
	CALL void $1((int_32 $4), (int_32 $5))
	if ( (*($3 + [32]) & [1]) ){ goto $label$10 }
	if ( (*($3 + [16]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($6 + [8]))
	$1 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$1 = [1]
	if ( (*($3) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $1
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [8])))
	$global$0 = ($3 + [48])
	return $1
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $305($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*((($3 + [16]) + [24])) = (int_64)1398362884
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [8204])
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = ($3 + [16])
	CALL $184(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $308($6)
	
.LABEL $label$8
	*(($1 = (($3 + [48]) + [8]))) = *(($3 + [40]))
	*($3 + [48]) = *($3 + [32])
	$8 = *((($3 + [16]) + [8]))
	$10 = *($3 + [16])
	*((($3 + [64]) + [8])) = *($1)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$12 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $12
	*(($3 + [8])) = $12
	$12 = *($3 + [64])
	*($3) = $12
	*($3 + [80]) = $12
	CALL void $1((int_32 $10), (int_64 $8), (int_64 $3), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $151 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = CALL $292($3, $2)
	CALL require_auth(*($0))
	$2 = *($0 + [8])
	if ( $2 ){ goto $label$1 }
	*(($2 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($2 + [40 align=4]) = (int_64)0
	*($2 + [48]) = [0]
	*(($0 + [8])) = $2
	$5 = *($0)
	*($2) = $5
	*($2 + [8]) = $5
	*($2 + [16]) = $5
	*($2 + [24]) = $5
	
.LABEL $label$1
	$0 = CALL $292(($3 + [16]), $4)
	CALL $187($2, $1, $0)
	if ( (*($3 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($0 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($3 + [32])
}

void .FUNC $156 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

int_32 .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $305($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*(($3 + [40])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$6 = $8
	$7 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$7 }
	$7 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [8204])
	*($3 + [72]) = ($4 + $5)
	*($3 + [64]) = $4
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [8]), $4, [8])
	*($3 + [68]) = ($4 + [8])
	CALL $176(($3 + [64]), (($3 + [8]) + [8]))
	CALL eosio_assert(((uint_32)(*($3 + [72]) - *($3 + [68])) > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [32]), *($3 + [68]), [8])
	$1 = (*($3 + [68]) + [8])
	*($3 + [68]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [72]) - $1) > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [40]), *($3 + [68]), [8])
	if ( ($5 <= [513]) ){ goto $label$8 }
	CALL $308($4)
	
.LABEL $label$8
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $178(($3 + [64]), ($3 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return [1]
}

int_32 .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $305($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $188(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $308($2)
	
.LABEL $label$5
	*(($1 = (($3 + [32]) + [8]))) = *((($3 + [16]) + [8]))
	*($3 + [32]) = *($3 + [16])
	*((($3 + [48]) + [8])) = *($1)
	*($3 + [48]) = *($3 + [32])
	$1 = (( ($0 + [40]) ? [0] : $0 ) + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$6 = *((($3 + [48]) + [8]))
	*((($3 + [64]) + [8])) = $6
	*(($3 + [8])) = $6
	$6 = *($3 + [48])
	*($3) = $6
	*($3 + [64]) = $6
	CALL void $1((int_32 $3), (int_32 $5))
	$global$0 = ($3 + [80])
	return [1]
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $305($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [40])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [72]) = ($1 + $0)
	*($3 + [64]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [8]), $1, [8])
	$2 = ($0 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [9998])
	CALL memcpy((($3 + [8]) + [8]), ($1 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [9998])
	CALL memcpy((($3 + [8]) + [16]), ($1 + [16]), [8])
	*($3 + [68]) = ($1 + [24])
	CALL $176(($3 + [64]), (($3 + [8]) + [24]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $308($1)
	
.LABEL $label$4
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $195(($3 + [64]), ($3 + [8]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$5
	$global$0 = ($3 + [80])
	return [1]
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $305($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $308($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [28]) = $0
	*($3 + [16]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $305($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $1)
	CALL $176(($3 + [32]), $3)
	CALL eosio_assert(((uint_32)(*($3 + [40]) - *($3 + [36])) > (uint_32)[3]), [9998])
	CALL memcpy(($3 + [12]), *($3 + [36]), [4])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $308($2)
	
.LABEL $label$5
	*($3 + [36]) = ($3 + [16])
	*($3 + [32]) = ($3 + [28])
	CALL $180(($3 + [32]), $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$6
	$global$0 = ($3 + [48])
	return [1]
}

void .FUNC $273 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = *($1 + [12])
	if ( (*($4) & [1]) ){ goto $label$2 }
	$4 = ($4 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($4 + [8])
	
.LABEL $label$1
	$5 = [0]
	
.LOOP $label$3:
	$6 = ($4 + $5)
	$7 = ($5 + [1])
	$5 = $7
	if ( *($6) ){ goto $label$3 }
	$8 = (CASTING uint_64)(uint_32 ($7 + [-1]))
	$9 = (int_64)0
	$10 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$4:
	$12 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$8) ){ goto $label$5 }
	$5 = *($4)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$5 = ($5 + [-91])
	goto $label$6 
	
.LABEL $label$7
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$9 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$8
	$4 = ($4 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$4 }
	CALL $265(($3 + [8]), ($2 + [16]), $11, [11345])
	*(($3 + [72])) = [0]
	*($3 + [64]) = (int_64)0
	$4 = CALL $302([10577])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$22 }
	*($3 + [64]) = ($4 << [1])
	$5 = (($3 + [64]) | [1])
	if ( $4 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [64]) = ($6 | [1])
	*($3 + [72]) = $5
	*($3 + [68]) = $4
	
.LABEL $label$21
	CALL memcpy($5, [10577], $4)
	
.LABEL $label$20
	*(($5 + $4)) = [0]
	*(($3 + [56])) = [0]
	*($3 + [48]) = (int_64)0
	$4 = CALL $302([11464])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$25 }
	*($3 + [48]) = ($4 << [1])
	$5 = (($3 + [48]) | [1])
	if ( $4 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [48]) = ($6 | [1])
	*($3 + [56]) = $5
	*($3 + [52]) = $4
	
.LABEL $label$24
	CALL memcpy($5, [11464], $4)
	
.LABEL $label$23
	*(($5 + $4)) = [0]
	CALL $274(($3 + [8]), ($3 + [64]), ($3 + [48]))
	if ( (*($3 + [48]) & [1]) ){ goto $label$27 }
	if ( (*($3 + [64]) & [1]) ){ goto $label$26 }
	goto $label$17 
	
.LABEL $label$27
	CALL _ZdlPv(*($3 + [56]))
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$26
	CALL _ZdlPv(*($3 + [72]))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$19
	CALL $291(($3 + [64]))
	
.LABEL $label$18
	CALL $291(($3 + [48]))
	
.LABEL $label$17
	if ( (*($3 + [8]) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( ((int_64)$11 == (int_64)3617214701412286464) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*($3 + [16]))
	if ( ((int_64)$11 != (int_64)3617214701412286464) ){ goto $label$13 }
	
.LABEL $label$14
	$4 = ($2 + [32])
	$5 = *(($1 + [12]))
	if ( (*($5) & [1]) ){ goto $label$29 }
	$5 = ($5 + [1])
	goto $label$28 
	
.LABEL $label$29
	$5 = *($5 + [8])
	
.LABEL $label$28
	*($3 + [8]) = *(*($1))
	$6 = *($1 + [8])
	*(($3 + [24])) = *(($6 + [8]))
	*($3 + [16]) = *($6)
	CALL $275($4, $5, ($3 + [8]))
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_64)$11 != (int_64)4985931096475566080) ){ goto $label$40 }
	$6 = *(*($1 + [16]))
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$4 = CALL $302([11491])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$39 }
	*($3 + [8]) = ($4 << [1])
	$5 = (($3 + [8]) | [1])
	if ( $4 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$4 = ($2 + [32])
	$5 = *(($1 + [12]))
	if ( (*($5) & [1]) ){ goto $label$36 }
	$5 = ($5 + [1])
	goto $label$35 
	
.LABEL $label$39
	$7 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($3 + [8]) = ($7 | [1])
	*($3 + [16]) = $5
	*($3 + [12]) = $4
	
.LABEL $label$38
	CALL memcpy($5, [11491], $4)
	
.LABEL $label$37
	$7 = [0]
	*(($5 + $4)) = [0]
	$16 = ($4 & [1])
	$4 = *($3 + [8])
	$14 = ($4 & [1])
	$4 = *($6)
	$13 = uint_32($4 >> [1])
	$15 = ( *($6 + [4]) ? $13 : $14 )
	if ( ((int_32)$15 != (int_32)( *($3 + [12]) ? uint_32($4 >> [1]) : $16 )) ){ goto $label$32 }
	$4 = ( *($3 + [16]) ? (($3 + [8]) | [1]) : $16 )
	$5 = ($6 + [1])
	if ( $14 ){ goto $label$34 }
	if ( ($15 == 0) ){ goto $label$33 }
	$7 = [0]
	$6 = ([0] - $13)
	
.LOOP $label$41:
	if ( ((int_32)*($5) != (int_32)*($4)) ){ goto $label$32 }
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	$6 = ($6 + [1])
	if ( $6 ){ goto $label$41 }
	goto $label$33 
	
.LABEL $label$36
	$5 = *($5 + [8])
	
.LABEL $label$35
	*($3 + [8]) = *(*($1))
	$6 = *(*($1 + [16]))
	$7 = *($1 + [8])
	*(($3 + [24])) = *(($7 + [8]))
	*($3 + [16]) = *($7)
	CALL $292(($3 + [32]), $6)
	CALL $276($4, $5, ($3 + [8]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [40])))
	goto $label$12 
	
.LABEL $label$34
	if ( ($15 == 0) ){ goto $label$33 }
	$7 = (CALL $303(( *($6 + [8]) ? $5 : $14 ), $4, $15) == 0)
	if ( (*($3 + [8]) & [1]) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$7 = [1]
	
.LABEL $label$32
	if ( ($16 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL _ZdlPv(*($3 + [16]))
	
.LABEL $label$30
	$6 = *(*(($1 + [16])))
	if ( ($7 == 0) ){ goto $label$42 }
	CALL $294(*(($1 + [12])), $6)
	goto $label$12 
	
.LABEL $label$42
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$4 = CALL $302([11503])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$45 }
	*($3 + [8]) = ($4 << [1])
	$5 = (($3 + [8]) | [1])
	if ( $4 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$7 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($3 + [8]) = ($7 | [1])
	*($3 + [16]) = $5
	*($3 + [12]) = $4
	
.LABEL $label$44
	CALL memcpy($5, [11503], $4)
	
.LABEL $label$43
	$7 = [0]
	*(($5 + $4)) = [0]
	$16 = ($4 & [1])
	$4 = *($3 + [8])
	$14 = ($4 & [1])
	$4 = *($6)
	$13 = uint_32($4 >> [1])
	$15 = ( *($6 + [4]) ? $13 : $14 )
	if ( ((int_32)$15 != (int_32)( *($3 + [12]) ? uint_32($4 >> [1]) : $16 )) ){ goto $label$48 }
	$4 = ( *($3 + [16]) ? (($3 + [8]) | [1]) : $16 )
	$5 = ($6 + [1])
	if ( $14 ){ goto $label$50 }
	if ( ($15 == 0) ){ goto $label$49 }
	$7 = [0]
	$6 = ([0] - $13)
	
.LOOP $label$51:
	if ( ((int_32)*($5) != (int_32)*($4)) ){ goto $label$48 }
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	$6 = ($6 + [1])
	if ( $6 ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	if ( ($15 == 0) ){ goto $label$49 }
	$7 = (CALL $303(( *($6 + [8]) ? $5 : $14 ), $4, $15) == 0)
	if ( (*($3 + [8]) & [1]) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$49
	$7 = [1]
	
.LABEL $label$48
	if ( ($16 == 0) ){ goto $label$46 }
	
.LABEL $label$47
	CALL _ZdlPv(*($3 + [16]))
	
.LABEL $label$46
	if ( ($7 == 0) ){ goto $label$12 }
	CALL $294(*(($1 + [12])), *(*(($1 + [16]))))
	
.LABEL $label$12
	CALL prints([11148])
	*($0 + [8]) = [0]
	$4 = *($0 + [4])
	if ( ($4 == 0) ){ goto $label$52 }
	CALL $262($4, $1, $2)
	
.LABEL $label$52
	$global$0 = ($3 + [80])
	return (unreachable)
	
.LABEL $label$11
	CALL $291(($3 + [8]))
	
.LABEL $label$10
	CALL $291(($3 + [8]))
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $272 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL prints([11404])
	CALL require_auth(*(*($1)))
	CALL prints([11148])
	*($0 + [8]) = [0]
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $262($0, $1, $2)
	
.LABEL $label$1
}

void .FUNC $179 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($0 + [16])) = (int_64)1398362884
	CALL eosio_assert([1], [9768])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8204])
	*(($0 + [32])) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [8204])
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	*($3 + [16]) = $3
	*($3 + [24]) = $0
	CALL $285(($3 + [24]), ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $224 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [10116])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10162])
	$6 = *($1)
	$3 = *($3)
	*($1) = *($3 + [40])
	$7 = ($1 + [8])
	CALL $294($7, ($3 + [48]))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10213])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [8])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $305($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [9828])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	CALL $201($5, $7)
	CALL db_update_i64(*($1 + [24]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $308($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $183 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $292(($2 + [32]), ($1 + [8]))
	*(($5 = (($2 + [16]) + [8]))) = *(($1 + [40]))
	*($2 + [16]) = *($1 + [32])
	$6 = *($1 + [24])
	*((($2 + [48]) + [8])) = *($5)
	*($2 + [48]) = *($2 + [16])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$5 = CALL $292(($2 + [80]), $4)
	$7 = *((($2 + [48]) + [8]))
	*((($2 + [64]) + [8])) = $7
	*(($2 + [8])) = $7
	$7 = *($2 + [48])
	*($2) = $7
	*($2 + [64]) = $7
	CALL void $0((int_32 $3), (int_64 $5), (int_32 $6), (int_64 $2), (int_32 $1))
	if ( (*($2 + [80]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($0 + [80])
	$2 = *($0 + [32])
	$4 = *(($0 + [108]))
	$3 = *(($0 + [104]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$5:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$4 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($6 + [36]) == (int_32)$1), [9924])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *(($0 + [88])), (int_64)6457483382686220288, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $92($1, $5)
	CALL eosio_assert(((int_32)*($6 + [36]) == (int_32)$1), [9924])
	
.LABEL $label$2
	*($0 + [40]) = *($6)
	*(($0 + [56])) = *(($6 + [16]))
	*(($0 + [48])) = *(($6 + [8]))
	if ( ((int_32)($0 + [40]) == (int_32)$6) ){ goto $label$6 }
	CALL $71(($0 + [64]), *($6 + [24]), *(($6 + [28])))
	
.LABEL $label$6
	*($0) = [1]
	
.LABEL $label$1
	return ($0 + [40])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9975])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $305($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9998])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [9998])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $236(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $308($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $248 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9998])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $250(CALL $229(CALL $176($0, ($1 + [12])), ($1 + [24])), ($1 + [36]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9998])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9998])
	CALL memcpy(($1 + [52]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9998])
	CALL memcpy(($1 + [56]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9998])
	CALL memcpy(($1 + [60]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $225 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *(*($0 + [4]))
	*($1) = *($4 + [40])
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $294($6, ($4 + [48]))
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $305($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [9828])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $201($3, $6)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($5 + [8]), (int_64)3617214701426458624, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $308($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($0 + [88])
	$2 = *($0 + [32])
	$4 = *(($0 + [116]))
	$3 = *(($0 + [112]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$5:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$4 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$1), [9924])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *(($0 + [96])), (int_64)7394089168667672576, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $125($1, $5)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$1), [9924])
	
.LABEL $label$2
	*($0 + [40]) = *($6)
	CALL $294(($0 + [48]), ($6 + [8]))
	*(($0 + [64])) = *($6 + [24])
	if ( ((int_32)($0 + [40]) == (int_32)$6) ){ goto $label$6 }
	CALL $66(($0 + [72]), *($6 + [32]), *(($6 + [36])))
	
.LABEL $label$6
	*($0) = [1]
	*(($0 + [84])) = *($6 + [44])
	
.LABEL $label$1
	return ($0 + [40])
}

void .FUNC $64 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [208])
	$global$0 = $4
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = (int_64)1398362884
	$5 = [0]
	*($4 + [88]) = [0]
	*($4 + [120]) = $1
	*($4 + [96]) = *($0)
	*($4 + [104]) = *($0 + [8])
	*($4 + [112]) = *($0 + [56])
	CALL eosio_assert([1], [9768])
	$6 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$8 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [8204])
	*(($4 + [160])) = [0]
	*(($4 + [152])) = (int_64)0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [176])) = *(($0 + [8]))
	*($4 + [168]) = *($0)
	$5 = CALL $69(($4 + [88]))
	$6 = *(($5 + [8]))
	$7 = *(($5 + [16]))
	$10 = *($5)
	*((($4 + [48]) + [28])) = (int_64)0
	*((($4 + [48]) + [16])) = $7
	*((($4 + [48]) + [8])) = $6
	*($4 + [72]) = [0]
	*($4 + [48]) = $10
	$8 = (*(($5 + [28])) - *($5 + [24]))
	$9 = ((int_32)$8 / (int_32)[24])
	$11 = (($4 + [48]) + [24])
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$9 >= (uint_32)[178956971]) ){ goto $label$6 }
	$8 = CALL _Znwj($8)
	*((($4 + [48]) + [24])) = $8
	*(($4 + [80])) = ($8 + ((int_32)$9 * (int_32)[24]))
	*(($9 = (($4 + [48]) + [28]))) = $8
	$0 = *(($5 + [24]))
	$5 = (*(($5 + [28])) - $0)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($8, $0, $5)
	*($9) = (*($9) + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$7
	*((($4 + [32]) + [8])) = [0]
	*($4 + [32]) = (int_64)0
	$9 = *($4 + [88])
	$5 = CALL $302([10600])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$11 }
	*($4 + [32]) = ($5 << [1])
	$8 = (($4 + [32]) | [1])
	if ( $5 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$0 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($0)
	*($4 + [32]) = ($0 | [1])
	*($4 + [40]) = $8
	*($4 + [36]) = $5
	
.LABEL $label$10
	CALL memcpy($8, [10600], $5)
	
.LABEL $label$9
	*(($8 + $5)) = [0]
	$5 = CALL $292(($4 + [8]), ($4 + [32]))
	CALL eosio_assert((((int_32)$9 ^ (int_32)[1]) & [255]), ( *($5 + [8]) ? ($5 + [1]) : (*($4 + [8]) & [1]) ))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$12
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($4 + [40]))
	
.LABEL $label$13
	$13 = ($2 + [8])
	*(($12 = (($4 + [48]) + [16]))) = *($13)
	*($4 + [48]) = $1
	*($4 + [56]) = *($2)
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)*($3 + [4])) ){ goto $label$14 }
	$0 = (($4 + [8]) + [16])
	$14 = (($4 + [8]) + [8])
	$15 = ($4 + [80])
	$16 = ($4 + [76])
	$3 = ($3 + [4])
	
.LOOP $label$15:
	*($0) = (int_64)1398362884
	*($14) = (int_64)0
	CALL eosio_assert([1], [9768])
	$6 = (uint_64)*($0) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$6 = $7
	$8 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$6 = $7
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $8 ){ goto $label$20 }
	$8 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$8 = [0]
	
.LABEL $label$16
	CALL eosio_assert($8, [8204])
	*($4 + [8]) = *($2)
	$1 = *($13)
	CALL eosio_assert([1], [9768])
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$6 = $7
	$8 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$6 = $7
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $8 ){ goto $label$25 }
	$8 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$8 = [0]
	
.LABEL $label$21
	CALL eosio_assert($8, [8204])
	*($0) = $1
	*($14) = (int_64)0
	$5 = *($16)
	if ( ((int_32)$5 == (int_32)*($15)) ){ goto $label$26 }
	*($5) = *($4 + [8])
	*(($5 + [16])) = *($0)
	*(($5 + [8])) = *($14)
	*($16) = (*($16) + [24])
	$2 = ($2 + [8])
	if ( ((int_32)$2 != (int_32)*($3)) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$26
	CALL $70($11, ($4 + [8]))
	$2 = ($2 + [8])
	if ( ((int_32)$2 != (int_32)*($3)) ){ goto $label$15 }
	
.LABEL $label$14
	*(($4 + [144])) = *($12)
	*(($4 + [136])) = *((($4 + [48]) + [8]))
	*($4 + [128]) = *($4 + [48])
	$8 = ($4 + [76])
	CALL $71(($4 + [152]), *($4 + [72]), *($8))
	*($4 + [89]) = [1]
	$5 = *($4 + [72])
	if ( ($5 == 0) ){ goto $label$27 }
	*($8) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$27
	CALL $72(($4 + [88]))
	$global$0 = ($4 + [208])
	return (unreachable)
	
.LABEL $label$8
	CALL $291(($4 + [32]))
	
.LABEL $label$6
	CALL $300($11)
	(unreachable)
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	CALL $226($0)
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	$5 = *($4 + [32])
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [36])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$6
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$7
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$4 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$4 = *(($0 + [72]))
	if ( ($4 == 0) ){ goto $label$8 }
	*(($0 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$8
	if ( ((*(($0 + [48])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($0 + [56])))
	
.LABEL $label$9
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [3])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$6 = [536870911]
	if ( ((uint_32)int_32($5 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [3])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $300($0)
}

int_64 .FUNC $61 (int_64 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_64 $27
	int_32 $28
	int_32 $29
	$5 = ($global$0 - [176])
	$global$0 = $5
	CALL require_auth($1)
	$6 = ($5 + [120])
	$7 = ($5 + [96])
	$8 = ($5 + [32])
	$9 = ($5 + [8])
	$10 = (($5 + [48]) + [16])
	$11 = ($5 + [104])
	$12 = ($5 + [128])
	$13 = ($5 + [136])
	$14 = ($5 + [144])
	$15 = ($5 + [152])
	$16 = ($5 + [160])
	$17 = ($5 + [168])
	$18 = ($5 + [44])
	$19 = ($5 + [40])
	$20 = ($5 + [112])
	$21 = ($5 + [132])
	
.LOOP $label$2:
	*((($5 + [48]) + [8])) = $0
	*($10) = $0
	*((($5 + [48]) + [24])) = $1
	*((($5 + [48]) + [32])) = $2
	*($7) = (int_64)0
	*($11) = [0]
	*($6) = (int_64)0
	*($12) = [0]
	*($13) = $0
	*($14) = $0
	*($15) = (int_64)-1
	*($16) = (int_64)0
	*($17) = [0]
	*($5 + [48]) = [0]
	$25 = CALL $65(($5 + [48]))
	*($5) = *($25)
	$22 = CALL $292($9, ($25 + [8]))
	*(($24 = ($5 + [36]))) = (int_64)0
	*($8) = [0]
	*(($23 = ($5 + [24]))) = *($25 + [24])
	$28 = ($25 + [36])
	$26 = (*($28) - *($25 + [32]))
	if ( ($26 == 0) ){ goto $label$3 }
	$29 = int_32($26 >> [3])
	if ( ((uint_32)$29 >= (uint_32)[536870912]) ){ goto $label$1 }
	$26 = CALL _Znwj($26)
	*($8) = $26
	*($19) = ($26 + ($29 << [3]))
	*($24) = $26
	$29 = *(($25 + [32]))
	$28 = (*($28) - $29)
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($26, $29, $28)
	*($24) = (*($24) + $28)
	
.LABEL $label$3
	*($18) = *($25 + [44])
	if ( *($5 + [48]) ){ goto $label$6 }
	*($5) = $2
	CALL $294($22, $3)
	*($23) = *($4)
	*($18) = ((CASTING uint_32)(uint_64 ((uint_64)CALL publication_time() / (uint_64)(int_64)1000000)) + [-1512151512])
	$25 = *($24)
	if ( ((int_32)$25 == (int_32)*($19)) ){ goto $label$8 }
	*($24) = ($25 + [8])
	*($25) = *($4)
	goto $label$7 
	
.LABEL $label$8
	CALL $63($8, $4)
	
.LABEL $label$7
	*((($5 + [48]) + [40])) = *($5)
	CALL $294($7, $22)
	*($20) = *($23)
	CALL $66($6, *($8), *($24))
	*($21) = *($18)
	*($5 + [49]) = [1]
	$26 = [0]
	$27 = $2
	$25 = *($8)
	if ( $25 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$2 = ((int_64)$2 + (int_64)1)
	$26 = [1]
	$25 = *($8)
	if ( ($25 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	*($24) = $25
	CALL _ZdlPv($25)
	
.LABEL $label$4
	if ( ((*($9) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$9
	CALL $67(($5 + [48]))
	if ( $26 ){ goto $label$2 }
	$global$0 = ($5 + [176])
	return $27
	
.LABEL $label$1
	CALL $300($8)
	return (unreachable)
}

void .FUNC $60 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [128])
	$global$0 = $5
	*($5 + [120]) = $3
	CALL require_auth(*($0))
	$3 = *($0)
	CALL $61($3, $3, $1, $2, ($5 + [120]))
	$3 = (CASTING uint_64)(uint_32 CALL $62(($0 + [72])))
	*(($5 + [80])) = $3
	*(($5 + [88])) = (int_64)-1
	*(($2 = ($5 + [96]))) = (int_64)0
	*(($5 + [104])) = [0]
	*($5 + [64]) = $3
	$3 = *($0)
	*($5 + [56]) = $3
	*($5 + [72]) = $3
	*($5 + [112]) = $3
	*($5 + [48]) = [0]
	*($5 + [40]) = (int_64)0
	CALL $63(($5 + [40]), ($5 + [120]))
	$6 = *(($4 + [8]))
	*((($5 + [24]) + [8])) = $6
	$3 = *($4)
	*((($5 + [8]) + [8])) = $6
	*($5 + [8]) = $3
	*($5 + [24]) = $3
	CALL $64(($5 + [56]), $1, ($5 + [8]), ($5 + [40]))
	$0 = *($5 + [40])
	if ( ($0 == 0) ){ goto $label$1 }
	*($5 + [44]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$7 = *($2)
	if ( ($7 == 0) ){ goto $label$2 }
	$8 = ($5 + [100])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	$2 = *($4 + [24])
	if ( ($2 == 0) ){ goto $label$7 }
	*(($4 + [28])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$7
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($5 + [96]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $7
	
.LABEL $label$3
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($5 + [128])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $300($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $62 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = ($0 + [16])
	$3 = *($0 + [56])
	$5 = *(($0 + [44]))
	$4 = *(($0 + [40]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$2), [9924])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($2), *(($0 + [24])), (int_64)4986958867385548800, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $68($2, $6)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$2), [9924])
	
.LABEL $label$1
	*(($1 + [8])) = [0]
	*($1) = (int_64)0
	$6 = CALL $302([10582])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$8 }
	*($1) = ($6 << [1])
	$5 = ($1 | [1])
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($1) = ($4 | [1])
	*($1 + [8]) = $5
	*($1 + [4]) = $6
	
.LABEL $label$7
	CALL memcpy($5, [10582], $6)
	
.LABEL $label$6
	*(($5 + $6)) = [0]
	$6 = CALL $292(($1 + [16]), $1)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), ( *($6 + [8]) ? ($6 + [1]) : (*($1 + [16]) & [1]) ))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$9
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$10
	$6 = *($7 + [8])
	$global$0 = ($1 + [32])
	return $6
	
.LABEL $label$5
	CALL $291($1)
	return (unreachable)
}

void .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [48])
	$global$0 = $1
	$2 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $4
	$5 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $4
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	*(($1 + [40])) = [0]
	*($1 + [32]) = (int_64)0
	$3 = CALL $302([8204])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$11 }
	*($1 + [32]) = ($3 << [1])
	$7 = (($1 + [32]) | [1])
	$6 = $7
	if ( $3 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$8 = (($3 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($1 + [32]) = ($8 | [1])
	*($1 + [40]) = $6
	*($1 + [36]) = $3
	$7 = (($1 + [32]) | [1])
	
.LABEL $label$10
	CALL memcpy($6, [8204], $3)
	
.LABEL $label$9
	$8 = [0]
	*(($6 + $3)) = [0]
	CALL eosio_assert($5, ( *($1 + [40]) ? $7 : (*($1 + [32]) & [1]) ))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$12
	if ( ((uint_64)((int_64)*($0) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$13 }
	$2 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$2 = $4
	$8 = [1]
	$5 = $3
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$2 = $4
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $5 ){ goto $label$17 }
	$8 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$8 = [0]
	
.LABEL $label$13
	*(($1 + [24])) = [0]
	*($1 + [16]) = (int_64)0
	$3 = CALL $302([8224])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$20 }
	*($1 + [16]) = ($3 << [1])
	$6 = (($1 + [16]) | [1])
	$5 = $6
	if ( $3 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($1 + [16]) = ($6 | [1])
	*($1 + [24]) = $5
	*($1 + [20]) = $3
	$6 = (($1 + [16]) | [1])
	
.LABEL $label$19
	CALL memcpy($5, [8224], $3)
	
.LABEL $label$18
	*(($5 + $3)) = [0]
	CALL eosio_assert($8, ( *($1 + [24]) ? $6 : (*($1 + [16]) & [1]) ))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$21
	*(($1 + [8])) = [0]
	*($1) = (int_64)0
	$2 = *($0)
	$3 = CALL $302([8247])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$24 }
	*($1) = ($3 << [1])
	$6 = ($1 | [1])
	$5 = $6
	if ( $3 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($1) = ($6 | [1])
	*($1 + [8]) = $5
	*($1 + [4]) = $3
	$6 = ($1 | [1])
	
.LABEL $label$23
	CALL memcpy($5, [8247], $3)
	
.LABEL $label$22
	*(($5 + $3)) = [0]
	CALL eosio_assert(((int_64)$2 > (int_64)0), ( *($1 + [8]) ? $6 : (*($1) & [1]) ))
	if ( ((*($1) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$25
	$global$0 = ($1 + [48])
	return (unreachable)
	
.LABEL $label$8
	CALL $291(($1 + [32]))
	
.LABEL $label$7
	CALL $291(($1 + [16]))
	
.LABEL $label$6
	CALL $291($1)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $227 (int_32 $0, int_32 $1)
{
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $176($0, ($1 + [8]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $229($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9998])
	CALL memcpy(($1 + [44]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $228 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $300($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [36])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $229 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10573])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $230($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [9998])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($1 + [56]))
	$3 = *($1)
	$4 = *($1 + [8])
	*(($5 = CALL _Znwj([40])) + [8]) = $4
	*($5) = $3
	*($5 + [16]) = (int_64)-1
	*($5 + [24 align=4]) = (int_64)0
	$1 = [0]
	*($5 + [32]) = [0]
	*($0) = (int_64)0
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert([1], [9768])
	$6 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$8 = [1]
	$9 = $1
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$9 = ($1 + [1])
	$1 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$1 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [8204])
	$6 = (int_64)0
	$1 = CALL db_lowerbound_i64($3, $4, (int_64)6457483382686220288, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	$1 = CALL $92($5, $1)
	
.LOOP $label$7:
	CALL eosio_assert(((int_64)*(($1 + [16])) == (int_64)1397703940), [10748])
	$6 = ((int_64)$6 + (int_64)*($1 + [8]))
	*($0) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10791])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [10810])
	CALL eosio_assert([1], [10306])
	$1 = CALL db_next_i64(*($1 + [40]), ($2 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL $92($5, $1)
	goto $label$7 
	
.LABEL $label$6
	$global$0 = ($2 + [16])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL require_auth(*($1 + [56]))
	*(($3 + [56])) = (int_64)0
	*(($3 + [64])) = (int_64)1398362884
	$4 = [0]
	*($3 + [8]) = [0]
	*($3 + [40]) = $2
	*($3 + [16]) = *($1)
	*($3 + [24]) = *($1 + [8])
	*($3 + [32]) = *($1 + [56])
	CALL eosio_assert([1], [9768])
	$2 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8204])
	*(($3 + [88])) = (int_64)-1
	*(($8 = ($3 + [96]))) = (int_64)0
	$4 = [0]
	*(($3 + [104])) = [0]
	*(($3 + [80])) = *(($1 + [8]))
	*($3 + [72]) = *($1)
	$6 = CALL $49(($3 + [8]))
	if ( (*($3 + [8]) == 0) ){ goto $label$7 }
	$2 = *(($6 + [16]))
	$5 = *($6 + [8])
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([1], [9768])
	$2 = (int_64)5459781
	
.LOOP $label$9:
	$1 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $5
	$1 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$2 = $5
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$11 }
	$1 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($1, [8204])
	$2 = (int_64)1397703940
	$5 = (int_64)0
	
.LABEL $label$6
	*($0 + [8]) = $2
	*($0) = $5
	CALL $50(($3 + [8]))
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$12 }
	$1 = ($3 + [100])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$16 }
	CALL _ZdlPv($6)
	
.LABEL $label$16
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$15 }
	$4 = *(($3 + [96]))
	goto $label$13 
	
.LABEL $label$14
	$4 = $7
	
.LABEL $label$13
	*($1) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$12
	$global$0 = ($3 + [112])
}

void .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_64 $45
	int_64 $46
	int_64 $47
	$1 = ($global$0 - [848])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [776])) = [0]
	*($1 + [768]) = (int_64)0
	$2 = CALL $302([8776])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$9 }
	*($1 + [768]) = ($2 << [1])
	$3 = (($1 + [768]) | [1])
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [768]) = ($4 | [1])
	*($1 + [776]) = $3
	*($1 + [772]) = $2
	
.LABEL $label$8
	CALL memcpy($3, [8776], $2)
	
.LABEL $label$7
	*(($3 + $2)) = [0]
	$5 = (int_64)0
	$6 = (int_64)59
	$2 = [8874]
	$7 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$5 > (uint_64)(int_64)8) ){ goto $label$15 }
	$3 = *($2)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$3 = ($3 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$8 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$11
	$2 = ($2 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$10 }
	$3 = CALL $292(($1 + [736]), ($1 + [768]))
	$4 = ($0 + [24])
	$2 = *($4)
	if ( $2 ){ goto $label$16 }
	*(($2 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($2 + [40 align=4]) = (int_64)0
	*($2 + [48]) = [0]
	*($4) = $2
	$5 = *(($0 + [16]))
	*($2) = $5
	*($2 + [8]) = $5
	*($2 + [16]) = $5
	*($2 + [24]) = $5
	
.LABEL $label$16
	$4 = CALL $292(($1 + [280]), $3)
	CALL $52(($1 + [752]), $2, $7, $4)
	if ( ((*($1 + [280]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$17
	if ( ((*($3) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$18
	*(($1 + [728])) = [0]
	*($1 + [720]) = (int_64)0
	$2 = CALL $302([8884])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$21 }
	*($1 + [720]) = ($2 << [1])
	$3 = (($1 + [720]) | [1])
	if ( $2 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [720]) = ($4 | [1])
	*($1 + [728]) = $3
	*($1 + [724]) = $2
	
.LABEL $label$20
	CALL memcpy($3, [8884], $2)
	
.LABEL $label$19
	*(($3 + $2)) = [0]
	CALL $53(($1 + [752]), ($1 + [768]), ($1 + [720]))
	if ( ((*($1 + [720]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($1 + [728]))
	
.LABEL $label$22
	$9 = ($0 + [264])
	$5 = (int_64)0
	$6 = (int_64)59
	$2 = [8766]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$5 > (uint_64)(int_64)8) ){ goto $label$28 }
	$3 = *($2)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [-91])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$24
	$2 = ($2 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$23 }
	CALL $88(($1 + [280]), $9, $7)
	$5 = (int_64)0
	$8 = (int_64)0
	$2 = ($2 & [1])
	$2 = *($1 + [752])
	$3 = ( *($1 + [756]) ? uint_32($2 >> [1]) : $2 )
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$29 }
	$2 = ( *($1 + [760]) ? (($1 + [752]) | [1]) : $2 )
	$3 = ($2 + $3)
	$8 = (int_64)0
	
.LOOP $label$30:
	$8 = ((int_64)((int_64)((int_64)$8 * (int_64)10) + (int_64)*($2)) + (int_64)-48)
	$2 = ($2 + [1])
	if ( ($2 <= $3) ){ goto $label$30 }
	
.LABEL $label$29
	$6 = *($1 + [280])
	CALL __multi3(($1 + [88]), $6, (int_64)$6 >> (int_64)63), $8, (int_64)$8 >> (int_64)63))
	$10 = *($1 + [288])
	$8 = *(($1 + [96]))
	$6 = *($1 + [88])
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [10524])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [10548])
	CALL eosio_assert([1], [10484])
	CALL eosio_assert([1], [10499])
	$11 = ((int_64)$6 / (int_64)100)
	$6 = (int_64)59
	$2 = [8902]
	$7 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$5 > (uint_64)(int_64)9) ){ goto $label$36 }
	$3 = *($2)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$3 = ($3 + [-91])
	goto $label$34 
	
.LABEL $label$36
	$8 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$32
	$2 = ($2 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$31 }
	$3 = CALL $292(($1 + [688]), ($1 + [768]))
	$4 = ($0 + [24])
	$2 = *($4)
	if ( $2 ){ goto $label$37 }
	*(($2 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($2 + [40 align=4]) = (int_64)0
	*($2 + [48]) = [0]
	*($4) = $2
	$5 = *(($0 + [16]))
	*($2) = $5
	*($2 + [8]) = $5
	*($2 + [16]) = $5
	*($2 + [24]) = $5
	
.LABEL $label$37
	$4 = CALL $292(($1 + [280]), $3)
	CALL $52(($1 + [704]), $2, $7, $4)
	if ( ((*($1 + [280]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$38
	if ( ((*($3) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$39
	*(($1 + [680])) = [0]
	*($1 + [672]) = (int_64)0
	$2 = CALL $302([8913])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$42 }
	*($1 + [672]) = ($2 << [1])
	$3 = (($1 + [672]) | [1])
	if ( $2 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [672]) = ($4 | [1])
	*($1 + [680]) = $3
	*($1 + [676]) = $2
	
.LABEL $label$41
	CALL memcpy($3, [8913], $2)
	
.LABEL $label$40
	*(($3 + $2)) = [0]
	CALL $53(($1 + [752]), ($1 + [768]), ($1 + [672]))
	if ( ((*($1 + [672]) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*($1 + [680]))
	
.LABEL $label$43
	$2 = ($2 & [1])
	$2 = *($1 + [704])
	$3 = ( *($1 + [708]) ? uint_32($2 >> [1]) : $2 )
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$45 }
	$2 = ( *($1 + [712]) ? (($1 + [704]) | [1]) : $2 )
	$3 = ($2 + $3)
	$12 = (int_64)0
	
.LOOP $label$46:
	$12 = ((int_64)((int_64)((int_64)$12 * (int_64)10) + (int_64)*($2)) + (int_64)-48)
	$2 = ($2 + [1])
	if ( ($2 <= $3) ){ goto $label$46 }
	$13 = (int_64)$12 >> (int_64)63)
	goto $label$44 
	
.LABEL $label$45
	$12 = (int_64)0
	$13 = (int_64)0
	
.LABEL $label$44
	$2 = ($0 + [72])
	$3 = CALL $62($2)
	$5 = (CASTING uint_64)(uint_32 $3)
	*((($1 + [608]) + [24])) = $5
	*((($1 + [608]) + [32])) = (int_64)-1
	*((($1 + [608]) + [40])) = (int_64)0
	*((($1 + [608]) + [48])) = [0]
	*($1 + [616]) = $5
	$5 = *($0)
	*($1 + [608]) = $5
	*($1 + [624]) = $5
	*($1 + [664]) = $5
	CALL $89(($1 + [592]), ($1 + [608]))
	CALL require_auth(*($1 + [664]))
	$5 = *($1 + [608])
	$8 = *($1 + [616])
	*(($14 = CALL _Znwj([40])) + [8]) = $8
	*($14) = $5
	*($14 + [16]) = (int_64)-1
	*($14 + [24 align=4]) = (int_64)0
	*($14 + [32]) = [0]
	CALL prints([8932])
	CALL $90(($1 + [592]))
	CALL $91($2, *($0), [1])
	$5 = (CASTING uint_64)(uint_32 ($3 + [1]))
	*((($1 + [528]) + [24])) = $5
	*((($1 + [528]) + [32])) = (int_64)-1
	*((($1 + [528]) + [40])) = (int_64)0
	*((($1 + [528]) + [48])) = [0]
	*($1 + [536]) = $5
	$5 = *($0)
	*($1 + [528]) = $5
	*($1 + [544]) = $5
	*($1 + [584]) = $5
	CALL eosio_assert([1], [9768])
	$2 = [0]
	$15 = (uint_64)$10 >> (uint_64)(int_64)8
	$5 = $15)
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$50 }
	$5 = $8
	$3 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$50
	$5 = $8
	
.LOOP $label$51:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $3 ){ goto $label$51 }
	$3 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$3 = [0]
	
.LABEL $label$47
	CALL eosio_assert($3, [8204])
	$16 = (int_64)0
	$17 = (int_64)0
	$2 = CALL db_lowerbound_i64(*($14), *(($14 + [8])), (int_64)6457483382686220288, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$55 }
	$18 = ($0 + [32])
	$19 = CALL $92($14, $2)
	$20 = (($1 + [800]) + [32])
	$21 = (($1 + [168]) | [1])
	$22 = (($1 + [800]) + [8])
	$23 = ($1 + [241])
	$24 = (($1 + [800]) | [1])
	$25 = (($1 + [232]) + [32])
	$26 = ($1 + [480])
	$27 = (($1 + [232]) + [8])
	$28 = ($1 + [472])
	$29 = (($1 + [232]) + [40])
	$30 = (($1 + [232]) + [24])
	$31 = ($1 + [496])
	$32 = ($1 + [504])
	$33 = ($1 + [508])
	$34 = ($1 + [276])
	$35 = ($1 + [516])
	$36 = (($1 + [232]) + [16])
	$37 = ($1 + [268])
	$38 = ($1 + [244])
	$17 = (int_64)0
	
.LOOP $label$56:
	$5 = *($0)
	$39 = CALL $74(($1 + [280]), $5, $5, *($19))
	*($1 + [232]) = *($28)
	CALL $292($27, $26)
	*($25) = (int_64)0
	*($29) = [0]
	*($30) = *($31)
	$2 = (*($33) - *($32))
	if ( ($2 == 0) ){ goto $label$57 }
	$3 = int_32($2 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$53 }
	$2 = CALL _Znwj($2)
	*($25) = $2
	*($37) = $2
	*($29) = ($2 + ($3 << [3]))
	$4 = *($32)
	$3 = (*($33) - $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$57 }
	CALL memcpy($2, $4, $3)
	*($37) = (*($37) + $3)
	
.LABEL $label$57
	$6 = *($19)
	*(($40 = (($1 + [216]) + [8]))) = (int_64)1397703940
	*($34) = *($35)
	*($1 + [216]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$5 = (uint_64)*($40) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$60:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$59 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$61 }
	$5 = $8
	$3 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$60 }
	goto $label$58 
	
.LABEL $label$61
	$5 = $8
	
.LOOP $label$62:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$59 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $3 ){ goto $label$62 }
	$3 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$60 }
	goto $label$58 
	
.LABEL $label$59
	$3 = [0]
	
.LABEL $label$58
	CALL eosio_assert($3, [8204])
	*((($1 + [72]) + [8])) = *($40)
	*($1 + [72]) = *($1 + [216])
	CALL $64(($1 + [528]), $6, ($1 + [72]), $25)
	$40 = (($1 + [592]) + [8])
	$6 = *($40)
	CALL eosio_assert([1], [9768])
	$5 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$65:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$64 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$66 }
	$5 = $8
	$3 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$65 }
	goto $label$63 
	
.LABEL $label$66
	$5 = $8
	
.LOOP $label$67:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$64 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $3 ){ goto $label$67 }
	$3 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$65 }
	goto $label$63 
	
.LABEL $label$64
	$3 = [0]
	
.LABEL $label$63
	CALL eosio_assert($3, [8204])
	CALL eosio_assert(((int_64)*($40) == (int_64)$6), [9853])
	if ( ((int_64)*($1 + [592]) < (int_64)1) ){ goto $label$68 }
	$5 = *($19 + [8])
	CALL __multi3(($1 + [56]), $5, (int_64)$5 >> (int_64)63), $11, (int_64)$11 >> (int_64)63))
	$8 = *((($1 + [56]) + [8]))
	$5 = *($1 + [56])
	CALL eosio_assert(( (uint_64)($5 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [10524])
	CALL eosio_assert(( ((uint_64)$5 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [10548])
	*(($41 = (($1 + [200]) + [8]))) = $10
	$8 = *($1 + [592])
	CALL eosio_assert(((int_64)$8 != (int_64)0), [10484])
	CALL eosio_assert((((int_64)$8 != (int_64)-1) | ((int_64)$5 != (int_64)-9223372036854775808)), [10499])
	*($1 + [200]) = ((int_64)$5 / (int_64)$8)
	CALL prints([8944])
	CALL printui(*($19))
	CALL prints([8960])
	CALL $90(($1 + [200]))
	CALL eosio_assert([1], [9768])
	$2 = [0]
	$5 = $15
	
.LOOP $label$71:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$70 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$72 }
	$5 = $8
	$3 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$72
	$5 = $8
	
.LOOP $label$73:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$70 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $3 ){ goto $label$73 }
	$3 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$70
	$3 = [0]
	
.LABEL $label$69
	CALL eosio_assert($3, [8204])
	CALL eosio_assert(((int_64)*($41) == (int_64)$10), [9853])
	if ( ((int_64)*($1 + [200]) < (int_64)1) ){ goto $label$68 }
	*(($40 = (($1 + [184]) + [8]))) = *(($19 + [16]))
	*($1 + [184]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$5 = (uint_64)*($40) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$76:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$75 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$77 }
	$5 = $8
	$3 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$76 }
	goto $label$74 
	
.LABEL $label$77
	$5 = $8
	
.LOOP $label$78:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$75 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $3 ){ goto $label$78 }
	$3 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$76 }
	goto $label$74 
	
.LABEL $label$75
	$3 = [0]
	
.LABEL $label$74
	CALL eosio_assert($3, [8204])
	$42 = ($19 + [28])
	$2 = *($19 + [24])
	if ( ((int_32)$2 == (int_32)*($42)) ){ goto $label$79 }
	
.LOOP $label$80:
	CALL eosio_assert(((int_64)*(($2 + [16])) == (int_64)*($40)), [10748])
	$5 = ((int_64)*($1 + [184]) + (int_64)*(($2 + [8])))
	*($1 + [184]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [10791])
	CALL eosio_assert(((int_64)*($1 + [184]) < (int_64)4611686018427387904), [10810])
	$2 = ($2 + [24])
	if ( ((int_32)$2 != (int_32)*($42)) ){ goto $label$80 }
	
.LABEL $label$79
	$6 = *($40)
	CALL eosio_assert([1], [9768])
	$5 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$83:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$82 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$84 }
	$5 = $8
	$3 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$83 }
	goto $label$81 
	
.LABEL $label$84
	$5 = $8
	
.LOOP $label$85:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$82 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $3 ){ goto $label$85 }
	$3 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$83 }
	goto $label$81 
	
.LABEL $label$82
	$3 = [0]
	
.LABEL $label$81
	CALL eosio_assert($3, [8204])
	CALL eosio_assert(((int_64)*($40) == (int_64)$6), [9853])
	if ( ((int_64)*($1 + [184]) < (int_64)1) ){ goto $label$68 }
	CALL prints([8975])
	CALL $90(($1 + [184]))
	$40 = *(($19 + [24]))
	if ( ((int_32)$40 == (int_32)*($42)) ){ goto $label$86 }
	
.LOOP $label$87:
	$5 = *($40 + [8])
	$5 = *($1 + [200])
	CALL __multi3(($1 + [40]), $5, (int_64)$5 >> (int_64)63), $5, (int_64)$5 >> (int_64)63))
	$6 = *($41)
	$8 = *((($1 + [40]) + [8]))
	$5 = *($1 + [40])
	CALL eosio_assert(( (uint_64)($5 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [10524])
	CALL eosio_assert(( ((uint_64)$5 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [10548])
	*(($43 = (($1 + [168]) + [8]))) = $6
	$8 = *($1 + [184])
	CALL eosio_assert(((int_64)$8 != (int_64)0), [10484])
	CALL eosio_assert((((int_64)$5 != (int_64)-9223372036854775808) | ((int_64)$8 != (int_64)-1)), [10499])
	*($1 + [168]) = ((int_64)$5 / (int_64)$8)
	CALL prints([9000])
	CALL $90(($1 + [168]))
	$6 = *($43)
	CALL eosio_assert([1], [9768])
	$5 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$90:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$89 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$91 }
	$5 = $8
	$3 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$90 }
	goto $label$88 
	
.LABEL $label$91
	$5 = $8
	
.LOOP $label$92:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$89 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $3 ){ goto $label$92 }
	$3 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$90 }
	goto $label$88 
	
.LABEL $label$89
	$3 = [0]
	
.LABEL $label$88
	CALL eosio_assert($3, [8204])
	CALL eosio_assert(((int_64)*($43) == (int_64)$6), [9853])
	if ( ((int_64)*($1 + [168]) < (int_64)1) ){ goto $label$93 }
	CALL eosio_assert(((int_64)*($43) == (int_64)$10), [10748])
	$17 = ((int_64)*($1 + [168]) + (int_64)$17)
	CALL eosio_assert(((int_64)$17 > (int_64)-4611686018427387904), [10791])
	CALL eosio_assert(((int_64)$17 < (int_64)4611686018427387904), [10810])
	*($22) = [0]
	*($1 + [800]) = (int_64)0
	$2 = CALL $302([9020])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$54 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$96 }
	*($1 + [800]) = ($2 << [1])
	$3 = $24
	if ( $2 ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$96
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($22) = $3
	*($1 + [800]) = ($4 | [1])
	*($1 + [804]) = $2
	
.LABEL $label$95
	CALL memcpy($3, [9020], $2)
	
.LABEL $label$94
	*(($3 + $2)) = [0]
	$2 = *($27)
	$3 = ($2 & [1])
	$2 = CALL $298(($1 + [800]), [0], ( *($36) ? $23 : $3 ), ( *($38) ? uint_32($2 >> [1]) : $3 ))
	$3 = ($2 + [8])
	*(($44 = (($1 + [152]) + [8]))) = *($3)
	*($1 + [152]) = *($2)
	*($2) = (int_64)0
	*($3) = [0]
	if ( ((*($1 + [800]) & [1]) == 0) ){ goto $label$97 }
	CALL _ZdlPv(*($22))
	
.LABEL $label$97
	*(($43 = (($1 + [136]) + [8]))) = (int_64)5522180
	$5 = ((int_64)*($1 + [168]) * (int_64)300)
	*($1 + [136]) = $5
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9768])
	$5 = (uint_64)*($43) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$100:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$99 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$101 }
	$5 = $8
	$3 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$100 }
	goto $label$98 
	
.LABEL $label$101
	$5 = $8
	
.LOOP $label$102:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$99 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $3 ){ goto $label$102 }
	$3 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$100 }
	goto $label$98 
	
.LABEL $label$99
	$3 = [0]
	
.LABEL $label$98
	CALL eosio_assert($3, [8204])
	$5 = (int_64)0
	$8 = (int_64)59
	$2 = [9060]
	$7 = (int_64)0
	
.LOOP $label$103:
	$6 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$104 }
	$3 = *($2)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$106 }
	$3 = ($3 + [-91])
	goto $label$105 
	
.LABEL $label$106
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$105
	$6 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $3) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$104
	$2 = ($2 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$7 = ((int_64)$6 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$103 }
	*($1 + [800]) = $7
	CALL $93($18, $40, ($1 + [800]), ($1 + [136]), ($1 + [152]))
	*(($2 = (($1 + [120]) + [8]))) = *($43)
	*($1 + [120]) = *($1 + [136])
	$45 = *($40)
	*(($4 = (($1 + [784]) + [8]))) = *($2)
	*($1 + [784]) = *($1 + [120])
	$46 = *($0)
	$6 = (int_64)0
	$8 = (int_64)59
	$2 = [10837]
	$7 = (int_64)0
	
.LOOP $label$107:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$112 }
	$3 = *($2)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$111 }
	$3 = ($3 + [-91])
	goto $label$110 
	
.LABEL $label$112
	$5 = (int_64)0
	if ( ((int_64)$8 == (int_64)47244640260) ){ goto $label$109 }
	goto $label$108 
	
.LABEL $label$111
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$110
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$109
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$108
	$2 = ($2 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$107 }
	*($22) = *($1 + [784])
	*(($22 + [8])) = *($4)
	*($1 + [800]) = $45
	CALL $94($46, $46, $7, ($1 + [800]))
	if ( ((*($1 + [152]) & [1]) == 0) ){ goto $label$93 }
	CALL _ZdlPv(*($44))
	
.LABEL $label$93
	$40 = ($40 + [24])
	if ( ((int_32)$40 != (int_32)*($42)) ){ goto $label$87 }
	
.LABEL $label$86
	$5 = *($1 + [200])
	CALL __multi3(($1 + [24]), $12, $13, $5, (int_64)$5 >> (int_64)63))
	$6 = *($41)
	$5 = *((($1 + [24]) + [8]))
	$8 = *($1 + [24])
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [10524])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [10548])
	*(($40 = (($1 + [784]) + [8]))) = $6
	CALL eosio_assert([1], [10484])
	CALL eosio_assert([1], [10499])
	*($1 + [784]) = ((int_64)$8 / (int_64)100)
	CALL prints([9073])
	CALL printui(*($30))
	CALL prints([9087])
	CALL $90(($1 + [784]))
	$6 = *($40)
	CALL eosio_assert([1], [9768])
	$5 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$115:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$114 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$116 }
	$5 = $8
	$3 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$115 }
	goto $label$113 
	
.LABEL $label$116
	$5 = $8
	
.LOOP $label$117:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$114 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $3 ){ goto $label$117 }
	$3 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$115 }
	goto $label$113 
	
.LABEL $label$114
	$3 = [0]
	
.LABEL $label$113
	CALL eosio_assert($3, [8204])
	CALL eosio_assert(((int_64)*($40) == (int_64)$6), [9853])
	if ( (int_64)(*($1 + [784]) == 0) ){ goto $label$68 }
	CALL eosio_assert(((int_64)*($40) == (int_64)$10), [10748])
	$17 = ((int_64)*($1 + [784]) + (int_64)$17)
	CALL eosio_assert(((int_64)$17 > (int_64)-4611686018427387904), [10791])
	CALL eosio_assert(((int_64)$17 < (int_64)4611686018427387904), [10810])
	*(($40 = (($1 + [168]) + [8]))) = [0]
	*($1 + [168]) = (int_64)0
	$2 = CALL $302([9102])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$52 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$120 }
	*($1 + [168]) = ($2 << [1])
	$3 = $21
	if ( $2 ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$120
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($40) = $3
	*($1 + [168]) = ($4 | [1])
	*($1 + [172]) = $2
	
.LABEL $label$119
	CALL memcpy($3, [9102], $2)
	
.LABEL $label$118
	*(($3 + $2)) = [0]
	$45 = ((int_64)*($1 + [784]) * (int_64)300)
	CALL eosio_assert((uint_64)(((int_64)$45 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9768])
	$5 = (int_64)21571
	$2 = [0]
	
.LOOP $label$123:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$122 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$124 }
	$5 = $8
	$3 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$123 }
	goto $label$121 
	
.LABEL $label$124
	$5 = $8
	
.LOOP $label$125:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$122 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$4 = ($2 + [1])
	$2 = $4
	if ( $3 ){ goto $label$125 }
	$3 = [1]
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$123 }
	goto $label$121 
	
.LABEL $label$122
	$3 = [0]
	
.LABEL $label$121
	CALL eosio_assert($3, [8204])
	$5 = (int_64)0
	$8 = (int_64)59
	$2 = [9060]
	$7 = (int_64)0
	
.LOOP $label$126:
	$6 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$127 }
	$3 = *($2)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$129 }
	$3 = ($3 + [-91])
	goto $label$128 
	
.LABEL $label$129
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$128
	$6 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $3) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$127
	$2 = ($2 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$7 = ((int_64)$6 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$126 }
	$47 = *($18)
	$5 = (int_64)0
	$6 = (int_64)59
	$2 = [10828]
	$46 = (int_64)0
	
.LOOP $label$130:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$135 }
	$3 = *($2)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$134 }
	$3 = ($3 + [-91])
	goto $label$133 
	
.LABEL $label$135
	$8 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$132 }
	goto $label$131 
	
.LABEL $label$134
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$133
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$132
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$131
	$2 = ($2 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$46 = ((int_64)$8 | (int_64)$46)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$130 }
	*(($4 = (($1 + [800]) + [16]))) = $45
	*((($1 + [800]) + [24])) = (int_64)5522180
	*($22) = *($30)
	*($1 + [800]) = $47
	CALL $292($20, ($1 + [168]))
	CALL $29($47, $7, $46, ($1 + [800]))
	if ( ((*($20) & [1]) == 0) ){ goto $label$136 }
	CALL _ZdlPv(*((($1 + [800]) + [40])))
	
.LABEL $label$136
	$46 = *($0)
	$47 = *($30)
	$6 = (int_64)0
	$8 = (int_64)59
	$2 = [10837]
	$7 = (int_64)0
	
.LOOP $label$137:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$142 }
	$3 = *($2)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$141 }
	$3 = ($3 + [-91])
	goto $label$140 
	
.LABEL $label$142
	$5 = (int_64)0
	if ( ((int_64)$8 == (int_64)47244640260) ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$141
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$140
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$139
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$138
	$2 = ($2 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$137 }
	*($22) = $45
	*($4) = (int_64)5522180
	*($1 + [800]) = $47
	CALL $94($46, $46, $7, ($1 + [800]))
	if ( ((*($1 + [168]) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*($40))
	
.LABEL $label$68
	$2 = *($25)
	if ( ($2 == 0) ){ goto $label$143 }
	*($37) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$143
	if ( ((*($27) & [1]) == 0) ){ goto $label$144 }
	CALL _ZdlPv(*($36))
	
.LABEL $label$144
	CALL $76($39)
	CALL eosio_assert([1], [10306])
	$2 = CALL db_next_i64(*($19 + [40]), ($1 + [280]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$55 }
	$19 = CALL $92($14, $2)
	goto $label$56 
	
.LABEL $label$55
	$8 = (int_64)59
	$2 = [8766]
	$6 = (int_64)0
	
.LOOP $label$145:
	if ( ((uint_64)$16 > (uint_64)(int_64)8) ){ goto $label$150 }
	$3 = *($2)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$149 }
	$3 = ($3 + [-91])
	goto $label$148 
	
.LABEL $label$150
	$5 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$147 }
	goto $label$146 
	
.LABEL $label$149
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$148
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$147
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$146
	$2 = ($2 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$6 = ((int_64)$5 | (int_64)$6)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$145 }
	*(($1 + [16])) = $10
	*($1 + [112]) = $10
	$5 = (int_64)
	*($1 + [8]) = $5((int_64)0 - $17))
	*($1 + [104]) = $5
	CALL $48($9, $6, ($1 + [8]))
	$40 = *((($1 + [528]) + [40]))
	if ( ($40 == 0) ){ goto $label$151 }
	$43 = ($1 + [572])
	$2 = *($43)
	if ( ((int_32)$2 == (int_32)$40) ){ goto $label$153 }
	
.LOOP $label$154:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$155 }
	$4 = *($3 + [24])
	if ( ($4 == 0) ){ goto $label$156 }
	*(($3 + [28])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$156
	CALL _ZdlPv($3)
	
.LABEL $label$155
	if ( ((int_32)$40 != (int_32)$2) ){ goto $label$154 }
	$2 = *(($1 + [568]))
	goto $label$152 
	
.LABEL $label$153
	$2 = $40
	
.LABEL $label$152
	*($43) = $40
	CALL _ZdlPv($2)
	
.LABEL $label$151
	$40 = *((($1 + [608]) + [40]))
	if ( ($40 == 0) ){ goto $label$157 }
	$43 = ($1 + [652])
	$2 = *($43)
	if ( ((int_32)$2 == (int_32)$40) ){ goto $label$159 }
	
.LOOP $label$160:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$161 }
	$4 = *($3 + [24])
	if ( ($4 == 0) ){ goto $label$162 }
	*(($3 + [28])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$162
	CALL _ZdlPv($3)
	
.LABEL $label$161
	if ( ((int_32)$40 != (int_32)$2) ){ goto $label$160 }
	$2 = *(($1 + [648]))
	goto $label$158 
	
.LABEL $label$159
	$2 = $40
	
.LABEL $label$158
	*($43) = $40
	CALL _ZdlPv($2)
	
.LABEL $label$157
	if ( (*($1 + [704]) & [1]) ){ goto $label$164 }
	if ( (*($1 + [752]) & [1]) ){ goto $label$163 }
	goto $label$3 
	
.LABEL $label$164
	CALL _ZdlPv(*(($1 + [712])))
	if ( ((*($1 + [752]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$163
	CALL _ZdlPv(*(($1 + [760])))
	if ( ((*($1 + [768]) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$54
	CALL $291(($1 + [800]))
	
.LABEL $label$53
	CALL $300($25)
	
.LABEL $label$52
	CALL $291(($1 + [168]))
	
.LABEL $label$6
	CALL $291(($1 + [768]))
	
.LABEL $label$5
	CALL $291(($1 + [720]))
	
.LABEL $label$4
	CALL $291(($1 + [672]))
	
.LABEL $label$3
	if ( (*($1 + [768]) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($1 + [848])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($1 + [776]))
	$global$0 = ($1 + [848])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $86 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($3 + [104])) = (int_64)0
	*(($3 + [112])) = (int_64)1398362884
	$4 = [0]
	*($3 + [56]) = [0]
	*($3 + [88]) = $1
	*($3 + [64]) = *($0)
	*($3 + [72]) = *($0 + [8])
	*($3 + [80]) = *($0 + [56])
	CALL eosio_assert([1], [9768])
	$1 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8204])
	*(($3 + [128])) = [0]
	*(($3 + [120])) = (int_64)0
	*(($3 + [152])) = (int_64)-1
	*(($3 + [160])) = (int_64)0
	*(($3 + [168])) = [0]
	*(($3 + [144])) = *(($0 + [8]))
	*($3 + [136]) = *($0)
	$4 = CALL $69(($3 + [56]))
	$1 = *(($4 + [8]))
	$5 = *(($4 + [16]))
	$8 = *($4)
	*((($3 + [16]) + [28])) = (int_64)0
	*((($3 + [16]) + [16])) = $5
	*((($3 + [16]) + [8])) = $1
	*($3 + [40]) = [0]
	*($3 + [16]) = $8
	$6 = (*(($4 + [28])) - *($4 + [24]))
	$7 = ((int_32)$6 / (int_32)[24])
	if ( ($6 == 0) ){ goto $label$7 }
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$6 }
	$6 = CALL _Znwj($6)
	*((($3 + [16]) + [24])) = $6
	*(($3 + [48])) = ($6 + ((int_32)$7 * (int_32)[24]))
	*(($7 = (($3 + [16]) + [28]))) = $6
	$0 = *(($4 + [24]))
	$4 = (*(($4 + [28])) - $0)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($6, $0, $4)
	*($7) = (*($7) + ((int_32)((uint_32)$4 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$7
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$7 = *($3 + [56])
	$4 = CALL $302([10629])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$11 }
	*($3) = ($4 << [1])
	$6 = ($3 | [1])
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$0 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($0)
	*($3) = ($0 | [1])
	*($3 + [8]) = $6
	*($3 + [4]) = $4
	
.LABEL $label$10
	CALL memcpy($6, [10629], $4)
	
.LABEL $label$9
	*(($6 + $4)) = [0]
	$4 = CALL $292(($3 + [176]), $3)
	CALL eosio_assert($7, ( *($4 + [8]) ? ($4 + [1]) : (*($3 + [176]) & [1]) ))
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$12
	if ( ((*($3) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$13
	$4 = ($3 + [32])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($4)), [10748])
	$1 = ((int_64)*($3 + [24]) + (int_64)*($2))
	*($3 + [24]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [10791])
	CALL eosio_assert(((int_64)*($3 + [24]) < (int_64)4611686018427387904), [10810])
	*(($3 + [112])) = *($4)
	*(($3 + [104])) = *($3 + [24])
	*($3 + [96]) = *($3 + [16])
	$6 = ($3 + [44])
	CALL $71(($3 + [120]), *($3 + [40]), *($6))
	*($3 + [57]) = [1]
	$4 = *($3 + [40])
	if ( ($4 == 0) ){ goto $label$14 }
	*($6) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$14
	CALL $72(($3 + [56]))
	$global$0 = ($3 + [192])
	return (unreachable)
	
.LABEL $label$8
	CALL $291($3)
	
.LABEL $label$6
	CALL $300((($3 + [16]) + [24]))
	(unreachable)
}

void .FUNC $85 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($3 + [104])) = (int_64)0
	*(($3 + [112])) = (int_64)1398362884
	$4 = [0]
	*($3 + [56]) = [0]
	*($3 + [88]) = $1
	*($3 + [64]) = *($0)
	*($3 + [72]) = *($0 + [8])
	*($3 + [80]) = *($0 + [56])
	CALL eosio_assert([1], [9768])
	$1 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8204])
	*(($3 + [128])) = [0]
	*(($3 + [120])) = (int_64)0
	*(($3 + [152])) = (int_64)-1
	*(($3 + [160])) = (int_64)0
	*(($3 + [168])) = [0]
	*(($3 + [144])) = *(($0 + [8]))
	*($3 + [136]) = *($0)
	$4 = CALL $69(($3 + [56]))
	$1 = *(($4 + [8]))
	$5 = *(($4 + [16]))
	$8 = *($4)
	*((($3 + [16]) + [28])) = (int_64)0
	*((($3 + [16]) + [16])) = $5
	*((($3 + [16]) + [8])) = $1
	*($3 + [40]) = [0]
	*($3 + [16]) = $8
	$6 = (*(($4 + [28])) - *($4 + [24]))
	$7 = ((int_32)$6 / (int_32)[24])
	if ( ($6 == 0) ){ goto $label$7 }
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$6 }
	$6 = CALL _Znwj($6)
	*((($3 + [16]) + [24])) = $6
	*(($3 + [48])) = ($6 + ((int_32)$7 * (int_32)[24]))
	*(($7 = (($3 + [16]) + [28]))) = $6
	$0 = *(($4 + [24]))
	$4 = (*(($4 + [28])) - $0)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($6, $0, $4)
	*($7) = (*($7) + ((int_32)((uint_32)$4 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$7
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$7 = *($3 + [56])
	$4 = CALL $302([10629])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$11 }
	*($3) = ($4 << [1])
	$6 = ($3 | [1])
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$0 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($0)
	*($3) = ($0 | [1])
	*($3 + [8]) = $6
	*($3 + [4]) = $4
	
.LABEL $label$10
	CALL memcpy($6, [10629], $4)
	
.LABEL $label$9
	*(($6 + $4)) = [0]
	$4 = CALL $292(($3 + [176]), $3)
	CALL eosio_assert($7, ( *($4 + [8]) ? ($4 + [1]) : (*($3 + [176]) & [1]) ))
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$12
	if ( ((*($3) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$13
	$4 = ($3 + [32])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($4)), [10849])
	$1 = (int_64)
	*($3 + [24]) = $1(*($3 + [24]) - *($2)))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [10897])
	CALL eosio_assert(((int_64)*($3 + [24]) < (int_64)4611686018427387904), [10919])
	*(($3 + [112])) = *($4)
	*(($3 + [104])) = *($3 + [24])
	*($3 + [96]) = *($3 + [16])
	$6 = ($3 + [44])
	CALL $71(($3 + [120]), *($3 + [40]), *($6))
	*($3 + [57]) = [1]
	$4 = *($3 + [40])
	if ( ($4 == 0) ){ goto $label$14 }
	*($6) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$14
	CALL $72(($3 + [56]))
	$global$0 = ($3 + [192])
	return (unreachable)
	
.LABEL $label$8
	CALL $291($3)
	
.LABEL $label$6
	CALL $300((($3 + [16]) + [24]))
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = (CASTING uint_64)(uint_32 CALL $62(($0 + [72])))
	*(($4 + [88])) = $5
	*(($4 + [96])) = (int_64)-1
	*(($6 = ($4 + [104]))) = (int_64)0
	*(($4 + [112])) = [0]
	$7 = *($3)
	$8 = *($0)
	$0 = ($3 + [8])
	$9 = *($0)
	*((($4 + [16]) + [8])) = $9
	*((($4 + [48]) + [8])) = $9
	*($4 + [72]) = $5
	*($4 + [64]) = $8
	*($4 + [80]) = $8
	*($4 + [120]) = $8
	*($4 + [16]) = $7
	*($4 + [48]) = $7
	CALL $85(($4 + [64]), $1, ($4 + [16]))
	$7 = *($0)
	*((($4 + [32]) + [8])) = $7
	$8 = *($3)
	*(($4 + [8])) = $7
	*($4) = $8
	*($4 + [32]) = $8
	CALL $86(($4 + [64]), $2, $4)
	$10 = *($6)
	if ( ($10 == 0) ){ goto $label$1 }
	$11 = ($4 + [108])
	$3 = *($11)
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	$6 = *($0 + [24])
	if ( ($6 == 0) ){ goto $label$6 }
	*(($0 + [28])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$5
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($4 + [104]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $10
	
.LABEL $label$2
	*($11) = $10
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $83 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [112])
	$global$0 = $4
	*($4 + [104]) = $2
	CALL require_auth(*($0))
	$5 = (CASTING uint_64)(uint_32 CALL $62(($0 + [72])))
	*(($4 + [64])) = $5
	*(($4 + [72])) = (int_64)-1
	*(($6 = ($4 + [80]))) = (int_64)0
	*(($4 + [88])) = [0]
	$7 = *($3)
	$2 = *($0)
	$8 = *(($3 + [8]))
	*((($4 + [8]) + [8])) = $8
	*((($4 + [24]) + [8])) = $8
	*($4 + [48]) = $5
	*($4 + [40]) = $2
	*($4 + [56]) = $2
	*($4 + [96]) = $2
	*($4 + [8]) = $7
	*($4 + [24]) = $7
	CALL $79(($4 + [40]), $1, ($4 + [104]), ($4 + [8]))
	$9 = *($6)
	if ( ($9 == 0) ){ goto $label$1 }
	$10 = ($4 + [84])
	$0 = *($10)
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = *($3 + [24])
	if ( ($6 == 0) ){ goto $label$6 }
	*(($3 + [28])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$9 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($4 + [80]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $9
	
.LABEL $label$2
	*($10) = $9
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $82 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($3 + [120])) = (int_64)0
	*(($3 + [128])) = (int_64)1398362884
	$4 = [0]
	*($3 + [72]) = [0]
	*($3 + [104]) = $1
	*($3 + [80]) = *($0)
	*($3 + [88]) = *($0 + [8])
	*($3 + [96]) = *($0 + [56])
	CALL eosio_assert([1], [9768])
	$1 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8204])
	*(($3 + [144])) = [0]
	*(($3 + [136])) = (int_64)0
	*(($3 + [168])) = (int_64)-1
	*(($3 + [176])) = (int_64)0
	*(($3 + [184])) = [0]
	*(($3 + [160])) = *(($0 + [8]))
	*($3 + [152]) = *($0)
	$4 = CALL $69(($3 + [72]))
	$1 = *(($4 + [8]))
	$5 = *(($4 + [16]))
	$8 = *($4)
	*((($3 + [32]) + [28])) = (int_64)0
	*((($3 + [32]) + [16])) = $5
	*((($3 + [32]) + [8])) = $1
	*($3 + [56]) = [0]
	*($3 + [32]) = $8
	$6 = (*(($4 + [28])) - *($4 + [24]))
	$7 = ((int_32)$6 / (int_32)[24])
	if ( ($6 == 0) ){ goto $label$7 }
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$6 }
	$6 = CALL _Znwj($6)
	*((($3 + [32]) + [24])) = $6
	*(($3 + [64])) = ($6 + ((int_32)$7 * (int_32)[24]))
	*(($7 = (($3 + [32]) + [28]))) = $6
	$0 = *(($4 + [24]))
	$4 = (*(($4 + [28])) - $0)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($6, $0, $4)
	*($7) = (*($7) + ((int_32)((uint_32)$4 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$7
	*((($3 + [16]) + [8])) = [0]
	*($3 + [16]) = (int_64)0
	$7 = *($3 + [72])
	$4 = CALL $302([10629])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$12 }
	*($3 + [16]) = ($4 << [1])
	$6 = (($3 + [16]) | [1])
	if ( $4 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$0 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($0)
	*($3 + [16]) = ($0 | [1])
	*($3 + [24]) = $6
	*($3 + [20]) = $4
	
.LABEL $label$11
	CALL memcpy($6, [10629], $4)
	
.LABEL $label$10
	*(($6 + $4)) = [0]
	$4 = CALL $292(($3 + [192]), ($3 + [16]))
	CALL eosio_assert($7, ( *($4 + [8]) ? ($4 + [1]) : (*($3 + [192]) & [1]) ))
	if ( ((*($3 + [192]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$13
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($3 + [24]))
	
.LABEL $label$14
	$6 = *(($3 + [60]))
	$4 = *((($3 + [32]) + [24]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$15 }
	$1 = *($2)
	
.LOOP $label$16:
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$15 }
	$4 = ($4 + [24])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$16 }
	$4 = $6
	
.LABEL $label$15
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$7 = CALL $302([10725])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$19 }
	*($3) = ($7 << [1])
	$0 = ($3 | [1])
	if ( $7 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$2 = (($7 + [16]) & [-16])
	$0 = CALL _Znwj($2)
	*($3) = ($2 | [1])
	*($3 + [8]) = $0
	*($3 + [4]) = $7
	
.LABEL $label$18
	CALL memcpy($0, [10725], $7)
	
.LABEL $label$17
	*(($0 + $7)) = [0]
	$6 = CALL $292(($3 + [192]), $3)
	CALL eosio_assert(((int_32)$4 != (int_32)$6), ( *($6 + [8]) ? ($6 + [1]) : (*($3 + [192]) & [1]) ))
	if ( ((*($3 + [192]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$20
	if ( ((*($3) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$21
	$2 = ($4 + [24])
	$7 = ($3 + [60])
	$6 = (*($7) - $2)
	$0 = ((int_32)$6 / (int_32)[24])
	if ( ($6 == 0) ){ goto $label$22 }
	CALL memmove($4, $2, $6)
	
.LABEL $label$22
	$4 = ($4 + ((int_32)$0 * (int_32)[24]))
	*($7) = $4
	$6 = *((($3 + [32]) + [24]))
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$23 }
	CALL eosio_assert([1], [9768])
	$1 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$1 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$1 = $5
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$28 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$6 = [0]
	
.LABEL $label$24
	CALL eosio_assert($6, [8204])
	*(($3 + [48])) = (int_64)1397703940
	*($3 + [40]) = (int_64)0
	$4 = *(($3 + [60]))
	$6 = *($3 + [56])
	
.LABEL $label$23
	*(($3 + [128])) = *(($3 + [48]))
	*(($3 + [120])) = *(($3 + [40]))
	*($3 + [112]) = *($3 + [32])
	CALL $71(($3 + [136]), $6, $4)
	*($3 + [73]) = [1]
	$4 = *(($3 + [56]))
	if ( ($4 == 0) ){ goto $label$29 }
	*(($3 + [60])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$29
	CALL $72(($3 + [72]))
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$9
	CALL $291(($3 + [16]))
	
.LABEL $label$8
	CALL $291($3)
	
.LABEL $label$6
	CALL $300((($3 + [32]) + [24]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$4 = *(($0 + [228]))
	$3 = *(($0 + [224]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *($1)
	
.LOOP $label$2:
	if ( ((int_64)*($3) == (int_64)$5) ){ goto $label$1 }
	$3 = ($3 + [8])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$2 }
	$3 = $4
	
.LABEL $label$1
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$1 = CALL $302([10708])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$6 }
	*($2) = ($1 << [1])
	$6 = ($2 | [1])
	if ( $1 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = (($1 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($2) = ($7 | [1])
	*($2 + [8]) = $6
	*($2 + [4]) = $1
	
.LABEL $label$5
	CALL memcpy($6, [10708], $1)
	
.LABEL $label$4
	*(($6 + $1)) = [0]
	$4 = CALL $292(($2 + [16]), $2)
	CALL eosio_assert(((int_32)$3 != (int_32)$4), ( *($4 + [8]) ? ($4 + [1]) : (*($2 + [16]) & [1]) ))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$7
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$8
	$7 = ($3 + [8])
	$1 = ($0 + [228])
	$4 = (*($1) - $7)
	$6 = int_32($4 >> [3])
	if ( ($4 == 0) ){ goto $label$9 }
	CALL memmove($3, $7, $4)
	
.LABEL $label$9
	$4 = ($3 + ($6 << [3]))
	*($1) = $4
	$3 = ($0 + [224])
	if ( ((int_32)*($3) != (int_32)$4) ){ goto $label$10 }
	*(($0 + [216])) = (int_64)0
	
.LABEL $label$10
	*(($0 + [104])) = *($0 + [192])
	CALL $294(($0 + [112]), ($0 + [200]))
	*(($0 + [128])) = *(($0 + [216]))
	$4 = ($0 + [228])
	CALL $66(($0 + [136]), *($3), *($4))
	*(($0 + [65])) = [1]
	*(($0 + [148])) = *(($0 + [236]))
	$0 = *($4)
	$3 = *($3)
	$global$0 = ($2 + [32])
	return ((int_32)$3 == (int_32)$0)
	
.LABEL $label$3
	CALL $291($2)
	return (unreachable)
}

void .FUNC $80 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [320])
	$global$0 = $3
	*($3 + [312]) = $2
	CALL require_auth(*($0))
	$2 = *($0)
	$4 = CALL $74(($3 + [64]), $2, $2, $1)
	CALL $81($4, ($3 + [312]))
	$2 = (CASTING uint_64)(uint_32 CALL $62(($0 + [72])))
	*(($3 + [24])) = $2
	*(($3 + [32])) = (int_64)-1
	*(($5 = ($3 + [40]))) = (int_64)0
	*(($3 + [48])) = [0]
	*($3 + [8]) = $2
	$2 = *($0)
	*($3) = $2
	*($3 + [16]) = $2
	*($3 + [56]) = $2
	CALL $82($3, $1, ($3 + [312]))
	$6 = *($5)
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = ($3 + [44])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	$8 = *($5 + [24])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($5 + [28])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$6
	CALL _ZdlPv($5)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($3 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $6
	
.LABEL $label$2
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $76($4)
	$global$0 = ($3 + [320])
}

void .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	CALL $176(*($1), ($0 + [8]))
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [32]), *($1 + [4]), [8])
	$3 = (*($1 + [4]) + [8])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [40]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [176])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $305($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $179(($3 + [40]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $308($2)
	
.LABEL $label$5
	*(($1 = (($3 + [96]) + [8]))) = *(($3 + [56]))
	*(($2 = (($3 + [80]) + [8]))) = *(($3 + [72]))
	*($3 + [96]) = *($3 + [48])
	*($3 + [80]) = *($3 + [64])
	$6 = *($3 + [40])
	*((($3 + [128]) + [8])) = *($2)
	*((($3 + [112]) + [8])) = *($1)
	*($3 + [128]) = *($3 + [80])
	*($3 + [112]) = *($3 + [96])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$7 = *((($3 + [112]) + [8]))
	*((($3 + [160]) + [8])) = $7
	$8 = *((($3 + [128]) + [8]))
	*((($3 + [144]) + [8])) = $8
	*((($3 + [24]) + [8])) = $7
	*((($3 + [8]) + [8])) = $8
	$7 = *($3 + [112])
	*($3 + [160]) = $7
	$8 = *($3 + [128])
	*($3 + [144]) = $8
	*($3 + [24]) = $7
	*($3 + [8]) = $8
	CALL void $1((int_32 $6), (int_64 ($3 + [24])), (int_32 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [176])
	return [1]
}

void .FUNC $148 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $305($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $174(($3 + [8]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $308($2)
	
.LABEL $label$5
	*($3 + [4]) = ($3 + [48])
	*($3) = ($3 + [60])
	CALL $175($3, ($3 + [8]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$6
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $305($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9998])
	CALL memcpy($3, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[8]), [9998])
	$2 = ($3 + [8])
	CALL memcpy($2, ($6 + [8]), [4])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $308($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$6 = *($2)
	$7 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $7), (int_64 $6), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [112])
	$global$0 = $2
	*(($3 = $2) + [76]) = $0
	*($3 + [64]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $305($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [56])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [84]) = $1
	*($3 + [80]) = $1
	*($3 + [88]) = ($1 + $0)
	*($3 + [96]) = ($3 + [80])
	*($3 + [104]) = $3
	CALL $197(($3 + [104]), ($3 + [96]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $308($1)
	
.LABEL $label$4
	*($3 + [84]) = ($3 + [64])
	*($3 + [80]) = ($3 + [76])
	CALL $198(($3 + [80]), $3)
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$5
	$global$0 = ($3 + [112])
	return [1]
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $305($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)1398362884
	*($3) = (int_64)0
	CALL eosio_assert([1], [9768])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8204])
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($4 + $5)
	*($3 + [48]) = $4
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9998])
	CALL memcpy($3, $4, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [9998])
	CALL memcpy(($3 + [8]), ($4 + [8]), [8])
	*($3 + [52]) = ($4 + [16])
	CALL $176(($3 + [48]), ($3 + [16]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $308($4)
	
.LABEL $label$9
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $181(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $305($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$8 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$8 = $9
	$2 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$8 = $9
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8204])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = $3
	CALL $172(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $308($6)
	
.LABEL $label$9
	*(($2 = (($3 + [64]) + [8]))) = *(($3 + [24]))
	*($3 + [64]) = *($3 + [16])
	$8 = *(($3 + [8]))
	$9 = *($3)
	$1 = CALL $292(($3 + [48]), ($3 + [32]))
	*((($3 + [80]) + [8])) = *($2)
	*($3 + [104]) = $9
	*($3 + [96]) = $8
	*($3 + [80]) = *($3 + [64])
	$2 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$10 }
	$5 = *((*($2) + $5))
	
.LABEL $label$10
	CALL void $2((int_32 ($3 + [104])), (int_32 ($3 + [96])), (int_32 ($3 + [80])), (int_32 $1), (int_32 $5))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$11
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$12
	$global$0 = ($3 + [112])
	return [1]
}

void .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($0 + [64])
	if ( ($6 == 0) ){ goto $label$1 }
	*($5 + [4]) = $2
	*($5) = $1
	*($5 + [8]) = $3
	*($5 + [12]) = $4
	CALL $173($6, $5, $0)
	
.LABEL $label$1
	$global$0 = ($5 + [16])
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $305($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9998])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [9998])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $308($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $305($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [9998])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 & [-8]) != (int_32)[8]), [9998])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($3 + [52]) = ($1 + [16])
	CALL $176(($3 + [48]), ($3 + [16]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $308($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $196(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	CALL $237($0)
	$1 = *(($0 + [104]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [108])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	$5 = *($4 + [24])
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [28])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [104]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$3 = *(($0 + [64]))
	if ( ($3 == 0) ){ goto $label$7 }
	*(($0 + [68])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	return $0
}

void .FUNC $73 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [256])
	$global$0 = $3
	*($3 + [248]) = $2
	CALL require_auth(*($0))
	$2 = *($0)
	$0 = CALL $74($3, $2, $2, $1)
	CALL $75($0, ($3 + [248]))
	CALL $76($0)
	$global$0 = ($3 + [256])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[24]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $300($0)
	
.LABEL $label$1
	*(($4 = ($5 + ((int_32)$4 * (int_32)[24])))) = *($1)
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($5 + ((int_32)$6 * (int_32)[24]))
	$4 = ($4 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = ((int_32)$3 / (int_32)[24])
	if ( ((uint_32)$4 <= (uint_32)((int_32)($5 - $6) / (int_32)[24])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$1 }
	$6 = [178956970]
	$2 = ((int_32)$5 / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	
.LABEL $label$6
	$4 = ((int_32)$6 * (int_32)[24])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + ((int_32)((uint_32)$3 / (uint_32)[24]) * (int_32)[24]))
	goto $label$3 
	
.LABEL $label$4
	$3 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$7 = ( ($1 + ((int_32)$3 * (int_32)[24])) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$5 = ($7 - $1)
	$8 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $5)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + ((int_32)((uint_32)$1 / (uint_32)[24]) * (int_32)[24]))
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + ((int_32)$8 * (int_32)[24]))
	return (unreachable)
	
.LABEL $label$1
	CALL $300($0)
}

int_32 .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [224]))
	if ( ($1 == 0) ){ goto $label$1 }
	*(($0 + [228])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	if ( ((*(($0 + [200])) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($0 + [208])))
	
.LABEL $label$2
	CALL $67(($0 + [64]))
	$2 = *(($0 + [40]))
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = ($0 + [44])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	$5 = *($1 + [32])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($1 + [36])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$8
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$9
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$6 }
	$1 = *(($0 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $2
	
.LABEL $label$4
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$3
	return $0
}

void .FUNC $77 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [352])
	$global$0 = $3
	*($3 + [344]) = $2
	CALL require_auth(*($0))
	$2 = *($0)
	$4 = CALL $74(($3 + [96]), $2, $2, $1)
	CALL $78($4, ($3 + [344]))
	$2 = (CASTING uint_64)(uint_32 CALL $62(($0 + [72])))
	*((($3 + [32]) + [24])) = $2
	*(($3 + [64])) = (int_64)-1
	*(($3 + [72])) = (int_64)0
	$5 = [0]
	*(($3 + [80])) = [0]
	*($3 + [40]) = $2
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)1397703940
	$2 = *($0)
	*($3 + [32]) = $2
	*($3 + [48]) = $2
	*($3 + [88]) = $2
	CALL eosio_assert([1], [9768])
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$0 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$0 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $0 ){ goto $label$5 }
	$0 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [8204])
	*(($3 + [8])) = *((($3 + [16]) + [8]))
	*($3) = *($3 + [16])
	CALL $79(($3 + [32]), $1, ($3 + [344]), $3)
	$8 = *(($3 + [72]))
	if ( ($8 == 0) ){ goto $label$6 }
	$9 = ($3 + [76])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	$7 = *($0 + [24])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($0 + [28])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$11
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$9 }
	$5 = *(($3 + [72]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $8
	
.LABEL $label$7
	*($9) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$6
	CALL $76($4)
	$global$0 = ($3 + [352])
}

int_32 .FUNC $74 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($0 + [8]) = $1
	*($0) = $1
	*($0 + [16]) = $1
	*($0 + [56]) = $3
	*($0 + [64]) = [0]
	*(($0 + [24])) = $1
	*(($0 + [32])) = (int_64)-1
	*(($0 + [40])) = (int_64)0
	*(($0 + [48])) = [0]
	*(($0 + [72])) = $1
	*(($0 + [80])) = $1
	*(($0 + [88])) = $2
	*(($0 + [96])) = $3
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = [0]
	*(($0 + [136])) = (int_64)0
	*(($0 + [144])) = [0]
	*(($0 + [160])) = $1
	*(($0 + [152])) = $1
	*(($0 + [168])) = (int_64)-1
	*(($0 + [176])) = (int_64)0
	*(($0 + [184])) = [0]
	*(($5 = ($0 + [200]))) = (int_64)0
	*(($0 + [208])) = [0]
	*(($6 = ($0 + [224]))) = (int_64)0
	*(($0 + [232])) = [0]
	*($0 + [240]) = $2
	$7 = ($0 + [64])
	$8 = CALL $65($7)
	*($0 + [192]) = *($8)
	CALL $294($5, ($8 + [8]))
	*(($0 + [216])) = *($8 + [24])
	if ( ((int_32)$8 == (int_32)($0 + [192])) ){ goto $label$1 }
	CALL $66($6, *($8 + [32]), *(($8 + [36])))
	
.LABEL $label$1
	*(($0 + [236])) = *($8 + [44])
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$7 = *($7)
	$8 = CALL $302([10629])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$5 }
	*($4) = ($8 << [1])
	$5 = ($4 | [1])
	if ( $8 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($4) = ($6 | [1])
	*($4 + [8]) = $5
	*($4 + [4]) = $8
	
.LABEL $label$4
	CALL memcpy($5, [10629], $8)
	
.LABEL $label$3
	*(($5 + $8)) = [0]
	$8 = CALL $292(($4 + [16]), $4)
	CALL eosio_assert($7, ( *($8 + [8]) ? ($8 + [1]) : (*($4 + [16]) & [1]) ))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($8 + [8])))
	
.LABEL $label$6
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$7
	*(($0 + [192])) = *(($0 + [56]))
	$global$0 = ($4 + [32])
	return $0
	
.LABEL $label$2
	CALL $291($4)
	return (unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$4 = *(($0 + [228]))
	$3 = *(($0 + [224]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *($1)
	
.LOOP $label$2:
	if ( ((int_64)*($3) == (int_64)$5) ){ goto $label$1 }
	$3 = ($3 + [8])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$2 }
	$3 = $4
	
.LABEL $label$1
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$6 = CALL $302([10645])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$6 }
	*($2) = ($6 << [1])
	$7 = ($2 | [1])
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($2) = ($8 | [1])
	*($2 + [8]) = $7
	*($2 + [4]) = $6
	
.LABEL $label$5
	CALL memcpy($7, [10645], $6)
	
.LABEL $label$4
	*(($7 + $6)) = [0]
	$3 = CALL $292(($2 + [16]), $2)
	CALL eosio_assert(((int_32)$3 != (int_32)$4), ( *($3 + [8]) ? ($3 + [1]) : (*($2 + [16]) & [1]) ))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$7
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$8
	*(($3 = ($0 + [216]))) = *($1)
	*(($0 + [104])) = *($0 + [192])
	CALL $294(($0 + [112]), ($0 + [200]))
	*(($0 + [128])) = *($3)
	CALL $66(($0 + [136]), *(($0 + [224])), *(($0 + [228])))
	*(($0 + [65])) = [1]
	*(($0 + [148])) = *(($0 + [236]))
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$3
	CALL $291($2)
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	$5 = *(($0 + [228]))
	$3 = ($0 + [224])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	
.LOOP $label$2:
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$1 }
	$4 = ($4 + [8])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$2 }
	$4 = $5
	
.LABEL $label$1
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$7 = CALL $302([10690])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$6 }
	*($2) = ($7 << [1])
	$8 = ($2 | [1])
	if ( $7 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($2) = ($9 | [1])
	*($2 + [8]) = $8
	*($2 + [4]) = $7
	
.LABEL $label$5
	CALL memcpy($8, [10690], $7)
	
.LABEL $label$4
	*(($8 + $7)) = [0]
	$4 = CALL $292(($2 + [16]), $2)
	CALL eosio_assert(((int_32)$4 == (int_32)$5), ( *($4 + [8]) ? ($4 + [1]) : (*($2 + [16]) & [1]) ))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$7
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$8
	$5 = ($0 + [228])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)*(($0 + [232]))) ){ goto $label$10 }
	*($5) = ($4 + [8])
	*($4) = *($1)
	goto $label$9 
	
.LABEL $label$10
	CALL $63($3, $1)
	
.LABEL $label$9
	*(($0 + [104])) = *($0 + [192])
	CALL $294(($0 + [112]), ($0 + [200]))
	*(($0 + [128])) = *(($0 + [216]))
	CALL $66(($0 + [136]), *(($0 + [224])), *(($0 + [228])))
	*(($0 + [65])) = [1]
	*(($0 + [148])) = *(($0 + [236]))
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$3
	CALL $291($2)
}

void .FUNC $79 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [208])
	$global$0 = $4
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = (int_64)1398362884
	$5 = [0]
	*($4 + [88]) = [0]
	*($4 + [120]) = $1
	*($4 + [96]) = *($0)
	*($4 + [104]) = *($0 + [8])
	*($4 + [112]) = *($0 + [56])
	CALL eosio_assert([1], [9768])
	$1 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8204])
	*(($4 + [160])) = [0]
	*(($4 + [152])) = (int_64)0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [176])) = *(($0 + [8]))
	*($4 + [168]) = *($0)
	$5 = CALL $69(($4 + [88]))
	$1 = *(($5 + [8]))
	$6 = *(($5 + [16]))
	$9 = *($5)
	*((($4 + [48]) + [28])) = (int_64)0
	*((($4 + [48]) + [16])) = $6
	*((($4 + [48]) + [8])) = $1
	*($4 + [72]) = [0]
	*($4 + [48]) = $9
	$7 = (*(($5 + [28])) - *($5 + [24]))
	$8 = ((int_32)$7 / (int_32)[24])
	$0 = (($4 + [48]) + [24])
	if ( ($7 == 0) ){ goto $label$7 }
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$6 }
	$7 = CALL _Znwj($7)
	*((($4 + [48]) + [24])) = $7
	*(($4 + [80])) = ($7 + ((int_32)$8 * (int_32)[24]))
	*(($8 = (($4 + [48]) + [28]))) = $7
	$10 = *(($5 + [24]))
	$5 = (*(($5 + [28])) - $10)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($7, $10, $5)
	*($8) = (*($8) + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$7
	*((($4 + [32]) + [8])) = [0]
	*($4 + [32]) = (int_64)0
	$8 = *($4 + [88])
	$5 = CALL $302([10629])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$11 }
	*($4 + [32]) = ($5 << [1])
	$7 = (($4 + [32]) | [1])
	if ( $5 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$10 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($4 + [32]) = ($10 | [1])
	*($4 + [40]) = $7
	*($4 + [36]) = $5
	
.LABEL $label$10
	CALL memcpy($7, [10629], $5)
	
.LABEL $label$9
	*(($7 + $5)) = [0]
	$5 = CALL $292(($4 + [8]), ($4 + [32]))
	CALL eosio_assert($8, ( *($5 + [8]) ? ($5 + [1]) : (*($4 + [8]) & [1]) ))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$12
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($4 + [40]))
	
.LABEL $label$13
	$7 = *(($4 + [76]))
	$5 = *((($4 + [48]) + [24]))
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$16 }
	$1 = *($2)
	
.LOOP $label$17:
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$16 }
	$5 = ($5 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$15 }
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($5 + [16]))), [10748])
	$1 = ((int_64)*($5 + [8]) + (int_64)*($3))
	*($5 + [8]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [10791])
	CALL eosio_assert(((int_64)*($5 + [8]) < (int_64)4611686018427387904), [10810])
	goto $label$14 
	
.LABEL $label$15
	*(($4 + [24])) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$1 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$1 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$1 = $6
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$22 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$7 = [0]
	
.LABEL $label$18
	CALL eosio_assert($7, [8204])
	*(($8 = (($4 + [8]) + [16]))) = *(($3 + [8]))
	*($4 + [8]) = *($2)
	*($4 + [16]) = *($3)
	$7 = ($4 + [76])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)*(($4 + [80]))) ){ goto $label$23 }
	*($5) = *($4 + [8])
	*(($5 + [16])) = *($8)
	*(($5 + [8])) = *((($4 + [8]) + [8]))
	*($7) = (*($7) + [24])
	goto $label$14 
	
.LABEL $label$23
	CALL $70($0, ($4 + [8]))
	
.LABEL $label$14
	*(($4 + [144])) = *(($4 + [64]))
	*(($4 + [136])) = *(($4 + [56]))
	*($4 + [128]) = *($4 + [48])
	$7 = ($4 + [76])
	CALL $71(($4 + [152]), *($4 + [72]), *($7))
	*($4 + [89]) = [1]
	$5 = *($4 + [72])
	if ( ($5 == 0) ){ goto $label$24 }
	*($7) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$24
	CALL $72(($4 + [88]))
	$global$0 = ($4 + [208])
	return (unreachable)
	
.LABEL $label$8
	CALL $291(($4 + [32]))
	
.LABEL $label$6
	CALL $300($0)
	(unreachable)
}

void .FUNC $241 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[24])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$3 }
	$3 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL _Znwj(((int_32)$3 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$5 = ($0 + [4])
	
.LOOP $label$7:
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*(($3 = ($3 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [9768])
	$10 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$10 = $11
	$2 = [1]
	$4 = $3
	$3 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$10 = $11
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$2 = ((int_32)$3 < (int_32)[6])
	$4 = ($3 + [1])
	$3 = $4
	if ( $2 ){ goto $label$12 }
	$2 = [1]
	$3 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$2 = [0]
	
.LABEL $label$8
	CALL eosio_assert($2, [8204])
	$3 = (*($5) + [24])
	*($5) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $300($0)
	
.LABEL $label$2
	$8 = ($7 + ((int_32)$3 * (int_32)[24]))
	$9 = ($7 + ((int_32)$5 * (int_32)[24]))
	$5 = $9
	
.LOOP $label$13:
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*(($3 = ($5 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [9768])
	$10 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$10 = $11
	$12 = [1]
	$2 = $3
	$3 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	$10 = $11
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$2 = ((int_32)$3 < (int_32)[6])
	$4 = ($3 + [1])
	$3 = $4
	if ( $2 ){ goto $label$20 }
	$12 = [1]
	$3 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL eosio_assert($12, [8204])
	$5 = ($5 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$16
	CALL eosio_assert([0], [8204])
	$5 = ($5 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	CALL eosio_assert([0], [8204])
	$5 = ($5 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	
.LABEL $label$14
	$5 = ($7 + ((int_32)$6 * (int_32)[24]))
	$3 = *($0)
	$1 = ($0 + [4])
	$2 = (*($1) - $3)
	$4 = ($9 + ((int_32)((int_32)$2 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$21 }
	CALL memcpy($4, $3, $2)
	$3 = *($0)
	
.LABEL $label$21
	*($0) = $4
	*($1) = $5
	*(($0 + [8])) = $8
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $259 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL prints([11148])
	*($0 + [8]) = [0]
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $173($0, $1, $2)
	
.LABEL $label$1
}

int_32 .FUNC $258 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = [1]
	*($0) = *(*(*($2 + [4])) + [56])
	$1 = *($2)
	CALL eosio_assert([1], [9828])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($3 | [8]), ($0 + [8]), [4])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)4986958867385548800, *(*($2 + [8])), $4, $3, [12])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $223 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [10030])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $225(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $220(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $268 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	CALL $294(($1 + [12]), *($4 + [4]))
	$4 = *($1 + [12])
	$6 = ( *(($1 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [36])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $305($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL $271($3, $1)
	$7 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)3923610676896333824, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $308($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $251 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [2])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($2 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $300($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [2]))
	$3 = ($2 + ($3 << [2]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [2]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $250 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10573])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [2])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $251($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [2]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($5) - $3) > (uint_32)[3]), [9998])
	CALL memcpy($7, *($2), [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$7 = ($7 + [4])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $253 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [10116])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10162])
	$6 = *($1)
	$3 = *($3)
	*($1) = *($3 + [40])
	*(($1 + [8])) = *(($3 + [48]))
	$7 = ($1 + [12])
	CALL $294($7, ($3 + [52]))
	if ( ((int_32)($3 + [40]) == (int_32)$1) ){ goto $label$1 }
	CALL $66(($1 + [24]), *(($3 + [64])), *(($3 + [68])))
	CALL $106(($1 + [36]), *(($3 + [76])), *(($3 + [80])))
	
.LABEL $label$1
	*(($1 + [56])) = *(($3 + [96]))
	*($1 + [48]) = *(($3 + [88]))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10213])
	$3 = *($7)
	$7 = ( *(($1 + [16])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [12])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	$9 = *($1 + [24])
	$7 = *(($1 + [28]))
	$10 = ($7 - $9)
	$8 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$4 }
	$3 = (($10 & [-8]) + $3)
	
.LABEL $label$4
	$9 = *($1 + [36])
	$7 = *(($1 + [40]))
	$10 = ($7 - $9)
	$8 = (CASTING uint_64)(uint_32 int_32($10 >> [2]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$6 }
	$3 = (($10 & [-4]) + $3)
	
.LABEL $label$6
	$7 = ($3 + [16])
	if ( ($7 <= [513]) ){ goto $label$8 }
	$3 = CALL $305($7)
	goto $label$7 
	
.LABEL $label$8
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$7
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	CALL $256($5, $1)
	CALL db_update_i64(*($1 + [68]), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $308($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	
.LABEL $label$10
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$9
	$global$0 = ($5 + [16])
}

int_32 .FUNC $252 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = *($1 + [36])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [40])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = *($1 + [24])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($1 + [28])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($1 + [20])))
	
.LABEL $label$6
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdlPv($1)
	
.LABEL $label$7
	return $0
}

void .FUNC $255 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5 + [40])
	*(($1 + [8])) = *(($5 + [48]))
	$6 = ($1 + [12])
	CALL $294($6, ($5 + [52]))
	if ( ((int_32)($5 + [40]) == (int_32)$1) ){ goto $label$1 }
	CALL $66(($1 + [24]), *(($5 + [64])), *(($5 + [68])))
	CALL $106(($1 + [36]), *(($5 + [76])), *(($5 + [80])))
	
.LABEL $label$1
	*(($1 + [56])) = *(($5 + [96]))
	*($1 + [48]) = *(($5 + [88]))
	$5 = *($6)
	$6 = ( *(($1 + [16])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [12])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	$8 = *($1 + [24])
	$6 = *(($1 + [28]))
	$9 = ($6 - $8)
	$7 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$4 }
	$5 = (($9 & [-8]) + $5)
	
.LABEL $label$4
	$8 = *($1 + [36])
	$6 = *(($1 + [40]))
	$9 = ($6 - $8)
	$7 = (CASTING uint_64)(uint_32 int_32($9 >> [2]))
	
.LOOP $label$5:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$6 }
	$5 = (($9 & [-4]) + $5)
	
.LABEL $label$6
	$6 = ($5 + [16])
	if ( ($6 <= [513]) ){ goto $label$8 }
	$5 = CALL $305($6)
	goto $label$7 
	
.LABEL $label$8
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$7
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $6)
	CALL $256($3, $1)
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-5918372827033583088, *(*($0 + [8])), $7, $5, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $308($5)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$9 }
	
.LABEL $label$10
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	$global$0 = ($3 + [16])
}

void .FUNC $254 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [10030])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([80])) + [12 align=4]) = (int_64)0
	*($3 + [20 align=4]) = (int_64)0
	*($3 + [28 align=4]) = (int_64)0
	*($3 + [36 align=4]) = (int_64)0
	*($3 + [44]) = [0]
	*($3 + [64]) = $1
	CALL $255(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [68])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $249(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [36])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [40])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *($3 + [24])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [28])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	if ( ((*($3 + [12]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [20])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $257 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9828])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[3]), [9828])
	$7 = ($0 + [4])
	CALL memcpy(*($7), $6, [4])
	$4 = (*($7) + [4])
	*($7) = $4
	$6 = ($6 + [4])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $256 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9828])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [9828])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $257(CALL $235(CALL $201($0, ($1 + [12])), ($1 + [24])), ($1 + [36]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9828])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [9828])
	CALL memcpy(*($0 + [4]), ($1 + [52]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [9828])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [9828])
	CALL memcpy(*($0 + [4]), ($1 + [60]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $98 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL require_auth(*($0))
	*(($4 + [136])) = [0]
	*($4 + [128]) = (int_64)0
	$5 = CALL $302([8776])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($4 + [128]) = ($5 << [1])
	$6 = (($4 + [128]) | [1])
	if ( $5 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [128]) = ($7 | [1])
	*($4 + [136]) = $6
	*($4 + [132]) = $5
	
.LABEL $label$7
	CALL memcpy($6, [8776], $5)
	
.LABEL $label$6
	*(($6 + $5)) = [0]
	$8 = (int_64)0
	$9 = (int_64)59
	$5 = [9148]
	$10 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$8 > (uint_64)(int_64)8) ){ goto $label$14 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	goto $label$12 
	
.LABEL $label$14
	$11 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$10
	$5 = ($5 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$9 }
	$6 = CALL $292(($4 + [96]), ($4 + [128]))
	$7 = ($0 + [24])
	$5 = *($7)
	if ( $5 ){ goto $label$15 }
	*(($5 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($7) = $5
	$8 = *($0 + [16])
	*($5) = $8
	*($5 + [8]) = $8
	*($5 + [16]) = $8
	*($5 + [24]) = $8
	
.LABEL $label$15
	$7 = CALL $292(($4 + [144]), $6)
	CALL $52(($4 + [112]), $5, $10, $7)
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$16
	if ( ((*($6) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$17
	*(($4 + [88])) = [0]
	*($4 + [80]) = (int_64)0
	$5 = CALL $302([9158])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$20 }
	*($4 + [80]) = ($5 << [1])
	$6 = (($4 + [80]) | [1])
	if ( $5 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [80]) = ($7 | [1])
	*($4 + [88]) = $6
	*($4 + [84]) = $5
	
.LABEL $label$19
	CALL memcpy($6, [9158], $5)
	
.LABEL $label$18
	*(($6 + $5)) = [0]
	CALL $53(($4 + [112]), ($4 + [128]), ($4 + [80]))
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($4 + [88]))
	
.LABEL $label$21
	$5 = ($5 & [1])
	$5 = *($4 + [112])
	$6 = ( *($4 + [116]) ? uint_32($5 >> [1]) : $5 )
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$23 }
	$5 = ( *($4 + [120]) ? (($4 + [112]) | [1]) : $5 )
	$6 = ($5 + $6)
	$8 = (int_64)0
	
.LOOP $label$24:
	$8 = ((int_64)((int_64)((int_64)$8 * (int_64)10) + (int_64)*($5)) + (int_64)-48)
	$5 = ($5 + [1])
	if ( ($5 <= $6) ){ goto $label$24 }
	$11 = (int_64)$8 >> (int_64)63)
	goto $label$22 
	
.LABEL $label$23
	$8 = (int_64)0
	$11 = (int_64)0
	
.LABEL $label$22
	$12 = *($2)
	CALL __multi3(($4 + [40]), $8, $11, $12, (int_64)$12 >> (int_64)63))
	$13 = *($2 + [8])
	$8 = *(($4 + [48]))
	$9 = *($4 + [40])
	CALL eosio_assert(( (uint_64)($9 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [10524])
	CALL eosio_assert(( ((uint_64)$9 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [10548])
	CALL eosio_assert([1], [10484])
	CALL eosio_assert([1], [10499])
	CALL eosio_assert([1], [9768])
	$14 = ((int_64)$9 / (int_64)100)
	$8 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$11 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$8 = $11
	$6 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$8 = $11
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $6 ){ goto $label$29 }
	$6 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$6 = [0]
	
.LABEL $label$25
	CALL eosio_assert($6, [8204])
	CALL eosio_assert(((int_64)$13 == (int_64)1397703940), [9853])
	$15 = $13
	if ( ((uint_64)((int_64)$9 + (int_64)99) > (uint_64)(int_64)198) ){ goto $label$30 }
	CALL eosio_assert([1], [9768])
	$8 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$11 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$8 = $11
	$6 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	$8 = $11
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$32 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $6 ){ goto $label$35 }
	$6 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$6 = [0]
	
.LABEL $label$31
	CALL eosio_assert($6, [8204])
	$15 = (int_64)1397703940
	$14 = (int_64)1
	
.LABEL $label$30
	*($4 + [79]) = [0]
	$2 = ($0 + [264])
	$8 = (int_64)5
	
.LOOP $label$36:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$36 }
	$5 = CALL $47($2, (int_64)-3617352573452812288, ($4 + [79]))
	if ( (*($4 + [79]) == 0) ){ goto $label$37 }
	$8 = (int_64)0
	CALL __multi3(($4 + [24]), (CASTING uint_64)(uint_32 $5), (int_64)0, $14, (int_64)$14 >> (int_64)63))
	$11 = *(($4 + [32]))
	$9 = *($4 + [24])
	CALL eosio_assert(( (uint_64)($9 <= (int_64)4611686018427387904) ? ((int_64)$11 < (int_64)0) : (int_64)($11 == 0) ), [10524])
	CALL eosio_assert(( ((uint_64)$9 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$11 > (int_64)-1) : ((int_64)$11 == (int_64)-1) ), [10548])
	CALL eosio_assert([1], [10484])
	CALL eosio_assert([1], [10499])
	$16 = ((int_64)$9 / (int_64)100)
	$9 = (int_64)59
	$5 = [8766]
	$10 = (int_64)0
	
.LOOP $label$38:
	if ( ((uint_64)$8 > (uint_64)(int_64)8) ){ goto $label$43 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$6 = ($6 + [-91])
	goto $label$41 
	
.LABEL $label$43
	$11 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$39
	$5 = ($5 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$38 }
	*(($4 + [16])) = $15
	*($4 + [64]) = $15
	*($4 + [8]) = $16
	*($4 + [56]) = $16
	CALL $48($2, $10, ($4 + [8]))
	
.LABEL $label$37
	$2 = ((int_64)$13 == (int_64)$15)
	CALL eosio_assert($2, [9853])
	if ( ((int_64)$12 <= (int_64)$14) ){ goto $label$45 }
	$8 = (int_64)0
	$9 = (int_64)59
	$5 = [8192]
	$10 = (int_64)0
	
.LOOP $label$46:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$51 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$6 = ($6 + [-91])
	goto $label$49 
	
.LABEL $label$51
	$11 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$50
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$48
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$47
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)4294967291)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$46 }
	CALL eosio_assert($2, [10849])
	$15 = (int_64)
	$7 = ((int_64)$15($12 - $14)) > (int_64)-4611686018427387904
	CALL eosio_assert($7), [10897])
	$17 = ((int_64)$15 < (int_64)4611686018427387904)
	CALL eosio_assert($17, [10919])
	$12 = *($0 + [32])
	$8 = (int_64)0
	$9 = (int_64)59
	$5 = [10828]
	$14 = (int_64)0
	
.LOOP $label$52:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$57 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$6 = ($6 + [-91])
	goto $label$55 
	
.LABEL $label$57
	$11 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$56
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$54
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$53
	$5 = ($5 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$14 = ((int_64)$11 | (int_64)$14)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$52 }
	*(($4 + [168])) = $13
	*($4 + [152]) = $1
	*($4 + [144]) = $12
	*($4 + [160]) = $15
	CALL $292(($4 + [176]), $3)
	CALL $29($12, $10, $14, ($4 + [144]))
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$58 }
	CALL _ZdlPv(*(($4 + [184])))
	
.LABEL $label$58
	CALL eosio_assert($2, [10849])
	CALL eosio_assert($7, [10897])
	CALL eosio_assert($17, [10919])
	$14 = *($0)
	$9 = (int_64)0
	$11 = (int_64)59
	$5 = [10837]
	$10 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$64 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$6 = ($6 + [-91])
	goto $label$62 
	
.LABEL $label$64
	$8 = (int_64)0
	if ( ((int_64)$11 == (int_64)47244640260) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$60
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$59 }
	*(($4 + [160])) = $13
	*($4 + [152]) = $15
	*($4 + [144]) = $1
	CALL $94($14, $14, $10, ($4 + [144]))
	$5 = [1]
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$44 }
	goto $label$3 
	
.LABEL $label$45
	$5 = [1]
	if ( (*($4 + [112]) & [1]) ){ goto $label$3 }
	
.LABEL $label$44
	if ( (*($4 + [128]) & $5) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $291(($4 + [128]))
	
.LABEL $label$4
	CALL $291(($4 + [80]))
	
.LABEL $label$3
	CALL _ZdlPv(*(($4 + [120])))
	if ( ((*($4 + [128]) & $5) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($4 + [136]))
	$global$0 = ($4 + [192])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [192])
	(unreachable)
	(unreachable)
}

void .FUNC $99 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	$4 = ($global$0 - [912])
	$global$0 = $4
	CALL require_auth(*($0))
	*(($4 + [544])) = [0]
	*($4 + [536]) = (int_64)0
	$5 = CALL $302([9176])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$20 }
	*($4 + [536]) = ($5 << [1])
	$6 = (($4 + [536]) | [1])
	if ( $5 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [536]) = ($7 | [1])
	*($4 + [544]) = $6
	*($4 + [540]) = $5
	
.LABEL $label$19
	CALL memcpy($6, [9176], $5)
	
.LABEL $label$18
	*(($6 + $5)) = [0]
	$5 = *($3)
	$6 = ($5 & [1])
	$8 = ($3 + [1])
	$5 = CALL $297(($4 + [536]), ( *($3 + [8]) ? $8 : $6 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $6 ))
	$9 = *($5)
	*($5) = (int_64)0
	$5 = ($5 + [8])
	*((($4 + [880]) + [8])) = *($5)
	*($5) = [0]
	*($4 + [880]) = $9
	if ( ((*($4 + [536]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($4 + [544]))
	
.LABEL $label$21
	*((($4 + [864]) + [8])) = [0]
	*($4 + [864]) = (int_64)0
	$5 = CALL $302([8776])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$24 }
	*($4 + [864]) = ($5 << [1])
	$7 = (($4 + [864]) | [1])
	if ( $5 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$6 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($4 + [864]) = ($6 | [1])
	*($4 + [872]) = $7
	*($4 + [868]) = $5
	
.LABEL $label$23
	CALL memcpy($7, [8776], $5)
	
.LABEL $label$22
	$6 = [0]
	*(($7 + $5)) = [0]
	$5 = ( *($4 + [888]) ? (($4 + [880]) | [1]) : (*($4 + [880]) & [1]) )
	
.LOOP $label$25:
	$7 = ($5 + $6)
	$10 = ($6 + [1])
	$6 = $10
	if ( *($7) ){ goto $label$25 }
	$11 = (CASTING uint_64)(uint_32 ($10 + [-1]))
	$9 = (int_64)0
	$12 = (int_64)59
	$13 = (int_64)0
	
.LOOP $label$26:
	$14 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$11) ){ goto $label$27 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$6 = ($6 + [-91])
	goto $label$28 
	
.LABEL $label$29
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$31 }
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	goto $label$30 
	
.LABEL $label$31
	$14 = ((int_64)$14 & (int_64)15)
	
.LABEL $label$30
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$26 }
	$6 = CALL $292(($4 + [832]), ($4 + [864]))
	$7 = ($0 + [24])
	$5 = *($7)
	if ( $5 ){ goto $label$32 }
	*(($5 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($7) = $5
	$9 = *(($0 + [16]))
	*($5) = $9
	*($5 + [8]) = $9
	*($5 + [16]) = $9
	*($5 + [24]) = $9
	
.LABEL $label$32
	$7 = CALL $292(($4 + [536]), $6)
	CALL $52(($4 + [848]), $5, $13, $7)
	if ( ((*($4 + [536]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$33
	if ( ((*($6) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$34
	*(($4 + [824])) = [0]
	*($4 + [816]) = (int_64)0
	$5 = CALL $302([9183])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$37 }
	*($4 + [816]) = ($5 << [1])
	$6 = (($4 + [816]) | [1])
	if ( $5 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [816]) = ($7 | [1])
	*($4 + [824]) = $6
	*($4 + [820]) = $5
	
.LABEL $label$36
	CALL memcpy($6, [9183], $5)
	
.LABEL $label$35
	*(($6 + $5)) = [0]
	CALL $53(($4 + [848]), ($4 + [864]), ($4 + [816]))
	if ( ((*($4 + [816]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($4 + [824]))
	
.LABEL $label$38
	$13 = (int_64)0
	$5 = ($5 & [1])
	$5 = *($4 + [848])
	$6 = ( *($4 + [852]) ? uint_32($5 >> [1]) : $5 )
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$39 }
	$5 = ( *($4 + [856]) ? (($4 + [848]) | [1]) : $5 )
	$6 = ($5 + $6)
	$13 = (int_64)0
	
.LOOP $label$40:
	$13 = ((int_64)((int_64)((int_64)$13 * (int_64)10) + (int_64)*($5)) + (int_64)-48)
	$5 = ($5 + [1])
	if ( ($5 <= $6) ){ goto $label$40 }
	
.LABEL $label$39
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9768])
	$9 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$12 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$44 }
	$9 = $12
	$6 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$44
	$9 = $12
	
.LOOP $label$45:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $6 ){ goto $label$45 }
	$6 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$6 = [0]
	
.LABEL $label$41
	CALL eosio_assert($6, [8204])
	$9 = *($0)
	$15 = CALL $100(($4 + [536]), $9, $9, $1)
	$16 = CALL $101(($4 + [472]), ($15 + [208]))
	if ( (*($16 + [8]) == 0) ){ goto $label$50 }
	*(($4 + [464])) = [0]
	*($4 + [456]) = (int_64)0
	$5 = CALL $302([9176])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$49 }
	*($4 + [456]) = ($5 << [1])
	$6 = (($4 + [456]) | [1])
	if ( $5 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$50
	CALL $91(($0 + [136]), *($0), [1])
	goto $label$46 
	
.LABEL $label$49
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [456]) = ($7 | [1])
	*($4 + [464]) = $6
	*($4 + [460]) = $5
	
.LABEL $label$48
	CALL memcpy($6, [9176], $5)
	
.LABEL $label$47
	*(($6 + $5)) = [0]
	$9 = *(($16 + [8]))
	*($4 + [68]) = [0]
	$5 = ($4 + [68])
	
.LOOP $label$51:
	$12 = ((uint_64)$9 / (uint_64)(int_64)10)
	*(($5 = ($5 + [-1]))) = ((CASTING uint_32)(uint_64 (int_64))($9 - ((int_64)$12 * (int_64)10))) | [48])
	$6 = ((uint_64)$9 > (uint_64)(int_64)9)
	$9 = $12
	if ( $6 ){ goto $label$51 }
	*(($4 + [448])) = [0]
	*($4 + [440]) = (int_64)0
	$6 = CALL $302($5)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$54 }
	*($4 + [440]) = ($6 << [1])
	$10 = (($4 + [440]) | [1])
	$7 = $10
	if ( $6 ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$10 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($4 + [440]) = ($10 | [1])
	*($4 + [448]) = $7
	*($4 + [444]) = $6
	$10 = (($4 + [440]) | [1])
	
.LABEL $label$53
	CALL memcpy($7, $5, $6)
	
.LABEL $label$52
	*(($7 + $6)) = [0]
	$5 = *($4 + [440])
	$6 = ($5 & [1])
	$5 = CALL $297(($4 + [456]), ( *($4 + [448]) ? $10 : $6 ), ( *($4 + [444]) ? uint_32($5 >> [1]) : $6 ))
	$9 = *($5)
	*($5) = (int_64)0
	$5 = ($5 + [8])
	*((($4 + [896]) + [8])) = *($5)
	*($5) = [0]
	*($4 + [896]) = $9
	if ( ((*($4 + [440]) & [1]) == 0) ){ goto $label$55 }
	CALL _ZdlPv(*((($4 + [440]) + [8])))
	
.LABEL $label$55
	if ( ((*($4 + [456]) & [1]) == 0) ){ goto $label$56 }
	CALL _ZdlPv(*($4 + [464]))
	
.LABEL $label$56
	$5 = ( *($4 + [904]) ? (($4 + [896]) | [1]) : (*($4 + [896]) & [1]) )
	$6 = [0]
	
.LOOP $label$57:
	$7 = ($5 + $6)
	$10 = ($6 + [1])
	$6 = $10
	if ( *($7) ){ goto $label$57 }
	$17 = (CASTING uint_64)(uint_32 ($10 + [-1]))
	$9 = (int_64)0
	$12 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$58:
	$14 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$17) ){ goto $label$59 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$61 }
	$6 = ($6 + [-91])
	goto $label$60 
	
.LABEL $label$61
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$60
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$59
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$63 }
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	goto $label$62 
	
.LABEL $label$63
	$14 = ((int_64)$14 & (int_64)15)
	
.LABEL $label$62
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$14 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$58 }
	$6 = CALL $292(($4 + [424]), ($4 + [864]))
	$7 = ($0 + [24])
	$5 = *($7)
	if ( $5 ){ goto $label$64 }
	*(($5 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($7) = $5
	$9 = *(($0 + [16]))
	*($5) = $9
	*($5 + [8]) = $9
	*($5 + [16]) = $9
	*($5 + [24]) = $9
	
.LABEL $label$64
	$7 = CALL $292(($4 + [48]), $6)
	CALL $52(($4 + [456]), $5, $11, $7)
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$65 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$65
	if ( ((*($6) & [1]) == 0) ){ goto $label$66 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$66
	*(($4 + [416])) = [0]
	*($4 + [408]) = (int_64)0
	$5 = CALL $302([9183])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$69 }
	*($4 + [408]) = ($5 << [1])
	$6 = (($4 + [408]) | [1])
	if ( $5 ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [408]) = ($7 | [1])
	*($4 + [416]) = $6
	*($4 + [412]) = $5
	
.LABEL $label$68
	CALL memcpy($6, [9183], $5)
	
.LABEL $label$67
	*(($6 + $5)) = [0]
	CALL $53(($4 + [848]), ($4 + [864]), ($4 + [408]))
	if ( ((*($4 + [408]) & [1]) == 0) ){ goto $label$70 }
	CALL _ZdlPv(*($4 + [416]))
	
.LABEL $label$70
	$12 = (int_64)0
	$5 = ($5 & [1])
	$5 = *($4 + [456])
	$6 = ( *($4 + [460]) ? uint_32($5 >> [1]) : $5 )
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$71 }
	$5 = ( *($4 + [464]) ? (($4 + [456]) | [1]) : $5 )
	$6 = ($5 + $6)
	$12 = (int_64)0
	
.LOOP $label$72:
	$12 = ((int_64)((int_64)((int_64)$12 * (int_64)10) + (int_64)*($5)) + (int_64)-48)
	$5 = ($5 + [1])
	if ( ($5 <= $6) ){ goto $label$72 }
	
.LABEL $label$71
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9768])
	$9 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$75:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$74 }
	$14 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$76 }
	$9 = $14
	$6 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$75 }
	goto $label$73 
	
.LABEL $label$76
	$9 = $14
	
.LOOP $label$77:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$74 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $6 ){ goto $label$77 }
	$6 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$75 }
	goto $label$73 
	
.LABEL $label$74
	$6 = [0]
	
.LABEL $label$73
	CALL eosio_assert($6, [8204])
	CALL eosio_assert([1], [10849])
	$13 = (int_64)
	CALL eosio_assert(((int_64)$13($13 - $12)) > (int_64)-4611686018427387904), [10897])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [10919])
	if ( ((*($4 + [456]) & [1]) == 0) ){ goto $label$78 }
	CALL _ZdlPv(*(($4 + [464])))
	
.LABEL $label$78
	if ( ((*($4 + [896]) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($4 + [904])))
	
.LABEL $label$46
	$5 = *($16 + [12])
	if ( (( *(($16 + [16])) ? uint_32($5 >> [1]) : ($5 & [1]) ) == 0) ){ goto $label$79 }
	if ( *($16 + [56]) ){ goto $label$79 }
	$9 = (int_64)0
	$14 = (int_64)59
	$5 = [9198]
	$11 = (int_64)0
	
.LOOP $label$80:
	if ( ((uint_64)$9 > (uint_64)(int_64)9) ){ goto $label$85 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$84 }
	$6 = ($6 + [-91])
	goto $label$83 
	
.LABEL $label$85
	$12 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$84
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$83
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$82
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$81
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$80 }
	$6 = CALL $292(($4 + [392]), ($4 + [864]))
	$7 = ($0 + [24])
	$5 = *($7)
	if ( $5 ){ goto $label$86 }
	*(($5 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($7) = $5
	$9 = *(($0 + [16]))
	*($5) = $9
	*($5 + [8]) = $9
	*($5 + [16]) = $9
	*($5 + [24]) = $9
	
.LABEL $label$86
	$7 = CALL $292(($4 + [48]), $6)
	CALL $52(($4 + [896]), $5, $11, $7)
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$87 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$87
	if ( ((*($6) & [1]) == 0) ){ goto $label$88 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$88
	*(($4 + [384])) = [0]
	*($4 + [376]) = (int_64)0
	$5 = CALL $302([9209])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$91 }
	*($4 + [376]) = ($5 << [1])
	$6 = (($4 + [376]) | [1])
	if ( $5 ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$91
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [376]) = ($7 | [1])
	*($4 + [384]) = $6
	*($4 + [380]) = $5
	
.LABEL $label$90
	CALL memcpy($6, [9209], $5)
	
.LABEL $label$89
	*(($6 + $5)) = [0]
	CALL $53(($4 + [896]), ($4 + [864]), ($4 + [376]))
	if ( ((*($4 + [376]) & [1]) == 0) ){ goto $label$92 }
	CALL _ZdlPv(*($4 + [384]))
	
.LABEL $label$92
	$12 = (int_64)0
	$5 = ($5 & [1])
	$5 = *($4 + [896])
	$6 = ( *($4 + [900]) ? uint_32($5 >> [1]) : $5 )
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$93 }
	$5 = ( *($4 + [904]) ? (($4 + [896]) | [1]) : $5 )
	$6 = ($5 + $6)
	$12 = (int_64)0
	
.LOOP $label$94:
	$12 = ((int_64)((int_64)((int_64)$12 * (int_64)10) + (int_64)*($5)) + (int_64)-48)
	$5 = ($5 + [1])
	if ( ($5 <= $6) ){ goto $label$94 }
	
.LABEL $label$93
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9768])
	$9 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$97:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$96 }
	$14 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$98 }
	$9 = $14
	$6 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$97 }
	goto $label$95 
	
.LABEL $label$98
	$9 = $14
	
.LOOP $label$99:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$96 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $6 ){ goto $label$99 }
	$6 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$97 }
	goto $label$95 
	
.LABEL $label$96
	$6 = [0]
	
.LABEL $label$95
	CALL eosio_assert($6, [8204])
	CALL eosio_assert([1], [10849])
	$13 = (int_64)
	CALL eosio_assert(((int_64)$13($13 - $12)) > (int_64)-4611686018427387904), [10897])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [10919])
	CALL $102($15)
	if ( ((*($4 + [896]) & [1]) == 0) ){ goto $label$79 }
	CALL _ZdlPv(*(($4 + [904])))
	
.LABEL $label$79
	*(($4 + [368])) = [0]
	*($4 + [360]) = (int_64)0
	$5 = CALL $302([9228])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$102 }
	*($4 + [360]) = ($5 << [1])
	$6 = (($4 + [360]) | [1])
	if ( $5 ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$102
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [360]) = ($7 | [1])
	*($4 + [368]) = $6
	*($4 + [364]) = $5
	
.LABEL $label$101
	CALL memcpy($6, [9228], $5)
	
.LABEL $label$100
	*(($6 + $5)) = [0]
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1397703940), [9853])
	$5 = CALL $292(($4 + [48]), ($4 + [360]))
	CALL eosio_assert(((int_64)*($2) == (int_64)$13), ( *($5 + [8]) ? ($5 + [1]) : (*($4 + [48]) & [1]) ))
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$103 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$103
	if ( ((*($4 + [360]) & [1]) == 0) ){ goto $label$104 }
	CALL _ZdlPv(*($4 + [368]))
	
.LABEL $label$104
	$9 = (int_64)0
	$12 = (int_64)0
	$5 = ($5 & [1])
	$5 = *($3)
	$6 = ( *(($3 + [4])) ? uint_32($5 >> [1]) : $5 )
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$105 }
	$5 = ( *(($3 + [8])) ? $8 : $5 )
	$6 = ($5 + $6)
	$12 = (int_64)0
	
.LOOP $label$106:
	$12 = ((int_64)((int_64)((int_64)$12 * (int_64)10) + (int_64)*($5)) + (int_64)-48)
	$5 = ($5 + [1])
	if ( ($5 <= $6) ){ goto $label$106 }
	
.LABEL $label$105
	$3 = ($16 + [12])
	CALL $103($15, (CASTING uint_32)(uint_64 $12))
	$14 = (int_64)59
	$5 = [9260]
	$13 = (int_64)0
	
.LOOP $label$107:
	if ( ((uint_64)$9 > (uint_64)(int_64)9) ){ goto $label$112 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$111 }
	$6 = ($6 + [-91])
	goto $label$110 
	
.LABEL $label$112
	$12 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$109 }
	goto $label$108 
	
.LABEL $label$111
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$110
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$109
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$108
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$107 }
	$6 = CALL $292(($4 + [344]), ($4 + [864]))
	$7 = ($0 + [24])
	$5 = *($7)
	if ( $5 ){ goto $label$113 }
	*(($5 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($7) = $5
	$9 = *(($0 + [16]))
	*($5) = $9
	*($5 + [8]) = $9
	*($5 + [16]) = $9
	*($5 + [24]) = $9
	
.LABEL $label$113
	$7 = CALL $292(($4 + [48]), $6)
	CALL $52(($4 + [456]), $5, $13, $7)
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$114 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$114
	if ( ((*($6) & [1]) == 0) ){ goto $label$115 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$115
	*(($4 + [336])) = [0]
	*($4 + [328]) = (int_64)0
	$5 = CALL $302([9271])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$118 }
	*($4 + [328]) = ($5 << [1])
	$6 = (($4 + [328]) | [1])
	if ( $5 ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$118
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [328]) = ($7 | [1])
	*($4 + [336]) = $6
	*($4 + [332]) = $5
	
.LABEL $label$117
	CALL memcpy($6, [9271], $5)
	
.LABEL $label$116
	*(($6 + $5)) = [0]
	CALL $53(($4 + [456]), ($4 + [864]), ($4 + [328]))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$119 }
	CALL _ZdlPv(*($4 + [336]))
	
.LABEL $label$119
	$5 = ($5 & [1])
	$5 = *($4 + [456])
	$6 = ( *($4 + [460]) ? uint_32($5 >> [1]) : $5 )
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$121 }
	$5 = ( *($4 + [464]) ? (($4 + [456]) | [1]) : $5 )
	$6 = ($5 + $6)
	$13 = (int_64)0
	
.LOOP $label$122:
	$13 = ((int_64)((int_64)((int_64)$13 * (int_64)10) + (int_64)*($5)) + (int_64)-48)
	$5 = ($5 + [1])
	if ( ($5 <= $6) ){ goto $label$122 }
	goto $label$120 
	
.LABEL $label$121
	$13 = (int_64)0
	
.LABEL $label$120
	$5 = *(($16 + [12]))
	if ( (( *(($16 + [16])) ? uint_32($5 >> [1]) : ($5 & [1]) ) == 0) ){ goto $label$123 }
	$9 = (int_64)0
	$14 = (int_64)59
	$5 = [9290]
	$11 = (int_64)0
	
.LOOP $label$124:
	if ( ((uint_64)$9 > (uint_64)(int_64)9) ){ goto $label$129 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$128 }
	$6 = ($6 + [-91])
	goto $label$127 
	
.LABEL $label$129
	$12 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$126 }
	goto $label$125 
	
.LABEL $label$128
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$127
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$126
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$125
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$124 }
	$6 = CALL $292(($4 + [312]), ($4 + [864]))
	$7 = ($0 + [24])
	$5 = *($7)
	if ( $5 ){ goto $label$130 }
	*(($5 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($7) = $5
	$9 = *(($0 + [16]))
	*($5) = $9
	*($5 + [8]) = $9
	*($5 + [16]) = $9
	*($5 + [24]) = $9
	
.LABEL $label$130
	$7 = CALL $292(($4 + [48]), $6)
	CALL $52(($4 + [440]), $5, $11, $7)
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$131 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$131
	if ( ((*($6) & [1]) == 0) ){ goto $label$132 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$132
	*(($4 + [304])) = [0]
	*($4 + [296]) = (int_64)0
	$5 = CALL $302([9301])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$135 }
	*($4 + [296]) = ($5 << [1])
	$6 = (($4 + [296]) | [1])
	if ( $5 ){ goto $label$134 }
	goto $label$133 
	
.LABEL $label$135
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [296]) = ($7 | [1])
	*($4 + [304]) = $6
	*($4 + [300]) = $5
	
.LABEL $label$134
	CALL memcpy($6, [9301], $5)
	
.LABEL $label$133
	*(($6 + $5)) = [0]
	CALL $53(($4 + [440]), ($4 + [864]), ($4 + [296]))
	if ( ((*($4 + [296]) & [1]) == 0) ){ goto $label$136 }
	CALL _ZdlPv(*($4 + [304]))
	
.LABEL $label$136
	$17 = (int_64)0
	$5 = ($5 & [1])
	$5 = *($4 + [440])
	$6 = ( *($4 + [444]) ? uint_32($5 >> [1]) : $5 )
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$137 }
	$5 = ( *($4 + [448]) ? (($4 + [440]) | [1]) : $5 )
	$6 = ($5 + $6)
	$17 = (int_64)0
	
.LOOP $label$138:
	$17 = ((int_64)((int_64)((int_64)$17 * (int_64)10) + (int_64)*($5)) + (int_64)-48)
	$5 = ($5 + [1])
	if ( ($5 <= $6) ){ goto $label$138 }
	
.LABEL $label$137
	*(($4 + [288])) = [0]
	*($4 + [280]) = (int_64)0
	$5 = CALL $302([9320])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$141 }
	*($4 + [280]) = ($5 << [1])
	$10 = (($4 + [280]) | [1])
	$7 = $10
	if ( $5 ){ goto $label$140 }
	goto $label$139 
	
.LABEL $label$141
	$6 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($4 + [280]) = ($6 | [1])
	*($4 + [288]) = $7
	*($4 + [284]) = $5
	$10 = (($4 + [280]) | [1])
	
.LABEL $label$140
	CALL memcpy($7, [9320], $5)
	
.LABEL $label$139
	$6 = [0]
	*(($7 + $5)) = [0]
	CALL eosio_assert(((uint_64)$13 >= (uint_64)$17), ( *($4 + [288]) ? $10 : (*($4 + [280]) & [1]) ))
	if ( ((*($4 + [280]) & [1]) == 0) ){ goto $label$142 }
	CALL _ZdlPv(*(($4 + [288])))
	
.LABEL $label$142
	$5 = ( *(($16 + [20])) ? ($3 + [1]) : (*(($16 + [12])) & [1]) )
	
.LOOP $label$143:
	$7 = ($5 + $6)
	$10 = ($6 + [1])
	$6 = $10
	if ( *($7) ){ goto $label$143 }
	$13 = (int_64))($13 - $17)
	$18 = (CASTING uint_64)(uint_32 ($10 + [-1]))
	$9 = (int_64)0
	$12 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$144:
	$14 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$18) ){ goto $label$145 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$147 }
	$6 = ($6 + [-91])
	goto $label$146 
	
.LABEL $label$147
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$146
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$145
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$149 }
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	goto $label$148 
	
.LABEL $label$149
	$14 = ((int_64)$14 & (int_64)15)
	
.LABEL $label$148
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$14 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$144 }
	$9 = *($2)
	CALL __multi3(($4 + [32]), $9, (int_64)$9 >> (int_64)63), $17, (int_64)$17 >> (int_64)63))
	$9 = (int_64)0
	$19 = *(($2 + [8]))
	$12 = *((($4 + [32]) + [8]))
	$14 = *($4 + [32])
	CALL eosio_assert(( (uint_64)($14 <= (int_64)4611686018427387904) ? ((int_64)$12 < (int_64)0) : (int_64)($12 == 0) ), [10524])
	CALL eosio_assert(( ((uint_64)$14 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$12 > (int_64)-1) : ((int_64)$12 == (int_64)-1) ), [10548])
	CALL eosio_assert([1], [10484])
	CALL eosio_assert([1], [10499])
	$20 = ((int_64)$14 / (int_64)100)
	$14 = (int_64)59
	$5 = [8192]
	$17 = (int_64)0
	
.LOOP $label$150:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$155 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$154 }
	$6 = ($6 + [-91])
	goto $label$153 
	
.LABEL $label$155
	$12 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$152 }
	goto $label$151 
	
.LABEL $label$154
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$153
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$152
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$151
	$5 = ($5 + [1])
	$14 = ((int_64)$14 + (int_64)4294967291)
	$17 = ((int_64)$12 | (int_64)$17)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$150 }
	*(($4 + [904])) = [0]
	*($4 + [896]) = (int_64)0
	$5 = CALL $302([9341])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$158 }
	*($4 + [896]) = ($5 << [1])
	$6 = (($4 + [896]) | [1])
	if ( $5 ){ goto $label$157 }
	goto $label$156 
	
.LABEL $label$158
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [896]) = ($7 | [1])
	*($4 + [904]) = $6
	*($4 + [900]) = $5
	
.LABEL $label$157
	CALL memcpy($6, [9341], $5)
	
.LABEL $label$156
	*(($6 + $5)) = [0]
	$21 = *($0 + [32])
	$9 = (int_64)0
	$14 = (int_64)59
	$5 = [10828]
	$18 = (int_64)0
	
.LOOP $label$159:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$164 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$163 }
	$6 = ($6 + [-91])
	goto $label$162 
	
.LABEL $label$164
	$12 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$161 }
	goto $label$160 
	
.LABEL $label$163
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$162
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$161
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$160
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$18 = ((int_64)$12 | (int_64)$18)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$159 }
	*(($4 + [72])) = $19
	*($4 + [56]) = $11
	*($4 + [48]) = $21
	*($4 + [64]) = $20
	CALL $292(($4 + [80]), ($4 + [896]))
	CALL $29($21, $17, $18, ($4 + [48]))
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$165 }
	CALL _ZdlPv(*(($4 + [88])))
	
.LABEL $label$165
	if ( ((*($4 + [896]) & [1]) == 0) ){ goto $label$166 }
	CALL _ZdlPv(*($4 + [904]))
	
.LABEL $label$166
	*(($5 = (($4 + [264]) + [8]))) = *(($2 + [8]))
	*($4 + [264]) = *($2)
	*((($4 + [896]) + [8])) = *($5)
	*($4 + [896]) = *($4 + [264])
	$18 = *($0)
	$14 = (int_64)0
	$12 = (int_64)59
	$5 = [10837]
	$17 = (int_64)0
	
.LOOP $label$167:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$172 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$171 }
	$6 = ($6 + [-91])
	goto $label$170 
	
.LABEL $label$172
	$9 = (int_64)0
	if ( ((int_64)$12 == (int_64)47244640260) ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$171
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$170
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$169
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$168
	$5 = ($5 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$17 = ((int_64)$9 | (int_64)$17)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$167 }
	*(($4 + [64])) = *((($4 + [896]) + [8]))
	*($4 + [48]) = $11
	*($4 + [56]) = *($4 + [896])
	CALL $94($18, $18, $17, ($4 + [48]))
	if ( ((*($4 + [440]) & [1]) == 0) ){ goto $label$123 }
	CALL _ZdlPv(*((($4 + [440]) + [8])))
	
.LABEL $label$123
	$9 = *($2)
	CALL __multi3(($4 + [16]), $9, (int_64)$9 >> (int_64)63), $13, (int_64)$13 >> (int_64)63))
	$9 = (int_64)0
	$11 = *(($2 + [8]))
	$12 = *((($4 + [16]) + [8]))
	$14 = *($4 + [16])
	CALL eosio_assert(( (uint_64)($14 <= (int_64)4611686018427387904) ? ((int_64)$12 < (int_64)0) : (int_64)($12 == 0) ), [10524])
	CALL eosio_assert(( ((uint_64)$14 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$12 > (int_64)-1) : ((int_64)$12 == (int_64)-1) ), [10548])
	CALL eosio_assert([1], [10484])
	CALL eosio_assert([1], [10499])
	$7 = ($0 + [264])
	$17 = ((int_64)$14 / (int_64)100)
	$12 = (int_64)59
	$5 = [9356]
	$13 = (int_64)0
	
.LOOP $label$173:
	$14 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$174 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$176 }
	$6 = ($6 + [-91])
	goto $label$175 
	
.LABEL $label$176
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$175
	$14 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$174
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$173 }
	*(($4 + [8])) = $11
	*($4 + [256]) = $11
	*($4) = $17
	*($4 + [248]) = $17
	CALL $48($7, $13, $4)
	$9 = *($0)
	$10 = CALL $55(($4 + [48]), $9, $9, $1)
	if ( CALL $56($10) ){ goto $label$177 }
	CALL $57($10)
	
.LABEL $label$177
	if ( ((*(($10 + [176])) & [1]) == 0) ){ goto $label$178 }
	CALL _ZdlPv(*(($10 + [184])))
	
.LABEL $label$178
	CALL $58(($10 + [64]))
	$7 = *(($10 + [40]))
	if ( ($7 == 0) ){ goto $label$179 }
	$0 = ($10 + [44])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$181 }
	
.LOOP $label$182:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$183 }
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$184 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$184
	CALL _ZdlPv($6)
	
.LABEL $label$183
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$182 }
	$5 = *(($10 + [40]))
	goto $label$180 
	
.LABEL $label$181
	$5 = $7
	
.LABEL $label$180
	*($0) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$179
	if ( ((*($4 + [456]) & [1]) == 0) ){ goto $label$185 }
	CALL _ZdlPv(*(($4 + [464])))
	
.LABEL $label$185
	$5 = *($16 + [36])
	if ( ($5 == 0) ){ goto $label$186 }
	*(($16 + [40])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$186
	$5 = *($16 + [24])
	if ( ($5 == 0) ){ goto $label$187 }
	*(($16 + [28])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$187
	if ( (*($3) & [1]) ){ goto $label$189 }
	CALL $104($15)
	if ( (*($4 + [848]) & [1]) ){ goto $label$188 }
	goto $label$5 
	
.LABEL $label$189
	CALL _ZdlPv(*(($16 + [20])))
	CALL $104($15)
	if ( ((*($4 + [848]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$188
	CALL _ZdlPv(*(($4 + [856])))
	$5 = [1]
	if ( ((*($4 + [864]) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$17
	CALL $291(($4 + [536]))
	
.LABEL $label$16
	CALL $291(($4 + [864]))
	
.LABEL $label$15
	CALL $291(($4 + [816]))
	
.LABEL $label$14
	CALL $291(($4 + [360]))
	
.LABEL $label$13
	CALL $291(($4 + [328]))
	
.LABEL $label$12
	CALL $291(($4 + [456]))
	
.LABEL $label$11
	CALL $291(($4 + [440]))
	
.LABEL $label$10
	CALL $291(($4 + [408]))
	
.LABEL $label$9
	CALL $291(($4 + [296]))
	
.LABEL $label$8
	CALL $291(($4 + [280]))
	
.LABEL $label$7
	CALL $291(($4 + [896]))
	
.LABEL $label$6
	CALL $291(($4 + [376]))
	
.LABEL $label$5
	$5 = [1]
	if ( (*($4 + [864]) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($4 + [880]) & $5) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [872]))
	if ( ((*($4 + [880]) & $5) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($4 + [888])))
	$global$0 = ($4 + [912])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [912])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $239 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $300($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [24])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [28])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $238 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)0
	*(($3 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [9768])
	$4 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8204])
	*(($0 + [32])) = [0]
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [36]) = $1
	$3 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy($0, *($3 + [4]), [8])
	$6 = (*($3 + [4]) + [8])
	*($3 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $6) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$6 = (*($3 + [4]) + [8])
	*($3 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $6) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $240($3, ($0 + [24]))
	*($0 + [40]) = *(*($2 + [8]))
	return $0
}

void .FUNC $94 (int_64 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = (int_64)6
	
.LOOP $label$1:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	*($4 + [16]) = (int_64)3617214756542218240
	*($4 + [8]) = $0
	$3 = CALL $246(($4 + [24]), ($4 + [8]), $1, $2, $3)
	CALL $32(($4 + [64]), $3)
	$6 = *($4 + [64])
	CALL send_inline($6, (*($4 + [68]) - $6))
	$6 = *($4 + [64])
	if ( ($6 == 0) ){ goto $label$2 }
	*($4 + [68]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$2
	$6 = *($3 + [28])
	if ( ($6 == 0) ){ goto $label$3 }
	*(($3 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$3
	$6 = *($3 + [16])
	if ( ($6 == 0) ){ goto $label$4 }
	*(($3 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [10116])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10162])
	$5 = (*($1 + [8]) + *(*($3)))
	*($1 + [8]) = $5
	*(*($3 + [4])) = $5
	$6 = *($1)
	CALL eosio_assert([1], [10213])
	CALL eosio_assert([1], [9828])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	CALL db_update_i64(*($1 + [20]), $2, $4, [12])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $96 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = (CASTING uint_64)(uint_32 CALL $62(($0 + [72])))
	*(($3 + [56])) = $4
	*(($3 + [64])) = (int_64)-1
	*(($5 = ($3 + [72]))) = (int_64)0
	*(($3 + [80])) = [0]
	$6 = *($2)
	$7 = *($0)
	$8 = *(($2 + [8]))
	*(($3 + [8])) = $8
	*((($3 + [16]) + [8])) = $8
	*($3 + [40]) = $4
	*($3 + [32]) = $7
	*($3 + [48]) = $7
	*($3 + [88]) = $7
	*($3) = $6
	*($3 + [16]) = $6
	CALL $97(($3 + [32]), $1, $3)
	$9 = *($5)
	if ( ($9 == 0) ){ goto $label$1 }
	$10 = ($3 + [76])
	$2 = *($10)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	$5 = *($0 + [24])
	if ( ($5 == 0) ){ goto $label$6 }
	*(($0 + [28])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$5
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($3 + [72]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $9
	
.LABEL $label$2
	*($10) = $9
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($3 + [96])
}

void .FUNC $97 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($3 + [104])) = (int_64)0
	*(($3 + [112])) = (int_64)1398362884
	$4 = [0]
	*($3 + [56]) = [0]
	*($3 + [88]) = $1
	*($3 + [64]) = *($0)
	*($3 + [72]) = *($0 + [8])
	*($3 + [80]) = *($0 + [56])
	CALL eosio_assert([1], [9768])
	$1 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8204])
	*(($3 + [128])) = [0]
	*(($3 + [120])) = (int_64)0
	*(($3 + [152])) = (int_64)-1
	*(($3 + [160])) = (int_64)0
	*(($3 + [168])) = [0]
	*(($3 + [144])) = *(($0 + [8]))
	*($3 + [136]) = *($0)
	$4 = CALL $69(($3 + [56]))
	$1 = *(($4 + [8]))
	$5 = *(($4 + [16]))
	$8 = *($4)
	*((($3 + [16]) + [28])) = (int_64)0
	*((($3 + [16]) + [16])) = $5
	*((($3 + [16]) + [8])) = $1
	*($3 + [40]) = [0]
	*($3 + [16]) = $8
	$6 = (*(($4 + [28])) - *($4 + [24]))
	$7 = ((int_32)$6 / (int_32)[24])
	if ( ($6 == 0) ){ goto $label$7 }
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$6 }
	$6 = CALL _Znwj($6)
	*((($3 + [16]) + [24])) = $6
	*(($3 + [48])) = ($6 + ((int_32)$7 * (int_32)[24]))
	*(($7 = (($3 + [16]) + [28]))) = $6
	$0 = *(($4 + [24]))
	$4 = (*(($4 + [28])) - $0)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($6, $0, $4)
	*($7) = (*($7) + ((int_32)((uint_32)$4 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$7
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$7 = *($3 + [56])
	$4 = CALL $302([10629])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$11 }
	*($3) = ($4 << [1])
	$6 = ($3 | [1])
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$0 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($0)
	*($3) = ($0 | [1])
	*($3 + [8]) = $6
	*($3 + [4]) = $4
	
.LABEL $label$10
	CALL memcpy($6, [10629], $4)
	
.LABEL $label$9
	*(($6 + $4)) = [0]
	$4 = CALL $292(($3 + [176]), $3)
	CALL eosio_assert($7, ( *($4 + [8]) ? ($4 + [1]) : (*($3 + [176]) & [1]) ))
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$12
	if ( ((*($3) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$13
	$1 = *($2)
	*(($3 + [104])) = $1
	$5 = *(($2 + [8]))
	*(($3 + [112])) = $5
	*(($3 + [32])) = $5
	*($3 + [96]) = *($3 + [16])
	*($3 + [24]) = $1
	$6 = ($3 + [44])
	CALL $71(($3 + [120]), *($3 + [40]), *($6))
	*($3 + [57]) = [1]
	$4 = *($3 + [40])
	if ( ($4 == 0) ){ goto $label$14 }
	*($6) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$14
	CALL $72(($3 + [56]))
	$global$0 = ($3 + [192])
	return (unreachable)
	
.LABEL $label$8
	CALL $291($3)
	
.LABEL $label$6
	CALL $300((($3 + [16]) + [24]))
	(unreachable)
}

void .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$1 = $global$0
	$2 = $1
	$3 = *($0 + [8])
	$4 = (int_64)($3 == 0)
	if ( $4 ){ goto $label$2 }
	$5 = ((int_64)$3 + (int_64)1)
	$6 = (int_64)1
	
.LOOP $label$3:
	$6 = ((int_64)$6 * (int_64)10)
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)$5 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)1
	
.LABEL $label$1
	$7 = ($0 + [8])
	$8 = (CASTING uint_32)(uint_64 $3)
	$1 = ($1 - (($8 + [16]) & [496]))
	$global$0 = $1
	*(($9 = ($1 + $8))) = [0]
	$10 = *($0)
	if ( $4 ){ goto $label$4 }
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$10 % (int_64)$6)
	$0 = ($9 + [-1])
	
.LOOP $label$5:
	$11 = ((int_64)$5 / (int_64)10)
	*($0) = ((CASTING uint_32)(uint_64 (int_64))($5 - ((int_64)$11 * (int_64)10))) + [48])
	$0 = ($0 + [-1])
	$5 = $11
	$3 = ((int_64)$3 + (int_64)-1)
	if ( ((int_64)$3 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	CALL printi(((int_64)$10 / (int_64)$6))
	CALL prints([11528])
	CALL prints_l($1, $8)
	CALL prints([11530])
	CALL $284($7, [0])
	$global$0 = $2
}

int_32 .FUNC $91 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$4 = ($0 + [16])
	$5 = *($0 + [56])
	$7 = *(($0 + [44]))
	$6 = *(($0 + [40]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($7 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$3 }
	$7 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [9924])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$2 = CALL db_find_i64(*($4), *(($0 + [24])), (int_64)4986958867385548800, $5)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $68($4, $2)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [9924])
	
.LABEL $label$1
	*($3 + [8]) = [0]
	*($3 + [4]) = ($3 + [8])
	*($3) = ($3 + [12])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10081])
	CALL $95($4, $8, $1, $3)
	$2 = *($3 + [8])
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9975])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $305($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([48])
	$6 = CALL $238($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [40])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $239(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $308($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	$1 = *($5 + [24])
	if ( ($1 == 0) ){ goto $label$10 }
	*(($5 + [28])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$5 = ($global$0 - [48])
	$global$0 = $5
	$6 = *($2)
	$7 = *($0)
	$8 = (int_64)0
	$9 = (int_64)59
	$0 = [10828]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$6 }
	$2 = *($0)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [-48]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$1 }
	*(($5 + [24])) = *(($3 + [8]))
	*($5) = $7
	*($5 + [8]) = *($1)
	*($5 + [16]) = *($3)
	CALL $292(($5 + [32]), $4)
	CALL $29($7, $6, $10, $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$7
	$global$0 = ($5 + [48])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = $2) + [76]) = $0
	*($3 + [64]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $305($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $191(($3 + [8]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $308($2)
	
.LABEL $label$5
	*($3 + [4]) = ($3 + [64])
	*($3) = ($3 + [76])
	CALL $192($3, ($3 + [8]))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$6
	$global$0 = ($3 + [80])
	return [1]
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $305($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [16])) = [0]
	*(($3 + [40])) = (int_64)1398362884
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$6 = $8
	$7 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$7 }
	$7 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [8204])
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $182(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$8 }
	CALL $308($4)
	
.LABEL $label$8
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $183(($3 + [64]), $3)
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $269 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $300($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [20])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [976])
	$global$0 = $3
	CALL memory()
	CALL prints([9631])
	CALL printui($0)
	CALL prints([9640])
	CALL printui($1)
	CALL prints([9640])
	CALL printui($2)
	CALL prints([9642])
	CALL eosio_assert([1], [9648])
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	$5 = [1]
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	$5 = ((int_64)6138663577826885632 == (int_64)$1)
	
.LABEL $label$2
	CALL eosio_assert($5, [9686])
	$5 = CALL $131(($3 + [648]), $0, $1)
	if ( ((int_64)$2 > (int_64)3617214701412286463) ){ goto $label$44 }
	if ( ((int_64)$2 > (int_64)-4994048603321270273) ){ goto $label$43 }
	if ( ((int_64)$2 > (int_64)-4994354142462869505) ){ goto $label$41 }
	if ( ((int_64)$2 <= (int_64)-7119375195075861617) ){ goto $label$37 }
	if ( ((int_64)$2 == (int_64)-7119375195075861616) ){ goto $label$29 }
	if ( ((int_64)$2 == (int_64)-7119375192143711856) ){ goto $label$21 }
	if ( ((int_64)$2 != (int_64)-5001445538806104064) ){ goto $label$5 }
	*($3 + [492]) = [0]
	*($3 + [488]) = [1]
	*($3 + [160]) = *($3 + [488])
	CALL $132($5, ($3 + [160]))
	goto $label$4 
	
.LABEL $label$44
	if ( ((int_64)$2 > (int_64)5373175139200401407) ){ goto $label$42 }
	if ( ((int_64)$2 > (int_64)4520870461521434783) ){ goto $label$40 }
	if ( ((int_64)$2 <= (int_64)3626283467671076863) ){ goto $label$36 }
	if ( ((int_64)$2 == (int_64)3626283467671076864) ){ goto $label$28 }
	if ( ((int_64)$2 == (int_64)3724085270811770880) ){ goto $label$20 }
	if ( ((int_64)$2 != (int_64)3968644482557952000) ){ goto $label$5 }
	*($3 + [332]) = [0]
	*($3 + [328]) = [2]
	*($3 + [320]) = *($3 + [328])
	CALL $134($5, ($3 + [320]))
	goto $label$4 
	
.LABEL $label$43
	if ( ((int_64)$2 > (int_64)-3917949595616280577) ){ goto $label$39 }
	if ( ((int_64)$2 <= (int_64)-4417348545640660993) ){ goto $label$35 }
	if ( ((int_64)$2 == (int_64)-4417348545640660992) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)-4417024683094835200) ){ goto $label$19 }
	if ( ((int_64)$2 != (int_64)-4373710888917139456) ){ goto $label$5 }
	*($3 + [500]) = [0]
	*($3 + [496]) = [3]
	*($3 + [152]) = *($3 + [496])
	CALL $135($5, ($3 + [152]))
	goto $label$4 
	
.LABEL $label$42
	if ( ((int_64)$2 > (int_64)8526760961502085119) ){ goto $label$38 }
	if ( ((int_64)$2 <= (int_64)5378304506435993599) ){ goto $label$34 }
	if ( ((int_64)$2 == (int_64)5378304506435993600) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)6820292244012679168) ){ goto $label$18 }
	if ( ((int_64)$2 != (int_64)8428183963604516864) ){ goto $label$5 }
	*($3 + [476]) = [0]
	*($3 + [472]) = [4]
	*($3 + [176]) = *($3 + [472])
	CALL $136($5, ($3 + [176]))
	goto $label$4 
	
.LABEL $label$41
	if ( ((int_64)$2 <= (int_64)-4994338429437214721) ){ goto $label$33 }
	if ( ((int_64)$2 == (int_64)-4994338429437214720) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)-4994232075566448640) ){ goto $label$17 }
	if ( ((int_64)$2 != (int_64)-4994081725862756352) ){ goto $label$5 }
	*($3 + [380]) = [0]
	*($3 + [376]) = [5]
	*($3 + [272]) = *($3 + [376])
	CALL $138($5, ($3 + [272]))
	goto $label$4 
	
.LABEL $label$40
	if ( ((int_64)$2 <= (int_64)4851652232166244351) ){ goto $label$32 }
	if ( ((int_64)$2 == (int_64)4851652232166244352) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)4923678490122780672) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)5031766159376273920) ){ goto $label$5 }
	*($3 + [556]) = [0]
	*($3 + [552]) = [6]
	*($3 + [96]) = *($3 + [552])
	CALL $139($5, ($3 + [96]))
	goto $label$4 
	
.LABEL $label$39
	if ( ((int_64)$2 <= (int_64)-3841130677495922689) ){ goto $label$31 }
	if ( ((int_64)$2 == (int_64)-3841130677495922688) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)-3617352573452812288) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$5 }
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$4 }
	*($3 + [644]) = [0]
	*($3 + [640]) = [7]
	*($3 + [8]) = *($3 + [640])
	CALL $141($5, ($3 + [8]))
	goto $label$4 
	
.LABEL $label$38
	if ( ((int_64)$2 <= (int_64)8526764776092598271) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)8526764776092598272) ){ goto $label$22 }
	if ( ((int_64)$2 == (int_64)8526769474520838656) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)8526769483116183552) ){ goto $label$5 }
	*($3 + [348]) = [0]
	*($3 + [344]) = [8]
	*($3 + [304]) = *($3 + [344])
	CALL $142($5, ($3 + [304]))
	goto $label$4 
	
.LABEL $label$37
	if ( ((int_64)$2 == (int_64)-8272103852073811968) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)-7704843149864970896) ){ goto $label$5 }
	*($3 + [548]) = [0]
	*($3 + [544]) = [9]
	*($3 + [104]) = *($3 + [544])
	CALL $143($5, ($3 + [104]))
	goto $label$4 
	
.LABEL $label$36
	if ( ((int_64)$2 == (int_64)3617214701412286464) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)3626283120069181440) ){ goto $label$5 }
	*($3 + [540]) = [0]
	*($3 + [536]) = [10]
	*($3 + [112]) = *($3 + [536])
	CALL $143($5, ($3 + [112]))
	goto $label$4 
	
.LABEL $label$35
	if ( ((int_64)$2 == (int_64)-4994048603321270272) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-4740219220141277184) ){ goto $label$5 }
	*($3 + [468]) = [0]
	*($3 + [464]) = [11]
	*($3 + [184]) = *($3 + [464])
	CALL $144($5, ($3 + [184]))
	goto $label$4 
	
.LABEL $label$34
	if ( ((int_64)$2 == (int_64)5373175139200401408) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)5378183375116304384) ){ goto $label$5 }
	*($3 + [532]) = [0]
	*($3 + [528]) = [12]
	*($3 + [120]) = *($3 + [528])
	CALL $143($5, ($3 + [120]))
	goto $label$4 
	
.LABEL $label$33
	if ( ((int_64)$2 == (int_64)-4994354142462869504) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-4994343988953612288) ){ goto $label$5 }
	*($3 + [388]) = [0]
	*($3 + [384]) = [13]
	*($3 + [264]) = *($3 + [384])
	CALL $138($5, ($3 + [264]))
	goto $label$4 
	
.LABEL $label$32
	if ( ((int_64)$2 == (int_64)4520870461521434784) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)4520935773415407616) ){ goto $label$5 }
	*($3 + [484]) = [0]
	*($3 + [480]) = [14]
	*($3 + [168]) = *($3 + [480])
	CALL $145($5, ($3 + [168]))
	goto $label$4 
	
.LABEL $label$31
	if ( ((int_64)$2 == (int_64)-3917949595616280576) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-3910813326417854464) ){ goto $label$5 }
	*($3 + [588]) = [0]
	*($3 + [584]) = [15]
	*($3 + [64]) = *($3 + [584])
	CALL $146($5, ($3 + [64]))
	goto $label$4 
	
.LABEL $label$30
	if ( ((int_64)$2 == (int_64)8526760961502085120) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)8526761406165417984) ){ goto $label$5 }
	*($3 + [340]) = [0]
	*($3 + [336]) = [16]
	*($3 + [312]) = *($3 + [336])
	CALL $147($5, ($3 + [312]))
	goto $label$4 
	
.LABEL $label$29
	*($3 + [612]) = [0]
	*($3 + [608]) = [17]
	*($3 + [40]) = *($3 + [608])
	CALL $149($5, ($3 + [40]))
	goto $label$4 
	
.LABEL $label$28
	*($3 + [516]) = [0]
	*($3 + [512]) = [18]
	*($3 + [136]) = *($3 + [512])
	CALL $150($5, ($3 + [136]))
	goto $label$4 
	
.LABEL $label$27
	*($3 + [428]) = [0]
	*($3 + [424]) = [19]
	*($3 + [224]) = *($3 + [424])
	CALL $152($5, ($3 + [224]))
	goto $label$4 
	
.LABEL $label$26
	*($3 + [596]) = [0]
	*($3 + [592]) = [20]
	*($3 + [56]) = *($3 + [592])
	CALL $153($5, ($3 + [56]))
	goto $label$4 
	
.LABEL $label$25
	*($3 + [420]) = [0]
	*($3 + [416]) = [21]
	*($3 + [232]) = *($3 + [416])
	CALL $154($5, ($3 + [232]))
	goto $label$4 
	
.LABEL $label$24
	*($3 + [628]) = [0]
	*($3 + [624]) = [22]
	*($3 + [24]) = *($3 + [624])
	CALL $136($5, ($3 + [24]))
	goto $label$4 
	
.LABEL $label$23
	*($3 + [436]) = [0]
	*($3 + [432]) = [23]
	*($3 + [216]) = *($3 + [432])
	CALL $135($5, ($3 + [216]))
	goto $label$4 
	
.LABEL $label$22
	*($3 + [364]) = [0]
	*($3 + [360]) = [24]
	*($3 + [288]) = *($3 + [360])
	CALL $155($5, ($3 + [288]))
	goto $label$4 
	
.LABEL $label$21
	*($3 + [620]) = [0]
	*($3 + [616]) = [25]
	*($3 + [32]) = *($3 + [616])
	CALL $157($5, ($3 + [32]))
	goto $label$4 
	
.LABEL $label$20
	*($3 + [460]) = [0]
	*($3 + [456]) = [26]
	*($3 + [192]) = *($3 + [456])
	CALL $158($5, ($3 + [192]))
	goto $label$4 
	
.LABEL $label$19
	*($3 + [604]) = [0]
	*($3 + [600]) = [27]
	*($3 + [48]) = *($3 + [600])
	CALL $159($5, ($3 + [48]))
	goto $label$4 
	
.LABEL $label$18
	*($3 + [636]) = [0]
	*($3 + [632]) = [28]
	*($3 + [16]) = *($3 + [632])
	CALL $145($5, ($3 + [16]))
	goto $label$4 
	
.LABEL $label$17
	*($3 + [412]) = [0]
	*($3 + [408]) = [29]
	*($3 + [240]) = *($3 + [408])
	CALL $160($5, ($3 + [240]))
	goto $label$4 
	
.LABEL $label$16
	*($3 + [444]) = [0]
	*($3 + [440]) = [30]
	*($3 + [208]) = *($3 + [440])
	CALL $161($5, ($3 + [208]))
	goto $label$4 
	
.LABEL $label$15
	*($3 + [524]) = [0]
	*($3 + [520]) = [31]
	*($3 + [128]) = *($3 + [520])
	CALL $145($5, ($3 + [128]))
	goto $label$4 
	
.LABEL $label$14
	*($3 + [372]) = [0]
	*($3 + [368]) = [32]
	*($3 + [280]) = *($3 + [368])
	CALL $163($5, ($3 + [280]))
	goto $label$4 
	
.LABEL $label$13
	*($3 + [452]) = [0]
	*($3 + [448]) = [33]
	*($3 + [200]) = *($3 + [448])
	CALL $158($5, ($3 + [200]))
	goto $label$4 
	
.LABEL $label$12
	*($3 + [572]) = [0]
	*($3 + [568]) = [34]
	*($3 + [80]) = *($3 + [568])
	CALL $132($5, ($3 + [80]))
	goto $label$4 
	
.LABEL $label$11
	*($3 + [396]) = [0]
	*($3 + [392]) = [35]
	*($3 + [256]) = *($3 + [392])
	CALL $164($5, ($3 + [256]))
	goto $label$4 
	
.LABEL $label$10
	*($3 + [580]) = [0]
	*($3 + [576]) = [36]
	*($3 + [72]) = *($3 + [576])
	CALL $146($5, ($3 + [72]))
	goto $label$4 
	
.LABEL $label$9
	*($3 + [404]) = [0]
	*($3 + [400]) = [37]
	*($3 + [248]) = *($3 + [400])
	CALL $160($5, ($3 + [248]))
	goto $label$4 
	
.LABEL $label$8
	*($3 + [564]) = [0]
	*($3 + [560]) = [38]
	*($3 + [88]) = *($3 + [560])
	CALL $145($5, ($3 + [88]))
	goto $label$4 
	
.LABEL $label$7
	*($3 + [508]) = [0]
	*($3 + [504]) = [39]
	*($3 + [144]) = *($3 + [504])
	CALL $150($5, ($3 + [144]))
	goto $label$4 
	
.LABEL $label$6
	*($3 + [356]) = [0]
	*($3 + [352]) = [40]
	*($3 + [296]) = *($3 + [352])
	CALL $155($5, ($3 + [296]))
	goto $label$4 
	
.LABEL $label$5
	CALL prints([9750])
	CALL printui($2)
	
.LABEL $label$4
	CALL $165($5)
	CALL $301([0])
	$global$0 = ($3 + [976])
}

int_32 .FUNC $131 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $2
	*($0) = $1
	*($0 + [16]) = $1
	*($0 + [32]) = $1
	*($0 + [40]) = $1
	*($0 + [48]) = $1
	*($0 + [56]) = $1
	$4 = ($0 + [72])
	$5 = (int_64)7
	
.LOOP $label$1:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	*(($0 + [80])) = $1
	*(($0 + [72])) = $1
	*(($6 = ($0 + [88]))) = $1
	*(($0 + [96])) = $1
	*(($0 + [104])) = (int_64)-1
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = [0]
	*(($0 + [128])) = (int_64)6457483382686220288
	$7 = CALL db_find_i64($1, $1, (int_64)4986958867385548800, (int_64)6457483382686220288)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $68($6, $7) + [16]) == (int_32)$6), [9924])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($4)
	*($3 + [8]) = $4
	CALL $166($3, $6, $5, ($3 + [8]))
	
.LABEL $label$2
	$7 = ($0 + [136])
	$5 = (int_64)0
	$8 = (int_64)59
	$6 = [11114]
	$9 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$5 > (uint_64)(int_64)8) ){ goto $label$9 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$4 = ($4 + [-91])
	goto $label$7 
	
.LABEL $label$9
	$10 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$5
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$4 }
	*(($0 + [144])) = $1
	*(($0 + [136])) = $1
	*(($6 = ($0 + [152]))) = $1
	*(($0 + [160])) = $1
	*(($0 + [168])) = (int_64)-1
	*(($0 + [176])) = (int_64)0
	*(($0 + [184])) = [0]
	*(($0 + [192])) = $9
	$4 = CALL db_find_i64($1, $1, (int_64)4986958867385548800, $9)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*(CALL $68($6, $4) + [16]) == (int_32)$6), [9924])
	goto $label$10 
	
.LABEL $label$11
	$5 = *($7)
	*($3 + [8]) = $7
	CALL $166($3, $6, $5, ($3 + [8]))
	
.LABEL $label$10
	$7 = ($0 + [200])
	$5 = (int_64)0
	$8 = (int_64)59
	$6 = [11124]
	$9 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$17 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$4 = ($4 + [-91])
	goto $label$15 
	
.LABEL $label$17
	$10 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$13
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$12 }
	*(($0 + [208])) = $1
	*(($0 + [200])) = $1
	*(($6 = ($0 + [216]))) = $1
	*(($0 + [224])) = $1
	*(($0 + [232])) = (int_64)-1
	*(($0 + [240])) = (int_64)0
	*(($0 + [248])) = [0]
	*(($0 + [256])) = $9
	$4 = CALL db_find_i64($1, $1, (int_64)4986958867385548800, $9)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$19 }
	CALL eosio_assert(((int_32)*(CALL $68($6, $4) + [16]) == (int_32)$6), [9924])
	goto $label$18 
	
.LABEL $label$19
	$5 = *($7)
	*($3 + [8]) = $7
	CALL $166($3, $6, $5, ($3 + [8]))
	
.LABEL $label$18
	*($0 + [264]) = $1
	*(($0 + [272])) = $1
	*(($0 + [280])) = $1
	*(($0 + [288])) = $1
	*(($0 + [296])) = (int_64)-1
	*(($0 + [304])) = (int_64)0
	*(($0 + [312])) = [0]
	*(($0 + [320])) = $2
	*(($6 = CALL _Znwj([12])) + [4]) = [0]
	*($6) = [11144]
	*($6 + [8]) = [0]
	*($0 + [64]) = $6
	CALL $167($6)
	*(($6 = CALL _Znwj([12])) + [4]) = [0]
	*($6) = [11304]
	*($6 + [8]) = [0]
	*($0 + [68]) = $6
	CALL $171(CALL $170(CALL $169(CALL $168($6))))
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $305($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1398362884
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [8204])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [24]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [9998])
	$1 = (($3 + [24]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [9998])
	CALL memcpy((($3 + [24]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $308($6)
	
.LABEL $label$8
	*(($2 = (($3 + [48]) + [8]))) = *(($1 + [8]))
	*($3 + [48]) = *($1)
	$8 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($2)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$10 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [64])
	*($3 + [8]) = $10
	*($3 + [80]) = $10
	CALL void $1((int_32 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $133 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $305($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8204])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $172(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $308($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $199(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $305($5)
	CALL read_action_data($2, $5)
	CALL $308($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $305($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [8]), $1, [8])
	*($3 + [52]) = ($1 + [8])
	CALL $176(($3 + [48]), (($3 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $308($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $177(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $137 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

void .FUNC $260 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [112])
	$global$0 = $3
	$4 = *($2 + [8])
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [8192]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$6 }
	$9 = *($7)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$9 = ($9 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$6 = ((int_64)$6 + (int_64)4294967291)
	$8 = ((int_64)$10 | (int_64)$8)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$4 != (int_64)$8) ){ goto $label$9 }
	$5 = *($2)
	if ( ((int_64)*(*($1)) != (int_64)$5) ){ goto $label$8 }
	CALL prints([11148])
	*($0 + [8]) = [0]
	$7 = *($0 + [4])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL $173($7, $1, $2)
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$9
	CALL prints([11148])
	*($0 + [8]) = [0]
	$7 = *($0 + [4])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL $173($7, $1, $2)
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*(*($1 + [4])) != (int_64)$5) ){ goto $label$20 }
	if ( ((int_64)*(*($1 + [8]) + [8]) != (int_64)1397703940) ){ goto $label$19 }
	CALL prints([11268])
	*($3 + [80]) = *(*($1))
	*($3 + [72]) = *(*(($1 + [4])))
	$7 = *(($1 + [8]))
	*((($3 + [56]) + [8])) = *(($7 + [8]))
	*($3 + [56]) = *($7)
	$9 = ($9 & [1])
	$9 = *($3 + [40])
	$7 = CALL $292(($3 + [40]), *($1 + [12]))
	if ( (( *($7 + [4]) ? uint_32($9 >> [1]) : $9 ) <= [5]) ){ goto $label$10 }
	$9 = ( *($7 + [8]) ? ($7 + [1]) : $9 )
	$11 = *($9)
	if ( ((int_32)$11 == (int_32)[64]) ){ goto $label$21 }
	if ( ((int_32)$11 != (int_32)[35]) ){ goto $label$10 }
	
.LABEL $label$21
	if ( ((int_32)*($9 + [1]) != (int_32)[91]) ){ goto $label$10 }
	if ( ((int_32)*($9 + [2]) == (int_32)[93]) ){ goto $label$10 }
	$9 = CALL $299($7, [58], [0])
	$12 = CALL $299($7, [93], [0])
	*($3 + [32]) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [8]) = (int_64)0
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$18 }
	CALL $293(($3 + [88]), $7, [2], ($9 + [-2]), $7)
	if ( (*($3 + [24]) & [1]) ){ goto $label$17 }
	*($3 + [24]) = [0]
	goto $label$16 
	
.LABEL $label$20
	CALL prints([11148])
	*($0 + [8]) = [0]
	$7 = *($0 + [4])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL $173($7, $1, $2)
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$19
	CALL prints([11148])
	*($0 + [8]) = [0]
	$7 = *($0 + [4])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL $173($7, $1, $2)
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$18
	CALL $293(($3 + [88]), $7, [2], ($12 + [-2]), $7)
	if ( (*($3 + [24]) & [1]) ){ goto $label$15 }
	*($3 + [24]) = [0]
	goto $label$14 
	
.LABEL $label$17
	*(*(($3 + [32]))) = [0]
	*($3 + [28]) = [0]
	
.LABEL $label$16
	CALL $296(($3 + [24]), [0])
	*((($3 + [24]) + [8])) = *((($3 + [88]) + [8]))
	*($3 + [24]) = *($3 + [88])
	$11 = ($9 + [1])
	$9 = CALL $299($7, [44], $11)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$22 }
	if ( ((uint_32)$9 >= (uint_32)$12) ){ goto $label$22 }
	$13 = (($3 + [8]) + [8])
	
.LOOP $label$23:
	$14 = CALL $293(($3 + [88]), $7, $11, ($9 - $11), $7)
	$11 = *($3 + [12])
	if ( ((uint_32)$11 >= (uint_32)*($13)) ){ goto $label$25 }
	*($11) = *($3 + [88])
	$11 = (($3 + [88]) + [8])
	*(($11 + [8])) = *($11)
	*($11) = [0]
	*($3 + [88]) = (int_64)0
	*($3 + [12]) = (*($3 + [12]) + [12])
	$11 = ($9 + [1])
	$9 = CALL $299($7, [44], $11)
	if ( ((int_32)$9 != (int_32)[-1]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$25
	CALL $261(($3 + [8]), $14)
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*((($3 + [88]) + [8])))
	
.LABEL $label$26
	$11 = ($9 + [1])
	$9 = CALL $299($7, [44], $11)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$22 }
	
.LABEL $label$24
	if ( ($9 <= $12) ){ goto $label$23 }
	
.LABEL $label$22
	$9 = CALL $293(($3 + [88]), $7, $11, ($12 - $11), $7)
	$11 = *($3 + [12])
	if ( ((uint_32)$11 >= (uint_32)*((($3 + [8]) + [8]))) ){ goto $label$27 }
	*($11) = *($3 + [88])
	*(($11 + [8])) = *((($3 + [88]) + [8]))
	*($9 + [8]) = [0]
	*($9) = (int_64)0
	*($3 + [12]) = (*($3 + [12]) + [12])
	$9 = *($2 + [68])
	if ( $9 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$27
	CALL $261(($3 + [8]), $9)
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($9 + [8]))
	$9 = *($2 + [68])
	if ( $9 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$15
	*(*(($3 + [32]))) = [0]
	*($3 + [28]) = [0]
	
.LABEL $label$14
	CALL $296(($3 + [24]), [0])
	*((($3 + [24]) + [8])) = *((($3 + [88]) + [8]))
	*($3 + [24]) = *($3 + [88])
	
.LABEL $label$13
	$9 = *($2 + [68])
	if ( ($9 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	*($3 + [92]) = ($3 + [72])
	*($3 + [88]) = ($3 + [80])
	*($3 + [96]) = ($3 + [56])
	*($3 + [100]) = ($3 + [24])
	*($3 + [104]) = ($3 + [8])
	CALL $262($9, ($3 + [88]), $2)
	
.LABEL $label$11
	$14 = *($3 + [8])
	if ( ($14 == 0) ){ goto $label$28 }
	$11 = *($3 + [12])
	if ( ((int_32)$11 == (int_32)$14) ){ goto $label$30 }
	
.LOOP $label$31:
	$9 = ($11 + [-12])
	if ( ((*($9) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*(($11 + [-4])))
	
.LABEL $label$32
	$11 = $9
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$31 }
	$9 = *($3 + [8])
	goto $label$29 
	
.LABEL $label$30
	$9 = $14
	
.LABEL $label$29
	*($3 + [12]) = $14
	CALL _ZdlPv($9)
	
.LABEL $label$28
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$10
	CALL prints([11148])
	*($0 + [8]) = [0]
	$9 = *($0 + [4])
	if ( ($9 == 0) ){ goto $label$33 }
	CALL $173($9, $1, $2)
	
.LABEL $label$33
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($7 + [8]))
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [112])
}

void .FUNC $261 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $300($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $213 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	$1 = *($2)
	$4 = *(*($2 + [4]))
	*($0) = *($4 + [40])
	*(($5 = ($0 + [8]))) = *(($4 + [48]))
	CALL eosio_assert([1], [9828])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($3 | [8]), $5, [4])
	$6 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)6820293285731368960, *(*($2 + [8])), $6, $3, [12])
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $262 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL prints([11160])
	*($0 + [8]) = [1]
	CALL void $0((int_32 $1), (int_32 $2), (int_32 *(*($0))))
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$2 = *($0 + [8])
	$0 = CALL $302([11175])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*($3) = ($0 << [1])
	$4 = ($3 | [1])
	$1 = $4
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($3) = ($4 | [1])
	*($3 + [8]) = $1
	*($3 + [4]) = $0
	$4 = ($3 | [1])
	
.LABEL $label$3
	CALL memcpy($1, [11175], $0)
	
.LABEL $label$2
	*(($1 + $0)) = [0]
	CALL eosio_assert((((int_32)$2 ^ (int_32)[1]) & [255]), ( *($3 + [8]) ? $4 : (*($3) & [1]) ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$5
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $291($3)
}

int_32 .FUNC $283 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9768])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8204])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $303 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $302 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $301 (int_32 $0)
{
}

void .FUNC $263 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL prints([11148])
	*($0 + [8]) = [0]
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $262($0, $1, $2)
	
.LABEL $label$1
}

int_32 .FUNC $307 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11536]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11540])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11536]) = [1]
	$2 = ($2 << [16])
	*([0] + [11540]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11540])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11540]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11536]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11536]) = [1]
	$3 = ($3 << [16])
	*([0] + [11540]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11540])
	
.LABEL $label$10
	*([0] + [11540]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $306 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $307($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [19940])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $305 (int_32 $0)
{
	return CALL $306([11544], $0)
}

int_32 .FUNC $304 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $308 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19928])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19736]
	$3 = (((int_32)$1 * (int_32)[12]) + [19736])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $265 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *($1 + [8])
	if ( $5 ){ goto $label$1 }
	*(($5 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*(($1 + [8])) = $5
	$6 = *($1)
	*($5) = $6
	*($5 + [8]) = $6
	*($5 + [16]) = $6
	*($5 + [24]) = $6
	
.LABEL $label$1
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$1 = CALL $302($3)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$5 }
	*($4) = ($1 << [1])
	$7 = ($4 | [1])
	if ( $1 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$8 = (($1 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($4) = ($8 | [1])
	*($4 + [8]) = $7
	*($4 + [4]) = $1
	
.LABEL $label$4
	CALL memcpy($7, $3, $1)
	
.LABEL $label$3
	*(($7 + $1)) = [0]
	CALL $52($0, $5, $2, $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$6
	$global$0 = ($4 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $291($4)
}

void .FUNC $208 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [10030])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([40])) + [16]) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8204])
	*($5 + [24]) = $1
	CALL $209(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$7 = *($5 + [28])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $206(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

void .FUNC $209 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4 + [40])
	*(($5 = ($1 + [16]))) = *(($4 + [56]))
	*(($6 = ($1 + [8]))) = *(($4 + [48]))
	CALL eosio_assert([1], [9828])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($2 | [8]), $6, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($2 + [16]), $5, [8])
	$7 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)6820292617327083520, *(*($0 + [8])), $7, $2, [24])
	if ( (uint_64)($7 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $202 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9828])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9828])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9828])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $203 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9828])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9828])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $200 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9828])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9828])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9828])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9828])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9828])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $201(*($1), ($0 + [40]))
}

int_32 .FUNC $201 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9828])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9828])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $206 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $300($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $207 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10116])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10162])
	$5 = *($1)
	$3 = *($3)
	*($1) = *($3 + [40])
	*(($6 = ($1 + [8]))) = *(($3 + [48]))
	*(($7 = ($1 + [16]))) = *(($3 + [56]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10213])
	CALL eosio_assert([1], [9828])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($4 | [8]), $6, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($4 + [16]), $7, [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $204 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9828])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9828])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9828])
	CALL memcpy(*($0 + [4]), ($3 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9828])
	CALL memcpy(*($0 + [4]), ($3 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $201(*($1), ($3 + [32]))
}

int_32 .FUNC $205 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)0
	*(($3 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [9768])
	$4 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8204])
	*($0 + [24]) = $1
	$3 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy($0, *($3 + [4]), [8])
	$6 = (*($3 + [4]) + [8])
	*($3 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $6) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$6 = (*($3 + [4]) + [8])
	*($3 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $6) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $282 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9768])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8204])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $181 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [8]))
	*($2 + [32]) = *($1)
	$1 = CALL $292(($2 + [16]), ($1 + [16]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($5 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$4 = CALL $292(($2 + [64]), $1)
	*(($2 + [8])) = *($5)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $2), (int_32 $4), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $129 (int_32 $0)
{
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [10336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10381])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10431])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $286 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $176(*($1), ($0 + [40]))
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $305($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11532])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $305($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $8 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	$5 = ($global$0 - [176])
	$global$0 = $5
	$6 = [0]
	*(($5 + [80])) = [0]
	*($5 + [56]) = $2
	*($5 + [64]) = (int_64)-1
	*($5 + [72]) = (int_64)0
	$7 = *($1)
	*($5 + [48]) = $7
	$8 = [0]
	$9 = *($3 + [8])
	$10 = CALL db_find_i64($7, $2, (int_64)-4994488546135575680, (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_32)$10) < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $7(($5 + [48]), $10)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($5 + [48])), [9924])
	
.LABEL $label$1
	CALL eosio_assert([1], [9768])
	$7 = (int_64)5462355
	
.LOOP $label$3:
	$11 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $12
	$11 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$6 < (int_32)[6])
	$13 = ($6 + [1])
	$6 = $13
	if ( $10 ){ goto $label$5 }
	$11 = [1]
	$6 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert($11, [8204])
	*(($6 = (($5 + [32]) + [8]))) = *(($3 + [8]))
	*($5 + [32]) = *($3)
	if ( ($8 == 0) ){ goto $label$7 }
	CALL eosio_assert([1], [10081])
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($5 + [48])), [10116])
	CALL eosio_assert(((int_64)*($5 + [48]) == (int_64)CALL $fimport$3()), [10162])
	$7 = *($8 + [8])
	CALL eosio_assert(((int_64)$9 == (int_64)$7), [10748])
	$12 = ((int_64)*($8) + (int_64)*($3))
	*($8) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [10791])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [10810])
	$14 = *($8)
	$9 = *($8 + [8])
	*($6) = $9
	*($5 + [32]) = $14
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($8 + [8]) >> (uint_64)(int_64)8)), [10213])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($5 + [112]), $8, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy((($5 + [112]) | [8]), ($8 + [8]), [8])
	CALL db_update_i64(*($8 + [20]), (int_64)0, ($5 + [112]), [16])
	$6 = (($5 + [48]) + [16])
	if ( (uint_64)($7 <= *($6)) ){ goto $label$6 }
	*($6) = ((int_64)$7 + (int_64)1)
	goto $label$6 
	
.LABEL $label$7
	$15 = *($1)
	CALL eosio_assert(((int_64)*($5 + [48]) == (int_64)CALL $fimport$3()), [10030])
	*(($8 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($8) = (int_64)0
	CALL eosio_assert([1], [9768])
	$11 = ($8 + [8])
	$7 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$12 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$7 = $12
	$10 = [1]
	$13 = $6
	$6 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$7 = $12
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$6 < (int_32)[6])
	$13 = ($6 + [1])
	$6 = $13
	if ( $10 ){ goto $label$12 }
	$10 = [1]
	$6 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$10 = [0]
	
.LABEL $label$8
	CALL eosio_assert($10, [8204])
	*($8 + [16]) = ($5 + [48])
	$7 = *(($3 + [8]))
	*(($6 = ($8 + [8]))) = $7
	$12 = *($3)
	*($8) = $12
	*((($5 + [32]) + [8])) = $7
	*($5 + [32]) = $12
	CALL eosio_assert([1], [9828])
	CALL memcpy(($5 + [112]), $8, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy((($5 + [112]) | [8]), $11, [8])
	$7 = (uint_64)*($6) >> (uint_64)(int_64)8
	$10 = CALL db_store_i64(*((($5 + [48]) + [8])), (int_64)-4994488546135575680, $15, $7), ($5 + [112]), [16]
	*($8 + [20]) = $10)
	$13 = (($5 + [48]) + [16])
	if ( (uint_64)($7 <= *($13)) ){ goto $label$13 }
	*($13) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$13
	*($5 + [96]) = $8
	$7 = (uint_64)*($6) >> (uint_64)(int_64)8
	*($5 + [112]) = $7)
	*($5 + [92]) = $10
	$13 = ($5 + [76])
	$6 = *($13)
	if ( ((uint_32)$6 >= (uint_32)*(($5 + [80]))) ){ goto $label$16 }
	*($6 + [8]) = $7
	*($6 + [16]) = $10
	*($5 + [96]) = [0]
	*($6) = $8
	*($13) = ($6 + [24])
	$6 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( $6 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $9(($5 + [72]), ($5 + [96]), ($5 + [112]), ($5 + [92]))
	$6 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( ($6 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv($6)
	
.LABEL $label$14
	$14 = (int_64)0
	
.LABEL $label$6
	*(($6 = (($5 + [16]) + [8]))) = *((($5 + [32]) + [8]))
	*($5 + [16]) = *($5 + [32])
	$13 = CALL $292($5, $4)
	*((($5 + [96]) + [8])) = *($6)
	*($5 + [96]) = *($5 + [16])
	$16 = *($1)
	$7 = (int_64)0
	$15 = (int_64)59
	$6 = [9817]
	$17 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$22 }
	$10 = *($6)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$10 = ($10 + [-91])
	goto $label$20 
	
.LABEL $label$22
	$12 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$18
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$17 = ((int_64)$12 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)4294967291)
	if ( ((int_64)$15 != (int_64)55834574842) ){ goto $label$17 }
	*(($5 + [128])) = $9
	*(($5 + [144])) = *(($5 + [104]))
	*($5 + [120]) = $14
	*($5 + [112]) = $2
	*($5 + [136]) = *($5 + [96])
	CALL $292(($5 + [152]), $13)
	CALL $6($16, $16, $17, ($5 + [112]))
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($5 + [160])))
	
.LABEL $label$23
	if ( ((*($13) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($13 + [8]))
	
.LABEL $label$24
	*($0 + [8]) = $9
	*($0) = $14
	*($0 + [16]) = *($5 + [32])
	*(($0 + [24])) = *(($5 + [40]))
	$13 = *($5 + [72])
	if ( ($13 == 0) ){ goto $label$25 }
	$8 = ($5 + [76])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$27 }
	
.LOOP $label$28:
	$6 = ($6 + [-24])
	$10 = *($6)
	*($6) = [0]
	if ( ($10 == 0) ){ goto $label$29 }
	CALL _ZdlPv($10)
	
.LABEL $label$29
	if ( ((int_32)$13 != (int_32)$6) ){ goto $label$28 }
	$6 = *(($5 + [72]))
	goto $label$26 
	
.LABEL $label$27
	$6 = $13
	
.LABEL $label$26
	*($8) = $13
	CALL _ZdlPv($6)
	
.LABEL $label$25
	$global$0 = ($5 + [176])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $300($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $123 (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth($2)
	*(($3 + [24])) = $1
	*(($3 + [32])) = (int_64)-1
	*(($4 = ($3 + [40]))) = (int_64)0
	*(($3 + [48])) = [0]
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $0
	$5 = CALL db_lowerbound_i64($0, $1, (int_64)3617214701426458624, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = ($3 + [16])
	$7 = CALL $59($6, $5)
	
.LOOP $label$2:
	CALL eosio_assert([1], [10272])
	CALL eosio_assert([1], [10306])
	$5 = [0]
	$8 = CALL db_next_i64(*($7 + [24]), ($3 + [56]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $59($6, $8)
	
.LABEL $label$3
	CALL $128($6, $7)
	$7 = $5
	if ( $5 ){ goto $label$2 }
	
.LABEL $label$1
	$6 = *($4)
	if ( ($6 == 0) ){ goto $label$4 }
	$8 = ($3 + [44])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$8 }
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($7 + [16])))
	
.LABEL $label$9
	CALL _ZdlPv($7)
	
.LABEL $label$8
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$7 }
	$5 = *(($3 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$5 = $6
	
.LABEL $label$5
	*($8) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($3 + [64])
}

void .FUNC $122 (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth($2)
	*(($3 + [24])) = $1
	*(($3 + [32])) = (int_64)-1
	*(($4 = ($3 + [40]))) = (int_64)0
	*(($3 + [48])) = [0]
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $0
	$5 = CALL db_lowerbound_i64($0, $1, (int_64)6457483382686220288, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = ($3 + [16])
	$7 = CALL $92($6, $5)
	
.LOOP $label$2:
	CALL eosio_assert([1], [10272])
	CALL eosio_assert([1], [10306])
	$5 = [0]
	$8 = CALL db_next_i64(*($7 + [40]), ($3 + [56]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $92($6, $8)
	
.LABEL $label$3
	CALL $127($6, $7)
	$7 = $5
	if ( $5 ){ goto $label$2 }
	
.LABEL $label$1
	$8 = *($4)
	if ( ($8 == 0) ){ goto $label$4 }
	$4 = ($3 + [44])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$8 }
	$6 = *($7 + [24])
	if ( ($6 == 0) ){ goto $label$9 }
	*(($7 + [28])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	CALL _ZdlPv($7)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$7 }
	$5 = *(($3 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$5 = $8
	
.LABEL $label$5
	*($4) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($3 + [64])
}

void .FUNC $121 (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth($2)
	*(($3 + [24])) = $1
	*(($3 + [32])) = (int_64)-1
	*(($4 = ($3 + [40]))) = (int_64)0
	*(($3 + [48])) = [0]
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $0
	$5 = CALL db_lowerbound_i64($0, $1, (int_64)7394089168667672576, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = ($3 + [16])
	$7 = CALL $125($6, $5)
	
.LOOP $label$2:
	CALL eosio_assert([1], [10272])
	CALL eosio_assert([1], [10306])
	$5 = [0]
	$8 = CALL db_next_i64(*($7 + [52]), ($3 + [56]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $125($6, $8)
	
.LABEL $label$3
	CALL $126($6, $7)
	$7 = $5
	if ( $5 ){ goto $label$2 }
	
.LABEL $label$1
	$8 = *($4)
	if ( ($8 == 0) ){ goto $label$4 }
	$4 = ($3 + [44])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$8 }
	$6 = *($5 + [32])
	if ( ($6 == 0) ){ goto $label$9 }
	*(($5 + [36])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	$5 = *(($3 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$5 = $8
	
.LABEL $label$5
	*($4) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($3 + [64])
}

void .FUNC $120 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	$4 = CALL $302([9610])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [32]) = ($4 << [1])
	$5 = (($3 + [32]) | [1])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [32]) = ($6 | [1])
	*($3 + [40]) = $5
	*($3 + [36]) = $4
	
.LABEL $label$7
	CALL memcpy($5, [9610], $4)
	
.LABEL $label$6
	$7 = [0]
	*(($5 + $4)) = [0]
	$10 = ($4 & [1])
	$4 = *($3 + [32])
	$6 = ($4 & [1])
	$4 = *($1)
	$8 = uint_32($4 >> [1])
	$9 = ( *($1 + [4]) ? $8 : $6 )
	if ( ((int_32)$9 != (int_32)( *($3 + [36]) ? uint_32($4 >> [1]) : $10 )) ){ goto $label$11 }
	$4 = ( *($3 + [40]) ? (($3 + [32]) | [1]) : $10 )
	$5 = ($1 + [1])
	if ( $6 ){ goto $label$13 }
	if ( ($9 == 0) ){ goto $label$12 }
	$7 = [0]
	$6 = ([0] - $8)
	
.LOOP $label$14:
	if ( ((int_32)*($5) != (int_32)*($4)) ){ goto $label$11 }
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	$6 = ($6 + [1])
	if ( $6 ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ($9 == 0) ){ goto $label$12 }
	$7 = (CALL $303(( *($1 + [8]) ? $5 : $6 ), $4, $9) == 0)
	if ( (*($3 + [32]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$7 = [1]
	
.LABEL $label$11
	if ( ($10 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($3 + [40]))
	
.LABEL $label$9
	if ( ($7 == 0) ){ goto $label$15 }
	$11 = *($0)
	CALL $121($11, $11, $11)
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$15
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	$4 = CALL $302([9616])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$18 }
	*($3 + [32]) = ($4 << [1])
	$5 = (($3 + [32]) | [1])
	if ( $4 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [32]) = ($6 | [1])
	*($3 + [40]) = $5
	*($3 + [36]) = $4
	
.LABEL $label$17
	CALL memcpy($5, [9616], $4)
	
.LABEL $label$16
	$7 = [0]
	*(($5 + $4)) = [0]
	$10 = ($4 & [1])
	$4 = *($3 + [32])
	$6 = ($4 & [1])
	$4 = *($1)
	$8 = uint_32($4 >> [1])
	$9 = ( *(($1 + [4])) ? $8 : $6 )
	if ( ((int_32)$9 != (int_32)( *($3 + [36]) ? uint_32($4 >> [1]) : $10 )) ){ goto $label$21 }
	$4 = ( *($3 + [40]) ? (($3 + [32]) | [1]) : $10 )
	$5 = ($1 + [1])
	if ( $6 ){ goto $label$23 }
	if ( ($9 == 0) ){ goto $label$22 }
	$7 = [0]
	$6 = ([0] - $8)
	
.LOOP $label$24:
	if ( ((int_32)*($5) != (int_32)*($4)) ){ goto $label$21 }
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	$6 = ($6 + [1])
	if ( $6 ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	if ( ($9 == 0) ){ goto $label$22 }
	$7 = (CALL $303(( *($1 + [8]) ? $5 : $6 ), $4, $9) == 0)
	if ( (*($3 + [32]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$7 = [1]
	
.LABEL $label$21
	if ( ($10 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*($3 + [40]))
	
.LABEL $label$19
	if ( ($7 == 0) ){ goto $label$25 }
	$4 = CALL $62(($0 + [72]))
	$11 = *($0)
	CALL $122($11, (CASTING uint_64)(uint_32 $4), $11)
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$25
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	$4 = CALL $302([9622])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$28 }
	*($3 + [32]) = ($4 << [1])
	$5 = (($3 + [32]) | [1])
	if ( $4 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [32]) = ($6 | [1])
	*($3 + [40]) = $5
	*($3 + [36]) = $4
	
.LABEL $label$27
	CALL memcpy($5, [9622], $4)
	
.LABEL $label$26
	$7 = [0]
	*(($5 + $4)) = [0]
	$10 = ($4 & [1])
	$4 = *($3 + [32])
	$6 = ($4 & [1])
	$4 = *($1)
	$8 = uint_32($4 >> [1])
	$9 = ( *(($1 + [4])) ? $8 : $6 )
	if ( ((int_32)$9 != (int_32)( *($3 + [36]) ? uint_32($4 >> [1]) : $10 )) ){ goto $label$31 }
	$4 = ( *($3 + [40]) ? (($3 + [32]) | [1]) : $10 )
	$5 = ($1 + [1])
	if ( $6 ){ goto $label$33 }
	if ( ($9 == 0) ){ goto $label$32 }
	$7 = [0]
	$6 = ([0] - $8)
	
.LOOP $label$34:
	if ( ((int_32)*($5) != (int_32)*($4)) ){ goto $label$31 }
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	$6 = ($6 + [1])
	if ( $6 ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	if ( ($9 == 0) ){ goto $label$32 }
	$7 = (CALL $303(( *($1 + [8]) ? $5 : $6 ), $4, $9) == 0)
	if ( (*($3 + [32]) & [1]) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$7 = [1]
	
.LABEL $label$31
	if ( ($10 == 0) ){ goto $label$29 }
	
.LABEL $label$30
	CALL _ZdlPv(*($3 + [40]))
	
.LABEL $label$29
	if ( ($7 == 0) ){ goto $label$35 }
	$11 = *($0)
	CALL $123($11, $11, $11)
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$35
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	$4 = CALL $302([8766])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$38 }
	*($3 + [32]) = ($4 << [1])
	$5 = (($3 + [32]) | [1])
	if ( $4 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [32]) = ($6 | [1])
	*($3 + [40]) = $5
	*($3 + [36]) = $4
	
.LABEL $label$37
	CALL memcpy($5, [8766], $4)
	
.LABEL $label$36
	$7 = [0]
	*(($5 + $4)) = [0]
	$10 = ($4 & [1])
	$4 = *($3 + [32])
	$6 = ($4 & [1])
	$4 = *($1)
	$8 = uint_32($4 >> [1])
	$9 = ( *(($1 + [4])) ? $8 : $6 )
	if ( ((int_32)$9 != (int_32)( *($3 + [36]) ? uint_32($4 >> [1]) : $10 )) ){ goto $label$41 }
	$4 = ( *($3 + [40]) ? (($3 + [32]) | [1]) : $10 )
	$5 = ($1 + [1])
	if ( $6 ){ goto $label$43 }
	if ( ($9 == 0) ){ goto $label$42 }
	$7 = [0]
	$6 = ([0] - $8)
	
.LOOP $label$44:
	if ( ((int_32)*($5) != (int_32)*($4)) ){ goto $label$41 }
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	$6 = ($6 + [1])
	if ( $6 ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	if ( ($9 == 0) ){ goto $label$42 }
	$7 = (CALL $303(( *($1 + [8]) ? $5 : $6 ), $4, $9) == 0)
	if ( (*($3 + [32]) & [1]) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$7 = [1]
	
.LABEL $label$41
	if ( ($10 == 0) ){ goto $label$39 }
	
.LABEL $label$40
	CALL _ZdlPv(*($3 + [40]))
	
.LABEL $label$39
	if ( ($7 == 0) ){ goto $label$50 }
	*($3 + [24]) = (int_64)1397703940
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$6 = ($0 + [264])
	$11 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$51:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$49 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$52 }
	$11 = $12
	$5 = [1]
	$1 = $4
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$51 }
	goto $label$48 
	
.LABEL $label$52
	$11 = $12
	
.LOOP $label$53:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$49 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$1 = ($4 + [1])
	$4 = $1
	if ( $5 ){ goto $label$53 }
	$5 = [1]
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$51 }
	goto $label$48 
	
.LABEL $label$50
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	$4 = CALL $302([9547])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$47 }
	*($3 + [32]) = ($4 << [1])
	$5 = (($3 + [32]) | [1])
	if ( $4 ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$49
	$5 = [0]
	
.LABEL $label$48
	CALL eosio_assert($5, [8204])
	*(($3 + [8])) = *((($3 + [16]) + [8]))
	*($3) = *($3 + [16])
	CALL $124($6, $2, $3)
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$47
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [32]) = ($6 | [1])
	*($3 + [40]) = $5
	*($3 + [36]) = $4
	
.LABEL $label$46
	CALL memcpy($5, [9547], $4)
	
.LABEL $label$45
	*(($5 + $4)) = [0]
	$4 = ($4 & [1])
	$4 = *($3 + [32])
	$6 = ($4 & [1])
	$4 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($4 >> [1]) : $6 )
	if ( ((int_32)$5 != (int_32)( *($3 + [36]) ? uint_32($4 >> [1]) : $4 )) ){ goto $label$54 }
	if ( ($6 == 0) ){ goto $label$54 }
	if ( ($5 == 0) ){ goto $label$54 }
	CALL $303(*($1 + [8]), ( *($3 + [40]) ? (($3 + [32]) | [1]) : $4 ), $5)
	$4 = (*($3 + [32]) & [1])
	
.LABEL $label$54
	if ( ($4 == 0) ){ goto $label$55 }
	CALL _ZdlPv(*($3 + [40]))
	
.LABEL $label$55
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$5
	CALL $291(($3 + [32]))
	
.LABEL $label$4
	CALL $291(($3 + [32]))
	
.LABEL $label$3
	CALL $291(($3 + [32]))
	
.LABEL $label$2
	CALL $291(($3 + [32]))
	
.LABEL $label$1
	CALL $291(($3 + [32]))
}

void .FUNC $2 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *(($0 + [8]))
	*((($2 + [32]) + [8])) = $3
	$4 = *($0)
	*(($2 + [8])) = $3
	*($2 + [32]) = $4
	*($2) = $4
	CALL $1($2)
	*((($2 + [16]) + [8])) = [0]
	*($2 + [16]) = (int_64)0
	$5 = CALL $302([8274])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$5 }
	*($2 + [16]) = ($5 << [1])
	$6 = (($2 + [16]) | [1])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($2 + [16]) = ($7 | [1])
	*($2 + [24]) = $6
	*($2 + [20]) = $5
	
.LABEL $label$4
	CALL memcpy($6, [8274], $5)
	
.LABEL $label$3
	*(($6 + $5)) = [0]
	$5 = CALL $292(($2 + [48]), ($2 + [16]))
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)$1), ( *($5 + [8]) ? ($5 + [1]) : (*($2 + [48]) & [1]) ))
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	if ( (*($2 + [16]) & [1]) ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$7
	CALL _ZdlPv(*(($5 + [8])))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$6
	CALL _ZdlPv(*($2 + [24]))
	$global$0 = ($2 + [64])
	return (unreachable)
	
.LABEL $label$2
	CALL $291(($2 + [16]))
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [10336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10381])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10431])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [32])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	$8 = *($5 + [32])
	if ( ($8 == 0) ){ goto $label$14 }
	*(($5 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [52]))
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9975])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $305($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [48]) = $0
	CALL $227(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $228(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $308($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $124 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth(*($0 + [56]))
	*(($3 + [72])) = (int_64)0
	*(($3 + [80])) = (int_64)1398362884
	$4 = [0]
	*($3 + [24]) = [0]
	*($3 + [56]) = $1
	*($3 + [32]) = *($0)
	*($3 + [40]) = *($0 + [8])
	*($3 + [48]) = *($0 + [56])
	CALL eosio_assert([1], [9768])
	$5 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8204])
	*(($3 + [104])) = (int_64)-1
	*(($4 = ($3 + [112]))) = (int_64)0
	*(($3 + [120])) = [0]
	*(($3 + [96])) = *(($0 + [8]))
	*($3 + [88]) = *($0)
	CALL $49(($3 + [24]))
	$5 = *(($2 + [8]))
	*((($3 + [8]) + [8])) = $5
	$6 = *($2)
	*(($3 + [72])) = $6
	*(($3 + [80])) = $5
	*($3 + [64]) = $1
	*($3 + [25]) = [1]
	*($3 + [8]) = $6
	CALL $50(($3 + [24]))
	$8 = *($4)
	if ( ($8 == 0) ){ goto $label$6 }
	$0 = ($3 + [116])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($3 + [112]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $8
	
.LABEL $label$7
	*($0) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$global$0 = ($3 + [128])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = [0]
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	*(($4 + [184])) = [0]
	*($4 + [176]) = (int_64)0
	$5 = CALL $302([8204])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$10 }
	*($4 + [176]) = ($5 << [1])
	$11 = (($4 + [176]) | [1])
	$10 = $11
	if ( $5 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$11 = (($5 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($4 + [176]) = ($11 | [1])
	*($4 + [184]) = $10
	*($4 + [180]) = $5
	$11 = (($4 + [176]) | [1])
	
.LABEL $label$9
	CALL memcpy($10, [8204], $5)
	
.LABEL $label$8
	*(($10 + $5)) = [0]
	CALL eosio_assert($9, ( *($4 + [184]) ? $11 : (*($4 + [176]) & [1]) ))
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [184])))
	
.LABEL $label$11
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$13 }
	$11 = uint_32($5 >> [1])
	goto $label$12 
	
.LABEL $label$13
	$11 = *($3 + [4])
	
.LABEL $label$12
	*(($4 + [168])) = [0]
	*($4 + [160]) = (int_64)0
	$9 = CALL $302([8403])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$16 }
	*($4 + [160]) = ($9 << [1])
	$12 = (($4 + [160]) | [1])
	$10 = $12
	if ( $9 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$5 = (($9 + [16]) & [-16])
	$10 = CALL _Znwj($5)
	*($4 + [160]) = ($5 | [1])
	*($4 + [168]) = $10
	*($4 + [164]) = $9
	$12 = (($4 + [160]) | [1])
	
.LABEL $label$15
	CALL memcpy($10, [8403], $9)
	
.LABEL $label$14
	$5 = [0]
	*(($10 + $9)) = [0]
	CALL eosio_assert(($11 <= [257]), ( *($4 + [168]) ? $12 : (*($4 + [160]) & [1]) ))
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($4 + [168])))
	
.LABEL $label$17
	*(($4 + [152])) = [0]
	*($4 + [136]) = (int_64)-1
	*($4 + [144]) = (int_64)0
	$7 = *($0)
	*($4 + [120]) = $7
	*($4 + [128]) = $7
	$9 = CALL db_find_i64($7, $7, (int_64)-4994483957513846784, $6)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$18 }
	$5 = CALL $11(($4 + [120]), $9)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [120])), [9924])
	
.LABEL $label$18
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8432])
	$9 = ($2 + [8])
	$8 = *($9)
	*((($4 + [104]) + [8])) = $8
	$6 = *($5 + [8])
	$7 = *($2)
	*((($4 + [16]) + [8])) = $8
	*($4 + [104]) = $7
	*($4 + [16]) = $7
	CALL $2(($4 + [16]), $6)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [120])), [10116])
	CALL eosio_assert(((int_64)*($4 + [120]) == (int_64)CALL $fimport$3()), [10162])
	$7 = *($5 + [8])
	CALL eosio_assert(((int_64)*($9) == (int_64)$7), [10849])
	$8 = (int_64)
	*($5) = $8(*($5) - *($2)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10897])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [10919])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8)), [10213])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($4 + [32]), $5, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy((($4 + [32]) | [8]), ($5 + [8]), [8])
	CALL db_update_i64(*($5 + [20]), (int_64)0, ($4 + [32]), [16])
	$5 = (($4 + [120]) + [16])
	if ( (uint_64)($7 <= *($5)) ){ goto $label$19 }
	*($5) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$19
	*(($10 = (($4 + [88]) + [8]))) = *($9)
	*($4 + [88]) = *($2)
	$5 = CALL $292(($4 + [72]), $3)
	*(($4 + [8])) = *($10)
	*($4) = *($4 + [88])
	CALL $3(($4 + [32]), $0, $1, $4, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$20
	$10 = *($4 + [144])
	if ( ($10 == 0) ){ goto $label$21 }
	$2 = ($4 + [148])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$23 }
	
.LOOP $label$24:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$25 }
	CALL _ZdlPv($9)
	
.LABEL $label$25
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$24 }
	$5 = *(($4 + [144]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $10
	
.LABEL $label$22
	*($2) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$21
	$global$0 = ($4 + [192])
	return (unreachable)
	
.LABEL $label$7
	CALL $291(($4 + [176]))
	
.LABEL $label$6
	CALL $291(($4 + [160]))
	(unreachable)
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$5 = ($global$0 - [272])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = CALL is_account($1)
	*(($5 + [264])) = [0]
	*($5 + [256]) = (int_64)0
	$7 = CALL $302([8492])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$10 }
	*($5 + [256]) = ($7 << [1])
	$8 = (($5 + [256]) | [1])
	$9 = $8
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$8 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*($5 + [256]) = ($8 | [1])
	*($5 + [264]) = $9
	*($5 + [260]) = $7
	$8 = (($5 + [256]) | [1])
	
.LABEL $label$9
	CALL memcpy($9, [8492], $7)
	
.LABEL $label$8
	*(($9 + $7)) = [0]
	CALL eosio_assert($6, ( *($5 + [264]) ? $8 : (*($5 + [256]) & [1]) ))
	if ( ((*($5 + [256]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($5 + [264])))
	
.LABEL $label$11
	$6 = CALL is_account($2)
	*(($5 + [248])) = [0]
	*($5 + [240]) = (int_64)0
	$7 = CALL $302([8520])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$14 }
	*($5 + [240]) = ($7 << [1])
	$8 = (($5 + [240]) | [1])
	$9 = $8
	if ( $7 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$8 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*($5 + [240]) = ($8 | [1])
	*($5 + [248]) = $9
	*($5 + [244]) = $7
	$8 = (($5 + [240]) | [1])
	
.LABEL $label$13
	CALL memcpy($9, [8520], $7)
	
.LABEL $label$12
	*(($9 + $7)) = [0]
	CALL eosio_assert($6, ( *($5 + [248]) ? $8 : (*($5 + [240]) & [1]) ))
	if ( ((*($5 + [240]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [248])))
	
.LABEL $label$15
	*(($5 + [232])) = [0]
	*($5 + [224]) = (int_64)0
	$7 = CALL $302([8546])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$18 }
	*($5 + [224]) = ($7 << [1])
	$9 = (($5 + [224]) | [1])
	if ( $7 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$6 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($6)
	*($5 + [224]) = ($6 | [1])
	*($5 + [232]) = $9
	*($5 + [228]) = $7
	
.LABEL $label$17
	CALL memcpy($9, [8546], $7)
	
.LABEL $label$16
	*(($9 + $7)) = [0]
	$7 = CALL $292(($5 + [168]), ($5 + [224]))
	CALL eosio_assert(((int_64)$1 != (int_64)$2), ( *($7 + [8]) ? ($7 + [1]) : (*($5 + [168]) & [1]) ))
	if ( (*($5 + [168]) & [1]) ){ goto $label$20 }
	if ( (*($5 + [224]) & [1]) ){ goto $label$19 }
	goto $label$4 
	
.LABEL $label$20
	CALL _ZdlPv(*(($7 + [8])))
	if ( ((*($5 + [224]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$19
	CALL _ZdlPv(*($5 + [232]))
	$7 = [1]
	$9 = *($4)
	if ( (($9 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$7
	CALL $291(($5 + [256]))
	
.LABEL $label$6
	CALL $291(($5 + [240]))
	
.LABEL $label$5
	CALL $291(($5 + [224]))
	
.LABEL $label$4
	$7 = [1]
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = uint_32($9 >> $7)
	goto $label$1 
	
.LABEL $label$2
	$6 = *($4 + [4])
	
.LABEL $label$1
	*(($5 + [216])) = [0]
	*($5 + [208]) = (int_64)0
	$7 = CALL $302([8403])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$24 }
	*($5 + [208]) = ($7 << [1])
	$8 = (($5 + [208]) | [1])
	$9 = $8
	if ( $7 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$8 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*($5 + [208]) = ($8 | [1])
	*($5 + [216]) = $9
	*($5 + [212]) = $7
	$8 = (($5 + [208]) | [1])
	
.LABEL $label$23
	CALL memcpy($9, [8403], $7)
	
.LABEL $label$22
	*(($9 + $7)) = [0]
	CALL eosio_assert(($6 <= [257]), ( *($5 + [216]) ? $8 : (*($5 + [208]) & [1]) ))
	if ( ((*($5 + [208]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($5 + [216])))
	
.LABEL $label$25
	$10 = *($3 + [8])
	*(($5 + [200])) = [0]
	*($5 + [184]) = (int_64)-1
	*($5 + [192]) = (int_64)0
	$11 = *($0)
	*($5 + [168]) = $11
	*($5 + [176]) = $11
	$7 = CALL $16(($5 + [168]), (uint_64)$10 >> (uint_64)(int_64)8), [8572])
	$11 = *($3 + [8])
	*((($5 + [152]) + [8])) = $11
	$12 = *($7 + [8])
	$10 = *($3)
	*((($5 + [40]) + [8])) = $11
	*($5 + [152]) = $10
	*($5 + [40]) = $10
	CALL $2(($5 + [40]), $12)
	CALL require_recipient($1)
	CALL require_recipient($2)
	*(($9 = (($5 + [136]) + [8]))) = *($3 + [8])
	*($5 + [136]) = *($3)
	$7 = CALL $292(($5 + [120]), $4)
	*((($5 + [24]) + [8])) = *($9)
	*($5 + [24]) = *($5 + [136])
	CALL $3(($5 + [88]), $0, $1, ($5 + [24]), $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$26
	*(($7 = (($5 + [72]) + [8]))) = *(($3 + [8]))
	*($5 + [72]) = *($3)
	$3 = CALL $292(($5 + [56]), $4)
	*((($5 + [8]) + [8])) = *($7)
	*($5 + [8]) = *($5 + [72])
	CALL $8(($5 + [88]), $0, $2, ($5 + [8]), $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$27
	$0 = *($5 + [192])
	if ( ($0 == 0) ){ goto $label$28 }
	$4 = ($5 + [196])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$30 }
	
.LOOP $label$31:
	$3 = ($3 + [-24])
	$7 = *($3)
	*($3) = [0]
	if ( ($7 == 0) ){ goto $label$32 }
	CALL _ZdlPv($7)
	
.LABEL $label$32
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$31 }
	$3 = *(($5 + [192]))
	goto $label$29 
	
.LABEL $label$30
	$3 = $0
	
.LABEL $label$29
	*($4) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$28
	$global$0 = ($5 + [272])
	return (unreachable)
	
.LABEL $label$21
	CALL $291(($5 + [208]))
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $16 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9924])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4994483957513846784, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $11($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9924])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$5 = ($global$0 - [336])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = CALL is_account($1)
	*(($5 + [280])) = [0]
	*($5 + [272]) = (int_64)0
	$7 = CALL $302([8589])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$10 }
	*($5 + [272]) = ($7 << [1])
	$8 = (($5 + [272]) | [1])
	$9 = $8
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$8 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*($5 + [272]) = ($8 | [1])
	*($5 + [280]) = $9
	*($5 + [276]) = $7
	$8 = (($5 + [272]) | [1])
	
.LABEL $label$9
	CALL memcpy($9, [8589], $7)
	
.LABEL $label$8
	*(($9 + $7)) = [0]
	CALL eosio_assert($6, ( *($5 + [280]) ? $8 : (*($5 + [272]) & [1]) ))
	if ( ((*($5 + [272]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($5 + [280])))
	
.LABEL $label$11
	*(($5 + [264])) = [0]
	*($5 + [256]) = (int_64)0
	$7 = CALL $302([8609])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$14 }
	*($5 + [256]) = ($7 << [1])
	$9 = (($5 + [256]) | [1])
	if ( $7 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$6 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($6)
	*($5 + [256]) = ($6 | [1])
	*($5 + [264]) = $9
	*($5 + [260]) = $7
	
.LABEL $label$13
	CALL memcpy($9, [8609], $7)
	
.LABEL $label$12
	*(($9 + $7)) = [0]
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($3 + [8])), [9853])
	$7 = CALL $292(($5 + [288]), ($5 + [256]))
	CALL eosio_assert(((int_64)*($2) != (int_64)*($3)), ( *($7 + [8]) ? ($7 + [1]) : (*($5 + [288]) & [1]) ))
	if ( ((*($5 + [288]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($7 + [8])))
	
.LABEL $label$15
	if ( ((*($5 + [256]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($5 + [264]))
	
.LABEL $label$16
	*(($5 + [248])) = [0]
	*($5 + [240]) = (int_64)0
	$7 = CALL $302([8620])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$19 }
	*($5 + [240]) = ($7 << [1])
	$9 = (($5 + [240]) | [1])
	if ( $7 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$6 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($6)
	*($5 + [240]) = ($6 | [1])
	*($5 + [248]) = $9
	*($5 + [244]) = $7
	
.LABEL $label$18
	CALL memcpy($9, [8620], $7)
	
.LABEL $label$17
	*(($9 + $7)) = [0]
	$7 = CALL $292(($5 + [288]), ($5 + [240]))
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($3 + [8]))), ( *($7 + [8]) ? ($7 + [1]) : (*($5 + [288]) & [1]) ))
	if ( (*($5 + [288]) & [1]) ){ goto $label$21 }
	if ( (*($5 + [240]) & [1]) ){ goto $label$20 }
	goto $label$4 
	
.LABEL $label$21
	CALL _ZdlPv(*(($7 + [8])))
	if ( ((*($5 + [240]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$20
	CALL _ZdlPv(*($5 + [248]))
	$7 = [1]
	$9 = *($4)
	if ( (($9 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$7
	CALL $291(($5 + [272]))
	
.LABEL $label$6
	CALL $291(($5 + [256]))
	
.LABEL $label$5
	CALL $291(($5 + [240]))
	
.LABEL $label$4
	$7 = [1]
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = uint_32($9 >> $7)
	goto $label$1 
	
.LABEL $label$2
	$6 = *($4 + [4])
	
.LABEL $label$1
	*(($5 + [232])) = [0]
	*($5 + [224]) = (int_64)0
	$7 = CALL $302([8403])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$26 }
	*($5 + [224]) = ($7 << [1])
	$10 = (($5 + [224]) | [1])
	$9 = $10
	if ( $7 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$8 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*($5 + [224]) = ($8 | [1])
	*($5 + [232]) = $9
	*($5 + [228]) = $7
	$10 = (($5 + [224]) | [1])
	
.LABEL $label$25
	CALL memcpy($9, [8403], $7)
	
.LABEL $label$24
	$8 = [0]
	*(($9 + $7)) = [0]
	CALL eosio_assert(($6 <= [257]), ( *($5 + [232]) ? $10 : (*($5 + [224]) & [1]) ))
	if ( ((*($5 + [224]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($5 + [232])))
	
.LABEL $label$27
	*((($5 + [184]) + [32])) = [0]
	*($5 + [200]) = (int_64)-1
	*($5 + [208]) = (int_64)0
	$11 = *($0)
	*($5 + [184]) = $11
	*($5 + [192]) = $11
	$7 = ($2 + [8])
	$12 = (uint_64)*($7) >> (uint_64)(int_64)8
	$9 = CALL db_find_i64($11, $11, (int_64)-4994483957513846784, $12)
	if ( ((int_32)$9) < (int_32)[0]) ){ goto $label$28 }
	$8 = CALL $11(($5 + [184]), $9)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($5 + [184])), [9924])
	
.LABEL $label$28
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8432])
	$13 = *($7)
	*((($5 + [168]) + [8])) = $13
	$14 = *($8 + [8])
	$11 = *($2)
	*((($5 + [56]) + [8])) = $13
	*($5 + [168]) = $11
	*($5 + [56]) = $11
	CALL $2(($5 + [56]), $14)
	$13 = *(($3 + [8]))
	*((($5 + [152]) + [8])) = $13
	$14 = *($8 + [8])
	$11 = *($3)
	*((($5 + [40]) + [8])) = $13
	*($5 + [152]) = $11
	*($5 + [40]) = $11
	CALL $2(($5 + [40]), $14)
	*((($5 + [288]) + [32])) = [0]
	*($5 + [296]) = $1
	*($5 + [304]) = (int_64)-1
	*($5 + [312]) = (int_64)0
	*($5 + [288]) = *($0)
	$7 = CALL $4(($5 + [288]), $12, [9834])
	$12 = *($7 + [8])
	$13 = *($7)
	$6 = *($5 + [312])
	if ( ($6 == 0) ){ goto $label$29 }
	$10 = ($5 + [316])
	$7 = *($10)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$31 }
	
.LOOP $label$32:
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$33 }
	CALL _ZdlPv($9)
	
.LABEL $label$33
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$32 }
	$7 = *(($5 + [312]))
	goto $label$30 
	
.LABEL $label$31
	$7 = $6
	
.LABEL $label$30
	*($10) = $6
	CALL _ZdlPv($7)
	
.LABEL $label$29
	*(($5 + [144])) = [0]
	*($5 + [136]) = (int_64)0
	$7 = CALL $302([8658])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$22 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$36 }
	*($5 + [136]) = ($7 << [1])
	$9 = (($5 + [136]) | [1])
	if ( $7 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$6 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($6)
	*($5 + [136]) = ($6 | [1])
	*($5 + [144]) = $9
	*($5 + [140]) = $7
	
.LABEL $label$35
	CALL memcpy($9, [8658], $7)
	
.LABEL $label$34
	*(($9 + $7)) = [0]
	$11 = *(($2 + [8]))
	CALL eosio_assert(((int_64)$12 == (int_64)$11), [9853])
	$7 = CALL $292(($5 + [288]), ($5 + [136]))
	$12 = *($2)
	CALL eosio_assert(((int_64)$13 == (int_64)$12), ( *($7 + [8]) ? ($7 + [1]) : (*($5 + [288]) & [1]) ))
	if ( ((*($5 + [288]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*(($7 + [8])))
	
.LABEL $label$37
	if ( ((*($5 + [136]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($5 + [144]))
	
.LABEL $label$38
	$14 = *(($3 + [8]))
	$7 = ((int_64)$11 == (int_64)$14)
	CALL eosio_assert($7, [9853])
	$13 = *($3)
	CALL eosio_assert($7, [10849])
	if ( ((int_64)$12 <= (int_64)$13) ){ goto $label$42 }
	$12 = (int_64)
	CALL eosio_assert(((int_64)$12($12 - $13)) > (int_64)-4611686018427387904), [10897])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [10919])
	*($5 + [128]) = $11
	*($5 + [120]) = $12
	$7 = CALL $292(($5 + [104]), $4)
	*((($5 + [8]) + [8])) = *($5 + [128])
	*($5 + [8]) = *($5 + [120])
	CALL $3(($5 + [288]), $0, $1, ($5 + [8]), $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$43
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($5 + [184])), [10116])
	CALL eosio_assert(((int_64)*($5 + [184]) == (int_64)CALL $fimport$3()), [10162])
	$7 = ($8 + [8])
	$1 = *($7)
	CALL eosio_assert(((int_64)$11 == (int_64)$1), [10849])
	$11 = (int_64)
	*($8) = $11(*($8) - $12))
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [10897])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [10919])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($7) >> (uint_64)(int_64)8)), [10213])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($5 + [288]), $8, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy((($5 + [288]) | [8]), $7, [8])
	CALL db_update_i64(*($8 + [20]), (int_64)0, ($5 + [288]), [16])
	$7 = (($5 + [184]) + [16])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$41 }
	*($7) = ((int_64)$1 + (int_64)1)
	$6 = *($5 + [208])
	if ( $6 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($13 - $12)) > (int_64)-4611686018427387904), [10897])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [10919])
	*($5 + [96]) = $14
	*($5 + [88]) = $11
	$7 = CALL $292(($5 + [72]), $4)
	*((($5 + [24]) + [8])) = *($5 + [96])
	*($5 + [24]) = *($5 + [88])
	CALL $8(($5 + [288]), $0, $1, ($5 + [24]), $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$44
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($5 + [184])), [10116])
	CALL eosio_assert(((int_64)*($5 + [184]) == (int_64)CALL $fimport$3()), [10162])
	$7 = ($8 + [8])
	$1 = *($7)
	CALL eosio_assert(((int_64)$14 == (int_64)$1), [10748])
	$11 = ((int_64)*($8) + (int_64)$11)
	*($8) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [10791])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [10810])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($7) >> (uint_64)(int_64)8)), [10213])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($5 + [288]), $8, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy((($5 + [288]) | [8]), $7, [8])
	CALL db_update_i64(*($8 + [20]), (int_64)0, ($5 + [288]), [16])
	$7 = (($5 + [184]) + [16])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$41 }
	*($7) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$41
	$6 = *($5 + [208])
	if ( ($6 == 0) ){ goto $label$39 }
	
.LABEL $label$40
	$8 = ($5 + [212])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$46 }
	
.LOOP $label$47:
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$48 }
	CALL _ZdlPv($9)
	
.LABEL $label$48
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$47 }
	$7 = *(($5 + [208]))
	goto $label$45 
	
.LABEL $label$46
	$7 = $6
	
.LABEL $label$45
	*($8) = $6
	CALL _ZdlPv($7)
	
.LABEL $label$39
	$global$0 = ($5 + [336])
	return (unreachable)
	
.LABEL $label$23
	CALL $291(($5 + [224]))
	
.LABEL $label$22
	CALL $291(($5 + [136]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [176])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($1 + [8])
	$4 = *($3)
	*((($2 + [144]) + [8])) = $4
	$5 = *($1)
	*((($2 + [16]) + [8])) = $4
	*($2 + [16]) = $5
	*($2 + [144]) = $5
	CALL $1(($2 + [16]))
	$4 = *($3)
	$3 = [0]
	*((($2 + [104]) + [32])) = [0]
	*($2 + [120]) = (int_64)-1
	*($2 + [128]) = (int_64)0
	$5 = *($0)
	*($2 + [104]) = $5
	*($2 + [112]) = $5
	$6 = [1]
	$7 = CALL db_find_i64($5, $5, (int_64)-4994483957513846784, (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_32)$7) < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $11(($2 + [104]), $7) + [16]) == (int_32)($2 + [104])), [9924])
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8352])
	$8 = *($0)
	CALL eosio_assert(((int_64)*($2 + [104]) == (int_64)CALL $fimport$3()), [10030])
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($9) = (int_64)0
	CALL eosio_assert([1], [9768])
	$10 = ($9 + [8])
	$5 = (int_64)5462355
	
.LOOP $label$3:
	$11 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $4
	$11 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $4
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$11 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert($11, [8204])
	*($9 + [16]) = ($2 + [104])
	*(($3 = ($9 + [8]))) = *(($1 + [8]))
	*($9) = *($1)
	CALL eosio_assert([1], [9828])
	CALL memcpy(($2 + [32]), $9, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy((($2 + [32]) | [8]), $10, [8])
	$5 = (uint_64)*($3) >> (uint_64)(int_64)8
	$6 = CALL db_store_i64(*((($2 + [104]) + [8])), (int_64)-4994483957513846784, $8, $5), ($2 + [32]), [16]
	*($9 + [20]) = $6)
	$7 = (($2 + [104]) + [16])
	if ( (uint_64)($5 <= *($7)) ){ goto $label$6 }
	*($7) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$6
	*($2 + [168]) = $9
	$5 = (uint_64)*($3) >> (uint_64)(int_64)8
	*($2 + [32]) = $5)
	*($2 + [164]) = $6
	$7 = ($2 + [132])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($2 + [136]))) ){ goto $label$9 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($2 + [168]) = [0]
	*($3) = $9
	*($7) = ($3 + [24])
	$3 = *($2 + [168])
	$6 = [0]
	*($2 + [168]) = [0]
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $12(($2 + [128]), ($2 + [168]), ($2 + [32]), ($2 + [164]))
	$3 = *($2 + [168])
	$6 = [0]
	*($2 + [168]) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($3)
	
.LABEL $label$7
	*((($2 + [72]) + [8])) = $6
	*((($2 + [88]) + [8])) = *(($1 + [8]))
	*($2 + [72]) = (int_64)0
	*($2 + [88]) = *($1)
	$5 = *($0)
	$3 = CALL $302([8385])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$13 }
	*($2 + [72]) = ($3 << [1])
	$6 = (($2 + [72]) | [1])
	if ( $3 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$7 = (($3 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($2 + [72]) = ($7 | [1])
	*($2 + [80]) = $6
	*($2 + [76]) = $3
	
.LABEL $label$12
	CALL memcpy($6, [8385], $3)
	
.LABEL $label$11
	*(($6 + $3)) = [0]
	*(($2 + [8])) = *((($2 + [88]) + [8]))
	*($2) = *($2 + [88])
	CALL $8(($2 + [32]), $0, $5, $2, ($2 + [72]))
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($2 + [80]))
	
.LABEL $label$14
	$7 = *($2 + [128])
	if ( ($7 == 0) ){ goto $label$15 }
	$9 = ($2 + [132])
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$17 }
	
.LOOP $label$18:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$19 }
	CALL _ZdlPv($6)
	
.LABEL $label$19
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$18 }
	$3 = *(($2 + [128]))
	goto $label$16 
	
.LABEL $label$17
	$3 = $7
	
.LABEL $label$16
	*($9) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$15
	$global$0 = ($2 + [176])
	return (unreachable)
	
.LABEL $label$10
	CALL $291(($2 + [72]))
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9975])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $305($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([32])
	$6 = CALL $283($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $12(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $308($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $300($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = [0]
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	*(($4 + [184])) = [0]
	*($4 + [176]) = (int_64)0
	$5 = CALL $302([8204])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$10 }
	*($4 + [176]) = ($5 << [1])
	$11 = (($4 + [176]) | [1])
	$10 = $11
	if ( $5 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$11 = (($5 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($4 + [176]) = ($11 | [1])
	*($4 + [184]) = $10
	*($4 + [180]) = $5
	$11 = (($4 + [176]) | [1])
	
.LABEL $label$9
	CALL memcpy($10, [8204], $5)
	
.LABEL $label$8
	*(($10 + $5)) = [0]
	CALL eosio_assert($9, ( *($4 + [184]) ? $11 : (*($4 + [176]) & [1]) ))
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [184])))
	
.LABEL $label$11
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$13 }
	$11 = uint_32($5 >> [1])
	goto $label$12 
	
.LABEL $label$13
	$11 = *($3 + [4])
	
.LABEL $label$12
	*(($4 + [168])) = [0]
	*($4 + [160]) = (int_64)0
	$9 = CALL $302([8403])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$16 }
	*($4 + [160]) = ($9 << [1])
	$12 = (($4 + [160]) | [1])
	$10 = $12
	if ( $9 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$5 = (($9 + [16]) & [-16])
	$10 = CALL _Znwj($5)
	*($4 + [160]) = ($5 | [1])
	*($4 + [168]) = $10
	*($4 + [164]) = $9
	$12 = (($4 + [160]) | [1])
	
.LABEL $label$15
	CALL memcpy($10, [8403], $9)
	
.LABEL $label$14
	$5 = [0]
	*(($10 + $9)) = [0]
	CALL eosio_assert(($11 <= [257]), ( *($4 + [168]) ? $12 : (*($4 + [160]) & [1]) ))
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($4 + [168])))
	
.LABEL $label$17
	*(($4 + [152])) = [0]
	*($4 + [136]) = (int_64)-1
	*($4 + [144]) = (int_64)0
	$7 = *($0)
	*($4 + [120]) = $7
	*($4 + [128]) = $7
	$9 = CALL db_find_i64($7, $7, (int_64)-4994483957513846784, $6)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$18 }
	$5 = CALL $11(($4 + [120]), $9)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [120])), [9924])
	
.LABEL $label$18
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8432])
	$9 = ($2 + [8])
	$8 = *($9)
	*((($4 + [104]) + [8])) = $8
	$6 = *($5 + [8])
	$7 = *($2)
	*((($4 + [16]) + [8])) = $8
	*($4 + [104]) = $7
	*($4 + [16]) = $7
	CALL $2(($4 + [16]), $6)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [120])), [10116])
	CALL eosio_assert(((int_64)*($4 + [120]) == (int_64)CALL $fimport$3()), [10162])
	$7 = *($5 + [8])
	CALL eosio_assert(((int_64)*($9) == (int_64)$7), [10748])
	$8 = ((int_64)*($5) + (int_64)*($2))
	*($5) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10791])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [10810])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8)), [10213])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($4 + [32]), $5, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy((($4 + [32]) | [8]), ($5 + [8]), [8])
	CALL db_update_i64(*($5 + [20]), (int_64)0, ($4 + [32]), [16])
	$5 = (($4 + [120]) + [16])
	if ( (uint_64)($7 <= *($5)) ){ goto $label$19 }
	*($5) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$19
	*(($10 = (($4 + [88]) + [8]))) = *($9)
	*($4 + [88]) = *($2)
	$5 = CALL $292(($4 + [72]), $3)
	*(($4 + [8])) = *($10)
	*($4) = *($4 + [88])
	CALL $8(($4 + [32]), $0, $1, $4, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$20
	$10 = *($4 + [144])
	if ( ($10 == 0) ){ goto $label$21 }
	$2 = ($4 + [148])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$23 }
	
.LOOP $label$24:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$25 }
	CALL _ZdlPv($9)
	
.LABEL $label$25
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$24 }
	$5 = *(($4 + [144]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $10
	
.LABEL $label$22
	*($2) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$21
	$global$0 = ($4 + [192])
	return (unreachable)
	
.LABEL $label$7
	CALL $291(($4 + [176]))
	
.LABEL $label$6
	CALL $291(($4 + [160]))
	(unreachable)
}

void .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = CALL $292($2, $1)
	$4 = *($1 + [16])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$1 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	$5 = CALL $292(($2 + [16]), $3)
	CALL void $1((int_32 $5), (int_32 $4), (int_64 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $281 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	CALL $294(($1 + [12]), *($4 + [4]))
	$4 = *($1 + [12])
	$6 = ( *(($1 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [36])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $305($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL $271($3, $1)
	$7 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)3923610676896333824, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $308($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$5 = ($global$0 - [128])
	$global$0 = $5
	*(($5 + [72])) = [0]
	*($5 + [48]) = $1
	*($5 + [56]) = (int_64)-1
	*($5 + [64]) = (int_64)0
	*($5 + [40]) = *($0)
	$6 = CALL $19(($5 + [40]), $2, [8672])
	$7 = *($6 + [8])
	*((($5 + [24]) + [8])) = [0]
	*($5 + [24]) = (int_64)0
	$8 = CALL $302([8687])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$4 }
	*($5 + [24]) = ($8 << [1])
	$9 = (($5 + [24]) | [1])
	$10 = $9
	if ( $8 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$11 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($5 + [24]) = ($11 | [1])
	*($5 + [32]) = $10
	*($5 + [28]) = $8
	$9 = (($5 + [24]) | [1])
	
.LABEL $label$3
	CALL memcpy($10, [8687], $8)
	
.LABEL $label$2
	$11 = ($6 + [8])
	*(($10 + $8)) = [0]
	CALL eosio_assert(((uint_64)$7 >= (uint_64)$3), ( *($5 + [32]) ? $9 : (*($5 + [24]) & [1]) ))
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$5
	$12 = (int_64)0
	$13 = *($11)
	if ( ((int_64)$13 == (int_64)0) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($5 + [40])), [10116])
	CALL eosio_assert(((int_64)*($5 + [40]) == (int_64)CALL $fimport$3()), [10162])
	$14 = (int_64)
	*(($8 = ($6 + [8]))) = $14(*($8) - $3))
	$3 = *($6)
	CALL eosio_assert([1], [10213])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($5 + [80]), $6, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy((($5 + [80]) | [8]), $11, [8])
	CALL db_update_i64(*($6 + [20]), (int_64)0, ($5 + [80]), [16])
	$8 = (($5 + [40]) + [16])
	if ( (uint_64)($3 <= *($8)) ){ goto $label$10 }
	*($8) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$10 = CALL $292(($5 + [8]), $4)
	$15 = *($0)
	$12 = (int_64)0
	$7 = (int_64)59
	$8 = [9912]
	$16 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$16 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$6 = ($6 + [-91])
	goto $label$14 
	
.LABEL $label$16
	$3 = (int_64)0
	if ( ((int_64)$7 == (int_64)47244640260) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$12
	$8 = ($8 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$3 | (int_64)$16)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$11 }
	*($5 + [88]) = $2
	*($5 + [80]) = $1
	*($5 + [96]) = $13
	*($5 + [104]) = $14
	CALL $292(($5 + [112]), $10)
	CALL $20($15, $15, $16, ($5 + [80]))
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($5 + [120])))
	if ( (*($5 + [8]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	CALL $21(($5 + [40]), $6)
	$10 = CALL $292(($5 + [8]), $4)
	$15 = *($0)
	$7 = (int_64)59
	$8 = [9912]
	$16 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$22 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [-91])
	goto $label$20 
	
.LABEL $label$22
	$3 = (int_64)0
	if ( ((int_64)$7 == (int_64)47244640260) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$18
	$8 = ($8 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$3 | (int_64)$16)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$17 }
	*($5 + [88]) = $2
	*($5 + [80]) = $1
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	CALL $292(($5 + [112]), $10)
	CALL $20($15, $15, $16, ($5 + [80]))
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($5 + [120])))
	
.LABEL $label$8
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($5 + [16]))
	
.LABEL $label$6
	$10 = *($5 + [64])
	if ( ($10 == 0) ){ goto $label$23 }
	$0 = ($5 + [68])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$25 }
	
.LOOP $label$26:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$27 }
	CALL _ZdlPv($6)
	
.LABEL $label$27
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$26 }
	$8 = *(($5 + [64]))
	goto $label$24 
	
.LABEL $label$25
	$8 = $10
	
.LABEL $label$24
	*($0) = $10
	CALL _ZdlPv($8)
	
.LABEL $label$23
	$global$0 = ($5 + [128])
	return (unreachable)
	
.LABEL $label$1
	CALL $291(($5 + [24]))
}

int_32 .FUNC $19 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9924])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)8530947034764866432, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $22($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9924])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $184 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $187 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $1
	CALL require_auth(*($0))
	$4 = ($0 + [16])
	$6 = *(($0 + [44]))
	$5 = *(($0 + [40]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [9924])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [24])), (int_64)3923610676896333824, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $266($4, $7)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [9924])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [16]) = $2
	CALL eosio_assert([1], [10081])
	CALL $279($4, $8, $1, ($3 + [16]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [20]) = $2
	*($3 + [16]) = ($3 + [24])
	CALL $280(($3 + [8]), $4, $1, ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $218 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [10030])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([40])) + [16]) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8204])
	*($5 + [24]) = $1
	CALL $219(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$7 = *($5 + [28])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $216(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

void .FUNC $186 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $292($2, ($1 + [8]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$4 = *(*($0))
	$4 = (( ($4 + [16]) ? [0] : $4 ) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($4) + $0))
	
.LABEL $label$1
	$5 = CALL $292(($2 + [16]), $1)
	CALL void $4((int_32 $3), (int_64 $5), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = CALL $292($2, $1)
	$4 = *($1 + [12])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$1 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	$5 = CALL $292(($2 + [16]), $3)
	CALL void $1((int_32 $5), (int_32 $4), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $116 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0 + [272]))
	*(($1 + [8])) = [0]
	*($1) = (int_64)0
	$2 = *(($0 + [260]))
	$3 = CALL $302([11046])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($1) = ($3 << [1])
	$4 = ($1 | [1])
	$5 = $4
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($1) = ($6 | [1])
	*($1 + [8]) = $5
	*($1 + [4]) = $3
	$4 = ($1 | [1])
	
.LABEL $label$3
	CALL memcpy($5, [11046], $3)
	
.LABEL $label$2
	$6 = ($0 + [208])
	*(($5 + $3)) = [0]
	CALL eosio_assert(($2 == 0), ( *($1 + [8]) ? $4 : (*($1) & [1]) ))
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$5
	*(($0 + [104])) = *($6)
	*(($0 + [260])) = [1]
	*(($0 + [112])) = *(($6 + [8]))
	CALL $294(($0 + [116]), ($0 + [220]))
	CALL $66(($0 + [128]), *(($0 + [232])), *(($0 + [236])))
	CALL $106(($0 + [140]), *(($0 + [244])), *(($0 + [248])))
	*(($0 + [65])) = [1]
	*(($0 + [160])) = *(($0 + [264]))
	*(($0 + [152])) = *(($0 + [256]))
	$global$0 = ($1 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $291($1)
}

void .FUNC $117 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$2 = ($global$0 - [512])
	$global$0 = $2
	CALL require_auth($1)
	*(($2 + [504])) = [0]
	*($2 + [496]) = (int_64)0
	$3 = CALL $302([8776])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$12 }
	*($2 + [496]) = ($3 << [1])
	$4 = (($2 + [496]) | [1])
	if ( $3 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [496]) = ($5 | [1])
	*($2 + [504]) = $4
	*($2 + [500]) = $3
	
.LABEL $label$11
	CALL memcpy($4, [8776], $3)
	
.LABEL $label$10
	*(($4 + $3)) = [0]
	$6 = (int_64)0
	$7 = (int_64)59
	$3 = [9480]
	$8 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$18 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$4 = ($4 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$9 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$14
	$3 = ($3 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$13 }
	$4 = CALL $292(($2 + [464]), ($2 + [496]))
	$5 = ($0 + [24])
	$3 = *($5)
	if ( $3 ){ goto $label$19 }
	*(($3 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = [0]
	*($5) = $3
	$6 = *($0 + [16])
	*($3) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = $6
	*($3 + [24]) = $6
	
.LABEL $label$19
	$5 = CALL $292(($2 + [96]), $4)
	CALL $52(($2 + [480]), $3, $8, $5)
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$20
	if ( ((*($4) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$21
	*(($2 + [456])) = [0]
	*($2 + [448]) = (int_64)0
	$3 = CALL $302([9490])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$24 }
	*($2 + [448]) = ($3 << [1])
	$4 = (($2 + [448]) | [1])
	if ( $3 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [448]) = ($5 | [1])
	*($2 + [456]) = $4
	*($2 + [452]) = $3
	
.LABEL $label$23
	CALL memcpy($4, [9490], $3)
	
.LABEL $label$22
	*(($4 + $3)) = [0]
	CALL $53(($2 + [480]), ($2 + [496]), ($2 + [448]))
	if ( ((*($2 + [448]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($2 + [456]))
	
.LABEL $label$25
	$4 = ( *($2 + [484]) ? uint_32($4 >> [1]) : $5 )
	$4 = *($2 + [480])
	$5 = ($4 & [1])
	$10 = (($2 + [480]) | [1])
	$3 = ( *($2 + [488]) ? $10 : $5 )
	$11 = ($3 + $4)
	if ( ($4 == 0) ){ goto $label$26 }
	
.LOOP $label$27:
	if ( ((int_32)*($3) == (int_32)[44]) ){ goto $label$26 }
	$3 = ($3 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$27 }
	$3 = $11
	
.LABEL $label$26
	*(($2 + [440])) = [0]
	*($2 + [432]) = (int_64)0
	$4 = CALL $302([9508])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$30 }
	*($2 + [432]) = ($4 << [1])
	$5 = (($2 + [432]) | [1])
	if ( $4 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$12 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($12)
	*($2 + [432]) = ($12 | [1])
	*($2 + [440]) = $5
	*($2 + [436]) = $4
	
.LABEL $label$29
	CALL memcpy($5, [9508], $4)
	
.LABEL $label$28
	*(($5 + $4)) = [0]
	$4 = CALL $292(($2 + [96]), ($2 + [432]))
	CALL eosio_assert(((int_32)$3 != (int_32)$11), ( *($4 + [8]) ? ($4 + [1]) : (*($2 + [96]) & [1]) ))
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$31
	if ( ((*($2 + [432]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*($2 + [440]))
	
.LABEL $label$32
	$4 = ($2 + [488])
	$11 = CALL $293(($2 + [416]), ($2 + [480]), [0], ($3 - ( *($4) ? $10 : (*($2 + [480]) & [1]) )), ($2 + [480]))
	$10 = CALL $293(($2 + [400]), ($2 + [480]), (($3 + [1]) - ( *($4) ? $10 : (*($2 + [480]) & [1]) )), [-1], ($2 + [480]))
	$9 = (int_64)0
	$6 = (int_64)0
	$3 = ($3 & [1])
	$3 = *($2 + [416])
	$4 = ( *($11 + [4]) ? uint_32($3 >> [1]) : $3 )
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$33 }
	$3 = ( *($11 + [8]) ? ($11 + [1]) : $3 )
	$4 = ($3 + $4)
	$6 = (int_64)0
	
.LOOP $label$34:
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)*($3)) + (int_64)-48)
	$3 = ($3 + [1])
	if ( ($3 <= $4) ){ goto $label$34 }
	
.LABEL $label$33
	$3 = ($3 & [1])
	$3 = *($2 + [400])
	$4 = ( *($10 + [4]) ? uint_32($3 >> [1]) : $3 )
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$35 }
	$3 = ( *($10 + [8]) ? ($10 + [1]) : $3 )
	$4 = ($3 + $4)
	$9 = (int_64)0
	
.LOOP $label$36:
	$9 = ((int_64)((int_64)((int_64)$9 * (int_64)10) + (int_64)*($3)) + (int_64)-48)
	$3 = ($3 + [1])
	if ( ($3 <= $4) ){ goto $label$36 }
	
.LABEL $label$35
	if ( ((int_64)*([0]) != (int_64)0) ){ goto $label$37 }
	*([0]) = ((int_64)CALL current_time() + (int_64)$1)
	
.LABEL $label$37
	*(($3 = (($2 + [384]) + [8]))) = *([0])
	*($2 + [384]) = *([0])
	CALL sha256($3, [8], ($2 + [96]))
	$7 = ((int_64)((int_64)*($2 + [97]) << (int_64)32) | (int_64)*($2 + [96]))
	*($3) = $7
	$13 = ((int_64)((uint_64)$7 % (uint_64)(int_64))($9 - $6)) + (int_64)$6
	if ( (int_64)($13) == 0) ){ goto $label$38 }
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9768])
	$6 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$41:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$42 }
	$6 = $9
	$4 = [1]
	$5 = $3
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$42
	$6 = $9
	
.LOOP $label$43:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$40 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$5 = ($3 + [1])
	$3 = $5
	if ( $4 ){ goto $label$43 }
	$4 = [1]
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$40
	$4 = [0]
	
.LABEL $label$39
	CALL eosio_assert($4, [8204])
	$6 = (int_64)0
	$7 = (int_64)59
	$3 = [8192]
	$8 = (int_64)0
	
.LOOP $label$44:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$49 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$4 = ($4 + [-91])
	goto $label$47 
	
.LABEL $label$49
	$9 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$45
	$3 = ($3 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$44 }
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$3 = CALL $302([9531])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$52 }
	*($2 + [32]) = ($3 << [1])
	$4 = (($2 + [32]) | [1])
	if ( $3 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [32]) = ($5 | [1])
	*($2 + [40]) = $4
	*($2 + [36]) = $3
	
.LABEL $label$51
	CALL memcpy($4, [9531], $3)
	
.LABEL $label$50
	*(($4 + $3)) = [0]
	$14 = *($0 + [32])
	$6 = (int_64)0
	$7 = (int_64)59
	$3 = [10828]
	$15 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$58 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$4 = ($4 + [-91])
	goto $label$56 
	
.LABEL $label$58
	$9 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$54
	$3 = ($3 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$15 = ((int_64)$9 | (int_64)$15)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$53 }
	*(($2 + [120])) = (int_64)1397703940
	*($2 + [104]) = $1
	*($2 + [96]) = $14
	*($2 + [112]) = $13
	CALL $292(($2 + [128]), ($2 + [32]))
	CALL $29($14, $8, $15, ($2 + [96]))
	if ( ((*($2 + [128]) & [1]) == 0) ){ goto $label$59 }
	CALL _ZdlPv(*(($2 + [136])))
	
.LABEL $label$59
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$60 }
	CALL _ZdlPv(*($2 + [40]))
	
.LABEL $label$60
	$15 = *($0)
	$7 = (int_64)0
	$9 = (int_64)59
	$3 = [10837]
	$8 = (int_64)0
	
.LOOP $label$61:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$66 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$65 }
	$4 = ($4 + [-91])
	goto $label$64 
	
.LABEL $label$66
	$6 = (int_64)0
	if ( ((int_64)$9 == (int_64)47244640260) ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$65
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$64
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$63
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$62
	$3 = ($3 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$6 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$61 }
	*(($2 + [112])) = (int_64)1397703940
	*($2 + [104]) = $13
	*($2 + [96]) = $1
	CALL $94($15, $15, $8, ($2 + [96]))
	$12 = CALL $100(($2 + [96]), *($0), $1, $1)
	CALL $118($12)
	*(($2 + [64])) = (int_64)-1
	$6 = (int_64)0
	*(($2 + [72])) = (int_64)0
	*(($2 + [80])) = [0]
	$9 = *($0)
	*(($2 + [56])) = $9
	*($2 + [88]) = $1
	*($2 + [32]) = $9
	*($2 + [40]) = $9
	*($2 + [48]) = $9
	$9 = (int_64)59
	$3 = [9356]
	$8 = (int_64)0
	
.LOOP $label$67:
	$7 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$68 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$70 }
	$4 = ($4 + [-91])
	goto $label$69 
	
.LABEL $label$70
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$69
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $4) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$68
	$3 = ($3 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$8 = ((int_64)$7 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$67 }
	*(($2 + [8])) = (int_64)1397703940
	*($2 + [24]) = (int_64)1397703940
	$6 = (int_64)
	*($2) = $6((int_64)0 - $13))
	*($2 + [16]) = $6
	CALL $48(($2 + [32]), $8, $2)
	$5 = *(($2 + [72]))
	if ( ($5 == 0) ){ goto $label$71 }
	$0 = ($2 + [76])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$73 }
	
.LOOP $label$74:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$75 }
	CALL _ZdlPv($4)
	
.LABEL $label$75
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$74 }
	$3 = *(($2 + [72]))
	goto $label$72 
	
.LABEL $label$73
	$3 = $5
	
.LABEL $label$72
	*($0) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$71
	CALL $104($12)
	
.LABEL $label$38
	if ( (*($2 + [400]) & [1]) ){ goto $label$77 }
	if ( (*($2 + [416]) & [1]) ){ goto $label$76 }
	goto $label$5 
	
.LABEL $label$77
	CALL _ZdlPv(*(($10 + [8])))
	if ( ((*($2 + [416]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$76
	CALL _ZdlPv(*(($11 + [8])))
	$3 = [1]
	if ( ((*($2 + [480]) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$9
	CALL $291(($2 + [496]))
	
.LABEL $label$8
	CALL $291(($2 + [448]))
	
.LABEL $label$7
	CALL $291(($2 + [432]))
	
.LABEL $label$6
	CALL $291(($2 + [32]))
	
.LABEL $label$5
	$3 = [1]
	if ( (*($2 + [480]) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($2 + [496]) & $3) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*(($2 + [488])))
	if ( ((*($2 + [496]) & $3) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($2 + [504]))
	$global$0 = ($2 + [512])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [512])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $300($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $115 (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($global$0 - [288])
	$global$0 = $2
	CALL require_auth($1)
	$0 = CALL $100(($2 + [8]), *($0), $1, $1)
	CALL $116($0)
	CALL $104($0)
	$global$0 = ($2 + [288])
}

void .FUNC $112 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$3 = ($global$0 - [480])
	$global$0 = $3
	CALL require_auth($1)
	*(($3 + [472])) = [0]
	*($3 + [464]) = (int_64)0
	$4 = CALL $302([9369])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$17 }
	*($3 + [464]) = ($4 << [1])
	$5 = (($3 + [464]) | [1])
	if ( $4 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [464]) = ($6 | [1])
	*($3 + [472]) = $5
	*($3 + [468]) = $4
	
.LABEL $label$16
	CALL memcpy($5, [9369], $4)
	
.LABEL $label$15
	*(($5 + $4)) = [0]
	*($3 + [20]) = [0]
	$4 = ($3 + [20])
	$7 = (CASTING uint_64)(uint_32 $2)
	
.LOOP $label$18:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	*(($4 = ($4 + [-1]))) = ((CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))) | [48])
	$5 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $5 ){ goto $label$18 }
	*(($3 + [328])) = [0]
	*($3 + [320]) = (int_64)0
	$5 = CALL $302($4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$21 }
	*($3 + [320]) = ($5 << [1])
	$9 = (($3 + [320]) | [1])
	$6 = $9
	if ( $5 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$9 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($3 + [320]) = ($9 | [1])
	*($3 + [328]) = $6
	*($3 + [324]) = $5
	$9 = (($3 + [320]) | [1])
	
.LABEL $label$20
	CALL memcpy($6, $4, $5)
	
.LABEL $label$19
	*(($6 + $5)) = [0]
	$4 = *($3 + [320])
	$5 = ($4 & [1])
	$4 = CALL $297(($3 + [464]), ( *($3 + [328]) ? $9 : $5 ), ( *($3 + [324]) ? uint_32($4 >> [1]) : $5 ))
	$7 = *($4)
	*($4) = (int_64)0
	$4 = ($4 + [8])
	*((($3 + [448]) + [8])) = *($4)
	*($4) = [0]
	*($3 + [448]) = $7
	if ( ((*($3 + [320]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*((($3 + [320]) + [8])))
	
.LABEL $label$22
	if ( ((*($3 + [464]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($3 + [472]))
	
.LABEL $label$23
	*(($3 + [440])) = [0]
	*($3 + [432]) = (int_64)0
	$4 = CALL $302([8776])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$26 }
	*($3 + [432]) = ($4 << [1])
	$6 = (($3 + [432]) | [1])
	if ( $4 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$5 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [432]) = ($5 | [1])
	*($3 + [440]) = $6
	*($3 + [436]) = $4
	
.LABEL $label$25
	CALL memcpy($6, [8776], $4)
	
.LABEL $label$24
	$5 = [0]
	*(($6 + $4)) = [0]
	$4 = ( *($3 + [456]) ? (($3 + [448]) | [1]) : (*($3 + [448]) & [1]) )
	
.LOOP $label$27:
	$6 = ($4 + $5)
	$9 = ($5 + [1])
	$5 = $9
	if ( *($6) ){ goto $label$27 }
	$10 = (CASTING uint_64)(uint_32 ($9 + [-1]))
	$7 = (int_64)0
	$8 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$28:
	$12 = (int_64)0
	if ( ((uint_64)$7 >= (uint_64)$10) ){ goto $label$29 }
	$5 = *($4)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$5 = ($5 + [-91])
	goto $label$30 
	
.LABEL $label$31
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$33 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$32 
	
.LABEL $label$33
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$32
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$28 }
	$5 = CALL $292(($3 + [400]), ($3 + [432]))
	$6 = ($0 + [24])
	$4 = *($6)
	if ( $4 ){ goto $label$34 }
	*(($4 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48]) = [0]
	*($6) = $4
	$7 = *($0 + [16])
	*($4) = $7
	*($4 + [8]) = $7
	*($4 + [16]) = $7
	*($4 + [24]) = $7
	
.LABEL $label$34
	$6 = CALL $292($3, $5)
	CALL $52(($3 + [416]), $4, $11, $6)
	if ( ((*($3) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$35
	if ( ((*($5) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$36
	*(($3 + [392])) = [0]
	*($3 + [384]) = (int_64)0
	$4 = CALL $302([9377])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$39 }
	*($3 + [384]) = ($4 << [1])
	$5 = (($3 + [384]) | [1])
	if ( $4 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [384]) = ($6 | [1])
	*($3 + [392]) = $5
	*($3 + [388]) = $4
	
.LABEL $label$38
	CALL memcpy($5, [9377], $4)
	
.LABEL $label$37
	*(($5 + $4)) = [0]
	CALL $53(($3 + [416]), ($3 + [432]), ($3 + [384]))
	if ( ((*($3 + [384]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*($3 + [392]))
	
.LABEL $label$40
	$5 = ( *($3 + [420]) ? uint_32($5 >> [1]) : $6 )
	$5 = *($3 + [416])
	$6 = ($5 & [1])
	$9 = (($3 + [416]) | [1])
	$4 = ( *($3 + [424]) ? $9 : $6 )
	$13 = ($4 + $5)
	if ( ($5 == 0) ){ goto $label$41 }
	
.LOOP $label$42:
	if ( ((int_32)*($4) == (int_32)[44]) ){ goto $label$41 }
	$4 = ($4 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$42 }
	$4 = $13
	
.LABEL $label$41
	*(($3 + [376])) = [0]
	*($3 + [368]) = (int_64)0
	$5 = CALL $302([9393])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$45 }
	*($3 + [368]) = ($5 << [1])
	$6 = (($3 + [368]) | [1])
	if ( $5 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$14 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($14)
	*($3 + [368]) = ($14 | [1])
	*($3 + [376]) = $6
	*($3 + [372]) = $5
	
.LABEL $label$44
	CALL memcpy($6, [9393], $5)
	
.LABEL $label$43
	*(($6 + $5)) = [0]
	$5 = CALL $292($3, ($3 + [368]))
	CALL eosio_assert(((int_32)$4 != (int_32)$13), ( *($5 + [8]) ? ($5 + [1]) : (*($3) & [1]) ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$46
	if ( ((*($3 + [368]) & [1]) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*($3 + [376]))
	
.LABEL $label$47
	$5 = ($3 + [424])
	$13 = CALL $293(($3 + [352]), ($3 + [416]), [0], ($4 - ( *($5) ? $9 : (*($3 + [416]) & [1]) )), ($3 + [416]))
	$9 = CALL $293(($3 + [336]), ($3 + [416]), (($4 + [1]) - ( *($5) ? $9 : (*($3 + [416]) & [1]) )), [-1], ($3 + [416]))
	$7 = (int_64)0
	$8 = (int_64)0
	$4 = ($4 & [1])
	$4 = *($3 + [352])
	$5 = ( *($13 + [4]) ? uint_32($4 >> [1]) : $4 )
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$48 }
	$4 = ( *($13 + [8]) ? ($13 + [1]) : $4 )
	$5 = ($4 + $5)
	$8 = (int_64)0
	
.LOOP $label$49:
	$8 = ((int_64)((int_64)((int_64)$8 * (int_64)10) + (int_64)*($4)) + (int_64)-48)
	$4 = ($4 + [1])
	if ( ($4 <= $5) ){ goto $label$49 }
	
.LABEL $label$48
	CALL prints([9414])
	$4 = *($3 + [336])
	$5 = ($4 & [1])
	$6 = ($9 + [1])
	CALL prints_l(( *($9 + [8]) ? $6 : $5 ), ( *($9 + [4]) ? uint_32($4 >> [1]) : $5 ))
	$4 = ($4 & [1])
	$4 = *($3 + [336])
	$5 = ( *($9 + [4]) ? uint_32($4 >> [1]) : $4 )
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$50 }
	$4 = ( *($9 + [8]) ? $6 : $4 )
	$5 = ($4 + $5)
	$7 = (int_64)0
	
.LOOP $label$51:
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)*($4)) + (int_64)-48)
	$4 = ($4 + [1])
	if ( ($4 <= $5) ){ goto $label$51 }
	
.LABEL $label$50
	*($3 + [328]) = (int_64)5522180
	*($3 + [320]) = $7
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9768])
	$7 = (uint_64)*($3 + [328]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$54:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$53 }
	$12 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$55 }
	$7 = $12
	$5 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$55
	$7 = $12
	
.LOOP $label$56:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$53 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $5 ){ goto $label$56 }
	$5 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	$5 = [0]
	
.LABEL $label$52
	CALL eosio_assert($5, [8204])
	CALL prints([9425])
	CALL $90(($3 + [320]))
	$5 = CALL $62(($0 + [136]))
	*(($3 + [312])) = [0]
	*($3 + [304]) = (int_64)0
	$4 = CALL $302([9433])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$9 }
	$7 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$59 }
	*($3 + [304]) = ($4 << [1])
	$6 = (($3 + [304]) | [1])
	$5 = $6
	if ( $4 ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$59
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [304]) = ($6 | [1])
	*($3 + [312]) = $5
	*($3 + [308]) = $4
	$6 = (($3 + [304]) | [1])
	
.LABEL $label$58
	CALL memcpy($5, [9433], $4)
	
.LABEL $label$57
	*(($5 + $4)) = [0]
	CALL eosio_assert(((uint_64)$8 <= (uint_64)$7), ( *($3 + [312]) ? $6 : (*($3 + [304]) & [1]) ))
	if ( ((*($3 + [304]) & [1]) == 0) ){ goto $label$60 }
	CALL _ZdlPv(*(($3 + [312])))
	
.LABEL $label$60
	$7 = (int_64)0
	$8 = (int_64)59
	$4 = [9060]
	$11 = (int_64)0
	
.LOOP $label$61:
	$12 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$62 }
	$5 = *($4)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$64 }
	$5 = ($5 + [-91])
	goto $label$63 
	
.LABEL $label$64
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$63
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$62
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$61 }
	*(($3 + [472])) = [0]
	*($3 + [464]) = (int_64)0
	$4 = CALL $302([9466])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$67 }
	*($3 + [464]) = ($4 << [1])
	$5 = (($3 + [464]) | [1])
	if ( $4 ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$67
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [464]) = ($6 | [1])
	*($3 + [472]) = $5
	*($3 + [468]) = $4
	
.LABEL $label$66
	CALL memcpy($5, [9466], $4)
	
.LABEL $label$65
	*(($5 + $4)) = [0]
	$15 = *($0 + [32])
	$7 = (int_64)0
	$12 = (int_64)59
	$4 = [10828]
	$10 = (int_64)0
	
.LOOP $label$68:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$73 }
	$5 = *($4)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$5 = ($5 + [-91])
	goto $label$71 
	
.LABEL $label$73
	$8 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$72
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$70
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$69
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$68 }
	*(($3 + [24])) = *(($3 + [328]))
	*($3 + [8]) = $1
	*($3) = $15
	*($3 + [16]) = *($3 + [320])
	CALL $292(($3 + [32]), ($3 + [464]))
	CALL $29($15, $11, $10, $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$74 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$74
	if ( ((*($3 + [464]) & [1]) == 0) ){ goto $label$75 }
	CALL _ZdlPv(*($3 + [472]))
	
.LABEL $label$75
	*(($4 = (($3 + [288]) + [8]))) = *((($3 + [320]) + [8]))
	*($3 + [288]) = *($3 + [320])
	*((($3 + [464]) + [8])) = *($4)
	*($3 + [464]) = *($3 + [288])
	$10 = *($0)
	$12 = (int_64)0
	$8 = (int_64)59
	$4 = [10837]
	$11 = (int_64)0
	
.LOOP $label$76:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$81 }
	$5 = *($4)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$80 }
	$5 = ($5 + [-91])
	goto $label$79 
	
.LABEL $label$81
	$7 = (int_64)0
	if ( ((int_64)$8 == (int_64)47244640260) ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$80
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$79
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$78
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$77
	$4 = ($4 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$11 = ((int_64)$7 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$76 }
	*(($3 + [16])) = *((($3 + [464]) + [8]))
	*($3 + [8]) = *($3 + [464])
	*($3) = $1
	CALL $94($10, $10, $11, $3)
	$4 = CALL $100($3, *($0), $1, $1)
	CALL $113($4, $2)
	CALL $104($4)
	if ( (*($3 + [336]) & [1]) ){ goto $label$83 }
	if ( (*($3 + [352]) & [1]) ){ goto $label$82 }
	goto $label$7 
	
.LABEL $label$83
	CALL _ZdlPv(*(($9 + [8])))
	if ( ((*($3 + [352]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$82
	CALL _ZdlPv(*(($13 + [8])))
	$4 = [1]
	if ( ((*($3 + [416]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$14
	CALL $291(($3 + [464]))
	
.LABEL $label$13
	CALL $291(($3 + [320]))
	
.LABEL $label$12
	CALL $291(($3 + [432]))
	
.LABEL $label$11
	CALL $291(($3 + [384]))
	
.LABEL $label$10
	CALL $291(($3 + [368]))
	
.LABEL $label$9
	CALL $291(($3 + [304]))
	
.LABEL $label$8
	CALL $291(($3 + [464]))
	
.LABEL $label$7
	$4 = [1]
	if ( (*($3 + [416]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($3 + [432]) & $4) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [424])))
	if ( ((*($3 + [432]) & $4) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [440]))
	if ( ((*($3 + [448]) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3 + [448]) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($3 + [480])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*(($3 + [456])))
	$global$0 = ($3 + [480])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [44]) = $1
	CALL require_auth(*($0 + [272]))
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$3 = *($0 + [64])
	$1 = CALL $302([10940])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$6 }
	*($2 + [32]) = ($1 << [1])
	$4 = (($2 + [32]) | [1])
	if ( $1 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [32]) = ($5 | [1])
	*($2 + [40]) = $4
	*($2 + [36]) = $1
	
.LABEL $label$5
	CALL memcpy($4, [10940], $1)
	
.LABEL $label$4
	*(($4 + $1)) = [0]
	$1 = CALL $292(($2 + [48]), ($2 + [32]))
	CALL eosio_assert($3, ( *($1 + [8]) ? ($1 + [1]) : (*($2 + [48]) & [1]) ))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$7
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($2 + [40]))
	
.LABEL $label$8
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$3 = *(($0 + [216]))
	$1 = CALL $302([10992])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$11 }
	*($2 + [16]) = ($1 << [1])
	$5 = (($2 + [16]) | [1])
	$4 = $5
	if ( $1 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$5 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [16]) = ($5 | [1])
	*($2 + [24]) = $4
	*($2 + [20]) = $1
	$5 = (($2 + [16]) | [1])
	
.LABEL $label$10
	CALL memcpy($4, [10992], $1)
	
.LABEL $label$9
	*(($4 + $1)) = [0]
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), ( *($2 + [24]) ? $5 : (*($2 + [16]) & [1]) ))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$12
	$4 = *(($0 + [248]))
	$6 = ($0 + [244])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$13 }
	$3 = *($2 + [44])
	
.LOOP $label$14:
	if ( ((int_32)*($1) == (int_32)$3) ){ goto $label$13 }
	$1 = ($1 + [4])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$14 }
	$1 = $4
	
.LABEL $label$13
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = CALL $302([11011])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$17 }
	*($2) = ($3 << [1])
	$5 = ($2 | [1])
	if ( $3 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$7 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($2) = ($7 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $3
	
.LABEL $label$16
	CALL memcpy($5, [11011], $3)
	
.LABEL $label$15
	*(($5 + $3)) = [0]
	$1 = CALL $292(($2 + [48]), $2)
	CALL eosio_assert(((int_32)$1 == (int_32)$4), ( *($1 + [8]) ? ($1 + [1]) : (*($2 + [48]) & [1]) ))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$18
	if ( ((*($2) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$19
	$1 = ($0 + [208])
	$3 = ($0 + [248])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)*(($0 + [252]))) ){ goto $label$21 }
	*($4) = *($2 + [44])
	*($3) = ($4 + [4])
	goto $label$20 
	
.LABEL $label$21
	CALL $114($6, ($2 + [44]))
	
.LABEL $label$20
	*(($0 + [104])) = *($1)
	*(($0 + [112])) = *(($1 + [8]))
	CALL $294(($0 + [116]), ($0 + [220]))
	CALL $66(($0 + [128]), *(($0 + [232])), *(($0 + [236])))
	CALL $106(($0 + [140]), *(($0 + [244])), *(($0 + [248])))
	*(($0 + [65])) = [1]
	*(($0 + [160])) = *(($0 + [264]))
	*(($0 + [152])) = *(($0 + [256]))
	$global$0 = ($2 + [64])
	return (unreachable)
	
.LABEL $label$3
	CALL $291(($2 + [32]))
	
.LABEL $label$2
	CALL $291(($2 + [16]))
	
.LABEL $label$1
	CALL $291($2)
	(unreachable)
	(unreachable)
}

void .FUNC $110 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [288])
	$global$0 = $3
	CALL require_auth($1)
	$0 = CALL $100(($3 + [8]), *($0), $1, $1)
	CALL $111($0, $2)
	CALL $104($0)
	$global$0 = ($3 + [288])
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$2 = ($global$0 - [256])
	$global$0 = $2
	CALL require_auth(*($0 + [272]))
	$3 = ($0 + [220])
	$4 = *($3)
	if ( ($4 & [1]) ){ goto $label$2 }
	$5 = uint_32($4 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($0 + [224]))
	
.LABEL $label$1
	*(($2 + [232])) = [0]
	*($2 + [224]) = (int_64)0
	$4 = CALL $302([10973])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$7 }
	*($2 + [224]) = ($4 << [1])
	$6 = (($2 + [224]) | [1])
	$7 = $6
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($2 + [224]) = ($8 | [1])
	*($2 + [232]) = $7
	*($2 + [228]) = $4
	$6 = (($2 + [224]) | [1])
	
.LABEL $label$6
	CALL memcpy($7, [10973], $4)
	
.LABEL $label$5
	$8 = [0]
	*(($7 + $4)) = [0]
	CALL eosio_assert(($5 == 0), ( *($2 + [232]) ? $6 : (*($2 + [224]) & [1]) ))
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [232])))
	
.LABEL $label$8
	$6 = ($0 + [208])
	$4 = ( *($1 + [8]) ? ($1 + [1]) : (*($1) & [1]) )
	
.LOOP $label$9:
	$7 = ($4 + $8)
	$5 = ($8 + [1])
	$8 = $5
	if ( *($7) ){ goto $label$9 }
	$9 = (CASTING uint_64)(uint_32 ($5 + [-1]))
	$10 = (int_64)0
	$11 = (int_64)59
	$12 = (int_64)0
	
.LOOP $label$10:
	$13 = (int_64)0
	if ( ((uint_64)$10 >= (uint_64)$9) ){ goto $label$11 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$8 = ($8 + [-91])
	goto $label$12 
	
.LABEL $label$13
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$15 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	goto $label$14 
	
.LABEL $label$15
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$14
	$4 = ($4 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$10 }
	*(($2 + [132])) = (int_64)0
	*(($2 + [140])) = (int_64)0
	*(($2 + [148])) = (int_64)0
	*(($2 + [156])) = (int_64)0
	*(($2 + [164])) = [0]
	$10 = *($0)
	*(($2 + [192])) = $10
	*(($2 + [200])) = (int_64)-1
	*(($2 + [208])) = (int_64)0
	*(($2 + [216])) = [0]
	*($2 + [80]) = [0]
	*($2 + [112]) = $12
	*($2 + [88]) = $10
	*($2 + [96]) = $10
	*($2 + [184]) = $10
	*($2 + [104]) = *(($0 + [272]))
	$8 = CALL $101(($2 + [16]), CALL $105(($2 + [80])))
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$5 = *($2 + [80])
	$4 = CALL $302([10955])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$18 }
	*($2) = ($4 << [1])
	$7 = ($2 | [1])
	if ( $4 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$14 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($14)
	*($2) = ($14 | [1])
	*($2 + [8]) = $7
	*($2 + [4]) = $4
	
.LABEL $label$17
	CALL memcpy($7, [10955], $4)
	
.LABEL $label$16
	*(($7 + $4)) = [0]
	$4 = CALL $292(($2 + [240]), $2)
	CALL eosio_assert($5, ( *($4 + [8]) ? ($4 + [1]) : (*($2 + [240]) & [1]) ))
	if ( ((*($2 + [240]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$19
	if ( ((*($2) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$20
	CALL $294($3, $1)
	*(($0 + [112])) = *(($6 + [8]))
	*(($0 + [104])) = *($6)
	CALL $294(($0 + [116]), $3)
	CALL $66(($0 + [128]), *(($0 + [232])), *(($0 + [236])))
	CALL $106(($0 + [140]), *(($0 + [244])), *(($0 + [248])))
	*(($0 + [65])) = [1]
	*(($0 + [160])) = *(($0 + [264]))
	*(($0 + [152])) = *(($0 + [256]))
	$4 = *($8 + [36])
	if ( ($4 == 0) ){ goto $label$21 }
	*(($8 + [40])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$21
	$4 = *($8 + [24])
	if ( ($4 == 0) ){ goto $label$22 }
	*(($8 + [28])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$22
	if ( ((*($8 + [12]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($8 + [20])))
	
.LABEL $label$23
	CALL $108(($2 + [80]))
	CALL $109(($2 + [208]))
	$4 = *(($2 + [156]))
	if ( ($4 == 0) ){ goto $label$24 }
	*(($2 + [160])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$24
	$4 = *(($2 + [144]))
	if ( ($4 == 0) ){ goto $label$25 }
	*(($2 + [148])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((*(($2 + [132])) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($2 + [140])))
	
.LABEL $label$26
	$global$0 = ($2 + [256])
	return (unreachable)
	
.LABEL $label$4
	CALL $291(($2 + [224]))
	
.LABEL $label$3
	CALL $291($2)
	(unreachable)
}

void .FUNC $237 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [48])
	$global$0 = $1
	if ( (*($0 + [1]) == 0) ){ goto $label$5 }
	$2 = ($0 + [80])
	$3 = *($0 + [32])
	$5 = *(($0 + [108]))
	$4 = *(($0 + [104]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$10:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$9 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($7 + [36]) == (int_32)$2), [9924])
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$6 = CALL db_find_i64(*($2), *(($0 + [88])), (int_64)6457483382686220288, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $92($2, $6)
	CALL eosio_assert(((int_32)*($7 + [36]) == (int_32)$2), [9924])
	
.LABEL $label$7
	*(($1 + [16])) = [0]
	*($1 + [8]) = (int_64)0
	$6 = CALL $302([10003])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$4 }
	*($1 + [8]) = ($6 << [1])
	$5 = (($1 + [8]) | [1])
	if ( $6 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [24])
	*($1 + [24]) = $0
	CALL $242(($1 + [32]), $2, $3, ($1 + [24]))
	
.LABEL $label$5
	$global$0 = ($1 + [48])
	return 
	
.LABEL $label$4
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($1 + [8]) = ($4 | [1])
	*($1 + [16]) = $5
	*($1 + [12]) = $6
	
.LABEL $label$3
	CALL memcpy($5, [10003], $6)
	
.LABEL $label$2
	*(($5 + $6)) = [0]
	$6 = CALL $292(($1 + [32]), ($1 + [8]))
	CALL eosio_assert(*($0), ( *($6 + [8]) ? ($6 + [1]) : (*($1 + [32]) & [1]) ))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($1 + [16]))
	
.LABEL $label$12
	$3 = *($0 + [24])
	*($1 + [32]) = $0
	CALL eosio_assert([1], [10081])
	CALL $243($2, $7, $3, ($1 + [32]))
	$global$0 = ($1 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $291(($1 + [8]))
}

void .FUNC $118 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [64])
	$global$0 = $1
	CALL require_auth(*($0 + [272]))
	*(($1 + [40])) = [0]
	*($1 + [32]) = (int_64)0
	$2 = *($0 + [64])
	$3 = CALL $302([10940])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($1 + [32]) = ($3 << [1])
	$4 = (($1 + [32]) | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($1 + [32]) = ($5 | [1])
	*($1 + [40]) = $4
	*($1 + [36]) = $3
	
.LABEL $label$5
	CALL memcpy($4, [10940], $3)
	
.LABEL $label$4
	*(($4 + $3)) = [0]
	$3 = CALL $292(($1 + [48]), ($1 + [32]))
	CALL eosio_assert($2, ( *($3 + [8]) ? ($3 + [1]) : (*($1 + [48]) & [1]) ))
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$7
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($1 + [40]))
	
.LABEL $label$8
	*(($1 + [24])) = [0]
	*($1 + [16]) = (int_64)0
	$2 = *(($0 + [216]))
	$3 = CALL $302([10992])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$11 }
	*($1 + [16]) = ($3 << [1])
	$5 = (($1 + [16]) | [1])
	$4 = $5
	if ( $3 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($1 + [16]) = ($5 | [1])
	*($1 + [24]) = $4
	*($1 + [20]) = $3
	$5 = (($1 + [16]) | [1])
	
.LABEL $label$10
	CALL memcpy($4, [10992], $3)
	
.LABEL $label$9
	*(($4 + $3)) = [0]
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), ( *($1 + [24]) ? $5 : (*($1 + [16]) & [1]) ))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$12
	*(($1 + [8])) = [0]
	$2 = (*($4) + [1])
	*(($4 = ($0 + [256]))) = $2
	*($1) = (int_64)0
	$5 = *(($0 + [232]))
	$6 = *(($0 + [236]))
	$3 = CALL $302([11065])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = int_32(($6 - $5) >> [3])
	$7 = ((int_32)$2 * (int_32)[3])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$15 }
	*($1) = ($3 << [1])
	$8 = ($1 | [1])
	$2 = $8
	if ( $3 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$5 = (($3 + [16]) & [-16])
	$2 = CALL _Znwj($5)
	*($1) = ($5 | [1])
	*($1 + [8]) = $2
	*($1 + [4]) = $3
	$8 = ($1 | [1])
	
.LABEL $label$14
	CALL memcpy($2, [11065], $3)
	
.LABEL $label$13
	$5 = ($0 + [208])
	*(($2 + $3)) = [0]
	CALL eosio_assert(((uint_32)$7 <= (uint_32)$6), ( *($1 + [8]) ? $8 : (*($1) & [1]) ))
	if ( ((*($1) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$16
	*(($0 + [104])) = *($5)
	*(($0 + [112])) = *(($5 + [8]))
	CALL $294(($0 + [116]), ($0 + [220]))
	CALL $66(($0 + [128]), *(($0 + [232])), *(($0 + [236])))
	CALL $106(($0 + [140]), *(($0 + [244])), *(($0 + [248])))
	*(($0 + [65])) = [1]
	*(($0 + [160])) = *(($4 + [8]))
	*(($0 + [152])) = *($4)
	$global$0 = ($1 + [64])
	return (unreachable)
	
.LABEL $label$3
	CALL $291(($1 + [32]))
	
.LABEL $label$2
	CALL $291(($1 + [16]))
	
.LABEL $label$1
	CALL $291($1)
	(unreachable)
	(unreachable)
}

void .FUNC $119 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [560])
	$global$0 = $4
	CALL require_auth(*($0))
	*(($4 + [176])) = [0]
	*($4 + [168]) = (int_64)0
	$5 = CALL $302([9547])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$12 }
	*($4 + [168]) = ($5 << [1])
	$6 = (($4 + [168]) | [1])
	if ( $5 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [168]) = ($7 | [1])
	*($4 + [176]) = $6
	*($4 + [172]) = $5
	
.LABEL $label$11
	CALL memcpy($6, [9547], $5)
	
.LABEL $label$10
	*(($6 + $5)) = [0]
	$5 = *($3)
	$6 = ($5 & [1])
	$8 = ($3 + [1])
	$5 = CALL $297(($4 + [168]), ( *($3 + [8]) ? $8 : $6 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $6 ))
	$9 = *($5)
	*($5) = (int_64)0
	$5 = ($5 + [8])
	*((($4 + [512]) + [8])) = *($5)
	*($5) = [0]
	*($4 + [512]) = $9
	if ( ((*($4 + [168]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($4 + [176]))
	
.LABEL $label$13
	*((($4 + [496]) + [8])) = [0]
	*($4 + [496]) = (int_64)0
	$5 = CALL $302([8776])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$16 }
	*($4 + [496]) = ($5 << [1])
	$7 = (($4 + [496]) | [1])
	if ( $5 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$6 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($4 + [496]) = ($6 | [1])
	*($4 + [504]) = $7
	*($4 + [500]) = $5
	
.LABEL $label$15
	CALL memcpy($7, [8776], $5)
	
.LABEL $label$14
	$6 = [0]
	*(($7 + $5)) = [0]
	$5 = ( *($4 + [520]) ? (($4 + [512]) | [1]) : (*($4 + [512]) & [1]) )
	
.LOOP $label$17:
	$7 = ($5 + $6)
	$10 = ($6 + [1])
	$6 = $10
	if ( *($7) ){ goto $label$17 }
	$11 = (CASTING uint_64)(uint_32 ($10 + [-1]))
	$9 = (int_64)0
	$12 = (int_64)59
	$13 = (int_64)0
	
.LOOP $label$18:
	$14 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$11) ){ goto $label$19 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [-91])
	goto $label$20 
	
.LABEL $label$21
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$23 }
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	goto $label$22 
	
.LABEL $label$23
	$14 = ((int_64)$14 & (int_64)15)
	
.LABEL $label$22
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$18 }
	$6 = CALL $292(($4 + [464]), ($4 + [496]))
	$7 = ($0 + [24])
	$5 = *($7)
	if ( $5 ){ goto $label$24 }
	*(($5 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($7) = $5
	$9 = *(($0 + [16]))
	*($5) = $9
	*($5 + [8]) = $9
	*($5 + [16]) = $9
	*($5 + [24]) = $9
	
.LABEL $label$24
	$7 = CALL $292(($4 + [168]), $6)
	CALL $52(($4 + [480]), $5, $13, $7)
	if ( ((*($4 + [168]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$25
	if ( ((*($6) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$26
	*(($4 + [456])) = [0]
	*($4 + [448]) = (int_64)0
	$5 = CALL $302([9557])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$29 }
	*($4 + [448]) = ($5 << [1])
	$6 = (($4 + [448]) | [1])
	if ( $5 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [448]) = ($7 | [1])
	*($4 + [456]) = $6
	*($4 + [452]) = $5
	
.LABEL $label$28
	CALL memcpy($6, [9557], $5)
	
.LABEL $label$27
	*(($6 + $5)) = [0]
	CALL $53(($4 + [480]), ($4 + [496]), ($4 + [448]))
	if ( ((*($4 + [448]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*($4 + [456]))
	
.LABEL $label$30
	$12 = (int_64)0
	$5 = ($5 & [1])
	$5 = *($4 + [480])
	$6 = ( *($4 + [484]) ? uint_32($5 >> [1]) : $5 )
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$31 }
	$5 = ( *($4 + [488]) ? (($4 + [480]) | [1]) : $5 )
	$6 = ($5 + $6)
	$12 = (int_64)0
	
.LOOP $label$32:
	$12 = ((int_64)((int_64)((int_64)$12 * (int_64)10) + (int_64)*($5)) + (int_64)-48)
	$5 = ($5 + [1])
	if ( ($5 <= $6) ){ goto $label$32 }
	
.LABEL $label$31
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9768])
	$9 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$14 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$36 }
	$9 = $14
	$6 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$36
	$9 = $14
	
.LOOP $label$37:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$34 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $6 ){ goto $label$37 }
	$6 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$6 = [0]
	
.LABEL $label$33
	CALL eosio_assert($6, [8204])
	$9 = *($0)
	$15 = CALL $100(($4 + [168]), $9, $9, $1)
	$16 = CALL $101(($4 + [104]), ($15 + [208]))
	if ( (*($16 + [8]) <= [2]) ){ goto $label$38 }
	*(($4 + [80])) = [0]
	*($4 + [72]) = (int_64)0
	$5 = CALL $302([9547])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$41 }
	*($4 + [72]) = ($5 << [1])
	$6 = (($4 + [72]) | [1])
	if ( $5 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [72]) = ($7 | [1])
	*($4 + [80]) = $6
	*($4 + [76]) = $5
	
.LABEL $label$40
	CALL memcpy($6, [9547], $5)
	
.LABEL $label$39
	*(($6 + $5)) = [0]
	$9 = *(($16 + [8]))
	*($4 + [548]) = [0]
	$5 = ($4 + [548])
	
.LOOP $label$42:
	$14 = ((uint_64)$9 / (uint_64)(int_64)10)
	*(($5 = ($5 + [-1]))) = ((CASTING uint_32)(uint_64 (int_64))($9 - ((int_64)$14 * (int_64)10))) | [48])
	$6 = ((uint_64)$9 > (uint_64)(int_64)9)
	$9 = $14
	if ( $6 ){ goto $label$42 }
	*(($4 + [64])) = [0]
	*($4 + [56]) = (int_64)0
	$6 = CALL $302($5)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$45 }
	*($4 + [56]) = ($6 << [1])
	$10 = (($4 + [56]) | [1])
	$7 = $10
	if ( $6 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$10 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($4 + [56]) = ($10 | [1])
	*($4 + [64]) = $7
	*($4 + [60]) = $6
	$10 = (($4 + [56]) | [1])
	
.LABEL $label$44
	CALL memcpy($7, $5, $6)
	
.LABEL $label$43
	*(($7 + $6)) = [0]
	$5 = *($4 + [56])
	$6 = ($5 & [1])
	$5 = CALL $297(($4 + [72]), ( *($4 + [64]) ? $10 : $6 ), ( *($4 + [60]) ? uint_32($5 >> [1]) : $6 ))
	$9 = *($5)
	*($5) = (int_64)0
	$5 = ($5 + [8])
	*((($4 + [88]) + [8])) = *($5)
	*($5) = [0]
	*($4 + [88]) = $9
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*((($4 + [56]) + [8])))
	
.LABEL $label$46
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*($4 + [80]))
	
.LABEL $label$47
	$5 = ( *($4 + [96]) ? (($4 + [88]) | [1]) : (*($4 + [88]) & [1]) )
	$6 = [0]
	
.LOOP $label$48:
	$7 = ($5 + $6)
	$10 = ($6 + [1])
	$6 = $10
	if ( *($7) ){ goto $label$48 }
	$1 = (CASTING uint_64)(uint_32 ($10 + [-1]))
	$9 = (int_64)0
	$14 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$49:
	$13 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$1) ){ goto $label$50 }
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$6 = ($6 + [-91])
	goto $label$51 
	
.LABEL $label$52
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$50
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$54 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	goto $label$53 
	
.LABEL $label$54
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$53
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$13 | (int_64)$11)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$49 }
	$6 = CALL $292(($4 + [40]), ($4 + [496]))
	$7 = ($0 + [24])
	$5 = *($7)
	if ( $5 ){ goto $label$55 }
	*(($5 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($7) = $5
	$9 = *(($0 + [16]))
	*($5) = $9
	*($5 + [8]) = $9
	*($5 + [16]) = $9
	*($5 + [24]) = $9
	
.LABEL $label$55
	$7 = CALL $292(($4 + [528]), $6)
	CALL $52(($4 + [72]), $5, $11, $7)
	if ( ((*($4 + [528]) & [1]) == 0) ){ goto $label$56 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$56
	if ( ((*($6) & [1]) == 0) ){ goto $label$57 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$57
	*(($4 + [32])) = [0]
	*($4 + [24]) = (int_64)0
	$5 = CALL $302([9557])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$60 }
	*($4 + [24]) = ($5 << [1])
	$6 = (($4 + [24]) | [1])
	if ( $5 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [24]) = ($7 | [1])
	*($4 + [32]) = $6
	*($4 + [28]) = $5
	
.LABEL $label$59
	CALL memcpy($6, [9557], $5)
	
.LABEL $label$58
	*(($6 + $5)) = [0]
	CALL $53(($4 + [72]), ($4 + [496]), ($4 + [24]))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$61 }
	CALL _ZdlPv(*($4 + [32]))
	
.LABEL $label$61
	$14 = (int_64)0
	$5 = ($5 & [1])
	$5 = *($4 + [72])
	$6 = ( *($4 + [76]) ? uint_32($5 >> [1]) : $5 )
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$62 }
	$5 = ( *($4 + [80]) ? (($4 + [72]) | [1]) : $5 )
	$6 = ($5 + $6)
	$14 = (int_64)0
	
.LOOP $label$63:
	$14 = ((int_64)((int_64)((int_64)$14 * (int_64)10) + (int_64)*($5)) + (int_64)-48)
	$5 = ($5 + [1])
	if ( ($5 <= $6) ){ goto $label$63 }
	
.LABEL $label$62
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9768])
	$9 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$66:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$65 }
	$13 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$67 }
	$9 = $13
	$6 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$66 }
	goto $label$64 
	
.LABEL $label$67
	$9 = $13
	
.LOOP $label$68:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$65 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $6 ){ goto $label$68 }
	$6 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$66 }
	goto $label$64 
	
.LABEL $label$65
	$6 = [0]
	
.LABEL $label$64
	CALL eosio_assert($6, [8204])
	CALL eosio_assert([1], [10849])
	$12 = (int_64)
	CALL eosio_assert(((int_64)$12($12 - $14)) > (int_64)-4611686018427387904), [10897])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [10919])
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$69 }
	CALL _ZdlPv(*(($4 + [80])))
	
.LABEL $label$69
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($4 + [96])))
	
.LABEL $label$38
	*(($4 + [16])) = [0]
	*($4 + [8]) = (int_64)0
	$5 = CALL $302([9575])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$72 }
	*($4 + [8]) = ($5 << [1])
	$6 = (($4 + [8]) | [1])
	if ( $5 ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$72
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [8]) = ($7 | [1])
	*($4 + [16]) = $6
	*($4 + [12]) = $5
	
.LABEL $label$71
	CALL memcpy($6, [9575], $5)
	
.LABEL $label$70
	*(($6 + $5)) = [0]
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1397703940), [9853])
	$5 = CALL $292(($4 + [528]), ($4 + [8]))
	CALL eosio_assert(((int_64)*($2) == (int_64)$12), ( *($5 + [8]) ? ($5 + [1]) : (*($4 + [528]) & [1]) ))
	if ( ((*($4 + [528]) & [1]) == 0) ){ goto $label$73 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$73
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$74 }
	CALL _ZdlPv(*($4 + [16]))
	
.LABEL $label$74
	$5 = ($5 & [1])
	$5 = *($3)
	$6 = ( *(($3 + [4])) ? uint_32($5 >> [1]) : $5 )
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$75 }
	$5 = ( *(($3 + [8])) ? $8 : $5 )
	$6 = ($5 + $6)
	$9 = (int_64)0
	
.LOOP $label$76:
	$9 = ((int_64)((int_64)((int_64)$9 * (int_64)10) + (int_64)*($5)) + (int_64)-48)
	$5 = ($5 + [1])
	if ( ($5 <= $6) ){ goto $label$76 }
	CALL $107($15, (CASTING uint_32)(uint_64 $9))
	$5 = *($16 + [36])
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$75
	CALL $107($15, [0])
	$5 = *($16 + [36])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$9
	CALL $291(($4 + [168]))
	
.LABEL $label$8
	CALL $291(($4 + [496]))
	
.LABEL $label$7
	CALL $291(($4 + [448]))
	
.LABEL $label$6
	CALL $291(($4 + [8]))
	
.LABEL $label$5
	CALL $291(($4 + [72]))
	
.LABEL $label$4
	CALL $291(($4 + [56]))
	
.LABEL $label$3
	CALL $291(($4 + [24]))
	
.LABEL $label$2
	*(($16 + [40])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$5 = *($16 + [24])
	if ( ($5 == 0) ){ goto $label$77 }
	*(($16 + [28])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$77
	if ( (*($16 + [12]) & [1]) ){ goto $label$84 }
	CALL $104($15)
	if ( (*($4 + [480]) & [1]) ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	CALL _ZdlPv(*(($16 + [20])))
	CALL $104($15)
	if ( ((*($4 + [480]) & [1]) == 0) ){ goto $label$82 }
	
.LABEL $label$83
	CALL _ZdlPv(*(($4 + [488])))
	$5 = [1]
	if ( ((*($4 + [496]) & [1]) == 0) ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$82
	$5 = [1]
	if ( (*($4 + [496]) & [1]) ){ goto $label$80 }
	
.LABEL $label$81
	if ( (*($4 + [512]) & $5) ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$80
	CALL _ZdlPv(*($4 + [504]))
	if ( ((*($4 + [512]) & $5) == 0) ){ goto $label$78 }
	
.LABEL $label$79
	CALL _ZdlPv(*(($4 + [520])))
	$global$0 = ($4 + [560])
	return 
	
.LABEL $label$78
	$global$0 = ($4 + [560])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $299 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $304(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $298 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $295($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

void .FUNC $295 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $294 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $295($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $297 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $295($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $296 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $291 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $293 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $292 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $29 (int_64 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = (int_64)6
	
.LOOP $label$1:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	*($4 + [16]) = $2
	*($4 + [8]) = $1
	*(($6 = CALL _Znwj([16]))) = $0
	*($6 + [8]) = (int_64)3617214756542218240
	*((($4 + [8]) + [36])) = [0]
	$7 = ($6 + [16])
	*(($4 + [32])) = $7
	*(($4 + [28])) = $7
	*($4 + [24]) = $6
	*($4 + [36 align=4]) = (int_64)0
	$6 = *($3 + [32])
	$7 = ( *(($3 + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [32])
	$5 = (CASTING uint_64)(uint_32 $7)
	$7 = ($4 + [36])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	if ( ($6 == 0) ){ goto $label$4 }
	CALL $30($7, $6)
	$7 = *(($4 + [40]))
	$6 = *(($4 + [36]))
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$6 = [0]
	
.LABEL $label$3
	*($4 + [68]) = $6
	*($4 + [64]) = $6
	*($4 + [72]) = $7
	*($4 + [48]) = ($4 + [64])
	*($4 + [56]) = $3
	CALL $31(($4 + [56]), ($4 + [48]))
	CALL $32(($4 + [64]), ($4 + [8]))
	$6 = *($4 + [64])
	CALL send_inline($6, (*($4 + [68]) - $6))
	$6 = *($4 + [64])
	if ( ($6 == 0) ){ goto $label$5 }
	*($4 + [68]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$6 = *($4 + [36])
	if ( ($6 == 0) ){ goto $label$6 }
	*(($4 + [40])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$6 = *($4 + [24])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [28])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$2 }
	$6 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($3 + [4])
	
.LABEL $label$1
	*(($4 + [32])) = [0]
	*($4 + [24]) = (int_64)0
	$5 = CALL $302([8403])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$6 }
	*($4 + [24]) = ($5 << [1])
	$7 = (($4 + [24]) | [1])
	$8 = $7
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($4 + [24]) = ($7 | [1])
	*($4 + [32]) = $8
	*($4 + [28]) = $5
	$7 = (($4 + [24]) | [1])
	
.LABEL $label$5
	CALL memcpy($8, [8403], $5)
	
.LABEL $label$4
	*(($8 + $5)) = [0]
	CALL eosio_assert(($6 <= [257]), ( *($4 + [32]) ? $7 : (*($4 + [24]) & [1]) ))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$7
	*(($4 + [72])) = [0]
	*($4 + [48]) = $1
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	*($4 + [40]) = *($0)
	$9 = *(CALL $19(($4 + [40]), $2, [9834]) + [8])
	$6 = *($4 + [64])
	if ( ($6 == 0) ){ goto $label$8 }
	$7 = ($4 + [68])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$11:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$12 }
	CALL _ZdlPv($8)
	
.LABEL $label$12
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$11 }
	$5 = *(($4 + [64]))
	goto $label$9 
	
.LABEL $label$10
	$5 = $6
	
.LABEL $label$9
	*($7) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$8
	$5 = CALL $292(($4 + [8]), $3)
	CALL $18($0, $1, $2, $9, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$13
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$3
	CALL $291(($4 + [24]))
}

int_32 .FUNC $235 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9828])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [9828])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $278 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [64])
	$global$0 = $3
	$4 = *($0)
	$5 = (int_64)6
	
.LOOP $label$1:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	$0 = [0]
	
.LOOP $label$2:
	$6 = ($1 + $0)
	$7 = ($0 + [1])
	$0 = $7
	if ( *($6) ){ goto $label$2 }
	$8 = (CASTING uint_64)(uint_32 ($7 + [-1]))
	$5 = (int_64)0
	$9 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$3:
	$11 = (int_64)0
	if ( (uint_64)($5 <= $8) ){ goto $label$7 }
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$0 = ($0 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$5 }
	
.LABEL $label$6
	$11 = ((int_64)$11 & (int_64)15)
	goto $label$4 
	
.LABEL $label$5
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$4
	$1 = ($1 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$3 }
	*($3 + [16]) = $10
	*($3 + [8]) = $4
	*(($1 = CALL _Znwj([16]))) = $4
	*($1 + [8]) = (int_64)3617214756542218240
	*(($3 + [44])) = [0]
	$0 = ($1 + [16])
	*(($3 + [32])) = $0
	*((($3 + [8]) + [20])) = $0
	*($3 + [24]) = $1
	*($3 + [36 align=4]) = (int_64)0
	$1 = *($2 + [16])
	$0 = ( *(($2 + [20])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($0 + [16])
	$5 = (CASTING uint_64)(uint_32 $0)
	$6 = ($2 + [16])
	$0 = ($3 + [36])
	
.LOOP $label$10:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$10 }
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $30($0, $1)
	$0 = *(($3 + [40]))
	$1 = *(($3 + [36]))
	goto $label$11 
	
.LABEL $label$12
	$0 = [0]
	$1 = [0]
	
.LABEL $label$11
	*($3 + [48]) = $1
	*($3 + [56]) = $0
	$0 = ($0 - $1)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9828])
	CALL memcpy($1, $2, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9828])
	CALL memcpy(($1 + [8]), ($2 + [8]), [8])
	*($3 + [52]) = ($1 + [16])
	CALL $201(($3 + [48]), $6)
	CALL $32(($3 + [48]), ($3 + [8]))
	$1 = *($3 + [48])
	CALL send_inline($1, (*($3 + [52]) - $1))
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$13 }
	*($3 + [52]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$1 = *($3 + [36])
	if ( ($1 == 0) ){ goto $label$14 }
	*(($3 + [40])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$1 = *($3 + [24])
	if ( ($1 == 0) ){ goto $label$15 }
	*(($3 + [28])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($3 + [64])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [10336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10381])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10431])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $20 (int_64 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = (int_64)6
	
.LOOP $label$1:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	*($4 + [16]) = $2
	*($4 + [8]) = $1
	*(($6 = CALL _Znwj([16]))) = $0
	*($6 + [8]) = (int_64)3617214756542218240
	*((($4 + [8]) + [36])) = [0]
	$7 = ($6 + [16])
	*(($4 + [32])) = $7
	*(($4 + [28])) = $7
	*($4 + [24]) = $6
	*($4 + [36 align=4]) = (int_64)0
	$6 = *($3 + [32])
	$7 = ( *(($3 + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [32])
	$5 = (CASTING uint_64)(uint_32 $7)
	$7 = ($4 + [36])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	if ( ($6 == 0) ){ goto $label$4 }
	CALL $30($7, $6)
	$7 = *(($4 + [40]))
	$6 = *(($4 + [36]))
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$6 = [0]
	
.LABEL $label$3
	*($4 + [68]) = $6
	*($4 + [64]) = $6
	*($4 + [72]) = $7
	*($4 + [48]) = ($4 + [64])
	*($4 + [56]) = $3
	CALL $204(($4 + [56]), ($4 + [48]))
	CALL $32(($4 + [64]), ($4 + [8]))
	$6 = *($4 + [64])
	CALL send_inline($6, (*($4 + [68]) - $6))
	$6 = *($4 + [64])
	if ( ($6 == 0) ){ goto $label$5 }
	*($4 + [68]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$6 = *($4 + [36])
	if ( ($6 == 0) ){ goto $label$6 }
	*(($4 + [40])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$6 = *($4 + [24])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [28])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$5 = ($global$0 - [128])
	$global$0 = $5
	*((($5 + [24]) + [32])) = [0]
	*($5 + [32]) = $1
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$6 = *($0)
	*($5 + [24]) = $6
	$7 = CALL db_find_i64($6, $1, (int_64)8530947034764866432, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $22(($5 + [24]), $7)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($5 + [24])), [9924])
	CALL eosio_assert([1], [10081])
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($5 + [24])), [10116])
	CALL eosio_assert(((int_64)*($5 + [24]) == (int_64)CALL $fimport$3()), [10162])
	$8 = *($7 + [8])
	$3 = ((int_64)$8 + (int_64)$3)
	*($7 + [8]) = $3
	$6 = *($7)
	CALL eosio_assert([1], [10213])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($5 + [80]), $7, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy((($5 + [80]) | [8]), ($7 + [8]), [8])
	CALL db_update_i64(*($7 + [20]), (int_64)0, ($5 + [80]), [16])
	$7 = (($5 + [24]) + [16])
	if ( (uint_64)($6 <= *($7)) ){ goto $label$1 }
	*($7) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$2
	$9 = *($0)
	CALL eosio_assert(((int_64)$6 == (int_64)CALL $fimport$3()), [10030])
	*(($7 = CALL _Znwj([32])) + [16]) = ($5 + [24])
	*($7) = $2
	*($7 + [8]) = $3
	CALL eosio_assert([1], [9828])
	CALL memcpy(($5 + [80]), $7, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy((($5 + [80]) | [8]), ($7 + [8]), [8])
	$6 = *($7)
	$10 = CALL db_store_i64(*((($5 + [24]) + [8])), (int_64)8530947034764866432, $9, $6, ($5 + [80]), [16])
	*($7 + [20]) = $10
	$11 = (($5 + [24]) + [16])
	if ( (uint_64)($6 <= *($11)) ){ goto $label$3 }
	*($11) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($5 + [72]) = $7
	$6 = *($7)
	*($5 + [80]) = $6
	*($5 + [68]) = $10
	$12 = ($5 + [52])
	$11 = *($12)
	if ( ((uint_32)$11 >= (uint_32)*(($5 + [56]))) ){ goto $label$6 }
	*($11 + [8]) = $6
	*($11 + [16]) = $10
	*($5 + [72]) = [0]
	*($11) = $7
	*($12) = ($11 + [24])
	$7 = *($5 + [72])
	*($5 + [72]) = [0]
	if ( $7 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $24(($5 + [48]), ($5 + [72]), ($5 + [80]), ($5 + [68]))
	$7 = *($5 + [72])
	*($5 + [72]) = [0]
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$8 = (int_64)0
	
.LABEL $label$1
	$4 = CALL $292(($5 + [8]), $4)
	$13 = *($0)
	$14 = (int_64)0
	$9 = (int_64)59
	$7 = [9912]
	$15 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$12 }
	$0 = *($7)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$0 = ($0 + [-91])
	goto $label$10 
	
.LABEL $label$12
	$6 = (int_64)0
	if ( ((int_64)$9 == (int_64)47244640260) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$8
	$7 = ($7 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$6 | (int_64)$15)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$7 }
	*($5 + [88]) = $2
	*($5 + [80]) = $1
	*($5 + [96]) = $8
	*($5 + [104]) = $3
	CALL $292(($5 + [112]), $4)
	CALL $20($13, $13, $15, ($5 + [80]))
	if ( (*($5 + [112]) & [1]) ){ goto $label$17 }
	if ( (*($4) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*(($5 + [120])))
	if ( ((*($4) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*($4 + [8]))
	$4 = *($5 + [48])
	if ( ($4 == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$4 = *($5 + [48])
	if ( $4 ){ goto $label$13 }
	
.LABEL $label$14
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$13
	$11 = ($5 + [52])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$19 }
	
.LOOP $label$20:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$21 }
	CALL _ZdlPv($0)
	
.LABEL $label$21
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$20 }
	$7 = *(($5 + [48]))
	goto $label$18 
	
.LABEL $label$19
	$7 = $4
	
.LABEL $label$18
	*($11) = $4
	CALL _ZdlPv($7)
	$global$0 = ($5 + [128])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9975])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $305($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9998])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9998])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $24(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $308($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5, int_64 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$8 = ($global$0 - [64])
	$global$0 = $8
	CALL require_auth(*($0))
	$9 = CALL is_account($1)
	*(($8 + [56])) = [0]
	*($8 + [48]) = (int_64)0
	$10 = CALL $302([8492])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$5 }
	*($8 + [48]) = ($10 << [1])
	$11 = (($8 + [48]) | [1])
	$12 = $11
	if ( $10 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$11 = (($10 + [16]) & [-16])
	$12 = CALL _Znwj($11)
	*($8 + [48]) = ($11 | [1])
	*($8 + [56]) = $12
	*($8 + [52]) = $10
	$11 = (($8 + [48]) | [1])
	
.LABEL $label$4
	CALL memcpy($12, [8492], $10)
	
.LABEL $label$3
	*(($12 + $10)) = [0]
	CALL eosio_assert($9, ( *($8 + [56]) ? $11 : (*($8 + [48]) & [1]) ))
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($8 + [56])))
	
.LABEL $label$6
	$9 = CALL is_account($4)
	*(($8 + [40])) = [0]
	*($8 + [32]) = (int_64)0
	$10 = CALL $302([8520])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$9 }
	*($8 + [32]) = ($10 << [1])
	$11 = (($8 + [32]) | [1])
	$12 = $11
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$11 = (($10 + [16]) & [-16])
	$12 = CALL _Znwj($11)
	*($8 + [32]) = ($11 | [1])
	*($8 + [40]) = $12
	*($8 + [36]) = $10
	$11 = (($8 + [32]) | [1])
	
.LABEL $label$8
	CALL memcpy($12, [8520], $10)
	
.LABEL $label$7
	*(($12 + $10)) = [0]
	CALL eosio_assert($9, ( *($8 + [40]) ? $11 : (*($8 + [32]) & [1]) ))
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($8 + [40])))
	
.LABEL $label$10
	CALL require_recipient($1)
	CALL require_recipient($4)
	$10 = CALL $292(($8 + [16]), $7)
	CALL $18($0, $1, $2, $3, $10)
	if ( ((*($10) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($10 + [8]))
	
.LABEL $label$11
	$10 = CALL $292($8, $7)
	CALL $23($0, $4, $5, $6, $10)
	if ( ((*($10) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($10 + [8]))
	
.LABEL $label$12
	$global$0 = ($8 + [64])
	return (unreachable)
	
.LABEL $label$2
	CALL $291(($8 + [48]))
	
.LABEL $label$1
	CALL $291(($8 + [32]))
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $300($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$2 }
	$7 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$7 = *($4 + [4])
	
.LABEL $label$1
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$6 = CALL $302([8403])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$6 }
	*($5 + [16]) = ($6 << [1])
	$8 = (($5 + [16]) | [1])
	$9 = $8
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = (($6 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*($5 + [16]) = ($8 | [1])
	*($5 + [24]) = $9
	*($5 + [20]) = $6
	$8 = (($5 + [16]) | [1])
	
.LABEL $label$5
	CALL memcpy($9, [8403], $6)
	
.LABEL $label$4
	*(($9 + $6)) = [0]
	CALL eosio_assert(($7 <= [257]), ( *($5 + [24]) ? $8 : (*($5 + [16]) & [1]) ))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$7
	$6 = CALL $292($5, $4)
	CALL $18($0, $1, $2, $3, $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$8
	$global$0 = ($5 + [32])
	return (unreachable)
	
.LABEL $label$3
	CALL $291(($5 + [16]))
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$2 }
	$7 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$7 = *($4 + [4])
	
.LABEL $label$1
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$6 = CALL $302([8403])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$6 }
	*($5 + [16]) = ($6 << [1])
	$8 = (($5 + [16]) | [1])
	$9 = $8
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = (($6 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*($5 + [16]) = ($8 | [1])
	*($5 + [24]) = $9
	*($5 + [20]) = $6
	$8 = (($5 + [16]) | [1])
	
.LABEL $label$5
	CALL memcpy($9, [8403], $6)
	
.LABEL $label$4
	*(($9 + $6)) = [0]
	CALL eosio_assert(($7 <= [257]), ( *($5 + [24]) ? $8 : (*($5 + [16]) & [1]) ))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$7
	$6 = CALL $292($5, $4)
	CALL $23($0, $1, $2, $3, $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$8
	$global$0 = ($5 + [32])
	return (unreachable)
	
.LABEL $label$3
	CALL $291(($5 + [16]))
}

void .FUNC $232 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [10030])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [48]) = $1
	CALL $233(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $228(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [36])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $300 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $280 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [10030])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = [0]
	*(($5 = CALL _Znwj([64])) + [20]) = [0]
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)1398362884
	CALL eosio_assert([1], [9768])
	$2 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8204])
	*($5 + [48]) = $1
	CALL $281(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$7 = *($5 + [52])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $269(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [12]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [20])))
	
.LABEL $label$9
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	CALL $292(($0 + [12]), ($1 + [12]))
	*($0 + [24 align=4]) = (int_64)0
	*(($0 + [32])) = [0]
	$2 = (*(($1 + [28])) - *($1 + [24]))
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = int_32($2 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$2 }
	$2 = CALL _Znwj($2)
	*(($0 + [24])) = $2
	*(($0 + [32])) = ($2 + ($3 << [3]))
	*(($3 = ($0 + [28]))) = $2
	$4 = *(($1 + [24]))
	$5 = (*(($1 + [28])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + $5)
	
.LABEL $label$3
	*($0 + [36 align=4]) = (int_64)0
	*(($0 + [44])) = [0]
	$2 = (*(($1 + [40])) - *($1 + [36]))
	if ( ($2 == 0) ){ goto $label$4 }
	$3 = int_32($2 >> [2])
	if ( ((uint_32)$3 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$2 = CALL _Znwj($2)
	*(($0 + [36])) = $2
	*(($0 + [44])) = ($2 + ($3 << [2]))
	*(($3 = ($0 + [40]))) = $2
	$4 = *(($1 + [36]))
	$5 = (*(($1 + [40])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + $5)
	
.LABEL $label$4
	*($0 + [48]) = *($1 + [48])
	*(($0 + [56])) = *(($1 + [56]))
	return $0
	
.LABEL $label$2
	CALL $300(($0 + [24]))
	
.LABEL $label$1
	CALL $300(($0 + [36]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $100 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = $1
	*($0) = $1
	*($0 + [16]) = $1
	*($0 + [56]) = $3
	*($0 + [64]) = [0]
	*(($0 + [24])) = $1
	*(($0 + [32])) = (int_64)-1
	*(($0 + [40])) = (int_64)0
	*(($0 + [48])) = [0]
	*(($0 + [72])) = $1
	*(($0 + [80])) = $1
	*(($0 + [88])) = $2
	*(($0 + [96])) = $3
	*(($0 + [116])) = (int_64)0
	*(($0 + [124])) = (int_64)0
	*(($0 + [132])) = (int_64)0
	*(($0 + [140])) = [0]
	*(($0 + [168])) = $1
	*(($0 + [144])) = (int_64)0
	*(($0 + [176])) = $1
	*(($0 + [184])) = (int_64)-1
	*(($0 + [192])) = (int_64)0
	*(($0 + [200])) = [0]
	*(($4 = ($0 + [220]))) = (int_64)0
	*(($0 + [228])) = (int_64)0
	*(($0 + [236])) = (int_64)0
	*(($5 = ($0 + [244]))) = (int_64)0
	*(($0 + [252])) = [0]
	*($0 + [272]) = $2
	$6 = CALL $105(($0 + [64]))
	*($0 + [208]) = *($6)
	*(($0 + [216])) = *(($6 + [8]))
	CALL $294($4, ($6 + [12]))
	if ( ((int_32)$6 == (int_32)($0 + [208])) ){ goto $label$1 }
	CALL $66(($0 + [232]), *($6 + [24]), *(($6 + [28])))
	CALL $106($5, *($6 + [36]), *(($6 + [40])))
	
.LABEL $label$1
	*(($0 + [256])) = *($6 + [48])
	*(($0 + [264])) = *(($6 + [56]))
	*($0 + [208]) = *(($0 + [56]))
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [240])
	$global$0 = $2
	CALL require_auth(*($0 + [272]))
	CALL $107($0, $1)
	$3 = ($0 + [220])
	$4 = *($3)
	$1 = ($4 & [1])
	if ( $1 ){ goto $label$4 }
	if ( (uint_32($4 >> [1]) == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	if ( (*(($0 + [224])) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	if ( $1 ){ goto $label$6 }
	$1 = ($3 + [1])
	goto $label$5 
	
.LABEL $label$6
	$1 = *(($0 + [228]))
	
.LABEL $label$5
	$4 = [0]
	
.LOOP $label$7:
	$3 = ($1 + $4)
	$5 = ($4 + [1])
	$4 = $5
	if ( *($3) ){ goto $label$7 }
	$6 = (CASTING uint_64)(uint_32 ($5 + [-1]))
	$7 = (int_64)0
	$8 = (int_64)59
	$9 = (int_64)0
	
.LOOP $label$8:
	$10 = (int_64)0
	if ( ((uint_64)$7 >= (uint_64)$6) ){ goto $label$9 }
	$4 = *($1)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [-91])
	goto $label$10 
	
.LABEL $label$11
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$13 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$12 
	
.LABEL $label$13
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$12
	$1 = ($1 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$8 }
	*(($2 + [132])) = (int_64)0
	*(($2 + [140])) = (int_64)0
	*(($2 + [148])) = (int_64)0
	*(($2 + [156])) = (int_64)0
	*(($2 + [164])) = [0]
	$7 = *($0)
	*(($2 + [192])) = $7
	*(($2 + [200])) = (int_64)-1
	*(($2 + [208])) = (int_64)0
	*(($2 + [216])) = [0]
	*($2 + [80]) = [0]
	*($2 + [112]) = $9
	*($2 + [88]) = $7
	*($2 + [96]) = $7
	*($2 + [184]) = $7
	*($2 + [104]) = *(($0 + [272]))
	$4 = CALL $101(($2 + [16]), CALL $105(($2 + [80])))
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$5 = *($2 + [80])
	$1 = CALL $302([10955])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$16 }
	*($2) = ($1 << [1])
	$3 = ($2 | [1])
	if ( $1 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$11 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($11)
	*($2) = ($11 | [1])
	*($2 + [8]) = $3
	*($2 + [4]) = $1
	
.LABEL $label$15
	CALL memcpy($3, [10955], $1)
	
.LABEL $label$14
	*(($3 + $1)) = [0]
	$1 = CALL $292(($2 + [224]), $2)
	CALL eosio_assert($5, ( *($1 + [8]) ? ($1 + [1]) : (*($2 + [224]) & [1]) ))
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$17
	if ( ((*($2) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$18
	$5 = ($0 + [56])
	$3 = *(($4 + [28]))
	$1 = *($4 + [24])
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$22 }
	$7 = *($5)
	
.LOOP $label$23:
	if ( ((int_64)*($1) == (int_64)$7) ){ goto $label$22 }
	$1 = ($1 + [8])
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$21 }
	$1 = *(($4 + [36]))
	if ( $1 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( ((int_32)$3 == (int_32)*(($4 + [32]))) ){ goto $label$25 }
	*(($4 + [28])) = ($3 + [8])
	*($3) = *($5)
	goto $label$24 
	
.LABEL $label$25
	CALL $63(($4 + [24]), $5)
	
.LABEL $label$24
	*(($2 + [128])) = *(($2 + [24]))
	*($2 + [120]) = *($2 + [16])
	CALL $294(($2 + [132]), ($4 + [12]))
	CALL $66(($2 + [144]), *($4 + [24]), *(($4 + [28])))
	CALL $106(($2 + [156]), *($4 + [36]), *(($4 + [40])))
	*(($2 + [176])) = *(($4 + [56]))
	*(($2 + [168])) = *($4 + [48])
	*($2 + [81]) = [1]
	$1 = *(($4 + [36]))
	if ( ($1 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	*(($4 + [40])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$19
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$26 }
	*(($4 + [28])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$26
	if ( ((*($4 + [12]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($4 + [20])))
	
.LABEL $label$27
	CALL $108(($2 + [80]))
	CALL $109(($2 + [208]))
	$1 = *(($2 + [156]))
	if ( ($1 == 0) ){ goto $label$28 }
	*(($2 + [160])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$28
	$1 = *(($2 + [144]))
	if ( ($1 == 0) ){ goto $label$29 }
	*(($2 + [148])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$29
	if ( ((*(($2 + [132])) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($2 + [140])))
	
.LABEL $label$2
	$global$0 = ($2 + [240])
	return (unreachable)
	
.LABEL $label$1
	CALL $291($2)
}

void .FUNC $102 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [32])
	$global$0 = $1
	CALL require_auth(*($0 + [272]))
	*(($1 + [8])) = [0]
	*($1) = (int_64)0
	$2 = *($0 + [64])
	$3 = CALL $302([10940])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($1) = ($3 << [1])
	$4 = ($1 | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($1) = ($5 | [1])
	*($1 + [8]) = $4
	*($1 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($4, [10940], $3)
	
.LABEL $label$2
	*(($4 + $3)) = [0]
	$3 = CALL $292(($1 + [16]), $1)
	CALL eosio_assert($2, ( *($3 + [8]) ? ($3 + [1]) : (*($1 + [16]) & [1]) ))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$5
	if ( ((*($1) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$6
	*(($0 + [104])) = *($0 + [208])
	*(($3 = ($0 + [264]))) = [1]
	*(($0 + [112])) = *(($0 + [216]))
	CALL $294(($0 + [116]), ($0 + [220]))
	CALL $66(($0 + [128]), *(($0 + [232])), *(($0 + [236])))
	CALL $106(($0 + [140]), *(($0 + [244])), *(($0 + [248])))
	*(($0 + [65])) = [1]
	*(($0 + [160])) = *($3)
	*(($0 + [152])) = *(($0 + [256]))
	$global$0 = ($1 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $291($1)
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($0 + [104])
	$2 = *($0 + [32])
	$4 = *(($0 + [132]))
	$3 = *(($0 + [128]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$5:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$4 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$1), [9924])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *(($0 + [112])), (int_64)-5918372827033583088, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $247($1, $5)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$1), [9924])
	
.LABEL $label$2
	*($0 + [40]) = *($6)
	*(($0 + [48])) = *(($6 + [8]))
	CALL $294(($0 + [52]), ($6 + [12]))
	if ( ((int_32)($0 + [40]) == (int_32)$6) ){ goto $label$6 }
	CALL $66(($0 + [64]), *($6 + [24]), *(($6 + [28])))
	CALL $106(($0 + [76]), *($6 + [36]), *(($6 + [40])))
	
.LABEL $label$6
	*(($0 + [88])) = *($6 + [48])
	*(($0 + [96])) = *(($6 + [56]))
	*($0) = [1]
	
.LABEL $label$1
	return ($0 + [40])
}

int_32 .FUNC $104 (int_32 $0)
{
	int_32 $1
	$1 = *(($0 + [244]))
	if ( ($1 == 0) ){ goto $label$1 }
	*(($0 + [248])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$1 = *(($0 + [232]))
	if ( ($1 == 0) ){ goto $label$2 }
	*(($0 + [236])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$2
	if ( ((*(($0 + [220])) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($0 + [228])))
	
.LABEL $label$3
	CALL $108(($0 + [64]))
	CALL $109(($0 + [192]))
	$1 = *(($0 + [140]))
	if ( ($1 == 0) ){ goto $label$4 }
	*(($0 + [144])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *(($0 + [128]))
	if ( ($1 == 0) ){ goto $label$5 }
	*(($0 + [132])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	if ( ((*(($0 + [116])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($0 + [124])))
	
.LABEL $label$6
	CALL $109(($0 + [40]))
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0 + [272]))
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = *(($0 + [216]))
	$4 = CALL $302([11086])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	$6 = $5
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($2) = ($7 | [1])
	*($2 + [8]) = $6
	*($2 + [4]) = $4
	$5 = ($2 | [1])
	
.LABEL $label$3
	CALL memcpy($6, [11086], $4)
	
.LABEL $label$2
	$7 = ($0 + [208])
	*(($6 + $4)) = [0]
	CALL eosio_assert(($3 <= $1), ( *($2 + [8]) ? $5 : (*($2) & [1]) ))
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$5
	*(($0 + [216])) = $1
	$8 = CALL publication_time()
	*(($0 + [104])) = *($7)
	*(($0 + [112])) = *(($7 + [8]))
	*(($0 + [268])) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [-1512151512])
	CALL $294(($0 + [116]), ($0 + [220]))
	CALL $66(($0 + [128]), *(($0 + [232])), *(($0 + [236])))
	CALL $106(($0 + [140]), *(($0 + [244])), *(($0 + [248])))
	*(($0 + [65])) = [1]
	*(($0 + [160])) = *(($0 + [264]))
	*(($0 + [152])) = *(($0 + [256]))
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $291($2)
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [2])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [2])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$6 = [1073741823]
	if ( ((uint_32)int_32($5 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [1])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [2])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [2])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [2]) << [2]))
	return (unreachable)
	
.LABEL $label$1
	CALL $300($0)
}

int_32 .FUNC $109 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [36])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [40])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$4 = *($3 + [24])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($3 + [28])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((*($3 + [12]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [20])))
	
.LABEL $label$8
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $108 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [48])
	$global$0 = $1
	if ( (*($0 + [1]) == 0) ){ goto $label$3 }
	$2 = ($0 + [104])
	$3 = *($0 + [32])
	$5 = *(($0 + [132]))
	$4 = *(($0 + [128]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$6 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$2), [9924])
	goto $label$4 
	
.LABEL $label$5
	$6 = CALL db_find_i64(*($2), *(($0 + [112])), (int_64)-5918372827033583088, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $247($2, $6)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$2), [9924])
	
.LABEL $label$4
	*(($1 + [16])) = [0]
	*($1 + [8]) = (int_64)0
	$6 = CALL $302([10003])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$10 }
	*($1 + [8]) = ($6 << [1])
	$5 = (($1 + [8]) | [1])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($1 + [8]) = ($4 | [1])
	*($1 + [16]) = $5
	*($1 + [12]) = $6
	
.LABEL $label$9
	CALL memcpy($5, [10003], $6)
	
.LABEL $label$8
	*(($5 + $6)) = [0]
	$6 = CALL $292(($1 + [32]), ($1 + [8]))
	CALL eosio_assert(*($0), ( *($6 + [8]) ? ($6 + [1]) : (*($1 + [32]) & [1]) ))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($1 + [16]))
	
.LABEL $label$12
	$3 = *($0 + [24])
	*($1 + [32]) = $0
	CALL eosio_assert([1], [10081])
	CALL $253($2, $7, $3, ($1 + [32]))
	
.LABEL $label$3
	$global$0 = ($1 + [48])
	return 
	
.LABEL $label$2
	$3 = *($0 + [24])
	*($1 + [24]) = $0
	CALL $254(($1 + [32]), $2, $3, ($1 + [24]))
	$global$0 = ($1 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $291(($1 + [8]))
}

void .FUNC $212 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [10030])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $213($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $210(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $231 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [10116])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10162])
	$6 = *($1)
	$3 = *($3)
	*($1) = *($3 + [40])
	$7 = ($1 + [8])
	CALL $294($7, ($3 + [48]))
	*($1 + [24]) = *(($3 + [64]))
	if ( ((int_32)($3 + [40]) == (int_32)$1) ){ goto $label$1 }
	CALL $66(($1 + [32]), *(($3 + [72])), *(($3 + [76])))
	
.LABEL $label$1
	*($1 + [44]) = *(($3 + [84]))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10213])
	$3 = *($7)
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [16])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	$9 = *($1 + [32])
	$7 = *(($1 + [36]))
	$10 = ($7 - $9)
	$8 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$4 }
	$3 = (($10 & [-8]) + $3)
	
.LABEL $label$4
	$7 = ($3 + [4])
	if ( ($7 <= [513]) ){ goto $label$6 }
	$3 = CALL $305($7)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$5
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	CALL $234($5, $1)
	CALL db_update_i64(*($1 + [52]), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $308($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $219 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4 + [40])
	*(($5 = ($1 + [16]))) = *(($4 + [56]))
	*(($6 = ($1 + [8]))) = *(($4 + [48]))
	CALL eosio_assert([1], [9828])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($2 | [8]), $6, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($2 + [16]), $5, [8])
	$7 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-5969210290865781248, *(*($0 + [8])), $7, $2, [24])
	if ( (uint_64)($7 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	CALL require_auth(*($0))
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$3 = [0]
	
.LOOP $label$3:
	$4 = ($1 + $3)
	$5 = ($3 + [1])
	$3 = $5
	if ( *($4) ){ goto $label$3 }
	$6 = (CASTING uint_64)(uint_32 ($5 + [-1]))
	$7 = (int_64)0
	$8 = (int_64)59
	$9 = (int_64)0
	
.LOOP $label$4:
	$10 = (int_64)0
	if ( ((uint_64)$7 >= (uint_64)$6) ){ goto $label$5 }
	$3 = *($1)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$3 = ($3 + [-91])
	goto $label$6 
	
.LABEL $label$7
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$9 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$8
	$1 = ($1 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$4 }
	CALL $39(($0 + [264]), $9, $2)
}

void .FUNC $39 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL require_auth(*($0 + [56]))
	*(($3 + [72])) = (int_64)-1
	*(($4 = ($3 + [80]))) = (int_64)0
	*(($3 + [88])) = [0]
	$5 = *($0 + [8])
	*(($3 + [64])) = $5
	*($3) = [0]
	*($3 + [32]) = $1
	$6 = *($0)
	*($3 + [8]) = $6
	*($3 + [16]) = $5
	*($3 + [24]) = *($0 + [56])
	*($3 + [56]) = $6
	$0 = *(CALL $40($3) + [12])
	*(($3 + [48])) = $2
	*(($3 + [52])) = $0
	*($3 + [1]) = [1]
	*($3 + [40]) = $1
	CALL $41($3)
	$4 = *($4)
	if ( ($4 == 0) ){ goto $label$1 }
	$7 = ($3 + [84])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($3 + [80]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($7) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($3 + [96])
}

void .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [48])
	$global$0 = $1
	if ( (*($0 + [1]) == 0) ){ goto $label$3 }
	$2 = ($0 + [64])
	$3 = *($0 + [32])
	$5 = *(($0 + [92]))
	$4 = *(($0 + [88]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$6 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$2), [9924])
	goto $label$4 
	
.LABEL $label$5
	$6 = CALL db_find_i64(*($2), *(($0 + [72])), (int_64)6820292617327083520, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $35($2, $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$2), [9924])
	
.LABEL $label$4
	*(($1 + [16])) = [0]
	*($1 + [8]) = (int_64)0
	$6 = CALL $302([10003])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$10 }
	*($1 + [8]) = ($6 << [1])
	$5 = (($1 + [8]) | [1])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($1 + [8]) = ($4 | [1])
	*($1 + [16]) = $5
	*($1 + [12]) = $6
	
.LABEL $label$9
	CALL memcpy($5, [10003], $6)
	
.LABEL $label$8
	*(($5 + $6)) = [0]
	$6 = CALL $292(($1 + [32]), ($1 + [8]))
	CALL eosio_assert(*($0), ( *($6 + [8]) ? ($6 + [1]) : (*($1 + [32]) & [1]) ))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($1 + [16]))
	
.LABEL $label$12
	$3 = *($0 + [24])
	*($1 + [32]) = $0
	CALL eosio_assert([1], [10081])
	CALL $207($2, $7, $3, ($1 + [32]))
	
.LABEL $label$3
	$global$0 = ($1 + [48])
	return 
	
.LABEL $label$2
	$3 = *($0 + [24])
	*($1 + [24]) = $0
	CALL $208(($1 + [32]), $2, $3, ($1 + [24]))
	$global$0 = ($1 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $291(($1 + [8]))
}

void .FUNC $37 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL require_auth($1)
}

void .FUNC $34 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL require_auth(*($0 + [56]))
	*(($3 + [56])) = (int_64)0
	*(($3 + [64])) = (int_64)1398362884
	$4 = [0]
	*($3 + [8]) = [0]
	*($3 + [40]) = $1
	*($3 + [16]) = *($0)
	*($3 + [24]) = *($0 + [8])
	*($3 + [32]) = *($0 + [56])
	CALL eosio_assert([1], [9768])
	$5 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8204])
	*(($3 + [88])) = (int_64)-1
	*(($3 + [96])) = (int_64)0
	$4 = [0]
	*(($3 + [104])) = [0]
	$5 = *(($0 + [8]))
	*(($3 + [80])) = $5
	$6 = *($0)
	*($3 + [72]) = $6
	$7 = CALL db_find_i64($6, $5, (int_64)6820292617327083520, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$8 = ($3 + [72])
	$4 = CALL $35($8, $7)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$8), [9924])
	$6 = *(($4 + [16]))
	*(($3 + [64])) = $6
	$5 = *(($4 + [8]))
	*(($3 + [56])) = $5
	*($3 + [48]) = *($4)
	*($3 + [8]) = [1]
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([1], [9768])
	$5 = (int_64)5459781
	
.LOOP $label$9:
	$0 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$5 = $6
	$0 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$11 }
	$0 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($0, [8204])
	$6 = (int_64)1397703940
	$5 = (int_64)0
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$6), [10748])
	$5 = ((int_64)*($2) + (int_64)$5)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [10791])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [10810])
	*(($3 + [56])) = $5
	*(($3 + [64])) = $6
	*($3 + [48]) = $1
	*($3 + [9]) = [1]
	CALL $36(($3 + [8]))
	$8 = *(($3 + [96]))
	if ( ($8 == 0) ){ goto $label$12 }
	$0 = ($3 + [100])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$16 }
	CALL _ZdlPv($7)
	
.LABEL $label$16
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$15 }
	$4 = *(($3 + [96]))
	goto $label$13 
	
.LABEL $label$14
	$4 = $8
	
.LABEL $label$13
	*($0) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$12
	$global$0 = ($3 + [112])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9975])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $305($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([40])
	$6 = CALL $205($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [28])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $206(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $308($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $30($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9828])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9828])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $203(CALL $202($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $33 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL prints([8702])
	$6 = *($3)
	$7 = ($6 & [1])
	$5 = ($3 + [1])
	CALL prints_l(( *($3 + [8]) ? $5 : $7 ), ( *($3 + [4]) ? uint_32($6 >> [1]) : $7 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	$5 = *(($3 + [8]))
	
.LABEL $label$1
	$3 = [0]
	
.LOOP $label$2:
	$6 = ($5 + $3)
	$7 = ($3 + [1])
	$3 = $7
	if ( *($6) ){ goto $label$2 }
	$8 = (CASTING uint_64)(uint_32 ($7 + [-1]))
	$9 = (int_64)0
	$10 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$3:
	$12 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$8) ){ goto $label$4 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$3 = ($3 + [-91])
	goto $label$5 
	
.LABEL $label$6
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$8 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$7 
	
.LABEL $label$8
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$7
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$3 }
	CALL prints([8740])
	CALL printui($11)
	*((($4 + [128]) + [24])) = $11
	*((($4 + [128]) + [32])) = (int_64)-1
	*(($7 = (($4 + [128]) + [40]))) = (int_64)0
	*((($4 + [128]) + [48])) = [0]
	$10 = *($2)
	$9 = *($0)
	$5 = ($2 + [8])
	$12 = *($5)
	*((($4 + [16]) + [8])) = $12
	*((($4 + [112]) + [8])) = $12
	*($4 + [136]) = $11
	*($4 + [128]) = $9
	*($4 + [144]) = $9
	*($4 + [184]) = $9
	*($4 + [16]) = $10
	*($4 + [112]) = $10
	CALL $34(($4 + [128]), $1, ($4 + [16]))
	*((($4 + [48]) + [32])) = (int_64)-1
	*(($3 = (($4 + [48]) + [40]))) = (int_64)0
	*((($4 + [48]) + [48])) = [0]
	$9 = *($0)
	*((($4 + [48]) + [24])) = $9
	$10 = *($2)
	$12 = *($5)
	*(($4 + [8])) = $12
	*((($4 + [32]) + [8])) = $12
	*($4 + [48]) = $9
	*($4 + [56]) = $9
	*($4 + [64]) = $9
	*($4 + [104]) = $9
	*($4) = $10
	*($4 + [32]) = $10
	CALL $34(($4 + [48]), $11, $4)
	$6 = *($3)
	if ( ($6 == 0) ){ goto $label$9 }
	$2 = ($4 + [92])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	CALL _ZdlPv($3)
	
.LABEL $label$13
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$12 }
	$5 = *(($4 + [88]))
	goto $label$10 
	
.LABEL $label$11
	$5 = $6
	
.LABEL $label$10
	*($2) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$6 = *($7)
	if ( ($6 == 0) ){ goto $label$14 }
	$7 = ($4 + [172])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$16 }
	
.LOOP $label$17:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$18 }
	CALL _ZdlPv($3)
	
.LABEL $label$18
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$17 }
	$5 = *(($4 + [168]))
	goto $label$15 
	
.LABEL $label$16
	$5 = $6
	
.LABEL $label$15
	*($7) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($4 + [192])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $300($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9828])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9828])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9828])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9828])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $201(*($1), ($0 + [32]))
}

int_32 .FUNC $215 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)0
	*(($3 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [9768])
	$4 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8204])
	*($0 + [24]) = $1
	$3 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy($0, *($3 + [4]), [8])
	$6 = (*($3 + [4]) + [8])
	*($3 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $6) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$6 = (*($3 + [4]) + [8])
	*($3 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $6) > (uint_32)[7]), [9998])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $214 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9975])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $305($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([40])
	$6 = CALL $215($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [28])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $216(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $308($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $217 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10116])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10162])
	$5 = *($1)
	$3 = *($3)
	*($1) = *($3 + [40])
	*(($6 = ($1 + [8]))) = *(($3 + [48]))
	*(($7 = ($1 + [16]))) = *(($3 + [56]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10213])
	CALL eosio_assert([1], [9828])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($4 | [8]), $6, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($4 + [16]), $7, [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $216 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $300($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $211 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [10116])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10162])
	$5 = *($1)
	$3 = *($3)
	*($1) = *($3 + [40])
	*(($6 = ($1 + [8]))) = *(($3 + [48]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10213])
	CALL eosio_assert([1], [9828])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9828])
	CALL memcpy(($4 | [8]), $6, [4])
	CALL db_update_i64(*($1 + [20]), $2, $4, [12])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $210 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $300($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $198 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [40])
	$4 = *($1 + [32])
	$5 = *($1 + [24])
	$6 = *($1 + [16])
	$7 = *($1 + [8])
	$8 = *($1)
	$1 = CALL $292($2, ($1 + [48]))
	$0 = *($0 + [4])
	$10 = *($0 + [4])
	$9 = *(*($0))
	$9 = (( ($9 + [48]) ? [0] : $9 ) + int_32($10 >> [1]))
	$0 = *($0)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($9) + $0))
	
.LABEL $label$1
	$10 = CALL $292(($2 + [16]), $1)
	CALL void $9((int_32 $8), (int_64 $7), (int_64 $6), (int_64 $5), (int_64 $4), (int_64 $3), (int_64 $10), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $199 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $292(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = *(*($0))
	$3 = (( ($3 + [56]) ? [0] : $3 ) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $292(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $196 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$1 = CALL $292($2, ($1 + [16]))
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$5 = *(*($0))
	$5 = (( ($5 + [48]) ? [0] : $5 ) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$6 = CALL $292(($2 + [16]), $1)
	CALL void $5((int_32 $4), (int_64 $3), (int_64 $6), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $197 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $176(*($1), ($3 + [48]))
}

void .FUNC $194 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [24])
	$4 = *($1 + [16])
	$5 = *($1 + [8])
	$6 = *($1)
	$1 = CALL $292($2, ($1 + [32]))
	$0 = *($0 + [4])
	$8 = *($0 + [4])
	$7 = *(*($0))
	$7 = (( ($7 + [48]) ? [0] : $7 ) + int_32($8 >> [1]))
	$0 = *($0)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$8 = CALL $292(($2 + [16]), $1)
	CALL void $7((int_32 $6), (int_64 $5), (int_64 $4), (int_64 $3), (int_64 $8), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $195 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $292($2, ($1 + [24]))
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$6 = *(*($0))
	$6 = (( ($6 + [48]) ? [0] : $6 ) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$7 = CALL $292(($2 + [16]), $1)
	CALL void $6((int_32 $5), (int_64 $4), (int_64 $3), (int_64 $7), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $192 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [160])
	$global$0 = $2
	*(($3 = (($2 + [64]) + [8]))) = *(($1 + [16]))
	*(($4 = (($2 + [48]) + [8]))) = *(($1 + [32]))
	*($2 + [64]) = *($1 + [8])
	*($2 + [48]) = *($1 + [24])
	$5 = *($1)
	$1 = CALL $292(($2 + [32]), ($1 + [40]))
	*((($2 + [96]) + [8])) = *($4)
	*((($2 + [80]) + [8])) = *($3)
	*($2 + [96]) = *($2 + [48])
	*($2 + [80]) = *($2 + [64])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = *(*($0))
	$3 = (( ($3 + [40]) ? [0] : $3 ) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [144]) + [8]))) = *((($2 + [80]) + [8]))
	*(($7 = (($2 + [128]) + [8]))) = *((($2 + [96]) + [8]))
	*($2 + [144]) = *($2 + [80])
	*($2 + [128]) = *($2 + [96])
	$4 = CALL $292(($2 + [112]), $1)
	*((($2 + [16]) + [8])) = *($6)
	*(($2 + [8])) = *($7)
	*($2 + [16]) = *($2 + [144])
	*($2) = *($2 + [128])
	CALL void $3((int_32 $5), (int_64 ($2 + [16])), (int_32 $2), (int_32 $4), (int_32 $0))
	if ( (*($2 + [112]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [160])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [160])
}

void .FUNC $193 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9998])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $176(*($1), ($3 + [32]))
}

void .FUNC $190 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $292(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = *(*($0))
	$3 = (( ($3 + [40]) ? [0] : $3 ) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $292(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $191 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($0 + [16])) = (int_64)1398362884
	CALL eosio_assert([1], [9768])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8204])
	*(($0 + [32])) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [9768])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [8204])
	*(($0 + [48])) = [0]
	*($0 + [40 align=4]) = (int_64)0
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	*($3 + [16]) = $3
	*($3 + [24]) = $0
	CALL $286(($3 + [24]), ($3 + [16]))
	$global$0 = ($3 + [32])
}