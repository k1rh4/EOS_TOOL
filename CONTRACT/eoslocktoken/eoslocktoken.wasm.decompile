(data (i32.const 8220) "failed to allocate pages\00\00\01\02\04\07\03\06\05\00Invalid hex character\00")
(data (i32.const 8288) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 8545) "stoi\00invalid sha256\00")
(data (i32.const 8565) ": no conversion\00invalid symbol\00")
(data (i32.const 8596) ": out of range\00#LOCK#\00")
(data (i32.const 8618) "invalid symbol name\00")
(data (i32.const 8638) "invalid supply\00")
(data (i32.const 8653) "max-supply must be positive\00")
(data (i32.const 8681) "token with symbol already exists\00")
(data (i32.const 8714) "memo has more than 256 bytes\00")
(data (i32.const 8743) "token with symbol does not exist, create token before issue\00")
(data (i32.const 8803) "invalid quantity\00")
(data (i32.const 8820) "must issue positive quantity\00")
(data (i32.const 8849) "symbol precision mismatch\00")
(data (i32.const 8875) "quantity exceeds available supply\00")
(data (i32.const 8909) "Issued\00")
(data (i32.const 8916) "Limit must be 1-50\00")
(data (i32.const 8935) "Limit can only set to smaller than old\00")
(data (i32.const 8974) "Exceed limitation !\00")
(data (i32.const 8994) "Exceed limitation\00")
(data (i32.const 9013) "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824\00")
(data (i32.const 9078) ",\00")
(data (i32.const 9080) "The timeout of a hash lock must between 60(1 minute) - 86400*30(30 days)\00")
(data (i32.const 9153) "to account does not exist\00")
(data (i32.const 9179) "unable to find key\00")
(data (i32.const 9198) "#LIMIT#\00")
(data (i32.const 9206) "must transfer positive quantity\00")
(data (i32.const 9238) "#UNLOCK#\00")
(data (i32.const 9247) "#CONFIRM#\00")
(data (i32.const 9257) "#TIME#\00")
(data (i32.const 9264) "Delay must be between 1 - 3153600000 seconds (100years)\00")
(data (i32.const 9320) "#HASH#\00")
(data (i32.const 9327) "#REMOVE#\00")
(data (i32.const 9336) "memo must be a chain id (length = 64)\00")
(data (i32.const 9374) "At least burn 1000 EVD for chain id\00")
(data (i32.const 9410) "memo must be same\00")
(data (i32.const 9428) "Must have a lock\00")
(data (i32.const 9445) "Lock data must < 0\00")
(data (i32.const 9464) "Can not use contract account in from/to and lock/unlock\00")
(data (i32.const 9520) "Lock data must < 0.\00")
(data (i32.const 9540) "New lock data must != 0\00")
(data (i32.const 9564) "no balance object found\00")
(data (i32.const 9588) "overdrawn balance\00")
(data (i32.const 9606) "Invalid balance\00")
(data (i32.const 9622) "Can not find the hash lock\00")
(data (i32.const 9649) "Invalid \"to\" account name\00")
(data (i32.const 9675) "Cancel transfer\00")
(data (i32.const 9691) "Invalid key\00")
(data (i32.const 9703) "Confirm transfer\00")
(data (i32.const 9720) "hello\00")
(data (i32.const 9726) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9775) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9829) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9877) "error reading iterator\00")
(data (i32.const 9900) "read\00")
(data (i32.const 9905) "get\00")
(data (i32.const 9909) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9960) "cannot create objects in table of another contract\00")
(data (i32.const 10011) "write\00")
(data (i32.const 10017) "object passed to modify is not in multi_index\00")
(data (i32.const 10063) "cannot modify objects in table of another contract\00")
(data (i32.const 10114) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10173) "attempt to add asset with different symbol\00")
(data (i32.const 10216) "addition underflow\00")
(data (i32.const 10235) "addition overflow\00")
(data (i32.const 10253) "cannot increment end iterator\00")
(data (i32.const 10283) "cannot pass end iterator to erase\00")
(data (i32.const 10317) "object passed to erase is not in multi_index\00")
(data (i32.const 10362) "cannot erase objects in table of another contract\00")
(data (i32.const 10412) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10465) "attempt to subtract asset with different symbol\00")
(data (i32.const 10513) "subtraction underflow\00")
(data (i32.const 10535) "subtraction overflow\00")
(data (i32.const 0) "@)\00\00")
(import "env" "sha256" (func $fimport$0 (param i32 i32 i32)))
(import "env" "printhex" (func $fimport$1 (param i32 i32)))
(import "env" "abort" (func $fimport$2))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "memset" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$7 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$8 (param i32 i32)))
(import "env" "__multf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$10 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$11 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$13 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$17 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$18 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$20 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$21 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$24 (param i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$25 (param i64)))
(import "env" "db_find_i64" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$27 (result i64)))
(import "env" "db_store_i64" (func $fimport$28 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$29 (param i32 i64 i32 i32)))
(import "env" "current_time" (func $fimport$30 (result i64)))
(import "env" "db_lowerbound_i64" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$32 (param i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$33 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$34 (param i64)))
(import "env" "db_remove_i64" (func $fimport$35 (param i32)))
(import "env" "assert_sha256" (func $fimport$36 (param i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$37 (result i32)))
(import "env" "read_action_data" (func $fimport$38 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$39 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$40 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$41 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$42 (param i32 i32)))
(import "env" "db_idx64_store" (func $fimport$43 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$44 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$45 (param i32)))
(import "env" "db_idx64_update" (func $fimport$46 (param i32 i64 i32)))
(export "apply" (func $102))
(table $0 5 5 anyfunc)
(elem (i32.const 1) $94 $43 $72 $47)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 10556))
(global $global$2 i32 (i32.const 10556))


int_32 .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [64]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [9829])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7615829274758479872)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [9775])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [9775])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $96(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *(*($4 + [4]) + [4])
	*(($1 + [40])) = *(($6 + [56]))
	*(($1 + [32])) = *(($6 + [48]))
	*(($1 + [24])) = *(($6 + [40]))
	*($1 + [16]) = *($6 + [32])
	$7 = ($1 + [48])
	CALL $27($7, *($4 + [8]))
	$6 = *($1 + [48])
	$4 = ( *(($1 + [52])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($4 + [40])
	$8 = (CASTING uint_64)(uint_32 $4)
	$9 = ($1 + [16])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$4 = CALL $3($6)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $9
	*($3 + [32]) = $1
	*($3 + [40]) = $7
	CALL $128(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($5 + [8]), (int_64)7615829274758479872, *(*($0 + [8])), $8, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $4($4)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $94 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$5 = ($global$0 - [320])
	$global$0 = $5
	CALL require_auth($4)
	$6 = [0]
	*(($5 + [240])) = [0]
	*($5 + [224]) = (int_64)-1
	*($5 + [232]) = (int_64)0
	*($5 + [244]) = [0]
	$7 = *($0)
	*($5 + [208]) = $7
	*($5 + [216]) = $7
	$8 = CALL db_find_i64($7, $7, (int_64)7615825362324684800, ((int_64)$2 ^ (int_64)$1))
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL $95(($5 + [208]), $8)
	if ( ((int_32)*($6 + [84]) == (int_32)($5 + [208])) ){ goto $label$3 }
	CALL eosio_assert([0], [9909])
	
.LABEL $label$3
	*($5 + [204]) = $6
	*($5 + [200]) = ($5 + [208])
	$9 = (($5 + [200]) | [4])
	goto $label$1 
	
.LABEL $label$2
	*($5 + [204]) = [0]
	*($5 + [200]) = ($5 + [208])
	$9 = (($5 + [200]) | [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9622])
	CALL eosio_assert(((int_64)*(*($9) + [16]) == (int_64)$2), [9649])
	*(($5 + [192])) = [0]
	*($5 + [176]) = (int_64)-1
	$7 = *($0)
	*($5 + [160]) = $7
	*($5 + [168]) = $7
	*($5 + [184]) = (int_64)0
	$6 = CALL db_lowerbound_i64($7, $7, (int_64)7615829274758479872, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $96(($5 + [160]), $6)
	if ( ((uint_64)*($6) >= (uint_64)CALL current_time()) ){ goto $label$4 }
	$10 = ($5 + [168])
	
.LOOP $label$5:
	$8 = CALL db_next_i64(*($6 + [64]), ($5 + [248]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	CALL $96(($5 + [160]), $8)
	
.LABEL $label$6
	CALL $97(($5 + [160]), $6)
	$6 = CALL db_lowerbound_i64(*($5 + [160]), *($10), (int_64)7615829274758479872, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $96(($5 + [160]), $6)
	if ( (uint_64)(*($6) <= CALL current_time()) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((uint_64)CALL current_time() <= (uint_64)*(*($9) + [64])) ){ goto $label$21 }
	$4 = *($0)
	*($5 + [136]) = (int_64)3617214756542218240
	*($5 + [128]) = $4
	*((($6 = CALL $9([16])) + [8])) = *($5 + [136])
	*($6) = *($5 + [128])
	*($5 + [144]) = $6
	$6 = ($6 + [16])
	*($5 + [152]) = $6
	*($5 + [148]) = $6
	$11 = *($9)
	$1 = *($11 + [24])
	if ( (uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$22 }
	CALL eosio_assert([0], [9726])
	
.LABEL $label$22
	$7 = (int_64)4478533
	$6 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$2 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$7 = $2
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$23 }
	goto $label$19 
	
.LABEL $label$24
	$7 = $2
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $8 ){ goto $label$25 }
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$23 }
	goto $label$19 
	
.LABEL $label$21
	$6 = *($3)
	if ( ($6 & [1]) ){ goto $label$18 }
	$6 = uint_32($6 >> [1])
	goto $label$17 
	
.LABEL $label$20
	CALL eosio_assert([0], [8618])
	
.LABEL $label$19
	$7 = *($11 + [8])
	*(($5 + [104])) = (int_64)1146504452
	*(($5 + [120])) = [0]
	*($5 + [80]) = *($0)
	*($5 + [96]) = $1
	*($5 + [88]) = $7
	*($5 + [112]) = (int_64)0
	$8 = ($5 + [112])
	$6 = CALL $17([9675])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$16 }
	*(($5 + [112])) = ($6 << [1])
	$10 = ($8 + [1])
	if ( $6 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	$6 = *($3 + [4])
	
.LABEL $label$17
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9691])
	$6 = *($3)
	if ( ($6 & [1]) ){ goto $label$27 }
	$6 = uint_32($6 >> [1])
	$8 = ($3 + [1])
	goto $label$26 
	
.LABEL $label$27
	$6 = *($3 + [4])
	$8 = *($3 + [8])
	
.LABEL $label$26
	CALL assert_sha256($8, $6, (*($9) + [32]))
	$1 = *($0)
	*($5 + [136]) = (int_64)3617214756542218240
	*($5 + [128]) = $1
	*((($6 = CALL $9([16])) + [8])) = *($5 + [136])
	*($6) = *($5 + [128])
	*($5 + [64]) = $6
	$6 = ($6 + [16])
	*($5 + [72]) = $6
	*($5 + [68]) = $6
	$11 = *($9)
	$12 = *($11 + [24])
	if ( (uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$28 }
	CALL eosio_assert([0], [9726])
	
.LABEL $label$28
	$7 = (int_64)4478533
	$6 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$2 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$7 = $2
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$7 = $2
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $8 ){ goto $label$33 }
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	CALL eosio_assert([0], [8618])
	
.LABEL $label$29
	$7 = *($11 + [16])
	*(($5 + [40])) = (int_64)1146504452
	*(($5 + [56])) = [0]
	*($5 + [16]) = *($0)
	*($5 + [32]) = $12
	*($5 + [24]) = $7
	*($5 + [48]) = (int_64)0
	$8 = ($5 + [48])
	$6 = CALL $17([9703])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$13 }
	*(($5 + [48])) = ($6 << [1])
	$10 = ($8 + [1])
	if ( $6 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$0 = (($6 + [16]) & [-16])
	$10 = CALL $9($0)
	*(($5 + [120])) = $10
	*(($5 + [116])) = $6
	*($5 + [112]) = ($0 | [1])
	
.LABEL $label$15
	CALL memcpy($10, [9675], $6)
	
.LABEL $label$14
	*(($10 + $6)) = [0]
	$6 = (($5 + [144]) + [8])
	$10 = *($6)
	*($6) = [0]
	*((($5 + [248]) + [24])) = *((($5 + [80]) + [24]))
	*(($6 = (($5 + [248]) + [40]))) = *(($8 + [8]))
	$7 = *($8)
	*(($5 + [112])) = [0]
	*($5 + [296]) = *($5 + [144])
	*($5 + [304]) = $10
	*($5 + [144]) = (int_64)0
	*($5 + [248]) = *($5 + [80])
	*($5 + [256]) = *((($5 + [80]) + [8]))
	*($5 + [264]) = *($5 + [96])
	*($5 + [280]) = $7
	*(($5 + [116])) = [0]
	*((($5 + [80]) + [40])) = [0]
	CALL $50($4, (int_64)-3617168760277827584, ($5 + [296]), ($5 + [248]))
	if ( ((*($5 + [280]) & [1]) == 0) ){ goto $label$34 }
	CALL $11(*($6))
	
.LABEL $label$34
	$6 = *($5 + [296])
	if ( ($6 == 0) ){ goto $label$35 }
	*($5 + [300]) = $6
	CALL $11($6)
	
.LABEL $label$35
	if ( ((*(($5 + [112])) & [1]) == 0) ){ goto $label$7 }
	CALL $11(*(($5 + [120])))
	goto $label$7 
	
.LABEL $label$13
	$0 = (($6 + [16]) & [-16])
	$10 = CALL $9($0)
	*(($5 + [56])) = $10
	*(($5 + [52])) = $6
	*($5 + [48]) = ($0 | [1])
	
.LABEL $label$12
	CALL memcpy($10, [9703], $6)
	
.LABEL $label$11
	*(($10 + $6)) = [0]
	$6 = (($5 + [64]) + [8])
	$10 = *($6)
	*($6) = [0]
	*((($5 + [248]) + [24])) = *((($5 + [16]) + [24]))
	*(($6 = (($5 + [248]) + [40]))) = *(($8 + [8]))
	$7 = *($8)
	*(($5 + [48])) = [0]
	*($5 + [296]) = *($5 + [64])
	*($5 + [304]) = $10
	*($5 + [64]) = (int_64)0
	*($5 + [248]) = *($5 + [16])
	*($5 + [256]) = *((($5 + [16]) + [8]))
	*($5 + [264]) = *($5 + [32])
	*($5 + [280]) = $7
	*(($5 + [52])) = [0]
	*((($5 + [16]) + [40])) = [0]
	CALL $50($1, (int_64)-3617168760277827584, ($5 + [296]), ($5 + [248]))
	if ( ((*($5 + [280]) & [1]) == 0) ){ goto $label$36 }
	CALL $11(*($6))
	
.LABEL $label$36
	$6 = *($5 + [296])
	if ( ($6 == 0) ){ goto $label$37 }
	*($5 + [300]) = $6
	CALL $11($6)
	
.LABEL $label$37
	if ( ((*(($5 + [48])) & [1]) == 0) ){ goto $label$38 }
	CALL $11(*(($5 + [56])))
	
.LABEL $label$38
	$10 = *(($5 + [184]))
	$8 = *(($5 + [188]))
	$7 = *(*($9) + [64])
	*($5 + [8]) = $7
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$41 }
	
.LOOP $label$43:
	$6 = ($8 + [-24])
	$0 = *($6)
	if ( ((int_64)*($0) == (int_64)$7) ){ goto $label$42 }
	$8 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$41 }
	if ( ((int_32)*($0 + [60]) == (int_32)($5 + [160])) ){ goto $label$44 }
	CALL eosio_assert([0], [9909])
	
.LABEL $label$44
	if ( $0 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$6 = CALL db_find_i64(*($5 + [160]), *(($5 + [168])), (int_64)7615829274758479872, $7)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$39 }
	if ( ((int_32)*(CALL $96(($5 + [160]), $6) + [60]) == (int_32)($5 + [160])) ){ goto $label$40 }
	CALL eosio_assert([0], [9909])
	
.LABEL $label$40
	$11 = ($5 + [188])
	$13 = ($5 + [184])
	$14 = ($5 + [168])
	
.LOOP $label$45:
	$7 = ((int_64)*($5 + [8]) + (int_64)1)
	*($5 + [8]) = $7
	$8 = *($11)
	$0 = *($13)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$48 }
	
.LOOP $label$50:
	$6 = ($8 + [-24])
	$10 = *($6)
	if ( ((int_64)*($10) == (int_64)$7) ){ goto $label$49 }
	$8 = $6
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$49
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$48 }
	if ( ((int_32)*($10 + [60]) != (int_32)($5 + [160])) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$6 = CALL db_find_i64(*($5 + [160]), *($14), (int_64)7615829274758479872, $7)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$39 }
	$10 = CALL $96(($5 + [160]), $6)
	if ( ((int_32)*($10 + [60]) == (int_32)($5 + [160])) ){ goto $label$46 }
	
.LABEL $label$47
	CALL eosio_assert([0], [9909])
	
.LABEL $label$46
	if ( $10 ){ goto $label$45 }
	
.LABEL $label$39
	$6 = *($3)
	$8 = CALL $17([9720])
	if ( ((int_32)$8 != (int_32)( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$51 }
	if ( (CALL $31($3, [0], [-1], [9720], $8) == 0) ){ goto $label$7 }
	
.LABEL $label$51
	$6 = CALL db_lowerbound_i64(*($5 + [160]), *(($5 + [168])), (int_64)7615829274758479872, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$52 }
	CALL $96(($5 + [160]), $6)
	*($5 + [252]) = [0]
	*($5 + [248]) = ($5 + [160])
	$8 = *($9)
	$6 = *(CALL $98(($5 + [248])) + [4])
	if ( ((int_32)*($6 + [16]) != (int_32)*($8 + [32])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [17])) & [255]) != (int_32)(*(($8 + [33])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [18])) & [255]) != (int_32)(*(($8 + [34])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [19])) & [255]) != (int_32)(*(($8 + [35])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [20])) & [255]) != (int_32)(*(($8 + [36])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [21])) & [255]) != (int_32)(*(($8 + [37])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [22])) & [255]) != (int_32)(*(($8 + [38])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [23])) & [255]) != (int_32)(*(($8 + [39])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [24])) & [255]) != (int_32)(*(($8 + [40])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [25])) & [255]) != (int_32)(*(($8 + [41])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [26])) & [255]) != (int_32)(*(($8 + [42])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [27])) & [255]) != (int_32)(*(($8 + [43])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [28])) & [255]) != (int_32)(*(($8 + [44])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [29])) & [255]) != (int_32)(*(($8 + [45])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [30])) & [255]) != (int_32)(*(($8 + [46])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [31])) & [255]) != (int_32)(*(($8 + [47])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [32])) & [255]) != (int_32)(*(($8 + [48])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [33])) & [255]) != (int_32)(*(($8 + [49])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [34])) & [255]) != (int_32)(*(($8 + [50])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [35])) & [255]) != (int_32)(*(($8 + [51])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [36])) & [255]) != (int_32)(*(($8 + [52])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [37])) & [255]) != (int_32)(*(($8 + [53])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [38])) & [255]) != (int_32)(*(($8 + [54])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [39])) & [255]) != (int_32)(*(($8 + [55])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [40])) & [255]) != (int_32)(*(($8 + [56])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [41])) & [255]) != (int_32)(*(($8 + [57])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [42])) & [255]) != (int_32)(*(($8 + [58])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [43])) & [255]) != (int_32)(*(($8 + [59])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [44])) & [255]) != (int_32)(*(($8 + [60])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [45])) & [255]) != (int_32)(*(($8 + [61])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [46])) & [255]) != (int_32)(*(($8 + [62])) & [255])) ){ goto $label$52 }
	if ( ((int_32)(*(($6 + [47])) & [255]) == (int_32)(*(($8 + [63])) & [255])) ){ goto $label$7 }
	
.LABEL $label$52
	*($5 + [136]) = $3
	*($5 + [132]) = ($5 + [200])
	*($5 + [128]) = ($5 + [8])
	*($5 + [296]) = $4
	if ( ((int_64)*($5 + [160]) == (int_64)CALL current_receiver()) ){ goto $label$53 }
	CALL eosio_assert([0], [9960])
	
.LABEL $label$53
	*($5 + [252]) = ($5 + [128])
	*($5 + [248]) = ($5 + [160])
	*($5 + [256]) = ($5 + [296])
	*(($6 = CALL $9([80])) + [56]) = [0]
	*($6 + [48 align=4]) = (int_64)0
	*($6 + [60]) = ($5 + [160])
	CALL $99(($5 + [248]), $6)
	*($5 + [312]) = $6
	$7 = *($6)
	*($5 + [248]) = $7
	$10 = *($6 + [64])
	*($5 + [308]) = $10
	$0 = ($5 + [188])
	$8 = *($0)
	if ( ((uint_32)$8 >= (uint_32)*(($5 + [192]))) ){ goto $label$54 }
	*($8 + [8]) = $7
	*($8 + [16]) = $10
	*($5 + [312]) = [0]
	*($8) = $6
	*($0) = ($8 + [24])
	$6 = *($5 + [312])
	*($5 + [312]) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$54
	CALL $100(($5 + [184]), ($5 + [312]), ($5 + [248]), ($5 + [308]))
	$6 = *($5 + [312])
	*($5 + [312]) = [0]
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	CALL $24($8)
	
.LABEL $label$9
	CALL $24($8)
	
.LABEL $label$8
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$55 }
	CALL $11(*(($6 + [56])))
	
.LABEL $label$55
	CALL $11($6)
	
.LABEL $label$7
	$7 = *($5 + [200])
	$6 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)
	if ( $6) ){ goto $label$56 }
	CALL eosio_assert([0], [10283])
	CALL eosio_assert([0], [10253])
	
.LABEL $label$56
	$8 = CALL db_next_i64(*($6 + [88]), ($5 + [248]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$57 }
	CALL $95((CASTING uint_32)(uint_64 $7), $8)
	
.LABEL $label$57
	CALL $101(($5 + [208]), $6)
	$10 = *($5 + [184])
	if ( ($10 == 0) ){ goto $label$58 }
	$0 = ($5 + [188])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$60 }
	
.LOOP $label$61:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$62 }
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$63 }
	CALL $11(*(($8 + [56])))
	
.LABEL $label$63
	CALL $11($8)
	
.LABEL $label$62
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$61 }
	$6 = *(($5 + [184]))
	goto $label$59 
	
.LABEL $label$60
	$6 = $10
	
.LABEL $label$59
	*($0) = $10
	CALL $11($6)
	
.LABEL $label$58
	$10 = *($5 + [232])
	if ( ($10 == 0) ){ goto $label$64 }
	$0 = ($5 + [236])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$66 }
	
.LOOP $label$67:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$68 }
	if ( ((*($8 + [72]) & [1]) == 0) ){ goto $label$69 }
	CALL $11(*(($8 + [80])))
	
.LABEL $label$69
	CALL $11($8)
	
.LABEL $label$68
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$67 }
	$6 = *(($5 + [232]))
	goto $label$65 
	
.LABEL $label$66
	$6 = $10
	
.LABEL $label$65
	*($0) = $10
	CALL $11($6)
	
.LABEL $label$64
	$global$0 = ($5 + [320])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9877])
	
.LABEL $label$5
	$4 = CALL $3($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $9([112])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [80]) = [0]
	*($5 + [84]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [64])
	*($3 + [56]) = ($5 + [72])
	CALL $127(($3 + [32]), ($3 + [24]))
	*($5 + [88]) = $1
	*($5 + [92 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $71(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $4($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [72]) & [1]) == 0) ){ goto $label$11 }
	CALL $11(*(($1 + [80])))
	
.LABEL $label$11
	CALL $11($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9877])
	
.LABEL $label$5
	$4 = CALL $3($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $9([80])) + [56]) = [0]
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [60]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [48])
	CALL $114(($3 + [32]), ($3 + [24]))
	*($5 + [64]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $100(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $4($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $11(*(($1 + [56])))
	
.LABEL $label$11
	CALL $11($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [60]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10317])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10362])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [10412])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$13 }
	CALL $11(*(($5 + [56])))
	
.LABEL $label$13
	CALL $11($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$16 }
	CALL $11(*(($8 + [56])))
	
.LABEL $label$16
	CALL $11($8)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [64]))
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [48]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10017])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10063])
	
.LABEL $label$2
	$6 = ($1 + [8])
	*($5 + [16]) = (int_64))((int_64)9223372036854775807 - CALL $38(*($6)))
	$7 = ($1 + [40])
	*($5 + [24]) = (int_64))((int_64)9223372036854775807 - *($7))
	*($6) = *(*($3))
	*($1 + [32]) = *(*(($3 + [4])))
	$8 = *($1)
	$9 = ($1 + [16])
	CALL $27($9, *(($3 + [8])))
	*($7) = CALL current_time()
	if ( ((int_64)$8 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [10114])
	
.LABEL $label$3
	$10 = ($1 + [32])
	$11 = (($5 + [16]) + [8])
	$3 = *($9)
	$12 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($12 + [32])
	$13 = (CASTING uint_64)(uint_32 $12)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $3($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [32]) = $5
	*($5 + [44]) = $6
	*($5 + [48]) = $9
	*($5 + [52]) = $10
	*($5 + [56]) = $7
	*($5 + [40]) = $1
	CALL $126(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [52]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL $4($4)
	
.LABEL $label$7
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [40]) = (int_64))((int_64)9223372036854775807 - CALL $38(*($6)))
	if ( (CALL $2(($5 + [16]), ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$4 = ($1 + [56])
	$3 = *($4)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8281824633301237760, ($5 + [32]), $8)
	*($4) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$9
	*($5 + [40]) = (int_64))((int_64)9223372036854775807 - *($7))
	if ( (CALL $2($11, ($5 + [40]), [8]) == 0) ){ goto $label$11 }
	$1 = ($1 + [60])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$12 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8281824633301237759, ($5 + [32]), $8)
	*($1) = $3
	
.LABEL $label$12
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$11
	$global$0 = ($5 + [64])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [32]) = (int_64)0
	$5 = *($0)
	$6 = ($1 + [16])
	CALL $27($6, *($4 + [8]))
	*($1 + [40]) = CALL current_time()
	$4 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [40])
	$9 = ($1 + [32])
	$10 = ($1 + [8])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = $10
	*($3 + [24]) = $1
	*($3 + [32]) = $6
	*($3 + [36]) = $9
	*($3 + [40]) = $7
	CALL $126(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)-8281824633301237760, *(*($0 + [8])), $8, $2, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $4($2)
	
.LABEL $label$4
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$4 = ($5 + [8])
	$8 = *($4)
	$2 = *(($0 + [8]))
	$11 = *($2)
	$12 = *($1)
	*($3 + [24]) = (int_64))((int_64)9223372036854775807 - CALL $38(*(($1 + [8]))))
	*($1 + [56]) = CALL db_idx64_store($8, (int_64)-8281824633301237760, $11, $12, ($3 + [24]))
	$8 = *($2)
	$11 = *($4)
	$12 = *($1)
	*($3 + [24]) = (int_64))((int_64)9223372036854775807 - *(($1 + [40])))
	*(($1 + [60])) = CALL db_idx64_store($11, (int_64)-8281824633301237759, $8, $12, ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [48]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10017])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10063])
	
.LABEL $label$2
	$6 = ($1 + [8])
	*($5 + [16]) = (int_64))((int_64)9223372036854775807 - CALL $38(*($6)))
	$7 = ($1 + [40])
	*($5 + [24]) = (int_64))((int_64)9223372036854775807 - *($7))
	*($6) = *(*($3))
	*($1 + [32]) = *(*(($3 + [4])))
	$8 = *($1)
	*($7) = CALL current_time()
	if ( ((int_64)$8 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [10114])
	
.LABEL $label$3
	$9 = ($1 + [32])
	$10 = (($5 + [16]) + [8])
	$3 = *($1 + [16])
	$11 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($11 + [32])
	$12 = (CASTING uint_64)(uint_32 $11)
	$11 = ($1 + [16])
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $3($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [32]) = $5
	*($5 + [44]) = $6
	*($5 + [48]) = $11
	*($5 + [52]) = $9
	*($5 + [56]) = $7
	*($5 + [40]) = $1
	CALL $126(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [52]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL $4($4)
	
.LABEL $label$7
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [40]) = (int_64))((int_64)9223372036854775807 - CALL $38(*($6)))
	if ( (CALL $2(($5 + [16]), ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$4 = ($1 + [56])
	$3 = *($4)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8281824633301237760, ($5 + [32]), $8)
	*($4) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$9
	*($5 + [40]) = (int_64))((int_64)9223372036854775807 - *($7))
	if ( (CALL $2($10, ($5 + [40]), [8]) == 0) ){ goto $label$11 }
	$1 = ($1 + [60])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$12 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8281824633301237759, ($5 + [32]), $8)
	*($1) = $3
	
.LABEL $label$12
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$11
	$global$0 = ($5 + [64])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = (int_64)0
	*($1 + [32]) = *(*($4 + [4]))
	$5 = *($0)
	$6 = ($1 + [16])
	CALL $30($6, [9012])
	*($1 + [40]) = CALL current_time()
	$4 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [40])
	$9 = ($1 + [32])
	$10 = ($1 + [8])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = $10
	*($3 + [24]) = $1
	*($3 + [32]) = $6
	*($3 + [36]) = $9
	*($3 + [40]) = $7
	CALL $126(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)-8281824633301237760, *(*($0 + [8])), $8, $2, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $4($2)
	
.LABEL $label$4
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$4 = ($5 + [8])
	$8 = *($4)
	$2 = *(($0 + [8]))
	$11 = *($2)
	$12 = *($1)
	*($3 + [24]) = (int_64))((int_64)9223372036854775807 - CALL $38(*(($1 + [8]))))
	*($1 + [56]) = CALL db_idx64_store($8, (int_64)-8281824633301237760, $11, $12, ($3 + [24]))
	$8 = *($2)
	$11 = *($4)
	$12 = *($1)
	*($3 + [24]) = (int_64))((int_64)9223372036854775807 - *(($1 + [40])))
	*(($1 + [60])) = CALL db_idx64_store($11, (int_64)-8281824633301237759, $8, $12, ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9900])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9900])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0 + [8])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9900])
	$1 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [9905])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $116($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9900])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10011])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [10011])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10011])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10011])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10011])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10011])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [10011])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_64 .FUNC $38 (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10011])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10011])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $120(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10011])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10011])
	$1 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($1, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
}

void .FUNC $49 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$5 = *($0)
	*($4) = $5
	$6 = *($2 + [8])
	*($4 + [8]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $52($4, $0)
	if ( ((int_32)*($0 + [16]) == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert([0], [9909])
	
.LABEL $label$4
	*($4 + [48]) = $2
	CALL $53($4, $0, ($4 + [48]))
	$7 = *($4 + [24])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)$5 == (int_64)CALL current_receiver()) ){ goto $label$5 }
	CALL eosio_assert([0], [9960])
	
.LABEL $label$5
	*(($0 = CALL $9([32])) + [16]) = $4
	*($0 + [8]) = *(($2 + [8]))
	*($0) = *($2)
	CALL memcpy(($4 + [48]), $0, [8])
	*($4 + [72]) = *($0 + [8])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*(($4 + [8])), (int_64)3607749779137757184, $3, $1), ($4 + [48]), [16]
	*($0 + [20]) = $7)
	$2 = ($4 + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$6 }
	*($2) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$6
	*($4 + [72]) = $0
	$1 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	*($4 + [48]) = $1)
	*($4 + [44]) = $7
	$8 = ($4 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($4 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $1
	*($2 + [16]) = $7
	*($4 + [72]) = [0]
	*($2) = $0
	*($8) = ($2 + [24])
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( $0 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $54(($4 + [24]), ($4 + [72]), ($4 + [48]), ($4 + [44]))
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $11($0)
	
.LABEL $label$7
	$7 = *($4 + [24])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [28])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $11($2)
	
.LABEL $label$13
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($4 + [24]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $7
	
.LABEL $label$10
	*($8) = $7
	CALL $11($0)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10017])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10063])
	
.LABEL $label$2
	$5 = *($1 + [8])
	$2 = *($2)
	if ( ((int_64)*($2 + [8]) == (int_64)$5) ){ goto $label$3 }
	CALL eosio_assert([0], [10173])
	
.LABEL $label$3
	$6 = ((int_64)*($1) + (int_64)*($2))
	*($1) = $6
	if ( ((int_64)$6 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [10216])
	$6 = *($1)
	
.LABEL $label$4
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)$6 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [10235])
	
.LABEL $label$5
	if ( ((int_64)$5 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [10114])
	
.LABEL $label$6
	$2 = $3
	$3 = ($2 + [-48])
	$global$0 = $3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($2 + [-8])
	*($4 + [24]) = ($4 + [8])
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [16])
	*($4 + [40]) = ($1 + [32])
	CALL $45(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [44]), (int_64)0, $3, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($4 + [48])
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9900])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9900])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $108(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9900])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9900])
	$1 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
}

void .FUNC $43 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8618])
	
.LABEL $label$1
	$11 = *($2)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$4 = [0]
	$7 = $6
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$10 }
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [8638])
	
.LABEL $label$6
	if ( ((int_64)$11 > (int_64)0) ){ goto $label$11 }
	CALL eosio_assert([0], [8653])
	
.LABEL $label$11
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$7 = *($0)
	*($3 + [8]) = $7
	*($3 + [16]) = $6
	$4 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	if ( ((int_32)*(CALL $44(($3 + [8]), $4) + [40]) == (int_32)($3 + [8])) ){ goto $label$13 }
	CALL eosio_assert([0], [9909])
	
.LABEL $label$13
	CALL eosio_assert([0], [8681])
	$7 = *($3 + [8])
	
.LABEL $label$12
	$8 = *($0)
	if ( ((int_64)$7 == (int_64)CALL current_receiver()) ){ goto $label$14 }
	CALL eosio_assert([0], [9960])
	
.LABEL $label$14
	*(($4 = CALL $9([56]))) = (int_64)0
	*($4 + [40]) = ($3 + [8])
	*($4 + [8]) = $5
	*($4 + [32]) = $1
	*($4 + [16]) = *($2)
	*(($4 + [24])) = *(($2 + [8]))
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($4 + [16])
	*($3 + [112]) = $4
	*($3 + [120]) = ($4 + [32])
	CALL $45(($3 + [112]), ($3 + [104]))
	$7 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	$10 = CALL db_store_i64(*((($3 + [8]) + [8])), (int_64)-4157508551318700032, $8, $7), ($3 + [48]), [40]
	*($4 + [44]) = $10)
	$9 = (($3 + [8]) + [16])
	if ( (uint_64)($7 <= *($9)) ){ goto $label$15 }
	*($9) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$15
	*($3 + [112]) = $4
	$7 = (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8
	*($3 + [48]) = $7)
	*($3 + [88]) = $10
	$2 = ($3 + [36])
	$9 = *($2)
	if ( ((uint_32)$9 >= (uint_32)*((($3 + [8]) + [32]))) ){ goto $label$18 }
	*($9 + [8]) = $7
	*($9 + [16]) = $10
	*($3 + [112]) = [0]
	*($9) = $4
	*($2) = ($9 + [24])
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( $4 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL $46(($3 + [32]), ($3 + [112]), ($3 + [48]), ($3 + [88]))
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL $11($4)
	
.LABEL $label$16
	$10 = *($3 + [32])
	if ( ($10 == 0) ){ goto $label$19 }
	$2 = ($3 + [36])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$21 }
	
.LOOP $label$22:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$23 }
	CALL $11($9)
	
.LABEL $label$23
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$22 }
	$4 = *(($3 + [32]))
	goto $label$20 
	
.LABEL $label$21
	$4 = $10
	
.LABEL $label$20
	*($2) = $10
	CALL $11($4)
	
.LABEL $label$19
	$global$0 = ($3 + [128])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = $1
	$4 = ($4 & [1])
	$4 = *($0)
	if ( (( *($0 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$1 }
	$6 = ($0 + [1])
	$5 = ($0 + [8])
	$4 = ( *($5) ? $6 : $4 )
	$7 = ($2 + [-1])
	$3 = $1
	
.LOOP $label$2:
	$8 = *($4)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$2 = ($8 + [-87])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($8 + [-55])
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL eosio_assert([0], [8254])
	
.LABEL $label$3
	$9 = ($2 << [4])
	*($3) = $9
	$11 = uint_32($11 >> [1])
	$12 = ($0 + [4])
	$13 = *($12)
	$11 = *($0)
	$2 = ($11 & [1])
	$8 = *($5)
	$10 = ($4 + [1])
	if ( ((int_32)$10 == (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$9 }
	$8 = *($10)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$2 = ($8 + [-87])
	goto $label$7 
	
.LABEL $label$9
	$4 = $10
	$3 = ($3 + [1])
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$2 = ($8 + [-55])
	goto $label$7 
	
.LABEL $label$10
	$2 = [0]
	CALL eosio_assert([0], [8254])
	$9 = *($3)
	
.LABEL $label$7
	*($3) = ($9 | $2)
	$4 = ($4 + [2])
	$2 = *($0)
	$11 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$13 = *($12)
	$8 = *($5)
	$3 = ($3 + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$7 = ($7 + [-1])
	if ( ((int_32)$4 != (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - $1)
}

int_64 .FUNC $41 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$5 = uint_32($4 >> [1])
	$6 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($0 + [4])
	$6 = *($0 + [8])
	
.LABEL $label$1
	$8 = ($7 & [1])
	$7 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($7 >> [1]) : $8 )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_32)$5 < (int_32)$4) ){ goto $label$3 }
	$9 = ($6 + $5)
	$10 = ( *($1 + [8]) ? ($1 + [1]) : $8 )
	$8 = *($10)
	$7 = $6
	
.LOOP $label$5:
	$5 = (($5 - $4) + [1])
	if ( ($5 == 0) ){ goto $label$3 }
	$5 = CALL $1($7, $8, $5)
	if ( ($5 == 0) ){ goto $label$3 }
	if ( (CALL $2($5, $10, $4) == 0) ){ goto $label$6 }
	$7 = ($5 + [1])
	$5 = ($9 - $7)
	if ( ((int_32)$5 >= (int_32)$4) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$3 }
	$7 = *($1)
	
.LABEL $label$4
	if ( ($7 & [1]) ){ goto $label$8 }
	$4 = uint_32(($7 & [254]) >> [1])
	goto $label$7 
	
.LABEL $label$8
	$4 = *(($1 + [4]))
	
.LABEL $label$7
	$5 = CALL $26($3, $0, $4, [-1], $0)
	$4 = CALL $32($5, [0], [10])
	if ( ((*($3) & [1]) == 0) ){ goto $label$9 }
	CALL $11(*($5 + [8]))
	
.LABEL $label$9
	$2 = (CASTING int_64)(int_32 $4)
	
.LABEL $label$3
	$global$0 = ($3 + [16])
	return $2
}

void .FUNC $40 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [256])
	$global$0 = $4
	$5 = [0]
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$7 = $8
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$7 }
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [8618])
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( (*($3 + [4]) <= [257]) ){ goto $label$1 }
	CALL eosio_assert([0], [8714])
	
.LABEL $label$1
	$11 = [0]
	*(($4 + [184])) = [0]
	*($4 + [168]) = (int_64)-1
	*($4 + [176]) = (int_64)0
	$7 = *($0)
	*($4 + [152]) = $7
	*($4 + [160]) = $6
	$5 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$11 = CALL $44(($4 + [152]), $5)
	if ( ((int_32)*($11 + [40]) == (int_32)($4 + [152])) ){ goto $label$8 }
	CALL eosio_assert([0], [9909])
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [8743])
	
.LABEL $label$8
	CALL require_auth(*($11 + [32]))
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$12 }
	$7 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$7 = $8
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	$7 = $8
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$16 }
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_64)$6 <= (int_64)0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL eosio_assert([0], [8803])
	if ( ((int_64)*($2) > (int_64)0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL eosio_assert([0], [8820])
	
.LABEL $label$10
	if ( ((int_64)*(($2 + [8])) == (int_64)*($11 + [8])) ){ goto $label$17 }
	CALL eosio_assert([0], [8849])
	
.LABEL $label$17
	if ( ((int_64)*($2) <= (int_64))(*($11 + [16]) - *($11))) ){ goto $label$18 }
	CALL eosio_assert([0], [8875])
	
.LABEL $label$18
	*($4 + [192]) = $2
	CALL $48(($4 + [152]), $11, ($4 + [192]))
	$5 = ($11 + [32])
	$7 = *($5)
	$9 = ($2 + [8])
	*(($10 = (($4 + [136]) + [8]))) = *($9)
	$8 = *($2)
	*((($4 + [24]) + [8])) = *($10)
	*($4 + [136]) = $8
	*($4 + [24]) = *($4 + [136])
	CALL $49($0, $7, ($4 + [24]), $7)
	$7 = *($5)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$19 }
	$8 = *($0)
	*($4 + [128]) = (int_64)3617214756542218240
	*($4 + [120]) = $7
	*((($10 = CALL $9([16])) + [8])) = *($4 + [128])
	*($10) = *($4 + [120])
	$7 = *($5)
	*(($5 = (($4 + [72]) + [24]))) = *($9)
	*($4 + [80]) = $1
	*($4 + [72]) = $7
	*($4 + [88]) = *($2)
	CALL $25((($4 + [72]) + [32]), $3)
	*((($4 + [192]) + [24])) = *($5)
	$5 = (($4 + [72]) + [40])
	*(($11 = (($4 + [192]) + [40]))) = *($5)
	*($5) = [0]
	$5 = ($10 + [16])
	*($4 + [244]) = $5
	*($4 + [240]) = $10
	*($4 + [248]) = $5
	*($4 + [192]) = *($4 + [72])
	*($4 + [200]) = *($4 + [80])
	*($4 + [208]) = *($4 + [88])
	*($4 + [224]) = *($4 + [104])
	*($4 + [104]) = (int_64)0
	CALL $50($8, (int_64)-3617168760277827584, ($4 + [240]), ($4 + [192]))
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$20 }
	CALL $11(*($11))
	
.LABEL $label$20
	$5 = *($4 + [240])
	if ( ($5 == 0) ){ goto $label$21 }
	*($4 + [244]) = $5
	CALL $11($5)
	
.LABEL $label$21
	if ( ((*(($4 + [104])) & [1]) == 0) ){ goto $label$19 }
	CALL $11(*(($4 + [112])))
	
.LABEL $label$19
	*((($4 + [40]) + [8])) = [0]
	*((($4 + [56]) + [8])) = *($9)
	*($4 + [40]) = (int_64)0
	*($4 + [56]) = *($2)
	$5 = CALL $17([8909])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$22 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$25 }
	*($4 + [40]) = ($5 << [1])
	$9 = (($4 + [40]) | [1])
	if ( $5 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$10 = (($5 + [16]) & [-16])
	$9 = CALL $9($10)
	*($4 + [40]) = ($10 | [1])
	*($4 + [48]) = $9
	*($4 + [44]) = $5
	
.LABEL $label$24
	CALL memcpy($9, [8909], $5)
	
.LABEL $label$23
	*(($9 + $5)) = [0]
	$7 = *($0)
	*((($4 + [8]) + [8])) = *((($4 + [56]) + [8]))
	*($4 + [8]) = *($4 + [56])
	CALL $51($0, $1, ($4 + [8]), ($4 + [40]), $7)
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$26 }
	CALL $11(*($4 + [48]))
	
.LABEL $label$26
	$10 = *($4 + [176])
	if ( ($10 == 0) ){ goto $label$27 }
	$2 = ($4 + [180])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$29 }
	
.LOOP $label$30:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$31 }
	CALL $11($9)
	
.LABEL $label$31
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$30 }
	$5 = *(($4 + [176]))
	goto $label$28 
	
.LABEL $label$29
	$5 = $10
	
.LABEL $label$28
	*($2) = $10
	CALL $11($5)
	
.LABEL $label$27
	$global$0 = ($4 + [256])
	return (unreachable)
	
.LABEL $label$22
	CALL $24(($4 + [40]))
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $9(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $40($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $11($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $11($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10011])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10011])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10011])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10011])
	$6 = *($5)
	
.LABEL $label$4
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$0 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10011])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9877])
	
.LABEL $label$5
	$4 = CALL $3($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $9([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $117(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $7)
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $46(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $4($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $11($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10011])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10011])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10011])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10011])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[31]) ){ goto $label$5 }
	CALL eosio_assert([0], [10011])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $2, [32])
	*(($3 = ($3 + [4]))) = (*($3) + [32])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10011])
	$4 = *(($3 + [4]))
	
.LABEL $label$6
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $120(*($1), *($0 + [24]))
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10011])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[31]) ){ goto $label$2 }
	CALL eosio_assert([0], [10011])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [32])
	*(($3 = ($3 + [4]))) = (*($3) + [32])
	CALL $120(*($1), *($0 + [8]))
}

int_32 .FUNC $8 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $6())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $7($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $3($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $3($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $6 ()
{
	return [8208]
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $3($1)
	
.LABEL $label$2
	*(CALL $6()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $3(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $4($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $4 (int_32 $0)
{
}

void .FUNC $5 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

int_32 .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8220])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $0 ()
{
	CALL $5()
}

int_32 .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	return CALL $13($0, $1)
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $4($0)
	
.LABEL $label$1
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	CALL $15($0, $1)
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $10 (int_32 $0)
{
	return CALL $9($0)
}

void .FUNC $11 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $4($0)
	
.LABEL $label$1
}

void .FUNC $12 (int_32 $0)
{
	CALL $11($0)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $8(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $8(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_64 .FUNC $75 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [96])
	$global$0 = $3
	*((($3 + [56]) + [32])) = [0]
	*($3 + [64]) = $1
	*($3 + [72]) = (int_64)-1
	$4 = (int_64)0
	*($3 + [80]) = (int_64)0
	$5 = *($0)
	*($3 + [56]) = $5
	*((($3 + [16]) + [32])) = [0]
	*($3 + [24]) = $5
	*($3 + [16]) = $5
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	*($3 + [52]) = [0]
	$0 = CALL db_find_i64($5, $5, (int_64)-8281824633301237760, $1)
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL $80(($3 + [16]), $0)
	if ( ((int_32)*($0 + [48]) == (int_32)($3 + [16])) ){ goto $label$5 }
	CALL eosio_assert([0], [9909])
	
.LABEL $label$5
	$5 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$4 = *($0 + [8])
	$4 = ((int_64)$4 >> (int_64)63) & (int_64)$4)
	$7 = *(($3 + [84]))
	$6 = *(($3 + [80]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$6:
	$0 = ($7 + [-24])
	$8 = *($0)
	if ( ((int_64)(uint_64)*($8 + [8]) >> (uint_64)(int_64)8) == (int_64)$5) ){ goto $label$3 }
	$7 = $0
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	if ( ((int_32)*($8 + [16]) == (int_32)($3 + [56])) ){ goto $label$1 }
	CALL eosio_assert([0], [9909])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$0 = CALL db_find_i64(*($3 + [56]), *(($3 + [64])), (int_64)3607749779137757184, $5)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $52(($3 + [56]), $0)
	if ( ((int_32)*($8 + [16]) == (int_32)($3 + [56])) ){ goto $label$1 }
	CALL eosio_assert([0], [9909])
	goto $label$1 
	
.LABEL $label$7
	CALL eosio_assert([0], [9564])
	
.LABEL $label$1
	$5 = *($2)
	CALL eosio_assert(((int_64)((int_64)*($8) + (int_64)$4) >= (int_64)$5), [9588])
	$5 = (int_64)
	if ( ((int_64)$5(*($8) - $5)) == (int_64)0) ){ goto $label$10 }
	*($3 + [8]) = $2
	CALL $81(($3 + [56]), $8, $1, ($3 + [8]))
	$8 = *($3 + [40])
	if ( $8 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $82(($3 + [56]), $8)
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$6 = ($3 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$12 }
	
.LOOP $label$13:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL $11(*(($7 + [24])))
	
.LABEL $label$15
	CALL $11($7)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$13 }
	$0 = *(($3 + [40]))
	goto $label$11 
	
.LABEL $label$12
	$0 = $8
	
.LABEL $label$11
	*($6) = $8
	CALL $11($0)
	
.LABEL $label$8
	$8 = *($3 + [80])
	if ( ($8 == 0) ){ goto $label$16 }
	$6 = ($3 + [84])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$18 }
	
.LOOP $label$19:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$20 }
	CALL $11($7)
	
.LABEL $label$20
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$19 }
	$0 = *(($3 + [80]))
	goto $label$17 
	
.LABEL $label$18
	$0 = $8
	
.LABEL $label$17
	*($6) = $8
	CALL $11($0)
	
.LABEL $label$16
	$global$0 = ($3 + [96])
	return $5
}

int_32 .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $18($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [48]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10017])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10063])
	
.LABEL $label$2
	$5 = ($1 + [8])
	$6 = CALL $38(*($5))
	*($5) = ((int_64)*($5) + (int_64)*(*($2)))
	*($4 + [16]) = (int_64))((int_64)9223372036854775807 - $6)
	$7 = ($1 + [40])
	*($4 + [24]) = (int_64))((int_64)9223372036854775807 - *($7))
	$2 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($8 + [32])
	$6 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$9 = (($4 + [16]) + [8])
	$10 = *($1)
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ($2 <= [513]) ){ goto $label$5 }
	$3 = CALL $3($2)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$4
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($3 + $2)
	*($4 + [32]) = $4
	*($4 + [44]) = $5
	*($4 + [48]) = $8
	*($4 + [56]) = $7
	*($4 + [40]) = $1
	*($4 + [52]) = ($1 + [32])
	CALL $126(($4 + [40]), ($4 + [32]))
	CALL db_update_i64(*($1 + [52]), (int_64)0, $3, $2)
	if ( ($2 <= [513]) ){ goto $label$6 }
	CALL $4($3)
	
.LABEL $label$6
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($4 + [40]) = (int_64))((int_64)9223372036854775807 - CALL $38(*($5)))
	if ( (CALL $2(($4 + [16]), ($4 + [40]), [8]) == 0) ){ goto $label$8 }
	$3 = ($1 + [56])
	$2 = *($3)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$9 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5380477997063077888, ($4 + [32]), $10)
	*($3) = $2
	
.LABEL $label$9
	CALL db_idx64_update($2, (int_64)0, ($4 + [40]))
	
.LABEL $label$8
	*($4 + [40]) = (int_64))((int_64)9223372036854775807 - *($7))
	if ( (CALL $2($9, ($4 + [40]), [8]) == 0) ){ goto $label$10 }
	$1 = ($1 + [60])
	$2 = *($1)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$11 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5380477997063077889, ($4 + [32]), $10)
	*($1) = $2
	
.LABEL $label$11
	CALL db_idx64_update($2, (int_64)0, ($4 + [40]))
	
.LABEL $label$10
	$global$0 = ($4 + [64])
}

void .FUNC $59 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [112])
	$global$0 = $3
	*($3 + [40]) = $2
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$2 }
	if ( (uint_64)($2 <= (int_64)51) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8916])
	
.LABEL $label$1
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	$4 = *($0)
	*($3) = $4
	*($3 + [8]) = $1
	*($3 + [24]) = (int_64)0
	$0 = CALL db_find_i64($4, $1, (int_64)-3772704971946590208, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	$0 = CALL $60($3, $0)
	if ( ((int_32)*($0 + [24]) == (int_32)$3) ){ goto $label$6 }
	CALL eosio_assert([0], [9909])
	$2 = *($3 + [40])
	
.LABEL $label$6
	if ( ((int_64)$2 < (int_64)*($0 + [8])) ){ goto $label$7 }
	CALL eosio_assert([0], [8935])
	
.LABEL $label$7
	*($3 + [48]) = ($3 + [40])
	CALL $61($3, $0, ($3 + [48]))
	$5 = *($3 + [24])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_64)$4 == (int_64)CALL current_receiver()) ){ goto $label$8 }
	CALL eosio_assert([0], [9960])
	
.LABEL $label$8
	*(($0 = CALL $9([40])) + [24]) = $3
	*($0 + [16]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [8]) = *($3 + [40])
	*($3 + [80]) = (($3 + [48]) + [24])
	*($3 + [76]) = ($3 + [48])
	*($3 + [72]) = ($3 + [48])
	*($3 + [88]) = ($3 + [72])
	*($3 + [100]) = ($0 + [8])
	*($3 + [96]) = $0
	*($3 + [104]) = ($0 + [16])
	CALL $62(($3 + [96]), ($3 + [88]))
	$2 = *($0)
	$5 = CALL db_store_i64(*(($3 + [8])), (int_64)-3772704971946590208, $1, $2, ($3 + [48]), [24])
	*($0 + [28]) = $5
	$6 = ($3 + [16])
	if ( (uint_64)($2 <= *($6)) ){ goto $label$9 }
	*($6) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($3 + [96]) = $0
	$2 = *($0)
	*($3 + [48]) = $2
	*($3 + [72]) = $5
	$7 = ($3 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($3 + [32]))) ){ goto $label$12 }
	*($6 + [8]) = $2
	*($6 + [16]) = $5
	*($3 + [96]) = [0]
	*($6) = $0
	*($7) = ($6 + [24])
	$0 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( $0 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $63(($3 + [24]), ($3 + [96]), ($3 + [48]), ($3 + [72]))
	$0 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $11($0)
	
.LABEL $label$10
	$5 = *($3 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($3 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$16 }
	CALL $11($6)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$15 }
	$0 = *(($3 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$0 = $5
	
.LABEL $label$13
	*($7) = $5
	CALL $11($0)
	
.LABEL $label$3
	$global$0 = ($3 + [112])
}

void .FUNC $50 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL $9($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [8])) = $5
	*($4) = $7
	*($4 + [4]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [4]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [36])) = $6
	*(($4 + [40])) = $5
	*(($4 + [8])) = [0]
	*((($4 + [16]) + [36])) = [0]
	*($4 + [24]) = $1
	*($4 + [16]) = $0
	*($4 + [32]) = $7
	*($4) = (int_64)0
	*($4 + [44 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [44])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $116($2, $7)
	$2 = *(($4 + [48]))
	$7 = *(($4 + [44]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [56]) = ($4 + [80])
	*($4 + [64]) = $3
	CALL $118(($4 + [64]), ($4 + [56]))
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	$7 = [16]
	$3 = *((($4 + [16]) + [16]))
	$2 = *(($4 + [36]))
	$5 = ($2 - $3)
	$0 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$7:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$8 }
	$7 = (($5 & [-16]) + $7)
	
.LABEL $label$8
	$3 = *(($4 + [44]))
	$2 = *(($4 + [48]))
	$7 = (($7 + $2) - $3)
	$0 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$9:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$9 }
	if ( ($7 == 0) ){ goto $label$11 }
	CALL $116(($4 + [64]), $7)
	$2 = *($4 + [68])
	$7 = *($4 + [64])
	goto $label$10 
	
.LABEL $label$11
	$2 = [0]
	$7 = [0]
	
.LABEL $label$10
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	CALL $119(($4 + [80]), ($4 + [16]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$12 }
	*($4 + [68]) = $7
	CALL $11($7)
	
.LABEL $label$12
	$7 = *($4 + [44])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($4 + [48])) = $7
	CALL $11($7)
	
.LABEL $label$13
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$14 }
	*(($4 + [36])) = $7
	CALL $11($7)
	
.LABEL $label$14
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$15 }
	*($4 + [4]) = $7
	CALL $11($7)
	
.LABEL $label$15
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $40($4)
}

void .FUNC $51 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [112])
	$global$0 = $5
	*($5 + [64]) = $1
	*(($5 + [56])) = [0]
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	*($5 + [60]) = [0]
	$6 = *($0)
	*($5 + [24]) = $6
	*($5 + [32]) = $6
	$0 = CALL db_find_i64($6, $6, (int_64)5380477997063077888, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$9 }
	$7 = CALL $55(($5 + [24]), $0)
	if ( ((int_32)*($7 + [48]) == (int_32)($5 + [24])) ){ goto $label$10 }
	CALL eosio_assert([0], [9909])
	
.LABEL $label$10
	$8 = [0]
	$12 = ($0 & [1])
	$0 = *($3)
	$10 = ($0 & [1])
	$0 = *($7 + [16])
	$9 = uint_32($0 >> [1])
	$11 = ( *(($7 + [20])) ? $9 : $10 )
	if ( ((int_32)$11 != (int_32)( *($3 + [4]) ? uint_32($0 >> [1]) : $12 )) ){ goto $label$5 }
	$0 = (($7 + [16]) + [1])
	$3 = ( *($3 + [8]) ? ($3 + [1]) : $12 )
	if ( $10 ){ goto $label$8 }
	if ( ($11 == 0) ){ goto $label$7 }
	$10 = ([0] - $9)
	
.LOOP $label$11:
	if ( ((int_32)*($0) != (int_32)*($3)) ){ goto $label$6 }
	$8 = [1]
	$3 = ($3 + [1])
	$0 = ($0 + [1])
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$11 }
	goto $label$5 
	
.LABEL $label$9
	$0 = *($3)
	if ( ($0 & [1]) ){ goto $label$13 }
	$0 = uint_32($0 >> [1])
	goto $label$12 
	
.LABEL $label$13
	$0 = *($3 + [4])
	
.LABEL $label$12
	CALL eosio_assert((((int_32)$0 != (int_32)[64]) | ((uint_64)*($2) > (uint_64)(int_64)9999999)), [9374])
	*($5 + [12]) = $2
	*($5 + [16]) = $3
	*($5 + [8]) = ($5 + [64])
	*($5 + [104]) = $4
	if ( ((int_64)*($5 + [24]) == (int_64)CALL current_receiver()) ){ goto $label$14 }
	CALL eosio_assert([0], [9960])
	
.LABEL $label$14
	*($5 + [84]) = ($5 + [8])
	*($5 + [80]) = ($5 + [24])
	*($5 + [88]) = ($5 + [104])
	*(($0 = CALL $9([64]))) = (int_64)0
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [24]) = [0]
	*($0 + [48]) = ($5 + [24])
	CALL $56(($5 + [80]), $0)
	*($5 + [96]) = $0
	$6 = *($0)
	*($5 + [80]) = $6
	$10 = *($0 + [52])
	*($5 + [76]) = $10
	$8 = ($5 + [52])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($5 + [56]))) ){ goto $label$15 }
	*($3 + [8]) = $6
	*($3 + [16]) = $10
	*($5 + [96]) = [0]
	*($3) = $0
	*($8) = ($3 + [24])
	$0 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	CALL $57(($5 + [48]), ($5 + [96]), ($5 + [80]), ($5 + [76]))
	$0 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( $0 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$8
	if ( ($11 == 0) ){ goto $label$7 }
	$8 = (CALL $2(( *(($7 + [24])) ? $0 : $10 ), $3, $11) == 0)
	goto $label$5 
	
.LABEL $label$7
	$8 = [1]
	goto $label$5 
	
.LABEL $label$6
	$8 = [0]
	
.LABEL $label$5
	CALL eosio_assert($8, [9410])
	*($5 + [80]) = $2
	CALL $58(($5 + [24]), $7, ($5 + [80]))
	
.LABEL $label$4
	$10 = *($5 + [48])
	if ( ($10 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL $11(*(($0 + [24])))
	
.LABEL $label$16
	CALL $11($0)
	$10 = *($5 + [48])
	if ( $10 ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($5 + [112])
	return 
	
.LABEL $label$1
	$8 = ($5 + [52])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$10) ){ goto $label$18 }
	
.LOOP $label$19:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$20 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$21 }
	CALL $11(*(($3 + [24])))
	
.LABEL $label$21
	CALL $11($3)
	
.LABEL $label$20
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$19 }
	$0 = *(($5 + [48]))
	goto $label$17 
	
.LABEL $label$18
	$0 = $10
	
.LABEL $label$17
	*($8) = $10
	CALL $11($0)
	$global$0 = ($5 + [112])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9877])
	
.LABEL $label$5
	$2 = CALL $3($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $9([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9900])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9900])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	$8 = *($3 + [24])
	*(($5 + [8])) = $8
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	*($3 + [24]) = $8)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $8
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $54(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $4($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $11($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10017])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10063])
	
.LABEL $label$2
	$5 = *($1 + [8])
	$2 = *($2)
	if ( ((int_64)*($2 + [8]) == (int_64)$5) ){ goto $label$3 }
	CALL eosio_assert([0], [10173])
	
.LABEL $label$3
	$6 = ((int_64)*($1) + (int_64)*($2))
	*($1) = $6
	if ( ((int_64)$6 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [10216])
	$6 = *($1)
	
.LABEL $label$4
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)$6 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [10235])
	
.LABEL $label$5
	$2 = ($1 + [8])
	if ( ((int_64)$5 == (int_64)(uint_64)*($2) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [10114])
	
.LABEL $label$6
	$7 = $3
	$3 = ($7 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	*($4 + [8]) = *($2)
	CALL memcpy(($7 + [-8]), ($4 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), (int_64)0, $3, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($4 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $9(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $40($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $11($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $11($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $34 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $35($1, $0, [8565])
	CALL $37()
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	$6 = ($1 + [16])
	CALL $27($6, *($4 + [8]))
	$4 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = $7
	*($3 + [24]) = $1
	*($3 + [32]) = $6
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = ($1 + [40])
	CALL $126(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)5380477997063077888, *(*($0 + [8])), $8, $2, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $4($2)
	
.LABEL $label$4
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$4 = ($5 + [8])
	$8 = *($4)
	$2 = *(($0 + [8]))
	$9 = *($2)
	$10 = *($1)
	*($3 + [24]) = (int_64))((int_64)9223372036854775807 - CALL $38(*(($1 + [8]))))
	*($1 + [56]) = CALL db_idx64_store($8, (int_64)5380477997063077888, $9, $10, ($3 + [24]))
	$8 = *($2)
	$9 = *($4)
	$10 = *($1)
	*($3 + [24]) = (int_64))((int_64)9223372036854775807 - *(($1 + [40])))
	*(($1 + [60])) = CALL db_idx64_store($9, (int_64)5380477997063077889, $8, $10, ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $9(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $40($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $11(*(($1 + [24])))
	
.LABEL $label$11
	CALL $11($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $11($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $9($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $40($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9900])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9900])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9900])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9900])
	$6 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$0 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9900])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($0, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9900])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[31]) ){ goto $label$2 }
	CALL eosio_assert([0], [9900])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [32])
	*(($3 = ($3 + [4]))) = (*($3) + [32])
	CALL $108(*($1), *($0 + [8]))
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $17($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL $9($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $28($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9900])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9900])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $108(*($1), ($0 + [16]))
	$0 = ($0 + [32])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9900])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $25($2, ($1 + [16]))
	$6 = *($1 + [32])
	$1 = *($0 + [4])
	$7 = *($1 + [4])
	$0 = (*($0) + int_32($7 >> [1]))
	$1 = *($1)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$7 = CALL $25(($2 + [16]), $5)
	CALL void $0((int_32 $4), (int_64 $3), (int_64 $7), (int_32 $6), (int_64 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($5) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $11(*($7 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $11(*($5 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9900])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9900])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9900])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9900])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $108(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $25(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $25(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $11(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $11(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10011])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10011])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10011])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10011])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $120(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $122(CALL $121($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10011])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10011])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $9(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $11($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $9($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $11($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9877])
	
.LABEL $label$5
	$4 = CALL $3($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $9([64]))) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	CALL $125(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($5 + [56 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $57(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $4($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $11(*(($1 + [24])))
	
.LABEL $label$11
	CALL $11($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9900])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9900])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	$0 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9900])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $0, [8])
	*(($5 + [16])) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $106 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*(($4 + [96])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	$6 = ($2 + $5)
	*($4 + [56]) = $6
	$3 = $2
	if ( ((uint_32)$5 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9900])
	$6 = *(($4 + [56]))
	$3 = *($4 + [52])
	
.LABEL $label$4
	CALL memcpy(($4 + [64]), $3, [8])
	$3 = ($3 + [8])
	*($4 + [52]) = $3
	$7 = (($4 + [64]) + [8])
	if ( ((uint_32)($6 - $3) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9900])
	$6 = *((($4 + [48]) + [8]))
	$3 = *($4 + [52])
	
.LABEL $label$5
	CALL memcpy($7, $3, [8])
	$3 = ($3 + [8])
	*($4 + [52]) = $3
	*($4 + [16]) = (int_64)0
	if ( ((uint_32)($6 - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9900])
	$3 = *($4 + [52])
	
.LABEL $label$6
	CALL memcpy(($4 + [16]), $3, [8])
	*(($4 + [80])) = *($4 + [16])
	*($4 + [52]) = ($3 + [8])
	CALL $108(($4 + [48]), (($4 + [64]) + [24]))
	*(($3 = ($4 + [8]))) = *((($4 + [48]) + [8]))
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $109(($4 + [128]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$9 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $4($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $11(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$7
	$global$0 = ($4 + [144])
	return $2
}

int_32 .FUNC $21 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $19($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $20($3, (int_64)0)
	$4 = CALL $22($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $21($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $6()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $21($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [8289]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $20($0, (int_64)0)
	*(CALL $6()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $21($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $21($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $21($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $21($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [8289])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $21($0)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $21($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8245]))
	$8 = (int_64)0
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $21($0)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $21($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [8289]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $20($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [8289]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [8289]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $21($0) + [8289]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $6()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $6()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $6()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $9($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $24 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $28($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL $9($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $25(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $25(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $11(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $11(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $69 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [160])
	$global$0 = $5
	*($5 + [104]) = $2
	*($5 + [112]) = $1
	*(($5 + [96])) = [0]
	*($5 + [88]) = (int_64)0
	$6 = CALL $17([9012])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$8 }
	*($5 + [88]) = ($6 << [1])
	$7 = (($5 + [88]) | [1])
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$8 = (($6 + [16]) & [-16])
	$7 = CALL $9($8)
	*($5 + [88]) = ($8 | [1])
	*($5 + [96]) = $7
	*($5 + [92]) = $6
	
.LABEL $label$7
	CALL memcpy($7, [9012], $6)
	
.LABEL $label$6
	*(($7 + $6)) = [0]
	*($5 + [84]) = [86400]
	*(($5 + [80])) = [0]
	*($5 + [72]) = (int_64)0
	$6 = CALL $17([9013])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$11 }
	*($5 + [72]) = ($6 << [1])
	$7 = (($5 + [72]) | [1])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$8 = (($6 + [16]) & [-16])
	$7 = CALL $9($8)
	*($5 + [72]) = ($8 | [1])
	*($5 + [80]) = $7
	*($5 + [76]) = $6
	
.LABEL $label$10
	CALL memcpy($7, [9013], $6)
	
.LABEL $label$9
	*(($7 + $6)) = [0]
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$12 }
	$7 = uint_32($6 >> [1])
	$9 = ($4 + [1])
	$6 = CALL $17([9078])
	if ( ($6 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$12
	$7 = *($4 + [4])
	$9 = *($4 + [8])
	$6 = CALL $17([9078])
	if ( $6 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL $24(($5 + [88]))
	
.LABEL $label$4
	CALL $24(($5 + [72]))
	
.LABEL $label$3
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$2 }
	$10 = ($9 + $7)
	$8 = $9
	
.LOOP $label$13:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$2 }
	$7 = CALL $1($8, [44], $7)
	if ( ($7 == 0) ){ goto $label$2 }
	if ( (CALL $2($7, [9078], $6) == 0) ){ goto $label$14 }
	$8 = ($7 + [1])
	$7 = ($10 - $8)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$13 }
	goto $label$2 
	
.LABEL $label$14
	$6 = ( [-1] ? ($7 - $9) : ((int_32)$7 == (int_32)$10) )
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$2 }
	if ( ($6 <= [61]) ){ goto $label$2 }
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$16 }
	$8 = uint_32($6 >> [1])
	$9 = ($4 + [1])
	goto $label$15 
	
.LABEL $label$16
	$8 = *($4 + [4])
	$9 = *($4 + [8])
	
.LABEL $label$15
	$6 = CALL $17([9078])
	$7 = [-1]
	if ( ($8 <= [65]) ){ goto $label$17 }
	$7 = [65]
	if ( ($6 == 0) ){ goto $label$17 }
	$7 = ($8 + [-65])
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$18 }
	$10 = ($9 + $8)
	$8 = ($9 + [65])
	
.LOOP $label$19:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$18 }
	$7 = CALL $1($8, [44], $7)
	if ( ($7 == 0) ){ goto $label$18 }
	if ( (CALL $2($7, [9078], $6) == 0) ){ goto $label$20 }
	$8 = ($7 + [1])
	$7 = ($10 - $8)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$18 }
	$7 = ($7 - $9)
	goto $label$17 
	
.LABEL $label$18
	$7 = [-1]
	
.LABEL $label$17
	*($5 + [40]) = [0]
	*($5 + [32]) = (int_64)0
	if ( ((int_32)$7 == (int_32)[-1]) ){ goto $label$26 }
	CALL $26(($5 + [8]), $4, [65], ($7 + [-65]), $4)
	if ( (*($5 + [32]) & [1]) ){ goto $label$25 }
	*($5 + [32]) = [0]
	goto $label$24 
	
.LABEL $label$26
	CALL $26(($5 + [8]), $4, [65], [-1], $4)
	if ( (*($5 + [32]) & [1]) ){ goto $label$23 }
	*($5 + [32]) = [0]
	goto $label$22 
	
.LABEL $label$25
	*(*(($5 + [40]))) = [0]
	*($5 + [36]) = [0]
	
.LABEL $label$24
	CALL $29(($5 + [32]), [0])
	*((($5 + [32]) + [8])) = *((($5 + [8]) + [8]))
	*($5 + [32]) = *($5 + [8])
	CALL $26(($5 + [8]), $4, ($7 + [1]), [-1], $4)
	if ( (*($5 + [88]) & [1]) ){ goto $label$28 }
	*($5 + [88]) = [0]
	goto $label$27 
	
.LABEL $label$28
	*(*($5 + [96])) = [0]
	*($5 + [92]) = [0]
	
.LABEL $label$27
	CALL $29(($5 + [88]), [0])
	*((($5 + [88]) + [8])) = *((($5 + [8]) + [8]))
	*($5 + [88]) = *($5 + [8])
	goto $label$21 
	
.LABEL $label$23
	*(*(($5 + [40]))) = [0]
	*($5 + [36]) = [0]
	
.LABEL $label$22
	CALL $29(($5 + [32]), [0])
	*((($5 + [32]) + [8])) = *((($5 + [8]) + [8]))
	*($5 + [32]) = *($5 + [8])
	
.LABEL $label$21
	*($5 + [84]) = CALL $32(($5 + [32]), [0], [10])
	CALL $26(($5 + [8]), $4, [0], [64], $4)
	if ( (*($5 + [72]) & [1]) ){ goto $label$30 }
	*($5 + [72]) = [0]
	goto $label$29 
	
.LABEL $label$30
	*(*($5 + [80])) = [0]
	*($5 + [76]) = [0]
	
.LABEL $label$29
	CALL $29(($5 + [72]), [0])
	*((($5 + [72]) + [8])) = *((($5 + [8]) + [8]))
	*($5 + [72]) = *($5 + [8])
	if ( ((*($5 + [84]) + [-60]) <= [2591941]) ){ goto $label$31 }
	CALL eosio_assert([0], [9080])
	
.LABEL $label$31
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL $11(*(($5 + [40])))
	goto $label$1 
	
.LABEL $label$2
	CALL $27(($5 + [88]), $4)
	
.LABEL $label$1
	*(($8 = ($5 + [64]))) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	*($5 + [68]) = [0]
	$1 = *($0)
	*($5 + [32]) = $1
	*($5 + [40]) = $1
	$2 = *($5 + [112])
	*($5 + [16]) = $3
	*($5 + [12]) = ($5 + [104])
	*($5 + [8]) = ($5 + [112])
	*($5 + [20]) = ($5 + [84])
	*($5 + [24]) = ($5 + [72])
	*($5 + [28]) = ($5 + [88])
	*($5 + [152]) = $2
	if ( ((int_64)$1 == (int_64)CALL current_receiver()) ){ goto $label$32 }
	CALL eosio_assert([0], [9960])
	
.LABEL $label$32
	*($5 + [132]) = ($5 + [8])
	*($5 + [128]) = ($5 + [32])
	*($5 + [136]) = ($5 + [152])
	*(($6 = CALL $9([112])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [72 align=4]) = (int_64)0
	*($6 + [80]) = [0]
	*($6 + [84]) = ($5 + [32])
	CALL $70(($5 + [128]), $6)
	*($5 + [144]) = $6
	$1 = *($6)
	*($5 + [128]) = $1
	$4 = *($6 + [88])
	*($5 + [124]) = $4
	$10 = ($5 + [60])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*($8)) ){ goto $label$37 }
	*($7 + [8]) = $1
	*($7 + [16]) = $4
	*($5 + [144]) = [0]
	*($7) = $6
	*($10) = ($7 + [24])
	$6 = *($5 + [144])
	*($5 + [144]) = [0]
	if ( ($6 == 0) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	CALL $71(($5 + [56]), ($5 + [144]), ($5 + [128]), ($5 + [124]))
	$6 = *($5 + [144])
	*($5 + [144]) = [0]
	if ( $6 ){ goto $label$35 }
	
.LABEL $label$36
	$8 = *($5 + [56])
	if ( ($8 == 0) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	if ( ((*($6 + [72]) & [1]) == 0) ){ goto $label$38 }
	CALL $11(*(($6 + [80])))
	
.LABEL $label$38
	CALL $11($6)
	$8 = *($5 + [56])
	if ( ($8 == 0) ){ goto $label$33 }
	
.LABEL $label$34
	$4 = ($5 + [60])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$40 }
	
.LOOP $label$41:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$42 }
	if ( ((*($7 + [72]) & [1]) == 0) ){ goto $label$43 }
	CALL $11(*(($7 + [80])))
	
.LABEL $label$43
	CALL $11($7)
	
.LABEL $label$42
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$41 }
	$6 = *(($5 + [56]))
	goto $label$39 
	
.LABEL $label$40
	$6 = $8
	
.LABEL $label$39
	*($4) = $8
	CALL $11($6)
	
.LABEL $label$33
	if ( (*($5 + [72]) & [1]) ){ goto $label$46 }
	if ( (*($5 + [88]) & [1]) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	CALL $11(*($5 + [80]))
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$44 }
	
.LABEL $label$45
	CALL $11(*($5 + [96]))
	$global$0 = ($5 + [160])
	return 
	
.LABEL $label$44
	$global$0 = ($5 + [160])
	(unreachable)
	(unreachable)
}

void .FUNC $68 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)$2 > (int_64)0), [9606])
	if ( (uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$1 }
	CALL eosio_assert([0], [9726])
	
.LABEL $label$1
	$5 = (int_64)4478533
	$6 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$5 = $7
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $7
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$6 }
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [8618])
	
.LABEL $label$2
	*(($4 + [8])) = (int_64)1146504452
	*($4 + [24]) = (int_64)1146504452
	*($4) = $2
	*($4 + [16]) = $2
	CALL $49($0, $1, $4, $3)
	$global$0 = ($4 + [32])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $115($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $9($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $29($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $29($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $24($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $11($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10017])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10063])
	
.LABEL $label$2
	*($1 + [16]) = *(*($2))
	$5 = *($1)
	$2 = $3
	$3 = ($2 + [-32])
	$global$0 = $3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($2 + [-8])
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = ($1 + [8])
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [16])
	CALL $62(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [28]), (int_64)0, $3, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $64 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	float_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	$5 = *($0)
	*($4 + [24]) = $5
	*($4 + [32]) = $1
	*($4 + [48]) = (int_64)0
	$0 = CALL db_find_i64($5, $1, (int_64)-3772704971946590208, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $60(($4 + [24]), $0)
	if ( ((int_32)*($0 + [24]) == (int_32)($4 + [24])) ){ goto $label$2 }
	CALL eosio_assert([0], [9909])
	
.LABEL $label$2
	$1 = *($0 + [8])
	$5 = CALL current_time()
	*($4 + [16]) = $5
	if ( ((int_64)$1 < (int_64)1) ){ goto $label$3 }
	if ( ((uint_64)$1 > (uint_64)(int_64)50) ){ goto $label$3 }
	$1 = ((int_64)((int_64)$1 * (int_64)$3) / (int_64)100)
	CALL eosio_assert(((int_64)$1 >= (int_64)$2), [8974])
	$6 = ((float_64)((float_64)((float_64)(CASTING float_64)(int_64 $2) * (float_64)(float_64)2592e3) / (float_64)(CASTING float_64)(int_64 $1)) * (float_64)(float_64)1e6)
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$5 }
	$2 = (int_64)-9223372036854775808
	goto $label$4 
	
.LABEL $label$5
	$2 = (Rounds 0)($6)
	
.LABEL $label$4
	$1 = ((int_64)$5 + (int_64)2592000000000)
	$3 = *($0 + [16])
	if ( ((uint_64)$3 <= (uint_64)$5) ){ goto $label$6 }
	*($4 + [16]) = $3
	$5 = $3
	
.LABEL $label$6
	$5 = ((int_64)$5 + (int_64)$2)
	*($4 + [16]) = $5
	CALL eosio_assert(((uint_64)$5 <= (uint_64)$1), [8994])
	*($4 + [8]) = ($4 + [16])
	CALL $65(($4 + [24]), $0, ($4 + [8]))
	
.LABEL $label$3
	$7 = *($4 + [48])
	if ( ($7 == 0) ){ goto $label$1 }
	$8 = ($4 + [52])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$9 = *($0)
	*($0) = [0]
	if ( ($9 == 0) ){ goto $label$10 }
	CALL $11($9)
	
.LABEL $label$10
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($4 + [48]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $7
	
.LABEL $label$7
	*($8) = $7
	CALL $11($0)
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10317])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10362])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [10412])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $11($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $11($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $66 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [32])) = [0]
	*($2 + [8]) = $1
	*($2 + [16]) = (int_64)-1
	$3 = *($0)
	*($2) = $3
	*($2 + [24]) = (int_64)0
	$4 = CALL current_time()
	$5 = CALL db_lowerbound_i64($3, $1, (int_64)-3772704971946590208, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $60($2, $5)
	$6 = [0]
	
.LOOP $label$3:
	$3 = *($5)
	if ( (int_64)($3 == 0) ){ goto $label$4 }
	if ( ((uint_64)$3 >= (uint_64)$4) ){ goto $label$2 }
	$7 = [0]
	$8 = CALL db_next_i64(*($5 + [28]), ($2 + [40]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $60($2, $8)
	
.LABEL $label$5
	$8 = *($5 + [8])
	if ( $5 ){ goto $label$6 }
	CALL eosio_assert([0], [10283])
	CALL eosio_assert([0], [10253])
	
.LABEL $label$6
	$9 = CALL db_next_i64(*($5 + [28]), ($2 + [40]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	CALL $60($2, $9)
	
.LABEL $label$7
	$6 = ($6 + $8)
	CALL $67($2, $5)
	$5 = $7
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($5 + [28])
	$5 = [0]
	$7 = CALL db_next_i64($7, ($2 + [40]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$8 }
	$5 = CALL $60($2, $7)
	
.LABEL $label$8
	if ( $5 ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$1 }
	CALL $68($0, $1, (CASTING int_64)(int_32 $6), $1)
	
.LABEL $label$1
	$6 = *($2 + [24])
	if ( ($6 == 0) ){ goto $label$9 }
	$8 = ($2 + [28])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$13 }
	CALL $11($7)
	
.LABEL $label$13
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$12 }
	$5 = *(($2 + [24]))
	goto $label$10 
	
.LABEL $label$11
	$5 = $6
	
.LABEL $label$10
	*($8) = $6
	CALL $11($5)
	
.LABEL $label$9
	$global$0 = ($2 + [48])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10017])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10063])
	
.LABEL $label$2
	*($1 + [8]) = *(*($2))
	$5 = *($1)
	$2 = $3
	$3 = ($2 + [-32])
	$global$0 = $3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($2 + [-8])
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = ($1 + [8])
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [16])
	CALL $62(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [28]), (int_64)0, $3, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9877])
	
.LABEL $label$5
	$4 = CALL $3($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $9([40])) + [24]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	CALL $123(($3 + [32]), ($3 + [24]))
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $63(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $4($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $11($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $9(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $40($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $11($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $11($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10011])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10011])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0 + [8])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10011])
	$1 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($1, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [84]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10317])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10362])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [10412])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [72]) & [1]) == 0) ){ goto $label$13 }
	CALL $11(*(($6 + [80])))
	
.LABEL $label$13
	CALL $11($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$15 }
	if ( ((*($9 + [72]) & [1]) == 0) ){ goto $label$16 }
	CALL $11(*(($9 + [80])))
	
.LABEL $label$16
	CALL $11($9)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [88])))
	$9 = *(($1 + [92]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7615825362324684800, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($9)
	
.LABEL $label$17
	$9 = *($1 + [96])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$20 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7615825362324684801, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL db_idx64_remove($9)
	
.LABEL $label$19
	$global$0 = ($2 + [16])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $9(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $40($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $11(*(($1 + [56])))
	
.LABEL $label$11
	CALL $11($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $11($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $103 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [64]) + [24])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $112(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $113(($4 + [128]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $4($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $11(*(($4 + [88])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)5031766152489992191) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)4982871653160583168) ){ goto $label$1 }
	*($3 + [36]) = [0]
	*($3 + [32]) = [1]
	*($3 + [24]) = *($3 + [32])
	CALL $103($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_64)$2 == (int_64)8516769789752901632) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$1 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [2]
	*($3) = *($3 + [56])
	CALL $104($1, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	*($3 + [44]) = [0]
	*($3 + [40]) = [3]
	*($3 + [16]) = *($3 + [40])
	CALL $105($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [52]) = [0]
	*($3 + [48]) = [4]
	*($3 + [8]) = *($3 + [48])
	CALL $106($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $39([0])
	$global$0 = ($3 + [64])
}

int_32 .FUNC $105 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $110(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $111(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $4($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $11(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $104 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [104]))) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [76]) = $2
	*($4 + [72]) = $2
	*($4 + [80]) = ($2 + $7)
	*($4 + [144]) = ($4 + [72])
	*($4 + [40]) = ($4 + [88])
	CALL $107(($4 + [40]), ($4 + [144]))
	*(($9 = (($4 + [24]) + [8]))) = *($4 + [80])
	*($4 + [24]) = *($4 + [72])
	*(($3 = (($4 + [128]) + [8]))) = *($9)
	*($4 + [128]) = *($4 + [24])
	$9 = *($3)
	*((($4 + [144]) + [8])) = $9
	*(($4 + [64])) = $9
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$0 = *($4 + [128])
	*($4 + [56]) = $0
	*($4 + [144]) = $0
	*(($9 = (($4 + [112]) + [8]))) = *($8)
	*($4 + [112]) = *($4 + [96])
	$0 = *($4 + [88])
	*($3) = *($9)
	*($4 + [128]) = *($4 + [112])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [128]) + [8]))
	*((($4 + [144]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [128])
	*($4 + [8]) = $1
	*($4 + [144]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $4($2)
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $9(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $40($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $11(*(($1 + [24])))
	
.LABEL $label$11
	CALL $11($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $11($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [32]) = (int_64)0
	$5 = *($0)
	*($1 + [40]) = CALL current_time()
	$4 = *($1 + [16])
	$6 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [32])
	$7 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [16])
	$8 = ($1 + [40])
	$9 = ($1 + [32])
	$10 = ($1 + [8])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = $10
	*($3 + [24]) = $1
	*($3 + [32]) = $6
	*($3 + [36]) = $9
	*($3 + [40]) = $8
	CALL $126(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)-8281824633301237760, *(*($0 + [8])), $7, $2, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $4($2)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$4 = ($5 + [8])
	$7 = *($4)
	$2 = *(($0 + [8]))
	$11 = *($2)
	$12 = *($1)
	*($3 + [24]) = (int_64))((int_64)9223372036854775807 - CALL $38(*(($1 + [8]))))
	*($1 + [56]) = CALL db_idx64_store($7, (int_64)-8281824633301237760, $11, $12, ($3 + [24]))
	$7 = *($2)
	$11 = *($4)
	$12 = *($1)
	*($3 + [24]) = (int_64))((int_64)9223372036854775807 - *(($1 + [40])))
	*(($1 + [60])) = CALL db_idx64_store($11, (int_64)-8281824633301237759, $7, $12, ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [48]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10017])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10063])
	
.LABEL $label$2
	$5 = ($1 + [8])
	*($4 + [16]) = (int_64))((int_64)9223372036854775807 - CALL $38(*($5)))
	$6 = ($1 + [40])
	*($4 + [24]) = (int_64))((int_64)9223372036854775807 - *($6))
	*($5) = *(*($2))
	$7 = *($1)
	*($6) = CALL current_time()
	if ( ((int_64)$7 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [10114])
	
.LABEL $label$3
	$8 = (($4 + [16]) + [8])
	$2 = *($1 + [16])
	$9 = ( *(($1 + [20])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($9 + [32])
	$10 = (CASTING uint_64)(uint_32 $9)
	$9 = ($1 + [16])
	
.LOOP $label$4:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$6 }
	$3 = CALL $3($2)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$5
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($3 + $2)
	*($4 + [32]) = $4
	*($4 + [44]) = $5
	*($4 + [48]) = $9
	*($4 + [56]) = $6
	*($4 + [40]) = $1
	*($4 + [52]) = ($1 + [32])
	CALL $126(($4 + [40]), ($4 + [32]))
	CALL db_update_i64(*($1 + [52]), (int_64)0, $3, $2)
	if ( ($2 <= [513]) ){ goto $label$7 }
	CALL $4($3)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($4 + [40]) = (int_64))((int_64)9223372036854775807 - CALL $38(*($5)))
	if ( (CALL $2(($4 + [16]), ($4 + [40]), [8]) == 0) ){ goto $label$9 }
	$3 = ($1 + [56])
	$2 = *($3)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$10 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8281824633301237760, ($4 + [32]), $7)
	*($3) = $2
	
.LABEL $label$10
	CALL db_idx64_update($2, (int_64)0, ($4 + [40]))
	
.LABEL $label$9
	*($4 + [40]) = (int_64))((int_64)9223372036854775807 - *($6))
	if ( (CALL $2($8, ($4 + [40]), [8]) == 0) ){ goto $label$11 }
	$1 = ($1 + [60])
	$2 = *($1)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$12 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8281824633301237759, ($4 + [32]), $7)
	*($1) = $2
	
.LABEL $label$12
	CALL db_idx64_update($2, (int_64)0, ($4 + [40]))
	
.LABEL $label$11
	$global$0 = ($4 + [64])
}

int_64 .FUNC $86 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	$4 = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [36]) = [0]
	$5 = *($0)
	*($3) = $5
	*($3 + [8]) = $2
	$0 = CALL db_find_i64($5, $2, (int_64)-8281824633301237760, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $80($3, $0)
	if ( ((int_32)*($0 + [48]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9909])
	
.LABEL $label$2
	if ( ((int_64)*($0 + [8]) != (int_64)0) ){ goto $label$1 }
	$6 = *($0 + [16])
	if ( ( *(($0 + [20])) ? uint_32($6 >> [1]) : ($6 & [1]) ) ){ goto $label$1 }
	$6 = CALL db_next_i64(*($0 + [52]), ($3 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	CALL $80($3, $6)
	
.LABEL $label$3
	CALL $85($3, $0)
	
.LABEL $label$1
	$0 = CALL db_lowerbound_i64(*($3), *(($3 + [8])), (int_64)-8281824633301237760, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	CALL $80($3, $0)
	$4 = (int_64)1
	
.LABEL $label$4
	$7 = *($3 + [24])
	if ( ($7 == 0) ){ goto $label$5 }
	$8 = ($3 + [28])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$9 }
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL $11(*(($6 + [24])))
	
.LABEL $label$10
	CALL $11($6)
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($3 + [24]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $7
	
.LABEL $label$6
	*($8) = $7
	CALL $11($0)
	
.LABEL $label$5
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [48]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10317])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10362])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [10412])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL $11(*(($6 + [24])))
	
.LABEL $label$13
	CALL $11($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$15 }
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL $11(*(($9 + [24])))
	
.LABEL $label$16
	CALL $11($9)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
	$9 = *(($1 + [56]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8281824633301237760, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($9)
	
.LABEL $label$17
	$9 = *(($1 + [60]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$20 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8281824633301237759, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL db_idx64_remove($9)
	
.LABEL $label$19
	$global$0 = ($2 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10017])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10063])
	
.LABEL $label$2
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($2)))
	$5 = *($1)
	$2 = $3
	$3 = ($2 + [-32])
	$global$0 = $3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($2 + [-8])
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = ($1 + [8])
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [16])
	CALL $62(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [28]), (int_64)0, $3, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_64 .FUNC $83 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [32])) = [0]
	*($3 + [8]) = $2
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	*($3 + [36]) = [0]
	$4 = *($0)
	*($3) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $2, (int_64)-8281824633301237760, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $80($3, $6)
	if ( ((int_32)*($5 + [48]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [9909])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9428])
	$4 = *($5 + [8])
	CALL eosio_assert((CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)63)), [9445])
	if ( $5 ){ goto $label$2 }
	CALL eosio_assert([0], [10283])
	CALL eosio_assert([0], [10253])
	
.LABEL $label$2
	$6 = CALL db_next_i64(*($5 + [52]), ($3 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	CALL $80($3, $6)
	
.LABEL $label$3
	CALL $85($3, $5)
	CALL $86($0, $2, $1)
	$2 = CALL $38($4)
	$6 = *($3 + [24])
	if ( ($6 == 0) ){ goto $label$4 }
	$7 = ($3 + [28])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL $11(*(($0 + [24])))
	
.LABEL $label$9
	CALL $11($0)
	
.LABEL $label$8
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$7 }
	$5 = *(($3 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$5 = $6
	
.LABEL $label$5
	*($7) = $6
	CALL $11($5)
	
.LABEL $label$4
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10317])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10362])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1 + [8])
	if ( (uint_64)(((int_64)*(*(($4 + [-24])) + [8]) ^ (int_64)$6) <= (int_64)256) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((uint_64)((int_64)*(*($9) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [10412])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $11($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $11($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10017])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10063])
	
.LABEL $label$2
	$6 = *($1 + [8])
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [10465])
	
.LABEL $label$3
	$7 = (int_64)
	*($1) = $7(*($1) - *($3)))
	if ( ((int_64)$7 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [10513])
	$7 = *($1)
	
.LABEL $label$4
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [10535])
	
.LABEL $label$5
	$3 = ($1 + [8])
	if ( ((int_64)$6 == (int_64)(uint_64)*($3) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [10114])
	
.LABEL $label$6
	$8 = $4
	$4 = ($8 + [-16])
	$global$0 = $4
	CALL memcpy($4, $1, [8])
	*($5 + [8]) = *($3)
	CALL memcpy(($8 + [-8]), ($5 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9877])
	
.LABEL $label$5
	$4 = CALL $3($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $9([64]))) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	CALL $125(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($5 + [56 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $89(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $4($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $11(*(($1 + [24])))
	
.LABEL $label$11
	CALL $11($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $72 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$5 = ($global$0 - [752])
	$global$0 = $5
	CALL require_auth($1)
	if ( CALL is_account($2) ){ goto $label$1 }
	CALL eosio_assert([0], [9153])
	
.LABEL $label$1
	$6 = *($3 + [8])
	$7 = [0]
	*(($5 + [680])) = [0]
	$8 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [656]) = $8)
	*($5 + [664]) = (int_64)-1
	*($5 + [672]) = (int_64)0
	$9 = *($0)
	*($5 + [648]) = $9
	$10 = CALL db_find_i64($9, $8, (int_64)-4157508551318700032, $8)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $44(($5 + [648]), $10)
	if ( ((int_32)*($7 + [40]) == (int_32)($5 + [648])) ){ goto $label$2 }
	CALL eosio_assert([0], [9909])
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [9179])
	
.LABEL $label$2
	CALL require_recipient($1)
	CALL require_recipient($2)
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$5 }
	$10 = uint_32($10 >> [1])
	goto $label$4 
	
.LABEL $label$5
	$10 = *($4 + [4])
	
.LABEL $label$4
	CALL eosio_assert(($10 <= [257]), [8714])
	CALL $66($0, $1)
	if ( ((int_64)$1 != (int_64)$2) ){ goto $label$17 }
	$11 = CALL $25(($5 + [632]), $4)
	*(($5 + [624])) = [0]
	*($5 + [616]) = (int_64)0
	$10 = CALL $17([9198])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$16 }
	*($5 + [616]) = ($10 << [1])
	$4 = (($5 + [616]) | [1])
	if ( $10 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$12 = *($3)
	if ( ((uint_64)((int_64)$12 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$19 }
	$10 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$8 = $9
	$11 = $10
	$10 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$8 = $9
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$11 = ((int_32)$10 < (int_32)[6])
	$13 = ($10 + [1])
	$10 = $13
	if ( $11 ){ goto $label$22 }
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	CALL eosio_assert([0], [8803])
	
.LABEL $label$18
	if ( ((int_64)$12 <= (int_64)0) ){ goto $label$13 }
	if ( ((int_64)$6 == (int_64)*($7 + [8])) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$16
	$13 = (($10 + [16]) & [-16])
	$4 = CALL $9($13)
	*($5 + [616]) = ($13 | [1])
	*($5 + [624]) = $4
	*($5 + [620]) = $10
	
.LABEL $label$15
	CALL memcpy($4, [9198], $10)
	
.LABEL $label$14
	*(($4 + $10)) = [0]
	$8 = CALL $41($11, ($5 + [616]), (int_64)50)
	if ( ((*($5 + [616]) & [1]) == 0) ){ goto $label$23 }
	CALL $11(*($5 + [624]))
	
.LABEL $label$23
	if ( ((*($11) & [1]) == 0) ){ goto $label$24 }
	CALL $11(*($11 + [8]))
	
.LABEL $label$24
	CALL $59($0, $1, $8)
	$4 = *($5 + [672])
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$13
	CALL eosio_assert([0], [9206])
	if ( ((int_64)$6 != (int_64)*($7 + [8])) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $24(($5 + [616]))
	
.LABEL $label$11
	CALL eosio_assert([0], [8849])
	
.LABEL $label$10
	CALL eosio_assert(((int_64)$6 == (int_64)1146504452), [8581])
	$7 = CALL $25(($5 + [600]), $4)
	*(($5 + [592])) = [0]
	*($5 + [584]) = (int_64)0
	$10 = CALL $17([8611])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$37 }
	*($5 + [584]) = ($10 << [1])
	$14 = (($5 + [584]) | [1])
	$11 = $14
	if ( $10 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$13 = (($10 + [16]) & [-16])
	$11 = CALL $9($13)
	*($5 + [584]) = ($13 | [1])
	*($5 + [592]) = $11
	*($5 + [588]) = $10
	$14 = (($5 + [584]) | [1])
	
.LABEL $label$36
	CALL memcpy($11, [8611], $10)
	
.LABEL $label$35
	*(($11 + $10)) = [0]
	$10 = [1]
	$13 = ($11 & [1])
	$11 = *($5 + [584])
	$11 = ( *($5 + [588]) ? uint_32($11 >> [1]) : $13 )
	if ( ($11 == 0) ){ goto $label$38 }
	$10 = ( *($7 + [4]) ? uint_32($10 >> [1]) : $15 )
	$10 = *($7)
	$15 = ($10 & [1])
	$16 = ( *($7 + [8]) ? ($7 + [1]) : $15 )
	$15 = ($16 + $10)
	if ( ((int_32)$10 < (int_32)$11) ){ goto $label$40 }
	$17 = ( *($5 + [592]) ? $14 : $13 )
	$14 = *($17)
	$13 = $16
	
.LOOP $label$41:
	$10 = (($10 - $11) + [1])
	if ( ($10 == 0) ){ goto $label$40 }
	$10 = CALL $1($13, $14, $10)
	if ( ($10 == 0) ){ goto $label$40 }
	if ( (CALL $2($10, $17, $11) == 0) ){ goto $label$39 }
	$13 = ($10 + [1])
	$10 = ($15 - $13)
	if ( ((int_32)$10 >= (int_32)$11) ){ goto $label$41 }
	
.LABEL $label$40
	$10 = $15
	
.LABEL $label$39
	$10 = (((int_32)$10 == (int_32)$16) & ((int_32)$10 != (int_32)$15))
	$13 = (*($5 + [584]) & [1])
	
.LABEL $label$38
	if ( ($13 == 0) ){ goto $label$42 }
	CALL $11(*(($5 + [592])))
	
.LABEL $label$42
	if ( ((*($7) & [1]) == 0) ){ goto $label$43 }
	CALL $11(*(($7 + [8])))
	
.LABEL $label$43
	if ( ($10 == 0) ){ goto $label$64 }
	$10 = *($3)
	CALL $26(($5 + [688]), $4, [6], [-1], $4)
	if ( (*($4) & [1]) ){ goto $label$63 }
	*($4) = [0]
	goto $label$62 
	
.LABEL $label$64
	$7 = CALL $25(($5 + [568]), $4)
	*(($5 + [560])) = [0]
	*($5 + [552]) = (int_64)0
	$10 = CALL $17([9238])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$61 }
	*($5 + [552]) = ($10 << [1])
	$14 = (($5 + [552]) | [1])
	$11 = $14
	if ( $10 ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$63
	*(*($4 + [8])) = [0]
	*($4 + [4]) = [0]
	
.LABEL $label$62
	CALL $29($4, [0])
	*(($4 + [8])) = *((($5 + [688]) + [8]))
	*($4) = *($5 + [688])
	$10 = ([0] - $10)
	if ( $10 ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$61
	$13 = (($10 + [16]) & [-16])
	$11 = CALL $9($13)
	*($5 + [552]) = ($13 | [1])
	*($5 + [560]) = $11
	*($5 + [556]) = $10
	$14 = (($5 + [552]) | [1])
	
.LABEL $label$60
	CALL memcpy($11, [9238], $10)
	
.LABEL $label$59
	*(($11 + $10)) = [0]
	$10 = [1]
	$13 = ($11 & [1])
	$11 = *($5 + [552])
	$11 = ( *($5 + [556]) ? uint_32($11 >> [1]) : $13 )
	if ( ($11 == 0) ){ goto $label$65 }
	$10 = ( *($7 + [4]) ? uint_32($10 >> [1]) : $15 )
	$10 = *($7)
	$15 = ($10 & [1])
	$16 = ( *($7 + [8]) ? ($7 + [1]) : $15 )
	$15 = ($16 + $10)
	if ( ((int_32)$10 < (int_32)$11) ){ goto $label$67 }
	$17 = ( *($5 + [560]) ? $14 : $13 )
	$14 = *($17)
	$13 = $16
	
.LOOP $label$68:
	$10 = (($10 - $11) + [1])
	if ( ($10 == 0) ){ goto $label$67 }
	$10 = CALL $1($13, $14, $10)
	if ( ($10 == 0) ){ goto $label$67 }
	if ( (CALL $2($10, $17, $11) == 0) ){ goto $label$66 }
	$13 = ($10 + [1])
	$10 = ($15 - $13)
	if ( ((int_32)$10 >= (int_32)$11) ){ goto $label$68 }
	
.LABEL $label$67
	$10 = $15
	
.LABEL $label$66
	$10 = (((int_32)$10 == (int_32)$16) & ((int_32)$10 != (int_32)$15))
	$13 = (*($5 + [552]) & [1])
	
.LABEL $label$65
	if ( ($13 == 0) ){ goto $label$69 }
	CALL $11(*(($5 + [560])))
	
.LABEL $label$69
	if ( ((*($7) & [1]) == 0) ){ goto $label$70 }
	CALL $11(*(($7 + [8])))
	
.LABEL $label$70
	if ( ($10 == 0) ){ goto $label$57 }
	$10 = *($3)
	CALL $26(($5 + [688]), $4, [8], [-1], $4)
	if ( (*($4) & [1]) ){ goto $label$72 }
	*($4) = [0]
	goto $label$71 
	
.LABEL $label$72
	*(*($4 + [8])) = [0]
	*($4 + [4]) = [0]
	
.LABEL $label$71
	CALL $29($4, [0])
	*(($4 + [8])) = *((($5 + [688]) + [8]))
	*($4) = *($5 + [688])
	if ( ($10 == 0) ){ goto $label$57 }
	
.LABEL $label$58
	$10 = CALL $25(($5 + [536]), $4)
	$2 = CALL $73($0, $1, $2, (CASTING int_64)(int_32 $10), $10)
	if ( ((*($10) & [1]) == 0) ){ goto $label$73 }
	CALL $11(*($10 + [8]))
	
.LABEL $label$73
	if ( ((int_64)$2 <= (int_64)-1) ){ goto $label$56 }
	if ( (int_64)($2 == 0) ){ goto $label$25 }
	*($5 + [512]) = (int_64)1146504452
	*($5 + [504]) = $2
	$9 = *($0)
	$8 = (int_64)4478533
	if ( (uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$74 }
	CALL eosio_assert([0], [9726])
	$8 = (uint_64)*(($5 + [512])) >> (uint_64)(int_64)8)
	
.LABEL $label$74
	$10 = [0]
	
.LOOP $label$75:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$55 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$76 }
	$8 = $6
	$11 = $10
	$10 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$75 }
	goto $label$54 
	
.LABEL $label$76
	$8 = $6
	
.LOOP $label$77:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$55 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$11 = ((int_32)$10 < (int_32)[6])
	$4 = ($10 + [1])
	$10 = $4
	if ( $11 ){ goto $label$77 }
	$10 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$75 }
	goto $label$54 
	
.LABEL $label$57
	$7 = CALL $25(($5 + [488]), $4)
	*(($5 + [480])) = [0]
	*($5 + [472]) = (int_64)0
	$10 = CALL $17([9247])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$33 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$80 }
	*($5 + [472]) = ($10 << [1])
	$14 = (($5 + [472]) | [1])
	$11 = $14
	if ( $10 ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$80
	$13 = (($10 + [16]) & [-16])
	$11 = CALL $9($13)
	*($5 + [472]) = ($13 | [1])
	*($5 + [480]) = $11
	*($5 + [476]) = $10
	$14 = (($5 + [472]) | [1])
	
.LABEL $label$79
	CALL memcpy($11, [9247], $10)
	
.LABEL $label$78
	*(($11 + $10)) = [0]
	$10 = [1]
	$13 = ($11 & [1])
	$11 = *($5 + [472])
	$11 = ( *($5 + [476]) ? uint_32($11 >> [1]) : $13 )
	if ( ($11 == 0) ){ goto $label$81 }
	$10 = ( *($7 + [4]) ? uint_32($10 >> [1]) : $15 )
	$10 = *($7)
	$15 = ($10 & [1])
	$16 = ( *($7 + [8]) ? ($7 + [1]) : $15 )
	$15 = ($16 + $10)
	if ( ((int_32)$10 < (int_32)$11) ){ goto $label$83 }
	$17 = ( *($5 + [480]) ? $14 : $13 )
	$14 = *($17)
	$13 = $16
	
.LOOP $label$84:
	$10 = (($10 - $11) + [1])
	if ( ($10 == 0) ){ goto $label$83 }
	$10 = CALL $1($13, $14, $10)
	if ( ($10 == 0) ){ goto $label$83 }
	if ( (CALL $2($10, $17, $11) == 0) ){ goto $label$82 }
	$13 = ($10 + [1])
	$10 = ($15 - $13)
	if ( ((int_32)$10 >= (int_32)$11) ){ goto $label$84 }
	
.LABEL $label$83
	$10 = $15
	
.LABEL $label$82
	$10 = (((int_32)$10 == (int_32)$16) & ((int_32)$10 != (int_32)$15))
	$13 = (*($5 + [472]) & [1])
	
.LABEL $label$81
	if ( ($13 == 0) ){ goto $label$85 }
	CALL $11(*(($5 + [480])))
	
.LABEL $label$85
	if ( ((*($7) & [1]) == 0) ){ goto $label$86 }
	CALL $11(*(($7 + [8])))
	
.LABEL $label$86
	if ( ($10 == 0) ){ goto $label$89 }
	$8 = CALL $74($0, $1, $2)
	$9 = *($0)
	*($5 + [448]) = (int_64)3617214756542218240
	*($5 + [440]) = $1
	*(($10 = CALL $9([16]))) = *($5 + [440])
	*(($10 + [8])) = *($5 + [448])
	*($5 + [456]) = $10
	$10 = ($10 + [16])
	*($5 + [464]) = $10
	*($5 + [460]) = $10
	$12 = (int_64)
	if ( (uint_64)(((int_64)$12($8 - ((uint_64)$8 / (uint_64)(int_64)10))) + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$90 }
	CALL eosio_assert([0], [9726])
	
.LABEL $label$90
	$8 = (int_64)4478533
	$10 = [0]
	
.LOOP $label$91:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$88 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$92 }
	$8 = $6
	$11 = $10
	$10 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$91 }
	goto $label$87 
	
.LABEL $label$92
	$8 = $6
	
.LOOP $label$93:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$88 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$11 = ((int_32)$10 < (int_32)[6])
	$4 = ($10 + [1])
	$10 = $4
	if ( $11 ){ goto $label$93 }
	$10 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$91 }
	goto $label$87 
	
.LABEL $label$89
	$11 = CALL $25(($5 + [376]), $4)
	*(($5 + [368])) = [0]
	*($5 + [360]) = (int_64)0
	$10 = CALL $17([9257])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$51 }
	*($5 + [360]) = ($10 << [1])
	$13 = (($5 + [360]) | [1])
	if ( $10 ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$88
	CALL eosio_assert([0], [8618])
	
.LABEL $label$87
	*(($5 + [416])) = (int_64)1146504452
	*(($5 + [432])) = [0]
	*($5 + [400]) = $2
	*($5 + [392]) = $1
	*($5 + [408]) = $12
	*($5 + [424]) = (int_64)0
	$11 = ($5 + [424])
	$10 = CALL $17([9012])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$48 }
	*(($5 + [424])) = ($10 << [1])
	$4 = ($11 + [1])
	if ( $10 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$56
	*($5 + [528]) = (int_64)1146504452
	$6 = (int_64)
	*($5 + [520]) = $6((int_64)0 - $2))
	$8 = (int_64)4478533
	if ( (uint_64)((int_64))((int_64)4611686018427387903 - $2) <= (int_64)9223372036854775807) ){ goto $label$94 }
	CALL eosio_assert([0], [9726])
	$8 = (uint_64)*(($5 + [528])) >> (uint_64)(int_64)8)
	
.LABEL $label$94
	$10 = [0]
	
.LOOP $label$95:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$53 }
	$2 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$96 }
	$8 = $2
	$11 = $10
	$10 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$95 }
	goto $label$52 
	
.LABEL $label$96
	$8 = $2
	
.LOOP $label$97:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$53 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$11 = ((int_32)$10 < (int_32)[6])
	$4 = ($10 + [1])
	$10 = $4
	if ( $11 ){ goto $label$97 }
	$10 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$95 }
	goto $label$52 
	
.LABEL $label$55
	CALL eosio_assert([0], [8618])
	
.LABEL $label$54
	*((($5 + [136]) + [8])) = *((($5 + [504]) + [8]))
	*($5 + [136]) = *($5 + [504])
	CALL $75($0, $9, ($5 + [136]))
	CALL $68($0, $1, $2, $1)
	$4 = *($5 + [672])
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$53
	CALL eosio_assert([0], [8618])
	
.LABEL $label$52
	*((($5 + [120]) + [8])) = *((($5 + [520]) + [8]))
	*($5 + [120]) = *($5 + [520])
	CALL $75($0, $1, ($5 + [120]))
	CALL $68($0, *($0), $6, $1)
	$4 = *($5 + [672])
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$51
	$7 = (($10 + [16]) & [-16])
	$13 = CALL $9($7)
	*($5 + [360]) = ($7 | [1])
	*($5 + [368]) = $13
	*($5 + [364]) = $10
	
.LABEL $label$50
	CALL memcpy($13, [9257], $10)
	
.LABEL $label$49
	*(($13 + $10)) = [0]
	$8 = CALL $41($11, ($5 + [360]), (int_64)0)
	if ( (*($5 + [360]) & [1]) ){ goto $label$45 }
	if ( (*($11) & [1]) ){ goto $label$44 }
	goto $label$29 
	
.LABEL $label$48
	$13 = (($10 + [16]) & [-16])
	$4 = CALL $9($13)
	*(($5 + [432])) = $4
	*(($5 + [428])) = $10
	*($5 + [424]) = ($13 | [1])
	
.LABEL $label$47
	CALL memcpy($4, [9012], $10)
	
.LABEL $label$46
	*(($4 + $10)) = [0]
	$10 = (($5 + [456]) + [8])
	$4 = *($10)
	*($10) = [0]
	*((($5 + [688]) + [24])) = *((($5 + [392]) + [24]))
	*(($10 = (($5 + [688]) + [40]))) = *(($11 + [8]))
	$8 = *($11)
	*(($5 + [424])) = [0]
	*($5 + [736]) = *($5 + [456])
	*($5 + [744]) = $4
	*($5 + [456]) = (int_64)0
	*($5 + [688]) = *($5 + [392])
	*($5 + [696]) = *((($5 + [392]) + [8]))
	*($5 + [704]) = *($5 + [408])
	*($5 + [720]) = $8
	*(($5 + [428])) = [0]
	*((($5 + [392]) + [40])) = [0]
	CALL $50($9, (int_64)-3617168760277827584, ($5 + [736]), ($5 + [688]))
	if ( ((*($5 + [720]) & [1]) == 0) ){ goto $label$98 }
	CALL $11(*($10))
	
.LABEL $label$98
	$10 = *($5 + [736])
	if ( ($10 == 0) ){ goto $label$99 }
	*($5 + [740]) = $10
	CALL $11($10)
	
.LABEL $label$99
	if ( ((*(($5 + [424])) & [1]) == 0) ){ goto $label$25 }
	CALL $11(*(($5 + [432])))
	$4 = *($5 + [672])
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$45
	CALL $11(*($5 + [368]))
	if ( ((*($11) & [1]) == 0) ){ goto $label$29 }
	
.LABEL $label$44
	CALL $11(*($11 + [8]))
	if ( ((int_64)$8 >= (int_64)1) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$34
	CALL $24(($5 + [584]))
	
.LABEL $label$33
	CALL $24(($5 + [472]))
	
.LABEL $label$32
	CALL $24(($5 + [552]))
	
.LABEL $label$31
	CALL $24(($5 + [360]))
	
.LABEL $label$30
	CALL $24($11)
	
.LABEL $label$29
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$27 }
	
.LABEL $label$28
	CALL eosio_assert((uint_64)($8 <= (int_64)3153600001), [9264])
	$9 = *(($3 + [8]))
	*((($5 + [344]) + [8])) = $9
	$6 = *($3)
	*((($5 + [8]) + [8])) = $9
	*($5 + [8]) = $6
	*($5 + [344]) = $6
	$6 = CALL $75($0, $1, ($5 + [8]))
	CALL $76($0, $2, *($3), $8, $1)
	goto $label$26 
	
.LABEL $label$27
	$7 = CALL $25(($5 + [328]), $4)
	*(($5 + [320])) = [0]
	*($5 + [312]) = (int_64)0
	$10 = CALL $17([9320])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$102 }
	*($5 + [312]) = ($10 << [1])
	$14 = (($5 + [312]) | [1])
	$11 = $14
	if ( $10 ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$102
	$13 = (($10 + [16]) & [-16])
	$11 = CALL $9($13)
	*($5 + [312]) = ($13 | [1])
	*($5 + [320]) = $11
	*($5 + [316]) = $10
	$14 = (($5 + [312]) | [1])
	
.LABEL $label$101
	CALL memcpy($11, [9320], $10)
	
.LABEL $label$100
	*(($11 + $10)) = [0]
	$10 = [1]
	$13 = ($11 & [1])
	$11 = *($5 + [312])
	$11 = ( *($5 + [316]) ? uint_32($11 >> [1]) : $13 )
	if ( ($11 == 0) ){ goto $label$103 }
	$10 = ( *($7 + [4]) ? uint_32($10 >> [1]) : $15 )
	$10 = *($7)
	$15 = ($10 & [1])
	$16 = ( *($7 + [8]) ? ($7 + [1]) : $15 )
	$15 = ($16 + $10)
	if ( ((int_32)$10 < (int_32)$11) ){ goto $label$105 }
	$17 = ( *($5 + [320]) ? $14 : $13 )
	$14 = *($17)
	$13 = $16
	
.LOOP $label$106:
	$10 = (($10 - $11) + [1])
	if ( ($10 == 0) ){ goto $label$105 }
	$10 = CALL $1($13, $14, $10)
	if ( ($10 == 0) ){ goto $label$105 }
	if ( (CALL $2($10, $17, $11) == 0) ){ goto $label$104 }
	$13 = ($10 + [1])
	$10 = ($15 - $13)
	if ( ((int_32)$10 >= (int_32)$11) ){ goto $label$106 }
	
.LABEL $label$105
	$10 = $15
	
.LABEL $label$104
	$10 = (((int_32)$10 == (int_32)$16) & ((int_32)$10 != (int_32)$15))
	$13 = (*($5 + [312]) & [1])
	
.LABEL $label$103
	if ( ($13 == 0) ){ goto $label$107 }
	CALL $11(*(($5 + [320])))
	
.LABEL $label$107
	if ( ((*($7) & [1]) == 0) ){ goto $label$108 }
	CALL $11(*(($7 + [8])))
	
.LABEL $label$108
	if ( ($10 == 0) ){ goto $label$109 }
	$10 = ($3 + [8])
	$6 = *($10)
	*((($5 + [296]) + [8])) = $6
	$8 = *($3)
	*((($5 + [56]) + [8])) = $6
	*($5 + [296]) = $8
	*($5 + [56]) = $8
	$6 = CALL $75($0, $1, ($5 + [56]))
	$9 = *($10)
	*((($5 + [280]) + [8])) = $9
	$12 = *($0)
	$8 = *($3)
	*((($5 + [40]) + [8])) = $9
	*($5 + [280]) = $8
	*($5 + [40]) = $8
	CALL $49($0, $12, ($5 + [40]), $1)
	*(($11 = (($5 + [264]) + [8]))) = *($10)
	*($5 + [264]) = *($3)
	$10 = CALL $26(($5 + [248]), $4, [6], [-1], $4)
	*((($5 + [24]) + [8])) = *($11)
	*($5 + [24]) = *($5 + [264])
	CALL $69($0, $1, $2, ($5 + [24]), $10)
	if ( ((*($10) & [1]) == 0) ){ goto $label$26 }
	CALL $11(*($10 + [8]))
	goto $label$26 
	
.LABEL $label$109
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$110 }
	$7 = CALL $25(($5 + [232]), $4)
	*(($5 + [224])) = [0]
	*($5 + [216]) = (int_64)0
	$10 = CALL $17([9327])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$113 }
	*($5 + [216]) = ($10 << [1])
	$14 = (($5 + [216]) | [1])
	$11 = $14
	if ( $10 ){ goto $label$112 }
	goto $label$111 
	
.LABEL $label$113
	$13 = (($10 + [16]) & [-16])
	$11 = CALL $9($13)
	*($5 + [216]) = ($13 | [1])
	*($5 + [224]) = $11
	*($5 + [220]) = $10
	$14 = (($5 + [216]) | [1])
	
.LABEL $label$112
	CALL memcpy($11, [9327], $10)
	
.LABEL $label$111
	*(($11 + $10)) = [0]
	$10 = [1]
	$13 = ($11 & [1])
	$11 = *($5 + [216])
	$11 = ( *($5 + [220]) ? uint_32($11 >> [1]) : $13 )
	if ( ($11 == 0) ){ goto $label$114 }
	$10 = ( *($7 + [4]) ? uint_32($10 >> [1]) : $15 )
	$10 = *($7)
	$15 = ($10 & [1])
	$16 = ( *($7 + [8]) ? ($7 + [1]) : $15 )
	$15 = ($16 + $10)
	if ( ((int_32)$10 < (int_32)$11) ){ goto $label$116 }
	$17 = ( *($5 + [224]) ? $14 : $13 )
	$14 = *($17)
	$13 = $16
	
.LOOP $label$117:
	$10 = (($10 - $11) + [1])
	if ( ($10 == 0) ){ goto $label$116 }
	$10 = CALL $1($13, $14, $10)
	if ( ($10 == 0) ){ goto $label$116 }
	if ( (CALL $2($10, $17, $11) == 0) ){ goto $label$115 }
	$13 = ($10 + [1])
	$10 = ($15 - $13)
	if ( ((int_32)$10 >= (int_32)$11) ){ goto $label$117 }
	
.LABEL $label$116
	$10 = $15
	
.LABEL $label$115
	$10 = (((int_32)$10 == (int_32)$16) & ((int_32)$10 != (int_32)$15))
	$13 = (*($5 + [216]) & [1])
	
.LABEL $label$114
	if ( ($13 == 0) ){ goto $label$118 }
	CALL $11(*(($5 + [224])))
	
.LABEL $label$118
	if ( ((*($7) & [1]) == 0) ){ goto $label$119 }
	CALL $11(*(($7 + [8])))
	
.LABEL $label$119
	if ( ($10 == 0) ){ goto $label$122 }
	$10 = [0]
	*(($5 + [720])) = [0]
	*($5 + [704]) = (int_64)-1
	*($5 + [712]) = (int_64)0
	*($5 + [724]) = [0]
	$8 = *($0)
	*($5 + [688]) = $8
	*($5 + [696]) = $8
	$11 = CALL db_find_i64($8, $8, (int_64)5380477997063077888, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$121 }
	$10 = CALL $55(($5 + [688]), $11)
	if ( ((int_32)*($10 + [48]) == (int_32)($5 + [688])) ){ goto $label$120 }
	CALL eosio_assert([0], [9909])
	goto $label$120 
	
.LABEL $label$122
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$124 }
	$10 = uint_32($10 >> [1])
	goto $label$123 
	
.LABEL $label$124
	$10 = *($4 + [4])
	
.LABEL $label$123
	CALL eosio_assert(((int_32)$10 == (int_32)[64]), [9336])
	*(($11 = (($5 + [200]) + [8]))) = *(($3 + [8]))
	*($5 + [200]) = *($3)
	$10 = CALL $25(($5 + [184]), $4)
	*((($5 + [104]) + [8])) = *($11)
	*($5 + [104]) = *($5 + [200])
	CALL $51($0, $1, ($5 + [104]), $10, $1)
	if ( ((*($10) & [1]) == 0) ){ goto $label$110 }
	CALL $11(*($10 + [8]))
	goto $label$110 
	
.LABEL $label$121
	CALL eosio_assert([0], [10283])
	CALL eosio_assert([0], [10253])
	
.LABEL $label$120
	$11 = CALL db_next_i64(*($10 + [52]), ($5 + [440]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$125 }
	CALL $55(($5 + [688]), $11)
	
.LABEL $label$125
	CALL $77(($5 + [688]), $10)
	$4 = *($5 + [712])
	if ( ($4 == 0) ){ goto $label$110 }
	$13 = ($5 + [716])
	$10 = *($13)
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$127 }
	
.LOOP $label$128:
	$10 = ($10 + [-24])
	$11 = *($10)
	*($10) = [0]
	if ( ($11 == 0) ){ goto $label$129 }
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$130 }
	CALL $11(*(($11 + [24])))
	
.LABEL $label$130
	CALL $11($11)
	
.LABEL $label$129
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$128 }
	$10 = *(($5 + [712]))
	goto $label$126 
	
.LABEL $label$127
	$10 = $4
	
.LABEL $label$126
	*($13) = $4
	CALL $11($10)
	
.LABEL $label$110
	$10 = ($3 + [8])
	$6 = *($10)
	*((($5 + [168]) + [8])) = $6
	$8 = *($3)
	*((($5 + [88]) + [8])) = $6
	*($5 + [168]) = $8
	*($5 + [88]) = $8
	$6 = CALL $75($0, $1, ($5 + [88]))
	$9 = *($10)
	*((($5 + [152]) + [8])) = $9
	$8 = *($3)
	*((($5 + [72]) + [8])) = $9
	*($5 + [72]) = $8
	*($5 + [152]) = $8
	CALL $49($0, $2, ($5 + [72]), $1)
	
.LABEL $label$26
	CALL $64($0, $1, *($3), $6)
	
.LABEL $label$25
	$4 = *($5 + [672])
	if ( ($4 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$13 = ($5 + [676])
	$10 = *($13)
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$132 }
	
.LOOP $label$133:
	$10 = ($10 + [-24])
	$11 = *($10)
	*($10) = [0]
	if ( ($11 == 0) ){ goto $label$134 }
	CALL $11($11)
	
.LABEL $label$134
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$133 }
	$10 = *(($5 + [672]))
	goto $label$131 
	
.LABEL $label$132
	$10 = $4
	
.LABEL $label$131
	*($13) = $4
	CALL $11($10)
	
.LABEL $label$8
	$global$0 = ($5 + [752])
	return (unreachable)
	
.LABEL $label$7
	CALL $24(($5 + [312]))
	
.LABEL $label$6
	CALL $24(($5 + [216]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_64 .FUNC $73 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	CALL eosio_assert((((int_64)$6 != (int_64)$2) & ((int_64)$6 != (int_64)$1)), [9464])
	CALL $78($0, $1, $2, $3)
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$7 = CALL $17([9012])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$4 }
	*($5 + [16]) = ($7 << [1])
	$8 = (($5 + [16]) | [1])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$9 = (($7 + [16]) & [-16])
	$8 = CALL $9($9)
	*($5 + [16]) = ($9 | [1])
	*($5 + [24]) = $8
	*($5 + [20]) = $7
	
.LABEL $label$3
	CALL memcpy($8, [9012], $7)
	
.LABEL $label$2
	*(($8 + $7)) = [0]
	CALL $79($0, $2, $1, (int_64)0, $3, ($5 + [16]))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $11(*($5 + [24]))
	
.LABEL $label$5
	$7 = CALL $25($5, $4)
	$2 = CALL $79($0, $1, $2, $3, (int_64)0, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$6 }
	CALL $11(*($7 + [8]))
	
.LABEL $label$6
	$global$0 = ($5 + [32])
	return $2
	
.LABEL $label$1
	CALL $24(($5 + [16]))
	return (unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [64])
	$global$0 = $2
	$5 = *($3)
	$3 = *($0 + [4])
	$4 = *($3 + [4])
	*($1) = ((int_64)*($4) ^ (int_64)*($5))
	*($1 + [8]) = *($5)
	*($1 + [16]) = *($4)
	*($1 + [24]) = *(*($3 + [8]))
	$6 = *($0)
	*($1 + [64]) = ((int_64)((int_64)*(*($3 + [12])) * (int_64)1000000) + (int_64)CALL current_time())
	$4 = *($5)
	$5 = *($3 + [16])
	CALL eosio_assert(((int_32)( *($5 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) == (int_32)[64]), [8550])
	$4 = $2
	CALL $42($5, ($4 + [16]), [32])
	*(($1 + [56])) = *((($4 + [16]) + [24]))
	*(($1 + [48])) = *(($4 + [32]))
	*(($1 + [40])) = *($4 + [24])
	*($1 + [32]) = *($4 + [16])
	$7 = ($1 + [72])
	CALL $27($7, *($3 + [20]))
	$3 = *($1 + [72])
	$5 = ( *(($1 + [76])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [72])
	$8 = (CASTING uint_64)(uint_32 $5)
	$9 = ($1 + [32])
	$10 = ($1 + [64])
	$11 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL $3($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($2 - (($3 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	*($4 + [4]) = $5
	*($4) = $5
	*($4 + [8]) = ($5 + $3)
	*($4 + [56]) = $4
	*($4 + [20]) = ($1 + [8])
	*($4 + [16]) = $1
	*($4 + [24]) = ($1 + [16])
	*($4 + [28]) = $11
	*($4 + [32]) = $9
	*($4 + [36]) = $10
	*($4 + [40]) = $7
	CALL $124(($4 + [16]), ($4 + [56]))
	$8 = *($1)
	*($1 + [88]) = CALL db_store_i64(*($6 + [8]), (int_64)7615825362324684800, *(*($0 + [8])), $8, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $4($5)
	
.LABEL $label$4
	if ( (uint_64)($8 <= *($6 + [16])) ){ goto $label$5 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$3 = ($6 + [8])
	$8 = *($3)
	$5 = *(($0 + [8]))
	$12 = *($5)
	$13 = *($1)
	*($4 + [16]) = *(($1 + [8]))
	*($1 + [92]) = CALL db_idx64_store($8, (int_64)7615825362324684800, $12, $13, ($4 + [16]))
	$8 = *($5)
	$12 = *($3)
	$13 = *($1)
	*($4 + [16]) = *(($1 + [16]))
	*(($1 + [96])) = CALL db_idx64_store($12, (int_64)7615825362324684801, $8, $13, ($4 + [16]))
	$global$0 = ($4 + [64])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $9(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $40($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [72]) & [1]) == 0) ){ goto $label$11 }
	CALL $11(*(($1 + [80])))
	
.LABEL $label$11
	CALL $11($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $11($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $76 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [112])
	$global$0 = $5
	*($5 + [40]) = $2
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	*($5 + [24]) = (int_64)0
	$2 = *($0)
	*($5) = $2
	*($5 + [8]) = $1
	$3 = ((int_64)CALL current_time() + (int_64)((int_64)$3 * (int_64)1000000))
	$0 = CALL db_find_i64($2, $1, (int_64)-3772704971946590208, $3)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $60($5, $0)
	if ( ((int_32)*($0 + [24]) == (int_32)$5) ){ goto $label$4 }
	CALL eosio_assert([0], [9909])
	
.LABEL $label$4
	*($5 + [48]) = ($5 + [40])
	CALL $84($5, $0, ($5 + [48]))
	$6 = *($5 + [24])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)$2 == (int_64)CALL current_receiver()) ){ goto $label$5 }
	CALL eosio_assert([0], [9960])
	
.LABEL $label$5
	*(($0 = CALL $9([40])) + [24]) = $5
	*($0) = $3
	*($0 + [8]) = *($5 + [40])
	*($5 + [80]) = (($5 + [48]) + [24])
	*($5 + [76]) = ($5 + [48])
	*($5 + [72]) = ($5 + [48])
	*($5 + [88]) = ($5 + [72])
	*($5 + [100]) = ($0 + [8])
	*($5 + [96]) = $0
	*($5 + [104]) = ($0 + [16])
	CALL $62(($5 + [96]), ($5 + [88]))
	$1 = *($0)
	$6 = CALL db_store_i64(*(($5 + [8])), (int_64)-3772704971946590208, $4, $1, ($5 + [48]), [24])
	*($0 + [28]) = $6
	$7 = ($5 + [16])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$6 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [96]) = $0
	$1 = *($0)
	*($5 + [48]) = $1
	*($5 + [72]) = $6
	$8 = ($5 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($5 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $1
	*($7 + [16]) = $6
	*($5 + [96]) = [0]
	*($7) = $0
	*($8) = ($7 + [24])
	$0 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( $0 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $63(($5 + [24]), ($5 + [96]), ($5 + [48]), ($5 + [72]))
	$0 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $11($0)
	
.LABEL $label$7
	$6 = *($5 + [24])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($5 + [28])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$13 }
	CALL $11($7)
	
.LABEL $label$13
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($5 + [24]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $6
	
.LABEL $label$10
	*($8) = $6
	CALL $11($0)
	
.LABEL $label$1
	$global$0 = ($5 + [112])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [48]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10317])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10362])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [10412])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL $11(*(($6 + [24])))
	
.LABEL $label$13
	CALL $11($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$15 }
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL $11(*(($9 + [24])))
	
.LABEL $label$16
	CALL $11($9)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
	$9 = *(($1 + [56]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5380477997063077888, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($9)
	
.LABEL $label$17
	$9 = *(($1 + [60]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$20 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5380477997063077889, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL db_idx64_remove($9)
	
.LABEL $label$19
	$global$0 = ($2 + [16])
}

int_64 .FUNC $74 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = CALL $83($0, $2, $1)
	CALL $78($0, $2, $1, $4)
	*($3 + [16]) = $4
	*($3 + [24]) = (int_64)1146504452
	$5 = *($0)
	if ( (uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$1 }
	CALL eosio_assert([0], [9726])
	
.LABEL $label$1
	$6 = (int_64)4478533
	$7 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$6 = $8
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$6 = $8
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$6 }
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [8618])
	
.LABEL $label$2
	*(($3 + [8])) = *((($3 + [16]) + [8]))
	*($3) = *($3 + [16])
	CALL $75($0, $5, $3)
	CALL $68($0, $2, $4, $1)
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $39 (int_32 $0)
{
}

void .FUNC $36 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $37 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $78 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	*($4 + [56]) = $3
	*($4 + [64]) = $2
	*(($4 + [48])) = [0]
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	*($4 + [52]) = [0]
	$5 = *($0)
	*($4 + [16]) = $5
	*($4 + [24]) = $5
	$0 = CALL db_find_i64($5, $5, (int_64)-8281824633301237760, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	$0 = CALL $80(($4 + [16]), $0)
	if ( ((int_32)*($0 + [48]) == (int_32)($4 + [16])) ){ goto $label$8 }
	CALL eosio_assert([0], [9909])
	
.LABEL $label$8
	$5 = ((int_64)*($4 + [56]) + (int_64)*($0 + [8]))
	*($4 + [104]) = $5
	if ( ((int_64)$5 == (int_64)0) ){ goto $label$6 }
	*($4 + [80]) = ($4 + [104])
	CALL $87(($4 + [16]), $0, ($4 + [80]))
	$6 = *($4 + [40])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	CALL eosio_assert(((int_64)$3 != (int_64)0), [9540])
	*($4 + [12]) = ($4 + [56])
	*($4 + [8]) = ($4 + [64])
	*($4 + [104]) = $1
	if ( ((int_64)*($4 + [16]) == (int_64)CALL current_receiver()) ){ goto $label$9 }
	CALL eosio_assert([0], [9960])
	
.LABEL $label$9
	*($4 + [84]) = ($4 + [8])
	*($4 + [80]) = ($4 + [16])
	*($4 + [88]) = ($4 + [104])
	*(($0 = CALL $9([64]))) = (int_64)0
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [24]) = [0]
	*($0 + [48]) = ($4 + [16])
	CALL $88(($4 + [80]), $0)
	*($4 + [96]) = $0
	$5 = *($0)
	*($4 + [80]) = $5
	$6 = *($0 + [52])
	*($4 + [76]) = $6
	$7 = ($4 + [44])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($4 + [48]))) ){ goto $label$5 }
	*($8 + [8]) = $5
	*($8 + [16]) = $6
	*($4 + [96]) = [0]
	*($8) = $0
	*($7) = ($8 + [24])
	$0 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$8 = CALL db_next_i64(*($0 + [52]), ($4 + [80]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	CALL $80(($4 + [16]), $8)
	
.LABEL $label$10
	CALL $85(($4 + [16]), $0)
	$6 = *($4 + [40])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $89(($4 + [40]), ($4 + [96]), ($4 + [80]), ($4 + [76]))
	$0 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( $0 ){ goto $label$3 }
	
.LABEL $label$4
	$6 = *($4 + [40])
	if ( ($6 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $11(*(($0 + [24])))
	
.LABEL $label$11
	CALL $11($0)
	$6 = *($4 + [40])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($4 + [44])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$14:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL $11(*(($8 + [24])))
	
.LABEL $label$16
	CALL $11($8)
	
.LABEL $label$15
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$14 }
	$0 = *(($4 + [40]))
	goto $label$12 
	
.LABEL $label$13
	$0 = $6
	
.LABEL $label$12
	*($7) = $6
	CALL $11($0)
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

int_64 .FUNC $79 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [128])
	$global$0 = $6
	*($6 + [72]) = $3
	*($6 + [64]) = $4
	*($6 + [80]) = $1
	*(($6 + [56])) = [0]
	*($6 + [32]) = $2
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	*($6 + [60]) = [0]
	$7 = *($0)
	*($6 + [24]) = $7
	$0 = CALL db_find_i64($7, $2, (int_64)-8281824633301237760, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$12 }
	$0 = CALL $80(($6 + [24]), $0)
	if ( ((int_32)*($0 + [48]) == (int_32)($6 + [24])) ){ goto $label$13 }
	CALL eosio_assert([0], [9909])
	
.LABEL $label$13
	$1 = *($0 + [8])
	$3 = ((int_64)*($6 + [72]) + (int_64)$1)
	*($6 + [8]) = $3
	if ( ((int_64)$3 < (int_64)1) ){ goto $label$14 }
	CALL eosio_assert([0], [9445])
	
.LABEL $label$14
	$3 = ((int_64)*($6 + [64]) + (int_64)*($0 + [32]))
	*($6 + [88]) = $3
	if ( ((int_64)$3 < (int_64)1) ){ goto $label$15 }
	CALL eosio_assert([0], [9520])
	$3 = *($6 + [88])
	
.LABEL $label$15
	if ( ((int_64)((int_64)$3 | (int_64)*($6 + [8])) == (int_64)0) ){ goto $label$11 }
	if ( (int_64)(*($6 + [72]) == 0) ){ goto $label$10 }
	$3 = *($6 + [80])
	*($6 + [112]) = $5
	*($6 + [108]) = ($6 + [88])
	*($6 + [104]) = ($6 + [8])
	CALL $90(($6 + [24]), $0, $3, ($6 + [104]))
	goto $label$9 
	
.LABEL $label$12
	$1 = CALL $38($3)
	if ( ((int_64)((int_64)$4 | (int_64)$3) < (int_64)0) ){ goto $label$16 }
	CALL eosio_assert([0], [9445])
	$3 = *($6 + [72])
	
.LABEL $label$16
	if ( (int_64)($3 == 0) ){ goto $label$8 }
	$3 = *($6 + [80])
	*($6 + [16]) = $5
	*($6 + [12]) = ($6 + [72])
	*($6 + [8]) = ($6 + [80])
	*($6 + [88]) = $3
	if ( ((int_64)*($6 + [24]) == (int_64)CALL current_receiver()) ){ goto $label$17 }
	CALL eosio_assert([0], [9960])
	
.LABEL $label$17
	*($6 + [108]) = ($6 + [8])
	*($6 + [104]) = ($6 + [24])
	*($6 + [112]) = ($6 + [88])
	*(($0 = CALL $9([64]))) = (int_64)0
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [24]) = [0]
	*($0 + [48]) = ($6 + [24])
	CALL $91(($6 + [104]), $0)
	*($6 + [120]) = $0
	$3 = *($0)
	*($6 + [104]) = $3
	$8 = *($0 + [52])
	*($6 + [100]) = $8
	$9 = ($6 + [52])
	$5 = *($9)
	if ( ((uint_32)$5 >= (uint_32)*(($6 + [56]))) ){ goto $label$7 }
	*($5 + [8]) = $3
	*($5 + [16]) = $8
	*($6 + [120]) = [0]
	*($5) = $0
	*($9) = ($5 + [24])
	$0 = *($6 + [120])
	*($6 + [120]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$11
	$5 = CALL db_next_i64(*($0 + [52]), ($6 + [104]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$18 }
	CALL $80(($6 + [24]), $5)
	
.LABEL $label$18
	CALL $85(($6 + [24]), $0)
	goto $label$9 
	
.LABEL $label$10
	*($6 + [108]) = ($6 + [88])
	*($6 + [104]) = ($6 + [8])
	CALL $92(($6 + [24]), $0, $2, ($6 + [104]))
	
.LABEL $label$9
	$3 = (int_64))(CALL $38($1) - CALL $38(*($6 + [8])))
	$8 = *($6 + [48])
	if ( $8 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	*($6 + [92]) = ($6 + [64])
	*($6 + [88]) = ($6 + [80])
	*($6 + [8]) = $2
	if ( ((int_64)*($6 + [24]) == (int_64)CALL current_receiver()) ){ goto $label$19 }
	CALL eosio_assert([0], [9960])
	
.LABEL $label$19
	*($6 + [108]) = ($6 + [88])
	*($6 + [104]) = ($6 + [24])
	*($6 + [112]) = ($6 + [8])
	*(($0 = CALL $9([64]))) = (int_64)0
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [24]) = [0]
	*($0 + [48]) = ($6 + [24])
	CALL $93(($6 + [104]), $0)
	*($6 + [120]) = $0
	$3 = *($0)
	*($6 + [104]) = $3
	$8 = *($0 + [52])
	*($6 + [100]) = $8
	$9 = ($6 + [52])
	$5 = *($9)
	if ( ((uint_32)$5 >= (uint_32)*(($6 + [56]))) ){ goto $label$6 }
	*($5 + [8]) = $3
	*($5 + [16]) = $8
	*($6 + [120]) = [0]
	*($5) = $0
	*($9) = ($5 + [24])
	$0 = *($6 + [120])
	*($6 + [120]) = [0]
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	CALL $89(($6 + [48]), ($6 + [120]), ($6 + [104]), ($6 + [100]))
	$0 = *($6 + [120])
	*($6 + [120]) = [0]
	if ( $0 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	CALL $89(($6 + [48]), ($6 + [120]), ($6 + [104]), ($6 + [100]))
	$0 = *($6 + [120])
	*($6 + [120]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$20 }
	CALL $11(*(($0 + [24])))
	
.LABEL $label$20
	CALL $11($0)
	
.LABEL $label$4
	$3 = (int_64))((int_64)0 - $1)
	$8 = *($6 + [48])
	if ( ($8 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$21 }
	CALL $11(*(($0 + [24])))
	
.LABEL $label$21
	CALL $11($0)
	$3 = (int_64))((int_64)0 - $1)
	$8 = *($6 + [48])
	if ( $8 ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($6 + [128])
	return $3
	
.LABEL $label$1
	$9 = ($6 + [52])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$23 }
	
.LOOP $label$24:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$25 }
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$26 }
	CALL $11(*(($5 + [24])))
	
.LABEL $label$26
	CALL $11($5)
	
.LABEL $label$25
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$24 }
	$0 = *(($6 + [48]))
	goto $label$22 
	
.LABEL $label$23
	$0 = $8
	
.LABEL $label$22
	*($9) = $8
	CALL $11($0)
	$global$0 = ($6 + [128])
	return $3
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $17([8545])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $9($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8545], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $6())
	*(CALL $6()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $23($4, ($3 + [12]), $2)
	$5 = CALL $6()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL $11(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $33($3)
	
.LABEL $label$1
	CALL $34($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $33 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $35($1, $0, [8596])
	CALL $36()
	(unreachable)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $17($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $28($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $28($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $2(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9900])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9900])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9900])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9900])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[31]) ){ goto $label$5 }
	CALL eosio_assert([0], [9900])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $4, [32])
	*(($3 = ($3 + [4]))) = (*($3) + [32])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9900])
	$4 = *(($3 + [4]))
	
.LABEL $label$6
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $108(*($1), *($0 + [24]))
}