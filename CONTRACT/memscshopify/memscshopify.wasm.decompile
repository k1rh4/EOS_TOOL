(data (i32.const 8192) " Invalid merchant name cannot create \00")
(data (i32.const 8230) " Invalid from account \00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8339) " Invalid to account \00")
(data (i32.const 8360) ".m\00")
(data (i32.const 8363) "string is too long to be a valid name\00")
(data (i32.const 8401) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8468) "character is not in allowed character set for names\00")
(data (i32.const 8520) "cannot create objects in table of another contract\00")
(data (i32.const 8571) "write\00")
(data (i32.const 8577) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8628) "error reading iterator\00")
(data (i32.const 8651) "read\00")
(data (i32.const 8656) "get\00")
(data (i32.const 8660) "object passed to modify is not in multi_index\00")
(data (i32.const 8706) "cannot modify objects in table of another contract\00")
(data (i32.const 8757) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8816) "attempt to add asset with different symbol\00")
(data (i32.const 8859) "addition underflow\00")
(data (i32.const 8878) "addition overflow\00")
(data (i32.const 8896) "attempt to subtract asset with different symbol\00")
(data (i32.const 8944) "subtraction underflow\00")
(data (i32.const 8966) "subtraction overflow\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "action_data_size" (func $fimport$4 (result i32)))
(import "env" "read_action_data" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$6 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$9 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "memcpy" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$13 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$14 (param i32 i64 i32)))
(import "env" "send_inline" (func $fimport$15 (param i32 i32)))
(import "env" "abort" (func $fimport$16))
(import "env" "memset" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$30 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$31 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$34 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$36 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$37 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$38 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $12))
(export "_Znwj" (func $33))
(export "_ZdlPv" (func $35))
(export "_Znaj" (func $34))
(export "_ZdaPv" (func $36))
(export "_ZnwjSt11align_val_t" (func $37))
(export "_ZnajSt11align_val_t" (func $38))
(export "_ZdlPvSt11align_val_t" (func $39))
(export "_ZdaPvSt11align_val_t" (func $40))
(table $0 4 4 anyfunc)
(elem (i32.const 1) $1 $9 $6)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17404))
(global $global$2 i32 (i32.const 17404))


void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $25(*($1), *($0))
	$3 = *($0)
	$4 = ($3 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8651])
	$1 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $1, [8])
	$4 = (*($1) + [8])
	*(($1 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8651])
	$4 = *($1)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*(($3 + [24])) = *($2 + [8])
	*($1) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = CALL $42(($2 + [32]), $1)
	*(($4 = (($2 + [16]) + [8]))) = *(($1 + [24]))
	*($2 + [16]) = *($1 + [16])
	*((($2 + [48]) + [8])) = *($4)
	*($2 + [48]) = *($2 + [16])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*($0) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$4 = CALL $42(($2 + [80]), $3)
	$5 = *((($2 + [48]) + [8]))
	*((($2 + [64]) + [8])) = $5
	*(($2 + [8])) = $5
	$5 = *($2 + [48])
	*($2) = $5
	*($2 + [64]) = $5
	CALL void $0((int_32 $4), (int_32 $2), (int_32 $1))
	if ( (*($2 + [80]) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $57($0)
	
.LABEL $label$1
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $31(CALL $30($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8571])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8571])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $23(*($1), *($0))
	$3 = *($0)
	$4 = ($3 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8571])
	$1 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $4, [8])
	$4 = (*($1) + [8])
	*(($1 = ($0 + [4]))) = $4
	*($2 + [8]) = *(($3 + [24]))
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8571])
	$4 = *($1)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [8]), [8])
	*($1) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = CALL $42(($2 + [64]), $1)
	$4 = CALL $42(($2 + [48]), ($1 + [12]))
	*(($5 = (($2 + [32]) + [8]))) = *(($1 + [32]))
	*($2 + [32]) = *($1 + [24])
	$1 = CALL $42(($2 + [16]), ($1 + [40]))
	*(($2 + [8])) = *($5)
	*($2) = *($2 + [32])
	CALL $32($0, $3, $4, $2, $1)
	if ( (*($1) & [1]) ){ goto $label$5 }
	if ( (*($4) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [80])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $25(*($1), *($0))
	$3 = *($0)
	CALL $25(*($1), ($3 + [12]))
	$4 = ($3 + [24])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8651])
	$5 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $5, [8])
	$4 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8651])
	$4 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*(($3 + [32])) = *($2 + [8])
	*($5) = (*($5) + [8])
	CALL $25(*($1), ($3 + [40]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8571])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [8571])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8571])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [7]) = *($1 + [8])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8571])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [7]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8571])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [24])
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8571])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, $5, [8])
	*($3) = (*($3) + [8])
	$4 = ($1 + [56])
	$3 = *($0 + [4])
	$0 = CALL $23(CALL $23($0, ($1 + [32])), ($1 + [44]))
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8571])
	$3 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *(($1 + [64]))
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8571])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [8]), [8])
	*($3) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $26($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $45($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $45($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $41($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8651])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($0 + [8])
	if ( ((int_32)*($5) != (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert([0], [8651])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy(($2 + [7]), $4, [1])
	$4 = (*($3) + [1])
	*($3) = $4
	*(($1 + [8])) = ((int_32)*($2 + [7]) != (int_32)[0])
	$3 = ($1 + [16])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8651])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [24])
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8651])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($5, $4, [8])
	*($3) = (*($3) + [8])
	$4 = ($1 + [56])
	$3 = *($0 + [4])
	$0 = CALL $25(CALL $25($0, ($1 + [32])), ($1 + [44]))
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8651])
	$3 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8651])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [64])) = *($2 + [8])
	*($3) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $46($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8656])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $27($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8651])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

int_32 .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $48 (int_32 $0)
{
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $44($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $41 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $47 ()
{
	return [8992]
}

void .FUNC $46 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $8 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [72]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8660])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8706])
	
.LABEL $label$2
	$7 = *($1 + [32])
	$8 = ($7 & [1])
	$6 = ($1 + [33])
	*($5 + [56]) = ( *(($1 + [40])) ? $6 : $8 )
	*($5 + [60]) = ( *(($1 + [36])) ? uint_32($7 >> [1]) : $8 )
	*($5 + [16]) = *($5 + [56])
	*($5 + [40]) = *(CALL $2(($5 + [24]), ($5 + [16])))
	$9 = *($1)
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)*(($1 + [64]))) ){ goto $label$3 }
	CALL eosio_assert([0], [8816])
	
.LABEL $label$3
	$10 = ((int_64)*($1 + [56]) + (int_64)*($3))
	*($1 + [56]) = $10
	if ( ((int_64)$10 <= (int_64)-4611686018427387904) ){ goto $label$8 }
	if ( ((int_64)$10 >= (int_64)4611686018427387904) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert([0], [8859])
	if ( ((int_64)*(($1 + [56])) < (int_64)4611686018427387904) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [8878])
	if ( ((int_64)$9 != (int_64)*($1)) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_64)$9 == (int_64)*($1)) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [8757])
	
.LABEL $label$4
	$3 = *(($1 + [32]))
	$7 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [41])
	$10 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$9:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$9 }
	$7 = *($1 + [44])
	$7 = ( *(($1 + [48])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$10 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$10:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$10 }
	if ( ($3 <= [513]) ){ goto $label$12 }
	$4 = CALL $54($3)
	goto $label$11 
	
.LABEL $label$12
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$11
	*($5 + [28]) = $4
	*($5 + [24]) = $4
	*($5 + [32]) = ($4 + $3)
	CALL $22(($5 + [24]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$13 }
	CALL $57($4)
	
.LABEL $label$13
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$14 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$3 = *(($1 + [32]))
	$4 = ($3 & [1])
	*($5 + [48]) = ( *(($1 + [40])) ? $6 : $4 )
	*($5 + [52]) = ( *(($1 + [36])) ? uint_32($3 >> [1]) : $4 )
	*($5 + [8]) = *($5 + [48])
	*($5 + [56]) = *(CALL $2(($5 + [56]), ($5 + [8])))
	if ( (CALL $50(($5 + [40]), ($5 + [56]), [8]) == 0) ){ goto $label$15 }
	$1 = ($1 + [80])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$16 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7877210700198707200, ($5 + [48]), $9)
	*($1) = $3
	
.LABEL $label$16
	CALL db_idx64_update($3, $2, ($5 + [56]))
	
.LABEL $label$15
	$global$0 = ($5 + [64])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$5 = ($global$0 - [160])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = [1]
	$7 = ($1 + [1])
	$8 = *($1)
	$9 = *($1 + [8])
	$10 = *($1 + [4])
	$11 = [1]
	$12 = CALL $51([8360])
	if ( ($12 == 0) ){ goto $label$1 }
	$11 = ( $10 ? uint_32($8 >> [1]) : $11 )
	$11 = ($8 & [1])
	$13 = ( $9 ? $7 : $11 )
	$9 = ($13 + $11)
	if ( ((int_32)$11 < (int_32)$12) ){ goto $label$3 }
	$8 = $13
	
.LOOP $label$4:
	$11 = (($11 - $12) + [1])
	if ( ($11 == 0) ){ goto $label$3 }
	$11 = CALL $49($8, [46], $11)
	if ( ($11 == 0) ){ goto $label$3 }
	if ( (CALL $50($11, [8360], $12) == 0) ){ goto $label$2 }
	$8 = ($11 + [1])
	$11 = ($9 - $8)
	if ( ((int_32)$11 >= (int_32)$12) ){ goto $label$4 }
	
.LABEL $label$3
	$11 = $9
	
.LABEL $label$2
	$11 = (((int_32)($11 - $13) != (int_32)[-1]) & ((int_32)$11 != (int_32)$9))
	
.LABEL $label$1
	CALL eosio_assert($11, [8230])
	$10 = ($2 + [1])
	$11 = *($2)
	$8 = *($2 + [8])
	$9 = *($2 + [4])
	$12 = CALL $51([8360])
	if ( ($12 == 0) ){ goto $label$5 }
	$11 = ( $9 ? uint_32($11 >> [1]) : $13 )
	$13 = ($11 & [1])
	$6 = ( $8 ? $10 : $13 )
	$9 = ($6 + $11)
	if ( ((int_32)$11 < (int_32)$12) ){ goto $label$7 }
	$8 = $6
	
.LOOP $label$8:
	$11 = (($11 - $12) + [1])
	if ( ($11 == 0) ){ goto $label$7 }
	$11 = CALL $49($8, [46], $11)
	if ( ($11 == 0) ){ goto $label$7 }
	if ( (CALL $50($11, [8360], $12) == 0) ){ goto $label$6 }
	$8 = ($11 + [1])
	$11 = ($9 - $8)
	if ( ((int_32)$11 >= (int_32)$12) ){ goto $label$8 }
	
.LABEL $label$7
	$11 = $9
	
.LABEL $label$6
	$6 = (((int_32)($11 - $6) != (int_32)[-1]) & ((int_32)$11 != (int_32)$9))
	
.LABEL $label$5
	CALL eosio_assert($6, [8339])
	$11 = *(($1 + [8]))
	$12 = ($12 & [1])
	$12 = *($1)
	*($5 + [116]) = ( *(($1 + [4])) ? uint_32($12 >> [1]) : $12 )
	*($5 + [112]) = ( $11 ? $7 : $12 )
	*($5 + [16]) = *($5 + [112])
	$14 = *(CALL $2(($5 + [72]), ($5 + [16])))
	$11 = *(($2 + [8]))
	$12 = ($12 & [1])
	$12 = *($2)
	*($5 + [116]) = ( *(($2 + [4])) ? uint_32($12 >> [1]) : $12 )
	*($5 + [112]) = ( $11 ? $10 : $12 )
	*($5 + [8]) = *($5 + [112])
	$15 = *(CALL $2(($5 + [72]), ($5 + [8])))
	if ( ((int_32)(CASTING uint_32)(uint_64 $14) == (int_32)(CASTING uint_32)(uint_64 $15)) ){ goto $label$9 }
	$9 = [0]
	*(($5 + [104])) = [0]
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [108]) = [0]
	$16 = *($0)
	*($5 + [72]) = $16
	*($5 + [80]) = $16
	$11 = CALL db_find_i64($16, $16, (int_64)-7877210700198707200, ((int_64)$14 & (int_64)4294967295))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$10 }
	$9 = CALL $7(($5 + [72]), $11)
	if ( ((int_32)*($9 + [72]) == (int_32)($5 + [72])) ){ goto $label$10 }
	CALL eosio_assert([0], [8577])
	
.LABEL $label$10
	$14 = ((int_64)$15 & (int_64)4294967295)
	$12 = *(($5 + [100]))
	$8 = *(($5 + [96]))
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$14 }
	
.LOOP $label$16:
	$11 = ($12 + [-24])
	$1 = *($11)
	if ( ((int_64)*($1) == (int_64)$14) ){ goto $label$15 }
	$12 = $11
	if ( ((int_32)$8 != (int_32)$11) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$14 }
	if ( ((int_32)*($1 + [72]) == (int_32)($5 + [72])) ){ goto $label$13 }
	CALL eosio_assert([0], [8577])
	if ( $9 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$11 = CALL db_find_i64(*($5 + [72]), *(($5 + [80])), (int_64)-7877210700198707200, $14)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL $7(($5 + [72]), $11)
	if ( ((int_32)*($1 + [72]) == (int_32)($5 + [72])) ){ goto $label$13 }
	CALL eosio_assert([0], [8577])
	
.LABEL $label$13
	if ( ($9 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$11 }
	$14 = *($0)
	*($5 + [64]) = (int_64)3617214756542218240
	*($5 + [56]) = $14
	*((($11 = CALL _Znwj([16])) + [8])) = *($5 + [64])
	*($11) = *($5 + [56])
	CALL $42(($5 + [24]), $2)
	*(($12 = (($5 + [24]) + [24]))) = *(($3 + [8]))
	*($5 + [40]) = *($3)
	$2 = (($5 + [24]) + [8])
	*((($5 + [112]) + [8])) = *($2)
	*($2) = [0]
	*((($5 + [112]) + [24])) = *($12)
	$12 = ($11 + [16])
	*($5 + [148]) = $12
	*($5 + [144]) = $11
	*($5 + [152]) = $12
	*($5 + [112]) = *($5 + [24])
	*($5 + [24]) = (int_64)0
	*($5 + [128]) = *($5 + [40])
	CALL $10($14, (int_64)3626283129831424000, ($5 + [144]), ($5 + [112]))
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($5 + [120]))
	
.LABEL $label$17
	$11 = *($5 + [144])
	if ( ($11 == 0) ){ goto $label$18 }
	*($5 + [148]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$18
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$19
	$14 = *($0)
	*($5 + [112]) = $3
	CALL $11(($5 + [72]), $9, $14, ($5 + [112]))
	
.LABEL $label$11
	$2 = *($5 + [96])
	if ( ($2 == 0) ){ goto $label$9 }
	$1 = ($5 + [100])
	$12 = *($1)
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$21 }
	
.LOOP $label$22:
	$12 = ($12 + [-24])
	$11 = *($12)
	*($12) = [0]
	if ( ($11 == 0) ){ goto $label$23 }
	if ( ((*($11 + [44]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($11 + [52])))
	
.LABEL $label$24
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($11 + [40])))
	
.LABEL $label$25
	CALL _ZdlPv($11)
	
.LABEL $label$23
	if ( ((int_32)$2 != (int_32)$12) ){ goto $label$22 }
	$11 = *(($5 + [96]))
	goto $label$20 
	
.LABEL $label$21
	$11 = $2
	
.LABEL $label$20
	*($1) = $2
	CALL _ZdlPv($11)
	
.LABEL $label$9
	$global$0 = ($5 + [160])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($1 + [1])
	$5 = *($1)
	$6 = *($1 + [8])
	$7 = *($1 + [4])
	$8 = [1]
	$9 = CALL $51([8360])
	if ( ($9 == 0) ){ goto $label$1 }
	$8 = ( $7 ? uint_32($5 >> [1]) : $8 )
	$8 = ($5 & [1])
	$10 = ( $6 ? $4 : $8 )
	$6 = ($10 + $8)
	if ( ((int_32)$8 < (int_32)$9) ){ goto $label$3 }
	$5 = $10
	
.LOOP $label$4:
	$8 = (($8 - $9) + [1])
	if ( ($8 == 0) ){ goto $label$3 }
	$8 = CALL $49($5, [46], $8)
	if ( ($8 == 0) ){ goto $label$3 }
	if ( (CALL $50($8, [8360], $9) == 0) ){ goto $label$2 }
	$5 = ($8 + [1])
	$8 = ($6 - $5)
	if ( ((int_32)$8 >= (int_32)$9) ){ goto $label$4 }
	
.LABEL $label$3
	$8 = $6
	
.LABEL $label$2
	$8 = (((int_32)($8 - $10) != (int_32)[-1]) & ((int_32)$8 != (int_32)$6))
	
.LABEL $label$1
	CALL eosio_assert($8, [8192])
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [44]) = [0]
	$11 = *($0)
	*($3 + [8]) = $11
	*($3 + [16]) = $11
	$8 = *(($1 + [8]))
	$9 = ($9 & [1])
	$9 = *($1)
	*($3 + [52]) = ( *(($1 + [4])) ? uint_32($9 >> [1]) : $9 )
	*($3 + [48]) = ( $8 ? $4 : $9 )
	*($3) = *($3 + [48])
	$8 = CALL db_find_i64($11, $11, (int_64)-7877210700198707200, *(CALL $2(($3 + [56]), $3)))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $7(($3 + [8]), $8)
	if ( ((int_32)*($8 + [72]) == (int_32)($3 + [8])) ){ goto $label$6 }
	CALL eosio_assert([0], [8577])
	
.LABEL $label$6
	$11 = *($0)
	*($3 + [56]) = $2
	CALL $8(($3 + [8]), $8, $11, ($3 + [56]))
	
.LABEL $label$5
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$7 }
	$5 = ($3 + [36])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$11 }
	if ( ((*($8 + [44]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($8 + [52])))
	
.LABEL $label$12
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($8 + [40])))
	
.LABEL $label$13
	CALL _ZdlPv($8)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$9) ){ goto $label$10 }
	$8 = *(($3 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$8 = $1
	
.LABEL $label$8
	*($5) = $1
	CALL _ZdlPv($8)
	
.LABEL $label$7
	$global$0 = ($3 + [64])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8628])
	
.LABEL $label$5
	$4 = CALL $54($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL _Znwj([88])) + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = $0
	CALL $24(($3 + [32]), $5)
	*($5 + [80]) = [-1]
	*($5 + [76]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $5(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $57($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [52])))
	
.LABEL $label$11
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4)
	$6 = *($5 + [8])
	$8 = ($8 & [1])
	$8 = *($5)
	*(($7 = $2) + [44]) = ( *($5 + [4]) ? uint_32($8 >> [1]) : $8 )
	*($7 + [40]) = ( $6 ? ($5 + [1]) : $8 )
	*($7 + [8]) = *($7 + [40])
	*($1) = *(CALL $2(($7 + [16]), ($7 + [8])))
	$6 = ($1 + [32])
	CALL $43($6, *($4))
	*($1 + [8]) = *(*($4 + [4]))
	$9 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [24]) = $9
	*($1 + [16]) = $9
	$4 = *($4 + [8])
	*(($1 + [64])) = *(($4 + [8]))
	*($1 + [56]) = *($4)
	$4 = *($1 + [32])
	$5 = ( *(($1 + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [41])
	$9 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [44])
	$5 = ( *(($1 + [48])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$4 = ($5 + $4)
	$9 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$5 = CALL $54($4)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$3
	*($7 + [20]) = $5
	*($7 + [16]) = $5
	*($7 + [24]) = ($5 + $4)
	CALL $22(($7 + [16]), $1)
	$9 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($3 + [8]), (int_64)-7877210700198707200, *(*($0 + [8])), $9, $5, $4)
	if ( ($4 <= [513]) ){ goto $label$5 }
	CALL $57($5)
	
.LABEL $label$5
	if ( (uint_64)($9 <= *($3 + [16])) ){ goto $label$6 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$9 = *(($3 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	$4 = *(($1 + [32]))
	$5 = ($4 & [1])
	*($7 + [32]) = ( *(($1 + [40])) ? ($6 + [1]) : $5 )
	*($7 + [36]) = ( *(($1 + [36])) ? uint_32($4 >> [1]) : $5 )
	*($7) = *($7 + [32])
	*($7 + [40]) = *(CALL $2(($7 + [40]), $7))
	*($1 + [80]) = CALL db_idx64_store($9, (int_64)-7877210700198707200, $10, $11, ($7 + [40]))
	$global$0 = ($7 + [48])
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $46($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [52])))
	
.LABEL $label$11
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [8363])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [8468])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8401])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8468])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-7877210700198707200, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [72]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [8577])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $7($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)-7877210700198707200, $6))
	if ( ((int_32)*($4 + [72]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [8577])
	
.LABEL $label$2
	*(($4 + [80])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [128])
	$global$0 = $4
	*($4 + [99]) = $1
	CALL require_auth(*($0))
	$5 = ($2 + [1])
	$6 = *($2)
	$7 = *($2 + [8])
	$8 = *($2 + [4])
	$1 = [1]
	$9 = CALL $51([8360])
	if ( ($9 == 0) ){ goto $label$1 }
	$1 = ( $8 ? uint_32($6 >> [1]) : $1 )
	$1 = ($6 & [1])
	$10 = ( $7 ? $5 : $1 )
	$7 = ($10 + $1)
	if ( ((int_32)$1 < (int_32)$9) ){ goto $label$3 }
	$6 = $10
	
.LOOP $label$4:
	$1 = (($1 - $9) + [1])
	if ( ($1 == 0) ){ goto $label$3 }
	$1 = CALL $49($6, [46], $1)
	if ( ($1 == 0) ){ goto $label$3 }
	if ( (CALL $50($1, [8360], $9) == 0) ){ goto $label$2 }
	$6 = ($1 + [1])
	$1 = ($7 - $6)
	if ( ((int_32)$1 >= (int_32)$9) ){ goto $label$4 }
	
.LABEL $label$3
	$1 = $7
	
.LABEL $label$2
	$1 = (((int_32)($1 - $10) != (int_32)[-1]) & ((int_32)$1 != (int_32)$7))
	
.LABEL $label$1
	CALL eosio_assert($1, [8192])
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	*($4 + [92]) = [0]
	$11 = *($0)
	*($4 + [56]) = $11
	*($4 + [64]) = $11
	*($4 + [48]) = ($4 + [56])
	$1 = *(($2 + [8]))
	$9 = ($9 & [1])
	$9 = *($2)
	*($4 + [28]) = ( *(($2 + [4])) ? uint_32($9 >> [1]) : $9 )
	*($4 + [24]) = ( $1 ? $5 : $9 )
	*($4 + [16]) = *($4 + [24])
	*($4 + [40]) = *(CALL $2(($4 + [104]), ($4 + [16])))
	CALL $3(($4 + [120]), ($4 + [48]), ($4 + [40]))
	$1 = *($4 + [124])
	if ( ($1 == 0) ){ goto $label$9 }
	$11 = *($4 + [40])
	$9 = *($1 + [32])
	$6 = ($9 & [1])
	*($4 + [24]) = ( *(($1 + [40])) ? ($1 + [33]) : $6 )
	*($4 + [28]) = ( *(($1 + [36])) ? uint_32($9 >> [1]) : $6 )
	*($4 + [8]) = *($4 + [24])
	if ( ((int_64)$11 != (int_64)*(CALL $2(($4 + [104]), ($4 + [8])))) ){ goto $label$9 }
	if ( *($4 + [124]) ){ goto $label$8 }
	
.LABEL $label$9
	$11 = *($0)
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [28]) = ($4 + [99])
	*($4 + [120]) = $11
	if ( ((int_64)*($4 + [56]) == (int_64)CALL current_receiver()) ){ goto $label$10 }
	CALL eosio_assert([0], [8520])
	
.LABEL $label$10
	*($4 + [108]) = ($4 + [24])
	*($4 + [104]) = ($4 + [56])
	*($4 + [112]) = ($4 + [120])
	*(($1 = CALL _Znwj([88])) + [32 align=4]) = (int_64)0
	*($1 + [40 align=4]) = (int_64)0
	*($1 + [48 align=4]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = ($4 + [56])
	CALL $4(($4 + [104]), $1)
	*($4 + [40]) = $1
	$11 = *($1)
	*($4 + [104]) = $11
	$2 = *($1 + [76])
	*($4 + [100]) = $2
	$6 = ($4 + [84])
	$9 = *($6)
	if ( ((uint_32)$9 >= (uint_32)*(($4 + [88]))) ){ goto $label$11 }
	*($9 + [8]) = $11
	*($9 + [16]) = $2
	*($4 + [40]) = [0]
	*($9) = $1
	*($6) = ($9 + [24])
	$1 = *($4 + [40])
	*($4 + [40]) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$11
	CALL $5(($4 + [80]), ($4 + [40]), ($4 + [104]), ($4 + [100]))
	$1 = *($4 + [40])
	*($4 + [40]) = [0]
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$8
	$2 = *($4 + [80])
	if ( ($2 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [52])))
	
.LABEL $label$12
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$13
	CALL _ZdlPv($1)
	$2 = *($4 + [80])
	if ( ($2 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = ($4 + [84])
	$9 = *($6)
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$15 }
	
.LOOP $label$16:
	$9 = ($9 + [-24])
	$1 = *($9)
	*($9) = [0]
	if ( ($1 == 0) ){ goto $label$17 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($1 + [52])))
	
.LABEL $label$18
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$19
	CALL _ZdlPv($1)
	
.LABEL $label$17
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$16 }
	$1 = *(($4 + [80]))
	goto $label$14 
	
.LABEL $label$15
	$1 = $2
	
.LABEL $label$14
	*($6) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$global$0 = ($4 + [128])
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $54($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*(($4 + [96])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $20(($4 + [16]), ($4 + [144]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4)
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [16])
	CALL $21(($4 + [144]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$10 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $57($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [112])))
	if ( ((*($4 + [76]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($4 + [76]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [64]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [84])))
	$2 = [1]
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [72])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $54($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*($4 + [80]) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [128]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $18(($4 + [24]), ($4 + [128]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $19(($4 + [128]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [72]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $57($2)
	$2 = [1]
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [80])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$1 }
	CALL eosio_assert([0], [8651])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy(($2 + [15]), $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$0 = *($0)
	CALL $25(*($1), ($0 + [4]))
	$5 = ($0 + [16])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8651])
	$4 = *(($1 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$4 = (*($4) + [8])
	*(($4 = ($1 + [4]))) = $4
	*($2) = (int_64)0
	if ( ((uint_32)(*(($1 + [8])) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8651])
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*($0 + [24]) = *($2)
	*(($1 = ($1 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $42(($2 + [32]), ($1 + [4]))
	*(($5 = (($2 + [16]) + [8]))) = *(($1 + [24]))
	*($2 + [16]) = *($1 + [16])
	*((($2 + [48]) + [8])) = *($5)
	*($2 + [48]) = *($2 + [16])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*($0) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$5 = CALL $42(($2 + [80]), $4)
	$6 = *((($2 + [48]) + [8]))
	*((($2 + [64]) + [8])) = $6
	*(($2 + [8])) = $6
	$6 = *($2 + [48])
	*($2) = $6
	*($2 + [64]) = $6
	CALL void $0((int_32 ((int_32)($3 & [255]) != (int_32)[0])), (int_32 $5), (int_32 $2), (int_32 $1))
	if ( (*($2 + [80]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $10 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [8])) = $5
	*($4) = $7
	*($4 + [4]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [4]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [36])) = $6
	*(($4 + [40])) = $5
	*(($4 + [8])) = [0]
	*(($4 + [52])) = [0]
	*($4 + [24]) = $1
	*($4 + [16]) = $0
	*($4 + [32]) = $7
	*($4) = (int_64)0
	*($4 + [44 align=4]) = (int_64)0
	$7 = *($3)
	$2 = ( *($3 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [16])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [44])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $27($2, $7)
	$2 = *(($4 + [48]))
	$7 = *(($4 + [44]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [56]) = ($4 + [80])
	*($4 + [64]) = $3
	CALL $28(($4 + [64]), ($4 + [56]))
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	$7 = [16]
	$3 = *((($4 + [16]) + [16]))
	$2 = *(($4 + [36]))
	$5 = ($2 - $3)
	$0 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$7:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$8 }
	$7 = (($5 & [-16]) + $7)
	
.LABEL $label$8
	$3 = *(($4 + [44]))
	$2 = *(($4 + [48]))
	$7 = (($7 + $2) - $3)
	$0 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$9:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$9 }
	if ( ($7 == 0) ){ goto $label$11 }
	CALL $27(($4 + [64]), $7)
	$2 = *($4 + [68])
	$7 = *($4 + [64])
	goto $label$10 
	
.LABEL $label$11
	$2 = [0]
	$7 = [0]
	
.LABEL $label$10
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	CALL $29(($4 + [80]), ($4 + [16]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$12 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$12
	$7 = *($4 + [44])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($4 + [48])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$13
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$14 }
	*(($4 + [36])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$14
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$15 }
	*($4 + [4]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$15
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $46($4)
}

void .FUNC $11 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [72]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8660])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8706])
	
.LABEL $label$2
	$7 = *($1 + [32])
	$8 = ($7 & [1])
	$6 = ($1 + [33])
	*($5 + [56]) = ( *(($1 + [40])) ? $6 : $8 )
	*($5 + [60]) = ( *(($1 + [36])) ? uint_32($7 >> [1]) : $8 )
	*($5 + [16]) = *($5 + [56])
	*($5 + [40]) = *(CALL $2(($5 + [24]), ($5 + [16])))
	$9 = *($1)
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)*(($1 + [64]))) ){ goto $label$3 }
	CALL eosio_assert([0], [8896])
	
.LABEL $label$3
	$10 = (int_64)
	*($1 + [56]) = $10(*($1 + [56]) - *($3)))
	if ( ((int_64)$10 <= (int_64)-4611686018427387904) ){ goto $label$8 }
	if ( ((int_64)$10 >= (int_64)4611686018427387904) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert([0], [8944])
	if ( ((int_64)*(($1 + [56])) < (int_64)4611686018427387904) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [8966])
	if ( ((int_64)$9 != (int_64)*($1)) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_64)$9 == (int_64)*($1)) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [8757])
	
.LABEL $label$4
	$3 = *(($1 + [32]))
	$7 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [41])
	$10 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$9:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$9 }
	$7 = *($1 + [44])
	$7 = ( *(($1 + [48])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$10 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$10:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$10 }
	if ( ($3 <= [513]) ){ goto $label$12 }
	$4 = CALL $54($3)
	goto $label$11 
	
.LABEL $label$12
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$11
	*($5 + [28]) = $4
	*($5 + [24]) = $4
	*($5 + [32]) = ($4 + $3)
	CALL $22(($5 + [24]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$13 }
	CALL $57($4)
	
.LABEL $label$13
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$14 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$3 = *(($1 + [32]))
	$4 = ($3 & [1])
	*($5 + [48]) = ( *(($1 + [40])) ? $6 : $4 )
	*($5 + [52]) = ( *(($1 + [36])) ? uint_32($3 >> [1]) : $4 )
	*($5 + [8]) = *($5 + [48])
	*($5 + [56]) = *(CALL $2(($5 + [56]), ($5 + [8])))
	if ( (CALL $50(($5 + [40]), ($5 + [56]), [8]) == 0) ){ goto $label$15 }
	$1 = ($1 + [80])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$16 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7877210700198707200, ($5 + [48]), $9)
	*($1) = $3
	
.LABEL $label$16
	CALL db_idx64_update($3, $2, ($5 + [56]))
	
.LABEL $label$15
	$global$0 = ($5 + [64])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)3626283129831424000) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$1 }
	*($3 + [44]) = [0]
	*($3 + [40]) = [1]
	*($3) = *($3 + [40])
	CALL $13($1, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	*($3 + [28]) = [0]
	*($3 + [24]) = [2]
	*($3 + [16]) = *($3 + [24])
	CALL $14($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [36]) = [0]
	*($3 + [32]) = [3]
	*($3 + [8]) = *($3 + [32])
	CALL $15($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $48([0])
	$global$0 = ($3 + [48])
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $54($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*($4 + [72]) = [0]
	*($4 + [76 align=4]) = (int_64)0
	*($4 + [84]) = [0]
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [128]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $16(($4 + [24]), ($4 + [128]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $17(($4 + [128]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [76]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $57($2)
	$2 = [1]
	if ( ((*($4 + [76]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [84])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $52(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8988])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $52(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $57($0)
	
.LABEL $label$1
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [80])
	$global$0 = $5
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$8 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$8 = *((*($7) + $8))
	
.LABEL $label$1
	$0 = CALL $42(($5 + [64]), $1)
	$1 = CALL $42(($5 + [48]), $2)
	*(($2 = (($5 + [32]) + [8]))) = *(($3 + [8]))
	*($5 + [32]) = *($3)
	$3 = CALL $42(($5 + [16]), $4)
	*(($5 + [8])) = *($2)
	*($5) = *($5 + [32])
	CALL void $7((int_32 $0), (int_32 $1), (int_32 $5), (int_32 $3), (int_32 $8))
	if ( (*($3) & [1]) ){ goto $label$6 }
	if ( (*($1) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($0) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($0) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($0 + [8]))
	$global$0 = ($5 + [80])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $54($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8988])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $54($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8571])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8571])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8571])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8571])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [8571])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $47())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $53($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $54($1)
	
.LABEL $label$2
	*(CALL $47()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $54(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $57($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $54 (int_32 $0)
{
	return CALL $55([9008], $0)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $56($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [8253])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9000]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9004])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9000]) = [1]
	$2 = ($2 << [16])
	*([0] + [9004]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9004])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9004]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9000]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9000]) = [1]
	$3 = ($3 << [16])
	*([0] + [9004]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9004])
	
.LABEL $label$10
	*([0] + [9004]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17392])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17200]
	$3 = (((int_32)$1 * (int_32)[12]) + [17200])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}