(data (i32.const 8236) "failed to allocate pages\00eoshashcoins\00")
(data (i32.const 8288) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 8368) "%d\00")
(data (i32.const 8371) "%llu\00eoshashdices\00")
(data (i32.const 8389) "symbol not support\00")
(data (i32.const 8408) "symbol mismatch\00")
(data (i32.const 8424) "eoshashlotto\00")
(data (i32.const 8437) "eoshashbulls\00")
(data (i32.const 8450) "eoshashslots\00")
(data (i32.const 8463) "eoshashpoker\00")
(data (i32.const 8476) "eoshashstake\00")
(data (i32.const 8489) "eoshashjkpot\00")
(data (i32.const 8502) "eoshashfunds\00")
(data (i32.const 8515) "eoshashadmin\00")
(data (i32.const 8528) "eoshashtasks\00")
(data (i32.const 8541) "eoshashhouse\00")
(data (i32.const 8554) "unstake\00")
(data (i32.const 8562) "sell ram\00")
(data (i32.const 8571) "deposit\00")
(data (i32.const 8579) "chintailease\00")
(data (i32.const 8592) "positive assert\00")
(data (i32.const 8608) "invalid transfer\00")
(data (i32.const 8625) "active\00")
(data (i32.const 8632) "transfer\00")
(data (i32.const 8641) "invalid first pos\00")
(data (i32.const 8659) "parse memo error\00")
(data (i32.const 8676) "pro:\00")
(data (i32.const 8681) "%05d\00")
(data (i32.const 8688) "1\08\ac\1cZd\ff?\1f\85\ebQ\b8\9e#@fffff\86X@\00\00\00\00\00\a8\8e@\00\00\00\00\00)\c3@\00\00\00\00@\f3\f7@")
(data (i32.const 8736) ",\00")
(data (i32.const 8738) "invalid bet\00")
(data (i32.const 8750) "too long betinfo\00")
(data (i32.const 8767) "no betinfo\00")
(data (i32.const 8778) "invalid betinfo\00")
(data (i32.const 8794) "string is too long to be a valid name\00")
(data (i32.const 8832) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8899) "character is not in allowed character set for names\00")
(data (i32.const 8951) "invalid symbol name\00")
(data (i32.const 8971) "attempt to add asset with different symbol\00")
(data (i32.const 9014) "addition underflow\00")
(data (i32.const 9033) "addition overflow\00")
(data (i32.const 9051) "subtraction underflow\00")
(data (i32.const 9073) "subtraction overflow\00")
(data (i32.const 9094) "write\00")
(data (i32.const 9100) ":not found player bet\00")
(data (i32.const 9122) "lotreceipt\00")
(data (i32.const 9133) "invalid result\00")
(data (i32.const 9148) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9199) "error reading iterator\00")
(data (i32.const 9222) "cannot create objects in table of another contract\00")
(data (i32.const 9273) "cannot pass end iterator to modify\00")
(data (i32.const 9308) "object passed to modify is not in multi_index\00")
(data (i32.const 9354) "cannot modify objects in table of another contract\00")
(data (i32.const 9405) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9464) "\fc$\00\00")
(data (i32.const 9468) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9502) "high\00")
(data (i32.const 9507) "low\00")
(data (i32.const 9511) "odd\00")
(data (i32.const 9515) "even\00")
(data (i32.const 9520) " vip: \00")
(data (i32.const 9527) "mine\00")
(data (i32.const 9532) "lotto: #\00")
(data (i32.const 9541) " \00")
(data (i32.const 9543) " bet \00")
(data (i32.const 9549) " on \00")
(data (i32.const 9554) "%lld%s%s %s\00")
(data (i32.const 9566) ".\00")
(data (i32.const 9568) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9620) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9674) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9722) " result: \00")
(data (i32.const 9732) " wins \00")
(data (i32.const 9739) ", referrer reward  \00")
(data (i32.const 9759) "cannot pass end iterator to erase\00")
(data (i32.const 9793) "cannot increment end iterator\00")
(data (i32.const 9823) "object passed to erase is not in multi_index\00")
(data (i32.const 9868) "cannot erase objects in table of another contract\00")
(data (i32.const 9918) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9971) "txid\00")
(data (i32.const 9976) "read\00")
(data (i32.const 9981) "game closed\00")
(data (i32.const 9993) "must bet big than 0\00")
(data (i32.const 10013) "invalid memo\00")
(data (i32.const 10026) "out of bet range\00")
(data (i32.const 10043) "single bet must multiple of min bet\00")
(data (i32.const 10079) "all player bet out of limit\00")
(data (i32.const 10107) "expected return out of limit\00")
(data (i32.const 10136) "multiplication overflow\00")
(data (i32.const 10160) "multiplication underflow\00")
(data (i32.const 10185) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10244) "betid\00")
(data (i32.const 10250) "eoshashbanks\00")
(data (i32.const 10263) "get\00")
(data (i32.const 0) " (\00\00")
(import "env" "send_deferred" (func $fimport$0 (param i32 i64 i32 i32 i32)))
(import "env" "db_find_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$4))
(import "env" "memset" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$7 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$8 (param i32 i32)))
(import "env" "__multf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$10 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$11 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$13 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$17 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$18 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$20 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$21 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$24 (param i64 i64) (result i32)))
(import "env" "is_account" (func $fimport$25 (param i64) (result i32)))
(import "env" "send_inline" (func $fimport$26 (param i32 i32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$27 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$28 (param i32 i32) (result i32)))
(import "env" "set_proposed_producers" (func $fimport$29 (param i32 i32) (result i64)))
(import "env" "current_time" (func $fimport$30 (result i64)))
(import "env" "get_active_producers" (func $fimport$31 (param i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$32 (result i32)))
(import "env" "read_action_data" (func $fimport$33 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$34 (param i64)))
(import "env" "db_next_i64" (func $fimport$35 (param i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$36 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$38 (param i32 i64)))
(import "env" "current_receiver" (func $fimport$39 (result i64)))
(import "env" "db_get_i64" (func $fimport$40 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$41 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$42 (param i32 i64 i32 i32)))
(import "env" "db_previous_i64" (func $fimport$43 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$44 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$45 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$46 (param i32)))
(import "env" "db_idx64_find_primary" (func $fimport$47 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$48 (param i32)))
(import "env" "db_idx128_find_primary" (func $fimport$49 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_remove" (func $fimport$50 (param i32)))
(import "env" "__multi3" (func $fimport$51 (param i32 i64 i64 i64 i64)))
(import "env" "db_idx128_store" (func $fimport$52 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$53 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_update" (func $fimport$54 (param i32 i64 i32)))
(export "apply" (func $68))
(table $0 12 12 anyfunc)
(elem (i32.const 1) $19 $22 $69 $71 $73 $75 $77 $79 $81 $83 $84)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 10267))
(global $global$2 i32 (i32.const 10267))


void .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[15]) ){ goto $label$2 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [16])
	*(($4 = ($4 + [4]))) = (*($4) + [16])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9976])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$5 = *($0 + [12])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9976])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $1, [8])
	$4 = (*($1) + [8])
	*(($1 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9976])
	$4 = *($1)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $4, [8])
	*($5 + [8]) = *($2 + [8])
	*($1) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $2($1)
	
.LABEL $label$2
	*(CALL $5()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $2(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $3($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $176 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [80])
	$global$0 = $5
	$6 = *($2)
	if ( ($6 & [1]) ){ goto $label$6 }
	$6 = uint_32($6 >> [1])
	$7 = ($2 + [1])
	$8 = ($7 + $6)
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = *($2 + [4])
	$7 = *($2 + [8])
	$8 = ($7 + $6)
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $50(*($7)) ){ goto $label$4 }
	$7 = ($7 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$7 }
	$7 = $8
	$6 = [1]
	$9 = *($2)
	if ( (($9 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$6 = ($7 + [1])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $50(*($6)) == 0) ){ goto $label$10 }
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($7) = *($6)
	$7 = ($7 + [1])
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$9 }
	
.LABEL $label$8
	$6 = [1]
	$9 = *($2)
	if ( ($9 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($2 + $6)
	$6 = ($8 + uint_32($9 >> $6))
	goto $label$1 
	
.LABEL $label$2
	$8 = *($2 + [8])
	$6 = ($8 + *($2 + [4]))
	
.LABEL $label$1
	CALL $37($2, ($7 - $8), ($6 - $7))
	$6 = *($2)
	if ( ($6 & [1]) ){ goto $label$14 }
	$7 = ($2 + [1])
	$8 = uint_32($6 >> [1])
	if ( $8 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$7 = *($2 + [8])
	$8 = *($2 + [4])
	if ( ($8 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$6 = [0]
	
.LOOP $label$15:
	$6 = ($6 + ((int_32)*($7) == (int_32)[45]))
	$7 = ($7 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$15 }
	if ( ((int_32)$6 == (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL eosio_assert([0], [10013])
	
.LABEL $label$11
	*($5 + [72]) = [0]
	*($5 + [64]) = (int_64)0
	*($5 + [63]) = [45]
	*($5 + [32]) = [0]
	*($5 + [62]) = [1]
	$7 = CALL $63($2, ($5 + [64]), ($5 + [63]), ($5 + [32]), ($5 + [62]))
	$6 = ($6 & [1])
	$6 = *($5 + [64])
	$8 = ( *($5 + [68]) ? uint_32($6 >> [1]) : $6 )
	if ( ($8 == 0) ){ goto $label$16 }
	*($5 + [52]) = $8
	*($5 + [48]) = ( *(($5 + [72])) ? (($5 + [64]) | [1]) : $6 )
	*($5 + [8]) = *($5 + [48])
	*($3) = *(CALL $52(($5 + [32]), ($5 + [8])))
	
.LABEL $label$16
	$7 = CALL $25(($5 + [16]), CALL $26($0, $2, ($7 + [1]), [-1], $2))
	CALL $91(($5 + [32]), $1, $7)
	if ( (*($4) & [1]) ){ goto $label$18 }
	*($4) = [0]
	goto $label$17 
	
.LABEL $label$18
	*(*($4 + [8])) = [0]
	*($4 + [4]) = [0]
	
.LABEL $label$17
	CALL $29($4, [0])
	$6 = (($5 + [32]) + [8])
	*(($4 + [8])) = *($6)
	*($4) = *($5 + [32])
	*($6) = [0]
	*($5 + [32]) = (int_64)0
	if ( (*($7) & [1]) ){ goto $label$21 }
	if ( (*($5 + [64]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL $10(*($7 + [8]))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL $10(*(($5 + [72])))
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$19
	$global$0 = ($5 + [80])
}

void .FUNC $177 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [240])
	$global$0 = $5
	*($5 + [176]) = $1
	$6 = *($4 + [8])
	CALL $51(($5 + [72]), *($0 + [232]), $6)
	*($5 + [64]) = $6
	*($5 + [56]) = (int_64)0
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8951])
	
.LABEL $label$1
	*($5 + [52]) = [0]
	if ( (*($3) & [1]) ){ goto $label$7 }
	$7 = ($3 + [1])
	goto $label$6 
	
.LABEL $label$7
	$7 = *($3 + [8])
	
.LABEL $label$6
	CALL $67($7, *($4), [0], ($5 + [52]), ($5 + [56]))
	$8 = *($5 + [112])
	$6 = ((int_64)*($4) / (int_64)*($5 + [52]))
	if ( ((int_64)$6 >= (int_64)$8) ){ goto $label$8 }
	CALL eosio_assert([0], [10026])
	
.LABEL $label$8
	if ( (int_64)(((int_64)$6 % (int_64)$8) == 0) ){ goto $label$9 }
	CALL eosio_assert([0], [10043])
	
.LABEL $label$9
	*(($5 + [40])) = [0]
	*($5 + [16]) = $1
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	*($5 + [44]) = [0]
	*($5 + [8]) = *($0)
	$6 = *(($4 + [8]))
	*($5 + [232]) = $6
	*($5 + [216]) = $2
	*($5 + [208]) = (uint_64)$6 >> (uint_64)(int_64)8)
	*($5 + [200]) = ($5 + [8])
	CALL $180(($5 + [184]), ($5 + [200]), ($5 + [208]))
	$7 = *($5 + [188])
	if ( ($7 == 0) ){ goto $label$13 }
	if ( ((int_64)((int_64)((int_64)*($5 + [208]) ^ (int_64)*($7 + [16])) | (int_64)((int_64)*($5 + [216]) ^ (int_64)*(($7 + [24])))) != (int_64)0) ){ goto $label$13 }
	$6 = *($7)
	$9 = *(($5 + [36]))
	$10 = *((($5 + [8]) + [24]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$11 }
	
.LOOP $label$14:
	$7 = ($9 + [-24])
	$3 = *($7)
	if ( ((int_64)*($3) == (int_64)$6) ){ goto $label$12 }
	$9 = $7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$14 }
	goto $label$11 
	
.LABEL $label$13
	$6 = *($0)
	*($5 + [188]) = ($5 + [208])
	*($5 + [184]) = ($5 + [8])
	*($5 + [192]) = ($5 + [232])
	CALL $181($5, ($5 + [8]), $6, ($5 + [184]))
	goto $label$10 
	
.LABEL $label$12
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$11 }
	if ( ((int_32)*($3 + [64]) == (int_32)($5 + [8])) ){ goto $label$15 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$15
	*($5 + [4]) = $3
	*($5) = ($5 + [8])
	goto $label$10 
	
.LABEL $label$11
	$7 = CALL db_find_i64(*($5 + [8]), *(($5 + [16])), (int_64)-8272242484608761856, $6)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$16 }
	$7 = CALL $152(($5 + [8]), $7)
	if ( ((int_32)*($7 + [64]) == (int_32)($5 + [8])) ){ goto $label$17 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$17
	*($5 + [4]) = $7
	*($5) = ($5 + [8])
	goto $label$10 
	
.LABEL $label$16
	*($5 + [4]) = [0]
	*($5) = ($5 + [8])
	
.LABEL $label$10
	$6 = *($0)
	$7 = *($5 + [4])
	*($5 + [208]) = $4
	*($5 + [212]) = ($5 + [56])
	if ( $7 ){ goto $label$18 }
	CALL eosio_assert([0], [9273])
	
.LABEL $label$18
	CALL $182(($5 + [8]), $7, $6, ($5 + [208]))
	$7 = ($4 + [8])
	CALL $183(($5 + [208]), $0, ($5 + [8]), *($0), *($7))
	$9 = *($5 + [212])
	$6 = *($9 + [32])
	$8 = *(($9 + [40]))
	if ( ((int_64)*($7) == (int_64)$8) ){ goto $label$19 }
	CALL eosio_assert([0], [8971])
	
.LABEL $label$19
	$6 = ((int_64)*($4) + (int_64)$6)
	if ( ((int_64)$6 <= (int_64)-4611686018427387904) ){ goto $label$21 }
	if ( ((int_64)$6 < (int_64)4611686018427387904) ){ goto $label$20 }
	CALL eosio_assert([0], [9033])
	goto $label$20 
	
.LABEL $label$21
	CALL eosio_assert([0], [9014])
	
.LABEL $label$20
	$7 = *($5 + [212])
	if ( ((int_64)$8 == (int_64)*(($7 + [56]))) ){ goto $label$22 }
	CALL eosio_assert([0], [10185])
	
.LABEL $label$22
	if ( ((int_64)$6 <= (int_64)*($7 + [48])) ){ goto $label$23 }
	CALL eosio_assert([0], [10079])
	
.LABEL $label$23
	$9 = *($5 + [212])
	$7 = *($5 + [4])
	if ( ((int_64)*(($7 + [56])) != (int_64)*(($9 + [56]))) ){ goto $label$28 }
	if ( ((int_64)*($7 + [48]) > (int_64)*($9 + [48])) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	CALL eosio_assert([0], [10185])
	if ( ((int_64)*($7 + [48]) <= (int_64)*($9 + [48])) ){ goto $label$26 }
	
.LABEL $label$27
	CALL eosio_assert([0], [10107])
	$6 = *($0)
	$7 = *($5 + [212])
	*($5 + [184]) = $4
	if ( $7 ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$26
	$6 = *($0)
	$7 = *($5 + [212])
	*($5 + [184]) = $4
	if ( $7 ){ goto $label$24 }
	
.LABEL $label$25
	CALL eosio_assert([0], [9273])
	
.LABEL $label$24
	CALL $184(($5 + [8]), $7, $6, ($5 + [184]))
	$3 = ($0 + [152])
	$6 = *($5 + [176])
	$9 = *(($0 + [180]))
	$10 = *(($0 + [176]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$33 }
	
.LOOP $label$35:
	$7 = ($9 + [-24])
	$4 = *($7)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$34 }
	$9 = $7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$33 }
	if ( ((int_32)*($4 + [28]) == (int_32)$3) ){ goto $label$36 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$36
	if ( $4 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$7 = CALL db_find_i64(*($3), *(($0 + [160])), (int_64)-8272133493090156544, $6)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$31 }
	if ( ((int_32)*(CALL $110($3, $7) + [28]) == (int_32)$3) ){ goto $label$32 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$32
	$10 = *($5 + [32])
	if ( $10 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$6 = *($0)
	*($5 + [232]) = ($5 + [176])
	CALL $185(($5 + [184]), $3, $6, ($5 + [232]))
	$10 = *($5 + [32])
	if ( ($10 == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$0 = ($5 + [36])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$38 }
	
.LOOP $label$39:
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$40 }
	CALL $10($9)
	
.LABEL $label$40
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$39 }
	$7 = *(($5 + [32]))
	goto $label$37 
	
.LABEL $label$38
	$7 = $10
	
.LABEL $label$37
	*($0) = $10
	CALL $10($7)
	$global$0 = ($5 + [240])
	return 
	
.LABEL $label$29
	$global$0 = ($5 + [240])
}

int_32 .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9094])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$7 = ($0 + [4])
	$1 = ($0 + [8])
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$5 }
	$8 = [2]
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	goto $label$3 
	
.LABEL $label$4
	$8 = [3]
	
.LABEL $label$3
	
.LOOP $label$6:
	goto $label$10 
	
.LABEL $label$12
	$4 = *($7)
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$7 }
	$8 = [2]
	goto $label$6 
	
.LABEL $label$11
	CALL eosio_assert([0], [9094])
	$4 = *($7)
	$8 = [0]
	goto $label$6 
	
.LABEL $label$10
	CALL memcpy($4, $6, [2])
	*($7) = (*($7) + [2])
	CALL $139($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$8 = [3]
	goto $label$6 
	
.LABEL $label$9
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$8
	$8 = [1]
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	goto $label$6 
	return $8
}

void .FUNC $171 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [9222])
	
.LABEL $label$1
	*(($5 = CALL $8([32])) + [16]) = $1
	*($5) = (int_64)0
	*($5) = *(*($3))
	*($5 + [8]) = (int_64)0
	CALL memcpy(($4 + [16]), $5, [8])
	CALL memcpy((($4 + [16]) | [8]), ($5 + [8]), [8])
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, $6, ($4 + [16]), [16])
	*($5 + [20]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$2 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($4 + [8]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [4]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [8]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $173(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $10($5)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $172 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9308])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9354])
	
.LABEL $label$2
	*($1 + [8]) = *(*($3))
	$6 = *($1)
	$4 = $4
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL memcpy(($4 + [-8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $3, [16])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = $5
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $5())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $6($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_64 .FUNC $178 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$1 = ($global$0 - [48])
	$global$0 = $1
	*($1 + [32]) = [10244]
	*($1 + [36]) = CALL $1([10244])
	*($1 + [8]) = *($1 + [32])
	$2 = ($0 + [32])
	$3 = *(CALL $52(($1 + [40]), ($1 + [8])))
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$5 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	if ( ((int_32)*($7 + [16]) == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert([0], [9148])
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($2), *(($0 + [40])), (int_64)7235159537265672192, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $151($2, $6)
	if ( ((int_32)*($7 + [16]) == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$3
	$3 = ((int_64)*($7 + [8]) + (int_64)1)
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)1
	
.LABEL $label$1
	$8 = *($0)
	*($1 + [16]) = [10244]
	*($1 + [20]) = CALL $1([10244])
	*($1) = *($1 + [16])
	CALL $114($0, $2, $8, *(CALL $52(($1 + [24]), $1)), $3)
	$global$0 = ($1 + [48])
	return $3
}

void .FUNC $4 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

int_32 .FUNC $5 ()
{
	return [8208]
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [6]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [6])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[67108864]) ){ goto $label$4 }
	$3 = [67108863]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [6]) > (uint_32)[33554430]) ){ goto $label$7 }
	$3 = int_32($2 >> [5])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[67108864]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $8(($3 << [6]))
	goto $label$2 
	
.LABEL $label$6
	$2 = ($0 + [4])
	
.LOOP $label$8:
	*(($6 = ($3 + [24]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [56])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*($6) = [0]
	$3 = (*($2) + [64])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $42($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$8 = ($7 + ($3 << [6]))
	$4 = ($7 + ($5 << [6]))
	$3 = $4
	
.LOOP $label$9:
	*(($2 = ($3 + [24]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [56])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*($2) = [0]
	$3 = ($3 + [64])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$9 = ($7 + ($6 << [6]))
	$2 = *($0)
	$10 = ($0 + [4])
	$1 = *($10)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$11 }
	$3 = ($5 + [-1])
	$11 = ($3 - uint_32((($1 + [-64]) - $2) >> [6]))
	$3 = ($7 + ($3 << [6]))
	
.LOOP $label$12:
	*(($3 + [8])) = *(($1 + [-56]))
	$6 = ($1 + [-64])
	*($3) = *($6)
	$5 = ($1 + [-40])
	*(($3 + [24])) = *($5)
	$4 = ($1 + [-48])
	*(($3 + [16])) = *($4)
	*($5) = [0]
	*($4) = (int_64)0
	*(($3 + [48])) = *(($1 + [-16]))
	*(($3 + [40])) = *(($1 + [-24]))
	*(($3 + [32])) = *(($1 + [-32]))
	*(($3 + [56])) = *(($1 + [-8]))
	$3 = ($3 + [-64])
	$1 = $6
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$12 }
	$4 = ($7 + ($11 << [6]))
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$1 = $2
	
.LABEL $label$10
	*($0) = $4
	*($10) = $9
	*(($0 + [8])) = $8
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($2 + [-64])
	if ( ((*(($2 + [-48])) & [1]) == 0) ){ goto $label$15 }
	CALL $10(*(($2 + [-40])))
	
.LABEL $label$15
	$2 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $3 (int_32 $0)
{
}

void .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	*($1 + [24]) = [-1]
	*($1) = *(*(*($0 + [4])))
	$4 = *($1 + [12])
	$5 = ( *(($1 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [16])
	$6 = (CASTING uint_64)(uint_32 $5)
	$7 = ($1 + [12])
	$8 = ($1 + [24])
	$5 = *($0)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	CALL $156(($3 + [32]), ($3 + [24]))
	$6 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($5 + [8]), (int_64)-8272133493090156544, *(*($0 + [8])), $6, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $3($2)
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $188 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [9222])
	
.LABEL $label$1
	*(($5 = CALL $8([80])) + [40]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = $1
	CALL $194($3, $5)
	*($4 + [64]) = ($4 + [56])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [72]) = ($4 + [56])
	$3 = ($5 + [16])
	*($4 + [84]) = $3
	*($4 + [80]) = $5
	*($4 + [88]) = ($5 + [32])
	*($4 + [92]) = ($5 + [48])
	CALL $191(($4 + [80]), ($4 + [72]))
	$6 = *($5)
	*($5 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)-8272242484608761856, $2, $6, $4, [56])
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$2 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$6 = *(($1 + [8]))
	$7 = *($5)
	*($4 + [88]) = *(($5 + [24]))
	*($4 + [80]) = *($3)
	*($5 + [72]) = CALL db_idx128_store($6, (int_64)-8272242484608761856, $2, $7, ($4 + [80]))
	*($4 + [80]) = $5
	*($4 + [8]) = (int_64)0
	$2 = *($5)
	*($4) = $2
	$8 = *(($5 + [68]))
	*($4 + [56]) = $8
	$9 = ($1 + [28])
	$3 = *($9)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = $2
	*($3 + [16]) = $8
	*($4 + [80]) = [0]
	*($3) = $5
	*($9) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $175(($1 + [24]), ($4 + [80]), $4, ($4 + [56]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $10($5)
	
.LABEL $label$5
	$global$0 = ($4 + [96])
}

void .FUNC $49 (int_32 $0)
{
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( $0 ){ goto $label$2 }
	$2 = [0]
	$0 = *([0] + [8232])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = ($0 + CALL $45($0, $1))
	if ( (*($2) == 0) ){ goto $label$4 }
	$0 = ($2 + CALL $47($2, $1))
	*([0] + [8232]) = $0
	if ( (*($0) == 0) ){ goto $label$3 }
	*([0] + [8232]) = ($0 + [1])
	*($0) = [0]
	return $2
	
.LABEL $label$4
	*([0] + [8232]) = [0]
	return [0]
	
.LABEL $label$3
	*([0] + [8232]) = [0]
	
.LABEL $label$1
	return $2
}

void .FUNC $0 ()
{
	CALL $4()
}

int_64 .FUNC $43 ()
{
	int_64 $0
	if ( (*([0] + [8220]) == 0) ){ goto $label$1 }
	return *([0] + [8224])
	
.LABEL $label$1
	$0 = CALL current_time()
	*([0] + [8220]) = [1]
	*([0] + [8224]) = $0
	return $0
}

void .FUNC $42 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $30(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $23(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8371], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $30(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $30(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $30(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $23(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8368], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $30(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $30(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($1 + [1]) == 0) ){ goto $label$3 }
	CALL memset($2, [0], [32])
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($1 + [1])
	
.LOOP $label$5:
	*(($4 = ($2 + (uint_32($3 >> [3]) & [28])))) = (*($4) | ([1] << ($3 & [31])))
	$3 = *($1)
	$1 = ($1 + [1])
	if ( $3 ){ goto $label$5 }
	
.LABEL $label$4
	$4 = $0
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = $0
	
.LOOP $label$6:
	if ( (*(($2 + (uint_32($3 >> [3]) & [28]))) & ([1] << ($3 & [31]))) ){ goto $label$2 }
	$3 = *($1 + [1])
	$4 = ($1 + [1])
	$1 = $4
	if ( $3 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL $46($0, $3)
	goto $label$1 
	
.LABEL $label$2
	$4 = $1
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	return ($4 - $0)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	($0 + CALL $1($0))
	$2 = ($1 & [255])
	if ( ($2 == 0) ){ goto $label$1 }
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 == (int_32)($1 & [255])) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ($0 & [3]) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = *($0)
	if ( ((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) ){ goto $label$5 }
	$2 = ((int_32)$2 * (int_32)[16843009])
	
.LOOP $label$6:
	$3 = ((int_32)$3 ^ (int_32)$2)
	if ( ((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) ){ goto $label$5 }
	$3 = *($0 + [4])
	$0 = ($0 + [4])
	if ( (((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$6 }
	
.LABEL $label$5
	$0 = ($0 + [-1])
	
.LOOP $label$7:
	$0 = ($0 + [1])
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 != (int_32)($1 & [255])) ){ goto $label$7 }
	
.LABEL $label$2
	return $0
	return .LABEL $label$1
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*((($2 = ($global$0 - [32])) + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($1 + [1]) == 0) ){ goto $label$2 }
	$1 = ($1 + [1])
	
.LOOP $label$4:
	*(($4 = ($2 + (uint_32($3 >> [3]) & [28])))) = (*($4) | ([1] << ($3 & [31])))
	$3 = *($1)
	$1 = ($1 + [1])
	if ( $3 ){ goto $label$4 }
	$4 = $0
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$5 }
	$1 = $0
	
.LOOP $label$6:
	if ( ((*(($2 + (uint_32($3 >> [3]) & [28]))) & ([1] << ($3 & [31]))) == 0) ){ goto $label$1 }
	$3 = *($1 + [1])
	$4 = ($1 + [1])
	$1 = $4
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$5
	return ($4 - $0)
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	$1 = ($0 + [-1])
	
.LOOP $label$7:
	$1 = ($1 + [1])
	if ( ((int_32)*($1) == (int_32)$3) ){ goto $label$7 }
	return ($1 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = [0]
	$4 = *($0)
	if ( ($4 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$2 = ([1] - $2)
	
.LOOP $label$4:
	$5 = *($1)
	if ( ((int_32)($4 & [255]) != (int_32)$5) ){ goto $label$2 }
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ($5 == 0) ){ goto $label$2 }
	$2 = ($2 + [1])
	$1 = ($1 + [1])
	$4 = *($0)
	$0 = ($0 + [1])
	if ( $4 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	$3 = $4
	
.LABEL $label$1
	return (($3 & [255]) - *($1))
}

int_32 .FUNC $167 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [64]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [9674])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3606981793854521344)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [9620])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [9620])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $104(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9094])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	CALL $157(*($1), *($0 + [20]))
	$global$0 = ($2 + [16])
}

void .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$4 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-3606981793854521344, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $104($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $167(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	*(($3 + [16])) = $4
	if ( (uint_64)($4 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [9568])
	$4 = *(($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*(($3 + [16])) = (int_64)0
	
.LABEL $label$1
	*($1) = $4
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*($0 + [8]))
	*($1 + [24]) = *(*($0 + [12]))
	$3 = *($0 + [16])
	*(($1 + [40])) = *(($3 + [8]))
	*($1 + [32]) = *($3)
	CALL $27(($1 + [48]), *($0 + [20]))
	$global$0 = ($2 + [16])
}

void .FUNC $164 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $10(*(($1 + [56])))
	
.LABEL $label$11
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $10($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $165(*($0 + [4]), $1)
	$5 = *($1 + [48])
	$6 = ( *(($1 + [52])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [48])
	$7 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [48])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [24])
	*($3 + [40]) = ($1 + [32])
	*($3 + [44]) = $6
	CALL $166(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($4 + [8]), (int_64)-3606981793854521344, *(*($0 + [8])), $7, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $3($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $162 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $10(*(($1 + [40])))
	
.LABEL $label$11
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $10($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	*($1) = *($6)
	*(($1 + [24])) = *(($6 + [24]))
	*(($1 + [16])) = *(($6 + [16]))
	*(($1 + [8])) = *(($6 + [8]))
	$7 = ($1 + [32])
	CALL $27($7, ($6 + [32]))
	*(($1 + [96])) = *(($6 + [96]))
	*(($1 + [88])) = *(($6 + [88]))
	*(($1 + [80])) = *(($6 + [80]))
	*(($1 + [72])) = *(($6 + [72]))
	*(($1 + [64])) = *(($6 + [64]))
	*(($1 + [56])) = *(($6 + [56]))
	*($1 + [48]) = *($6 + [48])
	$6 = *($5 + [4])
	$8 = *($6)
	$9 = *($6 + [8])
	$5 = *($5 + [8])
	if ( ((int_64)*($5 + [8]) == (int_64)$9) ){ goto $label$1 }
	CALL eosio_assert([0], [8971])
	
.LABEL $label$1
	$8 = ((int_64)*($5) + (int_64)$8)
	if ( ((int_64)$8 <= (int_64)-4611686018427387904) ){ goto $label$3 }
	if ( ((int_64)$8 < (int_64)4611686018427387904) ){ goto $label$2 }
	CALL eosio_assert([0], [9033])
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [9014])
	
.LABEL $label$2
	$10 = ($1 + [48])
	*($1 + [72]) = $8
	*(($1 + [80])) = $9
	$6 = *(($1 + [32]))
	$5 = ( *(($1 + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [81])
	$8 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ($6 <= [513]) ){ goto $label$6 }
	$5 = CALL $2($6)
	goto $label$5 
	
.LABEL $label$6
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $6)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [24])
	*($3 + [40]) = $7
	*($3 + [44]) = $10
	*($3 + [48]) = ($1 + [64])
	*($3 + [52]) = ($1 + [72])
	*($3 + [56]) = ($1 + [88])
	*($3 + [60]) = ($1 + [96])
	CALL $159(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [104]) = CALL db_store_i64(*($4 + [8]), (int_64)-8272420483699965952, *(*($0 + [8])), $8, $5, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL $3($5)
	
.LABEL $label$7
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$8 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$6 = ($4 + [8])
	$8 = *($6)
	$5 = *(($0 + [8]))
	$9 = *($5)
	$11 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [108]) = CALL db_idx64_store($8, (int_64)-8272420483699965952, $9, $11, ($3 + [24]))
	$8 = *($5)
	$9 = *($6)
	$11 = *($1)
	*($3 + [24]) = *($1 + [16])
	*(($1 + [112])) = CALL db_idx64_store($9, (int_64)-8272420483699965951, $8, $11, ($3 + [24]))
	$global$0 = ($3 + [64])
}

void .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$2 = $10
	$global$0 = $2
	*(($11 = ($10 + $5))) = [0]
	$12 = *($1)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : ((int_64)$12 < (int_64)0) ) * (int_64)((int_64)$12 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($11 + [-1])
	
.LOOP $label$5:
	$13 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$13 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $13
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$11 = ($2 - (($5 + [47]) & [496]))
	$global$0 = $11
	$14 = ( [9566] ? [9501] : *($10) )
	$9 = ((int_64)$12 / (int_64)$9)
	$15 = ($5 + [32])
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL $8($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*(($3 + [16])) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	*($3 + [12]) = $10
	*($3 + [8]) = $14
	*($3) = $9
	CALL $23($11, $15, [9554], $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL $10(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $1($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL $8($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $24($0)
}

int_32 .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [9094])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [4])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [9094])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [2])
	$4 = (*($3) + [2])
	*($3) = $4
	$3 = ($1 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9094])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [4])
	$3 = (*($4) + [4])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [12])
	$8 = ($0 + [8])
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [9094])
	$3 = *($4)
	
.LABEL $label$5
	CALL memcpy($3, ($2 + [14]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$4 }
	$4 = ($1 + [16])
	$8 = ($0 + [8])
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [9094])
	$3 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $4, [1])
	$3 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [20])
	
.LOOP $label$7:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [9094])
	$3 = *($4)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$7 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9976])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	CALL $124(*($1), *($0 + [20]))
	$global$0 = ($2 + [16])
}

void .FUNC $175 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $58 (int_64 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = ($global$0 - [176])
	$global$0 = $5
	if ( (CALL is_account($2) == 0) ){ goto $label$1 }
	$6 = *($3)
	if ( (int_64)($6 == 0) ){ goto $label$1 }
	if ( ((int_64)$6 > (int_64)0) ){ goto $label$2 }
	CALL eosio_assert([0], [8608])
	
.LABEL $label$2
	*($5 + [88]) = [8625]
	*($5 + [92]) = CALL $1([8625])
	*($5 + [16]) = *($5 + [88])
	$6 = *(CALL $52(($5 + [96]), ($5 + [16])))
	*($5 + [72]) = [8632]
	*($5 + [76]) = CALL $1([8632])
	*($5 + [8]) = *($5 + [72])
	$7 = CALL $52(($5 + [80]), ($5 + [8]))
	*((($5 + [24]) + [24])) = *(($3 + [8]))
	*($5 + [32]) = $2
	*($5 + [24]) = $1
	*($5 + [40]) = *($3)
	$4 = CALL $25((($5 + [24]) + [32]), $4)
	*($5 + [104]) = $0
	*($5 + [112]) = *($7)
	*(($3 = CALL $8([16]))) = $1
	*($3 + [8]) = $6
	*((($5 + [104]) + [36])) = [0]
	$7 = ($3 + [16])
	*((($5 + [104]) + [24])) = $7
	*(($5 + [124])) = $7
	*($5 + [120]) = $3
	*($5 + [132 align=4]) = (int_64)0
	$3 = *($4)
	$4 = ( *((($5 + [24]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($4 + [32])
	$2 = (CASTING uint_64)(uint_32 $4)
	$4 = ($5 + [132])
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$3 }
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $59($4, $3)
	$4 = *(($5 + [136]))
	$3 = *(($5 + [132]))
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	$3 = [0]
	
.LABEL $label$4
	*($5 + [148]) = $3
	*($5 + [144]) = $3
	*($5 + [152]) = $4
	*($5 + [160]) = ($5 + [144])
	*($5 + [168]) = ($5 + [24])
	CALL $60(($5 + [168]), ($5 + [160]))
	CALL $61(($5 + [104]))
	$3 = *($5 + [132])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($5 + [136])) = $3
	CALL $10($3)
	
.LABEL $label$6
	$3 = *($5 + [120])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($5 + [124])) = $3
	CALL $10($3)
	
.LABEL $label$7
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$1 }
	CALL $10(*(($5 + [64])))
	
.LABEL $label$1
	$global$0 = ($5 + [176])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $8($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $42($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

void .FUNC $51 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($3 + [40]) = [8261]
	*($3 + [44]) = CALL $1([8261])
	*($3 + [16]) = *($3 + [40])
	$4 = CALL $52(($3 + [48]), ($3 + [16]))
	*($3 + [24]) = [8261]
	*($3 + [28]) = CALL $1([8261])
	*($3 + [8]) = *($3 + [24])
	CALL $52(($3 + [32]), ($3 + [8]))
	$5 = [0]
	*(($3 + [88])) = [0]
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	$6 = *($4)
	*($3 + [56]) = $6
	*($3 + [64]) = (int_64)6138638708500572032
	$4 = CALL db_find_i64($6, (int_64)6138638708500572032, (int_64)-3665743585900232704, (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_32)$4) < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $53(($3 + [56]), $4)
	if ( ((int_32)*($5 + [104]) == (int_32)($3 + [56])) ){ goto $label$4 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$4
	if ( ((int_64)*($5 + [16]) == (int_64)$1) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [8389])
	if ( ((int_64)*([0] + [16]) == (int_64)$1) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8408])
	
.LABEL $label$1
	CALL memcpy($0, $5, [104])
	$4 = *($3 + [80])
	if ( ($4 == 0) ){ goto $label$5 }
	$7 = ($3 + [84])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL $10($0)
	
.LABEL $label$9
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($3 + [80]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $4
	
.LABEL $label$6
	*($7) = $4
	CALL $10($5)
	
.LABEL $label$5
	$global$0 = ($3 + [96])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [8794])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [8899])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8832])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8899])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9199])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $8([120])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [104]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [40])
	*($3 + [48]) = ($5 + [56])
	*($3 + [52]) = ($5 + [72])
	*($3 + [56]) = ($5 + [88])
	*($3 + [60]) = ($5 + [96])
	CALL $195(($3 + [32]), ($3 + [24]))
	*($5 + [108]) = $1
	*($3 + [24]) = $5
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $7)
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $196(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $54 (int_64 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [320])
	$global$0 = $1
	*($1 + [304]) = [8261]
	*($1 + [308]) = CALL $1([8261])
	*($1 + [104]) = *($1 + [304])
	$2 = [1]
	if ( ((int_64)*(CALL $52(($1 + [312]), ($1 + [104]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [288]) = [8424]
	*($1 + [292]) = CALL $1([8424])
	*($1 + [96]) = *($1 + [288])
	$2 = [1]
	if ( ((int_64)*(CALL $52(($1 + [296]), ($1 + [96]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [272]) = [8437]
	*($1 + [276]) = CALL $1([8437])
	*($1 + [88]) = *($1 + [272])
	$2 = [1]
	if ( ((int_64)*(CALL $52(($1 + [280]), ($1 + [88]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [256]) = [8376]
	*($1 + [260]) = CALL $1([8376])
	*($1 + [80]) = *($1 + [256])
	$2 = [1]
	if ( ((int_64)*(CALL $52(($1 + [264]), ($1 + [80]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [240]) = [8450]
	*($1 + [244]) = CALL $1([8450])
	*($1 + [72]) = *($1 + [240])
	$2 = [1]
	if ( ((int_64)*(CALL $52(($1 + [248]), ($1 + [72]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [224]) = [8463]
	*($1 + [228]) = CALL $1([8463])
	*($1 + [64]) = *($1 + [224])
	$2 = [1]
	if ( ((int_64)*(CALL $52(($1 + [232]), ($1 + [64]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [208]) = [8476]
	*($1 + [212]) = CALL $1([8476])
	*($1 + [56]) = *($1 + [208])
	$2 = [1]
	if ( ((int_64)*(CALL $52(($1 + [216]), ($1 + [56]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [192]) = [8489]
	*($1 + [196]) = CALL $1([8489])
	*($1 + [48]) = *($1 + [192])
	$2 = [1]
	if ( ((int_64)*(CALL $52(($1 + [200]), ($1 + [48]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [176]) = [8502]
	*($1 + [180]) = CALL $1([8502])
	*($1 + [40]) = *($1 + [176])
	$2 = [1]
	if ( ((int_64)*(CALL $52(($1 + [184]), ($1 + [40]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [160]) = [8261]
	*($1 + [164]) = CALL $1([8261])
	*($1 + [32]) = *($1 + [160])
	$2 = [1]
	if ( ((int_64)*(CALL $52(($1 + [168]), ($1 + [32]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [144]) = [8515]
	*($1 + [148]) = CALL $1([8515])
	*($1 + [24]) = *($1 + [144])
	$2 = [1]
	if ( ((int_64)*(CALL $52(($1 + [152]), ($1 + [24]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [128]) = [8528]
	*($1 + [132]) = CALL $1([8528])
	*($1 + [16]) = *($1 + [128])
	$2 = [1]
	if ( ((int_64)*(CALL $52(($1 + [136]), ($1 + [16]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [112]) = [8541]
	*($1 + [116]) = CALL $1([8541])
	*($1 + [8]) = *($1 + [112])
	$2 = ((int_64)*(CALL $52(($1 + [120]), ($1 + [8]))) == (int_64)$0)
	
.LABEL $label$1
	$global$0 = ($1 + [320])
	return $2
}

int_32 .FUNC $55 (int_64 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = [0]
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)$0) ){ goto $label$1 }
	if ( CALL $54($1) ){ goto $label$1 }
	$6 = *($4)
	$7 = CALL $1([8554])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$2 }
	$6 = [0]
	if ( (CALL $39($4, [0], [-1], [8554], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = *($4)
	$7 = ($4 + [4])
	$8 = CALL $1([8562])
	if ( ((int_32)$8 != (int_32)( *($7) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$3 }
	$6 = [0]
	if ( (CALL $39($4, [0], [-1], [8562], $8) == 0) ){ goto $label$1 }
	
.LABEL $label$3
	$6 = *($4)
	$8 = CALL $1([8571])
	if ( ((int_32)$8 != (int_32)( *($7) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$4 }
	$6 = [0]
	if ( (CALL $39($4, [0], [-1], [8571], $8) == 0) ){ goto $label$1 }
	
.LABEL $label$4
	*($5 + [16]) = [8579]
	*($5 + [20]) = CALL $1([8579])
	*($5 + [8]) = *($5 + [16])
	$6 = [0]
	if ( ((int_64)*(CALL $52(($5 + [24]), ($5 + [8]))) == (int_64)$1) ){ goto $label$1 }
	$0 = *($3)
	if ( ((int_64)$0 > (int_64)0) ){ goto $label$5 }
	CALL eosio_assert([0], [8592])
	
.LABEL $label$5
	if ( ((uint_64)((int_64)$0 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$0 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $0) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$1 = (uint_64)$0 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$0 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$0 = $1
	$3 = $4
	goto $label$8 
	
.LABEL $label$9
	$0 = $1
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$0 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$0 = (uint_64)$0 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$3 = ($4 + [1])
	$4 = $3
	if ( $6 ){ goto $label$10 }
	
.LABEL $label$8
	$6 = [1]
	$4 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$6
	CALL eosio_assert([0], [8608])
	$6 = [1]
	
.LABEL $label$1
	$global$0 = ($5 + [32])
	return $6
}

void .FUNC $56 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	$5 = [0]
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = $3
	*($4 + [8]) = $1
	$6 = (uint_64)$2 >> (uint_64)(int_64)8
	$7 = CALL db_find_i64($1, $3, (int_64)3607749779137757184, $6)
	if ( ((int_32)$7) < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $57(($4 + [8]), $7)
	if ( ((int_32)*($5 + [16]) == (int_32)($4 + [8])) ){ goto $label$6 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$6
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$4 }
	$8 = ($4 + [36])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$7:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL $10($0)
	
.LABEL $label$8
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$7 }
	$5 = *(($4 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($0 + [8]) = $2
	*($0) = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$1 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $1
	$0 = $5
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$9 }
	goto $label$4 
	
.LABEL $label$10
	$6 = $1
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$0 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $0 ){ goto $label$11 }
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$4
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$3
	CALL eosio_assert([0], [8951])
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$2
	$5 = $7
	
.LABEL $label$1
	*($8) = $7
	CALL $10($5)
	$global$0 = ($4 + [48])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9199])
	
.LABEL $label$5
	$2 = CALL $2($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $8([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9976])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9976])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	$8 = *($3 + [24])
	*(($5 + [8])) = $8
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	*($3 + [24]) = $8)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $8
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $197(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $3($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $10($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $173 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9199])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $8([80])) + [40]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	*($3 + [44]) = ($5 + [48])
	CALL $174(($3 + [32]), ($3 + [24]))
	*($5 + [72]) = [-1]
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	*($3 + [40]) = (int_64)0
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $175(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9823])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9868])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)$7 == (int_64)*(*(($5 + [-24])))) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)$7 != (int_64)*(*($10))) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [9918])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $10($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $10($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
	$9 = *(($1 + [72]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$16 }
	$9 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-8272242484608761856, $2, *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx128_remove($9)
	
.LABEL $label$15
	$global$0 = ($2 + [16])
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $169($0, $1)
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9094])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [14]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *(($1 + [28]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $62($0, $6)
	$6 = ($6 + [40])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [40])) - *($1 + [36])) / (int_32)[40]))
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$5:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [9094])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$5 }
	$6 = *(($1 + [40]))
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $62($0, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = CALL $170($0, ($1 + [48]))
	$global$0 = ($2 + [16])
	return $4
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9199])
	
.LABEL $label$5
	$2 = CALL $2($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $8([32])) + [16]) = $0
	*($5) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9976])
	
.LABEL $label$7
	$7 = ($5 + [8])
	CALL memcpy($5, $2, [8])
	$8 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9976])
	
.LABEL $label$8
	CALL memcpy($7, $8, [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $173(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $3($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $10($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9094])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [9094])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $157(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9094])
	$1 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($1, $3, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
}

int_32 .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9094])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [9094])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	*($1 + [24]) = [-1]
	*($1) = *(*(*($0 + [4])))
	$4 = *($1 + [12])
	$5 = ( *(($1 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [16])
	$6 = (CASTING uint_64)(uint_32 $5)
	$7 = ($1 + [12])
	$8 = ($1 + [24])
	$5 = *($0)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	CALL $156(($3 + [32]), ($3 + [24]))
	$6 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($5 + [8]), (int_64)-8272133493090156544, *(*($0 + [8])), $6, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $3($2)
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $155 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$11 }
	CALL $10(*(($1 + [20])))
	
.LABEL $label$11
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $10($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $158 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $10(*(($1 + [40])))
	
.LABEL $label$11
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $10($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $157(*($1), *($0 + [16]))
	$6 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9094])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$1 = *($1)
	*($2 + [8]) = *(*($0 + [36]))
	$0 = *($1 + [4])
	if ( ((int_32)(*($1 + [8]) - $0) > (int_32)[0]) ){ goto $label$11 }
	CALL eosio_assert([0], [9094])
	$0 = *(($1 + [4]))
	
.LABEL $label$11
	CALL memcpy($0, ($2 + [8]), [1])
	*(($0 = ($1 + [4]))) = (*($0) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $179 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [9222])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL $8([120])) + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [100]) = $1
	CALL $186(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [104])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $158(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $10(*(($3 + [40])))
	
.LABEL $label$5
	CALL $10($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $183 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	$5 = ($global$0 - [112])
	$global$0 = $5
	*($5 + [104]) = $4
	*($5 + [88]) = $3
	*($5 + [80]) = (uint_64)$4 >> (uint_64)(int_64)8)
	*($5 + [72]) = $2
	CALL $180(($5 + [56]), ($5 + [72]), ($5 + [80]))
	$6 = *($5 + [60])
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ((int_64)((int_64)((int_64)*($5 + [80]) ^ (int_64)*($6 + [16])) | (int_64)((int_64)*($5 + [88]) ^ (int_64)*(($6 + [24])))) != (int_64)0) ){ goto $label$1 }
	CALL $187($0, $2, *($6))
	$global$0 = ($5 + [112])
	return 
	
.LABEL $label$1
	$3 = *($1 + [232])
	*($5 + [24]) = [8541]
	*($5 + [28]) = CALL $1([8541])
	*($5 + [16]) = *($5 + [24])
	CALL $56(($5 + [40]), $3, $4, *(CALL $52(($5 + [32]), ($5 + [16]))))
	$4 = *($5 + [40])
	CALL __multi3($5, $4, (int_64)$4 >> (int_64)63), (int_64)5, (int_64)0)
	$7 = *($5 + [48])
	$4 = *(($5 + [8]))
	$3 = *($5)
	if ( (( (uint_64)($3 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ) == 0) ){ goto $label$3 }
	if ( ( ((uint_64)$3 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ) ){ goto $label$2 }
	CALL eosio_assert([0], [10160])
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [10136])
	
.LABEL $label$2
	*($5 + [64]) = $7
	*($5 + [56]) = ((int_64)$3 / (int_64)100)
	$4 = *($1)
	*($5 + [40]) = $2
	*($5 + [44]) = ($5 + [80])
	*($5 + [48]) = ($5 + [104])
	*($5 + [52]) = ($5 + [56])
	CALL $188($0, $2, $4, ($5 + [40]))
	$global$0 = ($5 + [112])
}

void .FUNC $69 (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)5378097726120493055) ){ goto $label$8 }
	if ( ((int_64)$2 > (int_64)-4417357895863107585) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-8272139304635056128) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-8173735229979099136) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [3]
	*($3 + [80]) = *($3 + [112])
	CALL $70($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 > (int_64)5378313778638525439) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)5378097726120493056) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)5378171186356158464) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [4]
	*($3 + [72]) = *($3 + [120])
	CALL $72($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-4417357895863107584) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)3908337730533720064) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [5]
	*($3 + [40]) = *($3 + [152])
	CALL $74($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)5378313778638525440) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)6112363716718624768) ){ goto $label$1 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [6]
	*($3 + [24]) = *($3 + [168])
	CALL $76($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [148]) = [0]
	*($3 + [144]) = [7]
	*($3 + [48]) = *($3 + [144])
	CALL $78($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [140]) = [0]
	*($3 + [136]) = [8]
	*($3 + [56]) = *($3 + [136])
	CALL $80($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [132]) = [0]
	*($3 + [128]) = [9]
	*($3 + [64]) = *($3 + [128])
	CALL $82($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [164]) = [0]
	*($3 + [160]) = [10]
	*($3 + [32]) = *($3 + [160])
	CALL $74($1, $1, ($3 + [32]))
	
.LABEL $label$1
	*($3 + [96]) = [8632]
	*($3 + [100]) = CALL $1([8632])
	*($3 + [16]) = *($3 + [96])
	CALL $52(($3 + [104]), ($3 + [16]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$9 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [11]
	*($3 + [8]) = *($3 + [88])
	CALL $85($0, $1, ($3 + [8]))
	
.LABEL $label$9
	CALL $49([0])
	$global$0 = ($3 + [176])
}

int_32 .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = [0]
	*($2) = [0]
	*($1) = [0]
	$4 = CALL $1($0)
	if ( ((int_32)*($0) != (int_32)[91]) ){ goto $label$1 }
	$5 = ($4 + [-1])
	if ( ((int_32)*(($0 + $5)) != (int_32)[93]) ){ goto $label$1 }
	*($1) = CALL $2([1024])
	if ( ((int_32)$4 < (int_32)[2]) ){ goto $label$1 }
	$6 = [1]
	$7 = [1]
	
.LOOP $label$3:
	if ( ((int_32)*(($0 + $6)) != (int_32)[93]) ){ goto $label$4 }
	$3 = ($6 - $7)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$2 }
	$8 = CALL $2(($3 + [1]))
	CALL memcpy($8, ($0 + $7), $3)
	*(($8 + $3)) = [0]
	$7 = *($2)
	$3 = ($7 + [1])
	*($2) = $3
	*((*($1) + ($7 << [2]))) = $8
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$1 }
	$8 = ($6 + [1])
	if ( ((int_32)*(($0 + $8)) != (int_32)[91]) ){ goto $label$2 }
	$3 = [0]
	if ( ((int_32)$8 >= (int_32)$5) ){ goto $label$1 }
	$7 = ($6 + [2])
	$6 = ($8 + [1])
	if ( ((int_32)$6 < (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	return $3
}

int_32 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [16])
	$global$0 = $1
	if ( (*($0) & [1]) ){ goto $label$2 }
	$2 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0 + [8])
	
.LABEL $label$1
	if ( (CALL $44($2, [8676], [4]) == 0) ){ goto $label$3 }
	$global$0 = ($1 + [16])
	return [0]
	
.LABEL $label$3
	*(($1 + [8])) = [0]
	*($1) = (int_64)0
	$3 = ($2 + [4])
	$2 = CALL $1($3)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$7 }
	*($1) = ($2 << [1])
	$4 = ($1 | [1])
	if ( $2 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$5 = (($2 + [16]) & [-16])
	$4 = CALL $8($5)
	*($1) = ($5 | [1])
	*($1 + [8]) = $4
	*($1 + [4]) = $2
	
.LABEL $label$6
	CALL memcpy($4, $3, $2)
	
.LABEL $label$5
	*(($4 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*($0 + [8])) = [0]
	*($0 + [4]) = [0]
	
.LABEL $label$8
	CALL $29($0, [0])
	*(($0 + [8])) = *(($1 + [8]))
	*($0) = *($1)
	$global$0 = ($1 + [16])
	return [1]
	
.LABEL $label$4
	CALL $24($1)
	return (unreachable)
}

int_64 .FUNC $67 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	float_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	float_64 $19
	float_64 $20
	float_64 $21
	$5 = ($global$0 - [32])
	$global$0 = $5
	if ( ($0 == 0) ){ goto $label$2 }
	if ( ($2 <= [100000]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8738])
	
.LABEL $label$1
	if ( ((int_32)CALL $1($0) < (int_32)[256]) ){ goto $label$3 }
	CALL eosio_assert([0], [8750])
	
.LABEL $label$3
	$6 = CALL $2([1024])
	$0 = CALL $48($0, [8736])
	if ( ($0 == 0) ){ goto $label$6 }
	$7 = $6
	$8 = [0]
	
.LOOP $label$7:
	$9 = CALL $1($0)
	$10 = CALL $2(($9 + [1]))
	CALL memcpy($10, $0, $9)
	*(($10 + $9)) = [0]
	*($7) = $10
	$7 = ($7 + [4])
	$8 = ($8 + [1])
	$0 = CALL $48([0], [8736])
	if ( $0 ){ goto $label$7 }
	*($3) = [0]
	*($5 + [16]) = (int_64)0
	$11 = [0]
	$12 = (float_64)0
	
.LOOP $label$8:
	$10 = ($6 + ($11 << [2]))
	$7 = *($10)
	if ( ((int_32)*($7) != (int_32)[91]) ){ goto $label$17 }
	*($5 + [8]) = [0]
	if ( ((int_32)CALL $65($7, ($5 + [12]), ($5 + [8])) > (int_32)[0]) ){ goto $label$18 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$18
	$13 = *($5 + [12])
	$14 = *($5 + [8])
	if ( ((uint_32)($14 + [-1]) > (uint_32)[4]) ){ goto $label$16 }
	$15 = [0]
	$16 = [1]
	
.LOOP $label$19:
	$17 = *(($13 + ($15 << [2])))
	$10 = CALL $1($17)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$20 }
	$0 = [0]
	$7 = [0]
	
.LOOP $label$21:
	$9 = (*(($17 + $0)) + [-48])
	if ( ((uint_32)($9 & [255]) > (uint_32)[9]) ){ goto $label$16 }
	$9 = ([1] << $9)
	if ( ($9 & int_32(($7 << [16]) >> [16])) ){ goto $label$16 }
	$7 = ($7 | $9)
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)$10) ){ goto $label$21 }
	
.LABEL $label$20
	$16 = ((int_32)$10 * (int_32)$16)
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)$14) ){ goto $label$19 }
	if ( ((int_32)$16 > (int_32)[0]) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$17
	if ( ($7 == 0) ){ goto $label$13 }
	$9 = CALL $1($7)
	if ( ((uint_32)($9 + [-1]) > (uint_32)[4]) ){ goto $label$13 }
	if ( ((int_32)$9 != (int_32)[1]) ){ goto $label$22 }
	$17 = (*($7) + [-101])
	if ( ((uint_32)$17 > (uint_32)[10]) ){ goto $label$22 }
	$0 = [1]
	if ( (([1] << $17) & [1161]) ){ goto $label$12 }
	
.LABEL $label$22
	$0 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)((*(($7 + $0)) + [-48]) & [255]) >= (uint_32)[10]) ){ goto $label$13 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)$9) ){ goto $label$23 }
	$0 = [1]
	goto $label$12 
	
.LABEL $label$16
	$16 = [-1]
	
.LABEL $label$15
	CALL eosio_assert([0], [8778])
	
.LABEL $label$14
	*($3) = (*($3) + $16)
	*($5) = $2
	CALL $21(($5 + [26]), [8681], $5)
	$18 = ((int_32)$14 < (int_32)[1])
	if ( $18 ){ goto $label$11 }
	$15 = ([5] - $14)
	$16 = [0]
	$17 = [0]
	
.LOOP $label$24:
	$9 = *(($13 + ($17 << [2])))
	$7 = CALL $1($9)
	if ( ((int_32)$16 != (int_32)$17) ){ goto $label$26 }
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$26 }
	$10 = *((($5 + [26]) + ($15 + $16)))
	$0 = [0]
	
.LOOP $label$27:
	if ( ((int_32)($10 & [255]) == (int_32)*(($9 + $0))) ){ goto $label$25 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)$7) ){ goto $label$27 }
	
.LABEL $label$26
	$17 = ($17 + [1])
	if ( ((int_32)$17 != (int_32)$14) ){ goto $label$24 }
	goto $label$10 
	
.LABEL $label$25
	$16 = ($16 + [1])
	$17 = ($17 + [1])
	if ( ((int_32)$17 != (int_32)$14) ){ goto $label$24 }
	goto $label$10 
	
.LABEL $label$13
	CALL eosio_assert([0], [8778])
	$0 = [-1]
	
.LABEL $label$12
	*($3) = (*($3) + $0)
	$19 = CALL $66(*($10), $2, ($5 + [16]))
	goto $label$9 
	
.LABEL $label$11
	$16 = [0]
	
.LABEL $label$10
	$19 = *((($14 << [3]) + [8688]))
	*($5 + [16]) = ((float_64)$19 + (float_64)*($5 + [16]))
	$9 = ((int_32)$16 == (int_32)$14)
	if ( ($13 == 0) ){ goto $label$28 }
	$0 = $13
	if ( $18 ){ goto $label$29 }
	
.LOOP $label$30:
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$31 }
	CALL $3($7)
	
.LABEL $label$31
	$0 = ($0 + [4])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$30 }
	
.LABEL $label$29
	CALL $3($13)
	
.LABEL $label$28
	$19 = ( $19 ? (float_64)0 : $9 )
	
.LABEL $label$9
	$12 = ((float_64)$12 + (float_64)$19)
	$0 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$8 != (int_32)$11) ){ goto $label$8 }
	if ( ($6 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$8 = [0]
	CALL eosio_assert([0], [8767])
	*($3) = [0]
	*($5 + [16]) = (int_64)0
	$12 = (float_64)0
	$0 = [0]
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	if ( ($0 == 0) ){ goto $label$32 }
	$0 = $6
	
.LOOP $label$33:
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$34 }
	CALL $3($7)
	
.LABEL $label$34
	$0 = ($0 + [4])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$33 }
	
.LABEL $label$32
	CALL $3($6)
	
.LABEL $label$4
	$20 = (CASTING float_64)(int_32 *($3))
	$19 = (CASTING float_64)(int_64 $1)
	$21 = ((float_64)((float_64)*($5 + [16]) * (float_64)$19) / (float_64)$20)
	if ( ((float_64)(float_64)|$21| < (float_64)(float_64)9223372036854775808) ){ goto $label$36 }
	$1 = (int_64)-9223372036854775808
	goto $label$35 
	
.LABEL $label$36
	$1 = (Rounds 0)($21)
	
.LABEL $label$35
	*($4) = $1
	$12 = ((float_64)((float_64)$12 * (float_64)$19) / (float_64)$20)
	if ( (((float_64)$12 < (float_64)(float_64)18446744073709551615) & ((float_64)$12 >= (float_64)(float_64)0)) ){ goto $label$37 }
	$global$0 = ($5 + [32])
	return (int_64)0
	
.LABEL $label$37
	$global$0 = ($5 + [32])
	return (Rounds 0)($12)
}

int_64 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	float_64 $6
	float_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = CALL $1($0)
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$2 }
	$5 = (*($0) + [-101])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$2 }
	if ( ((([1] << $5) & [1161]) == 0) ){ goto $label$2 }
	*($2) = ((float_64)*($2) + (float_64)(float_64)1.962)
	$1 = ((int_32)$1 % (int_32)[10])
	$4 = ((int_32)$1 % (int_32)[2])
	$0 = *($0)
	if ( ((int_32)(((int_32)$0 != (int_32)[104]) | ((int_32)$1 < (int_32)[5])) != (int_32)[1]) ){ goto $label$3 }
	if ( ((((int_32)$1 > (int_32)[4]) | ((int_32)$0 != (int_32)[108])) == 0) ){ goto $label$3 }
	if ( ((int_32)$0 != (int_32)[111]) ){ goto $label$1 }
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$1 }
	
.LABEL $label$3
	$global$0 = ($3 + [16])
	return (float_64)1.962
	
.LABEL $label$2
	*($3) = $1
	CALL $21(($3 + [10]), [8681], $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$6 }
	$5 = (($3 + [10]) + ([5] - $4))
	$1 = [0]
	
.LOOP $label$7:
	if ( ((int_32)*(($5 + $1)) != (int_32)*(($0 + $1))) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)$4) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = *((($4 << [3]) + [8688]))
	$7 = $6
	goto $label$4 
	
.LABEL $label$5
	$6 = *((($4 << [3]) + [8688]))
	$7 = (float_64)0
	
.LABEL $label$4
	*($2) = ((float_64)$6 + (float_64)*($2))
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return ( (float_64)0 ? ( (float_64)0 ? (float_64)1.962 : ((int_32)$0 != (int_32)[101]) ) : ((int_32)$4 == (int_32)[1]) )
}

void .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $59($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $62(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $10($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9094])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9094])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9094])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $157(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$3 }
	$2 = CALL $38($0, *($2), $6)
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [8641])
	$2 = CALL $38($0, *($2), *($3))
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	if ( (*($4) == 0) ){ goto $label$4 }
	CALL eosio_assert([0], [8659])
	
.LABEL $label$4
	$global$0 = ($5 + [16])
	return $2
	
.LABEL $label$1
	$3 = *($3)
	CALL $26($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$6 }
	*($1) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$5
	CALL $29($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	$global$0 = ($5 + [16])
	return $2
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $139(CALL $138($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9094])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9094])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	$6 = ($global$0 - [48])
	$global$0 = $6
	*($6 + [40]) = $2
	*($6 + [32]) = $4
	*($6 + [36]) = $3
	if ( ((int_32)$3 > (int_32)[-2]) ){ goto $label$1 }
	CALL eosio_assert([0], [9133])
	
.LABEL $label$1
	$3 = ($1 + [152])
	CALL $140($0, $3, $2)
	$4 = *($0 + [4])
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_32)*($4 + [24]) <= (int_32)[-1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = *($1)
	*($6 + [24]) = ($6 + [40])
	CALL $141(($6 + [8]), $3, $2, ($6 + [24]))
	$2 = *($6 + [8])
	*($0) = $2
	if ( ((int_32)*((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)) + [24]) > (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = *($1)
	$0 = *($0 + [4])
	*($6 + [16]) = $5
	*($6 + [12]) = ($6 + [32])
	*($6 + [8]) = ($6 + [36])
	if ( $0 ){ goto $label$5 }
	CALL eosio_assert([0], [9273])
	
.LABEL $label$5
	CALL $142($3, $0, $2, ($6 + [8]))
	$global$0 = ($6 + [48])
	return 
	
.LABEL $label$2
	$global$0 = ($6 + [48])
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [216]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [220])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$6 }
	CALL $10(*(($4 + [56])))
	
.LABEL $label$6
	CALL $10($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [216]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL $10($3)
	
.LABEL $label$1
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$7 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((*($4 + [12]) & [1]) == 0) ){ goto $label$12 }
	CALL $10(*(($4 + [20])))
	
.LABEL $label$12
	CALL $10($4)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($0 + [176]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $1
	
.LABEL $label$8
	*($2) = $1
	CALL $10($3)
	
.LABEL $label$7
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$15 }
	
.LOOP $label$16:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$18 }
	CALL $10(*(($4 + [40])))
	
.LABEL $label$18
	CALL $10($4)
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$16 }
	$3 = *(($0 + [136]))
	goto $label$14 
	
.LABEL $label$15
	$3 = $1
	
.LABEL $label$14
	*($2) = $1
	CALL $10($3)
	
.LABEL $label$13
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$19 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$21 }
	
.LOOP $label$22:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$23 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$24 }
	CALL $10(*(($4 + [40])))
	
.LABEL $label$24
	CALL $10($4)
	
.LABEL $label$23
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$22 }
	$3 = *(($0 + [96]))
	goto $label$20 
	
.LABEL $label$21
	$3 = $1
	
.LABEL $label$20
	*($2) = $1
	CALL $10($3)
	
.LABEL $label$19
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$25 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$27 }
	
.LOOP $label$28:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$29 }
	CALL $10($4)
	
.LABEL $label$29
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$28 }
	$3 = *(($0 + [56]))
	goto $label$26 
	
.LABEL $label$27
	$3 = $1
	
.LABEL $label$26
	*($2) = $1
	CALL $10($3)
	
.LABEL $label$25
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($1 + [12])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = CALL $25(($2 + [64]), ($1 + [16]))
	*($2 + [56]) = [0]
	*($2 + [48]) = (int_64)0
	$7 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($7 == 0) ){ goto $label$7 }
	$8 = int_32($7 >> [6])
	if ( ((uint_32)$8 >= (uint_32)[67108864]) ){ goto $label$6 }
	$9 = CALL $8($7)
	*((($2 + [48]) + [8])) = ($9 + ($8 << [6]))
	*($2 + [48]) = $9
	*($2 + [52]) = $9
	$8 = *(($1 + [32]))
	$7 = *(($1 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$8:
	*($9) = *($7)
	*(($9 + [8])) = *(($7 + [8]))
	CALL $25(($9 + [16]), ($7 + [16]))
	*(($9 + [56])) = *(($7 + [56]))
	*(($9 + [48])) = *(($7 + [48]))
	*(($9 + [40])) = *(($7 + [40]))
	*($9 + [32]) = *(($7 + [32]))
	$9 = (*($2 + [52]) + [64])
	*($2 + [52]) = $9
	$7 = ($7 + [64])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$8 }
	
.LABEL $label$7
	$8 = CALL $25($2, ($1 + [64]))
	$9 = CALL $25(($2 + [16]), ($1 + [52]))
	$7 = CALL $25(($2 + [32]), ($1 + [40]))
	CALL $198($0, $5, $4, $3, $6, ($2 + [48]), $7, $9, $8)
	if ( (*($8) & [1]) ){ goto $label$10 }
	if ( (*($9) & [1]) ){ goto $label$9 }
	goto $label$5 
	
.LABEL $label$10
	CALL $10(*($8 + [8]))
	if ( ((*($9) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$9
	CALL $10(*($9 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	CALL $42(($2 + [48]))
	
.LABEL $label$5
	if ( (*($7) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = *($2 + [48])
	if ( ($8 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL $10(*($7 + [8]))
	$8 = *($2 + [48])
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = *($2 + [52])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$12 }
	
.LOOP $label$13:
	$9 = ($7 + [-64])
	if ( ((*(($7 + [-48])) & [1]) == 0) ){ goto $label$14 }
	CALL $10(*(($7 + [-40])))
	
.LABEL $label$14
	$7 = $9
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$13 }
	$7 = *($2 + [48])
	goto $label$11 
	
.LABEL $label$12
	$7 = $8
	
.LABEL $label$11
	*($2 + [52]) = $8
	CALL $10($7)
	
.LABEL $label$1
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	CALL $10(*($6 + [8]))
	
.LABEL $label$15
	$global$0 = ($2 + [80])
	(unreachable)
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9976])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [9976])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	$2 = ($3 + [12])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9976])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	CALL $124(*($1), ($3 + [16]))
	CALL $125(*($1), ($3 + [28]))
	CALL $124(*($1), ($3 + [40]))
	CALL $124(*($1), ($3 + [52]))
	CALL $124(*($1), ($3 + [64]))
}

int_32 .FUNC $85 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [384])
	$global$0 = $3
	*(($4 = $3) + [328]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [280]) + [24])) = (int_64)0
	*((($4 + [280]) + [40])) = [0]
	*($4 + [288]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [268]) = $2
	*($4 + [264]) = $2
	*($4 + [272]) = ($2 + $5)
	*($4 + [368]) = ($4 + [264])
	*($4 + [24]) = ($4 + [280])
	CALL $116(($4 + [24]), ($4 + [368]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [272])
	*($4 + [8]) = *($4 + [264])
	$3 = *($3)
	*((($4 + [336]) + [8])) = $3
	*(($6 = (($4 + [352]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [352]) = $7
	*($4 + [336]) = $7
	$3 = *($6)
	*((($4 + [368]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$7 = *($4 + [352])
	*($4 + [40]) = $7
	*($4 + [368]) = $7
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [184])) = $0
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $1
	*($4 + [372]) = ($4 + [328])
	*($4 + [368]) = ($4 + [24])
	CALL $117(($4 + [368]), ($4 + [280]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $3($2)
	
.LABEL $label$4
	CALL $88(($4 + [24]))
	if ( ((*($4 + [312]) & [1]) == 0) ){ goto $label$5 }
	CALL $10(*(($4 + [320])))
	
.LABEL $label$5
	$global$0 = ($4 + [384])
	return [1]
}

void .FUNC $84 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [336])
	$global$0 = $5
	CALL require_auth($1)
	*(($6 = (($5 + [320]) + [8]))) = *(($3 + [8]))
	*($5 + [320]) = *($3)
	$7 = *($0)
	$8 = CALL $25(($5 + [304]), $4)
	*((($5 + [56]) + [8])) = *($6)
	*($5 + [56]) = *($5 + [320])
	$6 = CALL $55($7, $1, $2, ($5 + [56]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$1 }
	CALL $10(*($8 + [8]))
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$2 }
	$6 = [1]
	$8 = CALL $25(($5 + [288]), $4)
	$9 = *($8 + [8])
	$11 = ($10 & [1])
	$10 = *($8)
	$10 = ( *($8 + [4]) ? uint_32($10 >> [1]) : $11 )
	if ( ($10 == 0) ){ goto $label$3 }
	$8 = ( $9 ? ($8 + [1]) : $11 )
	$6 = [0]
	
.LOOP $label$4:
	$6 = ($6 + ((int_32)*($8) == (int_32)[45]))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$4 }
	$6 = ((int_32)$6 != (int_32)[7])
	
.LABEL $label$3
	if ( ($11 == 0) ){ goto $label$5 }
	CALL $10($9)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	*(($6 = (($5 + [272]) + [8]))) = *(($3 + [8]))
	*($5 + [272]) = *($3)
	$8 = CALL $25(($5 + [256]), $4)
	*((($5 + [8]) + [8])) = *($6)
	*($5 + [8]) = *($5 + [272])
	CALL $118($0, $1, ($5 + [8]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$2 }
	CALL $10(*($8 + [8]))
	$global$0 = ($5 + [336])
	return 
	
.LABEL $label$6
	$10 = ($3 + [8])
	*(($6 = (($5 + [136]) + [8]))) = *($10)
	*($5 + [136]) = *($3)
	$8 = CALL $25(($5 + [120]), $4)
	*((($5 + [40]) + [8])) = *($6)
	*($5 + [40]) = *($5 + [136])
	CALL $119(($5 + [152]), $0, $1, $2, ($5 + [40]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$7 }
	CALL $10(*($8 + [8]))
	
.LABEL $label$7
	CALL $120(($5 + [104]), $0, ($5 + [152]))
	*(($6 = (($5 + [88]) + [8]))) = *($10)
	*($5 + [88]) = *($3)
	$8 = CALL $25(($5 + [72]), ($5 + [104]))
	*((($5 + [24]) + [8])) = *($6)
	*($5 + [24]) = *($5 + [88])
	CALL $121($0, ($5 + [152]), ($5 + [24]), $8)
	if ( (*($8) & [1]) ){ goto $label$11 }
	$8 = [1]
	if ( (*($5 + [104]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $10(*($8 + [8]))
	$8 = [1]
	if ( ((*($5 + [104]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $10(*($5 + [112]))
	if ( (*($5 + [184]) & $8) ){ goto $label$8 }
	goto $label$2 
	
.LABEL $label$9
	if ( ((*($5 + [184]) & $8) == 0) ){ goto $label$2 }
	
.LABEL $label$8
	CALL $10(*(($5 + [192])))
	
.LABEL $label$2
	$global$0 = ($5 + [336])
}

void .FUNC $83 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($5 + [8]) = [8541]
	*($5 + [12]) = CALL $1([8541])
	*($5) = *($5 + [8])
	CALL require_auth(*(CALL $52(($5 + [16]), $5)))
	$6 = ($0 + [192])
	$8 = *(($0 + [220]))
	$7 = *(($0 + [216]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$4 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	if ( ((int_32)*($10 + [60]) == (int_32)$6) ){ goto $label$6 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$6
	if ( $10 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$9 = CALL db_find_i64(*($6), *(($0 + [200])), (int_64)-3606981793854521344, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $104($6, $9)
	if ( ((int_32)*($10 + [60]) == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$2
	$9 = CALL db_next_i64(*($10 + [64]), ($5 + [24]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	CALL $104($6, $9)
	
.LABEL $label$7
	CALL $105($6, $10)
	
.LABEL $label$1
	$global$0 = ($5 + [32])
}

int_32 .FUNC $82 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [248]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9976])
	
.LABEL $label$5
	CALL memcpy(($4 + [248]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = $3
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [128])) = $0
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*($4 + [240]) = $1
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [248])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $3($2)
	
.LABEL $label$7
	CALL $88(($4 + [8]))
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $81 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [32]) = [8541]
	*($2 + [36]) = CALL $1([8541])
	*($2 + [8]) = *($2 + [32])
	CALL require_auth(*(CALL $52(($2 + [40]), ($2 + [8]))))
	$3 = *($0)
	*($2 + [16]) = [8625]
	*($2 + [20]) = CALL $1([8625])
	*($2) = *($2 + [16])
	CALL $114($0, ($0 + [32]), $3, *(CALL $52(($2 + [24]), $2)), $1)
	$global$0 = ($2 + [48])
}

int_32 .FUNC $80 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [352])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [288]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = [0]
	*($4 + [268]) = $2
	*($4 + [264]) = $2
	*($4 + [272]) = ($2 + $7)
	*($4 + [336]) = ($4 + [264])
	*($4 + [24]) = ($4 + [280])
	CALL $109(($4 + [24]), ($4 + [336]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [272])
	*($4 + [8]) = *($4 + [264])
	$3 = *($3)
	*((($4 + [304]) + [8])) = $3
	*(($8 = (($4 + [320]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [320]) = $9
	*($4 + [304]) = $9
	$3 = *($8)
	*((($4 + [336]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$9 = *($4 + [320])
	*($4 + [40]) = $9
	*($4 + [336]) = $9
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [184])) = $0
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $1
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$8 = *($4 + [296])
	$0 = *($4 + [288])
	$1 = *($4 + [280])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $3($2)
	
.LABEL $label$5
	CALL $88(($4 + [24]))
	$global$0 = ($4 + [352])
	return [1]
}

void .FUNC $182 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9308])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9354])
	
.LABEL $label$2
	*($5 + [16]) = *($1 + [16])
	*($5 + [24]) = *(($1 + [24]))
	$6 = *($1)
	CALL $193($3, $1)
	$3 = ($1 + [16])
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [9405])
	
.LABEL $label$3
	$7 = $4
	$4 = ($7 + [-64])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($7 + [-8])
	*($5 + [32]) = $5
	*($5 + [52]) = $3
	*($5 + [48]) = $1
	*($5 + [56]) = ($1 + [32])
	*($5 + [60]) = ($1 + [48])
	CALL $191(($5 + [48]), ($5 + [32]))
	CALL db_update_i64(*($1 + [68]), $2, $4, [56])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [48]) = *($3)
	*($5 + [56]) = *(($3 + [8]))
	if ( (CALL $17(($5 + [16]), ($5 + [48]), [16]) == 0) ){ goto $label$5 }
	$3 = ($1 + [72])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-8272242484608761856, ($5 + [32]), $6)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx128_update($1, $2, ($5 + [48]))
	
.LABEL $label$5
	$global$0 = ($5 + [64])
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $148 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [48])
	$global$0 = $5
	CALL $120(($5 + [16]), $1, $3)
	$1 = CALL $32(($5 + [16]), [9722])
	$3 = ($1 + [8])
	*((($5 + [32]) + [8])) = *($3)
	*($5 + [32]) = *($1)
	*($1) = (int_64)0
	*($3) = [0]
	CALL $40($5, *($2 + [24]))
	$1 = *($5)
	$2 = ($1 & [1])
	$1 = CALL $34(($5 + [32]), ( *($5 + [8]) ? ($5 | [1]) : $2 ), ( *($5 + [4]) ? uint_32($1 >> [1]) : $2 ))
	*($0) = *($1)
	$2 = ($1 + [8])
	*(($0 + [8])) = *($2)
	*($1) = (int_64)0
	*($2) = [0]
	if ( (*($5) & [1]) ){ goto $label$7 }
	if ( (*($5 + [32]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $10(*(($5 + [8])))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $10(*($5 + [40]))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( (*($5 + [16]) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ((int_64)*($4) >= (int_64)1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $10(*($5 + [24]))
	if ( ((int_64)*($4) < (int_64)1) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $160(($5 + [16]), $4)
	$1 = CALL $36(($5 + [16]), [0], [9739])
	$2 = ($1 + [8])
	*(($4 = (($5 + [32]) + [8]))) = *($2)
	*($5 + [32]) = *($1)
	*($1) = (int_64)0
	*($2) = [0]
	$1 = *($5 + [32])
	$2 = ($1 & [1])
	CALL $34($0, ( *($4) ? (($5 + [32]) | [1]) : $2 ), ( *($5 + [36]) ? uint_32($1 >> [1]) : $2 ))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $10(*($4))
	
.LABEL $label$8
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL $10(*($5 + [24]))
	
.LABEL $label$1
	$global$0 = ($5 + [48])
}

void .FUNC $145 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	$6 = ($global$0 - [48])
	$global$0 = $6
	CALL $120(($6 + [16]), $1, $3)
	$1 = CALL $32(($6 + [16]), [9722])
	$3 = ($1 + [8])
	*((($6 + [32]) + [8])) = *($3)
	*($6 + [32]) = *($1)
	*($1) = (int_64)0
	*($3) = [0]
	CALL $40($6, *($2 + [24]))
	$1 = *($6)
	$2 = ($1 & [1])
	$1 = CALL $34(($6 + [32]), ( *($6 + [8]) ? ($6 | [1]) : $2 ), ( *($6 + [4]) ? uint_32($1 >> [1]) : $2 ))
	*($0) = *($1)
	$2 = ($1 + [8])
	*(($0 + [8])) = *($2)
	*($1) = (int_64)0
	*($2) = [0]
	if ( (*($6) & [1]) ){ goto $label$7 }
	if ( (*($6 + [32]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $10(*(($6 + [8])))
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $10(*($6 + [40]))
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( (*($6 + [16]) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = (int_64)1
	if ( ((int_64)*($4) >= (int_64)1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $10(*($6 + [24]))
	$7 = (int_64)1
	if ( ((int_64)*($4) < (int_64)1) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $160(($6 + [16]), $4)
	$1 = CALL $36(($6 + [16]), [0], [9732])
	$2 = ($1 + [8])
	*(($4 = (($6 + [32]) + [8]))) = *($2)
	*($6 + [32]) = *($1)
	*($1) = (int_64)0
	*($2) = [0]
	$1 = *($6 + [32])
	$2 = ($1 & [1])
	CALL $34($0, ( *($4) ? (($6 + [32]) | [1]) : $2 ), ( *($6 + [36]) ? uint_32($1 >> [1]) : $2 ))
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $10(*($4))
	
.LABEL $label$8
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL $10(*($6 + [24]))
	
.LABEL $label$1
	if ( ((int_64)*($5) < (int_64)$7) ){ goto $label$9 }
	CALL $160(($6 + [16]), $5)
	$1 = CALL $36(($6 + [16]), [0], [9739])
	$4 = ($1 + [8])
	*(($5 = (($6 + [32]) + [8]))) = *($4)
	*($6 + [32]) = *($1)
	*($1) = (int_64)0
	*($4) = [0]
	$1 = *($6 + [32])
	$4 = ($1 & [1])
	CALL $34($0, ( *($5) ? (($6 + [32]) | [1]) : $4 ), ( *($6 + [36]) ? uint_32($1 >> [1]) : $4 ))
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*($5))
	
.LABEL $label$10
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*($6 + [24]))
	
.LABEL $label$9
	$global$0 = ($6 + [48])
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9094])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9094])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = *(($4 + [24]))
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9094])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	CALL $157(*($1), ($4 + [32]))
	$0 = ($4 + [48])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9094])
	$4 = *(($1 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $0, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $147 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [9222])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL $8([120])) + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [100]) = $1
	CALL $161(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [104])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $162(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $10(*(($3 + [40])))
	
.LABEL $label$5
	CALL $10($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $146 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [9222])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL $8([72])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56]) = [0]
	*($3 + [60]) = $1
	CALL $163(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [64])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $164(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $10(*(($3 + [56])))
	
.LABEL $label$5
	CALL $10($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $141 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [9222])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL $8([40])) + [20]) = [0]
	*($3 + [12 align=4]) = (int_64)0
	*($3 + [28]) = $1
	CALL $154(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [32])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $155(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [12]) & [1]) == 0) ){ goto $label$5 }
	CALL $10(*(($3 + [20])))
	
.LABEL $label$5
	CALL $10($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $140 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *(($4 + [-24]))
	if ( ((int_32)*($5 + [28]) == (int_32)$1) ){ goto $label$4 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$4
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$1
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-8272133493090156544, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $110($1, $5)
	if ( ((int_32)*($5 + [28]) == (int_32)$1) ){ goto $label$6 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $8(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL $8([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [40])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $59($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $144(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL $10($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL $10($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $10($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $142 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [28]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9308])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9354])
	
.LABEL $label$2
	*($1 + [24]) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$6 = *($1)
	$7 = ($1 + [12])
	CALL $27($7, *($3 + [8]))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [9405])
	
.LABEL $label$3
	$8 = ($1 + [8])
	$9 = ($1 + [24])
	$3 = *($7)
	$10 = ( *(($1 + [16])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($10 + [16])
	$11 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $2($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $8
	*($5 + [40]) = $7
	*($5 + [44]) = $9
	*($5 + [32]) = $1
	CALL $156(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [32]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $3($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [48])
}

int_32 .FUNC $72 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [336])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$2 = [0]
	$8 = CALL action_data_size()
	if ( ($8 == 0) ){ goto $label$1 }
	if ( ($8 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($8)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $8)
	
.LABEL $label$1
	*($4 + [280]) = [0]
	*($4 + [272]) = (int_64)0
	*($4 + [260]) = $2
	*($4 + [256]) = $2
	*($4 + [264]) = ($2 + $8)
	CALL $115(($4 + [256]), ($4 + [272]))
	*(($3 = ($4 + [8]))) = *($4 + [264])
	*($4) = *($4 + [256])
	$3 = *($3)
	*((($4 + [288]) + [8])) = $3
	*(($9 = (($4 + [304]) + [8]))) = $3
	$10 = *($4)
	*($4 + [304]) = $10
	*($4 + [288]) = $10
	$3 = *($9)
	*((($4 + [320]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$10 = *($4 + [304])
	*($4 + [32]) = $10
	*($4 + [320]) = $10
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [124])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [164])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [176])) = $0
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $1
	*($4 + [312]) = [0]
	*($4 + [304]) = (int_64)0
	$3 = (*($4 + [276]) - *($4 + [272]))
	if ( ($3 == 0) ){ goto $label$6 }
	$9 = int_32($3 >> [3])
	if ( ((uint_32)$9 >= (uint_32)[536870912]) ){ goto $label$5 }
	$7 = CALL $8($3)
	*(($4 + [312])) = ($7 + ($9 << [3]))
	*($4 + [304]) = $7
	*($4 + [308]) = $7
	$9 = *($4 + [272])
	$3 = (*($4 + [276]) - $9)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($7, $9, $3)
	$7 = (*($4 + [308]) + $3)
	*($4 + [308]) = $7
	
.LABEL $label$6
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	*($4 + [328]) = [0]
	*($4 + [320]) = (int_64)0
	$7 = ($7 - *($4 + [304]))
	if ( ($7 == 0) ){ goto $label$8 }
	$5 = int_32($7 >> [3])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$4 }
	$7 = CALL $8($7)
	*(($4 + [328])) = ($7 + ($5 << [3]))
	*($4 + [320]) = $7
	*($4 + [324]) = $7
	$9 = *($4 + [304])
	$5 = (*($4 + [308]) - $9)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($7, $9, $5)
	*($4 + [324]) = ($7 + $5)
	
.LABEL $label$8
	CALL void $3((int_32 ($4 + [320])), (int_32 $6))
	$7 = *($4 + [320])
	if ( ($7 == 0) ){ goto $label$9 }
	*($4 + [324]) = $7
	CALL $10($7)
	
.LABEL $label$9
	$7 = *($4 + [304])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [308]) = $7
	CALL $10($7)
	
.LABEL $label$10
	if ( ($8 <= [513]) ){ goto $label$11 }
	CALL $3($2)
	
.LABEL $label$11
	CALL $88(($4 + [16]))
	$2 = *($4 + [272])
	if ( ($2 == 0) ){ goto $label$12 }
	*($4 + [276]) = $2
	CALL $10($2)
	
.LABEL $label$12
	$global$0 = ($4 + [336])
	return [1]
	
.LABEL $label$5
	CALL $42(($4 + [304]))
	
.LABEL $label$4
	CALL $42(($4 + [320]))
	(unreachable)
	return (unreachable)
}

void .FUNC $73 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($5 + [16]) = [8541]
	*($5 + [20]) = CALL $1([8541])
	*($5 + [8]) = *($5 + [16])
	CALL require_auth(*(CALL $52(($5 + [24]), ($5 + [8]))))
	CALL $106($0, ($0 + [192]), $1)
	$global$0 = ($5 + [32])
}

int_32 .FUNC $70 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [248]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9976])
	
.LABEL $label$5
	CALL memcpy(($4 + [248]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = $3
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [128])) = $0
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*($4 + [240]) = $1
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [248])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $3($2)
	
.LABEL $label$7
	CALL $88(($4 + [8]))
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [8]) = [8541]
	*($2 + [12]) = CALL $1([8541])
	*($2) = *($2 + [8])
	CALL require_auth(*(CALL $52(($2 + [16]), $2)))
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)*($1 + [4])) ){ goto $label$1 }
	$4 = ($0 + [112])
	$5 = ($0 + [140])
	$6 = ($0 + [136])
	$7 = ($0 + [120])
	$8 = ($1 + [4])
	
.LOOP $label$2:
	$9 = *($3)
	$1 = *($5)
	$10 = *($6)
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$7:
	$0 = ($1 + [-24])
	$11 = *($0)
	if ( ((int_64)*($11) == (int_64)$9) ){ goto $label$6 }
	$1 = $0
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$5 }
	if ( ((int_32)*(($11 + [100])) == (int_32)$4) ){ goto $label$8 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$8
	if ( $11 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$11 = [0]
	$0 = CALL db_find_i64(*($4), *($7), (int_64)-8272420483699965952, $9)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	$11 = CALL $112($4, $0)
	if ( ((int_32)*($11 + [100]) == (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert([0], [9148])
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert([0], [9759])
	CALL eosio_assert([0], [9793])
	
.LABEL $label$3
	$0 = CALL db_next_i64(*($11 + [104]), ($2 + [24]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$9 }
	CALL $112($4, $0)
	
.LABEL $label$9
	CALL $113($4, $11)
	$3 = ($3 + [8])
	if ( ((int_32)$3 != (int_32)*($8)) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $76 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [416])
	$global$0 = $3
	*(($4 = $3) + [360]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [280]) + [24])) = (int_64)0
	*(($4 + [312])) = (int_64)0
	*((($4 + [280]) + [48])) = (int_64)0
	*((($4 + [280]) + [56])) = (int_64)0
	*(($4 + [352])) = [0]
	*($4 + [280]) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [268]) = $2
	*($4 + [264]) = $2
	*($4 + [272]) = ($2 + $5)
	*($4 + [400]) = ($4 + [264])
	*($4 + [24]) = ($4 + [280])
	CALL $86(($4 + [24]), ($4 + [400]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [272])
	*($4 + [8]) = *($4 + [264])
	$3 = *($3)
	*((($4 + [368]) + [8])) = $3
	*(($6 = (($4 + [384]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [384]) = $7
	*($4 + [368]) = $7
	$3 = *($6)
	*((($4 + [400]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$7 = *($4 + [384])
	*($4 + [40]) = $7
	*($4 + [400]) = $7
	*(($4 + [64])) = $0
	*((($4 + [24]) + [48])) = (int_64)-1
	*((($4 + [24]) + [56])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [184])) = $0
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $1
	*($4 + [404]) = ($4 + [360])
	*($4 + [400]) = ($4 + [24])
	CALL $87(($4 + [400]), ($4 + [280]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $3($2)
	
.LABEL $label$4
	CALL $88(($4 + [24]))
	if ( (*($4 + [344]) & [1]) ){ goto $label$13 }
	if ( (*($4 + [332]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $10(*(($4 + [352])))
	if ( ((*($4 + [332]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $10(*(($4 + [340])))
	if ( ((*($4 + [320]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( (*($4 + [320]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	$3 = *($4 + [308])
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $10(*(($4 + [328])))
	$3 = *($4 + [308])
	if ( ($3 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$6 = ($4 + [312])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$5 = ($2 + [-64])
	if ( ((*(($2 + [-48])) & [1]) == 0) ){ goto $label$17 }
	CALL $10(*(($2 + [-40])))
	
.LABEL $label$17
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$16 }
	$2 = *(($4 + [308]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $3
	
.LABEL $label$14
	*($6) = $3
	CALL $10($2)
	$2 = [1]
	if ( (*($4 + [296]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( ((*($4 + [296]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $10(*(($4 + [304])))
	
.LABEL $label$5
	$global$0 = ($4 + [416])
	return $2
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	$7 = ($global$0 - [32])
	$global$0 = $7
	*($7 + [16]) = [8541]
	*($7 + [20]) = CALL $1([8541])
	*($7 + [8]) = *($7 + [16])
	CALL require_auth(*(CALL $52(($7 + [24]), ($7 + [8]))))
	CALL require_recipient(*($2 + [16]))
	$global$0 = ($7 + [32])
}

int_32 .FUNC $74 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [384])
	$global$0 = $3
	*(($4 = $3) + [328]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [280]) + [24])) = (int_64)0
	*((($4 + [280]) + [40])) = [0]
	*($4 + [288]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [268]) = $2
	*($4 + [264]) = $2
	*($4 + [272]) = ($2 + $5)
	*($4 + [368]) = ($4 + [264])
	*($4 + [24]) = ($4 + [280])
	CALL $102(($4 + [24]), ($4 + [368]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [272])
	*($4 + [8]) = *($4 + [264])
	$3 = *($3)
	*((($4 + [336]) + [8])) = $3
	*(($6 = (($4 + [352]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [352]) = $7
	*($4 + [336]) = $7
	$3 = *($6)
	*((($4 + [368]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$7 = *($4 + [352])
	*($4 + [40]) = $7
	*($4 + [368]) = $7
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [184])) = $0
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $1
	*($4 + [372]) = ($4 + [328])
	*($4 + [368]) = ($4 + [24])
	CALL $103(($4 + [368]), ($4 + [280]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $3($2)
	
.LABEL $label$4
	CALL $88(($4 + [24]))
	if ( ((*($4 + [312]) & [1]) == 0) ){ goto $label$5 }
	CALL $10(*(($4 + [320])))
	
.LABEL $label$5
	$global$0 = ($4 + [384])
	return [1]
}

void .FUNC $75 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_64 $43
	int_32 $44
	int_64 $45
	int_32 $46
	$9 = ($global$0 - [592])
	$global$0 = $9
	*($9 + [544]) = [8541]
	*($9 + [548]) = CALL $1([8541])
	*($9 + [40]) = *($9 + [544])
	CALL require_auth(*(CALL $52(($9 + [552]), ($9 + [40]))))
	if ( ((uint_64)(CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((int_64)CALL $43() / (int_64)1000000)) / (uint_32)[60])) <= (uint_64)$1) ){ goto $label$1 }
	$10 = CALL $43()
	*(($9 + [508])) = (int_64)0
	*(($9 + [524])) = (int_64)0
	*(($9 + [532])) = (int_64)0
	*($9 + [492]) = [0]
	*($9 + [496]) = [0]
	*($9 + [500 align=4]) = (int_64)0
	*($9 + [516 align=4]) = (int_64)0
	*($9 + [480]) = ((CASTING uint_32)(uint_64 ((int_64)$10 / (int_64)1000000)) + [60])
	$4 = CALL $25(($9 + [456]), $4)
	CALL $89(($9 + [472]), $0, $1, $2, $3, $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	CALL $10(*($4 + [8]))
	
.LABEL $label$2
	$2 = *($5)
	$4 = *($5 + [4])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$11 = ($9 + [516])
	$3 = $4
	goto $label$3 
	
.LABEL $label$4
	$12 = ($0 + [72])
	$11 = (($9 + [480]) + [36])
	$13 = ($9 + [240])
	$14 = ($9 + [228])
	$15 = ($9 + [216])
	$16 = (($9 + [64]) + [80])
	$17 = (($9 + [64]) + [64])
	$18 = (($9 + [64]) + [32])
	$19 = (($9 + [64]) + [12])
	$20 = (($9 + [336]) | [1])
	$21 = ($9 + [409])
	$22 = (($9 + [376]) | [1])
	$23 = (($9 + [304]) | [1])
	$24 = (($9 + [392]) + [16])
	$25 = (($9 + [392]) + [32])
	$26 = ($25 + [24])
	$27 = ($0 + [100])
	$28 = ($0 + [96])
	$29 = (($9 + [392]) + [20])
	$30 = ($9 + [200])
	$31 = ($9 + [208])
	$32 = ($9 + [524])
	$33 = ($5 + [4])
	$34 = ($9 + [224])
	$35 = ($9 + [236])
	$36 = ($9 + [248])
	$37 = [0]
	
.LOOP $label$5:
	$2 = ($2 + ($37 << [6]))
	*((($9 + [392]) + [8])) = *(($2 + [8]))
	*($9 + [392]) = *($2)
	CALL $25($24, ($2 + [16]))
	*($26) = *(($2 + [56]))
	*(($25 + [16])) = *(($2 + [48]))
	*(($25 + [8])) = *(($2 + [40]))
	*($25) = *($2 + [32])
	$10 = *($9 + [392])
	$3 = *($27)
	$40 = *($28)
	if ( ((int_32)$40 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$10:
	$2 = ($3 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$10) ){ goto $label$9 }
	$3 = $2
	if ( ((int_32)$40 != (int_32)$2) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$40 == (int_32)$3) ){ goto $label$8 }
	if ( ((int_32)*(($4 + [100])) != (int_32)$12) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	$2 = CALL db_find_i64(*($12), *(($0 + [80])), (int_64)-8272420480284098560, $10)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$4 = CALL $90($12, $2)
	if ( ((int_32)*($4 + [100]) == (int_32)$12) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [9148])
	
.LABEL $label$6
	$10 = *($4 + [16])
	if ( ((int_64)$10 == (int_64)0) ){ goto $label$14 }
	$3 = [0]
	$40 = *([0] + [9464])
	
.LOOP $label$16:
	*((($9 + [64]) + ($2 = $3))) = *(($40 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$10 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$3 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$15 }
	$10 = ((int_64)$10 << (int_64)5)
	if ( ((int_64)$10 != (int_64)0) ){ goto $label$16 }
	
.LABEL $label$15
	*(($41 = (($9 + [304]) + [8]))) = [0]
	*($9 + [304]) = (int_64)0
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$13 }
	*($9 + [304]) = ($3 << [1])
	$40 = $23
	goto $label$12 
	
.LABEL $label$14
	*((($9 + [304]) + [8])) = [0]
	*($9 + [304]) = (int_64)0
	*($9 + [304]) = [0]
	$2 = $23
	goto $label$11 
	
.LABEL $label$13
	$39 = (($3 + [16]) & [-16])
	$40 = CALL $8($39)
	*($41) = $40
	*($9 + [304]) = ($39 | [1])
	*($9 + [308]) = $3
	
.LABEL $label$12
	$41 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$17:
	*(($40 + $2)) = *((($9 + [64]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$41 != (int_32)$2) ){ goto $label$17 }
	$2 = ($40 + $3)
	
.LABEL $label$11
	*($2) = [0]
	$2 = CALL $32(($9 + [304]), [9100])
	$3 = ($2 + [8])
	*(($39 = (($9 + [376]) + [8]))) = *($3)
	*($9 + [376]) = *($2)
	*($2) = (int_64)0
	*($3) = [0]
	if ( ((*($9 + [304]) & [1]) == 0) ){ goto $label$18 }
	CALL $10(*((($9 + [304]) + [8])))
	
.LABEL $label$18
	if ( ($4 == 0) ){ goto $label$20 }
	if ( ((int_64)*($4 + [8]) == (int_64)$1) ){ goto $label$19 }
	
.LABEL $label$20
	CALL eosio_assert([0], ( *($39) ? $22 : (*($9 + [376]) & [1]) ))
	
.LABEL $label$19
	$41 = ($4 + [32])
	$2 = ($2 & [1])
	$2 = *($24)
	$40 = ($2 & [1])
	$2 = *($4 + [32])
	$42 = uint_32($2 >> [1])
	$38 = ( *(($4 + [36])) ? $42 : $40 )
	if ( ((int_32)$38 != (int_32)( *($29) ? uint_32($2 >> [1]) : $2 )) ){ goto $label$22 }
	$2 = ( *((($9 + [392]) + [24])) ? $21 : $2 )
	$3 = ($41 + [1])
	if ( $40 ){ goto $label$23 }
	if ( ($38 == 0) ){ goto $label$21 }
	$40 = ([0] - $42)
	
.LOOP $label$24:
	if ( ((int_32)*($3) != (int_32)*($2)) ){ goto $label$22 }
	$2 = ($2 + [1])
	$3 = ($3 + [1])
	$40 = ($40 + [1])
	if ( $40 ){ goto $label$24 }
	goto $label$21 
	
.LABEL $label$23
	if ( ($38 == 0) ){ goto $label$21 }
	if ( (CALL $17(( *(($4 + [40])) ? $3 : $40 ), $2, $38) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL eosio_assert([0], ( *($39) ? $22 : (*($9 + [376]) & [1]) ))
	
.LABEL $label$21
	$3 = ($4 + [56])
	$10 = *($3)
	*($9 + [368]) = (int_64)0
	*($9 + [364]) = [0]
	CALL $91(($9 + [336]), $0, CALL $25(($9 + [320]), CALL $25(($9 + [352]), $41)))
	if ( ((*($9 + [320]) & [1]) == 0) ){ goto $label$25 }
	CALL $10(*((($9 + [320]) + [8])))
	
.LABEL $label$25
	$40 = ($4 + [48])
	$38 = (($9 + [336]) + [8])
	$43 = CALL $67(( *($38) ? $20 : (*($9 + [336]) & [1]) ), *($40), *(*($9 + [476]) + [24]), ($9 + [364]), ($9 + [368]))
	*($9 + [288]) = [8541]
	*($9 + [292]) = CALL $1([8541])
	*($9 + [32]) = *($9 + [288])
	CALL $52(($9 + [296]), ($9 + [32]))
	*($9 + [272]) = [8625]
	*($9 + [276]) = CALL $1([8625])
	*($9 + [24]) = *($9 + [272])
	CALL $52(($9 + [280]), ($9 + [24]))
	*(($42 = (($9 + [304]) + [8]))) = *($9 + [280])
	*($9 + [304]) = *($9 + [296])
	*($9 + [256]) = [9122]
	*($9 + [260]) = CALL $1([9122])
	*($9 + [16]) = *($9 + [256])
	$44 = CALL $52(($9 + [264]), ($9 + [16]))
	$2 = *($9 + [476])
	*((($9 + [64]) + [8])) = *(($2 + [8]))
	*($9 + [64]) = *($2)
	CALL $25($19, ($2 + [12]))
	*((($9 + [64]) + [24])) = *($2 + [24])
	*($18) = *($4)
	*(($18 + [8])) = *(($4 + [8]))
	*(($18 + [16])) = *(($4 + [16]))
	*(($18 + [24])) = *(($4 + [24]))
	CALL $25($17, $41)
	*(($16 + [48])) = *(($4 + [96]))
	*(($16 + [40])) = *(($4 + [88]))
	*(($16 + [32])) = *(($4 + [80]))
	*(($16 + [24])) = *(($4 + [72]))
	*(($16 + [16])) = *(($4 + [64]))
	*(($16 + [8])) = *($3)
	*($16) = *($40)
	*($30) = $43
	*($31) = $10
	CALL $25($15, $6)
	CALL $25($14, $7)
	CALL $25($13, $8)
	$3 = (($9 + [480]) + [40])
	$2 = *($3)
	if ( ((uint_32)$2 >= (uint_32)*($32)) ){ goto $label$30 }
	$45 = *($0)
	*($2 + [8]) = *($9 + [264])
	*($2) = $45
	*($2 + [16 align=4]) = (int_64)0
	$41 = [0]
	*(($44 = ($2 + [24]))) = [0]
	$40 = CALL $8([16])
	*($2 + [16]) = $40
	$46 = ($40 + [16])
	*($44) = $46
	*(($40 + [8])) = *($42)
	*($40) = *($9 + [304])
	*(($2 + [20])) = $46
	*($2 + [28 align=4]) = (int_64)0
	*(($2 + [36])) = [0]
	*($9 + [576]) = [0]
	*($9 + [584]) = ($9 + [576])
	*($9 + [560]) = ($9 + [64])
	CALL $92(($9 + [560]), ($9 + [584]))
	$40 = *($9 + [576])
	if ( ($40 == 0) ){ goto $label$29 }
	$42 = ($2 + [28])
	CALL $59($42, $40)
	$41 = *(($2 + [32]))
	$2 = *($42)
	goto $label$28 
	
.LABEL $label$30
	CALL $93($11, ($9 + [304]), $0, $44, ($9 + [64]))
	if ( (*($13) & [1]) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$2 = [0]
	
.LABEL $label$28
	*((($9 + [560]) + [8])) = $41
	*($9 + [564]) = $2
	*($9 + [560]) = $2
	*($9 + [576]) = ($9 + [560])
	*($9 + [584]) = ($9 + [64])
	CALL $94(($9 + [584]), ($9 + [576]))
	*($3) = (*($3) + [40])
	if ( ((*($13) & [1]) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL $10(*($36))
	
.LABEL $label$26
	if ( ((*($14) & [1]) == 0) ){ goto $label$37 }
	CALL $10(*($35))
	if ( ((*($15) & [1]) == 0) ){ goto $label$35 }
	goto $label$36 
	
.LABEL $label$37
	if ( ((*($15) & [1]) == 0) ){ goto $label$35 }
	
.LABEL $label$36
	CALL $10(*($34))
	if ( ((*($17) & [1]) == 0) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	if ( ((*($17) & [1]) == 0) ){ goto $label$33 }
	
.LABEL $label$34
	CALL $10(*((($9 + [64]) + [72])))
	if ( (*($19) & [1]) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	if ( ((*($19) & [1]) == 0) ){ goto $label$31 }
	
.LABEL $label$32
	CALL $10(*((($9 + [64]) + [20])))
	
.LABEL $label$31
	CALL $95($0, ($9 + [480]), $4, *((($9 + [392]) + [56])))
	*((($9 + [48]) + [8])) = $10
	*(($9 + [8])) = $10
	*($9 + [48]) = $43
	*($9) = $43
	CALL $96($0, *($9 + [476]), $4, ($9 + [392]), $9)
	if ( $4 ){ goto $label$38 }
	CALL eosio_assert([0], [9759])
	CALL eosio_assert([0], [9793])
	
.LABEL $label$38
	$2 = CALL db_next_i64(*($4 + [104]), ($9 + [64]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$39 }
	CALL $90($12, $2)
	
.LABEL $label$39
	CALL $97($12, $4)
	if ( ((*($9 + [336]) & [1]) == 0) ){ goto $label$46 }
	CALL $10(*($38))
	if ( ((*($9 + [352]) & [1]) == 0) ){ goto $label$44 }
	goto $label$45 
	
.LABEL $label$46
	if ( ((*($9 + [352]) & [1]) == 0) ){ goto $label$44 }
	
.LABEL $label$45
	CALL $10(*((($9 + [352]) + [8])))
	if ( ((*($9 + [376]) & [1]) == 0) ){ goto $label$42 }
	goto $label$43 
	
.LABEL $label$44
	if ( ((*($9 + [376]) & [1]) == 0) ){ goto $label$42 }
	
.LABEL $label$43
	CALL $10(*($39))
	if ( (*($24) & [1]) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	if ( ((*($24) & [1]) == 0) ){ goto $label$40 }
	
.LABEL $label$41
	CALL $10(*((($9 + [392]) + [24])))
	
.LABEL $label$40
	$2 = *($5)
	$3 = *($33)
	$37 = ($37 + [1])
	if ( ($37 <= int_32(($3 - $2) >> [6])) ){ goto $label$5 }
	$4 = $2
	
.LABEL $label$3
	if ( ((int_32)*(($9 + [520])) == (int_32)*($11)) ){ goto $label$47 }
	$10 = CALL $98($0)
	*($9 + [72]) = (int_64)0
	*($9 + [64]) = $10
	CALL $99(($9 + [480]), ($9 + [64]), *($0), [0])
	$3 = *(($5 + [4]))
	$4 = *($5)
	
.LABEL $label$47
	CALL $100($0, $1, (int_32(($3 - $4) >> [6]) + [8]))
	CALL $101(($9 + [480]))
	
.LABEL $label$1
	$global$0 = ($9 + [592])
}

int_32 .FUNC $78 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [528])
	$global$0 = $3
	*(($4 = $3) + [472]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [280]) + [8])) = (int_64)0
	*((($4 + [280]) + [24])) = (int_64)0
	*(($4 + [296])) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [292]) = [0]
	CALL memset(($4 + [312]), [0], [104])
	*((($4 + [280]) + [56])) = (int_64)0
	*((($4 + [280]) + [48])) = (int_64)0
	*((($4 + [280]) + [64])) = (int_64)0
	*(($4 + [352])) = [0]
	*((($4 + [280]) + [80])) = (int_64)0
	*((($4 + [280]) + [88])) = (int_64)0
	*((($4 + [280]) + [96])) = (int_64)0
	*((($4 + [280]) + [104])) = (int_64)0
	*(($4 + [392])) = (int_64)0
	*((($4 + [280]) + [144])) = (int_64)0
	*((($4 + [280]) + [160])) = (int_64)0
	*((($4 + [280]) + [168])) = (int_64)0
	*((($4 + [280]) + [184])) = [0]
	*($4 + [416]) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [456]) = (int_64)0
	*($4 + [268]) = $2
	*($4 + [264]) = $2
	*($4 + [272]) = ($2 + $5)
	*($4 + [512]) = ($4 + [264])
	*($4 + [24]) = ($4 + [280])
	CALL $107(($4 + [24]), ($4 + [512]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [272])
	*($4 + [8]) = *($4 + [264])
	$3 = *($3)
	*((($4 + [480]) + [8])) = $3
	*(($6 = (($4 + [496]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [496]) = $7
	*($4 + [480]) = $7
	$3 = *($6)
	*((($4 + [512]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$7 = *($4 + [496])
	*($4 + [40]) = $7
	*($4 + [512]) = $7
	*(($4 + [64])) = $0
	*((($4 + [24]) + [48])) = (int_64)-1
	*((($4 + [24]) + [56])) = (int_64)0
	*((($4 + [24]) + [64])) = [0]
	*((($4 + [24]) + [80])) = $0
	*((($4 + [24]) + [88])) = (int_64)-1
	*((($4 + [24]) + [96])) = (int_64)0
	*((($4 + [24]) + [104])) = [0]
	*(($4 + [132])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*((($4 + [24]) + [144])) = [0]
	*(($4 + [172])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*((($4 + [24]) + [168])) = (int_64)-1
	*((($4 + [24]) + [160])) = $0
	*(($4 + [200])) = (int_64)0
	*((($4 + [24]) + [184])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $1
	*($4 + [516]) = ($4 + [472])
	*($4 + [512]) = ($4 + [24])
	CALL $108(($4 + [512]), ($4 + [280]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $3($2)
	
.LABEL $label$4
	CALL $88(($4 + [24]))
	if ( (*($4 + [456]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [444]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $10(*(($4 + [464])))
	if ( ((*($4 + [444]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $10(*(($4 + [452])))
	$2 = [1]
	if ( (*($4 + [432]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( ((*($4 + [432]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $10(*(($4 + [440])))
	
.LABEL $label$5
	if ( (*(($4 + [344])) & $2) ){ goto $label$12 }
	$2 = [1]
	if ( (*($4 + [292]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $10(*(($4 + [352])))
	$2 = [1]
	if ( ((*($4 + [292]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $10(*(($4 + [300])))
	$global$0 = ($4 + [528])
	return $2
	
.LABEL $label$10
	$global$0 = ($4 + [528])
	return $2
}

void .FUNC $79 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [8]) = [8541]
	*($4 + [12]) = CALL $1([8541])
	*($4) = *($4 + [8])
	CALL require_auth(*(CALL $52(($4 + [16]), $4)))
	$5 = CALL db_lowerbound_i64(*($0 + [152]), *(($0 + [160])), (int_64)-8272133493090156544, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = ($0 + [152])
	$5 = CALL $110($6, $5)
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ($3 == 0) ){ goto $label$2 }
	$7 = (int_64)1
	
.LOOP $label$3:
	CALL $100($0, *($5), [64])
	if ( $5 ){ goto $label$4 }
	CALL eosio_assert([0], [9759])
	CALL eosio_assert([0], [9793])
	
.LABEL $label$4
	$8 = [0]
	$9 = CALL db_next_i64(*($5 + [32]), ($4 + [24]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $110($6, $9)
	
.LABEL $label$5
	CALL $111($6, $5)
	if ( ($8 == 0) ){ goto $label$1 }
	$9 = (uint_64)($7 <= $1)
	$7 = ((int_64)$7 + (int_64)1)
	$5 = $8
	if ( $9 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)1
	
.LOOP $label$6:
	CALL $100($0, *($5), [64])
	if ( ((int_32)*($5 + [24]) == (int_32)[-1]) ){ goto $label$8 }
	if ( $5 ){ goto $label$9 }
	CALL eosio_assert([0], [9759])
	CALL eosio_assert([0], [9793])
	
.LABEL $label$9
	$8 = [0]
	$9 = CALL db_next_i64(*($5 + [32]), ($4 + [24]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $110($6, $9)
	
.LABEL $label$10
	CALL $111($6, $5)
	$5 = $8
	if ( $5 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$8
	$8 = *($5 + [32])
	$5 = [0]
	$8 = CALL db_next_i64($8, ($4 + [24]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$11 }
	$5 = CALL $110($6, $8)
	
.LABEL $label$11
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$7
	$8 = (uint_64)($7 <= $1)
	$7 = ((int_64)$7 + (int_64)1)
	if ( $8 ){ goto $label$6 }
	
.LABEL $label$1
	$5 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)-8272420480284098560, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	$6 = ($0 + [72])
	$8 = CALL $90($6, $5)
	if ( ($3 == 0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = [0]
	$9 = CALL db_next_i64(*($8 + [104]), ($4 + [24]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$14 }
	$5 = CALL $90($6, $9)
	
.LABEL $label$14
	CALL $97($6, $8)
	$8 = $5
	if ( $5 ){ goto $label$13 }
	
.LABEL $label$12
	$5 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)-8272420483699965952, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$15 }
	$6 = ($0 + [112])
	$8 = CALL $112($6, $5)
	if ( (int_64)($2 == 0) ){ goto $label$15 }
	$7 = (int_64)1
	
.LOOP $label$16:
	$5 = [0]
	$0 = CALL db_next_i64(*($8 + [104]), ($4 + [24]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$17 }
	$5 = CALL $112($6, $0)
	
.LABEL $label$17
	CALL $113($6, $8)
	if ( ($5 == 0) ){ goto $label$15 }
	$0 = (uint_64)($7 <= $2)
	$7 = ((int_64)$7 + (int_64)1)
	$8 = $5
	if ( $0 ){ goto $label$16 }
	
.LABEL $label$15
	$global$0 = ($4 + [32])
}

int_64 .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$1 = ($global$0 - [48])
	$global$0 = $1
	*($1 + [32]) = [9971]
	*($1 + [36]) = CALL $1([9971])
	*($1 + [8]) = *($1 + [32])
	$2 = ($0 + [32])
	$3 = *(CALL $52(($1 + [40]), ($1 + [8])))
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$5 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	if ( ((int_32)*($7 + [16]) == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert([0], [9148])
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($2), *(($0 + [40])), (int_64)7235159537265672192, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $151($2, $6)
	if ( ((int_32)*($7 + [16]) == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$3
	$3 = ((int_64)*($7 + [8]) + (int_64)1)
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)1
	
.LABEL $label$1
	$8 = *($0)
	*($1 + [16]) = [9971]
	*($1 + [20]) = CALL $1([9971])
	*($1) = *($1 + [16])
	CALL $114($0, $2, $8, *(CALL $52(($1 + [24]), $1)), $3)
	$global$0 = ($1 + [48])
	return $3
}

void .FUNC $99 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = [0]
	CALL $149(($4 + [16]), $0)
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $59($4, $6)
	$5 = *($4 + [4])
	$6 = *($4)
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $6
	*($4 + [16]) = $6
	*($4 + [24]) = $5
	CALL $150(($4 + [16]), $0)
	$0 = *($4)
	CALL send_deferred($1, $2, $0, (*($4 + [4]) - $0), $3)
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$3 }
	*($4 + [4]) = $0
	CALL $10($0)
	
.LABEL $label$3
	$global$0 = ($4 + [32])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0)
	*($2) = *($1)
	*($2 + [12]) = ($3 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = ($3 + [12])
	*($2 + [20]) = ($3 + [24])
	CALL $156(($2 + [8]), $2)
	$3 = *($0)
	*($2) = *($1)
	*($2 + [12]) = ($3 + [40])
	*($2 + [8]) = ($3 + [32])
	*($2 + [16]) = ($3 + [48])
	*($2 + [20]) = ($3 + [56])
	*($2 + [24]) = ($3 + [64])
	*($2 + [28]) = ($3 + [80])
	*($2 + [32]) = ($3 + [96])
	*($2 + [36]) = ($3 + [104])
	*($2 + [40]) = ($3 + [120])
	*($2 + [44]) = ($3 + [128])
	$4 = ($3 + [136])
	CALL $159(($2 + [8]), $2)
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9094])
	$5 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $4, [8])
	$4 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $4
	*($2 + [8]) = *(($3 + [144]))
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9094])
	$4 = *($5)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	CALL $157(*($1), ($3 + [152]))
	CALL $157(*($1), ($3 + [164]))
	CALL $157(*($1), ($3 + [176]))
	$global$0 = ($2 + [48])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [192])
	$global$0 = $4
	if ( *($2 + [96]) ){ goto $label$1 }
	CALL $120(($4 + [128]), $0, $2)
	$5 = CALL $32(($4 + [128]), [9520])
	$6 = ($5 + [8])
	*((($4 + [24]) + [8])) = *($6)
	*($4 + [24]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	CALL $41(($4 + [160]), $3)
	$5 = *($4 + [160])
	$6 = ($5 & [1])
	$5 = CALL $34(($4 + [24]), ( *($4 + [168]) ? (($4 + [160]) | [1]) : $6 ), ( *($4 + [164]) ? uint_32($5 >> [1]) : $6 ))
	$6 = ($5 + [8])
	*((($4 + [144]) + [8])) = *($6)
	*($4 + [144]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	if ( (*($4 + [160]) & [1]) ){ goto $label$6 }
	if ( (*($4 + [24]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $10(*((($4 + [160]) + [8])))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $10(*($4 + [32]))
	if ( (*($4 + [128]) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($4 + [136]))
	
.LABEL $label$2
	$7 = *($0)
	*($4 + [112]) = [8625]
	*($4 + [116]) = CALL $1([8625])
	*($4 + [16]) = *($4 + [112])
	$5 = CALL $52(($4 + [120]), ($4 + [16]))
	*($4 + [128]) = $7
	*($4 + [136]) = *($5)
	*($4 + [96]) = [8261]
	*($4 + [100]) = CALL $1([8261])
	*($4 + [8]) = *($4 + [96])
	$5 = CALL $52(($4 + [104]), ($4 + [8]))
	*($4 + [80]) = [9527]
	*($4 + [84]) = CALL $1([9527])
	*($4) = *($4 + [80])
	$6 = CALL $52(($4 + [88]), $4)
	*((($4 + [24]) + [24])) = *(($2 + [56]))
	*($4 + [24]) = *($0)
	*($4 + [32]) = *($2 + [16])
	*($4 + [40]) = *($2 + [48])
	$8 = CALL $25(($4 + [56]), ($4 + [144]))
	*($4 + [72]) = $3
	$0 = *(($1 + [40]))
	if ( ((uint_32)$0 >= (uint_32)*(($1 + [44]))) ){ goto $label$11 }
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [8]) = *($6)
	*($0) = *($5)
	*(($5 = ($0 + [24]))) = [0]
	$2 = CALL $8([16])
	*($0 + [16]) = $2
	$6 = ($2 + [16])
	*($5) = $6
	*(($2 + [8])) = *((($4 + [128]) + [8]))
	*($2) = *($4 + [128])
	*(($0 + [20])) = $6
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$2 = *($8)
	$5 = ( *((($4 + [24]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($5 + [40])
	$3 = (CASTING uint_64)(uint_32 $5)
	$5 = ($0 + [28])
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $59($5, $2)
	$5 = *(($0 + [32]))
	$2 = *(($0 + [28]))
	goto $label$9 
	
.LABEL $label$11
	CALL $143(($1 + [36]), ($4 + [128]), $5, $6, ($4 + [24]))
	$2 = [1]
	if ( (*($4 + [56]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$5 = [0]
	$2 = [0]
	
.LABEL $label$9
	*($4 + [164]) = $2
	*($4 + [160]) = $2
	*($4 + [168]) = $5
	*($4 + [176]) = ($4 + [160])
	*($4 + [184]) = ($4 + [24])
	CALL $144(($4 + [184]), ($4 + [176]))
	*(($2 = ($1 + [40]))) = (*($2) + [40])
	$2 = [1]
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $10(*(($4 + [64])))
	
.LABEL $label$7
	if ( ((*($4 + [144]) & $2) == 0) ){ goto $label$1 }
	CALL $10(*($4 + [152]))
	
.LABEL $label$1
	$global$0 = ($4 + [192])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	float_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$5 = ($global$0 - [288])
	$global$0 = $5
	*(($6 = ($5 + [208]))) = *(($2 + [56]))
	$7 = ((float_64)((float_64)((float_64)(CASTING float_64)(int_64 *($2 + [48])) * (float_64)(float_64)0.019000000000000017) * (float_64)(CASTING float_64)(uint_64 *($3 + [32]))) / (float_64)(float_64)1e3)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$8 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$8 = (Rounds 0)($7)
	
.LABEL $label$1
	$8 = ( (int_64)0 ? $8 : *($2 + [96]) )
	*($5 + [200]) = $8
	$9 = *($2 + [24])
	*($5 + [184]) = [8541]
	*($5 + [188]) = CALL $1([8541])
	*($5 + [64]) = *($5 + [184])
	$10 = CALL $52(($5 + [192]), ($5 + [64]))
	$11 = *($2 + [16])
	$12 = *($6)
	if ( ((int_64)*($4 + [8]) == (int_64)$12) ){ goto $label$3 }
	CALL eosio_assert([0], [8971])
	
.LABEL $label$3
	$8 = ((int_64)*($4) + (int_64)$8)
	if ( ((int_64)$8 <= (int_64)-4611686018427387904) ){ goto $label$5 }
	if ( ((int_64)$8 < (int_64)4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [9033])
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [9014])
	
.LABEL $label$4
	$13 = ($0 + [192])
	$14 = *(($4 + [8]))
	*((($5 + [152]) + [8])) = $14
	$15 = *((($5 + [200]) + [8]))
	*((($5 + [136]) + [8])) = $15
	$16 = *($4)
	*((($5 + [48]) + [8])) = $14
	*((($5 + [32]) + [8])) = $15
	$14 = *($5 + [200])
	*($5 + [136]) = $14
	*($5 + [152]) = $16
	*($5 + [48]) = $16
	*($5 + [32]) = $14
	CALL $145(($5 + [168]), $0, $1, $2, ($5 + [48]), ($5 + [32]))
	$16 = *($10)
	*($5 + [224]) = $12
	*($5 + [280]) = $9
	*($5 + [272]) = $16
	*($5 + [264]) = $11
	*($5 + [216]) = $8
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$6 }
	if ( (CALL is_account($11) == 0) ){ goto $label$6 }
	if ( (CALL is_account($16) == 0) ){ goto $label$6 }
	*($5 + [240]) = $13
	*($5 + [244]) = ($5 + [280])
	*($5 + [248]) = ($5 + [272])
	*($5 + [252]) = ($5 + [264])
	*($5 + [256]) = ($5 + [216])
	*($5 + [260]) = ($5 + [168])
	CALL $146(($5 + [232]), $13, $16, ($5 + [240]))
	
.LABEL $label$6
	if ( ((*($5 + [168]) & [1]) == 0) ){ goto $label$7 }
	CALL $10(*($5 + [176]))
	
.LABEL $label$7
	$8 = *($0)
	*($5 + [240]) = $2
	*($5 + [248]) = $4
	*($5 + [244]) = ($5 + [200])
	CALL $147(($5 + [216]), ($0 + [112]), $8, ($5 + [240]))
	$4 = *(($2 + [96]))
	$7 = ((float_64)((float_64)((float_64)(CASTING float_64)(int_64 *(($2 + [48]))) * (float_64)(float_64)0.019000000000000017) * (float_64)(CASTING float_64)(uint_64 *($3 + [48]))) / (float_64)(float_64)1e3)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$9 }
	$8 = (int_64)-9223372036854775808
	goto $label$8 
	
.LABEL $label$9
	$8 = (Rounds 0)($7)
	
.LABEL $label$8
	*($5 + [200]) = ( (int_64)0 ? $8 : $4 )
	$11 = *(($2 + [24]))
	*($5 + [120]) = [8541]
	*($5 + [124]) = CALL $1([8541])
	*($5 + [24]) = *($5 + [120])
	$4 = CALL $52(($5 + [128]), ($5 + [24]))
	$8 = *((($5 + [200]) + [8]))
	*(($6 = (($5 + [104]) + [8]))) = $8
	*((($5 + [72]) + [8])) = $8
	$16 = *($3 + [40])
	*((($5 + [8]) + [8])) = $8
	$8 = *($5 + [200])
	*($5 + [104]) = $8
	*($5 + [72]) = $8
	*($5 + [8]) = $8
	CALL $148(($5 + [88]), $0, $1, $2, ($5 + [8]))
	$8 = *($4)
	*((($5 + [216]) + [8])) = *($6)
	*($5 + [280]) = $11
	*($5 + [272]) = $8
	*($5 + [264]) = $16
	$11 = *($5 + [104])
	*($5 + [216]) = $11
	if ( ((int_64)$11 < (int_64)1) ){ goto $label$10 }
	if ( (CALL is_account($16) == 0) ){ goto $label$10 }
	if ( (CALL is_account($8) == 0) ){ goto $label$10 }
	*($5 + [240]) = $13
	*($5 + [244]) = ($5 + [280])
	*($5 + [248]) = ($5 + [272])
	*($5 + [252]) = ($5 + [264])
	*($5 + [256]) = ($5 + [216])
	*($5 + [260]) = ($5 + [88])
	CALL $146(($5 + [232]), $13, $8, ($5 + [240]))
	
.LABEL $label$10
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$11 }
	CALL $10(*($5 + [96]))
	
.LABEL $label$11
	$global$0 = ($5 + [288])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*(($1 + [100])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9823])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9868])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [9918])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL $10(*(($6 + [40])))
	
.LABEL $label$13
	CALL $10($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$15 }
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$16 }
	CALL $10(*(($9 + [40])))
	
.LABEL $label$16
	CALL $10($9)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [104]))
	$9 = *($1 + [108])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8272420480284098560, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($9)
	
.LABEL $label$17
	$9 = *(($1 + [112]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$20 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8272420480284098559, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL db_idx64_remove($9)
	
.LABEL $label$19
	$global$0 = ($2 + [16])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9199])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $8([120])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [100]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [72])
	*($3 + [72]) = ($5 + [88])
	*($3 + [76]) = ($5 + [96])
	CALL $133(($3 + [40]), ($3 + [32]))
	*($5 + [104]) = $1
	*($5 + [108 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $158(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $10(*(($1 + [40])))
	
.LABEL $label$11
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	$4 = CALL $1([9501])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [9501], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	*($3 + [15]) = [45]
	*($3) = [0]
	*($3 + [14]) = [1]
	$4 = CALL $63($2, ($3 + [16]), ($3 + [15]), $3, ($3 + [14]))
	*($3 + [28]) = $4
	$5 = *($3 + [16])
	$6 = CALL $1([9502])
	if ( ((int_32)$6 != (int_32)( *($3 + [20]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$7 }
	if ( (CALL $39(($3 + [16]), [0], [-1], [9502], $6) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = *($3 + [16])
	$6 = CALL $1([9507])
	if ( ((int_32)$6 != (int_32)( *($3 + [20]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$5 }
	if ( CALL $39(($3 + [16]), [0], [-1], [9507], $6) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $33($0, *(( *(($3 + [24])) ? (($3 + [16]) | [1]) : (*($3 + [16]) & [1]) )))
	CALL $33($0, [44])
	
.LABEL $label$5
	*($3) = [45]
	*($3 + [28]) = ($4 + [1])
	*($3 + [15]) = [1]
	$5 = CALL $63($2, ($3 + [16]), $3, ($3 + [28]), ($3 + [15]))
	*($3 + [28]) = $5
	$4 = *($3 + [16])
	$6 = CALL $1([9511])
	if ( ((int_32)$6 != (int_32)( *($3 + [20]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$10 }
	if ( (CALL $39(($3 + [16]), [0], [-1], [9511], $6) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$4 = *($3 + [16])
	$6 = CALL $1([9515])
	if ( ((int_32)$6 != (int_32)( *($3 + [20]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$8 }
	if ( CALL $39(($3 + [16]), [0], [-1], [9515], $6) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $33($0, *(( *(($3 + [24])) ? (($3 + [16]) | [1]) : (*($3 + [16]) & [1]) )))
	CALL $33($0, [44])
	
.LABEL $label$8
	$7 = (($3 + [16]) | [1])
	$4 = [6]
	$8 = [0]
	
.LOOP $label$11:
	if ( ((int_32)$4 != (int_32)[2]) ){ goto $label$15 }
	$5 = ($5 + [1])
	*($3 + [28]) = $5
	CALL $26($3, $2, $5, [-1], $2)
	if ( (*($3 + [16]) & [1]) ){ goto $label$14 }
	*($3 + [16]) = [0]
	goto $label$13 
	
.LABEL $label$15
	*($3) = [45]
	*($3 + [28]) = ($5 + [1])
	*($3 + [15]) = [1]
	$5 = CALL $63($2, ($3 + [16]), $3, ($3 + [28]), ($3 + [15]))
	*($3 + [28]) = $5
	goto $label$12 
	
.LABEL $label$14
	*(*((($3 + [16]) + [8]))) = [0]
	*($3 + [20]) = [0]
	
.LABEL $label$13
	CALL $29(($3 + [16]), [0])
	*((($3 + [16]) + [8])) = *(($3 + [8]))
	*($3 + [16]) = *($3)
	
.LABEL $label$12
	$6 = ($6 & [1])
	$6 = *($3 + [16])
	$10 = uint_32($6 >> [1])
	$9 = *($3 + [20])
	if ( (( $9 ? $10 : $6 ) <= [3]) ){ goto $label$16 }
	if ( ($8 == 0) ){ goto $label$17 }
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$17 }
	CALL eosio_assert([0], [8738])
	$6 = *($3 + [16])
	$10 = uint_32($6 >> [1])
	$6 = ($6 & [1])
	$9 = *($3 + [20])
	
.LABEL $label$17
	$8 = ($4 + [-1])
	CALL $34($0, ( *((($3 + [16]) + [8])) ? $7 : $6 ), ( $9 ? $10 : $6 ))
	
.LABEL $label$16
	$4 = ($4 + [-1])
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$11 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$18 }
	CALL $10(*(($3 + [24])))
	
.LABEL $label$18
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $24($0)
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = (*($2) + [12])
	*(($2 = *($1))) = $1
	$3 = *($0 + [12])
	$0 = *($0)
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [16])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *(($0 + [12]))
	$3 = ( *(($0 + [16])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [36])
	*($2) = $1
	$3 = *(($0 + [64]))
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *(($0 + [64]))
	$3 = ( *(($0 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$1 = ($1 + [65])
	*($2) = $1
	$3 = *($0 + [152])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [156])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$3 = *(($0 + [152]))
	$3 = ( *(($0 + [156])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$6
	$3 = *($0 + [164])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [168])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$7 }
	*($2) = $1
	$3 = *(($0 + [164]))
	$3 = ( *(($0 + [168])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$8 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$8
	$3 = *($0 + [176])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [180])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$9:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$9 }
	*($2) = $1
	$0 = *(($0 + [176]))
	$0 = ( *(($0 + [180])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$10 }
	*($2) = ($0 + $1)
	
.LABEL $label$10
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $8(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	$3 = [0]
	*(($8 = ($7 + [24]))) = [0]
	$2 = CALL $8([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$10 = ($2 + [16])
	*($8) = $10
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $10
	*($5 + [16]) = [0]
	*($5 + [24]) = ($5 + [16])
	*($5) = $4
	$9 = ((int_32)$9 * (int_32)[40])
	CALL $92($5, ($5 + [24]))
	$2 = *($5 + [16])
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = ($7 + [28])
	CALL $59($1, $2)
	$3 = *(($7 + [32]))
	$2 = *($1)
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	
.LABEL $label$5
	$11 = ($6 + $9)
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $3
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $94(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$8 }
	$10 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$9:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($4 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($9 + [-24])
	*($4) = *($3)
	$4 = ($9 + [-16])
	*($6) = *($4)
	*($4) = [0]
	*(($4 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($9 + [-12])
	*($4) = *($6)
	*($3) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($6) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$9 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$4 = $2
	
.LABEL $label$7
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$12 }
	*(($2 + [-8])) = $9
	CALL $10($9)
	
.LABEL $label$12
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$13 }
	*(($2 + [-20])) = $1
	CALL $10($1)
	
.LABEL $label$13
	$2 = $9
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($4 == 0) ){ goto $label$14 }
	CALL $10($4)
	
.LABEL $label$14
	$global$0 = ($5 + [32])
	(unreachable)
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9094])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9094])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9094])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9094])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9094])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $130 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [416])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [356]) = $2
	*($3 + [352]) = $2
	$5 = ($2 + $4)
	*($3 + [360]) = $5
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9976])
	$5 = *(($3 + [360]))
	$2 = *($3 + [356])
	
.LABEL $label$5
	CALL memcpy(($3 + [344]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [356]) = $2
	*($3 + [336]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9976])
	$5 = *((($3 + [352]) + [8]))
	$2 = *($3 + [356])
	
.LABEL $label$6
	CALL memcpy(($3 + [336]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [356]) = $2
	*($3 + [328]) = (int_64)0
	*($3 + [320]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9976])
	$5 = *(($3 + [360]))
	$2 = *($3 + [356])
	
.LABEL $label$7
	CALL memcpy(($3 + [320]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [356]) = $2
	*($3 + [64]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9976])
	$2 = *($3 + [356])
	
.LABEL $label$8
	CALL memcpy(($3 + [64]), $2, [8])
	*(($5 = (($3 + [320]) + [8]))) = *($3 + [64])
	*($3 + [356]) = ($2 + [8])
	*($3 + [312]) = [0]
	*($3 + [304]) = (int_64)0
	CALL $124(($3 + [352]), ($3 + [304]))
	*(($2 = (($3 + [48]) + [8]))) = *((($3 + [352]) + [8]))
	*($3 + [48]) = *($3 + [352])
	$2 = *($2)
	*((($3 + [368]) + [8])) = $2
	*(($4 = (($3 + [384]) + [8]))) = $2
	$6 = *($3 + [48])
	*($3 + [384]) = $6
	*($3 + [368]) = $6
	$2 = *($4)
	*((($3 + [400]) + [8])) = $2
	*(($3 + [88])) = $2
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$6 = *($3 + [384])
	*($3 + [80]) = $6
	*($3 + [400]) = $6
	*(($3 + [104])) = $0
	*(($3 + [112])) = (int_64)-1
	*(($3 + [120])) = (int_64)0
	*(($3 + [128])) = [0]
	*(($3 + [144])) = $0
	*(($3 + [152])) = (int_64)-1
	*(($3 + [160])) = (int_64)0
	*(($3 + [168])) = [0]
	*(($3 + [172])) = [0]
	*(($3 + [184])) = $0
	*(($3 + [192])) = (int_64)-1
	*(($3 + [200])) = (int_64)0
	*(($3 + [208])) = [0]
	*(($3 + [212])) = [0]
	*($3 + [96]) = $0
	*($3 + [136]) = $0
	*($3 + [176]) = $0
	*($3 + [216]) = $0
	*(($3 + [232])) = (int_64)-1
	*(($3 + [224])) = $0
	*(($3 + [240])) = (int_64)0
	*(($3 + [248])) = [0]
	*(($3 + [264])) = $0
	*(($3 + [272])) = (int_64)-1
	*(($3 + [280])) = (int_64)0
	*(($3 + [288])) = [0]
	*($3 + [256]) = $0
	*($3 + [296]) = $1
	*(($4 = (($3 + [32]) + [8]))) = *($5)
	*($3 + [32]) = *($3 + [320])
	$0 = *($3 + [336])
	$1 = *($3 + [344])
	$2 = CALL $25(($3 + [16]), ($3 + [304]))
	*(($3 + [8])) = *($4)
	*($3) = *($3 + [32])
	CALL $83(($3 + [64]), $1, $0, $3, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*($2 + [8]))
	
.LABEL $label$9
	CALL $88(($3 + [64]))
	if ( ((*($3 + [304]) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($3 + [312])))
	
.LABEL $label$10
	$global$0 = ($3 + [416])
}

void .FUNC $131 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [576])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [516]) = $4
	*($3 + [512]) = $4
	*($3 + [520]) = ($4 + $5)
	*(($3 + [500])) = [0]
	*($3 + [492 align=4]) = (int_64)0
	*($3 + [376]) = ($3 + [512])
	*($3 + [76]) = (($3 + [480]) + [8])
	*($3 + [80]) = ($3 + [492])
	*($3 + [84]) = (($3 + [480]) + [24])
	*($3 + [72]) = ($3 + [480])
	CALL $132(($3 + [72]), ($3 + [376]))
	*(($3 + [416])) = [0]
	*(($3 + [432])) = (int_64)0
	*(($3 + [456])) = (int_64)0
	*($3 + [400]) = (int_64)0
	*($3 + [392]) = (int_64)0
	*($3 + [408]) = (int_64)0
	*($3 + [424]) = (int_64)0
	*($3 + [440]) = (int_64)0
	*($3 + [448]) = (int_64)0
	*($3 + [360]) = ($3 + [512])
	*($3 + [76]) = (($3 + [376]) + [8])
	*($3 + [80]) = ($3 + [392])
	*($3 + [84]) = (($3 + [376]) + [24])
	*($3 + [88]) = ($3 + [408])
	*($3 + [92]) = ($3 + [424])
	*($3 + [96]) = ($3 + [440])
	*($3 + [100]) = ($3 + [448])
	*($3 + [104]) = ($3 + [464])
	*($3 + [108]) = ($3 + [472])
	*($3 + [72]) = ($3 + [376])
	CALL $133(($3 + [72]), ($3 + [360]))
	*($3 + [368]) = (int_64)0
	*($3 + [360]) = (int_64)0
	$4 = *($3 + [516])
	if ( ((uint_32)(*($3 + [520]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9976])
	$4 = *($3 + [516])
	
.LABEL $label$4
	CALL memcpy(($3 + [360]), $4, [8])
	$4 = (*($3 + [516]) + [8])
	*($3 + [516]) = $4
	*($3 + [72]) = (int_64)0
	if ( ((uint_32)(*((($3 + [512]) + [8])) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9976])
	$4 = *($3 + [516])
	
.LABEL $label$5
	CALL memcpy(($3 + [72]), $4, [8])
	*((($3 + [360]) + [8])) = *($3 + [72])
	*($3 + [516]) = (*($3 + [516]) + [8])
	*($3 + [352]) = [0]
	*($3 + [344]) = (int_64)0
	CALL $124(($3 + [512]), ($3 + [344]))
	*($3 + [336]) = [0]
	*($3 + [328]) = (int_64)0
	CALL $124(($3 + [512]), ($3 + [328]))
	*($3 + [320]) = [0]
	*($3 + [312]) = (int_64)0
	CALL $124(($3 + [512]), ($3 + [312]))
	*(($4 = (($3 + [56]) + [8]))) = *((($3 + [512]) + [8]))
	*($3 + [56]) = *($3 + [512])
	$4 = *($4)
	*((($3 + [528]) + [8])) = $4
	*(($5 = (($3 + [544]) + [8]))) = $4
	$6 = *($3 + [56])
	*($3 + [544]) = $6
	*($3 + [528]) = $6
	$4 = *($5)
	*((($3 + [560]) + [8])) = $4
	*(($3 + [96])) = $4
	*($3 + [72]) = $0
	*($3 + [80]) = $1
	$6 = *($3 + [544])
	*($3 + [88]) = $6
	*($3 + [560]) = $6
	*(($3 + [112])) = $0
	*(($3 + [120])) = (int_64)-1
	*(($3 + [128])) = (int_64)0
	*(($3 + [136])) = [0]
	*(($3 + [152])) = $0
	*(($3 + [160])) = (int_64)-1
	*(($3 + [168])) = (int_64)0
	*(($3 + [176])) = [0]
	*(($3 + [180])) = [0]
	*(($3 + [192])) = $0
	*(($3 + [200])) = (int_64)-1
	*(($3 + [208])) = (int_64)0
	*(($3 + [216])) = [0]
	*(($3 + [220])) = [0]
	*($3 + [104]) = $0
	*($3 + [144]) = $0
	*($3 + [184]) = $0
	*($3 + [224]) = $0
	*(($3 + [240])) = (int_64)-1
	*(($3 + [232])) = $0
	*(($3 + [248])) = (int_64)0
	*(($3 + [256])) = [0]
	*(($3 + [272])) = $0
	*(($3 + [280])) = (int_64)-1
	*(($3 + [288])) = (int_64)0
	*(($3 + [296])) = [0]
	*($3 + [264]) = $0
	*($3 + [304]) = $1
	$5 = CALL $25(($3 + [40]), ($3 + [344]))
	$2 = CALL $25(($3 + [24]), ($3 + [328]))
	$4 = CALL $25(($3 + [8]), ($3 + [312]))
	*($3 + [544]) = [8541]
	*($3 + [548]) = CALL $1([8541])
	*($3) = *($3 + [544])
	CALL require_auth(*(CALL $52(($3 + [560]), $3)))
	CALL require_recipient(*(($3 + [392])))
	if ( (*($4) & [1]) ){ goto $label$10 }
	if ( (*($2) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $10(*($4 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $10(*($2 + [8]))
	$4 = [1]
	if ( (*($5) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $10(*($5 + [8]))
	
.LABEL $label$6
	CALL $88(($3 + [72]))
	if ( (*($3 + [312]) & $4) ){ goto $label$15 }
	$4 = [1]
	if ( (*($3 + [328]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $10(*(($3 + [320])))
	$4 = [1]
	if ( ((*($3 + [328]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL $10(*(($3 + [336])))
	if ( (*($3 + [344]) & $4) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*($3 + [344]) & $4) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $10(*(($3 + [352])))
	
.LABEL $label$11
	if ( ((*(($3 + [408])) & [1]) == 0) ){ goto $label$16 }
	CALL $10(*(($3 + [416])))
	
.LABEL $label$16
	if ( ((*(($3 + [492])) & [1]) == 0) ){ goto $label$17 }
	CALL $10(*(($3 + [500])))
	
.LABEL $label$17
	$global$0 = ($3 + [576])
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9976])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [9976])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $124(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9976])
	$1 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $1, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $124(*($1), *($0 + [16]))
	$6 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9976])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [36])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$1) ){ goto $label$11 }
	CALL eosio_assert([0], [9976])
	$1 = *(($0 + [4]))
	
.LABEL $label$11
	CALL memcpy(($2 + [8]), $1, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	*($4) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $134 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [256])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $2($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [248])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [248])
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [9976])
	
.LABEL $label$1
	CALL memcpy($5, $2, [8])
	$5 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9976])
	
.LABEL $label$6
	CALL memcpy(($3 + [240]), $5, [8])
	$5 = ($2 + [16])
	if ( ((int_32)$4 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [9976])
	
.LABEL $label$7
	CALL memcpy($3, $5, [1])
	$4 = *($3)
	*(($3 + [24])) = $6
	*(($3 + [40])) = $0
	*(($3 + [48])) = (int_64)-1
	*(($3 + [56])) = (int_64)0
	*(($3 + [64])) = [0]
	*(($3 + [80])) = $0
	*(($3 + [88])) = (int_64)-1
	*(($3 + [96])) = (int_64)0
	*(($3 + [104])) = [0]
	*(($3 + [108])) = [0]
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [17])
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [32]) = $0
	*($3 + [72]) = $0
	*($3 + [112]) = $0
	*(($3 + [128])) = (int_64)-1
	*(($3 + [120])) = $0
	*(($3 + [136])) = (int_64)0
	*(($3 + [144])) = [0]
	*(($3 + [148])) = [0]
	*(($3 + [160])) = $0
	*(($3 + [168])) = (int_64)-1
	*(($3 + [176])) = (int_64)0
	*(($3 + [184])) = [0]
	*(($3 + [200])) = $0
	*(($3 + [208])) = (int_64)-1
	*(($3 + [216])) = (int_64)0
	*(($3 + [224])) = [0]
	*($3 + [152]) = $0
	*($3 + [192]) = $0
	*($3 + [232]) = $1
	CALL $79($3, *($3 + [248]), *($3 + [240]), ((int_32)$4 != (int_32)[0]))
	CALL $88($3)
	$global$0 = ($3 + [256])
}

void .FUNC $135 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [352])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [292]) = $4
	*($3 + [288]) = $4
	*($3 + [296]) = ($4 + $5)
	*($3 + [280]) = [0]
	*($3 + [272]) = (int_64)0
	CALL $115(($3 + [288]), ($3 + [272]))
	*(($4 = (($3 + [16]) + [8]))) = *($3 + [296])
	*($3 + [16]) = *($3 + [288])
	$4 = *($4)
	*((($3 + [304]) + [8])) = $4
	*(($5 = (($3 + [320]) + [8]))) = $4
	$6 = *($3 + [16])
	*($3 + [320]) = $6
	*($3 + [304]) = $6
	$4 = *($5)
	*((($3 + [336]) + [8])) = $4
	*(($3 + [56])) = $4
	*($3 + [32]) = $0
	*($3 + [40]) = $1
	$6 = *($3 + [320])
	*($3 + [48]) = $6
	*($3 + [336]) = $6
	*(($3 + [72])) = $0
	*(($3 + [80])) = (int_64)-1
	*(($3 + [88])) = (int_64)0
	*(($3 + [96])) = [0]
	*(($3 + [112])) = $0
	*(($3 + [120])) = (int_64)-1
	*(($3 + [128])) = (int_64)0
	*(($3 + [136])) = [0]
	*(($3 + [140])) = [0]
	*(($3 + [152])) = $0
	*(($3 + [160])) = (int_64)-1
	*(($3 + [168])) = (int_64)0
	*(($3 + [176])) = [0]
	*(($3 + [180])) = [0]
	*($3 + [64]) = $0
	*($3 + [104]) = $0
	*($3 + [144]) = $0
	*($3 + [184]) = $0
	*(($3 + [200])) = (int_64)-1
	*(($3 + [192])) = $0
	*(($3 + [208])) = (int_64)0
	*(($3 + [216])) = [0]
	*(($3 + [232])) = $0
	*(($3 + [240])) = (int_64)-1
	*(($3 + [248])) = (int_64)0
	*(($3 + [256])) = [0]
	*($3 + [224]) = $0
	*($3 + [264]) = $1
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$4 = (*($3 + [276]) - *($3 + [272]))
	if ( ($4 == 0) ){ goto $label$5 }
	$5 = int_32($4 >> [3])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$4 }
	$4 = CALL $8($4)
	*(($3 + [8])) = ($4 + ($5 << [3]))
	*($3) = $4
	*($3 + [4]) = $4
	$2 = *($3 + [272])
	$5 = (*($3 + [276]) - $2)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($4, $2, $5)
	*($3 + [4]) = (*($3 + [4]) + $5)
	
.LABEL $label$5
	CALL $71(($3 + [32]), $3)
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$6 }
	*($3 + [4]) = $4
	CALL $10($4)
	
.LABEL $label$6
	CALL $88(($3 + [32]))
	$4 = *($3 + [272])
	if ( ($4 == 0) ){ goto $label$7 }
	*($3 + [276]) = $4
	CALL $10($4)
	
.LABEL $label$7
	$global$0 = ($3 + [352])
	return (unreachable)
	
.LABEL $label$4
	CALL $42($3)
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL $8(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $42($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $10($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $137 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [256])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [248]) = (int_64)0
	$5 = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9976])
	
.LABEL $label$5
	CALL memcpy(($3 + [248]), $2, [8])
	*(($3 + [28])) = ($2 + [8])
	*(($3 + [32])) = $5
	*(($3 + [48])) = $0
	*(($3 + [56])) = (int_64)-1
	*(($3 + [64])) = (int_64)0
	*(($3 + [72])) = [0]
	*(($3 + [88])) = $0
	*(($3 + [96])) = (int_64)-1
	*(($3 + [104])) = (int_64)0
	*(($3 + [112])) = [0]
	*(($3 + [116])) = [0]
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	*($3 + [40]) = $0
	*($3 + [80]) = $0
	*($3 + [120]) = $0
	*(($3 + [136])) = (int_64)-1
	*(($3 + [128])) = $0
	*(($3 + [144])) = (int_64)0
	*(($3 + [152])) = [0]
	*(($3 + [156])) = [0]
	*(($3 + [168])) = $0
	*(($3 + [176])) = (int_64)-1
	*(($3 + [184])) = (int_64)0
	*(($3 + [192])) = [0]
	*(($3 + [208])) = $0
	*(($3 + [216])) = (int_64)-1
	*(($3 + [224])) = (int_64)0
	*(($3 + [232])) = [0]
	*($3 + [160]) = $0
	*($3 + [200]) = $0
	*($3 + [240]) = $1
	CALL require_auth(*($3 + [248]))
	CALL $88(($3 + [8]))
	$global$0 = ($3 + [256])
}

void .FUNC $181 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [9222])
	
.LABEL $label$1
	*(($5 = CALL $8([80])) + [40]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = $1
	CALL $190($3, $5)
	*($4 + [64]) = ($4 + [56])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [72]) = ($4 + [56])
	$3 = ($5 + [16])
	*($4 + [84]) = $3
	*($4 + [80]) = $5
	*($4 + [88]) = ($5 + [32])
	*($4 + [92]) = ($5 + [48])
	CALL $191(($4 + [80]), ($4 + [72]))
	$6 = *($5)
	*($5 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)-8272242484608761856, $2, $6, $4, [56])
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$2 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$6 = *(($1 + [8]))
	$7 = *($5)
	*($4 + [88]) = *(($5 + [24]))
	*($4 + [80]) = *($3)
	*($5 + [72]) = CALL db_idx128_store($6, (int_64)-8272242484608761856, $2, $7, ($4 + [80]))
	*($4 + [80]) = $5
	*($4 + [8]) = (int_64)0
	$2 = *($5)
	*($4) = $2
	$8 = *(($5 + [68]))
	*($4 + [56]) = $8
	$9 = ($1 + [28])
	$3 = *($9)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = $2
	*($3 + [16]) = $8
	*($4 + [80]) = [0]
	*($3) = $5
	*($9) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $175(($1 + [24]), ($4 + [80]), $4, ($4 + [56]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $10($5)
	
.LABEL $label$5
	$global$0 = ($4 + [96])
}

void .FUNC $129 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [400])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [340]) = $2
	*($3 + [336]) = $2
	$5 = ($2 + $4)
	*($3 + [344]) = $5
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9976])
	$5 = *(($3 + [344]))
	$2 = *($3 + [340])
	
.LABEL $label$5
	CALL memcpy(($3 + [328]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [340]) = $2
	*($3 + [320]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9976])
	$5 = *((($3 + [336]) + [8]))
	$2 = *($3 + [340])
	
.LABEL $label$6
	CALL memcpy(($3 + [320]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [340]) = $2
	*($3 + [312]) = (int_64)0
	*($3 + [304]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9976])
	$5 = *(($3 + [344]))
	$2 = *($3 + [340])
	
.LABEL $label$7
	CALL memcpy(($3 + [304]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [340]) = $2
	*($3 + [48]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9976])
	$2 = *($3 + [340])
	
.LABEL $label$8
	CALL memcpy(($3 + [48]), $2, [8])
	*((($3 + [304]) + [8])) = *($3 + [48])
	*($3 + [340]) = ($2 + [8])
	*($3 + [296]) = [0]
	*($3 + [288]) = (int_64)0
	CALL $124(($3 + [336]), ($3 + [288]))
	*(($2 = (($3 + [32]) + [8]))) = *((($3 + [336]) + [8]))
	*($3 + [32]) = *($3 + [336])
	$2 = *($2)
	*((($3 + [352]) + [8])) = $2
	*(($5 = (($3 + [368]) + [8]))) = $2
	$6 = *($3 + [32])
	*($3 + [368]) = $6
	*($3 + [352]) = $6
	$2 = *($5)
	*((($3 + [384]) + [8])) = $2
	*(($3 + [72])) = $2
	*($3 + [48]) = $0
	*($3 + [56]) = $1
	$6 = *($3 + [368])
	*($3 + [64]) = $6
	*($3 + [384]) = $6
	*(($3 + [88])) = $0
	*(($3 + [96])) = (int_64)-1
	*(($3 + [104])) = (int_64)0
	*(($3 + [112])) = [0]
	*(($3 + [128])) = $0
	*(($3 + [136])) = (int_64)-1
	*(($3 + [144])) = (int_64)0
	*(($3 + [152])) = [0]
	*(($3 + [156])) = [0]
	*(($3 + [168])) = $0
	*(($3 + [176])) = (int_64)-1
	*(($3 + [184])) = (int_64)0
	*(($3 + [192])) = [0]
	*(($3 + [196])) = [0]
	*($3 + [80]) = $0
	*($3 + [120]) = $0
	*($3 + [160]) = $0
	*($3 + [200]) = $0
	*(($3 + [216])) = (int_64)-1
	*(($3 + [208])) = $0
	*(($3 + [224])) = (int_64)0
	*(($3 + [232])) = [0]
	*(($3 + [248])) = $0
	*(($3 + [256])) = (int_64)-1
	*(($3 + [264])) = (int_64)0
	*(($3 + [272])) = [0]
	*($3 + [240]) = $0
	*($3 + [280]) = $1
	$0 = *($3 + [328])
	$2 = CALL $25(($3 + [16]), ($3 + [288]))
	*($3 + [368]) = [8541]
	*($3 + [372]) = CALL $1([8541])
	*($3 + [8]) = *($3 + [368])
	CALL require_auth(*(CALL $52(($3 + [384]), ($3 + [8]))))
	CALL $106(($3 + [48]), ($3 + [240]), $0)
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*($2 + [8]))
	
.LABEL $label$9
	CALL $88(($3 + [48]))
	if ( ((*($3 + [288]) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($3 + [296])))
	
.LABEL $label$10
	$global$0 = ($3 + [400])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9976])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9976])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $124(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9976])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9976])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9976])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0 + [24])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9976])
	$1 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $2($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $2($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $9 (int_32 $0)
{
	return CALL $8($0)
}

void .FUNC $123 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [496])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [436]) = $2
	*($3 + [432]) = $2
	*($3 + [440]) = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9976])
	$2 = *($3 + [436])
	
.LABEL $label$5
	CALL memcpy(($3 + [424]), $2, [8])
	$2 = (*($3 + [436]) + [8])
	*($3 + [436]) = $2
	$4 = (($3 + [432]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [9976])
	$2 = *($3 + [436])
	
.LABEL $label$6
	CALL memcpy(($3 + [420]), $2, [4])
	$2 = (*($3 + [436]) + [4])
	*($3 + [436]) = $2
	if ( ((uint_32)(*($4) - $2) > (uint_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [9976])
	$2 = *($3 + [436])
	
.LABEL $label$7
	CALL memcpy(($3 + [416]), $2, [4])
	*($3 + [436]) = (*($3 + [436]) + [4])
	*($3 + [408]) = [0]
	*($3 + [400]) = (int_64)0
	CALL $124(($3 + [432]), ($3 + [400]))
	*($3 + [392]) = [0]
	*($3 + [384]) = (int_64)0
	CALL $125(($3 + [432]), ($3 + [384]))
	*($3 + [376]) = [0]
	*($3 + [368]) = (int_64)0
	CALL $124(($3 + [432]), ($3 + [368]))
	*($3 + [360]) = [0]
	*($3 + [352]) = (int_64)0
	CALL $124(($3 + [432]), ($3 + [352]))
	*($3 + [344]) = [0]
	*($3 + [336]) = (int_64)0
	CALL $124(($3 + [432]), ($3 + [336]))
	*(($2 = (($3 + [80]) + [8]))) = *((($3 + [432]) + [8]))
	*($3 + [80]) = *($3 + [432])
	$2 = *($2)
	*((($3 + [448]) + [8])) = $2
	*(($4 = (($3 + [464]) + [8]))) = $2
	$5 = *($3 + [80])
	*($3 + [464]) = $5
	*($3 + [448]) = $5
	$2 = *($4)
	*((($3 + [480]) + [8])) = $2
	*(($3 + [120])) = $2
	*($3 + [96]) = $0
	*($3 + [104]) = $1
	$5 = *($3 + [464])
	*($3 + [112]) = $5
	*($3 + [480]) = $5
	*(($3 + [136])) = $0
	*(($3 + [144])) = (int_64)-1
	*(($3 + [152])) = (int_64)0
	*(($3 + [160])) = [0]
	*(($3 + [176])) = $0
	*(($3 + [184])) = (int_64)-1
	*(($3 + [192])) = (int_64)0
	*(($3 + [200])) = [0]
	*(($3 + [204])) = [0]
	*(($3 + [216])) = $0
	*(($3 + [224])) = (int_64)-1
	*(($3 + [232])) = (int_64)0
	*(($3 + [240])) = [0]
	*(($3 + [244])) = [0]
	*($3 + [128]) = $0
	*($3 + [168]) = $0
	*($3 + [208]) = $0
	*($3 + [248]) = $0
	*(($3 + [264])) = (int_64)-1
	*(($3 + [256])) = $0
	*(($3 + [272])) = (int_64)0
	*(($3 + [280])) = [0]
	*(($3 + [296])) = $0
	*(($3 + [304])) = (int_64)-1
	*(($3 + [312])) = (int_64)0
	*(($3 + [320])) = [0]
	*($3 + [288]) = $0
	*($3 + [328]) = $1
	$6 = *($3 + [416])
	$7 = *($3 + [420])
	$0 = *($3 + [424])
	$8 = CALL $25(($3 + [64]), ($3 + [400]))
	*($3 + [56]) = [0]
	*($3 + [48]) = (int_64)0
	$2 = (*($3 + [388]) - *($3 + [384]))
	if ( ($2 == 0) ){ goto $label$14 }
	$9 = int_32($2 >> [6])
	if ( ((uint_32)$9 >= (uint_32)[67108864]) ){ goto $label$13 }
	$4 = CALL $8($2)
	*((($3 + [48]) + [8])) = ($4 + ($9 << [6]))
	*($3 + [48]) = $4
	*($3 + [52]) = $4
	$9 = *($3 + [388])
	$2 = *($3 + [384])
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$14 }
	
.LOOP $label$15:
	*($4) = *($2)
	*(($4 + [8])) = *(($2 + [8]))
	CALL $25(($4 + [16]), ($2 + [16]))
	*(($4 + [56])) = *(($2 + [56]))
	*(($4 + [48])) = *(($2 + [48]))
	*(($4 + [40])) = *(($2 + [40]))
	*($4 + [32]) = *(($2 + [32]))
	$4 = (*($3 + [52]) + [64])
	*($3 + [52]) = $4
	$2 = ($2 + [64])
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$15 }
	
.LABEL $label$14
	$9 = CALL $25($3, ($3 + [336]))
	$4 = CALL $25(($3 + [16]), ($3 + [352]))
	$2 = CALL $25(($3 + [32]), ($3 + [368]))
	CALL $75(($3 + [96]), $0, $7, $6, $8, ($3 + [48]), $2, $4, $9)
	if ( (*($9) & [1]) ){ goto $label$17 }
	if ( (*($4) & [1]) ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$17
	CALL $10(*($9 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$16
	CALL $10(*($4 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	CALL $42(($3 + [48]))
	
.LABEL $label$12
	if ( (*($2) & [1]) ){ goto $label$10 }
	
.LABEL $label$11
	$9 = *($3 + [48])
	if ( ($9 == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	CALL $10(*($2 + [8]))
	$9 = *($3 + [48])
	if ( ($9 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = *($3 + [52])
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = ($2 + [-64])
	if ( ((*(($2 + [-48])) & [1]) == 0) ){ goto $label$21 }
	CALL $10(*(($2 + [-40])))
	
.LABEL $label$21
	$2 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$20 }
	$2 = *($3 + [48])
	goto $label$18 
	
.LABEL $label$19
	$2 = $9
	
.LABEL $label$18
	*($3 + [52]) = $9
	CALL $10($2)
	
.LABEL $label$8
	if ( ((*($8) & [1]) == 0) ){ goto $label$22 }
	CALL $10(*($8 + [8]))
	
.LABEL $label$22
	CALL $88(($3 + [96]))
	if ( (*($3 + [336]) & [1]) ){ goto $label$29 }
	$2 = [1]
	if ( (*($3 + [352]) & [1]) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL $10(*(($3 + [344])))
	$2 = [1]
	if ( ((*($3 + [352]) & [1]) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL $10(*(($3 + [360])))
	if ( ((*($3 + [368]) & $2) == 0) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	if ( (*($3 + [368]) & $2) ){ goto $label$25 }
	
.LABEL $label$26
	$9 = *($3 + [384])
	if ( ($9 == 0) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	CALL $10(*(($3 + [376])))
	$9 = *($3 + [384])
	if ( ($9 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$2 = *($3 + [388])
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$31 }
	
.LOOP $label$32:
	$4 = ($2 + [-64])
	if ( ((*(($2 + [-48])) & [1]) == 0) ){ goto $label$33 }
	CALL $10(*(($2 + [-40])))
	
.LABEL $label$33
	$2 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$32 }
	$2 = *($3 + [384])
	goto $label$30 
	
.LABEL $label$31
	$2 = $9
	
.LABEL $label$30
	*($3 + [388]) = $9
	CALL $10($2)
	
.LABEL $label$23
	if ( ((*($3 + [400]) & [1]) == 0) ){ goto $label$34 }
	CALL $10(*(($3 + [408])))
	
.LABEL $label$34
	$global$0 = ($3 + [496])
	(unreachable)
}

void .FUNC $122 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [304])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $2($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [264])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [264])
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [9976])
	
.LABEL $label$1
	CALL memcpy($5, $2, [8])
	*(($3 + [44])) = ($2 + [8])
	*(($3 + [48])) = $6
	*(($3 + [64])) = $0
	*(($3 + [72])) = (int_64)-1
	*(($3 + [80])) = (int_64)0
	*(($3 + [88])) = [0]
	*(($3 + [104])) = $0
	*(($3 + [112])) = (int_64)-1
	*(($3 + [120])) = (int_64)0
	*(($3 + [128])) = [0]
	*(($3 + [132])) = [0]
	*($3 + [32]) = $1
	*($3 + [24]) = $0
	*($3 + [40]) = $2
	*($3 + [56]) = $0
	*($3 + [96]) = $0
	*($3 + [136]) = $0
	*(($3 + [152])) = (int_64)-1
	*(($3 + [144])) = $0
	*(($3 + [160])) = (int_64)0
	*(($3 + [168])) = [0]
	*(($3 + [172])) = [0]
	*(($3 + [184])) = $0
	*(($3 + [192])) = (int_64)-1
	*(($3 + [200])) = (int_64)0
	*(($3 + [208])) = [0]
	*(($3 + [224])) = $0
	*(($3 + [232])) = (int_64)-1
	*(($3 + [240])) = (int_64)0
	*(($3 + [248])) = [0]
	*($3 + [176]) = $0
	*($3 + [216]) = $0
	*($3 + [256]) = $1
	$0 = *($3 + [264])
	*($3 + [288]) = [8541]
	*($3 + [292]) = CALL $1([8541])
	*($3 + [16]) = *($3 + [288])
	CALL require_auth(*(CALL $52(($3 + [296]), ($3 + [16]))))
	*($3 + [272]) = [8625]
	$1 = *($3 + [24])
	*($3 + [276]) = CALL $1([8625])
	*($3 + [8]) = *($3 + [272])
	CALL $114(($3 + [24]), ($3 + [56]), $1, *(CALL $52(($3 + [280]), ($3 + [8]))), $0)
	CALL $88(($3 + [24]))
	$global$0 = ($3 + [304])
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	float_64 $7
	int_64 $8
	float_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [288])
	$global$0 = $4
	$5 = *($2 + [8])
	$6 = *($2)
	$7 = (CASTING float_64)(int_64 $6)
	if ( (*($1 + [96]) == 0) ){ goto $label$12 }
	$7 = ((float_64)$7 * (float_64)(float_64)0.019000000000000017)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$11 }
	$8 = (int_64)-9223372036854775808
	goto $label$10 
	
.LABEL $label$12
	$9 = ((float_64)$7 * (float_64)(float_64)3.8000000000000035e-03)
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$9 }
	$10 = (int_64)-9223372036854775808
	goto $label$8 
	
.LABEL $label$11
	$8 = (Rounds 0)($7)
	
.LABEL $label$10
	$10 = (int_64)0
	$11 = (int_64)0
	$6 = (int_64)
	if ( ((int_64)$6($6 - (int_64)0)) <= (int_64)-4611686018427387904) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$10 = (Rounds 0)($9)
	
.LABEL $label$8
	$7 = ((float_64)$7 * (float_64)(float_64)0.012350000000000012)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$14 }
	$11 = (int_64)-9223372036854775808
	goto $label$13 
	
.LABEL $label$14
	$11 = (Rounds 0)($7)
	
.LABEL $label$13
	$8 = (int_64)0
	$6 = (int_64)
	if ( ((int_64)$6($6 - $11)) > (int_64)-4611686018427387904) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [9051])
	$6 = (int_64)
	if ( ((int_64)$6($6 - $10)) > (int_64)-4611686018427387904) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_64)$6 >= (int_64)4611686018427387904) ){ goto $label$15 }
	$6 = (int_64)
	if ( ((int_64)$6($6 - $10)) <= (int_64)-4611686018427387904) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$15
	CALL eosio_assert([0], [9073])
	$6 = (int_64)
	if ( ((int_64)$6($6 - $10)) > (int_64)-4611686018427387904) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [9051])
	$6 = (int_64)
	if ( ((int_64)$6($6 - $8)) > (int_64)-4611686018427387904) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_64)$6 >= (int_64)4611686018427387904) ){ goto $label$16 }
	$6 = (int_64)
	if ( ((int_64)$6($6 - $8)) <= (int_64)-4611686018427387904) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$16
	CALL eosio_assert([0], [9073])
	$6 = (int_64)
	if ( ((int_64)$6($6 - $8)) > (int_64)-4611686018427387904) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([0], [9051])
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$6 < (int_64)4611686018427387904) ){ goto $label$1 }
	CALL eosio_assert([0], [9073])
	
.LABEL $label$1
	*($2) = $6
	$6 = *($0 + [232])
	$12 = *($0)
	*($4 + [272]) = [8476]
	*($4 + [276]) = CALL $1([8476])
	*($4 + [88]) = *($4 + [272])
	$13 = CALL $52(($4 + [280]), ($4 + [88]))
	*($4 + [264]) = $5
	*($4 + [256]) = $11
	$1 = CALL $25(($4 + [240]), $3)
	$11 = *($13)
	*((($4 + [72]) + [8])) = *($4 + [264])
	*($4 + [72]) = *($4 + [256])
	CALL $58($6, $12, $11, ($4 + [72]), $1)
	if ( ((*($1) & [1]) == 0) ){ goto $label$17 }
	CALL $10(*($1 + [8]))
	
.LABEL $label$17
	$13 = ($0 + [232])
	$6 = *($13)
	$11 = *($0)
	*($4 + [224]) = [8502]
	*($4 + [228]) = CALL $1([8502])
	*($4 + [64]) = *($4 + [224])
	$14 = CALL $52(($4 + [232]), ($4 + [64]))
	*($4 + [216]) = $5
	*($4 + [208]) = $10
	$1 = CALL $25(($4 + [192]), $3)
	$10 = *($14)
	*((($4 + [48]) + [8])) = *($4 + [216])
	*($4 + [48]) = *($4 + [208])
	CALL $58($6, $11, $10, ($4 + [48]), $1)
	if ( ((*($1) & [1]) == 0) ){ goto $label$18 }
	CALL $10(*($1 + [8]))
	
.LABEL $label$18
	$10 = *($13)
	$6 = *($0)
	*($4 + [176]) = [10250]
	*($4 + [180]) = CALL $1([10250])
	*($4 + [40]) = *($4 + [176])
	$13 = CALL $52(($4 + [184]), ($4 + [40]))
	*($4 + [168]) = $5
	*($4 + [160]) = $8
	$1 = CALL $25(($4 + [144]), $3)
	$5 = *($13)
	*((($4 + [24]) + [8])) = *($4 + [168])
	*($4 + [24]) = *($4 + [160])
	CALL $58($10, $6, $5, ($4 + [24]), $1)
	if ( ((*($1) & [1]) == 0) ){ goto $label$19 }
	CALL $10(*($1 + [8]))
	
.LABEL $label$19
	$5 = *(($0 + [232]))
	$10 = *($0)
	*($4 + [128]) = [8541]
	*($4 + [132]) = CALL $1([8541])
	*($4 + [16]) = *($4 + [128])
	$1 = CALL $52(($4 + [136]), ($4 + [16]))
	*(($13 = (($4 + [112]) + [8]))) = *(($2 + [8]))
	*($4 + [112]) = *($2)
	$0 = CALL $25(($4 + [96]), $3)
	$8 = *($1)
	*(($4 + [8])) = *($13)
	*($4) = *($4 + [112])
	CALL $58($5, $10, $8, $4, $0)
	if ( ((*($0) & [1]) == 0) ){ goto $label$20 }
	CALL $10(*($0 + [8]))
	
.LABEL $label$20
	$global$0 = ($4 + [288])
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL $41(($3 + [32]), *($2 + [8]))
	$4 = [0]
	$5 = CALL $36(($3 + [32]), [0], [9532])
	$6 = ($5 + [8])
	*((($3 + [48]) + [8])) = *($6)
	*($3 + [48]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	$5 = CALL $32(($3 + [48]), [9541])
	$6 = ($5 + [8])
	*((($3 + [64]) + [8])) = *($6)
	*($3 + [64]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	$7 = *($2 + [16])
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$4 }
	$6 = *([0] + [9464])
	
.LOOP $label$6:
	*((($3 + [128]) + ($5 = $4))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$4 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$5 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($3 + [16]) = ($4 << [1])
	$6 = (($3 + [16]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*((($3 + [16]) + [8])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [16]) = [0]
	$5 = (($3 + [16]) | [1])
	$4 = $5
	goto $label$1 
	
.LABEL $label$3
	$8 = (($4 + [16]) & [-16])
	$6 = CALL $8($8)
	*($3 + [16]) = ($8 | [1])
	*($3 + [24]) = $6
	*($3 + [20]) = $4
	
.LABEL $label$2
	$8 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$7:
	*(($6 + $5)) = *((($3 + [128]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$7 }
	$4 = ($6 + $4)
	$5 = (($3 + [16]) | [1])
	
.LABEL $label$1
	*($4) = [0]
	$4 = *($3 + [16])
	$6 = ($4 & [1])
	$5 = CALL $34(($3 + [64]), ( *($3 + [24]) ? $5 : $6 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $6 ))
	$4 = ($5 + [8])
	*((($3 + [80]) + [8])) = *($4)
	*($3 + [80]) = *($5)
	*($5) = (int_64)0
	*($4) = [0]
	$5 = CALL $32(($3 + [80]), [9543])
	$4 = ($5 + [8])
	*((($3 + [96]) + [8])) = *($4)
	*($3 + [96]) = *($5)
	*($5) = (int_64)0
	*($4) = [0]
	CALL $160($3, ($2 + [48]))
	$5 = *($3)
	$4 = ($5 & [1])
	$5 = CALL $34(($3 + [96]), ( *($3 + [8]) ? ($3 | [1]) : $4 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $4 ))
	$4 = ($5 + [8])
	*((($3 + [112]) + [8])) = *($4)
	*($3 + [112]) = *($5)
	*($5) = (int_64)0
	*($4) = [0]
	$5 = CALL $32(($3 + [112]), [9549])
	$4 = ($5 + [8])
	*((($3 + [128]) + [8])) = *($4)
	*($3 + [128]) = *($5)
	*($5) = (int_64)0
	*($4) = [0]
	$5 = *($2 + [32])
	$4 = ($5 & [1])
	$5 = CALL $34(($3 + [128]), ( *(($2 + [40])) ? ($2 + [33]) : $4 ), ( *(($2 + [36])) ? uint_32($5 >> [1]) : $4 ))
	$7 = *($5)
	*($5) = (int_64)0
	*($0) = $7
	$5 = ($5 + [8])
	*(($0 + [8])) = *($5)
	*($5) = [0]
	if ( (*($3 + [128]) & [1]) ){ goto $label$24 }
	if ( (*($3 + [112]) & [1]) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL $10(*($3 + [136]))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL $10(*($3 + [120]))
	$5 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$5 = [1]
	if ( (*($3) & [1]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( (*($3 + [96]) & $5) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL $10(*(($3 + [8])))
	if ( ((*($3 + [96]) & $5) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL $10(*($3 + [104]))
	$5 = [1]
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$5 = [1]
	if ( (*($3 + [80]) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($3 + [16]) & $5) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $10(*($3 + [88]))
	if ( ((*($3 + [16]) & $5) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $10(*(($3 + [24])))
	$5 = [1]
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$5 = [1]
	if ( (*($3 + [64]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( (*($3 + [48]) & $5) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $10(*($3 + [72]))
	if ( ((*($3 + [48]) & $5) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $10(*($3 + [56]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($3 + [32]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$8
	CALL $10(*($3 + [40]))
	$global$0 = ($3 + [144])
}

int_32 .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8236])
	return $3
	
.LABEL $label$1
	return $3
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10263])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $59($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9976])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	$7 = [0]
	
.LOOP $label$1:
	if ( ($3 <= *($5)) ){ goto $label$2 }
	CALL eosio_assert([0], [10263])
	$3 = *($6)
	
.LABEL $label$2
	$8 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$7 = ($7 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $7)))
	$7 = ($7 + [7])
	$3 = $3
	if ( ($8 & [128]) ){ goto $label$1 }
	$3 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$8 = *($1 + [4])
	$7 = int_32(($8 - $6) >> [6])
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$5 }
	CALL $127($1, ($3 - $7))
	$8 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$6 }
	$7 = ($6 + ($3 << [6]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = ($8 + [-64])
	if ( ((*(($8 + [-48])) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*(($8 + [-40])))
	
.LABEL $label$9
	$8 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$8 }
	
.LABEL $label$7
	*(($1 + [4])) = $7
	$8 = $7
	
.LABEL $label$6
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($2 + [28])
	$6 = ($2 + [36])
	$5 = ($2 + [40])
	
.LOOP $label$10:
	*($2 + [8]) = $0
	*($2 + [16]) = $3
	*((($2 + [16]) + [8])) = ($3 + [16])
	*($7) = ($3 + [32])
	*((($2 + [16]) + [16])) = ($3 + [40])
	*($6) = ($3 + [48])
	*($5) = ($3 + [56])
	*($2 + [20]) = ($3 + [8])
	CALL $128(($2 + [16]), ($2 + [8]))
	$3 = ($3 + [64])
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$10 }
	
.LABEL $label$3
	$global$0 = ($2 + [48])
	return $0
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $126($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $29($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $29($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $24($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $10($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	CALL $14($0, $1)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $10 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $11 (int_32 $0)
{
	CALL $10($0)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $7(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $7(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	return CALL $12($0, $1)
}

void .FUNC $185 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [9222])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL $8([40])) + [20]) = [0]
	*($3 + [12 align=4]) = (int_64)0
	*($3 + [28]) = $1
	CALL $189(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [32])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $155(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [12]) & [1]) == 0) ){ goto $label$5 }
	CALL $10(*(($3 + [20])))
	
.LABEL $label$5
	CALL $10($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [1] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $20($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $20($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $20($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $20($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [8288]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $20($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $20($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $20($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $184 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9308])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9354])
	
.LABEL $label$2
	*($5 + [24]) = *(($1 + [24]))
	*($5 + [16]) = *($1 + [16])
	$6 = *($1)
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)*(($1 + [40]))) ){ goto $label$3 }
	CALL eosio_assert([0], [8971])
	
.LABEL $label$3
	$7 = ((int_64)*($1 + [32]) + (int_64)*($3))
	*($1 + [32]) = $7
	if ( ((int_64)$7 <= (int_64)-4611686018427387904) ){ goto $label$8 }
	$3 = [16]
	if ( ((int_64)$7 >= (int_64)4611686018427387904) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert([0], [9014])
	$3 = [16]
	if ( ((int_64)*(($1 + [32])) < (int_64)4611686018427387904) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [9033])
	$3 = ($1 + $3)
	if ( ((int_64)$6 != (int_64)*($1)) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = ($1 + $3)
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [9405])
	
.LABEL $label$4
	$8 = $4
	$4 = ($8 + [-64])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($8 + [-8])
	*($5 + [32]) = $5
	*($5 + [52]) = $3
	*($5 + [48]) = $1
	*($5 + [56]) = ($1 + [32])
	*($5 + [60]) = ($1 + [48])
	CALL $191(($5 + [48]), ($5 + [32]))
	CALL db_update_i64(*($1 + [68]), $2, $4, [56])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($5 + [48]) = *($3)
	*($5 + [56]) = *(($3 + [8]))
	if ( (CALL $17(($5 + [16]), ($5 + [48]), [16]) == 0) ){ goto $label$10 }
	$3 = ($1 + [72])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$11 }
	$1 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-8272242484608761856, ($5 + [32]), $6)
	*($3) = $1
	
.LABEL $label$11
	CALL db_idx128_update($1, $2, ($5 + [48]))
	
.LABEL $label$10
	$global$0 = ($5 + [64])
}

void .FUNC $187 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *(($4 + [-24]))
	if ( ((int_32)*($5 + [64]) == (int_32)$1) ){ goto $label$4 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$4
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$1
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-8272242484608761856, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $152($1, $5)
	if ( ((int_32)*($5 + [64]) == (int_32)$1) ){ goto $label$6 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $186 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [16]) = *(*($4 + [8]))
	*($1 + [24]) = *(*($4 + [12]) + [232])
	$5 = *($0)
	$6 = ($1 + [32])
	CALL $27($6, *($4 + [16]))
	*($1 + [64]) = *(*($4 + [20]))
	$7 = *($4 + [24])
	*(($1 + [56])) = *(($7 + [8]))
	*($1 + [48]) = *($7)
	$8 = ($1 + [48])
	$9 = ($1 + [8])
	$10 = *(*($4 + [24]) + [8])
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$11 = $12
	$13 = $7
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$11 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$13 = ((int_32)$7 < (int_32)[6])
	$14 = ($7 + [1])
	$7 = $14
	if ( $13 ){ goto $label$5 }
	$7 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8951])
	
.LABEL $label$1
	*($1 + [72]) = (int_64)0
	*(($1 + [80])) = $10
	*($1 + [88]) = *(*($4 + [28]))
	*($1 + [96]) = *(*($4 + [32]))
	$7 = *(($1 + [32]))
	$13 = ( *(($1 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($13 + [81])
	$11 = (CASTING uint_64)(uint_32 $13)
	$14 = ($1 + [96])
	$4 = ($1 + [88])
	
.LOOP $label$6:
	$7 = ($7 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	if ( ($7 <= [513]) ){ goto $label$8 }
	$13 = CALL $2($7)
	goto $label$7 
	
.LABEL $label$8
	$13 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $13
	
.LABEL $label$7
	*($3 + [4]) = $13
	*($3) = $13
	*($3 + [8]) = ($13 + $7)
	*($3 + [16]) = $3
	*($3 + [28]) = $9
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [24])
	*($3 + [40]) = $6
	*($3 + [44]) = $8
	*($3 + [48]) = ($1 + [64])
	*($3 + [52]) = ($1 + [72])
	*($3 + [56]) = $4
	*($3 + [60]) = $14
	CALL $159(($3 + [24]), ($3 + [16]))
	$11 = *($1)
	*($1 + [104]) = CALL db_store_i64(*($5 + [8]), (int_64)-8272420480284098560, *(*($0 + [8])), $11, $13, $7)
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $3($13)
	
.LABEL $label$9
	if ( (uint_64)($11 <= *($5 + [16])) ){ goto $label$10 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$7 = ($5 + [8])
	$11 = *($7)
	$13 = *(($0 + [8]))
	$12 = *($13)
	$10 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [108]) = CALL db_idx64_store($11, (int_64)-8272420480284098560, $12, $10, ($3 + [24]))
	$11 = *($13)
	$12 = *($7)
	$10 = *($1)
	*($3 + [24]) = *(($1 + [16]))
	*(($1 + [112])) = CALL db_idx64_store($12, (int_64)-8272420480284098559, $11, $10, ($3 + [24]))
	$global$0 = ($3 + [64])
}

void .FUNC $180 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)-8272242484608761856, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [64]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9148])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $152($7, CALL $fimport$1(*($7), *($7 + [8]), (int_64)-8272242484608761856, $6))
	if ( ((int_32)*($4 + [64]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$2
	*(($4 + [72])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9976])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9976])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9976])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $124(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $25(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $25(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $114 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($5 + [16]) = $4
	*($5 + [24]) = $3
	$7 = *(($1 + [28]))
	$6 = *($1 + [24])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$7:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$6 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$5 }
	if ( ((int_32)*($9 + [16]) == (int_32)$1) ){ goto $label$4 }
	CALL eosio_assert([0], [9148])
	*($5 + [8]) = ($5 + [16])
	if ( $9 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	$8 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7235159537265672192, $3)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $151($1, $8)
	if ( ((int_32)*($9 + [16]) == (int_32)$1) ){ goto $label$4 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$4
	*($5 + [8]) = ($5 + [16])
	if ( $9 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	*($5) = ($5 + [24])
	CALL $171(($5 + [8]), $1, $2, $5)
	$9 = *($5 + [12])
	*($5 + [8]) = ($5 + [16])
	if ( $9 ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [9273])
	
.LABEL $label$1
	CALL $172($1, $9, $2, ($5 + [8]))
	$global$0 = ($5 + [32])
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10263])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$5 = *($1 + [4])
	$6 = int_32(($5 - $7) >> [3])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $136($1, ($2 - $6))
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $5
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($0 + [4])
	$2 = *($6)
	$4 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9976])
	$2 = *($6)
	
.LABEL $label$8
	CALL memcpy($7, $2, [8])
	$2 = (*($6) + [8])
	*($6) = $2
	$7 = ($7 + [8])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9199])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $8([120])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [100]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [72])
	*($3 + [72]) = ($5 + [88])
	*($3 + [76]) = ($5 + [96])
	CALL $133(($3 + [40]), ($3 + [32]))
	*($5 + [104]) = $1
	*($5 + [108 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $162(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $10(*(($1 + [40])))
	
.LABEL $label$11
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*(($1 + [100])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9823])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9868])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [9918])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL $10(*(($6 + [40])))
	
.LABEL $label$13
	CALL $10($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$15 }
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$16 }
	CALL $10(*(($9 + [40])))
	
.LABEL $label$16
	CALL $10($9)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [104]))
	$9 = *($1 + [108])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8272420483699965952, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($9)
	
.LABEL $label$17
	$9 = *(($1 + [112]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$20 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8272420483699965951, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL db_idx64_remove($9)
	
.LABEL $label$19
	$global$0 = ($2 + [16])
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9199])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $8([40])) + [20]) = [0]
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [28]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [12])
	*($3 + [44]) = ($5 + [24])
	CALL $132(($3 + [32]), ($3 + [24]))
	*($5 + [32]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $155(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$11 }
	CALL $10(*(($1 + [20])))
	
.LABEL $label$11
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [28]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9823])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9868])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [9918])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [12]) & [1]) == 0) ){ goto $label$13 }
	CALL $10(*(($5 + [20])))
	
.LABEL $label$13
	CALL $10($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	if ( ((*($8 + [12]) & [1]) == 0) ){ goto $label$16 }
	CALL $10(*(($8 + [20])))
	
.LABEL $label$16
	CALL $10($8)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [32]))
}

void .FUNC $118 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL $51(($4 + [40]), *($0 + [232]), *($2 + [8]))
	*(($5 = (($4 + [24]) + [8]))) = *($2 + [8])
	*($4 + [24]) = *($2)
	$6 = *($0)
	$7 = *($0 + [232])
	$2 = CALL $25(($4 + [8]), $3)
	*((($4 + [144]) + [8])) = *($5)
	*($4 + [184]) = $7
	*($4 + [176]) = $6
	*($4 + [168]) = $1
	$7 = *($4 + [24])
	*($4 + [144]) = $7
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$1 }
	if ( (CALL is_account($1) == 0) ){ goto $label$1 }
	if ( (CALL is_account($6) == 0) ){ goto $label$1 }
	$0 = ($0 + [192])
	*($4 + [40]) = $0
	*($4 + [60]) = $2
	*($4 + [44]) = ($4 + [184])
	*($4 + [48]) = ($4 + [176])
	*($4 + [52]) = ($4 + [168])
	*($4 + [56]) = ($4 + [144])
	CALL $146(($4 + [160]), $0, $6, ($4 + [40]))
	
.LABEL $label$1
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL $10(*($2 + [8]))
	
.LABEL $label$2
	$global$0 = ($4 + [192])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$6 = ($global$0 - [224])
	$global$0 = $6
	*($6 + [216]) = $2
	*($6 + [200]) = [8625]
	*($6 + [204]) = CALL $1([8625])
	*($6 + [16]) = *($6 + [200])
	$7 = ($1 + [32])
	$2 = *(CALL $52(($6 + [208]), ($6 + [16])))
	$9 = *(($1 + [60]))
	$8 = *(($1 + [56]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	
.LOOP $label$6:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$5 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	if ( ((int_32)*($11 + [16]) == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert([0], [9148])
	if ( ((int_64)*($11 + [8]) != (int_64)0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$10 = CALL db_find_i64(*($7), *(($1 + [40])), (int_64)7235159537265672192, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	$11 = CALL $151($7, $10)
	if ( ((int_32)*($11 + [16]) == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$3
	if ( ((int_64)*($11 + [8]) != (int_64)0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [9981])
	
.LABEL $label$1
	if ( ((int_64)*($4) > (int_64)0) ){ goto $label$7 }
	CALL eosio_assert([0], [9993])
	
.LABEL $label$7
	*($6 + [192]) = (int_64)0
	*(($6 + [184])) = [0]
	*($6 + [176]) = (int_64)0
	$10 = CALL $1([9501])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$16 }
	*($6 + [176]) = ($10 << [1])
	$9 = (($6 + [176]) | [1])
	if ( $10 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$11 = (($10 + [16]) & [-16])
	$9 = CALL $8($11)
	*($6 + [176]) = ($11 | [1])
	*($6 + [184]) = $9
	*($6 + [180]) = $10
	
.LABEL $label$15
	CALL memcpy($9, [9501], $10)
	
.LABEL $label$14
	*(($9 + $10)) = [0]
	*($6 + [175]) = CALL $64($5)
	$10 = CALL $25(($6 + [144]), $5)
	CALL $176(($6 + [160]), $1, $10, ($6 + [192]), ($6 + [176]))
	if ( ((*($10) & [1]) == 0) ){ goto $label$17 }
	CALL $10(*($10 + [8]))
	
.LABEL $label$17
	$2 = ((int_64)CALL $43() / (int_64)1000000)
	*($6 + [136]) = ((int_64)$2 & (int_64)4294967295)
	*($6 + [128]) = (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 $2) / (uint_32)[60]))
	*(($6 + [120])) = [0]
	*($6 + [112]) = (int_64)0
	$11 = (($6 + [176]) | [1])
	$8 = ( *($6 + [184]) ? $11 : (*($6 + [176]) & [1]) )
	$10 = CALL $1($8)
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$20 }
	*($6 + [112]) = ($10 << [1])
	$9 = (($6 + [112]) | [1])
	if ( $10 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$7 = (($10 + [16]) & [-16])
	$9 = CALL $8($7)
	*($6 + [112]) = ($7 | [1])
	*($6 + [120]) = $9
	*($6 + [116]) = $10
	
.LABEL $label$19
	CALL memcpy($9, $8, $10)
	
.LABEL $label$18
	*(($9 + $10)) = [0]
	*((($6 + [24]) + [8])) = [0]
	*($6 + [24]) = (int_64)0
	$11 = ( *((($6 + [176]) + [8])) ? $11 : (*($6 + [176]) & [1]) )
	$10 = CALL $1($11)
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$23 }
	*($6 + [24]) = ($10 << [1])
	$9 = (($6 + [24]) | [1])
	if ( $10 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$8 = (($10 + [16]) & [-16])
	$9 = CALL $8($8)
	*($6 + [24]) = ($8 | [1])
	*($6 + [32]) = $9
	*($6 + [28]) = $10
	
.LABEL $label$22
	CALL memcpy($9, $11, $10)
	
.LABEL $label$21
	*(($9 + $10)) = [0]
	if ( (*($6 + [176]) & [1]) ){ goto $label$25 }
	*($6 + [176]) = [0]
	goto $label$24 
	
.LABEL $label$25
	*(*(($6 + [184]))) = [0]
	*($6 + [180]) = [0]
	
.LABEL $label$24
	CALL $29(($6 + [176]), [0])
	*((($6 + [176]) + [8])) = *((($6 + [24]) + [8]))
	*($6 + [176]) = *($6 + [24])
	$12 = *($6 + [128])
	$13 = *($6 + [216])
	$10 = CALL $25(($6 + [96]), ($6 + [176]))
	$14 = *(($4 + [8]))
	*((($6 + [80]) + [8])) = $14
	$2 = *($4)
	*(($6 + [8])) = $14
	*($6) = $2
	*($6 + [80]) = $2
	CALL $177($1, $12, $13, $10, $6)
	if ( ((*($10) & [1]) == 0) ){ goto $label$26 }
	CALL $10(*($10 + [8]))
	
.LABEL $label$26
	*($6 + [72]) = CALL $178($1)
	$2 = *($1)
	*($6 + [36]) = $1
	*($6 + [48]) = $4
	*($6 + [28]) = ($6 + [128])
	*($6 + [24]) = ($6 + [72])
	*($6 + [32]) = ($6 + [216])
	*($6 + [40]) = ($6 + [160])
	*($6 + [44]) = ($6 + [192])
	*($6 + [52]) = ($6 + [136])
	*($6 + [56]) = ($6 + [175])
	CALL $179(($6 + [64]), ($1 + [72]), $2, ($6 + [24]))
	$10 = *($6 + [68])
	*($0) = *($10)
	*(($0 + [8])) = *(($10 + [8]))
	*(($0 + [16])) = *(($10 + [16]))
	*(($0 + [24])) = *(($10 + [24]))
	CALL $25(($0 + [32]), ($10 + [32]))
	*(($0 + [96])) = *(($10 + [96]))
	*(($0 + [88])) = *(($10 + [88]))
	*(($0 + [80])) = *(($10 + [80]))
	*(($0 + [72])) = *(($10 + [72]))
	*(($0 + [64])) = *(($10 + [64]))
	*(($0 + [56])) = *(($10 + [56]))
	*($0 + [48]) = *($10 + [48])
	if ( (*($6 + [112]) & [1]) ){ goto $label$28 }
	$10 = [1]
	if ( (*($6 + [160]) & [1]) ){ goto $label$27 }
	goto $label$10 
	
.LABEL $label$28
	CALL $10(*($6 + [120]))
	$10 = [1]
	if ( ((*($6 + [160]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$27
	CALL $10(*($6 + [168]))
	if ( ((*($6 + [176]) & $10) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$13
	CALL $24(($6 + [176]))
	
.LABEL $label$12
	CALL $24(($6 + [112]))
	
.LABEL $label$11
	CALL $24(($6 + [24]))
	
.LABEL $label$10
	if ( (*($6 + [176]) & $10) ){ goto $label$8 }
	
.LABEL $label$9
	$global$0 = ($6 + [224])
	return 
	
.LABEL $label$8
	CALL $10(*(($6 + [184])))
	$global$0 = ($6 + [224])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $8(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $8($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $10($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $21 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $18([2], $0, [-1], $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $18([2], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $8($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $24 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $28($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL $8($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $101 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL $10($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL $10($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL $10($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL $10($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL $10($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL $10($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL $10($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL $10($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $100 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [36]) = [0]
	$4 = *($0)
	*($3) = $4
	*($3 + [8]) = $1
	*($3 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($4, $1, (int_64)-8272242484608761856, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $152($3, $0)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$1 }
	$6 = [1]
	
.LOOP $label$2:
	$0 = [0]
	$7 = CALL db_next_i64(*($5 + [68]), ($3 + [40]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $152($3, $7)
	
.LABEL $label$3
	CALL $153($3, $5)
	if ( ($0 == 0) ){ goto $label$1 }
	$7 = ((int_32)$6 < (int_32)$2)
	$6 = ($6 + [1])
	$5 = $0
	if ( $7 ){ goto $label$2 }
	
.LABEL $label$1
	$6 = *($3 + [24])
	if ( ($6 == 0) ){ goto $label$4 }
	$7 = ($3 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$8 }
	CALL $10($5)
	
.LABEL $label$8
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($3 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $6
	
.LABEL $label$5
	*($7) = $6
	CALL $10($0)
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $25(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $25(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9976])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9976])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9976])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $124(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [60]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9823])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9868])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [9918])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$13 }
	CALL $10(*(($5 + [56])))
	
.LABEL $label$13
	CALL $10($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$16 }
	CALL $10(*(($8 + [56])))
	
.LABEL $label$16
	CALL $10($8)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [64]))
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9199])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $8([72])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56]) = [0]
	*($5 + [60]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [48])
	CALL $168(($3 + [40]), ($3 + [32]))
	*($5 + [64]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $164(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $10(*(($1 + [56])))
	
.LABEL $label$11
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0)
	*($2) = *($1)
	*($2 + [12]) = ($3 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = ($3 + [12])
	*($2 + [20]) = ($3 + [24])
	CALL $132(($2 + [8]), $2)
	$3 = *($0)
	*($2) = *($1)
	*($2 + [12]) = ($3 + [40])
	*($2 + [8]) = ($3 + [32])
	*($2 + [16]) = ($3 + [48])
	*($2 + [20]) = ($3 + [56])
	*($2 + [24]) = ($3 + [64])
	*($2 + [28]) = ($3 + [80])
	*($2 + [32]) = ($3 + [96])
	*($2 + [36]) = ($3 + [104])
	*($2 + [40]) = ($3 + [120])
	*($2 + [44]) = ($3 + [128])
	$4 = ($3 + [136])
	CALL $133(($2 + [8]), $2)
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9976])
	$5 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $5, [8])
	$4 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9976])
	$4 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*(($3 + [144])) = *($2 + [8])
	*($5) = (*($5) + [8])
	CALL $124(*($1), ($3 + [152]))
	CALL $124(*($1), ($3 + [164]))
	CALL $124(*($1), ($3 + [176]))
	$global$0 = ($2 + [48])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	if ( ((int_32)*($7 + [60]) == (int_32)$1) ){ goto $label$6 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$6
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-3606981793854521344, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $104($1, $6)
	if ( ((int_32)*($7 + [60]) == (int_32)$1) ){ goto $label$2 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$2
	$2 = *($7 + [8])
	*(($5 = (($3 + [40]) + [8]))) = *(($7 + [40]))
	*($3 + [40]) = *($7 + [32])
	$8 = *($7 + [24])
	$9 = *($7 + [16])
	$6 = CALL $25(($3 + [24]), ($7 + [48]))
	*((($3 + [8]) + [8])) = *($5)
	*($3 + [8]) = *($3 + [40])
	CALL $58($2, $9, $8, ($3 + [8]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$7 }
	CALL $10(*($6 + [8]))
	
.LABEL $label$7
	$6 = CALL db_next_i64(*($7 + [64]), ($3 + [56]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	CALL $104($1, $6)
	
.LABEL $label$8
	CALL $105($1, $7)
	
.LABEL $label$1
	$global$0 = ($3 + [64])
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9976])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)*($1 + [8]) != (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert([0], [9976])
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [15]), $4, [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
	*(($5 + [16])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [224])
	$global$0 = $2
	*((($2 + [192]) + [8])) = *(($1 + [8]))
	*($2 + [192]) = *($1)
	$3 = CALL $25((($2 + [192]) + [12]), ($1 + [12]))
	*((($2 + [88]) + [8])) = *(($1 + [40]))
	*(($2 + [104])) = *(($1 + [48]))
	*(($2 + [112])) = *(($1 + [56]))
	*($2 + [216]) = *($1 + [24])
	*($2 + [88]) = *($1 + [32])
	$4 = CALL $25(($2 + [120]), ($1 + [64]))
	*((($2 + [88]) + [96])) = *(($1 + [128]))
	*((($2 + [88]) + [88])) = *(($1 + [120]))
	*((($2 + [88]) + [80])) = *(($1 + [112]))
	*(($2 + [160])) = *(($1 + [104]))
	*((($2 + [88]) + [64])) = *(($1 + [96]))
	*((($2 + [88]) + [56])) = *(($1 + [88]))
	*(($5 = (($2 + [72]) + [8]))) = *(($1 + [144]))
	*($2 + [136]) = *(($1 + [80]))
	*($2 + [72]) = *($1 + [136])
	$6 = CALL $25(($2 + [56]), ($1 + [152]))
	$7 = CALL $25(($2 + [40]), ($1 + [164]))
	$1 = CALL $25(($2 + [24]), ($1 + [176]))
	*((($2 + [8]) + [8])) = *($5)
	*($2 + [8]) = *($2 + [72])
	CALL $199($0, ($2 + [192]), ($2 + [88]), ($2 + [8]), $6, $7, $1)
	if ( (*($1) & [1]) ){ goto $label$9 }
	if ( (*($7) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $10(*($1 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $10(*($7 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($4) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $10(*($6 + [8]))
	if ( ((*($4) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL $10(*(($2 + [128])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [224])
	return 
	
.LABEL $label$1
	CALL $10(*(($2 + [212])))
	$global$0 = ($2 + [224])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $16(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $17(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $35($0, $1, $2, CALL $1($2))
}

int_32 .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $28($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $28($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $1($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $28($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $31($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $31($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $8($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $10($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $198 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$9 = ($global$0 - [80])
	$global$0 = $9
	$0 = *($0 + [4])
	$10 = *($0 + [4])
	$11 = (*($0) + int_32($10 >> [1]))
	$12 = *($0)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$12 = *((*($11) + $12))
	
.LABEL $label$1
	$10 = CALL $25(($9 + [64]), $4)
	*($9 + [56]) = [0]
	*($9 + [48]) = (int_64)0
	$0 = (*($5 + [4]) - *($5))
	if ( ($0 == 0) ){ goto $label$8 }
	$13 = int_32($0 >> [6])
	if ( ((uint_32)$13 >= (uint_32)[67108864]) ){ goto $label$7 }
	$4 = CALL $8($0)
	*((($9 + [48]) + [8])) = ($4 + ($13 << [6]))
	*($9 + [48]) = $4
	*($9 + [52]) = $4
	$5 = *(($5 + [4]))
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	*($4) = *($0)
	*(($4 + [8])) = *(($0 + [8]))
	CALL $25(($4 + [16]), ($0 + [16]))
	*(($4 + [56])) = *(($0 + [56]))
	*(($4 + [48])) = *(($0 + [48]))
	*(($4 + [40])) = *(($0 + [40]))
	*($4 + [32]) = *(($0 + [32]))
	$4 = (*($9 + [52]) + [64])
	*($9 + [52]) = $4
	$0 = ($0 + [64])
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	$5 = CALL $25($9, $8)
	$4 = CALL $25(($9 + [16]), $7)
	$0 = CALL $25(($9 + [32]), $6)
	CALL void $11((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $10), (int_32 ($9 + [48])), (int_32 $0), (int_32 $4), (int_32 $5), (int_32 $12))
	if ( (*($5) & [1]) ){ goto $label$11 }
	if ( (*($4) & [1]) ){ goto $label$10 }
	goto $label$6 
	
.LABEL $label$11
	CALL $10(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$10
	CALL $10(*($4 + [8]))
	if ( ((*($0) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	CALL $42(($9 + [48]))
	
.LABEL $label$6
	if ( (*($0) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	$5 = *($9 + [48])
	if ( ($5 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	CALL $10(*($0 + [8]))
	$5 = *($9 + [48])
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$0 = *($9 + [52])
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($0 + [-64])
	if ( ((*(($0 + [-48])) & [1]) == 0) ){ goto $label$15 }
	CALL $10(*(($0 + [-40])))
	
.LABEL $label$15
	$0 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$14 }
	$0 = *($9 + [48])
	goto $label$12 
	
.LABEL $label$13
	$0 = $5
	
.LABEL $label$12
	*($9 + [52]) = $5
	CALL $10($0)
	
.LABEL $label$2
	if ( ((*($10) & [1]) == 0) ){ goto $label$16 }
	CALL $10(*($10 + [8]))
	
.LABEL $label$16
	$global$0 = ($9 + [80])
	(unreachable)
}

void .FUNC $199 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$7 = ($global$0 - [80])
	$global$0 = $7
	$0 = *($0 + [4])
	$8 = *($0 + [4])
	$9 = (*($0) + int_32($8 >> [1]))
	$10 = *($0)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$10 = *((*($9) + $10))
	
.LABEL $label$1
	*(($8 = (($7 + [64]) + [8]))) = *(($3 + [8]))
	*($7 + [64]) = *($3)
	$3 = CALL $25(($7 + [48]), $4)
	$0 = CALL $25(($7 + [32]), $5)
	$4 = CALL $25(($7 + [16]), $6)
	*(($7 + [8])) = *($8)
	*($7) = *($7 + [64])
	CALL void $9((int_32 $1), (int_32 $2), (int_32 $7), (int_32 $3), (int_32 $0), (int_32 $4), (int_32 $10))
	if ( (*($4) & [1]) ){ goto $label$6 }
	if ( (*($0) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $10(*($4 + [8]))
	if ( ((*($0) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $10(*($0 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($3) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($7 + [80])
	return 
	
.LABEL $label$2
	CALL $10(*($3 + [8]))
	$global$0 = ($7 + [80])
}

void .FUNC $196 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $197 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $194 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$4 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-8272242484608761856, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $152($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $192(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	*(($3 + [16])) = $4
	if ( (uint_64)($4 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [9568])
	$4 = *(($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*(($3 + [16])) = (int_64)0
	
.LABEL $label$1
	*($1) = $4
	$3 = *($0 + [4])
	$4 = *($3)
	*(($1 + [24])) = *(($3 + [8]))
	*($1 + [16]) = $4
	$6 = *(*($0 + [8]))
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$4 = $7
	$5 = $3
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$4 = $7
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $5 ){ goto $label$9 }
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [8951])
	
.LABEL $label$5
	*($1 + [32]) = (int_64)0
	*(($1 + [40])) = $6
	$3 = *($0 + [12])
	*($1 + [48]) = *($3)
	*(($1 + [56])) = *(($3 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $195 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9976])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($6, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($6 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($6, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [8]), $5, [8])
	*($6 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($6, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy(($2 + [8]), $5, [8])
	*($6 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($6, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy(($2 + [8]), $5, [8])
	*($6 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [9976])
	$5 = *(($4 + [4]))
	
.LABEL $label$12
	CALL memcpy($6, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [28])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [9976])
	$1 = *(($0 + [4]))
	
.LABEL $label$13
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $192 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [68]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [9674])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-8272242484608761856)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [9620])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [9620])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $152(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $193 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = *($0)
	if ( ((int_64)*($2 + [8]) == (int_64)*(($1 + [40]))) ){ goto $label$1 }
	CALL eosio_assert([0], [8971])
	
.LABEL $label$1
	$3 = ((int_64)*($1 + [32]) + (int_64)*($2))
	*($1 + [32]) = $3
	if ( ((int_64)$3 > (int_64)-4611686018427387904) ){ goto $label$2 }
	CALL eosio_assert([0], [9014])
	$3 = *(($1 + [32]))
	
.LABEL $label$2
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$3 }
	CALL eosio_assert([0], [9033])
	
.LABEL $label$3
	$0 = *($0 + [4])
	if ( ((int_64)*($0 + [8]) == (int_64)*(($1 + [56]))) ){ goto $label$4 }
	CALL eosio_assert([0], [8971])
	
.LABEL $label$4
	$3 = ((int_64)*($1 + [48]) + (int_64)*($0))
	*($1 + [48]) = $3
	if ( ((int_64)$3 <= (int_64)-4611686018427387904) ){ goto $label$7 }
	if ( ((int_64)$3 >= (int_64)4611686018427387904) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [9014])
	if ( ((int_64)*(($1 + [48])) < (int_64)4611686018427387904) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([0], [9033])
	return 
	
.LABEL $label$5
}

void .FUNC $190 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$4 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-8272242484608761856, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $152($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $192(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	*(($3 + [16])) = $4
	if ( (uint_64)($4 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [9568])
	$4 = *(($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*(($3 + [16])) = (int_64)0
	
.LABEL $label$1
	*($1) = $4
	$3 = *($0 + [4])
	$4 = *($3)
	*(($1 + [24])) = *(($3 + [8]))
	*($1 + [16]) = $4
	$6 = *(*($0 + [8]))
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$4 = $7
	$5 = $3
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$4 = $7
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $5 ){ goto $label$9 }
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [8951])
	
.LABEL $label$5
	*($1 + [32]) = (int_64)0
	*(($1 + [40])) = $6
	$6 = *(*(($0 + [8])))
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$4 = $7
	$5 = $3
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$4 = $7
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $5 ){ goto $label$14 }
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	CALL eosio_assert([0], [8951])
	
.LABEL $label$10
	*($1 + [48]) = (int_64)0
	*(($1 + [56])) = $6
	$global$0 = ($2 + [16])
}

void .FUNC $191 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[15]) ){ goto $label$2 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [16])
	*(($4 = ($4 + [4]))) = (*($4) + [16])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9094])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9094])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$5 = *($0 + [12])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9094])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($1, $5, [8])
	$4 = (*($1) + [8])
	*(($1 = ($0 + [4]))) = $4
	*($2 + [8]) = *($5 + [8])
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9094])
	$4 = *($1)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [8]), [8])
	*($1) = (*($1) + [8])
	$global$0 = ($2 + [16])
}