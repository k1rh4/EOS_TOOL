(data (i32.const 4) "\f0Q\00\00")
(data (i32.const 16) "account\00")
(data (i32.const 32) "withdraw:\00")
(data (i32.const 48) "quantity:\00")
(data (i32.const 64) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 128) "user does not exist\00")
(data (i32.const 160) "integer overflow adding withdraw balance\00")
(data (i32.const 208) "cannot pass end iterator to modify\00")
(data (i32.const 256) "object passed to modify is not in multi_index\00")
(data (i32.const 304) "cannot modify objects in table of another contract\00")
(data (i32.const 368) "updater cannot change primary key when modifying an object\00")
(data (i32.const 432) "write\00")
(data (i32.const 448) "active\00")
(data (i32.const 464) "eosio.token\00")
(data (i32.const 480) "transfer\00")
(data (i32.const 512) "_this_contract\00")
(data (i32.const 528) "withdraw action send: from\00")
(data (i32.const 560) "withdraw action send: to\00")
(data (i32.const 592) "withdraw action send: quantity\00")
(data (i32.const 624) "error reading iterator\00")
(data (i32.const 656) "read\00")
(data (i32.const 672) "on\n\00")
(data (i32.const 688) "from:\00")
(data (i32.const 704) "\n\00")
(data (i32.const 720) "to:\00")
(data (i32.const 736) "amount:\00")
(data (i32.const 752) "memo:\00")
(data (i32.const 768) "code:\00")
(data (i32.const 784) "transfer not from eosio.token\00")
(data (i32.const 816) "transfer not made to this contract\00")
(data (i32.const 864) "quantity must be greater than minimum amount\00")
(data (i32.const 912) "invalid quantity\00")
(data (i32.const 944) "price:\00")
(data (i32.const 960) "cannot create objects in table of another contract\00")
(data (i32.const 1024) "integer overflow adding user balance total\00")
(data (i32.const 1072) "integer overflow adding user balance balance\00")
(data (i32.const 1120) "cannot increment end iterator\00")
(data (i32.const 1152) "integer overflow adding team reward total\00")
(data (i32.const 1200) "integer overflow adding team reward balance\00")
(data (i32.const 1248) "find user:\00")
(data (i32.const 1264) "integer underflow subtracting purchase amount\00")
(data (i32.const 1312) "integer overflow adding price increment\00")
(data (i32.const 1360) "integer overflow adding new keys\00")
(data (i32.const 1408) "update tables keys:\00")
(data (i32.const 1440) "integer overflow adding player amount\00")
(data (i32.const 1488) "update tables amount:\00")
(data (i32.const 1520) "on finish()\n\00")
(data (i32.const 1536) "integer overflow adding counter balance\00")
(data (i32.const 1584) "integer overflow adding pot\00")
(data (i32.const 1616) "integer overflow adding sold_keys\00")
(data (i32.const 1664) "ping\n\00")
(data (i32.const 1680) "winner :\00")
(data (i32.const 1696) "integer overflow adding winner total\00")
(data (i32.const 1744) "total :\00")
(data (i32.const 1760) "integer overflow adding winner balance\00")
(data (i32.const 1808) "balance :\00")
(data (i32.const 1824) "cannot pass end iterator to erase\00")
(data (i32.const 1872) "object passed to erase is not in multi_index\00")
(data (i32.const 1920) "cannot erase objects in table of another contract\00")
(data (i32.const 1984) "attempt to remove object that was not in multi_index\00")
(data (i32.const 2048) "hi()\n\00")
(data (i32.const 2064) "0.0001 EOS\00")
(data (i32.const 2080) "erase()\n\00")
(data (i32.const 2096) "apply contract:\00")
(data (i32.const 2112) "apply act:\00")
(data (i32.const 2128) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 2192) "invalid symbol name\00")
(data (i32.const 2224) "get\00")
(data (i32.const 10640) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$12 (param i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "printdf" (func $fimport$14 (param f64)))
(import "env" "printi" (func $fimport$15 (param i64)))
(import "env" "printn" (func $fimport$16 (param i64)))
(import "env" "prints" (func $fimport$17 (param i32)))
(import "env" "prints_l" (func $fimport$18 (param i32 i32)))
(import "env" "printui" (func $fimport$19 (param i64)))
(import "env" "read_action_data" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$21 (param i64)))
(import "env" "require_auth2" (func $fimport$22 (param i64 i64)))
(import "env" "send_inline" (func $fimport$23 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z9price_incy" (func $5))
(export "_ZN14grab_the_bench8withdrawEyN5eosio5assetE" (func $6))
(export "_ZN14grab_the_bench2onERKN5eosio8currency8transferEy" (func $15))
(export "_ZN14grab_the_bench4pingEv" (func $16))
(export "_ZN14grab_the_bench2hiEy" (func $26))
(export "_ZN14grab_the_bench5eraseEv" (func $28))
(export "_ZN14grab_the_bench8maintainEv" (func $30))
(export "_ZN14grab_the_bench5applyEyy" (func $31))
(export "apply" (func $38))
(export "memcmp" (func $41))
(export "strlen" (func $42))
(export "malloc" (func $48))
(export "free" (func $51))
(table $0 5 5 anyfunc)
(elem (i32.const 0) $52 $16 $26 $30 $28)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [624])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $43([40])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [656])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [656])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [656])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $19(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $44($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $43(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $44($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $44($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $39 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	*($0) = $1
	*($0 + [8]) = $1
	*($0 + [16]) = $1
	*(($0 + [24])) = $1
	*(($0 + [32])) = (int_64)-1
	*(($0 + [40])) = [0]
	*($4 + [24]) = $1
	*(($0 + [44])) = [0]
	*(($0 + [48])) = [0]
	*($0 + [56]) = $1
	*(($0 + [64])) = $1
	*(($0 + [72])) = (int_64)-1
	*(($0 + [80])) = [0]
	*(($0 + [84])) = [0]
	*(($0 + [88])) = [0]
	*($0 + [96]) = $1
	*(($0 + [104])) = $1
	*(($0 + [112])) = (int_64)-1
	*(($0 + [120])) = [0]
	*(($0 + [124])) = [0]
	*(($0 + [128])) = [0]
	$2 = ($0 + [96])
	$3 = CALL db_lowerbound_i64($1, $1, (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $17($2, $3)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [16]) = ($4 + [24])
	CALL $40(($4 + [8]), $2, $1, ($4 + [16]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1872])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1920])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1984])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $44($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $44($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC _ZN14grab_the_bench5eraseEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL prints([2080])
	CALL require_auth(*($0 + [8]))
	$4 = CALL db_lowerbound_i64(*($0 + [96]), *(($0 + [104])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$1 = ($0 + [96])
	$3 = CALL $17($1, $4)
	
.LOOP $label$2:
	CALL eosio_assert([1], [1824])
	CALL eosio_assert([1], [1120])
	$4 = [0]
	$2 = CALL db_next_i64(*($3 + [68]), ($5 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $17($1, $2)
	
.LABEL $label$3
	CALL $24($1, $3)
	$3 = $4
	if ( $4 ){ goto $label$2 }
	
.LABEL $label$1
	$4 = CALL db_lowerbound_i64(*($0 + [56]), *(($0 + [64])), (int_64)-6030912129153084416, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$1 = ($0 + [56])
	$3 = CALL $18($1, $4)
	
.LOOP $label$5:
	CALL eosio_assert([1], [1824])
	CALL eosio_assert([1], [1120])
	$4 = [0]
	$2 = CALL db_next_i64(*($3 + [28]), ($5 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$4 = CALL $18($1, $2)
	
.LABEL $label$6
	CALL $25($1, $3)
	$3 = $4
	if ( $4 ){ goto $label$5 }
	
.LABEL $label$4
	$4 = CALL db_lowerbound_i64(*($0 + [16]), *(($0 + [24])), (int_64)-3020380869172259840, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$1 = ($0 + [16])
	$3 = CALL $7($1, $4)
	
.LOOP $label$8:
	CALL eosio_assert([1], [1824])
	CALL eosio_assert([1], [1120])
	$4 = [0]
	$2 = CALL db_next_i64(*($3 + [28]), ($5 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $7($1, $2)
	
.LABEL $label$9
	CALL $29($1, $3)
	$3 = $4
	if ( $4 ){ goto $label$8 }
	
.LABEL $label$7
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	float_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [256])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [304])
	$4 = *($1)
	$5 = *(*($3))
	if ( (((float_64)$5 < (float_64)(float_64)1) | ((float_64)$5 != (float_64)$5)) ){ goto $label$1 }
	*($1 + [8]) = *(*($3 + [4]))
	$7 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [16]) = $7
	$6 = ((int_64)*($1 + [24]) + (int_64)10)
	$7 = ((int_64)$7 + (int_64)28800)
	*($1 + [24]) = ( $7 ? $6 : (uint_64)($7 <= $6) )
	
.LABEL $label$1
	$7 = *($1 + [32])
	CALL eosio_assert(((uint_64)((int_64)*(*($3 + [8]) + [16]) + (int_64)$7) > (uint_64)$7), [1536])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3 + [8]) + [16]))
	$7 = *($1 + [40])
	CALL eosio_assert(((uint_64)(int_64))((int_64))(((int_64)*(*($3 + [8]) + [16]) + (int_64)$7) - *(*($3 + [12]))) - *(*($3 + [16]))) > (uint_64)$7), [1584])
	*($1 + [40]) = ((int_64))((int_64))(*(*($3 + [8]) + [16]) - *(*($3 + [12]))) - *(*($3 + [16]))) + (int_64)*($1 + [40]))
	$5 = *($1 + [48])
	CALL eosio_assert(((float_64)((float_64)$5 + (float_64)*(*($3))) > (float_64)$5), [1616])
	*($1 + [48]) = ((float_64)*(*($3)) + (float_64)*($1 + [48]))
	*($1 + [56]) = *(*($3 + [20]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [368])
	$9 = $9
	$3 = ($9 + [-64])
	*([0] + [4]) = $3
	*($8 + [4]) = $3
	*($8) = $3
	*($8 + [8]) = $9
	CALL $21($8, $1)
	CALL db_update_i64(*($1 + [68]), $2, $3, [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $43(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $44($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $44($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [656])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1872])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1920])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1984])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $44($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $44($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1872])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1920])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1984])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $44($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $44($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = *($1 + [16])
	$6 = ( *(($1 + [20])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ([-16] - $6)
	$4 = (CASTING uint_64)(uint_32 $6)
	$2 = ($1 + [16])
	
.LOOP $label$1:
	$5 = ($5 + [-1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$6 = *($1 + [28])
	$6 = ( *(($1 + [32])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$5 = ($5 - $6)
	$4 = (CASTING uint_64)(uint_32 $6)
	$3 = ($1 + [28])
	
.LOOP $label$2:
	$5 = ($5 + [-1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	$6 = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL $8($0, ([0] - $5))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	*($7) = $5
	*($7 + [8]) = $6
	CALL eosio_assert(((int_32)($6 - $5) > (int_32)[7]), [432])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($6 - $0) > (int_32)[7]), [432])
	CALL memcpy($0, ($1 + [8]), [8])
	*($7 + [4]) = ($5 + [16])
	CALL $13($7, $2)
	CALL $13($7, $3)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC _ZN14grab_the_bench2hiEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	CALL prints([2048])
	$2 = *($0 + [8])
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [448]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$6 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [464]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$12 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$3 = ($3 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$7 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [480]
	$11 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$18 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$3 = ($3 + [165])
	goto $label$16 
	
.LABEL $label$18
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$14
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$13 }
	*(($12 + [24])) = [0]
	*($12 + [16]) = (int_64)0
	$5 = CALL strlen([2064])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$23 }
	*($12 + [16]) = ($5 << [1])
	$3 = (($12 + [16]) | [1])
	if ( $5 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$4 = (($5 + [16]) & [-16])
	$3 = CALL $43($4)
	*($12 + [16]) = ($4 | [1])
	*($12 + [24]) = $3
	*($12 + [20]) = $5
	
.LABEL $label$22
	CALL memcpy($3, [2064], $5)
	
.LABEL $label$21
	*(($3 + $5)) = [0]
	*(($12 + [8])) = [0]
	*($12) = (int_64)0
	$5 = CALL strlen([496])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$26 }
	*($12) = ($5 << [1])
	$3 = ($12 | [1])
	if ( $5 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$4 = (($5 + [16]) & [-16])
	$3 = CALL $43($4)
	*($12) = ($4 | [1])
	*($12 + [8]) = $3
	*($12 + [4]) = $5
	
.LABEL $label$25
	CALL memcpy($3, [496], $5)
	
.LABEL $label$24
	*(($3 + $5)) = [0]
	*((($12 + [32]) + [20])) = *($12 + [20])
	*($12 + [40]) = $1
	$5 = (($12 + [16]) + [8])
	*((($12 + [32]) + [24])) = *($5)
	*($12 + [32]) = *(($0 + [8]))
	*($12 + [48]) = *($12 + [16])
	*($12 + [16]) = [0]
	*($12 + [20]) = [0]
	*($5) = [0]
	$5 = ($12 + [8])
	*(($12 + [68])) = *($5)
	$7 = *($12)
	*($12) = [0]
	*($12 + [60 align=4]) = $7
	*($12 + [4]) = [0]
	*($5) = [0]
	*($12 + [72]) = $10
	*($12 + [80]) = $11
	*(($5 = CALL $43([16]))) = $2
	*($5 + [8]) = $8
	$3 = ($5 + [16])
	*((($12 + [72]) + [24])) = $3
	*((($12 + [72]) + [20])) = $3
	*($12 + [88]) = $5
	CALL $27(($12 + [100]), ($12 + [32]))
	CALL $10(($12 + [112]), ($12 + [72]))
	$5 = *($12 + [112])
	CALL send_inline($5, (*($12 + [116]) - $5))
	$5 = *($12 + [112])
	if ( ($5 == 0) ){ goto $label$27 }
	*($12 + [116]) = $5
	CALL $44($5)
	
.LABEL $label$27
	$5 = *($12 + [100])
	if ( ($5 == 0) ){ goto $label$28 }
	*(($12 + [104])) = $5
	CALL $44($5)
	
.LABEL $label$28
	$5 = *($12 + [88])
	if ( ($5 == 0) ){ goto $label$29 }
	*(($12 + [92])) = $5
	CALL $44($5)
	
.LABEL $label$29
	if ( ((*(($12 + [60])) & [1]) == 0) ){ goto $label$30 }
	CALL $44(*(($12 + [68])))
	
.LABEL $label$30
	if ( ((*(($12 + [48])) & [1]) == 0) ){ goto $label$31 }
	CALL $44(*(($12 + [56])))
	
.LABEL $label$31
	if ( ((*($12) & [1]) == 0) ){ goto $label$32 }
	CALL $44(*(($12 + [8])))
	
.LABEL $label$32
	if ( ((*($12 + [16]) & [1]) == 0) ){ goto $label$33 }
	CALL $44(*(($12 + [24])))
	
.LABEL $label$33
	*([0] + [4]) = ($12 + [128])
	return (unreachable)
	
.LABEL $label$20
	CALL $45(($12 + [16]))
	
.LABEL $label$19
	CALL $45($12)
	(unreachable)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $50($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10640])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $49([2232], $0)
}

int_32 .FUNC $43 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [2228])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [960])
	$4 = CALL $43([80])
	$5 = CALL current_time()
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)5000
	*($4 + [64]) = $1
	$5 = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($4 + [16]) = $5
	*($4 + [24]) = ((int_64)$5 + (int_64)28800)
	$3 = *($3)
	*($4) = *($3)
	*($4 + [8]) = *($3)
	*($8 + [88]) = (($8 + [16]) + [64])
	*($8 + [84]) = ($8 + [16])
	*($8 + [80]) = ($8 + [16])
	CALL $21(($8 + [80]), $4)
	$5 = *($4)
	*($4 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)4986958866982895616, $2, $5, ($8 + [16]), [64])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [80]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [68])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [80]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $23(($1 + [24]), ($8 + [80]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [80])
	*($8 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $44($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [96])
}

void .FUNC $47 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $43(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $44($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $45 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $44 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10616])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10424]
	$1 = (((int_32)$2 * (int_32)[12]) + [10424])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $43($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $47($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $44($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $13(*($1), ($0 + [32]))
}

void .FUNC _ZN14grab_the_bench8withdrawEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [144])
	*([0] + [4]) = $15
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL prints([32])
	CALL printui($10)
	CALL prints([48])
	$9 = *($2)
	CALL printi($9)
	$4 = *(($0 + [40]))
	$12 = *(($0 + [44]))
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$7 }
	$7 = ($12 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$8:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$7 }
	$12 = $7
	$3 = ($7 + [-24])
	$7 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$3 = ($0 + [16])
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$10 }
	$7 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [64])
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	$12 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020380869172259840, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$9 }
	$7 = CALL $7($3, $12)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [64])
	
.LABEL $label$9
	$12 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($12, [128])
	CALL eosio_assert(((uint_64)((int_64)*($7 + [16]) + (int_64)$9) > (uint_64)$9), [160])
	*($2) = ((int_64)$9 + (int_64)*($7 + [16]))
	$8 = *($0 + [8])
	CALL eosio_assert($12, [208])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [256])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [304])
	$9 = (int_64)0
	*($7 + [16]) = (int_64)0
	$11 = *($7)
	CALL eosio_assert([1], [368])
	CALL eosio_assert([1], [432])
	CALL memcpy(($15 + [16]), $7, [8])
	CALL eosio_assert([1], [432])
	CALL memcpy((($15 + [16]) | [8]), ($7 + [8]), [8])
	CALL eosio_assert([1], [432])
	CALL memcpy((($15 + [16]) + [16]), ($7 + [16]), [8])
	CALL db_update_i64(*($7 + [28]), $8, ($15 + [16]), [24])
	$7 = ($0 + [32])
	if ( (uint_64)($11 <= *($7)) ){ goto $label$11 }
	*($7) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$6 = *(($0 + [8]))
	$8 = (int_64)59
	$7 = [448]
	$10 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$17 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$3 = ($3 + [165])
	goto $label$15 
	
.LABEL $label$17
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$13
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$12 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [464]
	$13 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$23 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$3 = ($3 + [165])
	goto $label$21 
	
.LABEL $label$23
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$19
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$13 = ((int_64)$11 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$18 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [480]
	$14 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$29 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$3 = ($3 + [165])
	goto $label$27 
	
.LABEL $label$29
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$25
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$14 = ((int_64)$11 | (int_64)$14)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$24 }
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$7 = CALL strlen([496])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$33 }
	*($15) = ($7 << [1])
	$3 = ($15 | [1])
	if ( $7 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$12 = (($7 + [16]) & [-16])
	$3 = CALL $43($12)
	*($15) = ($12 | [1])
	*($15 + [8]) = $3
	*($15 + [4]) = $7
	
.LABEL $label$32
	CALL memcpy($3, [496], $7)
	
.LABEL $label$31
	*(($3 + $7)) = [0]
	*((($15 + [16]) + [28])) = *(($2 + [12]))
	*((($15 + [16]) + [24])) = *(($2 + [8]))
	*((($15 + [16]) + [20])) = *(($2 + [4]))
	*($15 + [24]) = $1
	*($15 + [16]) = *(($0 + [8]))
	*($15 + [32]) = *($2)
	$7 = ($15 + [8])
	*(($15 + [56])) = *($7)
	*($15 + [48]) = *($15)
	*($15) = [0]
	*($15 + [4]) = [0]
	*($7) = [0]
	*($15 + [72]) = $13
	*($15 + [80]) = $14
	*(($7 = CALL $43([16]))) = $6
	*($7 + [8]) = $10
	*((($15 + [72]) + [32])) = [0]
	$3 = ($7 + [16])
	*((($15 + [72]) + [24])) = $3
	*((($15 + [72]) + [20])) = $3
	*($15 + [88]) = $7
	*($15 + [100]) = [0]
	*((($15 + [72]) + [36])) = [0]
	$7 = *($15 + [48])
	$3 = ( *((($15 + [16]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($3 + [32])
	$9 = (CASTING uint_64)(uint_32 $3)
	$3 = (($15 + [72]) + [28])
	
.LOOP $label$34:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$34 }
	if ( ($7 == 0) ){ goto $label$36 }
	CALL $8($3, $7)
	$3 = *(($15 + [104]))
	$7 = *(($15 + [100]))
	goto $label$35 
	
.LABEL $label$36
	$3 = [0]
	$7 = [0]
	
.LABEL $label$35
	*($15 + [132]) = $7
	*($15 + [128]) = $7
	*($15 + [136]) = $3
	*($15 + [112]) = ($15 + [128])
	*($15 + [120]) = ($15 + [16])
	CALL $9(($15 + [120]), ($15 + [112]))
	CALL $10(($15 + [128]), ($15 + [72]))
	$7 = *($15 + [128])
	CALL send_inline($7, (*($15 + [132]) - $7))
	$7 = *($15 + [128])
	if ( ($7 == 0) ){ goto $label$37 }
	*($15 + [132]) = $7
	CALL $44($7)
	
.LABEL $label$37
	$7 = *($15 + [100])
	if ( ($7 == 0) ){ goto $label$38 }
	*(($15 + [104])) = $7
	CALL $44($7)
	
.LABEL $label$38
	$7 = *($15 + [88])
	if ( ($7 == 0) ){ goto $label$39 }
	*(($15 + [92])) = $7
	CALL $44($7)
	
.LABEL $label$39
	if ( ((*(($15 + [48])) & [1]) == 0) ){ goto $label$40 }
	CALL $44(*(($15 + [56])))
	
.LABEL $label$40
	if ( ((*($15) & [1]) == 0) ){ goto $label$41 }
	CALL $44(*(($15 + [8])))
	
.LABEL $label$41
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [512]
	$10 = (int_64)0
	
.LOOP $label$42:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)13) ){ goto $label$44 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$3 = ($3 + [165])
	goto $label$45 
	
.LABEL $label$46
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$44 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$43 
	
.LABEL $label$44
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$43
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$42 }
	CALL prints([528])
	CALL printui($10)
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$52 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$3 = ($3 + [165])
	goto $label$50 
	
.LABEL $label$52
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$48
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$47 }
	CALL prints([560])
	CALL printui($10)
	CALL prints([592])
	CALL printi(*($2))
	*([0] + [4]) = ($15 + [144])
	return (unreachable)
	
.LABEL $label$30
	CALL $45($15)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [624])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $43([40])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [656])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [656])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [656])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $14(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $44($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_64 .FUNC _Z9price_incy (int_64 $0)
{
	return (int_64)1
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $43(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $44($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $44($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN14grab_the_bench2onERKN5eosio8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	float_64 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	$26 = (*([0] + [4]) - [112])
	*([0] + [4]) = $26
	CALL prints([672])
	$9 = *($1 + [8])
	$19 = *($1)
	CALL prints([688])
	CALL printn($19)
	CALL prints([704])
	CALL prints([720])
	CALL printn($9)
	CALL prints([704])
	CALL prints([736])
	CALL printi(*($1 + [16]))
	CALL prints([704])
	CALL prints([752])
	$24 = *($1 + [32])
	$12 = ($24 & [1])
	CALL prints_l(( *(($1 + [40])) ? ($1 + [33]) : $12 ), ( *(($1 + [36])) ? uint_32($24 >> [1]) : $12 ))
	CALL prints([704])
	CALL prints([768])
	CALL printn($2)
	CALL prints([704])
	CALL _ZN14grab_the_bench4pingEv($0)
	if ( ((int_64)*($1) == (int_64)*($0 + [8])) ){ goto $label$1 }
	$25 = ($1 + [16])
	$9 = (int_64)0
	$17 = (int_64)59
	$24 = [464]
	$18 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$7 }
	$12 = *($24)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$12 = ($12 + [165])
	goto $label$5 
	
.LABEL $label$7
	$19 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$3
	$24 = ($24 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$18 = ((int_64)$19 | (int_64)$18)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$2 }
	CALL eosio_assert(((int_64)$18 == (int_64)$2), [784])
	CALL eosio_assert(((int_64)*(($1 + [8])) == (int_64)*(($0 + [8]))), [816])
	$9 = *(($1 + [16]))
	if ( ((int_64)$9 != (int_64)1) ){ goto $label$8 }
	*(($24 = (($26 + [64]) + [12]))) = *(($25 + [12]))
	*(($12 = (($26 + [64]) + [8]))) = *(($25 + [8]))
	*($26 + [64]) = *($25)
	*($26 + [68]) = *(($25 + [4]))
	$9 = *($1)
	*((($26 + [8]) + [12])) = *($24)
	*((($26 + [8]) + [8])) = *($12)
	*($26 + [12]) = *($26 + [68])
	*($26 + [8]) = *($26 + [64])
	CALL _ZN14grab_the_bench8withdrawEyN5eosio5assetE($0, $9, ($26 + [8]))
	goto $label$1 
	
.LABEL $label$8
	CALL eosio_assert(((uint_64)$9 > (uint_64)(int_64)4999), [864])
	$20 = [0]
	$12 = [0]
	if ( ((uint_64)((int_64)*($25) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$9 = (uint_64)*(($1 + [24])) >> (uint_64)(int_64)8)
	$24 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$12 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$12 = [0]
	
.LABEL $label$9
	CALL eosio_assert($12, [912])
	*($26 + [56]) = *($1)
	$3 = ($0 + [96])
	$19 = *(($1 + [16]))
	$9 = (int_64)0
	$24 = CALL db_lowerbound_i64(*($0 + [96]), *(($0 + [104])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$14 }
	$20 = CALL $17($3, $24)
	
.LABEL $label$14
	$17 = *($20 + [56])
	*($26 + [48]) = $17
	CALL prints([944])
	CALL printui($17)
	CALL prints([704])
	$4 = ($0 + [56])
	$24 = ($0 + [64])
	$12 = CALL db_lowerbound_i64(*($0 + [56]), *($24), (int_64)-6030912129153084416, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$15 }
	CALL $18($4, $12)
	$9 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $19) * (float_64)(float_64)0.45))
	
.LABEL $label$15
	*($26 + [40]) = $9
	$24 = CALL db_lowerbound_i64(*($4), *($24), (int_64)-6030912129153084416, (int_64)0)
	if ( ((int_32)$24 <= (int_32)[-1]) ){ goto $label$17 }
	$21 = ($0 + [40])
	$7 = ($0 + [44])
	$22 = ($0 + [16])
	$23 = CALL $18($4, $24)
	$6 = (($26 + [80]) + [16])
	$5 = (($26 + [80]) | [8])
	$13 = ($20 + [48])
	$15 = ($0 + [24])
	$16 = ($0 + [32])
	
.LOOP $label$18:
	$8 = ((float_64)*($23 + [8]) / (float_64)*($13))
	$14 = (CASTING float_64)(uint_64 $9)
	$9 = *($23)
	$10 = *($21)
	$25 = *($7)
	if ( ((int_32)$25 == (int_32)$10) ){ goto $label$19 }
	$24 = ($25 + [-24])
	$11 = ([0] - $10)
	
.LOOP $label$20:
	if ( ((int_64)*(*($24)) == (int_64)$9) ){ goto $label$19 }
	$25 = $24
	$12 = ($24 + [-24])
	$24 = $12
	if ( ((int_32)($12 + $11) != (int_32)[-24]) ){ goto $label$20 }
	
.LABEL $label$19
	$8 = ((float_64)$14 * (float_64)$8)
	if ( ((int_32)$25 == (int_32)$10) ){ goto $label$23 }
	$24 = *(($25 + [-24]))
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$22), [64])
	if ( $24 ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	$24 = CALL db_find_i64(*(($0 + [16])), *($15), (int_64)-3020380869172259840, $9)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$22 }
	$24 = CALL $7($22, $24)
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$22), [64])
	goto $label$21 
	
.LABEL $label$22
	$17 = *(($0 + [8]))
	CALL eosio_assert(((int_64)*($22) == (int_64)CALL $fimport$2()), [960])
	*(($24 = CALL $43([40])) + [16]) = (int_64)0
	*($24 + [8]) = (int_64)0
	*($24 + [24]) = $22
	$9 = *($23)
	*($24) = $9
	CALL prints([944])
	CALL printn($9)
	CALL prints([704])
	CALL eosio_assert([1], [432])
	CALL memcpy(($26 + [80]), $24, [8])
	CALL eosio_assert([1], [432])
	CALL memcpy($5, ($24 + [8]), [8])
	CALL eosio_assert([1], [432])
	CALL memcpy($6, ($24 + [16]), [8])
	$9 = *($24)
	$25 = CALL db_store_i64(*($15), (int_64)-3020380869172259840, $17, $9, ($26 + [80]), [24])
	*($24 + [28]) = $25
	if ( (uint_64)($9 <= *($16)) ){ goto $label$24 }
	*($16) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	*($26 + [32]) = $24
	$9 = *($24)
	*($26 + [80]) = $9
	*($26 + [24]) = $25
	$12 = *(($0 + [44]))
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [48]))) ){ goto $label$26 }
	*($12 + [8]) = $9
	*($12 + [16]) = $25
	*($26 + [32]) = [0]
	*($12) = $24
	*($7) = ($12 + [24])
	goto $label$25 
	
.LABEL $label$26
	CALL $14($21, ($26 + [32]), ($26 + [80]), ($26 + [24]))
	
.LABEL $label$25
	$12 = *($26 + [32])
	*($26 + [32]) = [0]
	if ( ($12 == 0) ){ goto $label$21 }
	CALL $44($12)
	
.LABEL $label$21
	$17 = *(($0 + [8]))
	CALL eosio_assert(((int_32)$24 != (int_32)[0]), [208])
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$22), [256])
	CALL eosio_assert(((int_64)*($22) == (int_64)CALL $fimport$2()), [304])
	$9 = *($24)
	$14 = (CASTING float_64)(uint_64 *($24 + [8]))
	CALL eosio_assert(((float_64)((float_64)$8 + (float_64)$14) > (float_64)$14), [1024])
	*($24 + [8]) = (Rounds 0)(((float_64)$8 + (float_64)(CASTING float_64)(uint_64 *($24 + [8]))))
	$14 = (CASTING float_64)(uint_64 *($24 + [16]))
	CALL eosio_assert(((float_64)((float_64)$8 + (float_64)$14) > (float_64)$14), [1072])
	*($24 + [16]) = (Rounds 0)(((float_64)$8 + (float_64)(CASTING float_64)(uint_64 *($24 + [16]))))
	CALL eosio_assert(((int_64)$9 == (int_64)*($24)), [368])
	CALL eosio_assert([1], [432])
	CALL memcpy(($26 + [80]), $24, [8])
	CALL eosio_assert([1], [432])
	CALL memcpy($5, ($24 + [8]), [8])
	CALL eosio_assert([1], [432])
	CALL memcpy($6, ($24 + [16]), [8])
	CALL db_update_i64(*($24 + [28]), $17, ($26 + [80]), [24])
	if ( (uint_64)($9 <= *($16)) ){ goto $label$27 }
	*($16) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$27
	CALL eosio_assert([1], [1120])
	$24 = CALL db_next_i64(*($23 + [28]), ($26 + [80]))
	if ( ((int_32)$24 <= (int_32)[-1]) ){ goto $label$16 }
	$23 = CALL $18($4, $24)
	$9 = *($26 + [40])
	goto $label$18 
	
.LABEL $label$17
	$21 = ($0 + [40])
	$7 = ($0 + [44])
	$22 = ($0 + [16])
	
.LABEL $label$16
	*($26 + [32]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $19) * (float_64)(float_64)0.05))
	$23 = *($21)
	$25 = *($7)
	if ( ((int_32)$25 == (int_32)$23) ){ goto $label$28 }
	$24 = ($25 + [-24])
	$11 = ([0] - $23)
	
.LOOP $label$29:
	if ( ((int_64)*(*($24)) == (int_64)6138860560169325968) ){ goto $label$28 }
	$25 = $24
	$12 = ($24 + [-24])
	$24 = $12
	if ( ((int_32)($12 + $11) != (int_32)[-24]) ){ goto $label$29 }
	
.LABEL $label$28
	if ( ((int_32)$25 == (int_32)$23) ){ goto $label$33 }
	$24 = *(($25 + [-24]))
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$22), [64])
	if ( $24 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$24 = CALL db_find_i64(*($0 + [16]), *(($0 + [24])), (int_64)-3020380869172259840, (int_64)6138860560169325968)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$31 }
	$24 = CALL $7($22, $24)
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$22), [64])
	
.LABEL $label$32
	$12 = ($0 + [32])
	$10 = ($26 + [96])
	$16 = (($26 + [80]) | [8])
	$23 = ($26 + [80])
	goto $label$30 
	
.LABEL $label$31
	$17 = *(($0 + [8]))
	CALL eosio_assert(((int_64)*($0 + [16]) == (int_64)CALL $fimport$2()), [960])
	*(($24 = CALL $43([40])) + [16]) = (int_64)0
	*($24 + [8]) = (int_64)0
	*($24 + [24]) = $22
	*($24) = (int_64)6138860560169325968
	CALL eosio_assert([1], [432])
	CALL memcpy(($26 + [80]), $24, [8])
	CALL eosio_assert([1], [432])
	$16 = (($26 + [80]) | [8])
	CALL memcpy($16, ($24 + [8]), [8])
	CALL eosio_assert([1], [432])
	$10 = (($26 + [80]) + [16])
	CALL memcpy($10, ($24 + [16]), [8])
	$9 = *($24)
	$11 = CALL db_store_i64(*(($0 + [24])), (int_64)-3020380869172259840, $17, $9, ($26 + [80]), [24])
	*($24 + [28]) = $11
	$12 = ($0 + [32])
	if ( (uint_64)($9 <= *($12)) ){ goto $label$34 }
	*($12) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$34
	*($26 + [24]) = $24
	$9 = *($24)
	*($26 + [80]) = $9
	*($26 + [108]) = $11
	$25 = *(($0 + [44]))
	if ( ((uint_32)$25 >= (uint_32)*(($0 + [48]))) ){ goto $label$36 }
	*($25 + [8]) = $9
	*($25 + [16]) = $11
	*($26 + [24]) = [0]
	*($25) = $24
	*($7) = ($25 + [24])
	goto $label$35 
	
.LABEL $label$36
	CALL $14(($0 + [40]), ($26 + [24]), ($26 + [80]), ($26 + [108]))
	
.LABEL $label$35
	$25 = *($26 + [24])
	*($26 + [24]) = [0]
	if ( ($25 == 0) ){ goto $label$37 }
	CALL $44($25)
	
.LABEL $label$37
	$23 = ($26 + [80])
	
.LABEL $label$30
	$18 = *(($0 + [8]))
	CALL eosio_assert(((int_32)$24 != (int_32)[0]), [208])
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$22), [256])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [304])
	$9 = *($24)
	$2 = *($24 + [8])
	$17 = *($26 + [32])
	CALL eosio_assert(((uint_64)((int_64)$17 + (int_64)$2) > (uint_64)$2), [1152])
	*($24 + [8]) = ((int_64)$17 + (int_64)*($24 + [8]))
	$2 = *($24 + [16])
	CALL eosio_assert(((uint_64)((int_64)$17 + (int_64)$2) > (uint_64)$2), [1200])
	*($24 + [16]) = ((int_64)$17 + (int_64)*($24 + [16]))
	CALL eosio_assert(((int_64)$9 == (int_64)*($24)), [368])
	CALL eosio_assert([1], [432])
	CALL memcpy($23, $24, [8])
	CALL eosio_assert([1], [432])
	CALL memcpy($16, ($24 + [8]), [8])
	CALL eosio_assert([1], [432])
	CALL memcpy($10, ($24 + [16]), [8])
	CALL db_update_i64(*($24 + [28]), $18, $23, [24])
	if ( (uint_64)($9 <= *(($0 + [32]))) ){ goto $label$38 }
	*($12) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$38
	$9 = *($26 + [56])
	$22 = *(($0 + [80]))
	$25 = *(($0 + [84]))
	if ( ((int_32)$25 == (int_32)$22) ){ goto $label$39 }
	$24 = ($25 + [-24])
	$11 = ([0] - $22)
	
.LOOP $label$40:
	if ( ((int_64)*(*($24)) == (int_64)$9) ){ goto $label$39 }
	$25 = $24
	$12 = ($24 + [-24])
	$24 = $12
	if ( ((int_32)($12 + $11) != (int_32)[-24]) ){ goto $label$40 }
	
.LABEL $label$39
	if ( ((int_32)$25 == (int_32)$22) ){ goto $label$43 }
	$24 = *(($25 + [-24]))
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$4), [64])
	if ( $24 ){ goto $label$41 }
	goto $label$42 
	
.LABEL $label$43
	$24 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-6030912129153084416, $9)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$42 }
	$24 = CALL $18($4, $24)
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$4), [64])
	goto $label$41 
	
.LABEL $label$42
	$17 = *(($0 + [8]))
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [960])
	*(($24 = CALL $43([40])) + [16]) = (int_64)0
	*($24 + [8]) = (int_64)0
	*($24 + [24]) = $4
	$9 = *($26 + [56])
	*($24) = $9
	CALL prints([1248])
	CALL printn($9)
	CALL prints([704])
	CALL eosio_assert([1], [432])
	CALL memcpy($23, $24, [8])
	CALL eosio_assert([1], [432])
	CALL memcpy($16, ($24 + [8]), [8])
	CALL eosio_assert([1], [432])
	CALL memcpy($10, ($24 + [16]), [8])
	$9 = *($24)
	$25 = CALL db_store_i64(*(($0 + [64])), (int_64)-6030912129153084416, $17, $9, $23, [24])
	*($24 + [28]) = $25
	$12 = ($0 + [72])
	if ( (uint_64)($9 <= *($12)) ){ goto $label$44 }
	*($12) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$44
	*($26 + [24]) = $24
	$9 = *($24)
	*($26 + [80]) = $9
	*($26 + [108]) = $25
	$11 = ($0 + [84])
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [88]))) ){ goto $label$46 }
	*($12 + [8]) = $9
	*($12 + [16]) = $25
	*($26 + [24]) = [0]
	*($12) = $24
	*($11) = ($12 + [24])
	goto $label$45 
	
.LABEL $label$46
	CALL $19(($0 + [80]), ($26 + [24]), ($26 + [80]), ($26 + [108]))
	
.LABEL $label$45
	$12 = *($26 + [24])
	*($26 + [24]) = [0]
	if ( ($12 == 0) ){ goto $label$41 }
	CALL $44($12)
	
.LABEL $label$41
	*($26 + [24]) = (int_64)0
	$8 = (float_64)0
	$9 = *($26 + [48])
	if ( ((uint_64)$19 <= (uint_64)$9) ){ goto $label$47 }
	$8 = (float_64)0
	
.LOOP $label$48:
	*($26 + [24]) = ((float_64)$8 + (float_64)(float_64)1)
	CALL eosio_assert((uint_64)((int_64))($19 - $9) <= $19), [1264])
	$17 = *($26 + [48])
	CALL eosio_assert(((int_64)$17 != (int_64)-1), [1312])
	$9 = ((int_64)*($26 + [48]) + (int_64)1)
	*($26 + [48]) = $9
	$8 = *($26 + [24])
	$19 = (int_64)
	if ( ((uint_64)$19($19 - $17)) > (uint_64)$9) ){ goto $label$48 }
	
.LABEL $label$47
	$8 = ((float_64)((float_64)(CASTING float_64)(int_64 $19) / (float_64)(CASTING float_64)(uint_64 $9)) + (float_64)$8)
	*($26 + [24]) = $8
	CALL eosio_assert(((int_64)$9 != (int_64)-1), [1312])
	*($26 + [48]) = ((int_64)$9 + (int_64)1)
	$12 = ($0 + [8])
	$19 = *($12)
	CALL eosio_assert(((int_32)$24 != (int_32)[0]), [208])
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$4), [256])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [304])
	$9 = *($24)
	$14 = *($24 + [8])
	CALL eosio_assert(((float_64)((float_64)$14 + (float_64)$8) > (float_64)$14), [1360])
	*($24 + [8]) = ((float_64)$8 + (float_64)*($24 + [8]))
	CALL prints([1408])
	CALL printdf(*($24 + [8]))
	CALL prints([704])
	$17 = *($24 + [16])
	CALL eosio_assert(((uint_64)((int_64)*($1 + [16]) + (int_64)$17) > (uint_64)$17), [1440])
	*($24 + [16]) = ((int_64)*($24 + [16]) + (int_64)*($1 + [16]))
	CALL prints([1488])
	CALL printui(*($24 + [16]))
	CALL prints([704])
	CALL eosio_assert(((int_64)$9 == (int_64)*($24)), [368])
	CALL eosio_assert([1], [432])
	CALL memcpy($23, $24, [8])
	CALL eosio_assert([1], [432])
	CALL memcpy($16, ($24 + [8]), [8])
	CALL eosio_assert([1], [432])
	CALL memcpy($10, ($24 + [16]), [8])
	CALL db_update_i64(*($24 + [28]), $19, $23, [24])
	$24 = ($0 + [72])
	if ( (uint_64)($9 <= *($24)) ){ goto $label$49 }
	*($24) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$49
	$9 = *($12)
	*($26 + [88]) = $1
	*($26 + [84]) = ($26 + [56])
	*($26 + [80]) = ($26 + [24])
	*($26 + [92]) = ($26 + [40])
	*($26 + [96]) = ($26 + [32])
	*($26 + [100]) = ($26 + [48])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [208])
	CALL $20($3, $20, $9, ($26 + [80]))
	CALL prints([1520])
	
.LABEL $label$1
	*([0] + [4]) = ($26 + [112])
}

void .FUNC _ZN14grab_the_bench4pingEv (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [96])
	*([0] + [4]) = $14
	CALL prints([1664])
	$1 = ($0 + [96])
	$9 = [0]
	$13 = CALL db_lowerbound_i64(*($0 + [96]), *(($0 + [104])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $17($1, $13)
	
.LABEL $label$1
	if ( ((uint_64)*($9 + [24]) > (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$2 }
	$2 = *($9 + [8])
	CALL prints([1680])
	CALL printn($2)
	CALL prints([704])
	$3 = *(($0 + [40]))
	$4 = *(($0 + [44]))
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$3 }
	$13 = ($4 + [-24])
	$5 = ([0] - $3)
	
.LOOP $label$4:
	if ( ((int_64)*(*($13)) == (int_64)$2) ){ goto $label$3 }
	$4 = $13
	$12 = ($13 + [-24])
	$13 = $12
	if ( ((int_32)($12 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$12 = ($0 + [16])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$8 }
	$13 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$12), [64])
	if ( $13 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$13 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020380869172259840, $2)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$6 }
	$13 = CALL $7($12, $13)
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$12), [64])
	
.LABEL $label$7
	$5 = ($0 + [32])
	$3 = ($0 + [8])
	$10 = ($14 + [32])
	$11 = (($14 + [16]) | [8])
	$4 = ($14 + [16])
	goto $label$5 
	
.LABEL $label$6
	$7 = *($0 + [8])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [960])
	*(($13 = CALL $43([40])) + [16]) = (int_64)0
	*($13 + [8]) = (int_64)0
	*($13 + [24]) = $12
	*($13) = $2
	CALL eosio_assert([1], [432])
	CALL memcpy(($14 + [16]), $13, [8])
	CALL eosio_assert([1], [432])
	$11 = (($14 + [16]) | [8])
	CALL memcpy($11, ($13 + [8]), [8])
	CALL eosio_assert([1], [432])
	$10 = (($14 + [16]) + [16])
	CALL memcpy($10, ($13 + [16]), [8])
	$2 = *($13)
	$3 = CALL db_store_i64(*(($0 + [24])), (int_64)-3020380869172259840, $7, $2, ($14 + [16]), [24])
	*($13 + [28]) = $3
	$5 = ($0 + [32])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$9 }
	*($5) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($14 + [80]) = $13
	$2 = *($13)
	*($14 + [16]) = $2
	*($14 + [12]) = $3
	$6 = ($0 + [44])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [48]))) ){ goto $label$11 }
	*($4 + [8]) = $2
	*($4 + [16]) = $3
	*($14 + [80]) = [0]
	*($4) = $13
	*($6) = ($4 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $14(($0 + [40]), ($14 + [80]), ($14 + [16]), ($14 + [12]))
	
.LABEL $label$10
	$4 = *($14 + [80])
	*($14 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $44($4)
	
.LABEL $label$12
	$3 = ($0 + [8])
	$4 = ($14 + [16])
	
.LABEL $label$5
	$7 = *($3)
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [208])
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$12), [256])
	CALL eosio_assert(((int_64)*($12) == (int_64)CALL $fimport$2()), [304])
	$2 = *($13)
	$8 = *($13 + [8])
	CALL eosio_assert(((uint_64)((int_64)*($9 + [40]) + (int_64)$8) > (uint_64)$8), [1696])
	*($13 + [8]) = ((int_64)*($13 + [8]) + (int_64)*($9 + [40]))
	CALL prints([1744])
	CALL printui(*($13 + [8]))
	CALL prints([704])
	$8 = *($13 + [16])
	CALL eosio_assert(((uint_64)((int_64)*($9 + [40]) + (int_64)$8) > (uint_64)$8), [1760])
	*($13 + [16]) = ((int_64)*($13 + [16]) + (int_64)*($9 + [40]))
	CALL prints([1808])
	CALL printui(*($13 + [16]))
	CALL prints([704])
	CALL eosio_assert(((int_64)$2 == (int_64)*($13)), [368])
	CALL eosio_assert([1], [432])
	CALL memcpy($4, $13, [8])
	CALL eosio_assert([1], [432])
	CALL memcpy($11, ($13 + [8]), [8])
	CALL eosio_assert([1], [432])
	CALL memcpy($10, ($13 + [16]), [8])
	CALL db_update_i64(*($13 + [28]), $7, $4, [24])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$13 }
	*($5) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	$13 = CALL db_lowerbound_i64(*(($0 + [96])), *(($0 + [104])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$14 }
	$12 = CALL $17($1, $13)
	
.LOOP $label$15:
	CALL eosio_assert([1], [1824])
	CALL eosio_assert([1], [1120])
	$13 = [0]
	$4 = CALL db_next_i64(*($12 + [68]), ($14 + [16]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$16 }
	$13 = CALL $17($1, $4)
	
.LABEL $label$16
	CALL $24($1, $12)
	$12 = $13
	if ( $13 ){ goto $label$15 }
	
.LABEL $label$14
	$13 = CALL db_lowerbound_i64(*($0 + [56]), *(($0 + [64])), (int_64)-6030912129153084416, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$17 }
	$4 = ($0 + [56])
	$12 = CALL $18($4, $13)
	
.LOOP $label$18:
	CALL eosio_assert([1], [1824])
	CALL eosio_assert([1], [1120])
	$13 = [0]
	$5 = CALL db_next_i64(*($12 + [28]), ($14 + [16]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$19 }
	$13 = CALL $18($4, $5)
	
.LABEL $label$19
	CALL $25($4, $12)
	$12 = $13
	if ( $13 ){ goto $label$18 }
	
.LABEL $label$17
	$12 = ($0 + [8])
	$7 = *($12)
	CALL eosio_assert(((int_64)*(($0 + [96])) == (int_64)CALL $fimport$2()), [960])
	$13 = CALL $43([80])
	$2 = CALL current_time()
	*($13 + [32]) = (int_64)0
	*($13 + [40]) = (int_64)0
	*($13 + [48]) = (int_64)0
	*($13 + [56]) = (int_64)5000
	*($13 + [64]) = $1
	$2 = ((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($13 + [16]) = $2
	*($13 + [24]) = ((int_64)$2 + (int_64)28800)
	$2 = *($12)
	*($13) = $2
	*($13 + [8]) = $2
	*($14 + [88]) = (($14 + [16]) + [64])
	*($14 + [84]) = ($14 + [16])
	*($14 + [80]) = ($14 + [16])
	CALL $21(($14 + [80]), $13)
	$2 = *($13)
	$1 = CALL db_store_i64(*(($0 + [104])), (int_64)4986958866982895616, $7, $2, ($14 + [16]), [64])
	*($13 + [68]) = $1
	$12 = ($0 + [112])
	if ( (uint_64)($2 <= *($12)) ){ goto $label$20 }
	*($12) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	*($14 + [80]) = $13
	$2 = *($13)
	*($14 + [16]) = $2
	*($14 + [12]) = $1
	$4 = ($0 + [124])
	$12 = *($4)
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [128]))) ){ goto $label$22 }
	*($12 + [8]) = $2
	*($12 + [16]) = $1
	*($14 + [80]) = [0]
	*($12) = $13
	*($4) = ($12 + [24])
	goto $label$21 
	
.LABEL $label$22
	CALL $23(($0 + [120]), ($14 + [80]), ($14 + [16]), ($14 + [12]))
	
.LABEL $label$21
	$13 = *($14 + [80])
	*($14 + [80]) = [0]
	if ( ($13 == 0) ){ goto $label$2 }
	CALL $44($13)
	
.LABEL $label$2
	*([0] + [4]) = ($14 + [96])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [624])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $43([80])
	$5 = CALL current_time()
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = (int_64)5000
	*($6 + [64]) = $0
	$5 = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($6 + [16]) = $5
	*($6 + [24]) = ((int_64)$5 + (int_64)28800)
	CALL $22(($8 + [32]), $6)
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $23(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $44($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $8($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [432])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [432])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $12(CALL $11($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [432])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [432])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [432])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [432])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [432])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [432])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [432])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $37($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $46($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $43($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $46($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $44($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $45($7)
	return (unreachable)
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [2224])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $8($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [656])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [656])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $36($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [656])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [2128])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [2192])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $35($6, $0)
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN14grab_the_bench8maintainEv (int_32 $0)
{
	CALL require_auth(*($0 + [8]))
}

void .FUNC _ZN14grab_the_bench5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL prints([2096])
	CALL printn($1)
	CALL prints([704])
	CALL prints([2112])
	CALL printn($2)
	CALL prints([704])
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [480]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $32(($9 + [64]))
	CALL _ZN14grab_the_bench2onERKN5eosio8currency8transferEy($0, ($9 + [64]), $1)
	if ( ((*($9 + [96]) & [1]) == 0) ){ goto $label$7 }
	CALL $44(*(($9 + [104])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0 + [8]) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)6182744098496053247) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-7954134735498772480) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-6077959540857372672) ){ goto $label$7 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [1]
	*($9) = *($9 + [56])
	CALL $33($0, $9)
	goto $label$7 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)6182744098496053248) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)7746191359077253120) ){ goto $label$7 }
	*($9 + [52]) = [0]
	*($9 + [48]) = [2]
	*($9 + [8 align=4]) = *($9 + [48])
	CALL $34($0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [36]) = [0]
	*($9 + [32]) = [3]
	*($9 + [24 align=4]) = *($9 + [32])
	CALL $33($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$9
	*($9 + [44]) = [0]
	*($9 + [40]) = [4]
	*($9 + [16 align=4]) = *($9 + [40])
	CALL $33($0, ($9 + [16]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [112])
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10726]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10728])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10726]) = [1]
	$7 = ($7 << [16])
	*([0] + [10728]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10728])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10728]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10726]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10726]) = [1]
	$3 = ($3 << [16])
	*([0] + [10728]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10728])
	
.LABEL $label$8
	*([0] + [10728]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [144])
	*([0] + [4]) = $3
	CALL _ZN14grab_the_bench5applyEyy(CALL $39(($3 + [8]), $0), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

void .FUNC $52 ()
{
	(unreachable)
}