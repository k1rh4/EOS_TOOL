(data (i32.const 16624) "token not found by this symbol_name\00")
(data (i32.const 16660) "memo has more than 1024 bytes\00")
(data (i32.const 16690) "invalid symbol name\00")
(data (i32.const 16710) "invalid supply\00")
(data (i32.const 16725) "max-supply must be positive\00")
(data (i32.const 16753) "game not found by this symbol name\00")
(data (i32.const 16788) "symbol precision mismatch\00")
(data (i32.const 16814) "issuer is not the owner of this token\00")
(data (i32.const 16852) "invalid maximum supply\00")
(data (i32.const 16875) "token with symbol already exists\00")
(data (i32.const 16908) "memo has more than 256 bytes\00")
(data (i32.const 16937) "token with symbol does not exist, create token before issue\00")
(data (i32.const 16997) "invalid quantity\00")
(data (i32.const 17014) "must issue positive quantity\00")
(data (i32.const 17043) "quantity exceeds available supply\00")
(data (i32.const 17077) "invalid memo format\00")
(data (i32.const 17097) "reg action locked by owner\00")
(data (i32.const 17124) "token not found by this symbol name\00")
(data (i32.const 17160) "must pay with CORE token\00")
(data (i32.const 17185) "-profit\00")
(data (i32.const 17193) "invalid memo format for profit\00")
(data (i32.const 17225) "-referrer:\00")
(data (i32.const 17236) "invalid referrer account name\00")
(data (i32.const 17266) "buy\00")
(data (i32.const 17270) "buy action locked by owner\00")
(data (i32.const 17297) "refer fee must be less than amount of eos\00")
(data (i32.const 17339) "eosio.token\00")
(data (i32.const 17351) "transfer\00")
(data (i32.const 17360) "cydetesttokn refer fee https://titanlix.io\00")
(data (i32.const 17403) "account not found\00")
(data (i32.const 17421) "invalid amount\00")
(data (i32.const 17436) "sell\00")
(data (i32.const 17441) "sell action locked by owner\00")
(data (i32.const 17469) "selled eos amount should be greater than 0\00")
(data (i32.const 17512) "cydetesttokn withdraw https://titanlix.io\00")
(data (i32.const 17554) "player not found\00")
(data (i32.const 17571) "not enough balance to consume\00")
(data (i32.const 17601) "consume action locked by owner\00")
(data (i32.const 17632) "WTF!\00")
(data (i32.const 17637) "cannot transfer to self\00")
(data (i32.const 17661) "to account does not exist\00")
(data (i32.const 17687) "must transfer positive quantity\00")
(data (i32.const 17719) "transfer action locked by owner\00")
(data (i32.const 17751) "should only transfer token with account in the whitelist\00")
(data (i32.const 17808) "no balance object found by from account\00")
(data (i32.const 17848) "overdrawn balance\00")
(data (i32.const 17866) "all stake should be retrieved before erasing game\00")
(data (i32.const 17916) "consume for new token\00")
(data (i32.const 17938) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17987) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18038) "error reading iterator\00")
(data (i32.const 18061) "read\00")
(data (i32.const 18066) "get\00")
(data (i32.const 18070) "singleton does not exist\00")
(data (i32.const 18095) "profit eos amount should be bigger than 0\00")
(data (i32.const 18137) "game not found by this symbol_name\00")
(data (i32.const 18172) "the token issuance has not yet begun\00")
(data (i32.const 18209) "cannot profit when no one holds stake\00")
(data (i32.const 18247) "amount of stake issuance should be bigger than zero\00")
(data (i32.const 18299) "stake should be less than base_stake\00")
(data (i32.const 18336) "amount of EOS profit should be bigger than 0\00")
(data (i32.const 18381) "failed to check base_eos should be bigger than zero\00")
(data (i32.const 18433) "failed to check stake should be bigger than zero\00")
(data (i32.const 18482) "failed to check eos is bigger than base_eos\00")
(data (i32.const 18526) "failed to check base_stake is bigger than stake\00")
(data (i32.const 18574) "cannot pass end iterator to modify\00")
(data (i32.const 18609) "object passed to modify is not in multi_index\00")
(data (i32.const 18655) "cannot modify objects in table of another contract\00")
(data (i32.const 18706) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18765) "write\00")
(data (i32.const 18771) "cannot create objects in table of another contract\00")
(data (i32.const 18822) "eos amount should be bigger than 0\00")
(data (i32.const 18857) "stake amount should be bigger than 0\00")
(data (i32.const 18894) "stake amount overflow\00")
(data (i32.const 18916) "must reserve a positive amount\00")
(data (i32.const 18947) "fee amount must be a Non-negative\00")
(data (i32.const 18981) "attempt to subtract asset with different symbol\00")
(data (i32.const 19029) "subtraction underflow\00")
(data (i32.const 19051) "subtraction overflow\00")
(data (i32.const 19072) "consume stake amount should be bigger than 0\00")
(data (i32.const 19117) "consume too much stake\00")
(data (i32.const 19140) "amount of comsumed stake should be bigger than zero\00")
(data (i32.const 19192) "cannot comsume all remaining stake\00")
(data (i32.const 19227) "claimed stake should be bigger than zero\00")
(data (i32.const 19268) "maximum stake and option quantity should be the same symbol type\00")
(data (i32.const 19333) "game has started before\00")
(data (i32.const 19357) "base_eos must be core token\00")
(data (i32.const 19385) "invalid amount of base EOS pool\00")
(data (i32.const 19417) "invalid maximum stake\00")
(data (i32.const 19439) "invalid amount of maximum supply\00")
(data (i32.const 19472) "invalid amount of option\00")
(data (i32.const 19497) "invalid lock up period\00")
(data (i32.const 19520) "invalid fee percent\00")
(data (i32.const 19540) "invalid init fee percent\00")
(data (i32.const 19565) "the token issuance must be within six months\00")
(data (i32.const 19610) "invalid refer fee\00")
(data (i32.const 19628) "cannot update exist refer fee\00")
(data (i32.const 19658) "multiplication overflow\00")
(data (i32.const 19682) "multiplication underflow\00")
(data (i32.const 19707) "trans should be bool\00")
(data (i32.const 19728) "agent account does not exist\00")
(data (i32.const 19757) "ref should be bool\00")
(data (i32.const 19776) "referrer account does not exist\00")
(data (i32.const 19808) "unknwon action name.\00")
(data (i32.const 19829) "attempt to add asset with different symbol\00")
(data (i32.const 19872) "addition underflow\00")
(data (i32.const 19891) "addition overflow\00")
(data (i32.const 19909) "cannot pass end iterator to erase\00")
(data (i32.const 19943) "cannot increment end iterator\00")
(data (i32.const 19973) "object passed to erase is not in multi_index\00")
(data (i32.const 20018) "cannot erase objects in table of another contract\00")
(data (i32.const 20068) "attempt to remove object that was not in multi_index\00")
(data (i32.const 20128) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 20144) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 20160) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 20176) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "db_find_i64" (func $fimport$0 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_store_i64" (func $fimport$4 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$7 (param i32 i32)))
(import "env" "current_time" (func $fimport$8 (result i64)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$10 (param i64)))
(import "env" "is_account" (func $fimport$11 (param i64) (result i32)))
(import "env" "__multi3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "eosio_exit" (func $fimport$13 (param i32)))
(import "env" "action_data_size" (func $fimport$14 (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$17))
(import "env" "__floattidf" (func $fimport$18 (param i64 i64) (result f64)))
(import "env" "__fixdfti" (func $fimport$19 (param i32 f64)))
(import "env" "memmove" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "memset" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$33 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$34 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$37 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$39 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$40 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$41 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $81))
(export "_ZdlPv" (func $155))
(export "_Znwj" (func $153))
(export "_Znaj" (func $154))
(export "_ZdaPv" (func $156))
(table $0 21 21 anyfunc)
(elem (i32.const 1) $19 $39 $63 $8 $61 $70 $76 $55 $9 $65 $42 $68 $62 $51 $1 $73 $45 $35 $3 $80)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 20262))
(global $global$2 i32 (i32.const 20262))


int_32 .FUNC $174 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8220]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8224])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8220]) = [1]
	$2 = ($2 << [16])
	*([0] + [8224]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8224])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8224]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8220]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8220]) = [1]
	$3 = ($3 << [16])
	*([0] + [8224]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8224])
	
.LABEL $label$10
	*([0] + [8224]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $170 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $171 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $172 (int_32 $0)
{
	return CALL $173([8228], $0)
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $162($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18038])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $172($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $175($4)
	
.LABEL $label$6
	$5 = CALL _Znwj([56])
	CALL $5($5)
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $140(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $7(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $5 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [17938])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [16690])
	*(($2 = ($0 + [24]))) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [17938])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $3
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$1 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [16690])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [16690])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [16690])
	return $0
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $162($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL require_auth($1)
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [16690])
	$11 = [0]
	$9 = [0]
	$12 = *($2)
	if ( ((uint_64)((int_64)$12 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$7 = $6
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$10 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [16710])
	CALL eosio_assert(((int_64)$12 > (int_64)0), [16725])
	*(($3 + [72])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$7 = *($0)
	*($3 + [40]) = $7
	*($3 + [48]) = $6
	$4 = CALL db_find_i64($7, $6, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*(CALL $2(($3 + [40]), $4) + [112]) == (int_32)($3 + [40])), [17987])
	$11 = [1]
	
.LABEL $label$11
	CALL eosio_assert($11, [16753])
	$4 = *(($3 + [68]))
	if ( ((int_32)$4 == (int_32)*(($3 + [64]))) ){ goto $label$13 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($3 + [40])), [17987])
	goto $label$12 
	
.LABEL $label$13
	$4 = [0]
	$9 = CALL db_find_i64(*($3 + [40]), *(($3 + [48])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$12 }
	$4 = CALL $2(($3 + [40]), $9)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($3 + [40])), [17987])
	
.LABEL $label$12
	$9 = [0]
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [18070])
	$7 = *($4 + [48])
	$8 = *($4 + [40])
	$13 = *($4 + [32])
	$14 = *($4 + [8])
	CALL eosio_assert(((int_64)*($4) == (int_64)$5), [16788])
	CALL eosio_assert(((int_64)$14 == (int_64)$1), [16814])
	CALL eosio_assert(((int_64))(((int_64)$8 + (int_64)$13) - $7) == (int_64)$12), [16852])
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$7 = *($0)
	*($3) = $7
	*($3 + [8]) = $6
	$4 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*(CALL $4($3, $4) + [40]) == (int_32)$3), [17987])
	goto $label$14 
	
.LABEL $label$15
	$9 = [1]
	
.LABEL $label$14
	CALL eosio_assert($9, [16875])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$3()), [18771])
	$4 = CALL _Znwj([56])
	CALL $5($4)
	*($4 + [40]) = $3
	*($4 + [8]) = $5
	*($4 + [32]) = $1
	*($4 + [16]) = *($2)
	*(($4 + [24])) = *(($2 + [8]))
	*($3 + [128]) = (($3 + [80]) + [40])
	*($3 + [124]) = ($3 + [80])
	*($3 + [120]) = ($3 + [80])
	*($3 + [136]) = ($3 + [120])
	*($3 + [148]) = ($4 + [16])
	*($3 + [144]) = $4
	*($3 + [152]) = ($4 + [32])
	CALL $6(($3 + [144]), ($3 + [136]))
	$7 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	$10 = CALL db_store_i64(*(($3 + [8])), (int_64)-4157508551318700032, $1, $7), ($3 + [80]), [40]
	*($4 + [44]) = $10)
	$9 = ($3 + [16])
	if ( (uint_64)($7 <= *($9)) ){ goto $label$16 }
	*($9) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$16
	*($3 + [144]) = $4
	$7 = (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8
	*($3 + [80]) = $7)
	*($3 + [120]) = $10
	$2 = ($3 + [28])
	$9 = *($2)
	if ( ((uint_32)$9 >= (uint_32)*(($3 + [32]))) ){ goto $label$19 }
	*($9 + [8]) = $7
	*($9 + [16]) = $10
	*($3 + [144]) = [0]
	*($9) = $4
	*($2) = ($9 + [24])
	$4 = *($3 + [144])
	*($3 + [144]) = [0]
	if ( $4 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL $7(($3 + [24]), ($3 + [144]), ($3 + [80]), ($3 + [120]))
	$4 = *($3 + [144])
	*($3 + [144]) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$10 = *($3 + [24])
	if ( ($10 == 0) ){ goto $label$20 }
	$2 = ($3 + [28])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$22 }
	
.LOOP $label$23:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$24 }
	CALL _ZdlPv($9)
	
.LABEL $label$24
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$23 }
	$4 = *(($3 + [24]))
	goto $label$21 
	
.LABEL $label$22
	$4 = $10
	
.LABEL $label$21
	*($2) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$20
	$10 = *($3 + [64])
	if ( ($10 == 0) ){ goto $label$25 }
	$2 = ($3 + [68])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$27 }
	
.LOOP $label$28:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$29 }
	CALL _ZdlPv($9)
	
.LABEL $label$29
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$28 }
	$4 = *(($3 + [64]))
	goto $label$26 
	
.LABEL $label$27
	$4 = $10
	
.LABEL $label$26
	*($2) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$25
	$global$0 = ($3 + [160])
}

int_32 .FUNC $49 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [8]) = $5
	*($3 + [16]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)-2063328927043551232, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $50(($3 + [8]), $0) + [8]) == (int_32)($3 + [8])), [17987])
	$4 = [1]
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = ($3 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$5 }
	CALL _ZdlPv($8)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($3 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $6
	
.LABEL $label$2
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $4
}

int_64 .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *(($0 + [28]))
	if ( ((int_32)$1 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [17987])
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	$2 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3617168955010973696, (int_64)-3617168955010973696)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $47($0, $2)
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [17987])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18070])
	return *($1)
}

void .FUNC memory ()
{
	CALL $152()
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	$4 = [0]
	*(($3 + [152])) = [0]
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	$5 = *($1)
	*($3 + [120]) = $5
	*($3 + [128]) = $2
	$1 = CALL db_find_i64($5, $2, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $2(($3 + [120]), $1) + [112]) == (int_32)($3 + [120])), [17987])
	$4 = [1]
	
.LABEL $label$1
	CALL eosio_assert($4, [18137])
	$4 = *(($3 + [148]))
	if ( ((int_32)$4 == (int_32)*(($3 + [144]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($3 + [120])), [17987])
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$1 = CALL db_find_i64(*($3 + [120]), *(($3 + [128])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $2(($3 + [120]), $1)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($3 + [120])), [17987])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [18070])
	$1 = CALL memcpy($3, $4, [112])
	$2 = CALL current_time()
	CALL eosio_assert((*($1 + [92]) <= (CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000))), [18172])
	$2 = CALL $44($1)
	CALL eosio_assert(((int_64)$2 > (int_64)0), [19227])
	CALL $32(($1 + [120]), $1, *($1 + [8]))
	*($0) = $2
	$5 = *($1)
	*($0 + [8]) = $5
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17938])
	$2 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $5
	$6 = [1]
	$4 = $3
	$3 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = $5
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$0 = ($3 + [1])
	$3 = $0
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$3 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [16690])
	$0 = *($1 + [144])
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [16690])
	$0 = *($1 + [144])
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$6 = ($1 + [148])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($1 + [144]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $0
	
.LABEL $label$12
	*($6) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($1 + [160])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [160])
	$global$0 = $3
	if ( (*($1) & [1]) ){ goto $label$2 }
	$4 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($1 + [8])
	
.LABEL $label$1
	$1 = [0]
	
.LOOP $label$3:
	$5 = ($4 + $1)
	$6 = ($1 + [1])
	$1 = $6
	if ( *($5) ){ goto $label$3 }
	$7 = (int_64)0
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$4 }
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-1])) << (int_64)3)
	$9 = (int_64)0
	$7 = (int_64)0
	
.LOOP $label$5:
	$1 = *($4)
	if ( ((uint_32)(($1 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$7 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$9 + (int_64)8) & (int_64)4294967288)) | (int_64)$7)
	
.LABEL $label$6
	$4 = ($4 + [1])
	$9 = ((int_64)$9 + (int_64)8)
	if ( ((int_64)$8 != (int_64)$9) ){ goto $label$5 }
	
.LABEL $label$4
	*(($3 + [120])) = [0]
	*($3 + [104]) = (int_64)-1
	*($3 + [112]) = (int_64)0
	$9 = *($0)
	*($3 + [88]) = $9
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	*($3 + [96]) = $7)
	$1 = [0]
	$4 = CALL db_find_i64($9, $7, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$1 = CALL $2(($3 + [88]), $4)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($3 + [88])), [17987])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [16624])
	$1 = *(($3 + [116]))
	if ( ((int_32)$1 == (int_32)*(($3 + [112]))) ){ goto $label$9 }
	$4 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($3 + [88])), [17987])
	goto $label$8 
	
.LABEL $label$9
	$4 = [0]
	$1 = CALL db_find_i64(*($3 + [88]), *(($3 + [96])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$8 }
	$4 = CALL $2(($3 + [88]), $1)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($3 + [88])), [17987])
	
.LABEL $label$8
	$1 = [0]
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [18070])
	$8 = *($4 + [8])
	CALL require_auth($8)
	CALL $43(($3 + [72]), $0, $7)
	*((($3 + [32]) + [32])) = [0]
	*($3 + [40]) = $8
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	$9 = *($0)
	*($3 + [32]) = $9
	$4 = CALL db_find_i64($9, $8, (int_64)3607749779137757184, $7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = CALL $12(($3 + [32]), $4)
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)($3 + [32])), [17987])
	CALL eosio_assert([1], [18574])
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)($3 + [32])), [18609])
	CALL eosio_assert(((int_64)*($3 + [32]) == (int_64)CALL $fimport$3()), [18655])
	$9 = *($1 + [8])
	CALL eosio_assert(((int_64)*($3 + [80]) == (int_64)$9), [19829])
	$10 = ((int_64)*($1) + (int_64)*($3 + [72]))
	*($1) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [19872])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [19891])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$9) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [18706])
	CALL eosio_assert([1], [18765])
	CALL memcpy(($3 + [144]), $1, [8])
	CALL eosio_assert([1], [18765])
	CALL memcpy((($3 + [144]) | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), (int_64)0, ($3 + [144]), [16])
	$1 = (($3 + [32]) + [16])
	if ( (uint_64)($9 <= *($1)) ){ goto $label$12 }
	*($1) = ((int_64)$9 + (int_64)1)
	if ( $2 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*($3 + [32]) == (int_64)CALL $fimport$3()), [18771])
	*(($6 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($6) = (int_64)0
	CALL eosio_assert([1], [17938])
	$11 = ($6 + [8])
	$9 = (int_64)5459781
	
.LOOP $label$15:
	$12 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$9 = $10
	$12 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$9 = $10
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$17 }
	$12 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$15 }
	
.LABEL $label$14
	CALL eosio_assert($12, [16690])
	*($6 + [16]) = ($3 + [32])
	*(($1 = ($6 + [8]))) = *((($3 + [72]) + [8]))
	*($6) = *($3 + [72])
	CALL eosio_assert([1], [18765])
	CALL memcpy(($3 + [144]), $6, [8])
	CALL eosio_assert([1], [18765])
	CALL memcpy((($3 + [144]) | [8]), $11, [8])
	$9 = (uint_64)*($1) >> (uint_64)(int_64)8
	$4 = CALL db_store_i64(*((($3 + [32]) + [8])), (int_64)3607749779137757184, $8, $9), ($3 + [144]), [16]
	*($6 + [20]) = $4)
	$5 = (($3 + [32]) + [16])
	if ( (uint_64)($9 <= *($5)) ){ goto $label$18 }
	*($5) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$18
	*($3 + [136]) = $6
	$9 = (uint_64)*($1) >> (uint_64)(int_64)8
	*($3 + [144]) = $9)
	*($3 + [132]) = $4
	$5 = ($3 + [60])
	$1 = *($5)
	if ( ((uint_32)$1 >= (uint_32)*(($3 + [64]))) ){ goto $label$20 }
	*($1 + [8]) = $9
	*($1 + [16]) = $4
	*($3 + [136]) = [0]
	*($1) = $6
	*($5) = ($1 + [24])
	$1 = *($3 + [136])
	*($3 + [136]) = [0]
	if ( $1 ){ goto $label$19 }
	goto $label$12 
	
.LABEL $label$20
	CALL $14(($3 + [56]), ($3 + [136]), ($3 + [144]), ($3 + [132]))
	$1 = *($3 + [136])
	*($3 + [136]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	
.LABEL $label$19
	CALL _ZdlPv($1)
	
.LABEL $label$12
	if ( ($2 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$4 = *(($3 + [60]))
	$6 = *(($3 + [56]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$22 }
	
.LOOP $label$24:
	$1 = ($4 + [-24])
	$5 = *($1)
	if ( ((int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8) == (int_64)$7) ){ goto $label$23 }
	$4 = $1
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$22 }
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($3 + [32])), [17987])
	goto $label$21 
	
.LABEL $label$22
	$5 = [0]
	$1 = CALL db_find_i64(*($3 + [32]), *(($3 + [40])), (int_64)3607749779137757184, $7)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$21 }
	$5 = CALL $12(($3 + [32]), $1)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($3 + [32])), [17987])
	
.LABEL $label$21
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [17632])
	$7 = *(($5 + [8]))
	*((($3 + [16]) + [8])) = $7
	$9 = *($5)
	*(($3 + [8])) = $7
	*($3) = $9
	*($3 + [16]) = $9
	CALL $35($0, $8, $3)
	
.LABEL $label$10
	$5 = *($3 + [56])
	if ( ($5 == 0) ){ goto $label$25 }
	$6 = ($3 + [60])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$27 }
	
.LOOP $label$28:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$29 }
	CALL _ZdlPv($4)
	
.LABEL $label$29
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$28 }
	$1 = *(($3 + [56]))
	goto $label$26 
	
.LABEL $label$27
	$1 = $5
	
.LABEL $label$26
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$25
	$5 = *($3 + [112])
	if ( ($5 == 0) ){ goto $label$30 }
	$6 = ($3 + [116])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$32 }
	
.LOOP $label$33:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$34 }
	CALL _ZdlPv($4)
	
.LABEL $label$34
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$33 }
	$1 = *(($3 + [112]))
	goto $label$31 
	
.LABEL $label$32
	$1 = $5
	
.LABEL $label$31
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$30
	$global$0 = ($3 + [160])
}

void .FUNC $41 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	float_64 $6
	float_64 $7
	int_32 $8
	int_32 $9
	float_64 $10
	float_64 $11
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [40])
	if ( (int_64)($3 == 0) ){ goto $label$1 }
	$4 = *($0 + [48])
	if ( ((int_64)$4 == (int_64)$3) ){ goto $label$1 }
	$5 = CALL current_time()
	$3 = *(($0 + [40]))
	$7 = (CASTING float_64)(uint_32 *($0 + [88]))
	$6 = (float_64)
	if ( ((float_64)$6((CASTING float_64)(uint_32 (CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000))) - (CASTING float_64)(uint_32 *($0 + [92])))) >= (float_64)$7) ){ goto $label$2 }
	$6 = ((float_64)((float_64)$6 * (float_64)(CASTING float_64)(int_64 $3)) / (float_64)$7)
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$3 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$3
	$3 = (Rounds 0)($6)
	
.LABEL $label$2
	*(($0 + [48])) = $3
	if ( ((int_64)$3 == (int_64)$4) ){ goto $label$1 }
	CALL $115($0, (int_64))($3 - $4))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$1 > (int_64)0), [19140])
	CALL eosio_assert(((int_64)((int_64)*($0 + [80]) + (int_64)$1) < (int_64)*($0 + [32])), [19192])
	$3 = *($0 + [80])
	*($0 + [80]) = ((int_64)$3 + (int_64)$1)
	$8 = ($0 + [24])
	$6 = CALL __floattidf(*($0 + [16]), *($8))
	$7 = (CASTING float_64)(int_64 $1)
	$10 = (CASTING float_64)(int_64 $3)
	$11 = (float_64)
	$7 = (CASTING float_64)(int_64 *($0 + [32]))
	$9 = ($0 + [72])
	$6 = (float_64)
	CALL __fixdfti(($2 + [16]), ((float_64)((float_64)$6(CALL $fimport$18(*($0 + [64]), *($9)) - $6)) * (float_64)$7) / (float_64)$11((float_64))($7 - $10) - $7))))
	*($9) = *((($2 + [16]) + [8]))
	*($0 + [64]) = *($2 + [16])
	CALL __fixdfti($2, ((float_64)((float_64)((float_64)$7 + (float_64)$10) * (float_64)$6) / (float_64)$11))
	$1 = *(($2 + [8]))
	*($8) = $1
	$3 = *($2)
	*($0 + [16]) = $3
	CALL eosio_assert(( ((int_64)$3 != (int_64)0) ? ((int_64)$1 > (int_64)0) : (int_64)($1 == 0) ), [18381])
	CALL eosio_assert(((int_64)*($0 + [80]) > (int_64)0), [18433])
	$3 = *($8)
	$1 = *($9)
	CALL eosio_assert(( ((uint_64)*($0 + [64]) >= (uint_64)*($0 + [16])) ? ((int_64)$1 >= (int_64)$3) : ((int_64)$1 == (int_64)$3) ), [18482])
	CALL eosio_assert(((int_64)*($0 + [32]) >= (int_64)*($0 + [80])), [18526])
	$global$0 = ($2 + [32])
}

void .FUNC $40 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL eosio_assert(((int_64)$2 > (int_64)0), [19072])
	$4 = [0]
	*(($3 + [152])) = [0]
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	$5 = *($0)
	*($3 + [120]) = $5
	*($3 + [128]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $2(($3 + [120]), $0) + [112]) == (int_32)($3 + [120])), [17987])
	$4 = [1]
	
.LABEL $label$1
	CALL eosio_assert($4, [18137])
	$4 = *(($3 + [148]))
	if ( ((int_32)$4 == (int_32)*(($3 + [144]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($3 + [120])), [17987])
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$0 = CALL db_find_i64(*($3 + [120]), *(($3 + [128])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $2(($3 + [120]), $0)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($3 + [120])), [17987])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [18070])
	$6 = CALL memcpy($3, $4, [112])
	$1 = CALL current_time()
	CALL eosio_assert((*($6 + [92]) <= (CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000))), [18172])
	CALL eosio_assert(((int_64))(*($6 + [32]) - *($6 + [80])) > (int_64)$2), [19117])
	CALL $41($6, $2)
	CALL $32(($6 + [120]), $6, *($6 + [8]))
	CALL require_recipient(*($6 + [8]))
	$0 = *($6 + [144])
	if ( ($0 == 0) ){ goto $label$4 }
	$7 = ($6 + [148])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL _ZdlPv($4)
	
.LABEL $label$8
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$7 }
	$3 = *(($6 + [144]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $0
	
.LABEL $label$5
	*($7) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($6 + [160])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18038])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$5 }
	$2 = CALL $172($4)
	CALL db_get_i64($1, $2, $4)
	CALL $175($2)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	CALL db_get_i64($1, $2, $4)
	
.LABEL $label$4
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18061])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-3617168955010973696
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)-3617168955010973696
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $130(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $46 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [80])
	$global$0 = $5
	$6 = [0]
	*(($5 + [72])) = [0]
	*($5 + [56]) = (int_64)-1
	*($5 + [64]) = (int_64)0
	$7 = *($0)
	*($5 + [40]) = $7
	*($5 + [48]) = $1
	$0 = CALL db_find_i64($7, $1, (int_64)3617211078187941888, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $17(($5 + [40]), $0)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)($5 + [40])), [17987])
	$8 = CALL $18(($5 + [8]), $0)
	$9 = *($8 + [8])
	$0 = $9
	$10 = *(($8 + [12]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$5 }
	$0 = $9
	
.LOOP $label$6:
	if ( ((int_64)*($0) == (int_64)$3) ){ goto $label$5 }
	$0 = ($0 + [8])
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$0 == (int_32)$10) ){ goto $label$4 }
	$6 = [1]
	$11 = *($8 + [20])
	if ( $11 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$11 = *($8 + [20])
	$0 = $11
	$10 = *(($8 + [24]))
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$7 }
	$0 = $11
	
.LOOP $label$8:
	if ( ((int_64)*($0) == (int_64)$4) ){ goto $label$7 }
	$0 = ($0 + [8])
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$8 }
	$0 = $10
	
.LABEL $label$7
	$6 = ((int_32)$0 != (int_32)$10)
	if ( ($11 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*(($8 + [24])) = $11
	CALL _ZdlPv($11)
	$9 = *(($8 + [8]))
	
.LABEL $label$2
	if ( ($9 == 0) ){ goto $label$9 }
	*(($8 + [12])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$9
	$8 = *($5 + [64])
	if ( ($8 == 0) ){ goto $label$1 }
	$11 = ($5 + [68])
	$10 = *($11)
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$11 }
	
.LOOP $label$12:
	$10 = ($10 + [-24])
	$0 = *($10)
	*($10) = [0]
	if ( ($0 == 0) ){ goto $label$13 }
	$9 = *($0 + [20])
	if ( ($9 == 0) ){ goto $label$14 }
	*(($0 + [24])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$9 = *($0 + [8])
	if ( ($9 == 0) ){ goto $label$15 }
	*(($0 + [12])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$15
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$12 }
	$0 = *(($5 + [64]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $8
	
.LABEL $label$10
	*($11) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($5 + [80])
	return $6
}

void .FUNC $45 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$5 = ($global$0 - [192])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [17637])
	CALL require_auth($1)
	CALL eosio_assert(CALL eosio_assert1($2), [17661])
	$6 = *($3 + [8])
	*(($5 + [152])) = [0]
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [128]) = $7)
	*($5 + [136]) = (int_64)-1
	*($5 + [144]) = (int_64)0
	$8 = *($0)
	*($5 + [120]) = $8
	$9 = [0]
	$10 = CALL db_find_i64($8, $7, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $2(($5 + [120]), $10)
	CALL eosio_assert(((int_32)*($9 + [112]) == (int_32)($5 + [120])), [17987])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [16753])
	$9 = *(($5 + [148]))
	if ( ((int_32)$9 == (int_32)*(($5 + [144]))) ){ goto $label$3 }
	$9 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [112]) == (int_32)($5 + [120])), [17987])
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	$10 = CALL db_find_i64(*($5 + [120]), *(($5 + [128])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $2(($5 + [120]), $10)
	CALL eosio_assert(((int_32)*($9 + [112]) == (int_32)($5 + [120])), [17987])
	
.LABEL $label$2
	$10 = [0]
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [18070])
	$11 = *($9)
	$12 = *($3)
	if ( ((uint_64)((int_64)$12 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$9 = [0]
	$8 = $7
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$13 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$8 = $13
	$10 = [1]
	$14 = $9
	$9 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$8 = $13
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$9 < (int_32)[6])
	$14 = ($9 + [1])
	$9 = $14
	if ( $10 ){ goto $label$8 }
	$10 = [1]
	$9 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$10 = [0]
	
.LABEL $label$4
	CALL eosio_assert($10, [16997])
	CALL eosio_assert(((int_64)$12 > (int_64)0), [17687])
	CALL eosio_assert(((int_64)$6 == (int_64)$11), [16788])
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$10 }
	$9 = uint_32($9 >> [1])
	goto $label$9 
	
.LABEL $label$10
	$9 = *($4 + [4])
	
.LABEL $label$9
	CALL eosio_assert(($9 <= [257]), [16908])
	$8 = (int_64)0
	$11 = (int_64)59
	$9 = [17351]
	$15 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$16 }
	$10 = *($9)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$10 = ($10 + [-91])
	goto $label$14 
	
.LABEL $label$16
	$13 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$12
	$9 = ($9 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$11 }
	$9 = [1]
	if ( (CALL $10($0, $7, $15) == 0) ){ goto $label$17 }
	$8 = (int_64)0
	$11 = (int_64)59
	$9 = [17351]
	$15 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$23 }
	$10 = *($9)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$10 = ($10 + [-91])
	goto $label$21 
	
.LABEL $label$23
	$13 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$19
	$9 = ($9 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$18 }
	$9 = CALL $46($0, $7, $15, $1, $2)
	
.LABEL $label$17
	CALL eosio_assert($9, [17719])
	$9 = [0]
	*((($5 + [80]) + [32])) = [0]
	*($5 + [96]) = (int_64)-1
	*($5 + [104]) = (int_64)0
	$8 = *($0)
	*($5 + [80]) = $8
	*($5 + [88]) = $7
	$10 = CALL db_find_i64($8, $7, (int_64)-3617168955010973696, (int_64)-3617168955010973696)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$24 }
	CALL eosio_assert(((int_32)*(CALL $47(($5 + [80]), $10) + [8]) == (int_32)($5 + [80])), [17987])
	if ( ((int_64)CALL $48(($5 + [80])) == (int_64)1) ){ goto $label$24 }
	$10 = [1]
	if ( CALL $49($0, $7, $1) ){ goto $label$25 }
	$10 = CALL $49($0, $7, $2)
	
.LABEL $label$25
	CALL eosio_assert($10, [17751])
	
.LABEL $label$24
	CALL require_recipient($1)
	CALL require_recipient($2)
	*((($5 + [40]) + [32])) = [0]
	*($5 + [48]) = $1
	*($5 + [56]) = (int_64)-1
	*($5 + [64]) = (int_64)0
	$8 = *($0)
	*($5 + [40]) = $8
	$10 = CALL db_find_i64($8, $1, (int_64)3607749779137757184, $7)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$26 }
	$9 = CALL $12(($5 + [40]), $10)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($5 + [40])), [17987])
	
.LABEL $label$26
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [17808])
	CALL eosio_assert(((int_64)*($9) >= (int_64)$12), [17848])
	CALL eosio_assert($10, [18574])
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($5 + [40])), [18609])
	CALL eosio_assert(((int_64)*($5 + [40]) == (int_64)CALL $fimport$3()), [18655])
	$8 = *($9 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$8), [18981])
	$13 = (int_64)
	*($9) = $13(*($9) - $12))
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [19029])
	CALL eosio_assert(((int_64)*($9) < (int_64)4611686018427387904), [19051])
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$8) == (int_64)(uint_64)*($9 + [8]) >> (uint_64)(int_64)8)), [18706])
	CALL eosio_assert([1], [18765])
	CALL memcpy(($5 + [160]), $9, [8])
	CALL eosio_assert([1], [18765])
	$16 = (($5 + [160]) | [8])
	CALL memcpy($16, ($9 + [8]), [8])
	CALL db_update_i64(*($9 + [20]), (int_64)0, ($5 + [160]), [16])
	$14 = (($5 + [40]) + [16])
	if ( (uint_64)($8 <= *($14)) ){ goto $label$27 }
	*($14) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$27
	if ( ((int_64)*($9) != (int_64)0) ){ goto $label$28 }
	CALL eosio_assert($10, [19909])
	CALL eosio_assert($10, [19943])
	$10 = CALL db_next_i64(*(($9 + [20])), $5)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$29 }
	CALL $12(($5 + [40]), $10)
	
.LABEL $label$29
	CALL $37(($5 + [40]), $9)
	
.LABEL $label$28
	$9 = [0]
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	*($5 + [24]) = (int_64)0
	$8 = *($0)
	*($5) = $8
	*($5 + [8]) = $2
	$10 = CALL db_find_i64($8, $2, (int_64)3607749779137757184, $7)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$33 }
	$9 = CALL $12($5, $10)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [17987])
	CALL eosio_assert([1], [18574])
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [18609])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$3()), [18655])
	$8 = *($9 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$8), [19829])
	$13 = ((int_64)*($9) + (int_64)*($3))
	*($9) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [19872])
	CALL eosio_assert(((int_64)*($9) < (int_64)4611686018427387904), [19891])
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$8) == (int_64)(uint_64)*($9 + [8]) >> (uint_64)(int_64)8)), [18706])
	CALL eosio_assert([1], [18765])
	CALL memcpy(($5 + [160]), $9, [8])
	CALL eosio_assert([1], [18765])
	CALL memcpy($16, ($9 + [8]), [8])
	CALL db_update_i64(*($9 + [20]), (int_64)0, ($5 + [160]), [16])
	$9 = ($5 + [16])
	if ( (uint_64)($8 <= *($9)) ){ goto $label$32 }
	*($9) = ((int_64)$8 + (int_64)1)
	$14 = *($5 + [24])
	if ( $14 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$3()), [18771])
	*(($0 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [17938])
	$17 = ($0 + [8])
	$8 = (int_64)5459781
	
.LOOP $label$35:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$13 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$36 }
	$8 = $13
	$4 = [1]
	$10 = $9
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$8 = $13
	
.LOOP $label$37:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$34 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$9 < (int_32)[6])
	$14 = ($9 + [1])
	$9 = $14
	if ( $10 ){ goto $label$37 }
	$4 = [1]
	$9 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$35 }
	
.LABEL $label$34
	CALL eosio_assert($4, [16690])
	*($0 + [16]) = $5
	*(($9 = ($0 + [8]))) = *(($3 + [8]))
	*($0) = *($3)
	CALL eosio_assert([1], [18765])
	CALL memcpy(($5 + [160]), $0, [8])
	CALL eosio_assert([1], [18765])
	CALL memcpy($16, $17, [8])
	$8 = (uint_64)*($9) >> (uint_64)(int_64)8
	$10 = CALL db_store_i64(*(($5 + [8])), (int_64)3607749779137757184, $1, $8), ($5 + [160]), [16]
	*($0 + [20]) = $10)
	$14 = ($5 + [16])
	if ( (uint_64)($8 <= *($14)) ){ goto $label$38 }
	*($14) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$38
	*($5 + [184]) = $0
	$8 = (uint_64)*($9) >> (uint_64)(int_64)8
	*($5 + [160]) = $8)
	*($5 + [180]) = $10
	$14 = ($5 + [28])
	$9 = *($14)
	if ( ((uint_32)$9 >= (uint_32)*(($5 + [32]))) ){ goto $label$40 }
	*($9 + [8]) = $8
	*($9 + [16]) = $10
	*($5 + [184]) = [0]
	*($9) = $0
	*($14) = ($9 + [24])
	$9 = *($5 + [184])
	*($5 + [184]) = [0]
	if ( $9 ){ goto $label$39 }
	goto $label$32 
	
.LABEL $label$40
	CALL $14(($5 + [24]), ($5 + [184]), ($5 + [160]), ($5 + [180]))
	$9 = *($5 + [184])
	*($5 + [184]) = [0]
	if ( ($9 == 0) ){ goto $label$32 }
	
.LABEL $label$39
	CALL _ZdlPv($9)
	
.LABEL $label$32
	$14 = *($5 + [24])
	if ( ($14 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$0 = ($5 + [28])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$42 }
	
.LOOP $label$43:
	$9 = ($9 + [-24])
	$10 = *($9)
	*($9) = [0]
	if ( ($10 == 0) ){ goto $label$44 }
	CALL _ZdlPv($10)
	
.LABEL $label$44
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$43 }
	$9 = *(($5 + [24]))
	goto $label$41 
	
.LABEL $label$42
	$9 = $14
	
.LABEL $label$41
	*($0) = $14
	CALL _ZdlPv($9)
	
.LABEL $label$30
	$14 = *($5 + [64])
	if ( ($14 == 0) ){ goto $label$45 }
	$0 = ($5 + [68])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$47 }
	
.LOOP $label$48:
	$9 = ($9 + [-24])
	$10 = *($9)
	*($9) = [0]
	if ( ($10 == 0) ){ goto $label$49 }
	CALL _ZdlPv($10)
	
.LABEL $label$49
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$48 }
	$9 = *(($5 + [64]))
	goto $label$46 
	
.LABEL $label$47
	$9 = $14
	
.LABEL $label$46
	*($0) = $14
	CALL _ZdlPv($9)
	
.LABEL $label$45
	$14 = *($5 + [104])
	if ( ($14 == 0) ){ goto $label$50 }
	$0 = ($5 + [108])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$52 }
	
.LOOP $label$53:
	$9 = ($9 + [-24])
	$10 = *($9)
	*($9) = [0]
	if ( ($10 == 0) ){ goto $label$54 }
	CALL _ZdlPv($10)
	
.LABEL $label$54
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$53 }
	$9 = *(($5 + [104]))
	goto $label$51 
	
.LABEL $label$52
	$9 = $14
	
.LABEL $label$51
	*($0) = $14
	CALL _ZdlPv($9)
	
.LABEL $label$50
	$14 = *($5 + [144])
	if ( ($14 == 0) ){ goto $label$55 }
	$0 = ($5 + [148])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$57 }
	
.LOOP $label$58:
	$9 = ($9 + [-24])
	$10 = *($9)
	*($9) = [0]
	if ( ($10 == 0) ){ goto $label$59 }
	CALL _ZdlPv($10)
	
.LABEL $label$59
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$58 }
	$9 = *(($5 + [144]))
	goto $label$56 
	
.LABEL $label$57
	$9 = $14
	
.LABEL $label$56
	*($0) = $14
	CALL _ZdlPv($9)
	
.LABEL $label$55
	$global$0 = ($5 + [192])
}

int_64 .FUNC $44 (int_32 $0)
{
	int_64 $1
	int_64 $2
	int_64 $3
	float_64 $4
	float_64 $5
	int_32 $6
	int_64 $7
	$1 = *($0 + [40])
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	$2 = *(($0 + [48]))
	if ( ((int_64)$2 == (int_64)$1) ){ goto $label$1 }
	$3 = CALL current_time()
	$1 = *(($0 + [40]))
	$5 = (CASTING float_64)(uint_32 *($0 + [88]))
	$4 = (float_64)
	if ( ((float_64)$4((CASTING float_64)(uint_32 (CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000))) - (CASTING float_64)(uint_32 *($0 + [92])))) >= (float_64)$5) ){ goto $label$2 }
	$4 = ((float_64)((float_64)$4 * (float_64)(CASTING float_64)(int_64 $1)) / (float_64)$5)
	if ( ((float_64)(float_64)|$4| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$1 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$3
	$1 = (Rounds 0)($4)
	
.LABEL $label$2
	*(($0 + [48])) = $1
	if ( ((int_64)$1 == (int_64)$2) ){ goto $label$1 }
	CALL $115($0, (int_64))($1 - $2))
	
.LABEL $label$1
	$1 = *($0 + [56])
	$2 = *(($0 + [48]))
	*($0 + [56]) = $2
	$6 = ($0 + [24])
	$3 = *($6)
	CALL eosio_assert(( ((int_64)*($0 + [16]) != (int_64)0) ? ((int_64)$3 > (int_64)0) : (int_64)($3 == 0) ), [18381])
	CALL eosio_assert(((int_64)*($0 + [80]) > (int_64)0), [18433])
	$7 = *($6)
	$3 = *(($0 + [72]))
	CALL eosio_assert(( ((uint_64)*($0 + [64]) >= (uint_64)*($0 + [16])) ? ((int_64)$3 >= (int_64)$7) : ((int_64)$3 == (int_64)$7) ), [18482])
	CALL eosio_assert(((int_64)*($0 + [32]) >= (int_64)*($0 + [80])), [18526])
	return (int_64))($2 - $1)
}

int_64 .FUNC $167 (float_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	float_64 $5
	$1 = ($global$0 - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$2 = (CASTING int_64)(float_64 $0)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$3) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = ((int_64)$2 < (int_64)0)
	$5 = (float_64))(( ((float_64)((float_64)$0 + (float_64)(float_64)-4503599627370496) + (float_64)(float_64)4503599627370496) ? ((float_64)((float_64)$0 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) : $4 ) - $0)
	if ( ((uint_32)$3 > (uint_32)[1022]) ){ goto $label$2 }
	*($1 + [8]) = $5
	return ( (float_64)-0 ? (float_64)1 : $4 )
	
.LABEL $label$2
	$0 = ((float_64)$5 + (float_64)$0)
	if ( ((int_32)((float_64)$5 < (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)1)
	
.LABEL $label$1
	return $0
}

int_64 .FUNC $166 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC $165 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $164($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $168($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [20144])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [20128]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [20160]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $166($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC $164 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

void .FUNC $163 (int_32 $0)
{
}

void .FUNC $162 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $161 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $169(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $169 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_64 .FUNC $168 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

void .FUNC $175 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16612])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16420]
	$3 = (((int_32)$1 * (int_32)[12]) + [16420])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $58 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*((($4 + [24]) + [24])) = $5
	*((($4 + [8]) + [8])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $25(($4 + [52]), [24])
	$7 = *($4 + [52])
	$2 = (*(($4 + [56])) - $7)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [18765])
	CALL memcpy($7, $3, [8])
	CALL eosio_assert(((int_32)($2 + [-8]) > (int_32)[7]), [18765])
	CALL memcpy(($7 + [8]), ($3 + [8]), [8])
	CALL eosio_assert(((int_32)($2 + [-16]) > (int_32)[7]), [18765])
	CALL memcpy(($7 + [16]), ($3 + [16]), [8])
	CALL $27(($4 + [64]), ($4 + [24]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $162(($4 + [8]))
}

void .FUNC $59 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*((($4 + [24]) + [24])) = $5
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [24])
	$2 = ( *(($3 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [24])
	$0 = (CASTING uint_64)(uint_32 $2)
	$5 = ($3 + [24])
	$2 = (($4 + [24]) + [28])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $25($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [64]) = $7
	*($4 + [72]) = $2
	$2 = ($2 - $7)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [18765])
	CALL memcpy($7, $3, [8])
	CALL eosio_assert(((int_32)($2 + [-8]) > (int_32)[7]), [18765])
	CALL memcpy(($7 + [8]), ($3 + [8]), [8])
	CALL eosio_assert(((int_32)($2 + [-16]) > (int_32)[7]), [18765])
	CALL memcpy(($7 + [16]), ($3 + [16]), [8])
	*($4 + [68]) = ($7 + [24])
	CALL $142(($4 + [64]), $5)
	CALL $27(($4 + [64]), ($4 + [24]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $162(($4 + [8]))
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18038])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$5 }
	$2 = CALL $172($4)
	CALL db_get_i64($1, $2, $4)
	CALL $175($2)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	CALL db_get_i64($1, $2, $4)
	
.LABEL $label$4
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18061])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $124(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [128])
	$global$0 = $2
	if ( (*($1) & [1]) ){ goto $label$2 }
	$3 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$3 = *($1 + [8])
	
.LABEL $label$1
	$1 = [0]
	
.LOOP $label$3:
	$4 = ($3 + $1)
	$5 = ($1 + [1])
	$1 = $5
	if ( *($4) ){ goto $label$3 }
	$6 = (int_64)0
	if ( ((int_32)$5 == (int_32)[1]) ){ goto $label$4 }
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($5 + [-1])) << (int_64)3)
	$8 = (int_64)0
	$6 = (int_64)0
	
.LOOP $label$5:
	$1 = *($3)
	if ( ((uint_32)(($1 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$6 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$8 + (int_64)8) & (int_64)4294967288)) | (int_64)$6)
	
.LABEL $label$6
	$3 = ($3 + [1])
	$8 = ((int_64)$8 + (int_64)8)
	if ( ((int_64)$7 != (int_64)$8) ){ goto $label$5 }
	
.LABEL $label$4
	*(($2 + [112])) = [0]
	*($2 + [96]) = (int_64)-1
	*($2 + [104]) = (int_64)0
	$7 = *($0)
	*($2 + [80]) = $7
	$8 = (uint_64)$6 >> (uint_64)(int_64)8
	*($2 + [88]) = $8)
	$1 = [0]
	$3 = CALL db_find_i64($7, $8, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$1 = CALL $2(($2 + [80]), $3)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($2 + [80])), [17987])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [16624])
	$1 = *(($2 + [108]))
	if ( ((int_32)$1 == (int_32)*(($2 + [104]))) ){ goto $label$9 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($2 + [80])), [17987])
	goto $label$8 
	
.LABEL $label$9
	$1 = [0]
	$3 = CALL db_find_i64(*($2 + [80]), *(($2 + [88])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $2(($2 + [80]), $3)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($2 + [80])), [17987])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18070])
	$6 = *($1 + [80])
	$7 = *($1 + [32])
	CALL require_auth(*($1 + [8]))
	CALL eosio_assert(((int_64)$7 == (int_64)$6), [17866])
	$1 = *(($2 + [108]))
	if ( ((int_32)$1 == (int_32)*(($2 + [104]))) ){ goto $label$12 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($2 + [80])), [17987])
	if ( $1 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$1 = CALL db_find_i64(*($2 + [80]), *(($2 + [88])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$10 }
	$1 = CALL $2(($2 + [80]), $1)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($2 + [80])), [17987])
	
.LABEL $label$11
	CALL eosio_assert([1], [19909])
	CALL eosio_assert([1], [19943])
	$3 = CALL db_next_i64(*($1 + [116]), ($2 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$13 }
	CALL $2(($2 + [80]), $3)
	
.LABEL $label$13
	CALL $52(($2 + [80]), $1)
	
.LABEL $label$10
	*((($2 + [40]) + [32])) = [0]
	*($2 + [56]) = (int_64)-1
	*($2 + [64]) = (int_64)0
	$6 = *($0)
	*($2 + [40]) = $6
	*($2 + [48]) = $8
	$1 = CALL db_find_i64($6, $8, (int_64)-4157508551318700032, $8)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$14 }
	$1 = CALL $4(($2 + [40]), $1)
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)($2 + [40])), [17987])
	CALL eosio_assert([1], [19909])
	CALL eosio_assert([1], [19943])
	$3 = CALL db_next_i64(*($1 + [44]), $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$15 }
	CALL $4(($2 + [40]), $3)
	
.LABEL $label$15
	CALL $53(($2 + [40]), $1)
	
.LABEL $label$14
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$6 = *($0)
	*($2) = $6
	*($2 + [8]) = $8
	$1 = CALL db_find_i64($6, $8, (int_64)-5001621769904193536, (int_64)-5001621769904193536)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*(CALL $20($2, $1) + [8]) == (int_32)$2), [17987])
	$1 = *(($2 + [28]))
	if ( ((int_32)$1 == (int_32)*(($2 + [24]))) ){ goto $label$18 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$2), [17987])
	if ( $1 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$1 = CALL db_find_i64(*($2), *(($2 + [8])), (int_64)-5001621769904193536, (int_64)-5001621769904193536)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$16 }
	$1 = CALL $20($2, $1)
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$2), [17987])
	
.LABEL $label$17
	CALL eosio_assert([1], [19909])
	CALL eosio_assert([1], [19943])
	$3 = CALL db_next_i64(*($1 + [12]), ($2 + [120]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$19 }
	CALL $20($2, $3)
	
.LABEL $label$19
	CALL $54($2, $1)
	
.LABEL $label$16
	$4 = *($2 + [24])
	if ( ($4 == 0) ){ goto $label$20 }
	$5 = ($2 + [28])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$22 }
	
.LOOP $label$23:
	$1 = ($1 + [-24])
	$3 = *($1)
	*($1) = [0]
	if ( ($3 == 0) ){ goto $label$24 }
	CALL _ZdlPv($3)
	
.LABEL $label$24
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$23 }
	$1 = *(($2 + [24]))
	goto $label$21 
	
.LABEL $label$22
	$1 = $4
	
.LABEL $label$21
	*($5) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$20
	$4 = *($2 + [64])
	if ( ($4 == 0) ){ goto $label$25 }
	$5 = ($2 + [68])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$27 }
	
.LOOP $label$28:
	$1 = ($1 + [-24])
	$3 = *($1)
	*($1) = [0]
	if ( ($3 == 0) ){ goto $label$29 }
	CALL _ZdlPv($3)
	
.LABEL $label$29
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$28 }
	$1 = *(($2 + [64]))
	goto $label$26 
	
.LABEL $label$27
	$1 = $4
	
.LABEL $label$26
	*($5) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$25
	$4 = *($2 + [104])
	if ( ($4 == 0) ){ goto $label$30 }
	$5 = ($2 + [108])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$32 }
	
.LOOP $label$33:
	$1 = ($1 + [-24])
	$3 = *($1)
	*($1) = [0]
	if ( ($3 == 0) ){ goto $label$34 }
	CALL _ZdlPv($3)
	
.LABEL $label$34
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$33 }
	$1 = *(($2 + [104]))
	goto $label$31 
	
.LABEL $label$32
	$1 = $4
	
.LABEL $label$31
	*($5) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$30
	$global$0 = ($2 + [128])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [19973])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [20018])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [20068])
	$4 = *($2)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$2 = $3
	
.LOOP $label$4:
	$5 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $5
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$5 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [-24])
	
.LABEL $label$2
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $5
	CALL db_remove_i64(*($1 + [116]))
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [19973])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [20018])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [20068])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [19973])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [20018])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [20068])
	$4 = *($2)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$2 = $3
	
.LOOP $label$4:
	$5 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $5
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$5 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [-24])
	
.LABEL $label$2
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $5
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_32 $8)
{
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$9 = ($global$0 - [224])
	$global$0 = $9
	CALL require_auth((int_64)5157374374160997680)
	$10 = *(($1 + [8]))
	*((($9 + [136]) + [8])) = $10
	$11 = *(($3 + [8]))
	$12 = ($2 + [8])
	$13 = *($12)
	$14 = *($2)
	$15 = *($3)
	$16 = *($1)
	*((($9 + [56]) + [8])) = $10
	*((($9 + [120]) + [8])) = $13
	*(($3 = (($9 + [104]) + [8]))) = $11
	*((($9 + [40]) + [8])) = $13
	*($9 + [136]) = $16
	*($9 + [56]) = $16
	*($9 + [104]) = $15
	*($9 + [120]) = $14
	*($9 + [40]) = $14
	*((($9 + [24]) + [8])) = *($3)
	*($9 + [24]) = *($9 + [104])
	CALL $56($0, (int_64)5157374374160997680, ($9 + [56]), ($9 + [40]), ($9 + [24]), $4, $5, $6, $8)
	CALL $57($0, (uint_64)*($12) >> (uint_64)(int_64)8), $7, (int_64)5157374374160997680)
	$14 = *($0)
	$13 = (int_64)6
	
.LOOP $label$1:
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$1 }
	*(($3 = (($9 + [88]) + [8]))) = *(($2 + [8]))
	*($9 + [88]) = *($2)
	*(($1 = (($9 + [192]) + [8]))) = *($3)
	*($9 + [192]) = *($9 + [88])
	*(($3 = CALL _Znwj([16])) + [8]) = (int_64)3617214756542218240
	*($3) = (int_64)5157374374160997680
	*(($4 = (($9 + [152]) + [16]))) = *($1)
	*($9 + [160]) = *($9 + [192])
	*(($9 + [8])) = *($9 + [160])
	*(($9 + [16])) = *($4)
	*($9 + [208]) = $3
	*($9 + [152]) = (int_64)5157374374160997680
	$3 = ($3 + [16])
	*($9 + [216]) = $3
	*($9) = (int_64)5157374374160997680
	*($9 + [212]) = $3
	CALL $58($14, (int_64)5031766152489992192, ($9 + [208]), $9)
	$3 = *($9 + [208])
	if ( ($3 == 0) ){ goto $label$2 }
	*($9 + [212]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$14 = *($0)
	$13 = (int_64)6
	
.LOOP $label$3:
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$3 }
	*(($9 + [216])) = [0]
	*($9 + [208]) = (int_64)0
	$0 = CALL $170([17224])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$7 }
	*($9 + [208]) = ($0 << [1])
	$3 = (($9 + [208]) | [1])
	if ( $0 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = (($0 + [16]) & [-16])
	$3 = CALL _Znwj($1)
	*($9 + [208]) = ($1 | [1])
	*($9 + [216]) = $3
	*($9 + [212]) = $0
	
.LABEL $label$6
	CALL memcpy($3, [17224], $0)
	
.LABEL $label$5
	*(($3 + $0)) = [0]
	*(($0 = (($9 + [72]) + [8]))) = *(($2 + [8]))
	*($9 + [72]) = *($2)
	$3 = *($9 + [216])
	*($9 + [216]) = [0]
	$13 = *($9 + [208])
	*($9 + [208]) = (int_64)0
	*(($2 = CALL _Znwj([16]))) = (int_64)5157374374160997680
	*($2 + [8]) = (int_64)3617214756542218240
	*(($1 = ($9 + [184]))) = $3
	*((($9 + [152]) + [16])) = *($0)
	*($9 + [192]) = $2
	*($9 + [152]) = (int_64)5157374374160997680
	*($9 + [176]) = $13
	$2 = ($2 + [16])
	*($9 + [200]) = $2
	*($9 + [196]) = $2
	*($9 + [160]) = *($9 + [72])
	CALL $59($14, (int_64)8516769789752901632, ($9 + [192]), ($9 + [152]))
	if ( ((*($9 + [176]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($1))
	
.LABEL $label$8
	$2 = *($9 + [192])
	if ( ($2 == 0) ){ goto $label$9 }
	*($9 + [196]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	if ( ((*($9 + [208]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($9 + [216])))
	
.LABEL $label$10
	$global$0 = ($9 + [224])
	return (unreachable)
	
.LABEL $label$4
	CALL $157(($9 + [208]))
}

void .FUNC $56 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_64 $17
	$9 = ($global$0 - [160])
	$global$0 = $9
	$10 = [0]
	$11 = *($3 + [8])
	$12 = (uint_64)$11 >> (uint_64)(int_64)8
	$13 = $12)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$13 = $14
	$15 = [1]
	$16 = $10
	$10 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$13 = $14
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$15 = ((int_32)$10 < (int_32)[6])
	$16 = ($10 + [1])
	$10 = $16
	if ( $15 ){ goto $label$5 }
	$15 = [1]
	$10 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$15 = [0]
	
.LABEL $label$1
	CALL eosio_assert($15, [16690])
	CALL eosio_assert(((int_64)$11 == (int_64)*($4 + [8])), [19268])
	$15 = [0]
	*(($9 + [152])) = [0]
	*($9 + [136]) = (int_64)-1
	*($9 + [144]) = (int_64)0
	$13 = *($0)
	*($9 + [120]) = $13
	*($9 + [128]) = $12
	$10 = CALL db_find_i64($13, $12, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $2(($9 + [120]), $10) + [112]) == (int_32)($9 + [120])), [17987])
	$10 = [0]
	goto $label$6 
	
.LABEL $label$7
	$10 = [1]
	
.LABEL $label$6
	CALL eosio_assert($10, [19333])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1397703940), [19357])
	$13 = *($2)
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)-1) <= (int_64)10000000000000), [19385])
	$14 = *($3)
	if ( ((uint_64)((int_64)$14 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$8 }
	$10 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$17 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$12 = $17
	$15 = [1]
	$16 = $10
	$10 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$12 = $17
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$15 = ((int_32)$10 < (int_32)[6])
	$16 = ($10 + [1])
	$10 = $16
	if ( $15 ){ goto $label$12 }
	$15 = [1]
	$10 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$15 = [0]
	
.LABEL $label$8
	CALL eosio_assert($15, [19417])
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)-1) <= (int_64)100000000000000000), [19439])
	$12 = *($4)
	CALL eosio_assert((((int_64)$12 > (int_64)-1) & ((int_64)$14 >= (int_64)$12)), [19472])
	CALL eosio_assert(($5 <= [-1141367295]), [19497])
	CALL eosio_assert(($6 <= [100]), [19520])
	CALL eosio_assert((($7 <= [100]) & ((uint_32)$7 >= (uint_32)$6)), [19540])
	CALL eosio_assert(((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$8() / (uint_64)(int_64)1000000)) + [15552000]) >= (uint_32)$8), [19565])
	$17 = (int_64)$13 >> (int_64)63
	*(($9 + [24])) = $17)
	*(($9 + [72])) = $17
	*($9 + [16]) = $13
	*($9 + [64]) = $13
	*($9 + [8]) = $1
	*($9) = $11
	$13 = (int_64)
	*($9 + [32]) = $13($14 - $12))
	*($9 + [40]) = $12
	*($9 + [48]) = (int_64)0
	*($9 + [56]) = (int_64)0
	*($9 + [80]) = $13
	*($9 + [88]) = $5
	$13 = CALL current_time()
	*($9 + [96]) = $6
	*($9 + [97]) = $7
	$10 = (CASTING uint_32)(uint_64 ((uint_64)$13 / (uint_64)(int_64)1000000))
	*($9 + [92]) = ( $10 ? $8 : ((uint_32)$10 > (uint_32)$8) )
	CALL $32(($9 + [120]), $9, $1)
	$16 = *($9 + [144])
	if ( ($16 == 0) ){ goto $label$13 }
	$6 = ($9 + [148])
	$10 = *($6)
	if ( ((int_32)$10 == (int_32)$16) ){ goto $label$15 }
	
.LOOP $label$16:
	$10 = ($10 + [-24])
	$15 = *($10)
	*($10) = [0]
	if ( ($15 == 0) ){ goto $label$17 }
	CALL _ZdlPv($15)
	
.LABEL $label$17
	if ( ((int_32)$16 != (int_32)$10) ){ goto $label$16 }
	$10 = *(($9 + [144]))
	goto $label$14 
	
.LABEL $label$15
	$10 = $16
	
.LABEL $label$14
	*($6) = $16
	CALL _ZdlPv($10)
	
.LABEL $label$13
	$global$0 = ($9 + [160])
}

void .FUNC $57 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert((uint_64)($2 <= (int_64)10000), [19610])
	$5 = [0]
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$6 = *($0)
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	$0 = CALL db_find_i64($6, $1, (int_64)-5001621769904193536, (int_64)-5001621769904193536)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $20(($4 + [8]), $0) + [8]) == (int_32)($4 + [8])), [17987])
	goto $label$1 
	
.LABEL $label$2
	$5 = [1]
	
.LABEL $label$1
	CALL eosio_assert($5, [19628])
	*($4) = $2
	CALL $60(($4 + [8]), $4, $3)
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$3 }
	$8 = ($4 + [36])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$6 }
	$5 = *(($4 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$5 = $7
	
.LABEL $label$4
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $173 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $174($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [20176])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $152 ()
{
	int_32 $0
	int_64 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$0 = [0]
	*([0] + [8200]) = (int_64)1000000
	*([0] + [8192]) = (int_64)336271262468
	*([0] + [8208]) = (int_64)336271262468
	CALL eosio_assert([1], [17938])
	$1 = (uint_64)*([0] + [8208]) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$1 = $2
	$3 = [1]
	$4 = $0
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$1 = $2
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$5 = ($0 + [1])
	$0 = $5
	if ( $4 ){ goto $label$6 }
	$3 = [1]
	$0 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert($3, [16690])
	return 
	
.LABEL $label$2
	CALL eosio_assert([0], [16690])
	return 
	
.LABEL $label$1
	CALL eosio_assert([0], [16690])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $172($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $172($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18061])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18061])
	CALL memcpy(($0 + [48]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	*($2 + [8]) = $0
	CALL $151(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18061])
	CALL memcpy(($2 + [52]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18061])
	CALL memcpy(($0 + [53]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [56]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [18061])
	CALL memcpy(($0 + [64]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $157 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $175($0)
	
.LABEL $label$1
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [17987])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6533250085784911872, (int_64)-6533250085784911872)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $22($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [17987])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18574])
	CALL $131($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $132($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$3 = ($global$0 - [96])
	$global$0 = $3
	if ( (*($1) & [1]) ){ goto $label$2 }
	$4 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($1 + [8])
	
.LABEL $label$1
	$1 = [0]
	
.LOOP $label$3:
	$5 = ($4 + $1)
	$6 = ($1 + [1])
	$1 = $6
	if ( *($5) ){ goto $label$3 }
	$7 = (int_64)0
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$4 }
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-1])) << (int_64)3)
	$9 = (int_64)0
	$7 = (int_64)0
	
.LOOP $label$5:
	$1 = *($4)
	if ( ((uint_32)(($1 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$7 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$9 + (int_64)8) & (int_64)4294967288)) | (int_64)$7)
	
.LABEL $label$6
	$4 = ($4 + [1])
	$9 = ((int_64)$9 + (int_64)8)
	if ( ((int_64)$8 != (int_64)$9) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$8 = *($0)
	*($3 + [8]) = $8
	$9 = (uint_64)$7 >> (uint_64)(int_64)8
	*($3 + [16]) = $9)
	$4 = CALL db_find_i64($8, $9, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $2(($3 + [8]), $4) + [112]) == (int_32)($3 + [8])), [17987])
	$1 = [1]
	
.LABEL $label$7
	CALL eosio_assert($1, [16624])
	$1 = *(($3 + [36]))
	if ( ((int_32)$1 == (int_32)*(($3 + [32]))) ){ goto $label$9 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($3 + [8])), [17987])
	goto $label$8 
	
.LABEL $label$9
	$1 = [0]
	$4 = CALL db_find_i64(*($3 + [8]), *(($3 + [16])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $2(($3 + [8]), $4)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($3 + [8])), [17987])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18070])
	$7 = *($1 + [8])
	CALL require_auth($7)
	CALL eosio_assert((uint_64)($2 <= (int_64)2), [19757])
	*(($3 + [88])) = [0]
	*($3 + [64]) = $9
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	*($3 + [56]) = *($0)
	*($3 + [48]) = $2
	CALL $69(($3 + [56]), ($3 + [48]), $7)
	$5 = *($3 + [80])
	if ( ($5 == 0) ){ goto $label$10 }
	$6 = ($3 + [84])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL _ZdlPv($4)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($3 + [80]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $5
	
.LABEL $label$11
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$15 }
	$6 = ($3 + [36])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL _ZdlPv($4)
	
.LABEL $label$19
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$18 }
	$1 = *(($3 + [32]))
	goto $label$16 
	
.LABEL $label$17
	$1 = $5
	
.LABEL $label$16
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($3 + [96])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	if ( (*($1) & [1]) ){ goto $label$2 }
	$4 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($1 + [8])
	
.LABEL $label$1
	$1 = [0]
	
.LOOP $label$3:
	$5 = ($4 + $1)
	$6 = ($1 + [1])
	$1 = $6
	if ( *($5) ){ goto $label$3 }
	$7 = (int_64)0
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$4 }
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-1])) << (int_64)3)
	$9 = (int_64)0
	$7 = (int_64)0
	
.LOOP $label$5:
	$1 = *($4)
	if ( ((uint_32)(($1 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$7 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$9 + (int_64)8) & (int_64)4294967288)) | (int_64)$7)
	
.LABEL $label$6
	$4 = ($4 + [1])
	$9 = ((int_64)$9 + (int_64)8)
	if ( ((int_64)$8 != (int_64)$9) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$8 = *($0)
	*($3 + [8]) = $8
	$9 = (uint_64)$7 >> (uint_64)(int_64)8
	*($3 + [16]) = $9)
	$4 = CALL db_find_i64($8, $9, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $2(($3 + [8]), $4) + [112]) == (int_32)($3 + [8])), [17987])
	$1 = [1]
	
.LABEL $label$7
	CALL eosio_assert($1, [16624])
	$1 = *(($3 + [36]))
	if ( ((int_32)$1 == (int_32)*(($3 + [32]))) ){ goto $label$9 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($3 + [8])), [17987])
	goto $label$8 
	
.LABEL $label$9
	$1 = [0]
	$4 = CALL db_find_i64(*($3 + [8]), *(($3 + [16])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $2(($3 + [8]), $4)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($3 + [8])), [17987])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18070])
	$7 = *($1 + [8])
	CALL require_auth($7)
	CALL $66($0, $9, $2, $7)
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$10 }
	$6 = ($3 + [36])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL _ZdlPv($4)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($3 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $5
	
.LABEL $label$11
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [17987])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3617168955010973696, (int_64)-3617168955010973696)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $47($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [17987])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18574])
	CALL $128($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $129($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [18771])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [18765])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-2063328927043551232, $2, $6, ($4 + [16]), [8])
	*($5 + [12]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [8]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [4]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [8]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $124(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $66 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [56]) = $2
	CALL eosio_assert(CALL eosio_assert1($2), [19728])
	*(($4 + [48])) = [0]
	*($4 + [24]) = $1
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	*($4 + [16]) = *($0)
	*($4 + [8]) = ($4 + [56])
	CALL $67($4, ($4 + [16]), $3, ($4 + [8]))
	$5 = *($4 + [40])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($4 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$5 }
	CALL _ZdlPv($7)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($4 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $61 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_64 $8, int_32 $9)
{
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	float_64 $18
	int_32 $19
	int_64 $20
	$10 = ($global$0 - [288])
	$global$0 = $10
	CALL require_auth($1)
	$11 = *($3 + [8])
	if ( (int_64)(((int_64)$11 & (int_64)65280) == 0) ){ goto $label$3 }
	$12 = [0]
	$13 = *([0] + [8208])
	$14 = *([0] + [8200])
	$15 = $11
	
.LOOP $label$5:
	$12 = ($12 + [1])
	if ( ((uint_32)$12 > (uint_32)[7]) ){ goto $label$4 }
	$16 = ((int_64)$15 & (int_64)16711680)
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)$16 != (int_64)0) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((uint_32)$12 > (uint_32)[3]) ){ goto $label$1 }
	$12 = [-4]
	
.LOOP $label$7:
	$17 = ($12 + [1])
	if ( ((uint_32)($12 + [5]) > (uint_32)[7]) ){ goto $label$6 }
	$15 = ((int_64)$11 & (int_64)16711680)
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$12 = $17
	if ( ((int_64)$15 != (int_64)0) ){ goto $label$7 }
	
.LABEL $label$6
	$18 = (CASTING float_64)(uint_32 ([0] - $17))
	goto $label$2 
	
.LABEL $label$3
	$18 = (float_64)4
	
.LABEL $label$2
	$18 = CALL $165((float_64)10, $18)
	if ( ((float_64)(float_64)|$18| < (float_64)(float_64)9223372036854775808) ){ goto $label$9 }
	$15 = (int_64)-9223372036854775808
	goto $label$8 
	
.LABEL $label$9
	$15 = (Rounds 0)($18)
	
.LABEL $label$8
	$16 = *([0] + [8200])
	CALL __multi3(($10 + [88]), $16, (int_64)$16 >> (int_64)63), $15, (int_64)$15 >> (int_64)63))
	$13 = *([0] + [8208])
	$15 = *(($10 + [96]))
	$14 = *($10 + [88])
	CALL eosio_assert(( (uint_64)($14 <= (int_64)4611686018427387904) ? ((int_64)$15 < (int_64)0) : (int_64)($15 == 0) ), [19658])
	CALL eosio_assert(( ((uint_64)$14 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$15 > (int_64)-1) : ((int_64)$15 == (int_64)-1) ), [19682])
	
.LABEL $label$1
	*(($10 + [192])) = [0]
	*($10 + [208]) = $13
	*($10 + [200]) = $14
	*($10 + [184]) = (int_64)0
	$12 = CALL $170([17916])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$14 }
	*($10 + [184]) = ($12 << [1])
	$17 = (($10 + [184]) | [1])
	if ( $12 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$19 = (($12 + [16]) & [-16])
	$17 = CALL _Znwj($19)
	*($10 + [184]) = ($19 | [1])
	*($10 + [192]) = $17
	*($10 + [188]) = $12
	
.LABEL $label$13
	CALL memcpy($17, [17916], $12)
	
.LABEL $label$12
	*(($17 + $12)) = [0]
	*((($10 + [72]) + [8])) = *((($10 + [200]) + [8]))
	*($10 + [72]) = *($10 + [200])
	CALL $39($0, $1, ($10 + [72]), $10)
	if ( ((*($10 + [184]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($10 + [192]))
	
.LABEL $label$15
	$11 = *(($2 + [8]))
	*((($10 + [168]) + [8])) = $11
	$14 = *(($4 + [8]))
	$13 = *($4)
	$15 = *($3)
	$16 = *($2)
	$12 = ($3 + [8])
	$20 = *($12)
	*((($10 + [40]) + [8])) = $20
	*((($10 + [56]) + [8])) = $11
	*((($10 + [152]) + [8])) = $20
	*(($17 = (($10 + [136]) + [8]))) = $14
	*($10 + [168]) = $16
	*($10 + [152]) = $15
	*($10 + [136]) = $13
	*($10 + [56]) = $16
	*($10 + [40]) = $15
	*((($10 + [24]) + [8])) = *($17)
	*($10 + [24]) = *($10 + [136])
	CALL $56($0, $1, ($10 + [56]), ($10 + [40]), ($10 + [24]), $5, $6, $7, $9)
	CALL $57($0, (uint_64)*($12) >> (uint_64)(int_64)8), $8, $1)
	$16 = *($0)
	$15 = (int_64)6
	
.LOOP $label$16:
	$15 = ((int_64)$15 + (int_64)1)
	if ( ((int_64)$15 != (int_64)13) ){ goto $label$16 }
	*(($12 = (($10 + [120]) + [8]))) = *(($3 + [8]))
	*($10 + [120]) = *($3)
	*(($17 = (($10 + [256]) + [8]))) = *($12)
	*($10 + [256]) = *($10 + [120])
	*(($12 = CALL _Znwj([16])) + [8]) = (int_64)3617214756542218240
	*($12) = $1
	*(($2 = (($10 + [216]) + [16]))) = *($17)
	*($10 + [224]) = *($10 + [256])
	*(($10 + [8])) = *($10 + [224])
	*(($10 + [16])) = *($2)
	*($10 + [272]) = $12
	*($10 + [216]) = $1
	$12 = ($12 + [16])
	*($10 + [280]) = $12
	*($10) = $1
	*($10 + [276]) = $12
	CALL $58($16, (int_64)5031766152489992192, ($10 + [272]), $10)
	$12 = *($10 + [272])
	if ( ($12 == 0) ){ goto $label$17 }
	*($10 + [276]) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$17
	$16 = *($0)
	$15 = (int_64)6
	
.LOOP $label$18:
	$15 = ((int_64)$15 + (int_64)1)
	if ( ((int_64)$15 != (int_64)13) ){ goto $label$18 }
	*(($10 + [280])) = [0]
	*($10 + [272]) = (int_64)0
	$12 = CALL $170([17224])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$21 }
	*($10 + [272]) = ($12 << [1])
	$17 = (($10 + [272]) | [1])
	if ( $12 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$0 = (($12 + [16]) & [-16])
	$17 = CALL _Znwj($0)
	*($10 + [272]) = ($0 | [1])
	*($10 + [280]) = $17
	*($10 + [276]) = $12
	
.LABEL $label$20
	CALL memcpy($17, [17224], $12)
	
.LABEL $label$19
	*(($17 + $12)) = [0]
	*(($17 = (($10 + [104]) + [8]))) = *(($3 + [8]))
	*($10 + [104]) = *($3)
	$3 = *($10 + [280])
	*($10 + [280]) = [0]
	$15 = *($10 + [272])
	*($10 + [272]) = (int_64)0
	*(($12 = CALL _Znwj([16]))) = $1
	*($12 + [8]) = (int_64)3617214756542218240
	*(($0 = ($10 + [248]))) = $3
	*((($10 + [216]) + [16])) = *($17)
	*($10 + [256]) = $12
	*($10 + [216]) = $1
	*($10 + [240]) = $15
	$12 = ($12 + [16])
	*($10 + [264]) = $12
	*($10 + [260]) = $12
	*($10 + [224]) = *($10 + [104])
	CALL $59($16, (int_64)8516769789752901632, ($10 + [256]), ($10 + [216]))
	if ( ((*($10 + [240]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($0))
	
.LABEL $label$22
	$12 = *($10 + [256])
	if ( ($12 == 0) ){ goto $label$23 }
	*($10 + [260]) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$23
	if ( ((*($10 + [272]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($10 + [280])))
	
.LABEL $label$24
	$global$0 = ($10 + [288])
	return (unreachable)
	
.LABEL $label$11
	CALL $157(($10 + [184]))
	
.LABEL $label$10
	CALL $157(($10 + [272]))
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [17987])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5001621769904193536, (int_64)-5001621769904193536)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $20($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [17987])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18574])
	CALL $125($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $126($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$3 = ($global$0 - [96])
	$global$0 = $3
	if ( (*($1) & [1]) ){ goto $label$2 }
	$4 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($1 + [8])
	
.LABEL $label$1
	$1 = [0]
	
.LOOP $label$3:
	$5 = ($4 + $1)
	$6 = ($1 + [1])
	$1 = $6
	if ( *($5) ){ goto $label$3 }
	$7 = (int_64)0
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$4 }
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-1])) << (int_64)3)
	$9 = (int_64)0
	$7 = (int_64)0
	
.LOOP $label$5:
	$1 = *($4)
	if ( ((uint_32)(($1 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$7 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$9 + (int_64)8) & (int_64)4294967288)) | (int_64)$7)
	
.LABEL $label$6
	$4 = ($4 + [1])
	$9 = ((int_64)$9 + (int_64)8)
	if ( ((int_64)$8 != (int_64)$9) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$8 = *($0)
	*($3 + [8]) = $8
	$9 = (uint_64)$7 >> (uint_64)(int_64)8
	*($3 + [16]) = $9)
	$4 = CALL db_find_i64($8, $9, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $2(($3 + [8]), $4) + [112]) == (int_32)($3 + [8])), [17987])
	$1 = [1]
	
.LABEL $label$7
	CALL eosio_assert($1, [16624])
	$1 = *(($3 + [36]))
	if ( ((int_32)$1 == (int_32)*(($3 + [32]))) ){ goto $label$9 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($3 + [8])), [17987])
	goto $label$8 
	
.LABEL $label$9
	$1 = [0]
	$4 = CALL db_find_i64(*($3 + [8]), *(($3 + [16])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $2(($3 + [8]), $4)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($3 + [8])), [17987])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18070])
	$7 = *($1 + [8])
	CALL require_auth($7)
	CALL eosio_assert((uint_64)($2 <= (int_64)2), [19707])
	*(($3 + [88])) = [0]
	*($3 + [64]) = $9
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	*($3 + [56]) = *($0)
	*($3 + [48]) = $2
	CALL $64(($3 + [56]), ($3 + [48]), $7)
	$5 = *($3 + [80])
	if ( ($5 == 0) ){ goto $label$10 }
	$6 = ($3 + [84])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL _ZdlPv($4)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($3 + [80]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $5
	
.LABEL $label$11
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$15 }
	$6 = ($3 + [36])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL _ZdlPv($4)
	
.LABEL $label$19
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$18 }
	$1 = *(($3 + [32]))
	goto $label$16 
	
.LABEL $label$17
	$1 = $5
	
.LABEL $label$16
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($3 + [96])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	if ( (*($1) & [1]) ){ goto $label$2 }
	$4 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($1 + [8])
	
.LABEL $label$1
	$1 = [0]
	
.LOOP $label$3:
	$5 = ($4 + $1)
	$6 = ($1 + [1])
	$1 = $6
	if ( *($5) ){ goto $label$3 }
	$7 = (int_64)0
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$4 }
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-1])) << (int_64)3)
	$9 = (int_64)0
	$7 = (int_64)0
	
.LOOP $label$5:
	$1 = *($4)
	if ( ((uint_32)(($1 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$7 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$9 + (int_64)8) & (int_64)4294967288)) | (int_64)$7)
	
.LABEL $label$6
	$4 = ($4 + [1])
	$9 = ((int_64)$9 + (int_64)8)
	if ( ((int_64)$8 != (int_64)$9) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$8 = *($0)
	*($3 + [8]) = $8
	$9 = (uint_64)$7 >> (uint_64)(int_64)8
	*($3 + [16]) = $9)
	$4 = CALL db_find_i64($8, $9, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $2(($3 + [8]), $4) + [112]) == (int_32)($3 + [8])), [17987])
	$1 = [1]
	
.LABEL $label$7
	CALL eosio_assert($1, [16624])
	$1 = *(($3 + [36]))
	if ( ((int_32)$1 == (int_32)*(($3 + [32]))) ){ goto $label$9 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($3 + [8])), [17987])
	goto $label$8 
	
.LABEL $label$9
	$1 = [0]
	$4 = CALL db_find_i64(*($3 + [8]), *(($3 + [16])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $2(($3 + [8]), $4)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($3 + [8])), [17987])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18070])
	$7 = *($1 + [8])
	CALL require_auth($7)
	CALL $57($0, $9, $2, $7)
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$10 }
	$6 = ($3 + [36])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL _ZdlPv($4)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($3 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $5
	
.LABEL $label$11
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_64 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	$11 = ($global$0 - [48])
	$global$0 = $11
	if ( (*($1) & [1]) ){ goto $label$2 }
	$12 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$12 = *($1 + [8])
	
.LABEL $label$1
	$1 = [0]
	
.LOOP $label$3:
	$13 = ($12 + $1)
	$14 = ($1 + [1])
	$1 = $14
	if ( *($13) ){ goto $label$3 }
	$15 = (int_64)0
	if ( ((int_32)$14 == (int_32)[1]) ){ goto $label$4 }
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($14 + [-1])) << (int_64)3)
	$17 = (int_64)0
	$15 = (int_64)0
	
.LOOP $label$5:
	$1 = *($12)
	if ( ((uint_32)(($1 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$15 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$17 + (int_64)8) & (int_64)4294967288)) | (int_64)$15)
	
.LABEL $label$6
	$12 = ($12 + [1])
	$17 = ((int_64)$17 + (int_64)8)
	if ( ((int_64)$16 != (int_64)$17) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [0]
	*(($11 + [40])) = [0]
	*($11 + [24]) = (int_64)-1
	*($11 + [32]) = (int_64)0
	$17 = *($0)
	*($11 + [8]) = $17
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	*($11 + [16]) = $15)
	$12 = CALL db_find_i64($17, $15, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $2(($11 + [8]), $12) + [112]) == (int_32)($11 + [8])), [17987])
	$1 = [1]
	
.LABEL $label$7
	CALL eosio_assert($1, [16624])
	$1 = *(($11 + [36]))
	if ( ((int_32)$1 == (int_32)*(($11 + [32]))) ){ goto $label$9 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($11 + [8])), [17987])
	goto $label$8 
	
.LABEL $label$9
	$1 = [0]
	$12 = CALL db_find_i64(*($11 + [8]), *(($11 + [16])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $2(($11 + [8]), $12)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($11 + [8])), [17987])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18070])
	CALL require_auth(*($1 + [8]))
	$1 = *($10)
	if ( ($1 & [1]) ){ goto $label$11 }
	$1 = uint_32($1 >> [1])
	goto $label$10 
	
.LABEL $label$11
	$1 = *($10 + [4])
	
.LABEL $label$10
	CALL eosio_assert(($1 <= [1025]), [16660])
	$13 = *($11 + [32])
	if ( ($13 == 0) ){ goto $label$12 }
	$14 = ($11 + [36])
	$1 = *($14)
	if ( ((int_32)$1 == (int_32)$13) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = ($1 + [-24])
	$12 = *($1)
	*($1) = [0]
	if ( ($12 == 0) ){ goto $label$16 }
	CALL _ZdlPv($12)
	
.LABEL $label$16
	if ( ((int_32)$13 != (int_32)$1) ){ goto $label$15 }
	$1 = *(($11 + [32]))
	goto $label$13 
	
.LABEL $label$14
	$1 = $13
	
.LABEL $label$13
	*($14) = $13
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($11 + [48])
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [28]) = $0
	*($3 + [16]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $172($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [12]) = [0]
	*($3 + [36]) = $1
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + $0)
	CALL $97(($3 + [32]), $3)
	CALL eosio_assert(((int_32)*($3 + [40]) != (int_32)*($3 + [36])), [18061])
	CALL memcpy(($3 + [47]), *($3 + [36]), [1])
	*($3 + [12]) = ((int_32)*($3 + [47]) != (int_32)[0])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $175($1)
	
.LABEL $label$4
	*($3 + [36]) = ($3 + [16])
	*($3 + [32]) = ($3 + [28])
	CALL $109(($3 + [32]), $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$5
	$global$0 = ($3 + [48])
	return [1]
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $172($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [18061])
	CALL memcpy(($3 + [8]), $1, [8])
	*($3 + [52]) = ($1 + [8])
	CALL $97(($3 + [48]), (($3 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $175($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $106(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [272])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $172($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $111(($3 + [56]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $175($2)
	
.LABEL $label$5
	*(($1 = (($3 + [160]) + [8]))) = *((($3 + [56]) + [8]))
	*(($2 = (($3 + [144]) + [8]))) = *(($3 + [80]))
	*(($6 = (($3 + [128]) + [8]))) = *(($3 + [96]))
	*($3 + [160]) = *($3 + [56])
	*($3 + [144]) = *($3 + [72])
	*($3 + [128]) = *($3 + [88])
	$7 = *($3 + [104])
	$8 = *($3 + [108])
	$9 = *($3 + [109])
	$10 = *($3 + [112])
	$11 = *($3 + [120])
	*((($3 + [208]) + [8])) = *($6)
	*((($3 + [192]) + [8])) = *($2)
	*((($3 + [176]) + [8])) = *($1)
	*($3 + [208]) = *($3 + [128])
	*($3 + [192]) = *($3 + [144])
	*($3 + [176]) = *($3 + [160])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$12 = *((($3 + [176]) + [8]))
	*((($3 + [256]) + [8])) = $12
	$13 = *((($3 + [192]) + [8]))
	*((($3 + [240]) + [8])) = $13
	$14 = *((($3 + [208]) + [8]))
	*((($3 + [224]) + [8])) = $14
	*((($3 + [40]) + [8])) = $12
	*((($3 + [24]) + [8])) = $13
	*((($3 + [8]) + [8])) = $14
	$12 = *($3 + [176])
	*($3 + [256]) = $12
	$13 = *($3 + [192])
	*($3 + [240]) = $13
	$14 = *($3 + [208])
	*($3 + [224]) = $14
	*($3 + [40]) = $12
	*($3 + [24]) = $13
	*($3 + [8]) = $14
	CALL void $1((int_32 ($3 + [40])), (int_32 ($3 + [24])), (int_32 ($3 + [8])), (int_32 $7), (int_32 ($8 & [255])), (int_32 ($9 & [255])), (int_32 $10), (int_64 $11), (int_32 $5))
	$global$0 = ($3 + [272])
	return [1]
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $172($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [32])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [68]) = $1
	*($3 + [64]) = $1
	*($3 + [72]) = ($1 + $0)
	CALL $97(($3 + [64]), $3)
	CALL eosio_assert(((uint_32)(*($3 + [72]) - *($3 + [68])) > (uint_32)[7]), [18061])
	CALL memcpy(($3 + [16]), *($3 + [68]), [8])
	*($3 + [68]) = (*($3 + [68]) + [8])
	CALL $98(($3 + [64]), ($3 + [24]))
	$2 = ($3 + [36])
	CALL $98(($3 + [64]), $2)
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $175($1)
	
.LABEL $label$4
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $99(($3 + [64]), $3)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [40])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1 = *(($3 + [24]))
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [28])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$7
	$global$0 = ($3 + [80])
	return [1]
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$2 = ($global$0 - [272])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $172($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $110(($3 + [48]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $175($2)
	
.LABEL $label$5
	*(($1 = (($3 + [160]) + [8]))) = *(($3 + [64]))
	*(($2 = (($3 + [144]) + [8]))) = *(($3 + [80]))
	*(($6 = (($3 + [128]) + [8]))) = *(($3 + [96]))
	*($3 + [160]) = *($3 + [56])
	*($3 + [144]) = *($3 + [72])
	*($3 + [128]) = *($3 + [88])
	$7 = *($3 + [48])
	$8 = *($3 + [104])
	$9 = *($3 + [108])
	$10 = *($3 + [109])
	$11 = *($3 + [112])
	$12 = *($3 + [120])
	*((($3 + [208]) + [8])) = *($6)
	*((($3 + [192]) + [8])) = *($2)
	*((($3 + [176]) + [8])) = *($1)
	*($3 + [208]) = *($3 + [128])
	*($3 + [192]) = *($3 + [144])
	*($3 + [176]) = *($3 + [160])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$13 = *((($3 + [176]) + [8]))
	*((($3 + [256]) + [8])) = $13
	$14 = *((($3 + [192]) + [8]))
	*((($3 + [240]) + [8])) = $14
	$15 = *((($3 + [208]) + [8]))
	*((($3 + [224]) + [8])) = $15
	*((($3 + [32]) + [8])) = $13
	*((($3 + [16]) + [8])) = $14
	*(($3 + [8])) = $15
	$13 = *($3 + [176])
	*($3 + [256]) = $13
	$14 = *($3 + [192])
	*($3 + [240]) = $14
	$15 = *($3 + [208])
	*($3 + [224]) = $15
	*($3 + [32]) = $13
	*($3 + [16]) = $14
	*($3) = $15
	CALL void $1((int_32 $7), (int_64 ($3 + [32])), (int_32 ($3 + [16])), (int_32 $3), (int_32 $8), (int_32 ($9 & [255])), (int_32 ($10 & [255])), (int_32 $11), (int_64 $12), (int_32 $5))
	$global$0 = ($3 + [272])
	return [1]
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $172($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($3 + [16]) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [52]) = $1
	*($3 + [48]) = $1
	*($3 + [56]) = ($1 + $0)
	CALL $97(($3 + [48]), ($3 + [8]))
	CALL eosio_assert(((uint_32)(*($3 + [56]) - *($3 + [52])) > (uint_32)[7]), [18061])
	CALL memcpy(($3 + [24]), *($3 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $175($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $101(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $172($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1397703940
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	CALL eosio_assert([1], [17938])
	$6 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [16690])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [72]) = ($4 + $5)
	*($3 + [64]) = $4
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [18061])
	CALL memcpy(($3 + [8]), $4, [8])
	$1 = ($5 & [-8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [18061])
	CALL memcpy((($3 + [8]) + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [18061])
	CALL memcpy((($3 + [8]) + [16]), ($4 + [16]), [8])
	*($3 + [68]) = ($4 + [24])
	CALL $97(($3 + [64]), (($3 + [8]) + [24]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $175($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $105(($3 + [64]), ($3 + [8]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return [1]
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $172($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1397703940
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [17938])
	$6 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [16690])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $95(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $175($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $96(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [336])
	$global$0 = $3
	CALL memory()
	*($3 + [328]) = $0
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17339]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$6 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$9 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17351]
	$7 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$15 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$8 = ($8 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$11
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$10 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$9 }
	*($3 + [324]) = [0]
	*($3 + [320]) = [1]
	*($3 + [8]) = *($3 + [320])
	CALL $82(($3 + [328]), ($3 + [8]))
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $163([0])
	$global$0 = ($3 + [336])
	return (unreachable)
	
.LABEL $label$7
	if ( ((int_64)$2 <= (int_64)-3617168760277827585) ){ goto $label$34 }
	if ( ((int_64)$2 > (int_64)5031766152489992191) ){ goto $label$33 }
	if ( ((int_64)$2 <= (int_64)3626411939917201407) ){ goto $label$31 }
	if ( ((int_64)$2 == (int_64)3626411939917201408) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)4983106858454614016) ){ goto $label$16 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [2]
	*($3 + [128]) = *($3 + [200])
	CALL $83(($3 + [328]), ($3 + [128]))
	CALL eosio_exit([0])
	
.LABEL $label$34
	if ( ((int_64)$2 <= (int_64)-4421672816961650689) ){ goto $label$32 }
	if ( ((int_64)$2 <= (int_64)-4417057977681313793) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)-4417057977681313792) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)-4417057971920792576) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)-4417015721779789824) ){ goto $label$16 }
	*($3 + [276]) = [0]
	*($3 + [272]) = [3]
	*($3 + [56]) = *($3 + [272])
	CALL $84(($3 + [328]), ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$33
	if ( ((int_64)$2 <= (int_64)5382254363446083583) ){ goto $label$29 }
	if ( ((int_64)$2 == (int_64)5382254363446083584) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)5382478046416601088) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)8516769789752901632) ){ goto $label$16 }
	*($3 + [252]) = [0]
	*($3 + [248]) = [4]
	*($3 + [80]) = *($3 + [248])
	CALL $83(($3 + [328]), ($3 + [80]))
	CALL eosio_exit([0])
	
.LABEL $label$32
	if ( ((int_64)$2 > (int_64)-5003315193367756801) ){ goto $label$28 }
	if ( ((int_64)$2 == (int_64)-8281838239757631488) ){ goto $label$21 }
	if ( ((int_64)$2 != (int_64)-7297632115821117440) ){ goto $label$16 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [5]
	*($3 + [152]) = *($3 + [176])
	CALL $85(($3 + [328]), ($3 + [152]))
	CALL eosio_exit([0])
	
.LABEL $label$31
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$20 }
	if ( ((int_64)$2 != (int_64)3626370970574667776) ){ goto $label$16 }
	*($3 + [292]) = [0]
	*($3 + [288]) = [6]
	*($3 + [40]) = *($3 + [288])
	CALL $84(($3 + [328]), ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$30
	if ( ((int_64)$2 == (int_64)-4421672816961650688) ){ goto $label$19 }
	if ( ((int_64)$2 != (int_64)-4417357895975362048) ){ goto $label$16 }
	*($3 + [316]) = [0]
	*($3 + [312]) = [7]
	*($3 + [16]) = *($3 + [312])
	CALL $86(($3 + [328]), ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$29
	if ( ((int_64)$2 == (int_64)5031766152489992192) ){ goto $label$18 }
	if ( ((int_64)$2 != (int_64)5157374374159113616) ){ goto $label$16 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [8]
	*($3 + [160]) = *($3 + [168])
	CALL $87(($3 + [328]), ($3 + [160]))
	CALL eosio_exit([0])
	
.LABEL $label$28
	if ( ((int_64)$2 == (int_64)-5003315193367756800) ){ goto $label$17 }
	if ( ((int_64)$2 != (int_64)-5001247386194935808) ){ goto $label$16 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [9]
	*($3 + [96]) = *($3 + [232])
	CALL $88(($3 + [328]), ($3 + [96]))
	CALL eosio_exit([0])
	
.LABEL $label$27
	*($3 + [284]) = [0]
	*($3 + [280]) = [10]
	*($3 + [48]) = *($3 + [280])
	CALL $84(($3 + [328]), ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$26
	*($3 + [188]) = [0]
	*($3 + [184]) = [11]
	*($3 + [144]) = *($3 + [184])
	CALL $89(($3 + [328]), ($3 + [144]))
	CALL eosio_exit([0])
	
.LABEL $label$25
	*($3 + [300]) = [0]
	*($3 + [296]) = [12]
	*($3 + [32]) = *($3 + [296])
	CALL $84(($3 + [328]), ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$24
	*($3 + [268]) = [0]
	*($3 + [264]) = [13]
	*($3 + [64]) = *($3 + [264])
	CALL $84(($3 + [328]), ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$23
	*($3 + [196]) = [0]
	*($3 + [192]) = [14]
	*($3 + [136]) = *($3 + [192])
	CALL $90(($3 + [328]), ($3 + [136]))
	CALL eosio_exit([0])
	
.LABEL $label$22
	*($3 + [260]) = [0]
	*($3 + [256]) = [15]
	*($3 + [72]) = *($3 + [256])
	CALL $91(($3 + [328]), ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$21
	*($3 + [308]) = [0]
	*($3 + [304]) = [16]
	*($3 + [24]) = *($3 + [304])
	CALL $92(($3 + [328]), ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$20
	*($3 + [220]) = [0]
	*($3 + [216]) = [17]
	*($3 + [112]) = *($3 + [216])
	CALL $82(($3 + [328]), ($3 + [112]))
	CALL eosio_exit([0])
	
.LABEL $label$19
	*($3 + [212]) = [0]
	*($3 + [208]) = [18]
	*($3 + [120]) = *($3 + [208])
	CALL $93(($3 + [328]), ($3 + [120]))
	CALL eosio_exit([0])
	
.LABEL $label$18
	*($3 + [244]) = [0]
	*($3 + [240]) = [19]
	*($3 + [88]) = *($3 + [240])
	CALL $93(($3 + [328]), ($3 + [88]))
	CALL eosio_exit([0])
	
.LABEL $label$17
	*($3 + [228]) = [0]
	*($3 + [224]) = [20]
	*($3 + [104]) = *($3 + [224])
	CALL $94(($3 + [328]), ($3 + [104]))
	
.LABEL $label$16
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	CALL require_auth(*($0))
}

void .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18061])
	CALL memcpy(($2 + [56]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18061])
	CALL memcpy(($3 + [60]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18061])
	CALL memcpy(($3 + [61]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy(($3 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [18061])
	CALL memcpy(($3 + [72]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [48]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2 + [8]) = $0
	CALL $149(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $145 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*(*($0)) + int_32($4 >> [1]))
	$6 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$6 = *((*($5) + $6))
	
.LABEL $label$1
	$0 = CALL $158(($3 + [16]), $1)
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$1 = (*($2 + [4]) - *($2))
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = int_32($1 >> [3])
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	$1 = CALL _Znwj($1)
	*(($3 + [8])) = ($1 + ($4 << [3]))
	*($3) = $1
	*($3 + [4]) = $1
	$4 = *($2)
	$2 = (*(($2 + [4])) - $4)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($1, $4, $2)
	*($3 + [4]) = (*($3 + [4]) + $2)
	
.LABEL $label$3
	CALL void $5((int_32 $0), (int_32 $3), (int_32 $6))
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$4 }
	*($3 + [4]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	if ( ((*($0) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($0 + [8]))
	
.LABEL $label$5
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $162($3)
}

void .FUNC $144 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [48])
	$global$0 = $5
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*(*($0)) + int_32($6 >> [1]))
	$8 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$8 = *((*($7) + $8))
	
.LABEL $label$1
	$0 = CALL $158(($5 + [32]), $1)
	*($5 + [24]) = [0]
	*($5 + [16]) = (int_64)0
	$1 = (*($3 + [4]) - *($3))
	if ( ($1 == 0) ){ goto $label$4 }
	$6 = int_32($1 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$3 }
	$1 = CALL _Znwj($1)
	*(($5 + [24])) = ($1 + ($6 << [3]))
	*($5 + [16]) = $1
	*($5 + [20]) = $1
	$6 = *($3)
	$3 = (*(($3 + [4])) - $6)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($1, $6, $3)
	*($5 + [20]) = (*($5 + [20]) + $3)
	
.LABEL $label$4
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	$3 = (*($4 + [4]) - *($4))
	if ( ($3 == 0) ){ goto $label$5 }
	$1 = int_32($3 >> [3])
	if ( ((uint_32)$1 >= (uint_32)[536870912]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($5 + [8])) = ($3 + ($1 << [3]))
	*($5) = $3
	*($5 + [4]) = $3
	$1 = *($4)
	$4 = (*(($4 + [4])) - $1)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($3, $1, $4)
	*($5 + [4]) = (*($5 + [4]) + $4)
	
.LABEL $label$5
	CALL void $7((int_32 $0), (int_32 $2), (int_64 ($5 + [16])), (int_32 $5), (int_32 $8))
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$6 }
	*($5 + [4]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$3 = *($5 + [16])
	if ( ($3 == 0) ){ goto $label$7 }
	*($5 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((*($0) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($0 + [8]))
	
.LABEL $label$8
	$global$0 = ($5 + [48])
	return (unreachable)
	
.LABEL $label$3
	CALL $162(($5 + [16]))
	
.LABEL $label$2
	CALL $162($5)
	(unreachable)
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	CALL $97(*($1), ($0 + [8]))
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [56]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [64]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $146 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_64 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	$11 = ($global$0 - [144])
	$global$0 = $11
	$0 = *($0 + [4])
	$12 = *($0 + [4])
	$13 = (*(*($0)) + int_32($12 >> [1]))
	$0 = *($0)
	if ( (($12 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($13) + $0))
	
.LABEL $label$1
	$10 = CALL $158($11, $10)
	$8 = CALL $158(($11 + [16]), $8)
	$7 = CALL $158(($11 + [32]), $7)
	$6 = CALL $158(($11 + [48]), $6)
	$5 = CALL $158(($11 + [64]), $5)
	$4 = CALL $158(($11 + [80]), $4)
	$3 = CALL $158(($11 + [96]), $3)
	$2 = CALL $158(($11 + [112]), $2)
	$1 = CALL $158(($11 + [128]), $1)
	CALL void $13((int_32 $1), (int_32 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_32 $7), (int_32 $8), (int_32 $9), (int_64 $10), (int_32 $0))
	if ( (*($10) & [1]) ){ goto $label$18 }
	if ( (*($8) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*($8 + [8]))
	$0 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$0 = [1]
	if ( (*($7) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( (*($6) & $0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & $0) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($6 + [8]))
	$0 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$0 = [1]
	if ( (*($5) & [1]) ){ goto $label$10 }
	
.LABEL $label$11
	if ( (*($4) & $0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & $0) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($4 + [8]))
	$0 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$0 = [1]
	if ( (*($3) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($2) & $0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($2) & $0) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($2 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($1) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($11 + [144])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($11 + [144])
}

int_32 .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [17938])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [16690])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18061])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18061])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18066])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $25($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18061])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18765])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18765])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [18771])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [18765])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-5001308409090277376, $2, $6, ($4 + [16]), [8])
	*($5 + [12]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [8]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [4]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [8]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $121(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	if ( (*($1) & [1]) ){ goto $label$2 }
	$4 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($1 + [8])
	
.LABEL $label$1
	$1 = [0]
	
.LOOP $label$3:
	$5 = ($4 + $1)
	$6 = ($1 + [1])
	$1 = $6
	if ( *($5) ){ goto $label$3 }
	$7 = (int_64)0
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$4 }
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-1])) << (int_64)3)
	$9 = (int_64)0
	$7 = (int_64)0
	
.LOOP $label$5:
	$1 = *($4)
	if ( ((uint_32)(($1 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$7 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$9 + (int_64)8) & (int_64)4294967288)) | (int_64)$7)
	
.LABEL $label$6
	$4 = ($4 + [1])
	$9 = ((int_64)$9 + (int_64)8)
	if ( ((int_64)$8 != (int_64)$9) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [0]
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$8 = *($0)
	*($3 + [24]) = $8
	$9 = (uint_64)$7 >> (uint_64)(int_64)8
	*($3 + [32]) = $9)
	$4 = CALL db_find_i64($8, $9, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $2(($3 + [24]), $4) + [112]) == (int_32)($3 + [24])), [17987])
	$1 = [1]
	
.LABEL $label$7
	CALL eosio_assert($1, [16624])
	$1 = *(($3 + [52]))
	if ( ((int_32)$1 == (int_32)*(($3 + [48]))) ){ goto $label$9 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($3 + [24])), [17987])
	goto $label$8 
	
.LABEL $label$9
	$1 = [0]
	$4 = CALL db_find_i64(*($3 + [24]), *(($3 + [32])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $2(($3 + [24]), $4)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($3 + [24])), [17987])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18070])
	$7 = *($1 + [8])
	CALL require_auth($7)
	*($3 + [16]) = [0]
	*($3 + [8]) = (int_64)0
	$1 = (*($2 + [4]) - *($2))
	if ( ($1 == 0) ){ goto $label$11 }
	$4 = int_32($1 >> [3])
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$10 }
	$1 = CALL _Znwj($1)
	*(($3 + [16])) = ($1 + ($4 << [3]))
	*($3 + [8]) = $1
	*($3 + [12]) = $1
	$5 = *($2)
	$4 = (*(($2 + [4])) - $5)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($1, $5, $4)
	*($3 + [12]) = (*($3 + [12]) + $4)
	
.LABEL $label$11
	CALL $74($0, $9, ($3 + [8]), $7)
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$12 }
	*($3 + [12]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$5 = *($3 + [48])
	if ( ($5 == 0) ){ goto $label$13 }
	$6 = ($3 + [52])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	CALL _ZdlPv($4)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$16 }
	$1 = *(($3 + [48]))
	goto $label$14 
	
.LABEL $label$15
	$1 = $5
	
.LABEL $label$14
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$global$0 = ($3 + [64])
	return (unreachable)
	
.LABEL $label$10
	CALL $162(($3 + [8]))
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	if ( (*($1) & [1]) ){ goto $label$2 }
	$4 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($1 + [8])
	
.LABEL $label$1
	$1 = [0]
	
.LOOP $label$3:
	$5 = ($4 + $1)
	$6 = ($1 + [1])
	$1 = $6
	if ( *($5) ){ goto $label$3 }
	$7 = (int_64)0
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$4 }
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-1])) << (int_64)3)
	$9 = (int_64)0
	$7 = (int_64)0
	
.LOOP $label$5:
	$1 = *($4)
	if ( ((uint_32)(($1 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$7 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$9 + (int_64)8) & (int_64)4294967288)) | (int_64)$7)
	
.LABEL $label$6
	$4 = ($4 + [1])
	$9 = ((int_64)$9 + (int_64)8)
	if ( ((int_64)$8 != (int_64)$9) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$8 = *($0)
	*($3 + [8]) = $8
	$9 = (uint_64)$7 >> (uint_64)(int_64)8
	*($3 + [16]) = $9)
	$4 = CALL db_find_i64($8, $9, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $2(($3 + [8]), $4) + [112]) == (int_32)($3 + [8])), [17987])
	$1 = [1]
	
.LABEL $label$7
	CALL eosio_assert($1, [16624])
	$1 = *(($3 + [36]))
	if ( ((int_32)$1 == (int_32)*(($3 + [32]))) ){ goto $label$9 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($3 + [8])), [17987])
	goto $label$8 
	
.LABEL $label$9
	$1 = [0]
	$4 = CALL db_find_i64(*($3 + [8]), *(($3 + [16])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $2(($3 + [8]), $4)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($3 + [8])), [17987])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18070])
	$7 = *($1 + [8])
	CALL require_auth($7)
	CALL $71($0, $9, $2, $7)
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$10 }
	$6 = ($3 + [36])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL _ZdlPv($4)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($3 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $5
	
.LABEL $label$11
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
}

void .FUNC $71 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [56]) = $2
	CALL eosio_assert(CALL eosio_assert1($2), [19776])
	*(($4 + [48])) = [0]
	*($4 + [24]) = $1
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	*($4 + [16]) = *($0)
	*($4 + [8]) = ($4 + [56])
	CALL $72($4, ($4 + [16]), $3, ($4 + [8]))
	$5 = *($4 + [40])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($4 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$5 }
	CALL _ZdlPv($7)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($4 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$5 = ($global$0 - [80])
	$global$0 = $5
	if ( (*($1) & [1]) ){ goto $label$2 }
	$6 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($1 + [8])
	
.LABEL $label$1
	$1 = [0]
	
.LOOP $label$3:
	$7 = ($6 + $1)
	$8 = ($1 + [1])
	$1 = $8
	if ( *($7) ){ goto $label$3 }
	$9 = (int_64)0
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$4 }
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($8 + [-1])) << (int_64)3)
	$11 = (int_64)0
	$9 = (int_64)0
	
.LOOP $label$5:
	$1 = *($6)
	if ( ((uint_32)(($1 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$9 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$11 + (int_64)8) & (int_64)4294967288)) | (int_64)$9)
	
.LABEL $label$6
	$6 = ($6 + [1])
	$11 = ((int_64)$11 + (int_64)8)
	if ( ((int_64)$10 != (int_64)$11) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [0]
	*(($5 + [72])) = [0]
	*($5 + [56]) = (int_64)-1
	*($5 + [64]) = (int_64)0
	$10 = *($0)
	*($5 + [40]) = $10
	$11 = (uint_64)$9 >> (uint_64)(int_64)8
	*($5 + [48]) = $11)
	$6 = CALL db_find_i64($10, $11, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $2(($5 + [40]), $6) + [112]) == (int_32)($5 + [40])), [17987])
	$1 = [1]
	
.LABEL $label$7
	CALL eosio_assert($1, [16624])
	$1 = *(($5 + [68]))
	if ( ((int_32)$1 == (int_32)*(($5 + [64]))) ){ goto $label$9 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($5 + [40])), [17987])
	goto $label$8 
	
.LABEL $label$9
	$1 = [0]
	$6 = CALL db_find_i64(*($5 + [40]), *(($5 + [48])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $2(($5 + [40]), $6)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)($5 + [40])), [17987])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18070])
	$9 = *($1 + [8])
	CALL require_auth($9)
	*($5 + [32]) = [0]
	*($5 + [24]) = (int_64)0
	$1 = (*($3 + [4]) - *($3))
	if ( ($1 == 0) ){ goto $label$12 }
	$6 = int_32($1 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$11 }
	$1 = CALL _Znwj($1)
	*(($5 + [32])) = ($1 + ($6 << [3]))
	*($5 + [24]) = $1
	*($5 + [28]) = $1
	$7 = *($3)
	$6 = (*(($3 + [4])) - $7)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($1, $7, $6)
	*($5 + [28]) = (*($5 + [28]) + $6)
	
.LABEL $label$12
	*($5 + [16]) = [0]
	*($5 + [8]) = (int_64)0
	$1 = (*($4 + [4]) - *($4))
	if ( ($1 == 0) ){ goto $label$13 }
	$6 = int_32($1 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$10 }
	$1 = CALL _Znwj($1)
	*(($5 + [16])) = ($1 + ($6 << [3]))
	*($5 + [8]) = $1
	*($5 + [12]) = $1
	$7 = *($4)
	$6 = (*(($4 + [4])) - $7)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$13 }
	CALL memcpy($1, $7, $6)
	*($5 + [12]) = (*($5 + [12]) + $6)
	
.LABEL $label$13
	CALL $77($0, $11, $2, ($5 + [24]), ($5 + [8]), $9)
	$1 = *($5 + [8])
	if ( ($1 == 0) ){ goto $label$14 }
	*($5 + [12]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$1 = *($5 + [24])
	if ( ($1 == 0) ){ goto $label$15 }
	*($5 + [28]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$7 = *($5 + [64])
	if ( ($7 == 0) ){ goto $label$16 }
	$8 = ($5 + [68])
	$1 = *($8)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$20 }
	CALL _ZdlPv($6)
	
.LABEL $label$20
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$19 }
	$1 = *(($5 + [64]))
	goto $label$17 
	
.LABEL $label$18
	$1 = $7
	
.LABEL $label$17
	*($8) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$16
	$global$0 = ($5 + [80])
	return (unreachable)
	
.LABEL $label$11
	CALL $162(($5 + [24]))
	
.LABEL $label$10
	CALL $162(($5 + [8]))
	(unreachable)
}

void .FUNC $77 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$6 = ($global$0 - [112])
	$global$0 = $6
	*($6 + [104]) = $2
	*($6 + [72]) = (int_64)-4421672816961650688
	*($6 + [80]) = (int_64)-3617168760277827584
	*($6 + [88]) = (int_64)-5001247386194935808
	*($6 + [96]) = (int_64)4983106858454614016
	*($6 + [64]) = (int_64)4520488125973135360
	$7 = ($6 + [104])
	$8 = ($6 + [64])
	if ( ((int_64)$2 == (int_64)4520488125973135360) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-4421672816961650688) ){ goto $label$2 }
	$8 = (($6 + [64]) | [8])
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$3 }
	$8 = ($6 + [80])
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)$2 != (int_64)-5001247386194935808) ){ goto $label$4 }
	$8 = ($6 + [88])
	goto $label$1 
	
.LABEL $label$4
	$8 = ( ($6 + [96]) ? $7 : ((int_64)$2 == (int_64)4983106858454614016) )
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)$7), [19808])
	*(($6 + [56])) = [0]
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	$9 = *($0)
	*($6 + [24]) = $9
	*($6 + [32]) = $1
	$8 = CALL db_find_i64($9, $1, (int_64)3617211078187941888, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $17(($6 + [24]), $8)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)($6 + [24])), [17987])
	*($6 + [12]) = $4
	*($6 + [8]) = $3
	CALL eosio_assert([1], [18574])
	CALL $78(($6 + [24]), $8, (int_64)0, ($6 + [8]))
	$3 = *($6 + [48])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	*($6 + [12]) = $3
	*($6 + [16]) = $4
	*($6 + [8]) = ($6 + [104])
	CALL $79($6, ($6 + [24]), $5, ($6 + [8]))
	$3 = *($6 + [48])
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$4 = ($6 + [52])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$11 }
	$0 = *($8 + [20])
	if ( ($0 == 0) ){ goto $label$12 }
	*(($8 + [24])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$12
	$0 = *($8 + [8])
	if ( ($0 == 0) ){ goto $label$13 }
	*(($8 + [12])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$13
	CALL _ZdlPv($8)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$10 }
	$8 = *(($6 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$8 = $3
	
.LABEL $label$8
	*($4) = $3
	CALL _ZdlPv($8)
	$global$0 = ($6 + [112])
	return 
	
.LABEL $label$5
	$global$0 = ($6 + [112])
}

void .FUNC $74 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	$4 = ($global$0 - [112])
	$global$0 = $4
	*($4 + [72]) = (int_64)-4421672816961650688
	$5 = (int_64)4520488125973135360
	*($4 + [64]) = (int_64)4520488125973135360
	*($4 + [80]) = (int_64)-3617168760277827584
	*($4 + [88]) = (int_64)-5001247386194935808
	*($4 + [96]) = (int_64)4983106858454614016
	$6 = [0]
	$7 = [0]
	$8 = *($2)
	if ( ((int_32)*($2 + [4]) == (int_32)$8) ){ goto $label$1 }
	$9 = ($4 + [96])
	$10 = (($4 + [64]) + [24])
	$11 = (($4 + [64]) + [16])
	$12 = (($4 + [64]) | [8])
	$13 = ($4 + [104])
	$14 = [0]
	$15 = ($2 + [4])
	$16 = [1]
	
.LOOP $label$2:
	$6 = ($4 + [64])
	$17 = *(($8 + $14))
	if ( ((int_64)$5 == (int_64)$17) ){ goto $label$3 }
	$6 = $12
	if ( ((int_64)*($4 + [72]) == (int_64)$17) ){ goto $label$3 }
	$6 = $11
	if ( ((int_64)*((($4 + [64]) + [16])) == (int_64)$17) ){ goto $label$3 }
	$6 = $10
	if ( ((int_64)*((($4 + [64]) + [24])) == (int_64)$17) ){ goto $label$3 }
	$6 = ( $9 ? $13 : ((int_64)*($9) == (int_64)$17) )
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)$13), [19808])
	$8 = *($2)
	$6 = (*($15) - $8)
	$7 = int_32($6 >> [3])
	if ( ((uint_32)$16 >= (uint_32)$7) ){ goto $label$1 }
	$14 = ($14 + [8])
	$16 = ($16 + [1])
	$5 = *($4 + [64])
	goto $label$2 
	
.LABEL $label$1
	*(($4 + [56])) = [0]
	*($4 + [32]) = $1
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	*($4 + [24]) = *($0)
	*(($4 + [16])) = [0]
	*($4) = $1
	*($4 + [8]) = (int_64)0
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$4 }
	$14 = CALL _Znwj($6)
	*(($4 + [8])) = $14
	*(($16 = ($4 + [12]))) = $14
	*(($4 + [16])) = ($14 + ($7 << [3]))
	$8 = *($2)
	$6 = (*(($2 + [4])) - $8)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($14, $8, $6)
	*($16) = (*($16) + $6)
	
.LABEL $label$5
	CALL $75(($4 + [24]), $4, $3)
	$14 = *($4 + [8])
	if ( ($14 == 0) ){ goto $label$6 }
	*(($4 + [12])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$6
	$8 = *($4 + [48])
	if ( ($8 == 0) ){ goto $label$7 }
	$2 = ($4 + [52])
	$14 = *($2)
	if ( ((int_32)$14 == (int_32)$8) ){ goto $label$9 }
	
.LOOP $label$10:
	$14 = ($14 + [-24])
	$16 = *($14)
	*($14) = [0]
	if ( ($16 == 0) ){ goto $label$11 }
	$6 = *($16 + [8])
	if ( ($6 == 0) ){ goto $label$12 }
	*(($16 + [12])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$12
	CALL _ZdlPv($16)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$14) ){ goto $label$10 }
	$14 = *(($4 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$14 = $8
	
.LABEL $label$8
	*($2) = $8
	CALL _ZdlPv($14)
	
.LABEL $label$7
	$global$0 = ($4 + [112])
	return (unreachable)
	
.LABEL $label$4
	CALL $162(($4 + [8]))
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$0), [17987])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-8281834790116331520, (int_64)-8281834790116331520)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $15($0, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$0), [17987])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18574])
	CALL $134($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $135($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [18609])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [18655])
	$6 = *($1)
	$8 = *($3)
	$7 = ($1 + [8])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$1 }
	CALL $137($7, *($8), *($8 + [4]))
	
.LABEL $label$1
	$3 = *($3 + [4])
	$8 = ($1 + [20])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$2 }
	CALL $137($8, *($3), *($3 + [4]))
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [18706])
	$10 = *($1 + [8])
	$9 = *(($1 + [12]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	$3 = [8]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$4 }
	$3 = (($11 & [-8]) + $3)
	
.LABEL $label$4
	$10 = *($1 + [20])
	$9 = *(($1 + [24]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$6 }
	$3 = (($11 & [-8]) + $3)
	
.LABEL $label$6
	if ( ($3 <= [513]) ){ goto $label$8 }
	$4 = CALL $172($3)
	goto $label$7 
	
.LABEL $label$8
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$7
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [18765])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	CALL $138($5, $7)
	CALL $138($5, $8)
	CALL db_update_i64(*($1 + [36]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $175($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	
.LABEL $label$10
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$9
	$global$0 = ($5 + [16])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [18771])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32]) = $1
	CALL $139(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $114(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [20])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [24])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [12])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18066])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $113($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [18061])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = CALL $158(($2 + [32]), $1)
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = [0]
	$4 = *($1 + [16])
	$5 = (*(($1 + [28])) - *($1 + [24]))
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = int_32($5 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	$5 = CALL _Znwj($5)
	*(($2 + [24])) = ($5 + ($6 << [3]))
	*($2 + [16]) = $5
	*($2 + [20]) = $5
	$7 = *(($1 + [24]))
	$6 = (*(($1 + [28])) - $7)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $7, $6)
	*($2 + [20]) = (*($2 + [20]) + $6)
	
.LABEL $label$3
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$5 = (*(($1 + [40])) - *($1 + [36]))
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = int_32($5 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*(($2 + [8])) = ($5 + ($6 << [3]))
	*($2) = $5
	*($2 + [4]) = $5
	$6 = *(($1 + [36]))
	$1 = (*(($1 + [40])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($5, $6, $1)
	*($2 + [4]) = (*($2 + [4]) + $1)
	
.LABEL $label$4
	CALL $144($0, $3, $4, ($2 + [16]), $2)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$5 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$6 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$7
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $162(($2 + [16]))
	
.LABEL $label$1
	CALL $162($2)
	(unreachable)
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [92]) = $0
	*($3 + [80]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $172($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $107(($3 + [8]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $175($2)
	
.LABEL $label$5
	*($3 + [4]) = ($3 + [80])
	*($3) = ($3 + [92])
	CALL $108($3, ($3 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$6
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $97(*($1), ($0 + [32]))
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $158(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $158(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $143($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $160($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $160($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $157($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $172($6)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [36]) = $1
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + $6)
	CALL $97(($3 + [32]), $3)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL $175($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$6 = CALL $158(($3 + [16]), $3)
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	$4 = CALL $158(($3 + [32]), $6)
	CALL void $1((int_32 $4), (int_32 $5))
	if ( (*($3 + [32]) & [1]) ){ goto $label$10 }
	if ( (*($3 + [16]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($6 + [8]))
	$1 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$1 = [1]
	if ( (*($3) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $1
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [8])))
	$global$0 = ($3 + [48])
	return $1
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [176])
	$global$0 = $2
	*(($3 = $2) + [140]) = $0
	*($3 + [128]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $172($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [64])) = (int_64)0
	*(($3 + [72])) = (int_64)0
	*(($3 + [88])) = (int_64)0
	*(($3 + [96])) = (int_64)0
	*(($3 + [120])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [104]) = (int_64)0
	*($3 + [112]) = (int_64)0
	*($3 + [148]) = $1
	*($3 + [144]) = $1
	*($3 + [152]) = ($1 + $0)
	*($3 + [160]) = ($3 + [144])
	*($3 + [168]) = ($3 + [8])
	CALL $102(($3 + [168]), ($3 + [160]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $175($1)
	
.LABEL $label$4
	*($3 + [148]) = ($3 + [128])
	*($3 + [144]) = ($3 + [140])
	CALL $103(($3 + [144]), ($3 + [8]))
	CALL $104(($3 + [8]))
	$global$0 = ($3 + [176])
	return [1]
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $172($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [52]) = $2
	*($3 + [48]) = $2
	*($3 + [56]) = ($2 + $1)
	CALL $97(($3 + [48]), ($3 + [8]))
	$0 = ($3 + [20])
	CALL $98(($3 + [48]), $0)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $175($2)
	
.LABEL $label$5
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $100(($3 + [48]), ($3 + [8]))
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$6 }
	*(($3 + [24])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$7
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $172($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1397703940
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [17938])
	$8 = (int_64)5459781
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [16690])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18061])
	CALL memcpy(($3 + [24]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [18061])
	$1 = (($3 + [24]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [18061])
	CALL memcpy((($3 + [24]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $175($6)
	
.LABEL $label$8
	*(($2 = (($3 + [48]) + [8]))) = *(($1 + [8]))
	*($3 + [48]) = *($1)
	$8 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($2)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$10 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [64])
	*($3 + [8]) = $10
	*($3 + [80]) = $10
	CALL void $1((int_32 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18765])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [18765])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$7 = *($4 + [4])
	$6 = ($1 + [8])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$1 }
	CALL $137($6, *($7), *($7 + [4]))
	
.LABEL $label$1
	$4 = *($4 + [8])
	$7 = ($1 + [20])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	CALL $137($7, *($4), *($4 + [4]))
	
.LABEL $label$2
	$9 = *($1 + [8])
	$8 = *(($1 + [12]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	$4 = [8]
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$4 }
	$4 = (($10 & [-8]) + $4)
	
.LABEL $label$4
	$9 = *($1 + [20])
	$8 = *(($1 + [24]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$6 }
	$4 = (($10 & [-8]) + $4)
	
.LABEL $label$6
	if ( ($4 <= [513]) ){ goto $label$8 }
	$2 = CALL $172($4)
	goto $label$7 
	
.LABEL $label$8
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$7
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [18765])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $138($3, $6)
	CALL $138($3, $7)
	$11 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($5 + [8]), (int_64)3617211078187941888, *(*($0 + [8])), $11, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$11 >= (uint_64)*($5 + [16])) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $175($2)
	if ( (uint_64)($11 <= *($5 + [16])) ){ goto $label$9 }
	
.LABEL $label$10
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	$global$0 = ($3 + [16])
}

void .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $162($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $131 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [18609])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [18655])
	*($1) = *(*($3))
	CALL eosio_assert([1], [18706])
	CALL eosio_assert([1], [18765])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-6533250085784911872) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-6533250085784911871
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [18771])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [18765])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-6533250085784911872, $2, (int_64)-6533250085784911872, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-6533250085784911872) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-6533250085784911871
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-6533250085784911872
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-6533250085784911872
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $133(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $162($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $134 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [18609])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [18655])
	$6 = *($3)
	*($1) = *($6)
	$3 = [8]
	$7 = ($1 + [8])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$1 }
	CALL $137($7, *($6 + [8]), *(($6 + [12])))
	
.LABEL $label$1
	CALL eosio_assert([1], [18706])
	$8 = *($1 + [8])
	$6 = *(($1 + [12]))
	$9 = ($6 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$3 = (($9 & [-8]) + $3)
	
.LABEL $label$3
	if ( ($3 <= [513]) ){ goto $label$5 }
	$6 = CALL $172($3)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($5) = $6
	*($5 + [8]) = ($6 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [18765])
	CALL memcpy($6, $1, [8])
	*($5 + [4]) = ($6 + [8])
	CALL $138($5, $7)
	CALL db_update_i64(*($1 + [28]), $2, $6, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)-8281834790116331520) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $175($6)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-8281834790116331520) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = (int_64)-8281834790116331519
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [16])
}

void .FUNC $135 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [18771])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = $1
	CALL $136(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)-8281834790116331520
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)-8281834790116331520
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $112(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [8])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($1 + [12])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	$5 = [8]
	$6 = ($1 + [8])
	$7 = *($0)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$1 }
	CALL $137($6, *($4 + [8]), *(($4 + [12])))
	
.LABEL $label$1
	$8 = *($1 + [8])
	$4 = *(($1 + [12]))
	$9 = ($4 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$5 = (($9 & [-8]) + $5)
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $172($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($3) = $4
	*($3 + [8]) = ($4 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [18765])
	CALL memcpy($4, $1, [8])
	*($3 + [4]) = ($4 + [8])
	CALL $138($3, $6)
	*($1 + [28]) = CALL db_store_i64(*($7 + [8]), (int_64)-8281834790116331520, *(*($0 + [8])), (int_64)-8281834790116331520, $4, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($7 + [16]) <= (uint_64)(int_64)-8281834790116331520) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $175($4)
	if ( ((uint_64)*($7 + [16]) > (uint_64)(int_64)-8281834790116331520) ){ goto $label$6 }
	
.LABEL $label$7
	*(($7 + [16])) = (int_64)-8281834790116331519
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [3])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$6 = [536870911]
	if ( ((uint_32)int_32($5 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [3])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $162($0)
}

void .FUNC $129 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [18771])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [18765])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-3617168955010973696, $2, (int_64)-3617168955010973696, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-3617168955010973696) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-3617168955010973695
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-3617168955010973696
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-3617168955010973696
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $130(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $128 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [18609])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [18655])
	*($1) = *(*($3))
	CALL eosio_assert([1], [18706])
	CALL eosio_assert([1], [18765])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-3617168955010973696) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-3617168955010973695
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [128])
	$global$0 = $4
	$5 = [0]
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	$8 = $7)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [16690])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [16908])
	$10 = [0]
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$8 = *($0)
	*($4 + [8]) = $8
	*($4 + [16]) = $7
	$11 = [0]
	$5 = CALL db_find_i64($8, $7, (int_64)-4157508551318700032, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $4(($4 + [8]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [8])), [17987])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [16937])
	CALL require_auth(*($11 + [32]))
	$3 = ($11 + [32])
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $9
	$10 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $9
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $10 ){ goto $label$13 }
	$10 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	
.LABEL $label$9
	CALL eosio_assert($10, [16997])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [17014])
	CALL eosio_assert(((int_64)$6 == (int_64)*($11 + [8])), [16788])
	CALL eosio_assert(((int_64)$8 <= (int_64))(*($11 + [16]) - *($11))), [17043])
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [8])), [18609])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$3()), [18655])
	$7 = *($11 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [19829])
	$8 = ((int_64)*($11) + (int_64)$8)
	*($11) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [19872])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [19891])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$8) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [18706])
	*($4 + [96]) = (($4 + [48]) + [40])
	*($4 + [92]) = ($4 + [48])
	*($4 + [88]) = ($4 + [48])
	*($4 + [104]) = ($4 + [88])
	*($4 + [116]) = ($11 + [16])
	*($4 + [112]) = $11
	*($4 + [120]) = $3
	CALL $6(($4 + [112]), ($4 + [104]))
	CALL db_update_i64(*($11 + [44]), (int_64)0, ($4 + [48]), [40])
	$5 = (($4 + [8]) + [16])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$14 }
	*($5) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$14
	$11 = *($4 + [32])
	if ( ($11 == 0) ){ goto $label$15 }
	$2 = ($4 + [36])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = ($5 + [-24])
	$10 = *($5)
	*($5) = [0]
	if ( ($10 == 0) ){ goto $label$19 }
	CALL _ZdlPv($10)
	
.LABEL $label$19
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$18 }
	$5 = *(($4 + [32]))
	goto $label$16 
	
.LABEL $label$17
	$5 = $11
	
.LABEL $label$16
	*($2) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$global$0 = ($4 + [128])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth($1)
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($4 <= [8]), [17077])
	if ( (*($2) & [1]) ){ goto $label$4 }
	$4 = ($2 + [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($2 + [8])
	
.LABEL $label$3
	$2 = [0]
	
.LOOP $label$5:
	$5 = ($4 + $2)
	$6 = ($2 + [1])
	$2 = $6
	if ( *($5) ){ goto $label$5 }
	$7 = (int_64)0
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$6 }
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-1])) << (int_64)3)
	$9 = (int_64)0
	$7 = (int_64)0
	
.LOOP $label$7:
	$2 = *($4)
	if ( ((uint_32)(($2 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$7 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$9 + (int_64)8) & (int_64)4294967288)) | (int_64)$7)
	
.LABEL $label$8
	$4 = ($4 + [1])
	$9 = ((int_64)$9 + (int_64)8)
	if ( ((int_64)$8 != (int_64)$9) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = (int_64)3
	
.LOOP $label$9:
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$9 }
	$2 = [1]
	if ( (CALL $10($0, $7, (int_64)-5001247386194935808) == 0) ){ goto $label$10 }
	$9 = (int_64)3
	
.LOOP $label$11:
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$11 }
	$2 = CALL $11($0, $7, (int_64)-5001247386194935808, $1)
	
.LABEL $label$10
	CALL eosio_assert($2, [17097])
	*((($3 + [48]) + [32])) = [0]
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	$9 = *($0)
	*($3 + [48]) = $9
	*($3 + [56]) = $7
	$2 = [0]
	$4 = CALL db_find_i64($9, $7, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $2(($3 + [48]), $4) + [112]) == (int_32)($3 + [48])), [17987])
	$2 = [1]
	
.LABEL $label$12
	CALL eosio_assert($2, [17124])
	*((($3 + [8]) + [32])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$9 = *($0)
	*($3 + [8]) = $9
	*($3 + [16]) = $1
	$2 = CALL db_find_i64($9, $1, (int_64)3607749779137757184, $7)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*(CALL $12(($3 + [8]), $2) + [16]) == (int_32)($3 + [8])), [17987])
	$5 = *($3 + [32])
	if ( $5 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	*($3) = ($3 + [48])
	*($3 + [120]) = $1
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [18771])
	*($3 + [100]) = $3
	*($3 + [96]) = ($3 + [8])
	*($3 + [104]) = ($3 + [120])
	*(($6 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($6) = (int_64)0
	CALL eosio_assert([1], [17938])
	$9 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$9 = $7
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$9 = $7
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$20 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$4 = [0]
	
.LABEL $label$16
	CALL eosio_assert($4, [16690])
	*($6 + [16]) = ($3 + [8])
	CALL $13(($3 + [96]), $6)
	*($3 + [112]) = $6
	$9 = (uint_64)*(($6 + [8])) >> (uint_64)(int_64)8
	*($3 + [96]) = $9)
	$4 = *($6 + [20])
	*($3 + [92]) = $4
	$5 = ($3 + [36])
	$2 = *($5)
	if ( ((uint_32)$2 >= (uint_32)*(($3 + [40]))) ){ goto $label$23 }
	*($2 + [8]) = $9
	*($2 + [16]) = $4
	*($3 + [112]) = [0]
	*($2) = $6
	*($5) = ($2 + [24])
	$2 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( $2 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL $14(($3 + [32]), ($3 + [112]), ($3 + [96]), ($3 + [92]))
	$2 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( ($2 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv($2)
	
.LABEL $label$21
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$6 = ($3 + [36])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$25 }
	
.LOOP $label$26:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$27 }
	CALL _ZdlPv($4)
	
.LABEL $label$27
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$26 }
	$2 = *(($3 + [32]))
	goto $label$24 
	
.LABEL $label$25
	$2 = $5
	
.LABEL $label$24
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$5 = *($3 + [72])
	if ( ($5 == 0) ){ goto $label$28 }
	$6 = ($3 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$30 }
	
.LOOP $label$31:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$32 }
	CALL _ZdlPv($4)
	
.LABEL $label$32
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$31 }
	$2 = *(($3 + [72]))
	goto $label$29 
	
.LABEL $label$30
	$2 = $5
	
.LABEL $label$29
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$28
	$global$0 = ($3 + [128])
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18765])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18765])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18765])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18765])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18765])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $162($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[15]), [18061])
	CALL memcpy($2, *($3 + [4]), [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[15]), [18061])
	CALL memcpy($2, *($3 + [4]), [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18061])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18061])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18061])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18061])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18038])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $172($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $175($4)
	
.LABEL $label$6
	*(($5 = CALL _Znwj([128])) + [112]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [56])
	*($3 + [68]) = ($5 + [64])
	*($3 + [72]) = ($5 + [80])
	*($3 + [76]) = ($5 + [88])
	*($3 + [80]) = ($5 + [92])
	*($3 + [84]) = ($5 + [96])
	*($3 + [88]) = ($5 + [97])
	CALL $120(($3 + [40]), ($3 + [32]))
	*($5 + [116]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)7035937633859534848
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)7035937633859534848
	*($4 + [16]) = $1
	*($3 + [32]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $119(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $126 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [18771])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [18765])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-5001621769904193536, $2, (int_64)-5001621769904193536, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-5001621769904193536) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-5001621769904193535
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-5001621769904193536
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-5001621769904193536
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $127(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $125 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [18609])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [18655])
	*($1) = *(*($3))
	CALL eosio_assert([1], [18706])
	CALL eosio_assert([1], [18765])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-5001621769904193536) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-5001621769904193535
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $162($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $162($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18038])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$5 = CALL $172($4)
	goto $label$4 
	
.LABEL $label$5
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$4
	CALL db_get_i64($1, $5, $4)
	*($3 + [36]) = $5
	*($3 + [32]) = $5
	$2 = ($5 + $4)
	*($3 + [40]) = $2
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	CALL $175($5)
	$2 = *(($3 + [40]))
	$5 = *($3 + [36])
	
.LABEL $label$6
	*(($4 = CALL _Znwj([40])) + [16]) = [0]
	*($4 + [8 align=4]) = (int_64)0
	*($4 + [24]) = $0
	CALL eosio_assert(((uint_32)($2 - $5) > (uint_32)[7]), [18061])
	CALL memcpy($4, $5, [8])
	*($3 + [36]) = ($5 + [8])
	CALL $98(($3 + [32]), ($4 + [8]))
	*($4 + [28]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)-8281834790116331520
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$5 = *($2)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($5 + [8]) = (int_64)-8281834790116331520
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $4
	*($2) = ($5 + [24])
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $112(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $5 ){ goto $label$7 }
	
.LABEL $label$8
	$global$0 = ($3 + [48])
	return $4
	
.LABEL $label$7
	$1 = *($5 + [8])
	if ( ($1 == 0) ){ goto $label$10 }
	*(($5 + [12])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	CALL _ZdlPv($5)
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *(($1 + [28]))
	if ( ((int_32)$2 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$1), [17987])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-8281834790116331520, (int_64)-8281834790116331520)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $15($1, $3)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$1), [17987])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [18070])
	*(($0 + [12])) = (int_64)0
	*($0 + [8]) = [0]
	*($0) = *($2)
	$1 = (*(($2 + [12])) - *($2 + [8]))
	if ( ($1 == 0) ){ goto $label$4 }
	$3 = int_32($1 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$3 }
	$1 = CALL _Znwj($1)
	*(($0 + [8])) = $1
	*(($0 + [16])) = ($1 + ($3 << [3]))
	*(($0 = ($0 + [12]))) = $1
	$3 = *(($2 + [8]))
	$2 = (*(($2 + [12])) - $3)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($1, $3, $2)
	*($0) = (*($0) + $2)
	
.LABEL $label$4
	return (unreachable)
	
.LABEL $label$3
	CALL $162(($0 + [8]))
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18038])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $172($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	$2 = ($4 + $5)
	*($3 + [40]) = $2
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$6 }
	CALL $175($4)
	$2 = *(($3 + [40]))
	$4 = *($3 + [36])
	
.LABEL $label$6
	*(($5 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)($2 - $4) > (uint_32)[7]), [18061])
	CALL memcpy($5, $4, [8])
	*($3 + [36]) = ($4 + [8])
	CALL $98(($3 + [32]), ($5 + [8]))
	CALL $98(($3 + [32]), ($5 + [20]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $114(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$8
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$7
	$4 = *($1 + [20])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [24])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $10 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	$4 = [0]
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$5 = *($0)
	*($3 + [24]) = $5
	*($3 + [32]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)-8281834790116331520, (int_64)-8281834790116331520)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $15(($3 + [24]), $0) + [24]) == (int_32)($3 + [24])), [17987])
	CALL $16($3, ($3 + [24]))
	$6 = *($3 + [8])
	$0 = $6
	$7 = *(($3 + [12]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$0 = $6
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$2) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$3 }
	$0 = $7
	
.LABEL $label$2
	if ( ($6 == 0) ){ goto $label$4 }
	*(($3 + [12])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$4
	$4 = ((int_32)$0 != (int_32)$7)
	$8 = *($3 + [48])
	if ( ($8 == 0) ){ goto $label$1 }
	$9 = ($3 + [52])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$8 }
	$6 = *($7 + [8])
	if ( ($6 == 0) ){ goto $label$9 }
	*(($7 + [12])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	CALL _ZdlPv($7)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($3 + [48]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $8
	
.LABEL $label$5
	*($9) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($3 + [64])
	return $4
}

int_32 .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = [0]
	*(($4 + [72])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	$6 = *($0)
	*($4 + [40]) = $6
	*($4 + [48]) = $1
	$0 = CALL db_find_i64($6, $1, (int_64)3617211078187941888, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $17(($4 + [40]), $0)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)($4 + [40])), [17987])
	$7 = CALL $18(($4 + [8]), $0)
	$8 = *($7 + [8])
	$0 = $8
	$9 = *(($7 + [12]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	$0 = $8
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$3) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$9 != (int_32)$0) ){ goto $label$3 }
	$0 = $9
	
.LABEL $label$2
	$5 = *($7 + [20])
	if ( ($5 == 0) ){ goto $label$4 }
	*(($7 + [24])) = $5
	CALL _ZdlPv($5)
	$8 = *(($7 + [8]))
	
.LABEL $label$4
	if ( ($8 == 0) ){ goto $label$5 }
	*(($7 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$5
	$5 = ((int_32)$0 != (int_32)$9)
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$1 }
	$10 = ($4 + [68])
	$9 = *($10)
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$9 = ($9 + [-24])
	$0 = *($9)
	*($9) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	$8 = *($0 + [20])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($0 + [24])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = *($0 + [8])
	if ( ($8 == 0) ){ goto $label$11 }
	*(($0 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$8 }
	$0 = *(($4 + [64]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $7
	
.LABEL $label$6
	*($10) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
	return $5
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18038])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $172($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $175($4)
	
.LABEL $label$6
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$5 = CALL _Znwj([32])
	$4 = CALL $141($5, $0, ($3 + [8]))
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $6)
	$2 = *($5 + [20])
	*($3 + [4]) = $2
	$7 = ($0 + [28])
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($1 + [8]) = $6
	*($1 + [16]) = $2
	*($3 + [24]) = [0]
	*($1) = $5
	*($7) = ($1 + [24])
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $14(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($5)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = $global$0
	$3 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	$6 = *(($5 + [28]))
	if ( ((int_32)$6 == (int_32)*($5 + [24])) ){ goto $label$2 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [112]) == (int_32)$5), [17987])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$7 = CALL db_find_i64(*($5), *($5 + [8]), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $2($5, $7)
	CALL eosio_assert(((int_32)*($6 + [112]) == (int_32)$5), [17987])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18070])
	$8 = *($6)
	CALL eosio_assert([1], [17938])
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$9 = $10
	$6 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$9 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $6 ){ goto $label$7 }
	$6 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	
.LABEL $label$3
	CALL eosio_assert($6, [16690])
	*($1 + [8]) = $8
	*($1) = (int_64)0
	$6 = $2
	$5 = ($6 + [-16])
	$global$0 = $5
	CALL eosio_assert([1], [18765])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [18765])
	CALL memcpy(($6 + [-8]), ($1 + [8]), [8])
	$9 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($1 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $9), $5, [16])
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$8 }
	*(($4 + [16])) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$8
	$global$0 = $3
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 + [12])) = (int_64)0
	*($0 + [8]) = [0]
	*($0) = *($1)
	$2 = (*(($1 + [12])) - *($1 + [8]))
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = int_32($2 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$2 }
	$2 = CALL _Znwj($2)
	*(($0 + [8])) = $2
	*(($0 + [16])) = ($2 + ($3 << [3]))
	*(($3 = ($0 + [12]))) = $2
	$4 = *(($1 + [8]))
	$5 = (*(($1 + [12])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + $5)
	
.LABEL $label$3
	*($0 + [20 align=4]) = (int_64)0
	*(($0 + [28])) = [0]
	$2 = (*(($1 + [24])) - *($1 + [20]))
	if ( ($2 == 0) ){ goto $label$4 }
	$3 = int_32($2 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$2 = CALL _Znwj($2)
	*(($0 + [20])) = $2
	*(($0 + [28])) = ($2 + ($3 << [3]))
	*(($3 = ($0 + [24]))) = $2
	$5 = *(($1 + [20]))
	$1 = (*(($1 + [24])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $5, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $162(($0 + [8]))
	
.LABEL $label$1
	CALL $162(($0 + [20]))
	(unreachable)
	return (unreachable)
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	$5 = ($global$0 - [288])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)$1 == (int_64)5157374374155233024) ){ goto $label$1 }
	if ( ((int_64)$1 == (int_64)5157374374157657744) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [17160])
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$4 }
	$8 = uint_32($7 >> [1])
	$9 = ($4 + [1])
	$7 = CALL $170([17185])
	if ( ($7 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$8 = *($4 + [4])
	$9 = *($4 + [8])
	$7 = CALL $170([17185])
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_32)$8 < (int_32)$7) ){ goto $label$5 }
	$10 = ($9 + $8)
	$11 = $9
	
.LOOP $label$6:
	$8 = (($8 - $7) + [1])
	if ( ($8 == 0) ){ goto $label$5 }
	$8 = CALL $171($11, [45], $8)
	if ( ($8 == 0) ){ goto $label$5 }
	if ( (CALL $169($8, [17185], $7) == 0) ){ goto $label$7 }
	$11 = ($8 + [1])
	$8 = ($10 - $11)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$5 }
	if ( ((int_32)($8 - $9) != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$5
	*(($5 + [248])) = [0]
	*($5 + [240]) = (int_64)0
	$7 = CALL $170([17224])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$16 }
	*($5 + [240]) = ($7 << [1])
	$8 = (($5 + [240]) | [1])
	if ( $7 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$11 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($5 + [240]) = ($11 | [1])
	*($5 + [248]) = $8
	*($5 + [244]) = $7
	
.LABEL $label$15
	CALL memcpy($8, [17224], $7)
	
.LABEL $label$14
	*(($8 + $7)) = [0]
	*(($5 + [232])) = [0]
	*($5 + [224]) = (int_64)0
	$7 = CALL $170([17225])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$19 }
	*($5 + [224]) = ($7 << [1])
	$8 = (($5 + [224]) | [1])
	if ( $7 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$11 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($5 + [224]) = ($11 | [1])
	*($5 + [232]) = $8
	*($5 + [228]) = $7
	
.LABEL $label$18
	CALL memcpy($8, [17225], $7)
	
.LABEL $label$17
	*(($8 + $7)) = [0]
	$11 = *($4)
	if ( ($11 & [1]) ){ goto $label$21 }
	$8 = uint_32($11 >> [1])
	$14 = ($4 + [1])
	goto $label$20 
	
.LABEL $label$21
	$8 = *($4 + [4])
	$14 = *($4 + [8])
	
.LABEL $label$20
	$15 = (($5 + [224]) | [1])
	$10 = ($7 & [1])
	$7 = *($5 + [224])
	$7 = ( *($5 + [228]) ? uint_32($7 >> [1]) : $10 )
	if ( ($7 == 0) ){ goto $label$26 }
	if ( ((int_32)$8 < (int_32)$7) ){ goto $label$25 }
	$9 = ($14 + $8)
	$12 = ( *($5 + [232]) ? $15 : $10 )
	$10 = *($12)
	$11 = $14
	
.LOOP $label$27:
	$8 = (($8 - $7) + [1])
	if ( ($8 == 0) ){ goto $label$25 }
	$8 = CALL $171($11, $10, $8)
	if ( ($8 == 0) ){ goto $label$25 }
	if ( (CALL $169($8, $12, $7) == 0) ){ goto $label$28 }
	$11 = ($8 + [1])
	$8 = ($9 - $11)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$25 }
	if ( ((int_32)($8 - $14) == (int_32)[-1]) ){ goto $label$25 }
	$11 = *($4)
	
.LABEL $label$26
	if ( ($11 & [1]) ){ goto $label$24 }
	$16 = ($4 + [1])
	$8 = uint_32(($11 & [254]) >> [1])
	goto $label$23 
	
.LABEL $label$25
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$30 }
	$7 = uint_32($7 >> [1])
	goto $label$29 
	
.LABEL $label$30
	$7 = *($4 + [4])
	
.LABEL $label$29
	CALL eosio_assert(($7 <= [8]), [17077])
	if ( (*($4) & [1]) ){ goto $label$32 }
	$8 = ($4 + [1])
	goto $label$31 
	
.LABEL $label$32
	$8 = *($4 + [8])
	
.LABEL $label$31
	$7 = [0]
	
.LOOP $label$33:
	$11 = ($8 + $7)
	$4 = ($7 + [1])
	$7 = $4
	if ( *($11) ){ goto $label$33 }
	$6 = (int_64)0
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$22 }
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($4 + [-1])) << (int_64)3)
	$2 = (int_64)0
	$6 = (int_64)0
	
.LOOP $label$34:
	$7 = *($8)
	if ( ((uint_32)(($7 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$6 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$2 + (int_64)8) & (int_64)4294967288)) | (int_64)$6)
	
.LABEL $label$35
	$8 = ($8 + [1])
	$2 = ((int_64)$2 + (int_64)8)
	if ( ((int_64)$13 != (int_64)$2) ){ goto $label$34 }
	goto $label$22 
	
.LABEL $label$24
	$8 = *($4 + [4])
	$16 = *($4 + [8])
	
.LABEL $label$23
	$7 = [0]
	$9 = [0]
	$10 = ($11 & [1])
	$11 = *($5 + [224])
	$11 = ( *($5 + [228]) ? uint_32($11 >> [1]) : $10 )
	if ( ($11 == 0) ){ goto $label$36 }
	$9 = ($16 + $8)
	if ( ((int_32)$8 < (int_32)$11) ){ goto $label$38 }
	$14 = ( *((($5 + [224]) + [8])) ? $15 : $10 )
	$12 = *($14)
	$10 = $16
	
.LOOP $label$39:
	$8 = (($8 - $11) + [1])
	if ( ($8 == 0) ){ goto $label$38 }
	$8 = CALL $171($10, $12, $8)
	if ( ($8 == 0) ){ goto $label$38 }
	if ( (CALL $169($8, $14, $11) == 0) ){ goto $label$37 }
	$10 = ($8 + [1])
	$8 = ($9 - $10)
	if ( ((int_32)$8 >= (int_32)$11) ){ goto $label$39 }
	
.LABEL $label$38
	$8 = $9
	
.LABEL $label$37
	$9 = ( [-1] ? ($8 - $16) : ((int_32)$8 == (int_32)$9) )
	
.LABEL $label$36
	$8 = *($5 + [16])
	$12 = CALL $159(($5 + [16]), $4, [0], $9, $4)
	CALL eosio_assert((( *($12 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) <= [8]), [16690])
	$8 = ( *($12 + [8]) ? ($12 + [1]) : (*($5 + [16]) & [1]) )
	
.LOOP $label$40:
	$11 = ($8 + $7)
	$10 = ($7 + [1])
	$7 = $10
	if ( *($11) ){ goto $label$40 }
	$6 = (int_64)0
	if ( ((int_32)$10 == (int_32)[1]) ){ goto $label$41 }
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($10 + [-1])) << (int_64)3)
	$2 = (int_64)0
	$6 = (int_64)0
	
.LOOP $label$42:
	$7 = *($8)
	if ( ((uint_32)(($7 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$6 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$2 + (int_64)8) & (int_64)4294967288)) | (int_64)$6)
	
.LABEL $label$43
	$8 = ($8 + [1])
	$2 = ((int_64)$2 + (int_64)8)
	if ( ((int_64)$13 != (int_64)$2) ){ goto $label$42 }
	
.LABEL $label$41
	$7 = *($5 + [224])
	CALL $159(($5 + [184]), $4, (( *($5 + [228]) ? uint_32($7 >> [1]) : ($7 & [1]) ) + $9), [-1], $4)
	if ( (*($5 + [240]) & [1]) ){ goto $label$45 }
	*($5 + [240]) = [0]
	goto $label$44 
	
.LABEL $label$45
	*(*($5 + [248])) = [0]
	*($5 + [244]) = [0]
	
.LABEL $label$44
	CALL $160(($5 + [240]), [0])
	*((($5 + [240]) + [8])) = *((($5 + [184]) + [8]))
	*($5 + [240]) = *($5 + [184])
	$7 = *($5 + [240])
	CALL eosio_assert((( *($5 + [244]) ? uint_32($7 >> [1]) : ($7 & [1]) ) <= [13]), [17236])
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($12 + [8])))
	
.LABEL $label$22
	$17 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = (int_64)3
	
.LOOP $label$46:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$46 }
	$7 = [1]
	if ( (CALL $10($0, $17, (int_64)4520488125973135360) == 0) ){ goto $label$47 }
	$2 = (int_64)3
	
.LOOP $label$48:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$48 }
	$7 = CALL $11($0, $17, (int_64)4520488125973135360, $1)
	
.LABEL $label$47
	CALL eosio_assert($7, [17270])
	*(($5 + [216])) = [0]
	*($5 + [200]) = (int_64)-1
	$18 = (int_64)0
	*($5 + [208]) = (int_64)0
	$2 = *($0)
	*($5 + [184]) = $2
	*($5 + [192]) = $17
	$7 = CALL db_find_i64($2, $17, (int_64)-5001621769904193536, (int_64)-5001621769904193536)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $20(($5 + [184]), $7) + [8]) == (int_32)($5 + [184])), [17987])
	$2 = CALL $21(($5 + [184]))
	$18 = ((uint_64)((int_64)((int_64)$6 * (int_64)$2) + (int_64)9999) / (uint_64)(int_64)10000)
	$19 = (int_64)((int_64)$18 << (int_64)32) >> (int_64)32
	$6 = *($3)
	CALL eosio_assert(((int_64)$6 > (int_64)$19)), [17297])
	if ( ((int_32)(CASTING uint_32)(uint_64 $18) < (int_32)[1]) ){ goto $label$8 }
	*(($5 + [176])) = [0]
	*($5 + [160]) = (int_64)-1
	*($5 + [168]) = (int_64)0
	$2 = *($0)
	*($5 + [144]) = $2
	*($5 + [152]) = $17
	$7 = [0]
	$8 = CALL db_find_i64($2, $17, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$49 }
	$7 = CALL $2(($5 + [144]), $8)
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)($5 + [144])), [17987])
	
.LABEL $label$49
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [16753])
	$7 = ($7 & [1])
	$7 = *($5 + [240])
	$8 = CALL $170([17224])
	if ( ((int_32)$8 != (int_32)( *($5 + [244]) ? uint_32($7 >> [1]) : $7 )) ){ goto $label$60 }
	if ( (CALL $161(($5 + [240]), [0], [-1], [17224], $8) == 0) ){ goto $label$59 }
	$7 = (*($5 + [240]) & [1])
	
.LABEL $label$60
	$7 = ( *($5 + [248]) ? (($5 + [240]) | [1]) : $7 )
	$8 = [0]
	
.LOOP $label$61:
	$11 = ($7 + $8)
	$4 = ($8 + [1])
	$8 = $4
	if ( *($11) ){ goto $label$61 }
	$20 = (CASTING uint_64)(uint_32 ($4 + [-1]))
	$2 = (int_64)0
	$6 = (int_64)59
	$21 = (int_64)0
	
.LOOP $label$62:
	$13 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$20) ){ goto $label$63 }
	$8 = *($7)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$65 }
	$8 = ($8 + [-91])
	goto $label$64 
	
.LABEL $label$65
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$64
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$63
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$67 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$66 
	
.LABEL $label$67
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$66
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$21 = ((int_64)$13 | (int_64)$21)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$62 }
	if ( ((int_64)$21 != (int_64)$1) ){ goto $label$56 }
	$7 = *(($5 + [172]))
	if ( ((int_32)$7 == (int_32)*(($5 + [168]))) ){ goto $label$58 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)($5 + [144])), [17987])
	goto $label$57 
	
.LABEL $label$59
	$7 = *(($5 + [172]))
	if ( ((int_32)$7 == (int_32)*(($5 + [168]))) ){ goto $label$55 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)($5 + [144])), [17987])
	goto $label$54 
	
.LABEL $label$58
	$7 = [0]
	$8 = CALL db_find_i64(*($5 + [144]), *(($5 + [152])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$57 }
	$7 = CALL $2(($5 + [144]), $8)
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)($5 + [144])), [17987])
	
.LABEL $label$57
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18070])
	$21 = *($7 + [8])
	
.LABEL $label$56
	$7 = *(($5 + [172]))
	if ( ((int_32)$7 == (int_32)*(($5 + [168]))) ){ goto $label$69 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)($5 + [144])), [17987])
	goto $label$68 
	
.LABEL $label$69
	$7 = [0]
	$8 = CALL db_find_i64(*($5 + [144]), *(($5 + [152])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$68 }
	$7 = CALL $2(($5 + [144]), $8)
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)($5 + [144])), [17987])
	
.LABEL $label$68
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18070])
	if ( ((int_64)$21 == (int_64)*($7 + [8])) ){ goto $label$50 }
	*(($5 + [48])) = [0]
	*($5 + [32]) = (int_64)-1
	*($5 + [40]) = (int_64)0
	$2 = *($0)
	*($5 + [16]) = $2
	*($5 + [24]) = $17
	$7 = CALL db_find_i64($2, $17, (int_64)-6533250085784911872, (int_64)-6533250085784911872)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$51 }
	CALL eosio_assert(((int_32)*(CALL $22(($5 + [16]), $7) + [8]) == (int_32)($5 + [16])), [17987])
	if ( ((int_64)CALL $23(($5 + [16])) == (int_64)1) ){ goto $label$51 }
	if ( CALL $24($0, $17, $21) ){ goto $label$51 }
	$7 = *(($5 + [172]))
	if ( ((int_32)$7 == (int_32)*(($5 + [168]))) ){ goto $label$53 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)($5 + [144])), [17987])
	goto $label$52 
	
.LABEL $label$55
	$7 = [0]
	$8 = CALL db_find_i64(*($5 + [144]), *(($5 + [152])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$54 }
	$7 = CALL $2(($5 + [144]), $8)
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)($5 + [144])), [17987])
	
.LABEL $label$54
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18070])
	$21 = *($7 + [8])
	goto $label$50 
	
.LABEL $label$53
	$7 = [0]
	$8 = CALL db_find_i64(*($5 + [144]), *(($5 + [152])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$52 }
	$7 = CALL $2(($5 + [144]), $8)
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)($5 + [144])), [17987])
	
.LABEL $label$52
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18070])
	$21 = *($7 + [8])
	
.LABEL $label$51
	$11 = *($5 + [40])
	if ( ($11 == 0) ){ goto $label$50 }
	$4 = ($5 + [44])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$71 }
	
.LOOP $label$72:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$73 }
	CALL _ZdlPv($8)
	
.LABEL $label$73
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$72 }
	$7 = *(($5 + [40]))
	goto $label$70 
	
.LABEL $label$71
	$7 = $11
	
.LABEL $label$70
	*($4) = $11
	CALL _ZdlPv($7)
	
.LABEL $label$50
	$22 = *($0)
	$2 = (int_64)6
	
.LOOP $label$74:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$74 }
	$2 = (int_64)0
	$13 = (int_64)59
	$7 = [17339]
	$20 = (int_64)0
	
.LOOP $label$75:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$80 }
	$8 = *($7)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$79 }
	$8 = ($8 + [-91])
	goto $label$78 
	
.LABEL $label$80
	$6 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$79
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$78
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$77
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$76
	$7 = ($7 + [1])
	$13 = ((int_64)$13 + (int_64)4294967291)
	$20 = ((int_64)$6 | (int_64)$20)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$75 }
	$2 = (int_64)0
	$13 = (int_64)59
	$7 = [17351]
	$23 = (int_64)0
	
.LOOP $label$81:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$86 }
	$8 = *($7)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$85 }
	$8 = ($8 + [-91])
	goto $label$84 
	
.LABEL $label$86
	$6 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$85
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$84
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$83
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$82
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$23 = ((int_64)$6 | (int_64)$23)
	$13 = ((int_64)$13 + (int_64)4294967291)
	if ( ((int_64)$13 != (int_64)55834574842) ){ goto $label$81 }
	CALL eosio_assert((uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17938])
	$2 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$89:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$88 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$90 }
	$2 = $6
	$8 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$89 }
	goto $label$87 
	
.LABEL $label$90
	$2 = $6
	
.LOOP $label$91:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$88 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $8 ){ goto $label$91 }
	$8 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$89 }
	goto $label$87 
	
.LABEL $label$88
	$8 = [0]
	
.LABEL $label$87
	CALL eosio_assert($8, [16690])
	*(($5 + [280])) = [0]
	*($5 + [272]) = (int_64)0
	$7 = CALL $170([17360])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$94 }
	*($5 + [272]) = ($7 << [1])
	$8 = (($5 + [272]) | [1])
	if ( $7 ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$94
	$11 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($5 + [272]) = ($11 | [1])
	*($5 + [280]) = $8
	*($5 + [276]) = $7
	
.LABEL $label$93
	CALL memcpy($8, [17360], $7)
	
.LABEL $label$92
	*(($8 + $7)) = [0]
	*((($5 + [16]) + [24])) = (int_64)1397703940
	*(($8 = (($5 + [104]) + [24]))) = [0]
	$7 = ($5 + [280])
	*(($5 + [56])) = *($7)
	*($7) = [0]
	*($5 + [24]) = $21
	*($5 + [32]) = $19
	*($5 + [104]) = $20
	*($5 + [112]) = $23
	*($5 + [120]) = (int_64)0
	*($5 + [16]) = *($0)
	*($5 + [48]) = *($5 + [272])
	*($5 + [272]) = (int_64)0
	*(($7 = CALL _Znwj([16]))) = $22
	*($7 + [8]) = (int_64)3617214756542218240
	*((($5 + [104]) + [36])) = [0]
	$11 = ($7 + [16])
	*($8) = $11
	*(($5 + [124])) = $11
	*($5 + [120]) = $7
	*($5 + [132 align=4]) = (int_64)0
	$7 = *($5 + [48])
	$8 = ( *((($5 + [16]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [32])
	$2 = (CASTING uint_64)(uint_32 $8)
	$8 = ($5 + [132])
	
.LOOP $label$95:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$95 }
	if ( ($7 == 0) ){ goto $label$97 }
	CALL $25($8, $7)
	$8 = *(($5 + [136]))
	$7 = *(($5 + [132]))
	goto $label$96 
	
.LABEL $label$97
	$8 = [0]
	$7 = [0]
	
.LABEL $label$96
	*($5 + [92]) = $7
	*($5 + [88]) = $7
	*($5 + [96]) = $8
	*($5 + [264]) = ($5 + [88])
	*($5) = ($5 + [16])
	CALL $26($5, ($5 + [264]))
	CALL $27(($5 + [88]), ($5 + [104]))
	$7 = *($5 + [88])
	CALL send_inline($7, (*($5 + [92]) - $7))
	$7 = *($5 + [88])
	if ( ($7 == 0) ){ goto $label$98 }
	*($5 + [92]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$98
	$7 = *($5 + [132])
	if ( ($7 == 0) ){ goto $label$99 }
	*(($5 + [136])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$99
	$7 = *($5 + [120])
	if ( ($7 == 0) ){ goto $label$100 }
	*(($5 + [124])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$100
	if ( (*(($5 + [48])) & [1]) ){ goto $label$102 }
	if ( (*($5 + [272]) & [1]) ){ goto $label$101 }
	goto $label$10 
	
.LABEL $label$102
	CALL _ZdlPv(*(($5 + [56])))
	if ( ((*($5 + [272]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$101
	CALL _ZdlPv(*(($5 + [280])))
	$11 = *($5 + [168])
	if ( ($11 == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$13
	CALL $157(($5 + [240]))
	
.LABEL $label$12
	CALL $157(($5 + [224]))
	
.LABEL $label$11
	CALL $157(($5 + [272]))
	
.LABEL $label$10
	$11 = *($5 + [168])
	if ( ($11 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$4 = ($5 + [172])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$104 }
	
.LOOP $label$105:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$106 }
	CALL _ZdlPv($8)
	
.LABEL $label$106
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$105 }
	$7 = *(($5 + [168]))
	goto $label$103 
	
.LABEL $label$104
	$7 = $11
	
.LABEL $label$103
	*($4) = $11
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$13 = (int_64)((int_64)$18 << (int_64)32) >> (int_64)32
	CALL $28(($5 + [88]), $0, $17, (int_64))(*($3) - $13)))
	$7 = [0]
	*((($5 + [144]) + [32])) = [0]
	*($5 + [160]) = (int_64)-1
	*($5 + [168]) = (int_64)0
	$2 = *($0)
	*($5 + [144]) = $2
	*($5 + [152]) = $1
	$8 = CALL db_find_i64($2, $1, (int_64)3607749779137757184, $17)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$108 }
	$7 = CALL $12(($5 + [144]), $8)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($5 + [144])), [17987])
	CALL eosio_assert([1], [18574])
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($5 + [144])), [18609])
	CALL eosio_assert(((int_64)*($5 + [144]) == (int_64)CALL $fimport$3()), [18655])
	$2 = *($7 + [8])
	CALL eosio_assert(((int_64)*($5 + [96]) == (int_64)$2), [19829])
	$6 = ((int_64)*($7) + (int_64)*($5 + [88]))
	*($7) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [19872])
	CALL eosio_assert(((int_64)*($7) < (int_64)4611686018427387904), [19891])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$2) == (int_64)(uint_64)*($7 + [8]) >> (uint_64)(int_64)8)), [18706])
	CALL eosio_assert([1], [18765])
	CALL memcpy(($5 + [16]), $7, [8])
	CALL eosio_assert([1], [18765])
	CALL memcpy((($5 + [16]) | [8]), ($7 + [8]), [8])
	CALL db_update_i64(*($7 + [20]), (int_64)0, ($5 + [16]), [16])
	$7 = (($5 + [144]) + [16])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$107 }
	*($7) = ((int_64)$2 + (int_64)1)
	goto $label$107 
	
.LABEL $label$108
	CALL eosio_assert(((int_64)*($5 + [144]) == (int_64)CALL $fimport$3()), [18771])
	*(($4 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($4) = (int_64)0
	CALL eosio_assert([1], [17938])
	$9 = ($4 + [8])
	$2 = (int_64)5459781
	
.LOOP $label$110:
	$10 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$109 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$111 }
	$2 = $6
	$10 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$110 }
	goto $label$109 
	
.LABEL $label$111
	$2 = $6
	
.LOOP $label$112:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$109 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $8 ){ goto $label$112 }
	$10 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$110 }
	
.LABEL $label$109
	CALL eosio_assert($10, [16690])
	*($4 + [16]) = ($5 + [144])
	*(($7 = ($4 + [8]))) = *((($5 + [88]) + [8]))
	*($4) = *($5 + [88])
	CALL eosio_assert([1], [18765])
	CALL memcpy(($5 + [16]), $4, [8])
	CALL eosio_assert([1], [18765])
	CALL memcpy((($5 + [16]) | [8]), $9, [8])
	$2 = (uint_64)*($7) >> (uint_64)(int_64)8
	$8 = CALL db_store_i64(*((($5 + [144]) + [8])), (int_64)3607749779137757184, $1, $2), ($5 + [16]), [16]
	*($4 + [20]) = $8)
	$11 = (($5 + [144]) + [16])
	if ( (uint_64)($2 <= *($11)) ){ goto $label$113 }
	*($11) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$113
	*($5 + [104]) = $4
	$2 = (uint_64)*($7) >> (uint_64)(int_64)8
	*($5 + [16]) = $2)
	*($5 + [272]) = $8
	$11 = ($5 + [172])
	$7 = *($11)
	if ( ((uint_32)$7 >= (uint_32)*(($5 + [176]))) ){ goto $label$115 }
	*($7 + [8]) = $2
	*($7 + [16]) = $8
	*($5 + [104]) = [0]
	*($7) = $4
	*($11) = ($7 + [24])
	$7 = *($5 + [104])
	*($5 + [104]) = [0]
	if ( ($7 == 0) ){ goto $label$107 }
	goto $label$114 
	
.LABEL $label$115
	CALL $14(($5 + [168]), ($5 + [104]), ($5 + [16]), ($5 + [272]))
	$7 = *($5 + [104])
	*($5 + [104]) = [0]
	if ( ($7 == 0) ){ goto $label$107 }
	
.LABEL $label$114
	CALL _ZdlPv($7)
	
.LABEL $label$107
	$20 = *($0)
	$2 = (int_64)6
	
.LOOP $label$116:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$116 }
	$2 = (int_64)7
	
.LOOP $label$117:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$117 }
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$7 = CALL $170([17266])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$121 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$124 }
	*($5) = ($7 << [1])
	$8 = ($5 | [1])
	if ( $7 ){ goto $label$123 }
	goto $label$122 
	
.LABEL $label$124
	$11 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($5) = ($11 | [1])
	*($5 + [8]) = $8
	*($5 + [4]) = $7
	
.LABEL $label$123
	CALL memcpy($8, [17266], $7)
	
.LABEL $label$122
	*(($8 + $7)) = [0]
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17938])
	$2 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$127:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$126 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$128 }
	$2 = $6
	$8 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$127 }
	goto $label$125 
	
.LABEL $label$128
	$2 = $6
	
.LOOP $label$129:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$126 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $8 ){ goto $label$129 }
	$8 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$127 }
	goto $label$125 
	
.LABEL $label$126
	$8 = [0]
	
.LABEL $label$125
	CALL eosio_assert($8, [16690])
	*(($5 + [80])) = (int_64)1397703940
	$7 = ($5 + [8])
	*((($5 + [16]) + [16])) = *($7)
	*($7) = [0]
	*(($5 + [48])) = *(($3 + [8]))
	*(($5 + [64])) = *((($5 + [88]) + [8]))
	*($5 + [16]) = $1
	*($5 + [72]) = $13
	*($5 + [104]) = $20
	*($5 + [24]) = *($5)
	*($5) = (int_64)0
	*($5 + [40]) = *($3)
	*($5 + [56]) = *($5 + [88])
	*($5 + [112]) = (int_64)-5003315193367756800
	*($5 + [120]) = [0]
	*(($8 = ($5 + [124]))) = [0]
	*(($11 = ($5 + [128]))) = [0]
	*(($7 = CALL _Znwj([16]))) = $20
	*($7 + [8]) = (int_64)3617214756542218240
	*(($5 + [140])) = [0]
	$0 = ($7 + [16])
	*($11) = $0
	*($8) = $0
	*($5 + [120]) = $7
	*($5 + [132 align=4]) = (int_64)0
	$7 = *($5 + [24])
	$8 = ( *(($5 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [56])
	$2 = (CASTING uint_64)(uint_32 $8)
	$8 = ($5 + [132])
	
.LOOP $label$130:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$130 }
	if ( ($7 == 0) ){ goto $label$132 }
	CALL $25($8, $7)
	$8 = *(($5 + [136]))
	$7 = *(($5 + [132]))
	goto $label$131 
	
.LABEL $label$132
	$8 = [0]
	$7 = [0]
	
.LABEL $label$131
	*($5 + [276]) = $7
	*($5 + [272]) = $7
	*($5 + [280]) = $8
	*($5 + [256]) = ($5 + [272])
	*($5 + [264]) = ($5 + [16])
	CALL $29(($5 + [264]), ($5 + [256]))
	CALL $27(($5 + [272]), ($5 + [104]))
	$7 = *($5 + [272])
	CALL send_inline($7, (*($5 + [276]) - $7))
	$7 = *($5 + [272])
	if ( ($7 == 0) ){ goto $label$133 }
	*($5 + [276]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$133
	$7 = *($5 + [132])
	if ( ($7 == 0) ){ goto $label$134 }
	*(($5 + [136])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$134
	$7 = *($5 + [120])
	if ( ($7 == 0) ){ goto $label$135 }
	*(($5 + [124])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$135
	if ( (*(($5 + [24])) & [1]) ){ goto $label$137 }
	if ( (*($5) & [1]) ){ goto $label$136 }
	goto $label$120 
	
.LABEL $label$137
	CALL _ZdlPv(*(($5 + [32])))
	if ( ((*($5) & [1]) == 0) ){ goto $label$120 }
	
.LABEL $label$136
	CALL _ZdlPv(*(($5 + [8])))
	$11 = *($5 + [168])
	if ( ($11 == 0) ){ goto $label$118 }
	goto $label$119 
	
.LABEL $label$121
	CALL $157($5)
	
.LABEL $label$120
	$11 = *($5 + [168])
	if ( ($11 == 0) ){ goto $label$118 }
	
.LABEL $label$119
	$0 = ($5 + [172])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$139 }
	
.LOOP $label$140:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$141 }
	CALL _ZdlPv($8)
	
.LABEL $label$141
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$140 }
	$7 = *(($5 + [168]))
	goto $label$138 
	
.LABEL $label$139
	$7 = $11
	
.LABEL $label$138
	*($0) = $11
	CALL _ZdlPv($7)
	
.LABEL $label$118
	$11 = *($5 + [208])
	if ( ($11 == 0) ){ goto $label$142 }
	$0 = ($5 + [212])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$144 }
	
.LOOP $label$145:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$146 }
	CALL _ZdlPv($8)
	
.LABEL $label$146
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$145 }
	$7 = *(($5 + [208]))
	goto $label$143 
	
.LABEL $label$144
	$7 = $11
	
.LABEL $label$143
	*($0) = $11
	CALL _ZdlPv($7)
	
.LABEL $label$142
	if ( ((*($5 + [224]) & [1]) == 0) ){ goto $label$147 }
	CALL _ZdlPv(*(($5 + [232])))
	
.LABEL $label$147
	if ( ((*($5 + [240]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($5 + [248]))
	goto $label$1 
	
.LABEL $label$2
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$149 }
	$8 = uint_32($7 >> [1])
	$12 = ($4 + [1])
	goto $label$148 
	
.LABEL $label$149
	$8 = *($4 + [4])
	$12 = *($4 + [8])
	
.LABEL $label$148
	$7 = [0]
	$10 = [0]
	$11 = CALL $170([17185])
	if ( ($11 == 0) ){ goto $label$150 }
	$9 = ($12 + $8)
	if ( ((int_32)$8 < (int_32)$11) ){ goto $label$152 }
	$10 = $12
	
.LOOP $label$153:
	$8 = (($8 - $11) + [1])
	if ( ($8 == 0) ){ goto $label$152 }
	$8 = CALL $171($10, [45], $8)
	if ( ($8 == 0) ){ goto $label$152 }
	if ( (CALL $169($8, [17185], $11) == 0) ){ goto $label$151 }
	$10 = ($8 + [1])
	$8 = ($9 - $10)
	if ( ((int_32)$8 >= (int_32)$11) ){ goto $label$153 }
	
.LABEL $label$152
	$8 = $9
	
.LABEL $label$151
	$10 = ( [-1] ? ($8 - $12) : ((int_32)$8 == (int_32)$9) )
	
.LABEL $label$150
	CALL eosio_assert(((int_32)$10 != (int_32)[-1]), [17193])
	$8 = *($5 + [16])
	$10 = CALL $159(($5 + [16]), $4, [0], $10, $4)
	CALL eosio_assert((( *($10 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) <= [8]), [16690])
	$8 = ( *($10 + [8]) ? ($10 + [1]) : (*($5 + [16]) & [1]) )
	
.LOOP $label$154:
	$11 = ($8 + $7)
	$4 = ($7 + [1])
	$7 = $4
	if ( *($11) ){ goto $label$154 }
	$6 = (int_64)0
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$155 }
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($4 + [-1])) << (int_64)3)
	$2 = (int_64)0
	$6 = (int_64)0
	
.LOOP $label$156:
	$7 = *($8)
	if ( ((uint_32)(($7 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$157 }
	$6 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$2 + (int_64)8) & (int_64)4294967288)) | (int_64)$6)
	
.LABEL $label$157
	$8 = ($8 + [1])
	$2 = ((int_64)$2 + (int_64)8)
	if ( ((int_64)$13 != (int_64)$2) ){ goto $label$156 }
	
.LABEL $label$155
	CALL $30($0, (uint_64)$6 >> (uint_64)(int_64)8), *($3))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($10 + [8])))
	$global$0 = ($5 + [288])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [288])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $116 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [18609])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [18655])
	$1 = CALL memcpy($1, *($3), [98])
	CALL eosio_assert([1], [18706])
	*($4 + [120]) = ($4 + [98])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	*($4 + [128]) = ($4 + [112])
	*($4 + [140]) = ($1 + [8])
	*($4 + [136]) = $1
	*($4 + [144]) = ($1 + [16])
	*($4 + [148]) = ($1 + [32])
	*($4 + [152]) = ($1 + [40])
	*($4 + [156]) = ($1 + [48])
	*($4 + [160]) = ($1 + [56])
	*($4 + [164]) = ($1 + [64])
	*($4 + [168]) = ($1 + [80])
	*($4 + [172]) = ($1 + [88])
	*($4 + [176]) = ($1 + [92])
	*($4 + [180]) = ($1 + [96])
	*($4 + [184]) = ($1 + [97])
	CALL $118(($4 + [136]), ($4 + [128]))
	CALL db_update_i64(*($1 + [116]), $2, $4, [98])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7035937633859534848) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7035937633859534849
	
.LABEL $label$1
	$global$0 = ($4 + [192])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [18771])
	*(($5 = CALL _Znwj([128])) + [112]) = $1
	$3 = CALL memcpy($5, *($3), [98])
	*($4 + [120]) = ($4 + [98])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	*($4 + [128]) = ($4 + [112])
	*($4 + [140]) = ($3 + [8])
	*($4 + [136]) = $3
	*($4 + [144]) = ($3 + [16])
	*($4 + [148]) = ($3 + [32])
	*($4 + [152]) = ($3 + [40])
	*($4 + [156]) = ($3 + [48])
	*($4 + [160]) = ($3 + [56])
	*($4 + [164]) = ($3 + [64])
	*($4 + [168]) = ($3 + [80])
	*($4 + [172]) = ($3 + [88])
	*($4 + [176]) = ($3 + [92])
	*($4 + [180]) = ($3 + [96])
	*($4 + [184]) = ($3 + [97])
	CALL $118(($4 + [136]), ($4 + [128]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7035937633859534848, $2, (int_64)7035937633859534848, $4, [98])
	*($3 + [116]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7035937633859534848) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7035937633859534849
	
.LABEL $label$1
	*($4 + [136]) = $3
	*($4) = (int_64)7035937633859534848
	*($4 + [112]) = $6
	$7 = ($1 + [28])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($5 + [8]) = (int_64)7035937633859534848
	*($5 + [16]) = $6
	*($4 + [136]) = [0]
	*($5) = $3
	*($7) = ($5 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $119(($1 + [24]), ($4 + [136]), $4, ($4 + [112]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [136])
	*($4 + [136]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [192])
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $162($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [20])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [24])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $115 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	float_64 $6
	float_64 $7
	int_32 $8
	float_64 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL eosio_assert(((int_64)$1 > (int_64)0), [18247])
	$4 = *($0 + [32])
	$3 = *($0 + [80])
	if ( ((int_64)$3 != (int_64)$4) ){ goto $label$1 }
	$3 = ((int_64)$3 + (int_64)$1)
	*(($0 + [80])) = $3
	*(($0 + [32])) = $3
	*($0 + [56]) = ((int_64)*($0 + [56]) + (int_64)$1)
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$3 < (int_64)$4), [18299])
	$3 = *($5)
	*(($5 = ($0 + [32]))) = ((int_64)$3 + (int_64)$1)
	$4 = *(($0 + [80]))
	$5 = ($0 + [24])
	$6 = CALL __floattidf(*($0 + [16]), *($5))
	$9 = (CASTING float_64)(int_64 $4)
	$7 = (float_64)
	$8 = ($0 + [72])
	$6 = (float_64)
	$7 = ((float_64)(CASTING float_64)(int_64 $1) + (float_64)(CASTING float_64)(int_64 $3))
	CALL __fixdfti(($2 + [16]), ((float_64)((float_64)$7 * (float_64)$6(CALL $fimport$18(*($0 + [64]), *($8)) - $6))) / (float_64)$7($7 - $9))))
	*($8) = *((($2 + [16]) + [8]))
	*($0 + [64]) = *($2 + [16])
	CALL __fixdfti($2, ((float_64)((float_64)$6 * (float_64)$9) / (float_64)$7))
	*($5) = *(($2 + [8]))
	*($0 + [16]) = *($2)
	$global$0 = ($2 + [32])
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $162($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $162($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($0 + [16])) = (int_64)1397703940
	CALL eosio_assert([1], [17938])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [16690])
	*(($0 + [32])) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [17938])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [16690])
	*(($0 + [48])) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [17938])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$4 = $6
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$15 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [16690])
	*($0 + [56]) = [0]
	*($0 + [60 align=1]) = [0]
	*($0 + [64]) = (int_64)0
	*($0 + [72]) = [0]
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	*($3 + [16]) = $3
	*($3 + [24]) = $0
	CALL $148(($3 + [24]), ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [17938])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [16690])
	*(($0 + [24])) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [17938])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [16690])
	*(($0 + [40])) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [17938])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$4 = $6
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$15 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [16690])
	*($0 + [48]) = [0]
	*($0 + [52 align=1]) = [0]
	*($0 + [56]) = (int_64)0
	*($0 + [64]) = [0]
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	*($3 + [16]) = $3
	*($3 + [24]) = $0
	CALL $150(($3 + [24]), ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[15]), [18765])
	CALL memcpy(*($3 + [4]), $2, [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[15]), [18765])
	CALL memcpy(*($3 + [4]), $2, [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [18765])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [18765])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18765])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [18765])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $162($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	CALL $142(*($1), ($0 + [8]))
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), ($0 + [48]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), ($0 + [56]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), ($0 + [64]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL eosio_assert(((int_64)$3 > (int_64)0), [18822])
	$5 = [0]
	*(($4 + [152])) = [0]
	*($4 + [136]) = (int_64)-1
	*($4 + [144]) = (int_64)0
	$6 = *($1)
	*($4 + [120]) = $6
	*($4 + [128]) = $2
	$1 = CALL db_find_i64($6, $2, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $2(($4 + [120]), $1) + [112]) == (int_32)($4 + [120])), [17987])
	$5 = [1]
	
.LABEL $label$1
	CALL eosio_assert($5, [16753])
	$5 = *(($4 + [148]))
	if ( ((int_32)$5 == (int_32)*(($4 + [144]))) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)($4 + [120])), [17987])
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	$1 = CALL db_find_i64(*($4 + [120]), *(($4 + [128])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $2(($4 + [120]), $1)
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)($4 + [120])), [17987])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18070])
	$1 = CALL memcpy($4, $5, [112])
	$2 = CALL current_time()
	CALL eosio_assert((*($1 + [92]) <= (CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000))), [18172])
	$2 = CALL $34($1, $3)
	CALL eosio_assert(((int_64)$2 > (int_64)0), [18857])
	CALL eosio_assert(((int_64)$2 < (int_64)*($1 + [32])), [18894])
	CALL $32(($1 + [120]), $1, *($1 + [8]))
	*($0) = $2
	$3 = *($1)
	*($0 + [8]) = $3
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17938])
	$2 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$7 = [1]
	$5 = $4
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$0 = ($4 + [1])
	$4 = $0
	if ( $5 ){ goto $label$11 }
	$7 = [1]
	$4 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [16690])
	$0 = *($1 + [144])
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [16690])
	$0 = *($1 + [144])
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$7 = ($1 + [148])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL _ZdlPv($5)
	
.LABEL $label$15
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($1 + [144]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $0
	
.LABEL $label$12
	*($7) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$global$0 = ($1 + [160])
}

int_64 .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *(($0 + [28]))
	if ( ((int_32)$1 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [17987])
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	$2 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5001621769904193536, (int_64)-5001621769904193536)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $20($0, $2)
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [17987])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18070])
	return *($1)
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18038])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$5 }
	$2 = CALL $172($4)
	CALL db_get_i64($1, $2, $4)
	CALL $175($2)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	CALL db_get_i64($1, $2, $4)
	
.LABEL $label$4
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18061])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-5001621769904193536
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)-5001621769904193536
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $127(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $5
}

int_64 .FUNC $23 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *(($0 + [28]))
	if ( ((int_32)$1 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [17987])
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	$2 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6533250085784911872, (int_64)-6533250085784911872)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $22($0, $2)
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [17987])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18070])
	return *($1)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18038])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$5 }
	$2 = CALL $172($4)
	CALL db_get_i64($1, $2, $4)
	CALL $175($2)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	CALL db_get_i64($1, $2, $4)
	
.LABEL $label$4
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18061])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-6533250085784911872
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)-6533250085784911872
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $133(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $162($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [8]) = $5
	*($3 + [16]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)-5001308409090277376, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $33(($3 + [8]), $0) + [8]) == (int_32)($3 + [8])), [17987])
	$4 = [1]
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = ($3 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$5 }
	CALL _ZdlPv($8)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($3 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $6
	
.LABEL $label$2
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $25($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18765])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18765])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $123(CALL $122($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [18765])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $142(*($1), ($0 + [32]))
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = CALL $158($2, $1)
	$4 = *($1 + [16])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$1 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	$5 = CALL $158(($2 + [16]), $3)
	CALL void $1((int_32 $5), (int_32 $4), (int_64 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = CALL $158(($2 + [16]), $1)
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$4 = (*(($1 + [16])) - *($1 + [12]))
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = int_32($4 >> [3])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$1 }
	$4 = CALL _Znwj($4)
	*(($2 + [8])) = ($4 + ($5 << [3]))
	*($2) = $4
	*($2 + [4]) = $4
	$5 = *(($1 + [12]))
	$1 = (*(($1 + [16])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($4, $5, $1)
	*($2 + [4]) = (*($2 + [4]) + $1)
	
.LABEL $label$2
	CALL $145($0, $3, $2)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$3 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$3
	if ( ((*($3) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$4
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $162($2)
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [144])
	$global$0 = $2
	$1 = CALL $158($2, ($1 + [104]))
	$10 = CALL $158(($2 + [16]), ($1 + [84]))
	$9 = CALL $158(($2 + [32]), ($1 + [72]))
	$8 = CALL $158(($2 + [48]), ($1 + [60]))
	$7 = CALL $158(($2 + [64]), ($1 + [48]))
	$6 = CALL $158(($2 + [80]), ($1 + [36]))
	$5 = CALL $158(($2 + [96]), ($1 + [24]))
	$4 = CALL $158(($2 + [112]), ($1 + [12]))
	$3 = CALL $158(($2 + [128]), $1)
	CALL $146($0, $3, $4, $5, $6, $7, $8, $9, $10, *($1 + [96]), $1)
	if ( (*($1) & [1]) ){ goto $label$17 }
	if ( (*($10) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($10) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*($10 + [8]))
	$1 = [1]
	if ( ((*($9) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = [1]
	if ( (*($9) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($8) & $1) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($8) & $1) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*($8 + [8]))
	$1 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = [1]
	if ( (*($7) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($6) & $1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & $1) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	$1 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($5) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($4) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [144])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [144])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $97(*($1), *($0))
	$0 = *($0)
	CALL $97(*($1), ($0 + [12]))
	CALL $97(*($1), ($0 + [24]))
	CALL $97(*($1), ($0 + [36]))
	CALL $97(*($1), ($0 + [48]))
	CALL $97(*($1), ($0 + [60]))
	CALL $97(*($1), ($0 + [72]))
	CALL $97(*($1), ($0 + [84]))
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [18061])
	CALL memcpy(($0 + [96]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $97(*($1), ($0 + [104]))
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $158(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $158(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $104 (int_32 $0)
{
	int_32 $1
	if ( (*($0 + [104]) & [1]) ){ goto $label$17 }
	if ( (*($0 + [84]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*(($0 + [112])))
	if ( ((*($0 + [84]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($0 + [92])))
	$1 = [1]
	if ( ((*($0 + [72]) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = [1]
	if ( (*($0 + [72]) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($0 + [60]) & $1) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($0 + [80])))
	if ( ((*($0 + [60]) & $1) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($0 + [68])))
	$1 = [1]
	if ( ((*($0 + [48]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = [1]
	if ( (*($0 + [48]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($0 + [36]) & $1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($0 + [56])))
	if ( ((*($0 + [36]) & $1) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($0 + [44])))
	$1 = [1]
	if ( ((*($0 + [24]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($0 + [24]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($0 + [12]) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*(($0 + [32])))
	if ( ((*($0 + [12]) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($0 + [20])))
	if ( ((*($0) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($0) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	return $0
	
.LABEL $label$1
	CALL _ZdlPv(*($0 + [8]))
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [24]) = (int_64)0
	$4 = [0]
	*(($0 + [16])) = [0]
	*(($0 + [32])) = (int_64)1397703940
	CALL eosio_assert([1], [17938])
	$5 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [16690])
	*(($0 + [48])) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [17938])
	$5 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$5 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [16690])
	*(($0 + [64])) = (int_64)1397703940
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [17938])
	$5 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$5 = $6
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$15 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [16690])
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	*($3 + [16]) = $3
	*($3 + [24]) = $0
	CALL $147(($3 + [24]), ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $158($2, ($1 + [8]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$4 = CALL $158(($2 + [16]), $1)
	CALL void $5((int_32 $3), (int_64 $4), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = CALL $158($2, $1)
	$4 = *($1 + [12])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$1 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	$5 = CALL $158(($2 + [16]), $3)
	CALL void $1((int_32 $5), (int_32 ((int_32)($4 & [255]) != (int_32)[0])), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [224])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $158(($2 + [96]), ($1 + [8]))
	*(($5 = (($2 + [80]) + [8]))) = *(($1 + [32]))
	*(($6 = (($2 + [64]) + [8]))) = *(($1 + [48]))
	*(($7 = (($2 + [48]) + [8]))) = *(($1 + [64]))
	*($2 + [80]) = *($1 + [24])
	*($2 + [64]) = *($1 + [40])
	*($2 + [48]) = *($1 + [56])
	*((($2 + [144]) + [8])) = *($7)
	*((($2 + [128]) + [8])) = *($6)
	*((($2 + [112]) + [8])) = *($5)
	*($2 + [144]) = *($2 + [48])
	*($2 + [128]) = *($2 + [64])
	*($2 + [112]) = *($2 + [80])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$5 = CALL $158(($2 + [208]), $4)
	$8 = *((($2 + [112]) + [8]))
	*((($2 + [192]) + [8])) = $8
	$9 = *((($2 + [128]) + [8]))
	*((($2 + [176]) + [8])) = $9
	$10 = *((($2 + [144]) + [8]))
	*((($2 + [160]) + [8])) = $10
	*((($2 + [32]) + [8])) = $8
	*((($2 + [16]) + [8])) = $9
	*(($2 + [8])) = $10
	$8 = *($2 + [112])
	*($2 + [192]) = $8
	$9 = *($2 + [128])
	*($2 + [176]) = $9
	*($2 + [32]) = $8
	*($2 + [16]) = $9
	$8 = *($2 + [144])
	*($2) = $8
	*($2 + [160]) = $8
	CALL void $0((int_32 $3), (int_64 $5), (int_32 ($2 + [32])), (int_32 ($2 + [16])), (int_32 $2), (int_32 $1))
	if ( (*($2 + [208]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [224])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [224])
}

int_64 .FUNC $38 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	float_64 $5
	float_64 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [40])
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$3 = *($0 + [48])
	if ( ((int_64)$3 == (int_64)$2) ){ goto $label$1 }
	$4 = CALL current_time()
	$2 = *(($0 + [40]))
	$6 = (CASTING float_64)(uint_32 *($0 + [88]))
	$5 = (float_64)
	if ( ((float_64)$5((CASTING float_64)(uint_32 (CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000))) - (CASTING float_64)(uint_32 *($0 + [92])))) >= (float_64)$6) ){ goto $label$2 }
	$5 = ((float_64)((float_64)$5 * (float_64)(CASTING float_64)(int_64 $2)) / (float_64)$6)
	if ( ((float_64)(float_64)|$5| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$2 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$3
	$2 = (Rounds 0)($5)
	
.LABEL $label$2
	*(($0 + [48])) = $2
	if ( ((int_64)$2 == (int_64)$3) ){ goto $label$1 }
	CALL $115($0, (int_64))($2 - $3))
	
.LABEL $label$1
	$3 = *($0 + [80])
	*($0 + [80]) = ((int_64)$3 + (int_64)$1)
	$7 = ($0 + [72])
	$4 = *($7)
	$2 = *($0 + [64])
	$5 = (CASTING float_64)(int_64 $1)
	$5 = ((float_64)((float_64)$5 * (float_64)CALL __floattidf($2, $4)) / (float_64)((float_64)$5 + (float_64)(CASTING float_64)(int_64 $3)))
	if ( ((float_64)(float_64)|$5| < (float_64)(float_64)9223372036854775808) ){ goto $label$5 }
	$1 = (int_64)-9223372036854775808
	goto $label$4 
	
.LABEL $label$5
	$1 = (Rounds 0)($5)
	
.LABEL $label$4
	*($0 + [64]) = (int_64))($2 - $1)
	*($7) = (int_64))((int_64))($4 - (int_64)$1 >> (int_64)63)) - (CASTING uint_64)(uint_32 (uint_64)($2 <= $1)))
	$8 = ($0 + [24])
	$2 = *($8)
	CALL eosio_assert(( ((int_64)*($0 + [16]) != (int_64)0) ? ((int_64)$2 > (int_64)0) : (int_64)($2 == 0) ), [18381])
	CALL eosio_assert(((int_64)*($0 + [80]) > (int_64)0), [18433])
	$3 = *($8)
	$2 = *($7)
	CALL eosio_assert(( ((uint_64)*($0 + [64]) >= (uint_64)*($0 + [16])) ? ((int_64)$2 >= (int_64)$3) : ((int_64)$2 == (int_64)$3) ), [18482])
	CALL eosio_assert(((int_64)*($0 + [32]) >= (int_64)*($0 + [80])), [18526])
	return $1
}

void .FUNC $39 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL require_auth($1)
	$5 = [0]
	*(($4 + [40])) = [0]
	*($4 + [16]) = $1
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$6 = *($0)
	*($4 + [8]) = $6
	$7 = [0]
	$8 = *($2 + [8])
	$9 = (uint_64)$8 >> (uint_64)(int_64)8
	$10 = CALL db_find_i64($6, $1, (int_64)3607749779137757184, $9)
	if ( ((int_32)$10) < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $12(($4 + [8]), $10)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($4 + [8])), [17987])
	
.LABEL $label$1
	$10 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($10, [17554])
	$11 = *($2)
	if ( ((int_64)$11 < (int_64)1) ){ goto $label$2 }
	$5 = ((int_64)$11 <= (int_64)*($7))
	
.LABEL $label$2
	CALL eosio_assert($5, [17571])
	CALL eosio_assert(((int_64)$8 == (int_64)*($7 + [8])), [16788])
	$6 = (int_64)7
	
.LOOP $label$3:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$3 }
	$2 = [1]
	if ( (CALL $10($0, $9, (int_64)4983106858454614016) == 0) ){ goto $label$4 }
	$6 = (int_64)7
	
.LOOP $label$5:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$5 }
	$2 = CALL $11($0, $9, (int_64)4983106858454614016, $1)
	
.LABEL $label$4
	CALL eosio_assert($2, [17601])
	CALL $40($0, $9, $11)
	CALL eosio_assert($10, [18574])
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($4 + [8])), [18609])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$3()), [18655])
	$6 = *($7 + [8])
	CALL eosio_assert(((int_64)$8 == (int_64)$6), [18981])
	$1 = (int_64)
	*($7) = $1(*($7) - $11))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [19029])
	CALL eosio_assert(((int_64)*($7) < (int_64)4611686018427387904), [19051])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$6) == (int_64)(uint_64)*($7 + [8]) >> (uint_64)(int_64)8)), [18706])
	CALL eosio_assert([1], [18765])
	CALL memcpy(($4 + [48]), $7, [8])
	CALL eosio_assert([1], [18765])
	CALL memcpy((($4 + [48]) | [8]), ($7 + [8]), [8])
	CALL db_update_i64(*($7 + [20]), (int_64)0, ($4 + [48]), [16])
	$0 = (($4 + [8]) + [16])
	if ( ((uint_64)$6 >= (uint_64)*($0)) ){ goto $label$10 }
	if ( ((int_64)*($7) == (int_64)0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($0) = ((int_64)$6 + (int_64)1)
	if ( ((int_64)*($7) != (int_64)0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($10, [19909])
	CALL eosio_assert($10, [19943])
	$0 = CALL db_next_i64(*(($7 + [20])), ($4 + [48]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$11 }
	CALL $12(($4 + [8]), $0)
	
.LABEL $label$11
	CALL $37(($4 + [8]), $7)
	$2 = *($4 + [32])
	if ( ($2 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = *($4 + [32])
	if ( $2 ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$6
	$10 = ($4 + [36])
	$7 = *($10)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	CALL _ZdlPv($0)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$14 }
	$7 = *(($4 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$7 = $2
	
.LABEL $label$12
	*($10) = $2
	CALL _ZdlPv($7)
	$global$0 = ($4 + [64])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	float_64 $8
	float_64 $9
	int_64 $10
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL eosio_assert(((int_64)$3 > (int_64)0), [18857])
	$5 = [0]
	*(($4 + [152])) = [0]
	*($4 + [136]) = (int_64)-1
	*($4 + [144]) = (int_64)0
	$6 = *($1)
	*($4 + [120]) = $6
	*($4 + [128]) = $2
	$1 = CALL db_find_i64($6, $2, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $2(($4 + [120]), $1) + [112]) == (int_32)($4 + [120])), [17987])
	$5 = [1]
	
.LABEL $label$1
	CALL eosio_assert($5, [18137])
	$5 = *(($4 + [148]))
	if ( ((int_32)$5 == (int_32)*(($4 + [144]))) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)($4 + [120])), [17987])
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	$1 = CALL db_find_i64(*($4 + [120]), *(($4 + [128])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $2(($4 + [120]), $1)
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)($4 + [120])), [17987])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18070])
	$7 = CALL memcpy($4, $5, [112])
	$2 = CALL current_time()
	CALL eosio_assert((*($7 + [92]) <= (CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000))), [18172])
	$2 = (int_64)0
	$6 = CALL $38($7, $3)
	CALL eosio_assert(((int_64)$6 > (int_64)0), [18916])
	$4 = *($7 + [97])
	if ( ((int_32)$4 == (int_32)*($7 + [96])) ){ goto $label$7 }
	$3 = CALL current_time()
	$4 = ($7 + [92])
	if ( ((uint_32)(*($7 + [88]) + *($4)) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000))) ){ goto $label$8 }
	$5 = *(($7 + [96]))
	$1 = *(($7 + [97]))
	$3 = CALL current_time()
	$8 = (CASTING float_64)(uint_32 *(($7 + [88])))
	$9 = (CASTING float_64)(uint_32 $1)
	$8 = (CASTING float_64)(uint_32 $5)
	$8 = CALL $167((float_64))(((float_64)((float_64)$8 + (float_64)$8) + (float_64)((float_64)((float_64)(float_64))($9 - $8) * (float_64)((float_64)$8 + (float_64)$8)) / (float_64)((float_64)(float_64))((CASTING float_64)(uint_32 (CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000))) - (CASTING float_64)(uint_32 *($4))) + (float_64)$8))
	if ( (((float_64)$8 - $9))) < (float_64)(float_64)4294967296) & ((float_64)$8 >= (float_64)(float_64)0)) ){ goto $label$6 }
	$4 = [0]
	if ( (([0] & [255]) == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$8
	$4 = *(($7 + [96]))
	
.LABEL $label$7
	if ( ($4 & [255]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = (CASTING uint_32)(float_64 $8)
	if ( (($4 & [255]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	if ( ((int_64)*($7 + [80]) >= (int_64)*($7 + [32])) ){ goto $label$4 }
	$2 = ((int_64)((int_64)((int_64)$6 * (int_64)((int_64)(CASTING uint_64)(uint_32 $4) & (int_64)255)) + (int_64)99) / (int_64)100)
	
.LABEL $label$4
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [18947])
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$9 }
	CALL $31($7, $2)
	
.LABEL $label$9
	$10 = (int_64)
	CALL eosio_assert(((int_64)$10($6 - $2)) > (int_64)0), [18916])
	CALL $32(($7 + [120]), $7, *($7 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17938])
	$2 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$2 = $3
	$5 = [1]
	$1 = $4
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$2 = $3
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$1 = ($4 + [1])
	$4 = $1
	if ( $5 ){ goto $label$14 }
	$5 = [1]
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$5 = [0]
	
.LABEL $label$10
	CALL eosio_assert($5, [16690])
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17938])
	$2 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$2 = $3
	$5 = [1]
	$1 = $4
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$2 = $3
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$1 = ($4 + [1])
	$4 = $1
	if ( $5 ){ goto $label$19 }
	$5 = [1]
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$5 = [0]
	
.LABEL $label$15
	CALL eosio_assert($5, [16690])
	*($0 + [8]) = (int_64)1397703940
	*($0) = $10
	*($0 + [16]) = $6
	*(($0 + [24])) = (int_64)1397703940
	$1 = *($7 + [144])
	if ( ($1 == 0) ){ goto $label$20 }
	$0 = ($7 + [148])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$22 }
	
.LOOP $label$23:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$24 }
	CALL _ZdlPv($5)
	
.LABEL $label$24
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$23 }
	$4 = *(($7 + [144]))
	goto $label$21 
	
.LABEL $label$22
	$4 = $1
	
.LABEL $label$21
	*($0) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$20
	$global$0 = ($7 + [160])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [19973])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [20018])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [20068])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_64 .FUNC $34 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	float_64 $5
	float_64 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [40])
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$3 = *($0 + [48])
	if ( ((int_64)$3 == (int_64)$2) ){ goto $label$1 }
	$4 = CALL current_time()
	$2 = *(($0 + [40]))
	$6 = (CASTING float_64)(uint_32 *($0 + [88]))
	$5 = (float_64)
	if ( ((float_64)$5((CASTING float_64)(uint_32 (CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000))) - (CASTING float_64)(uint_32 *($0 + [92])))) >= (float_64)$6) ){ goto $label$2 }
	$5 = ((float_64)((float_64)$5 * (float_64)(CASTING float_64)(int_64 $2)) / (float_64)$6)
	if ( ((float_64)(float_64)|$5| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$2 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$3
	$2 = (Rounds 0)($5)
	
.LABEL $label$2
	*(($0 + [48])) = $2
	if ( ((int_64)$2 == (int_64)$3) ){ goto $label$1 }
	CALL $115($0, (int_64))($2 - $3))
	
.LABEL $label$1
	$2 = *($0 + [64])
	$3 = ((int_64)$2 + (int_64)$1)
	*($0 + [64]) = $3
	$4 = *($7)
	*(($7 = ($0 + [72]))) = ((int_64)((int_64)$4 + (int_64)$1 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($3 <= $2)))
	$3 = *($0 + [80])
	$5 = (CASTING float_64)(int_64 $1)
	$5 = ((float_64)((float_64)$5 * (float_64)(CASTING float_64)(int_64 $3)) / (float_64)((float_64)$5 + (float_64)CALL __floattidf($2, $4)))
	if ( ((float_64)(float_64)|$5| < (float_64)(float_64)9223372036854775808) ){ goto $label$5 }
	$1 = (int_64)-9223372036854775808
	goto $label$4 
	
.LABEL $label$5
	$1 = (Rounds 0)($5)
	
.LABEL $label$4
	*($0 + [80]) = (int_64))($3 - $1)
	$8 = ($0 + [24])
	$2 = *($8)
	CALL eosio_assert(( ((int_64)*($0 + [16]) != (int_64)0) ? ((int_64)$2 > (int_64)0) : (int_64)($2 == 0) ), [18381])
	CALL eosio_assert(((int_64)*($0 + [80]) > (int_64)0), [18433])
	$3 = *($8)
	$2 = *($7)
	CALL eosio_assert(( ((uint_64)*($0 + [64]) >= (uint_64)*($0 + [16])) ? ((int_64)$2 >= (int_64)$3) : ((int_64)$2 == (int_64)$3) ), [18482])
	CALL eosio_assert(((int_64)*($0 + [32]) >= (int_64)*($0 + [80])), [18526])
	return $1
}

void .FUNC $35 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL require_auth($1)
	$4 = [0]
	*(($3 + [168])) = [0]
	*($3 + [144]) = $1
	*($3 + [152]) = (int_64)-1
	*($3 + [160]) = (int_64)0
	$5 = *($0)
	*($3 + [136]) = $5
	$6 = [0]
	$7 = *($2 + [8])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8
	$9 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, $8)
	if ( ((int_32)$9) < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $12(($3 + [136]), $9)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($3 + [136])), [17987])
	
.LABEL $label$1
	$10 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($10, [17403])
	CALL eosio_assert(((int_64)$7 == (int_64)*($6 + [8])), [16788])
	$11 = *($2)
	if ( ((int_64)$11 < (int_64)1) ){ goto $label$2 }
	$4 = ((int_64)$11 <= (int_64)*($6))
	
.LABEL $label$2
	CALL eosio_assert($4, [17421])
	$5 = (int_64)4
	
.LOOP $label$3:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$3 }
	$4 = [1]
	if ( (CALL $10($0, $8, (int_64)-4421672816961650688) == 0) ){ goto $label$4 }
	$5 = (int_64)4
	
.LOOP $label$5:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$5 }
	$4 = CALL $11($0, $8, (int_64)-4421672816961650688, $1)
	
.LABEL $label$4
	CALL eosio_assert($4, [17441])
	CALL eosio_assert([1], [17938])
	$5 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$5 = $7
	$9 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$5 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $9 ){ goto $label$10 }
	$9 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [16690])
	CALL eosio_assert([1], [17938])
	$5 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$5 = $7
	$9 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$5 = $7
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $9 ){ goto $label$15 }
	$9 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$9 = [0]
	
.LABEL $label$11
	CALL eosio_assert($9, [16690])
	CALL $36($3, $0, $8, $11)
	$13 = *(($3 + [24]))
	$14 = *($3 + [16])
	$15 = *($3 + [8])
	$16 = *($3)
	CALL eosio_assert(((int_64)$16 > (int_64)0), [17469])
	$17 = *($0)
	$5 = (int_64)6
	
.LOOP $label$16:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$16 }
	$5 = (int_64)0
	$8 = (int_64)59
	$4 = [17339]
	$11 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$22 }
	$9 = *($4)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$9 = ($9 + [-91])
	goto $label$20 
	
.LABEL $label$22
	$7 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$8 = ((int_64)$8 + (int_64)4294967291)
	$11 = ((int_64)$7 | (int_64)$11)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$17 }
	$5 = (int_64)0
	$8 = (int_64)59
	$4 = [17351]
	$18 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$28 }
	$9 = *($4)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$9 = ($9 + [-91])
	goto $label$26 
	
.LABEL $label$28
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$18 = ((int_64)$7 | (int_64)$18)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$23 }
	*(($3 + [88])) = [0]
	*($3 + [80]) = (int_64)0
	$4 = CALL $170([17512])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$35 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$38 }
	*($3 + [80]) = ($4 << [1])
	$9 = (($3 + [80]) | [1])
	if ( $4 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$12 = (($4 + [16]) & [-16])
	$9 = CALL _Znwj($12)
	*($3 + [80]) = ($12 | [1])
	*($3 + [88]) = $9
	*($3 + [84]) = $4
	
.LABEL $label$37
	CALL memcpy($9, [17512], $4)
	
.LABEL $label$36
	*(($9 + $4)) = [0]
	*(($3 + [24])) = $15
	*(($9 = (($3 + [96]) + [24]))) = [0]
	$4 = ($3 + [88])
	*(($3 + [40])) = *($4)
	*($4) = [0]
	*($3 + [8]) = $1
	*($3 + [16]) = $16
	*($3 + [96]) = $11
	*($3 + [104]) = $18
	*($3 + [112]) = (int_64)0
	*($3) = *($0)
	*($3 + [32]) = *($3 + [80])
	*($3 + [80]) = (int_64)0
	*(($4 = CALL _Znwj([16]))) = $17
	*($4 + [8]) = (int_64)3617214756542218240
	*((($3 + [96]) + [36])) = [0]
	$12 = ($4 + [16])
	*($9) = $12
	*(($3 + [116])) = $12
	*($3 + [112]) = $4
	*($3 + [124 align=4]) = (int_64)0
	$4 = *($3 + [32])
	$9 = ( *(($3 + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($9 + [32])
	$5 = (CASTING uint_64)(uint_32 $9)
	$9 = ($3 + [124])
	
.LOOP $label$39:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$39 }
	if ( ($4 == 0) ){ goto $label$41 }
	CALL $25($9, $4)
	$9 = *(($3 + [128]))
	$4 = *(($3 + [124]))
	goto $label$40 
	
.LABEL $label$41
	$9 = [0]
	$4 = [0]
	
.LABEL $label$40
	*($3 + [196]) = $4
	*($3 + [192]) = $4
	*($3 + [200]) = $9
	*($3 + [176]) = ($3 + [192])
	*($3 + [184]) = $3
	CALL $26(($3 + [184]), ($3 + [176]))
	CALL $27(($3 + [192]), ($3 + [96]))
	$4 = *($3 + [192])
	CALL send_inline($4, (*($3 + [196]) - $4))
	$4 = *($3 + [192])
	if ( ($4 == 0) ){ goto $label$42 }
	*($3 + [196]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$42
	$4 = *($3 + [124])
	if ( ($4 == 0) ){ goto $label$43 }
	*(($3 + [128])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$43
	$4 = *($3 + [112])
	if ( ($4 == 0) ){ goto $label$44 }
	*(($3 + [116])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$44
	if ( ((*(($3 + [32])) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$45
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$46
	CALL eosio_assert($10, [18574])
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($3 + [136])), [18609])
	CALL eosio_assert(((int_64)*($3 + [136]) == (int_64)CALL $fimport$3()), [18655])
	$5 = *($6 + [8])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)$5), [18981])
	$7 = (int_64)
	*($6) = $7(*($6) - *($2)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [19029])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [19051])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8)), [18706])
	CALL eosio_assert([1], [18765])
	CALL memcpy($3, $6, [8])
	CALL eosio_assert([1], [18765])
	CALL memcpy(($3 | [8]), ($6 + [8]), [8])
	CALL db_update_i64(*($6 + [20]), (int_64)0, $3, [16])
	$4 = (($3 + [136]) + [16])
	if ( (uint_64)($5 <= *($4)) ){ goto $label$47 }
	*($4) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$47
	if ( ((int_64)*($6) != (int_64)0) ){ goto $label$48 }
	CALL eosio_assert($10, [19909])
	CALL eosio_assert($10, [19943])
	$4 = CALL db_next_i64(*(($6 + [20])), $3)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$49 }
	CALL $12(($3 + [136]), $4)
	
.LABEL $label$49
	CALL $37(($3 + [136]), $6)
	
.LABEL $label$48
	$7 = *($0)
	$5 = (int_64)6
	
.LOOP $label$50:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$50 }
	$5 = (int_64)7
	
.LOOP $label$51:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$51 }
	*(($3 + [88])) = [0]
	*($3 + [80]) = (int_64)0
	$4 = CALL $170([17436])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$54 }
	*($3 + [80]) = ($4 << [1])
	$9 = (($3 + [80]) | [1])
	if ( $4 ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$12 = (($4 + [16]) & [-16])
	$9 = CALL _Znwj($12)
	*($3 + [80]) = ($12 | [1])
	*($3 + [88]) = $9
	*($3 + [84]) = $4
	
.LABEL $label$53
	CALL memcpy($9, [17436], $4)
	
.LABEL $label$52
	*(($9 + $4)) = [0]
	CALL eosio_assert(((int_64)$15 == (int_64)$13), [18981])
	$5 = (int_64)
	CALL eosio_assert(((int_64)$5($14 - $16)) > (int_64)-4611686018427387904), [19029])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [19051])
	*(($3 + [48])) = $13
	*(($3 + [64])) = $13
	$4 = (($3 + [80]) + [8])
	*(($3 + [16])) = *($4)
	*($4) = [0]
	*(($3 + [32])) = *(($2 + [8]))
	*($3) = $1
	*($3 + [40]) = $14
	*($3 + [56]) = $5
	*($3 + [96]) = $7
	*($3 + [104]) = (int_64)-5003315193367756800
	*($3 + [8]) = *($3 + [80])
	*($3 + [80]) = (int_64)0
	*($3 + [24]) = *($2)
	*(($4 = CALL _Znwj([16]))) = $7
	*($4 + [8]) = (int_64)3617214756542218240
	*(($3 + [132])) = [0]
	$9 = ($4 + [16])
	*(($3 + [120])) = $9
	*(($3 + [116])) = $9
	*($3 + [112]) = $4
	*($3 + [124 align=4]) = (int_64)0
	$4 = *($3 + [8])
	$9 = ( *(($3 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($9 + [56])
	$5 = (CASTING uint_64)(uint_32 $9)
	$9 = ($3 + [124])
	
.LOOP $label$55:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$55 }
	if ( ($4 == 0) ){ goto $label$57 }
	CALL $25($9, $4)
	$9 = *(($3 + [128]))
	$4 = *(($3 + [124]))
	goto $label$56 
	
.LABEL $label$57
	$9 = [0]
	$4 = [0]
	
.LABEL $label$56
	*($3 + [196]) = $4
	*($3 + [192]) = $4
	*($3 + [200]) = $9
	*($3 + [176]) = ($3 + [192])
	*($3 + [184]) = $3
	CALL $29(($3 + [184]), ($3 + [176]))
	CALL $27(($3 + [192]), ($3 + [96]))
	$4 = *($3 + [192])
	CALL send_inline($4, (*($3 + [196]) - $4))
	$4 = *($3 + [192])
	if ( ($4 == 0) ){ goto $label$58 }
	*($3 + [196]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$58
	$4 = *($3 + [124])
	if ( ($4 == 0) ){ goto $label$59 }
	*(($3 + [128])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$59
	$4 = *($3 + [112])
	if ( ($4 == 0) ){ goto $label$60 }
	*(($3 + [116])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$60
	if ( (*(($3 + [8])) & [1]) ){ goto $label$62 }
	if ( (*($3 + [80]) & [1]) ){ goto $label$61 }
	goto $label$33 
	
.LABEL $label$62
	CALL _ZdlPv(*(($3 + [16])))
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$33 }
	
.LABEL $label$61
	CALL _ZdlPv(*(($3 + [88])))
	$12 = *($3 + [160])
	if ( $12 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$35
	CALL $157(($3 + [80]))
	
.LABEL $label$34
	CALL $157(($3 + [80]))
	
.LABEL $label$33
	$12 = *($3 + [160])
	if ( ($12 == 0) ){ goto $label$31 }
	
.LABEL $label$32
	$6 = ($3 + [164])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$30 }
	
.LOOP $label$63:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$64 }
	CALL _ZdlPv($9)
	
.LABEL $label$64
	if ( ((int_32)$12 != (int_32)$4) ){ goto $label$63 }
	$4 = *(($3 + [160]))
	goto $label$29 
	
.LABEL $label$31
	$global$0 = ($3 + [208])
	return 
	
.LABEL $label$30
	$4 = $12
	
.LABEL $label$29
	*($6) = $12
	CALL _ZdlPv($4)
	$global$0 = ($3 + [208])
	(unreachable)
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$0), [17987])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $2($0, $4)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$0), [17987])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18574])
	CALL $116($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $117($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18038])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$5 }
	$2 = CALL $172($4)
	CALL db_get_i64($1, $2, $4)
	CALL $175($2)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	CALL db_get_i64($1, $2, $4)
	
.LABEL $label$4
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18061])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $121(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL eosio_assert(((int_64)$2 > (int_64)0), [18095])
	$4 = [0]
	*(($3 + [152])) = [0]
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	$5 = *($0)
	*($3 + [120]) = $5
	*($3 + [128]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $2(($3 + [120]), $0) + [112]) == (int_32)($3 + [120])), [17987])
	$4 = [1]
	
.LABEL $label$1
	CALL eosio_assert($4, [18137])
	$4 = *(($3 + [148]))
	if ( ((int_32)$4 == (int_32)*(($3 + [144]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($3 + [120])), [17987])
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$0 = CALL db_find_i64(*($3 + [120]), *(($3 + [128])), (int_64)7035937633859534848, (int_64)7035937633859534848)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $2(($3 + [120]), $0)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($3 + [120])), [17987])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [18070])
	$6 = CALL memcpy($3, $4, [112])
	$1 = CALL current_time()
	CALL eosio_assert((*($6 + [92]) <= (CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000))), [18172])
	CALL eosio_assert(((int_64)*($6 + [80]) < (int_64)*($6 + [32])), [18209])
	CALL $31($6, $2)
	CALL $32(($6 + [120]), $6, *($6 + [8]))
	$0 = *($6 + [144])
	if ( ($0 == 0) ){ goto $label$4 }
	$7 = ($6 + [148])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL _ZdlPv($4)
	
.LABEL $label$8
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$7 }
	$3 = *(($6 + [144]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $0
	
.LABEL $label$5
	*($7) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($6 + [160])
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	float_64 $6
	float_64 $7
	int_32 $8
	int_32 $9
	float_64 $10
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [40])
	if ( (int_64)($3 == 0) ){ goto $label$1 }
	$4 = *($0 + [48])
	if ( ((int_64)$4 == (int_64)$3) ){ goto $label$1 }
	$5 = CALL current_time()
	$3 = *(($0 + [40]))
	$7 = (CASTING float_64)(uint_32 *($0 + [88]))
	$6 = (float_64)
	if ( ((float_64)$6((CASTING float_64)(uint_32 (CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000))) - (CASTING float_64)(uint_32 *($0 + [92])))) >= (float_64)$7) ){ goto $label$2 }
	$6 = ((float_64)((float_64)$6 * (float_64)(CASTING float_64)(int_64 $3)) / (float_64)$7)
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$3 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$3
	$3 = (Rounds 0)($6)
	
.LABEL $label$2
	*(($0 + [48])) = $3
	if ( ((int_64)$3 == (int_64)$4) ){ goto $label$1 }
	CALL $115($0, (int_64))($3 - $4))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$1 > (int_64)0), [18336])
	CALL eosio_assert(((int_64)*($0 + [80]) < (int_64)*($0 + [32])), [18209])
	$8 = ($0 + [24])
	$6 = CALL __floattidf(*($0 + [16]), *($8))
	$10 = (CASTING float_64)(int_64 *($0 + [80]))
	$7 = (float_64)
	$7 = (CASTING float_64)(int_64 *($0 + [32]))
	$9 = ($0 + [72])
	$6 = ((float_64)(float_64))(CALL __floattidf(*($0 + [64]), *($9)) - $6) + (float_64)(CASTING float_64)(int_64 $1)
	CALL __fixdfti(($2 + [16]), ((float_64)((float_64)$6) * (float_64)$7) / (float_64)$7($7 - $10))))
	*($9) = *((($2 + [16]) + [8]))
	*($0 + [64]) = *($2 + [16])
	CALL __fixdfti($2, ((float_64)((float_64)$6 * (float_64)$10) / (float_64)$7))
	$1 = *(($2 + [8]))
	*($8) = $1
	$3 = *($2)
	*($0 + [16]) = $3
	CALL eosio_assert(( ((int_64)$3 != (int_64)0) ? ((int_64)$1 > (int_64)0) : (int_64)($1 == 0) ), [18381])
	CALL eosio_assert(((int_64)*($0 + [80]) > (int_64)0), [18433])
	$3 = *($8)
	$1 = *($9)
	CALL eosio_assert(( ((uint_64)*($0 + [64]) >= (uint_64)*($0 + [16])) ? ((int_64)$1 >= (int_64)$3) : ((int_64)$1 == (int_64)$3) ), [18482])
	CALL eosio_assert(((int_64)*($0 + [32]) >= (int_64)*($0 + [80])), [18526])
	$global$0 = ($2 + [32])
}