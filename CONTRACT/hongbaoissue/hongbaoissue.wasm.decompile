(data (i32.const 4) "\c0m\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the eosio system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "open\00")
(data (i32.const 160) "applyfree\00")
(data (i32.const 176) "payfree\00")
(data (i32.const 192) "refund\00")
(data (i32.const 208) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 272) "refundable account does not exist\00")
(data (i32.const 320) "no refundable amount\00")
(data (i32.const 352) "refunded\00")
(data (i32.const 368) "cannot create objects in table of another contract\00")
(data (i32.const 432) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 496) "invalid symbol name\00")
(data (i32.const 528) "write\00")
(data (i32.const 544) "hongbaoback1\00")
(data (i32.const 560) "active\00")
(data (i32.const 576) "Equity Swap EOS Return - Thank you for your trust and support to HONGBAO.ONE, we will keep operating and improving!\00")
(data (i32.const 704) "error reading iterator\00")
(data (i32.const 736) "read\00")
(data (i32.const 752) "get\00")
(data (i32.const 768) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 832) "invalid quantity\00")
(data (i32.const 864) "no corresponding red envelope\00")
(data (i32.const 896) "have already received a free red envelope\00")
(data (i32.const 944) "hongbaocoins\00")
(data (i32.const 960) "Equity Swap Free Red Envelope - HONGBAO.ONE Equity Swap opens now! Join the Equity Swap, buy RED tokens to share game dividends & win the equity swap EOS Reward Pool\00")
(data (i32.const 1136) "cannot pass end iterator to erase\00")
(data (i32.const 1184) "cannot increment end iterator\00")
(data (i32.const 1216) "invalid symbol\00")
(data (i32.const 1232) "object passed to erase is not in multi_index\00")
(data (i32.const 1280) "cannot erase objects in table of another contract\00")
(data (i32.const 1344) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1408) "swap is over\00")
(data (i32.const 1424) "not yet started\00")
(data (i32.const 1440) "have already received a free red envelopel\00")
(data (i32.const 1488) "have already apply a free red envelope\00")
(data (i32.const 1536) "free red envelope has been received\00")
(data (i32.const 1584) "invalid open count\00")
(data (i32.const 1616) "multiplication overflow\00")
(data (i32.const 1648) "multiplication underflow\00")
(data (i32.const 1680) "no red envelope\00")
(data (i32.const 1696) "insufficient red envelope\00")
(data (i32.const 1728) "cannot pass end iterator to modify\00")
(data (i32.const 1776) "Equity Swap Super Red Envelope - HONGBAO.ONE Equity Swap opens now! Join the Equity Swap, buy RED tokens to share game dividends & win the equity swap EOS Reward Pool\00")
(data (i32.const 1952) "object passed to modify is not in multi_index\00")
(data (i32.const 2000) "cannot modify objects in table of another contract\00")
(data (i32.const 2064) "updater cannot change primary key when modifying an object\00")
(data (i32.const 2128) "quantity too small\00")
(data (i32.const 2160) "quantity too large\00")
(data (i32.const 2192) "quantity must be integer\00")
(data (i32.const 2224) "invalid swap round\00")
(data (i32.const 2256) "divide by zero\00")
(data (i32.const 2272) "signed division overflow\00")
(data (i32.const 2304) "attempt to subtract asset with different symbol\00")
(data (i32.const 2352) "subtraction underflow\00")
(data (i32.const 2384) "subtraction overflow\00")
(data (i32.const 2416) "hongbaorepay\00")
(data (i32.const 2432) "Equity Swap to HONGBAO.ONE Equity Swap Reward Pool - HONGBAO.ONE Equity Swap opens now! Join the Equity Swap, buy RED tokens to share game dividends & win the equity swap EOS Reward Pool\00")
(data (i32.const 2624) "hongbaobonus\00")
(data (i32.const 2640) "Equity Swap to HONGBAO.ONE Dividends Pool - HONGBAO.ONE Equity Swap opens now! Join the Equity Swap, buy RED tokens to share game dividends & win the equity swap EOS Reward Pool\00")
(data (i32.const 2832) "hongbaoteam1\00")
(data (i32.const 2848) "Equity Swap to HONGBAO.ONE Team - HONGBAO.ONE Equity Swap opens now! Join the Equity Swap, buy RED tokens to share game dividends & win the equity swap EOS Reward Pool\00")
(data (i32.const 3024) "attempt to add asset with different symbol\00")
(data (i32.const 3072) "addition underflow\00")
(data (i32.const 3104) "addition overflow\00")
(data (i32.const 3136) "round id must be positive\00")
(data (i32.const 3168) "the round already exists\00")
(data (i32.const 3200) "unable to find key\00")
(data (i32.const 11616) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$9 (param i32)))
(import "env" "db_store_i64" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$12 (param i32 i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "require_auth2" (func $fimport$16 (param i64 i64)))
(import "env" "send_inline" (func $fimport$17 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN7eosgame12eosluckyswap8transferEyyN5eosio5assetENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE" (func $7))
(export "_ZN7eosgame12eosluckyswap4openEyhN5eosio5assetE" (func $9))
(export "_ZN7eosgame12eosluckyswap9applyfreeEy" (func $11))
(export "_ZN7eosgame12eosluckyswap7payfreeEyN5eosio5assetE" (func $13))
(export "_ZN7eosgame12eosluckyswap6refundEy" (func $15))
(export "_ZN7eosgame12eosluckyswap9add_roundEym" (func $48))
(export "_ZN7eosgame12eosluckyswap12add_quantityEyyN5eosio5assetE" (func $49))
(export "_ZN7eosgame12eosluckyswap15get_envelop_numEy" (func $65))
(export "malloc" (func $66))
(export "free" (func $69))
(export "memcmp" (func $76))
(export "strlen" (func $77))
(table $0 6 6 anyfunc)
(elem (i32.const 0) $78 $7 $13 $15 $11 $9)



void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $70(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $74($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $71($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $71($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $70(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $74($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $71($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $71($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $70([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $21($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $24(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $67([3220], $0)
}

int_32 .FUNC _ZN7eosgame12eosluckyswap15get_envelop_numEy (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = [0]
	if ( ((uint_64)$1 > (uint_64)(int_64)79) ){ goto $label$1 }
	$2 = [1]
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$1 }
	$1 = (int_64)
	$2 = ( [1] ? (CASTING uint_32)(uint_64 $1((int_64)7 - $1))) : (int_64)(((int_64)$1 & (int_64)255) == 0) )
	
.LABEL $label$1
	return ($2 & [255])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $40($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [528])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [528])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [528])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [528])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $70(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $71($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $68($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11616])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [752])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $30($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [736])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $70(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $74($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [32])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [36])) = $6
	CALL $71($6)
	
.LABEL $label$11
	CALL $71($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $71($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $70($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $74($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $71($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $21($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [528])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [528])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $23(CALL $22($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [528])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [528])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [528])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [528])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [528])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [528])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [528])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $25(*($1), ($0 + [32]))
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $29($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [736])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [736])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [736])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [432])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [496])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [736])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [736])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [736])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

void .FUNC $74 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZN7eosgame12eosluckyswap12add_quantityEyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [208])
	*([0] + [4]) = $9
	*($9 + [160]) = $1
	*($9 + [152]) = $2
	$7 = [0]
	*(($9 + [144])) = [0]
	*($9 + [128]) = (int_64)-1
	*($9 + [136]) = (int_64)0
	$4 = *($0)
	*($9 + [112]) = $4
	*($9 + [120]) = $4
	CALL eosio_assert([1], [432])
	$1 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [496])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [768])
	CALL eosio_assert(((int_64)*($3) > (int_64)9999), [2128])
	CALL eosio_assert([1], [432])
	$1 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [496])
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)1397703940), [768])
	CALL eosio_assert(((int_64)*($3) < (int_64)50000001), [2160])
	$7 = CALL db_find_i64($4, $4, (int_64)-4812882490098188288, $2)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL $46(($9 + [112]), $7)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($9 + [112])), [208])
	*($9 + [108]) = $7
	*($9 + [104]) = ($9 + [112])
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	*($9 + [108]) = [0]
	*($9 + [104]) = ($9 + [112])
	
.LABEL $label$11
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [2224])
	$1 = *($0)
	$7 = *($9 + [108])
	*($9 + [60]) = $3
	*($9 + [56]) = ($9 + [104])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1728])
	CALL $50(($9 + [112]), $7, $1, ($9 + [56]))
	$4 = *(*($9 + [108]) + [8])
	CALL eosio_assert([1], [432])
	$1 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$6 = [0]
	
.LABEL $label$13
	CALL eosio_assert($6, [496])
	$6 = ($3 + [8])
	CALL eosio_assert(((int_64)*($6) == (int_64)1397703940), [768])
	*($9 + [100]) = ((int_64)((int_64)*($3) / (int_64)10000) * (int_64)$4)
	$1 = *($9 + [152])
	$4 = *($0)
	*($9 + [56]) = $4
	*($9 + [72]) = (int_64)-1
	$7 = [0]
	*($9 + [80]) = [0]
	*($9 + [64]) = $1
	*(($9 + [84])) = [0]
	*((($9 + [56]) + [32])) = [0]
	$8 = CALL db_find_i64($4, $1, (int_64)-4103522530394898432, *($9 + [160]))
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$19 }
	$7 = CALL $51(($9 + [56]), $8)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)($9 + [56])), [208])
	$4 = *($0)
	CALL eosio_assert([1], [1728])
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)($9 + [56])), [1952])
	CALL eosio_assert(((int_64)*($9 + [56]) == (int_64)CALL $fimport$3()), [2000])
	$1 = *($7)
	CALL eosio_assert(((int_64)*($6) == (int_64)*(($7 + [16]))), [3024])
	$2 = ((int_64)*($7 + [8]) + (int_64)*($3))
	*($7 + [8]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [3072])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [3104])
	*($7 + [24]) = (*($7 + [24]) + *($9 + [100]))
	CALL eosio_assert(((int_64)$1 == (int_64)*($7)), [2064])
	*($9 + [8]) = (($9 + [16]) + [32])
	*($9 + [4]) = ($9 + [16])
	*($9) = ($9 + [16])
	CALL $52($9, $7)
	CALL db_update_i64(*($7 + [36]), $4, ($9 + [16]), [32])
	$7 = (($9 + [56]) + [16])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$18 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$18 
	
.LABEL $label$19
	$4 = *($0)
	CALL eosio_assert(((int_64)*($9 + [56]) == (int_64)CALL $fimport$3()), [368])
	*(($6 = CALL $70([48])) + [16]) = (int_64)1398362884
	*($6 + [8]) = (int_64)0
	CALL eosio_assert([1], [432])
	$5 = ($6 + [8])
	$1 = (int_64)5462355
	
.LOOP $label$21:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$21 }
	
.LABEL $label$20
	CALL eosio_assert($8, [496])
	*($6 + [32]) = ($9 + [56])
	*($6) = *($9 + [160])
	*(($5 + [12])) = *(($3 + [12]))
	*(($5 + [8])) = *(($3 + [8]))
	*(($5 + [4])) = *(($3 + [4]))
	*($5) = *($3)
	*($6 + [24]) = *($9 + [100])
	*($6 + [28]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($9 + [8]) = (($9 + [16]) + [32])
	*($9 + [4]) = ($9 + [16])
	*($9) = ($9 + [16])
	CALL $52($9, $6)
	$1 = *($6)
	$8 = CALL db_store_i64(*((($9 + [56]) + [8])), (int_64)-4103522530394898432, $4, $1, ($9 + [16]), [32])
	*($6 + [36]) = $8
	$7 = ($9 + [72])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$24 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	*($9) = $6
	$1 = *($6)
	*($9 + [16]) = $1
	*($9 + [176]) = $8
	$5 = ($9 + [84])
	$7 = *($5)
	if ( ((uint_32)$7 >= (uint_32)*((($9 + [56]) + [32]))) ){ goto $label$26 }
	*($7 + [8]) = $1
	*($7 + [16]) = $8
	*($9) = [0]
	*($7) = $6
	*($5) = ($7 + [24])
	goto $label$25 
	
.LABEL $label$26
	CALL $53(($9 + [80]), $9, ($9 + [16]), ($9 + [176]))
	
.LABEL $label$25
	$7 = *($9)
	*($9) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	CALL $71($7)
	
.LABEL $label$18
	$7 = [0]
	*(($9 + [48])) = [0]
	$1 = *($0)
	*($9 + [16]) = $1
	*($9 + [32]) = (int_64)-1
	*($9 + [40]) = (int_64)0
	*($9 + [24]) = $1
	$6 = CALL db_find_i64($1, $1, (int_64)3607805513988833280, *($9 + [160]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$29 }
	$7 = CALL $16(($9 + [16]), $6)
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)($9 + [16])), [208])
	$1 = *($0)
	*($9) = $3
	*($9 + [4]) = ($9 + [100])
	*($9 + [8]) = ($9 + [152])
	CALL eosio_assert([1], [1728])
	CALL $54(($9 + [16]), $7, $1, $9)
	$6 = *($9 + [40])
	if ( $6 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$1 = *($0)
	*($9 + [4]) = $3
	*($9) = ($9 + [160])
	*($9 + [8]) = ($9 + [100])
	*($9 + [12]) = ($9 + [152])
	*($9 + [200]) = $1
	CALL eosio_assert(((int_64)*($9 + [16]) == (int_64)CALL $fimport$3()), [368])
	*($9 + [180]) = $9
	*($9 + [176]) = ($9 + [16])
	*($9 + [184]) = ($9 + [200])
	*(($3 = CALL $70([56])) + [16]) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	CALL eosio_assert([1], [432])
	$1 = (int_64)5462355
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$33 }
	
.LOOP $label$34:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$31 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$34 }
	
.LABEL $label$33
	$0 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$0 = [0]
	
.LABEL $label$30
	CALL eosio_assert($0, [496])
	*($3 + [40]) = [0]
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [44]) = ($9 + [16])
	CALL $55(($9 + [176]), $3)
	*($9 + [192]) = $3
	$1 = *($3)
	*($9 + [176]) = $1
	$0 = *($3 + [48])
	*($9 + [172]) = $0
	$6 = ($9 + [44])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($9 + [48]))) ){ goto $label$36 }
	*($7 + [8]) = $1
	*($7 + [16]) = $0
	*($9 + [192]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$35 
	
.LABEL $label$36
	CALL $28(($9 + [40]), ($9 + [192]), ($9 + [176]), ($9 + [172]))
	
.LABEL $label$35
	$7 = *($9 + [192])
	*($9 + [192]) = [0]
	if ( ($7 == 0) ){ goto $label$37 }
	$3 = *($7 + [32])
	if ( ($3 == 0) ){ goto $label$38 }
	*(($7 + [36])) = $3
	CALL $71($3)
	
.LABEL $label$38
	CALL $71($7)
	
.LABEL $label$37
	$6 = *($9 + [40])
	if ( ($6 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$8 = ($9 + [44])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$40 }
	
.LOOP $label$41:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$42 }
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$43 }
	*(($3 + [36])) = $0
	CALL $71($0)
	
.LABEL $label$43
	CALL $71($3)
	
.LABEL $label$42
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$41 }
	$7 = *(($9 + [40]))
	goto $label$39 
	
.LABEL $label$40
	$7 = $6
	
.LABEL $label$39
	*($8) = $6
	CALL $71($7)
	
.LABEL $label$27
	$0 = *($9 + [80])
	if ( ($0 == 0) ){ goto $label$44 }
	$6 = ($9 + [84])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$46 }
	
.LOOP $label$47:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$48 }
	CALL $71($3)
	
.LABEL $label$48
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$47 }
	$7 = *(($9 + [80]))
	goto $label$45 
	
.LABEL $label$46
	$7 = $0
	
.LABEL $label$45
	*($6) = $0
	CALL $71($7)
	
.LABEL $label$44
	$0 = *($9 + [136])
	if ( ($0 == 0) ){ goto $label$49 }
	$6 = ($9 + [140])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$51 }
	
.LOOP $label$52:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$53 }
	CALL $71($3)
	
.LABEL $label$53
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$52 }
	$7 = *(($9 + [136]))
	goto $label$50 
	
.LABEL $label$51
	$7 = $0
	
.LABEL $label$50
	*($6) = $0
	CALL $71($7)
	
.LABEL $label$49
	*([0] + [4]) = ($9 + [208])
}

void .FUNC _ZN7eosgame12eosluckyswap9add_roundEym (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [144])
	*([0] + [4]) = $8
	*($8 + [96]) = $2
	*($8 + [92]) = $3
	CALL eosio_assert(((int_64)$2 != (int_64)0), [3136])
	$3 = [0]
	*(($8 + [80])) = [0]
	*($8 + [64]) = (int_64)-1
	*($8 + [72]) = (int_64)0
	$6 = *($1)
	*($8 + [48]) = $6
	*($8 + [56]) = $6
	$5 = [1]
	$4 = CALL db_find_i64($6, $6, (int_64)-4812882490098188288, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $46(($8 + [48]), $4) + [40]) == (int_32)($8 + [48])), [208])
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [3168])
	$2 = *($1)
	*($8 + [132]) = $1
	*($8 + [128]) = ($8 + [96])
	*($8 + [136]) = ($8 + [92])
	*($8 + [120]) = $2
	CALL eosio_assert(((int_64)*($8 + [48]) == (int_64)CALL $fimport$3()), [368])
	*($8 + [12]) = ($8 + [128])
	*($8 + [8]) = ($8 + [48])
	*($8 + [16]) = ($8 + [120])
	*(($4 = CALL $70([56])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [432])
	$2 = (int_64)5462355
	
.LOOP $label$3:
	$5 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert($5, [496])
	*($4 + [40]) = ($8 + [48])
	CALL $58(($8 + [8]), $4)
	*($8 + [112]) = $4
	$2 = *($4)
	*($8 + [8]) = $2
	$5 = *($4 + [44])
	*($8 + [108]) = $5
	$7 = ($8 + [76])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($8 + [80]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $5
	*($8 + [112]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $59(($8 + [72]), ($8 + [112]), ($8 + [8]), ($8 + [108]))
	
.LABEL $label$6
	$5 = *($8 + [112])
	$3 = [0]
	*($8 + [112]) = [0]
	if ( ($5 == 0) ){ goto $label$8 }
	CALL $71($5)
	
.LABEL $label$8
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$2 = *($1)
	*($8 + [8]) = $2
	*($8 + [16]) = $2
	$5 = CALL db_find_i64($2, $2, (int_64)-4157508551318700032, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$3 = CALL $45(($8 + [8]), $5)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($8 + [8])), [208])
	
.LABEL $label$9
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [1424])
	$6 = *($1)
	CALL eosio_assert($5, [1728])
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($8 + [8])), [1952])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)CALL $fimport$3()), [2000])
	*($3 + [8]) = *($8 + [96])
	$2 = *($3)
	CALL eosio_assert([1], [2064])
	CALL eosio_assert([1], [528])
	CALL memcpy(($8 + [128]), $3, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($8 + [128]) | [8]), ($3 + [8]), [8])
	CALL db_update_i64(*($3 + [20]), $6, ($8 + [128]), [16])
	$3 = (($8 + [8]) + [16])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$10 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	CALL memcpy($0, CALL $60(($8 + [48]), *($8 + [96]), [3200]), [40])
	$4 = *($8 + [32])
	if ( ($4 == 0) ){ goto $label$11 }
	$1 = ($8 + [36])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $71($5)
	
.LABEL $label$15
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($8 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $4
	
.LABEL $label$12
	*($1) = $4
	CALL $71($3)
	
.LABEL $label$11
	$4 = *($8 + [72])
	if ( ($4 == 0) ){ goto $label$16 }
	$1 = ($8 + [76])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$20 }
	CALL $71($5)
	
.LABEL $label$20
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($8 + [72]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $4
	
.LABEL $label$17
	*($1) = $4
	CALL $71($3)
	
.LABEL $label$16
	*([0] + [4]) = ($8 + [144])
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11604])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [11412]
	$1 = (((int_32)$2 * (int_32)[12]) + [11412])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11702]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11704])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11702]) = [1]
	$7 = ($7 << [16])
	*([0] + [11704]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11704])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11704]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11702]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11702]) = [1]
	$3 = ($3 << [16])
	*([0] + [11704]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11704])
	
.LABEL $label$8
	*([0] + [11704]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $44($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $73($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $70($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $73($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $71($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $72($7)
	return (unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $75(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $75(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $71(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $71(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [736])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [736])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [736])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $43(*($1), ($0 + [32]))
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [528])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [528])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [528])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [528])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [528])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [528])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [528])
	CALL memcpy(*($0 + [4]), ($1 + [36]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [704])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $70([56])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [432])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [496])
	*($4 + [40]) = $0
	CALL $61(($8 + [32]), $4)
	*($4 + [44]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [44])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $59($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $71($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [704])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $70([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [736])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [736])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $62(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $71($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [752])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $21($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [736])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $72 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [704])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $70([48])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [432])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [496])
	*($4 + [32]) = $0
	CALL $57(($8 + [32]), $4)
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [36])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $53($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $71($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $78 ()
{
	(unreachable)
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11708])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $70($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $60 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [208])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4812882490098188288, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $46($0, $5)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [208])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $71 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [432])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [496])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $41(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $42(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $71(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN7eosgame12eosluckyswap4openEyhN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [192])
	*([0] + [4]) = $12
	*($12 + [175]) = $2
	CALL require_auth(*($0))
	$10 = *($3 + [8])
	$4 = ((int_64)$10 == (int_64)1145393668)
	CALL eosio_assert($4, [1216])
	$6 = [1]
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$1 }
	$6 = [1]
	if ( ((int_32)$2 == (int_32)[10]) ){ goto $label$1 }
	$6 = [1]
	if ( ((int_32)$2 == (int_32)[100]) ){ goto $label$1 }
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [1584])
	CALL eosio_assert([1], [432])
	$8 = (int_64)4474194
	$6 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	CALL eosio_assert($5, [496])
	CALL eosio_assert([1], [1616])
	CALL eosio_assert([1], [1648])
	CALL eosio_assert($4, [768])
	$9 = (CASTING uint_64)(uint_32 $2)
	$7 = *($3)
	if ( ((int_64)$7 >= (int_64)((int_64)$9 * (int_64)2000000)) ){ goto $label$8 }
	CALL eosio_assert([0], [832])
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([1], [432])
	$8 = (int_64)4474194
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$2 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$2 = [0]
	
.LABEL $label$9
	CALL eosio_assert($2, [496])
	CALL eosio_assert([1], [1616])
	CALL eosio_assert([1], [1648])
	CALL eosio_assert(((int_64)$10 == (int_64)1145393668), [768])
	CALL eosio_assert(((int_64)$7 <= (int_64)((int_64)$9 * (int_64)4000000)), [832])
	
.LABEL $label$7
	*(($12 + [160])) = [0]
	*($12 + [144]) = (int_64)-1
	$8 = (int_64)0
	*($12 + [152]) = (int_64)0
	$10 = *($0)
	*($12 + [128]) = $10
	*($12 + [136]) = $10
	$6 = [0]
	$2 = CALL db_find_i64($10, $10, (int_64)3607805513988833280, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$14 }
	$6 = CALL $16(($12 + [128]), $2)
	CALL eosio_assert(((int_32)*($6 + [44]) == (int_32)($12 + [128])), [208])
	
.LABEL $label$14
	$2 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($2, [1680])
	CALL eosio_assert(((uint_32)*($6 + [28]) >= (uint_32)*($12 + [175])), [1696])
	$10 = *($0)
	*($12 + [24]) = ($12 + [175])
	CALL eosio_assert($2, [1728])
	CALL $38(($12 + [128]), $6, $10, ($12 + [24]))
	$11 = *($0)
	$7 = (int_64)59
	$6 = [560]
	$9 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$20 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$2 = ($2 + [165])
	goto $label$18 
	
.LABEL $label$20
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$16
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$15 }
	*($12 + [80]) = $9
	*($12 + [72]) = $11
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [944]
	$9 = (int_64)0
	
.LOOP $label$21:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$22 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$2 = ($2 + [165])
	goto $label$23 
	
.LABEL $label$24
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$22
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$21 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [128]
	$11 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$30 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$2 = ($2 + [165])
	goto $label$28 
	
.LABEL $label$30
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$26
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$25 }
	*(($12 + [16])) = [0]
	*($12 + [8]) = (int_64)0
	$6 = CALL strlen([1776])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$34 }
	*($12 + [8]) = ($6 << [1])
	$2 = (($12 + [8]) | [1])
	if ( $6 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$5 = (($6 + [16]) & [-16])
	$2 = CALL $70($5)
	*($12 + [8]) = ($5 | [1])
	*($12 + [16]) = $2
	*($12 + [12]) = $6
	
.LABEL $label$33
	CALL memcpy($2, [1776], $6)
	
.LABEL $label$32
	*(($2 + $6)) = [0]
	*(($12 + [52])) = *(($3 + [12]))
	*(($12 + [48])) = *(($3 + [8]))
	*(($12 + [44])) = *(($3 + [4]))
	*($12 + [32]) = $1
	*($12 + [24]) = *($0)
	*($12 + [40]) = *($3)
	$6 = (($12 + [8]) + [8])
	*(($12 + [64])) = *($6)
	*($12 + [56]) = *($12 + [8])
	*($12 + [8]) = [0]
	*($12 + [12]) = [0]
	*($6) = [0]
	$6 = CALL $19(($12 + [88]), ($12 + [72]), $9, $11, ($12 + [24]))
	CALL $20(($12 + [176]), $6)
	$2 = *($12 + [176])
	CALL send_inline($2, (*($12 + [180]) - $2))
	$2 = *($12 + [176])
	if ( ($2 == 0) ){ goto $label$35 }
	*($12 + [180]) = $2
	CALL $71($2)
	
.LABEL $label$35
	$2 = *($6 + [28])
	if ( ($2 == 0) ){ goto $label$36 }
	*(($6 + [32])) = $2
	CALL $71($2)
	
.LABEL $label$36
	$2 = *($6 + [16])
	if ( ($2 == 0) ){ goto $label$37 }
	*(($6 + [20])) = $2
	CALL $71($2)
	
.LABEL $label$37
	if ( ((*(($12 + [56])) & [1]) == 0) ){ goto $label$38 }
	CALL $71(*(($12 + [64])))
	
.LABEL $label$38
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$39 }
	CALL $71(*(($12 + [16])))
	
.LABEL $label$39
	$0 = *($12 + [152])
	if ( ($0 == 0) ){ goto $label$40 }
	$5 = ($12 + [156])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$42 }
	
.LOOP $label$43:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$44 }
	$3 = *($2 + [32])
	if ( ($3 == 0) ){ goto $label$45 }
	*(($2 + [36])) = $3
	CALL $71($3)
	
.LABEL $label$45
	CALL $71($2)
	
.LABEL $label$44
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$43 }
	$6 = *(($12 + [152]))
	goto $label$41 
	
.LABEL $label$42
	$6 = $0
	
.LABEL $label$41
	*($5) = $0
	CALL $71($6)
	
.LABEL $label$40
	*([0] + [4]) = ($12 + [192])
	return (unreachable)
	
.LABEL $label$31
	CALL $72(($12 + [8]))
}

int_32 .FUNC $6 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	*($0) = $1
	*($6 + [88]) = $1
	*(($6 + [80])) = [0]
	*($6 + [56]) = $1
	*($6 + [48]) = $1
	*($6 + [64]) = (int_64)-1
	*($6 + [72]) = (int_64)0
	$5 = CALL db_find_i64($1, $1, (int_64)-4157508551318700032, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $45(($6 + [48]), $5) + [16]) == (int_32)($6 + [48])), [208])
	$2 = *($6 + [72])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($6 + [40]) = ($6 + [88])
	CALL $63($6, ($6 + [48]), $1, ($6 + [40]))
	CALL _ZN7eosgame12eosluckyswap9add_roundEym($6, $0, (int_64)1, [1543323600])
	$2 = *($6 + [72])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($6 + [76])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $71($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	$5 = *(($6 + [72]))
	goto $label$4 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	*($4) = $2
	CALL $71($5)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [96])
	return $0
}

void .FUNC _ZN7eosgame12eosluckyswap8transferEyyN5eosio5assetENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$20 = (*([0] + [4]) - [384])
	*([0] + [4]) = $20
	$17 = *($0)
	if ( ((int_64)$17 == (int_64)$1) ){ goto $label$4 }
	if ( ((int_64)$17 != (int_64)$2) ){ goto $label$4 }
	$12 = *($3 + [8])
	$6 = ((int_64)$12 == (int_64)1397703940)
	if ( ($6 == 0) ){ goto $label$4 }
	CALL eosio_assert([0], [1408])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000)) > (uint_32)[1543323599]), [1424])
	CALL eosio_assert([1], [432])
	$2 = (int_64)5459781
	$14 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$11 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$11 = [0]
	
.LABEL $label$5
	CALL eosio_assert($11, [496])
	CALL eosio_assert($6, [768])
	$17 = *($3)
	CALL eosio_assert(((int_64)$17 > (int_64)9999), [2128])
	CALL eosio_assert([1], [432])
	$2 = (int_64)5459781
	$14 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$11 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$11 = [0]
	
.LABEL $label$10
	CALL eosio_assert($11, [496])
	CALL eosio_assert(((int_64)$12 == (int_64)1397703940), [768])
	CALL eosio_assert(((int_64)$17 < (int_64)50000001), [2160])
	CALL eosio_assert((int_64)(((int_64)$17 % (int_64)10000) == 0), [2192])
	$6 = [0]
	*((($20 + [328]) + [32])) = [0]
	*($20 + [344]) = (int_64)-1
	*($20 + [352]) = (int_64)0
	$2 = *($0)
	*($20 + [328]) = $2
	*($20 + [336]) = $2
	$14 = [0]
	$11 = CALL db_find_i64($2, $2, (int_64)-4157508551318700032, $2)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$15 }
	$14 = CALL $45(($20 + [328]), $11)
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)($20 + [328])), [208])
	
.LABEL $label$15
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [1424])
	$5 = *($14 + [8])
	*((($20 + [288]) + [32])) = [0]
	*($20 + [304]) = (int_64)-1
	*($20 + [312]) = (int_64)0
	$2 = *($0)
	*($20 + [288]) = $2
	*($20 + [296]) = $2
	$14 = CALL db_find_i64($2, $2, (int_64)-4812882490098188288, $5)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$16 }
	$6 = CALL $46(($20 + [288]), $14)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)($20 + [288])), [208])
	
.LABEL $label$16
	$2 = (int_64)0
	$15 = (int_64)$17 >> (int_64)63
	CALL __multi3(($20 + [80]), $17, $15), (int_64)20, (int_64)0)
	CALL __multi3(($20 + [64]), $17, $15, (int_64)5, (int_64)0)
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [2224])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000)) >= (uint_32)*($6 + [32])), [1424])
	$15 = *((($20 + [80]) + [8]))
	$16 = *($20 + [80])
	CALL eosio_assert(( (uint_64)($16 <= (int_64)4611686018427387904) ? ((int_64)$15 < (int_64)0) : (int_64)($15 == 0) ), [1616])
	CALL eosio_assert(( ((uint_64)$16 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$15 > (int_64)-1) : ((int_64)$15 == (int_64)-1) ), [1648])
	CALL eosio_assert([1], [2256])
	CALL eosio_assert([1], [2272])
	$15 = *((($20 + [64]) + [8]))
	$18 = *($20 + [64])
	CALL eosio_assert(( (uint_64)($18 <= (int_64)4611686018427387904) ? ((int_64)$15 < (int_64)0) : (int_64)($15 == 0) ), [1616])
	CALL eosio_assert(( ((uint_64)$18 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$15 > (int_64)-1) : ((int_64)$15 == (int_64)-1) ), [1648])
	CALL eosio_assert([1], [2256])
	CALL eosio_assert([1], [2272])
	CALL eosio_assert([1], [2304])
	$8 = ((int_64)$16 / (int_64)100)
	$17 = (int_64)
	CALL eosio_assert(((int_64)$17($17 - $8)) > (int_64)-4611686018427387904), [2352])
	CALL eosio_assert(((int_64)$17 < (int_64)4611686018427387904), [2384])
	CALL eosio_assert([1], [2304])
	$9 = ((int_64)$18 / (int_64)100)
	$10 = (int_64)
	CALL eosio_assert(((int_64)$10($17 - $9)) > (int_64)-4611686018427387904), [2352])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [2384])
	$18 = *($0)
	$15 = (int_64)59
	$14 = [560]
	$16 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$22 }
	$11 = *($14)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$11 = ($11 + [165])
	goto $label$20 
	
.LABEL $label$22
	$17 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$18
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$17 }
	*($20 + [240]) = $16
	*($20 + [232]) = $18
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [112]
	$16 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$28 }
	$11 = *($14)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$11 = ($11 + [165])
	goto $label$26 
	
.LABEL $label$28
	$17 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$24
	$14 = ($14 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$17 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$23 }
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [128]
	$18 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$34 }
	$11 = *($14)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$11 = ($11 + [165])
	goto $label$32 
	
.LABEL $label$34
	$17 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$30
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$17 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$29 }
	$2 = (int_64)0
	$17 = (int_64)59
	$14 = [2416]
	$19 = (int_64)0
	
.LOOP $label$35:
	$15 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$36 }
	$11 = *($14)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$11 = ($11 + [165])
	goto $label$37 
	
.LABEL $label$38
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$36
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$19 = ((int_64)$15 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$35 }
	*(($20 + [168])) = [0]
	*($20 + [160]) = (int_64)0
	$14 = CALL strlen([2432])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$41 }
	*($20 + [160]) = ($14 << [1])
	$11 = (($20 + [160]) | [1])
	if ( $14 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$13 = (($14 + [16]) & [-16])
	$11 = CALL $70($13)
	*($20 + [160]) = ($13 | [1])
	*($20 + [168]) = $11
	*($20 + [164]) = $14
	
.LABEL $label$40
	CALL memcpy($11, [2432], $14)
	
.LABEL $label$39
	*(($11 + $14)) = [0]
	*(($20 + [200])) = $12
	*(($20 + [212])) = *($20 + [164])
	*($20 + [184]) = $19
	$14 = ($20 + [168])
	*(($20 + [216])) = *($14)
	*($20 + [176]) = *($0)
	*($20 + [192]) = $8
	*($20 + [208]) = *($20 + [160])
	*($20 + [160]) = [0]
	*($20 + [164]) = [0]
	*($14) = [0]
	$14 = CALL $19(($20 + [248]), ($20 + [232]), $16, $18, ($20 + [176]))
	CALL $20(($20 + [368]), $14)
	$11 = *($20 + [368])
	CALL send_inline($11, (*($20 + [372]) - $11))
	$11 = *($20 + [368])
	if ( ($11 == 0) ){ goto $label$42 }
	*($20 + [372]) = $11
	CALL $71($11)
	
.LABEL $label$42
	$11 = *($14 + [28])
	if ( ($11 == 0) ){ goto $label$43 }
	*(($14 + [32])) = $11
	CALL $71($11)
	
.LABEL $label$43
	$11 = *($14 + [16])
	if ( ($11 == 0) ){ goto $label$44 }
	*(($14 + [20])) = $11
	CALL $71($11)
	
.LABEL $label$44
	if ( ((*(($20 + [208])) & [1]) == 0) ){ goto $label$45 }
	CALL $71(*(($20 + [216])))
	
.LABEL $label$45
	if ( ((*($20 + [160]) & [1]) == 0) ){ goto $label$46 }
	CALL $71(*(($20 + [168])))
	
.LABEL $label$46
	$18 = *($0)
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [560]
	$16 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$52 }
	$11 = *($14)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$11 = ($11 + [165])
	goto $label$50 
	
.LABEL $label$52
	$17 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$48
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$47 }
	*($20 + [240]) = $16
	*($20 + [232]) = $18
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [112]
	$16 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$58 }
	$11 = *($14)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$11 = ($11 + [165])
	goto $label$56 
	
.LABEL $label$58
	$17 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$54
	$14 = ($14 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$17 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$53 }
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [128]
	$18 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$64 }
	$11 = *($14)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$11 = ($11 + [165])
	goto $label$62 
	
.LABEL $label$64
	$17 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$60
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$17 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$59 }
	$2 = (int_64)0
	$17 = (int_64)59
	$14 = [2624]
	$19 = (int_64)0
	
.LOOP $label$65:
	$15 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$66 }
	$11 = *($14)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$68 }
	$11 = ($11 + [165])
	goto $label$67 
	
.LABEL $label$68
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$67
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$66
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$19 = ((int_64)$15 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$65 }
	*(($20 + [168])) = [0]
	*($20 + [160]) = (int_64)0
	$14 = CALL strlen([2640])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$71 }
	*($20 + [160]) = ($14 << [1])
	$11 = (($20 + [160]) | [1])
	if ( $14 ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$71
	$13 = (($14 + [16]) & [-16])
	$11 = CALL $70($13)
	*($20 + [160]) = ($13 | [1])
	*($20 + [168]) = $11
	*($20 + [164]) = $14
	
.LABEL $label$70
	CALL memcpy($11, [2640], $14)
	
.LABEL $label$69
	*(($11 + $14)) = [0]
	*(($20 + [200])) = $12
	*(($20 + [212])) = *($20 + [164])
	*($20 + [184]) = $19
	$14 = ($20 + [168])
	*(($20 + [216])) = *($14)
	*($20 + [176]) = *($0)
	*($20 + [192]) = $9
	*($20 + [208]) = *($20 + [160])
	*($20 + [160]) = [0]
	*($20 + [164]) = [0]
	*($14) = [0]
	$14 = CALL $19(($20 + [248]), ($20 + [232]), $16, $18, ($20 + [176]))
	CALL $20(($20 + [368]), $14)
	$11 = *($20 + [368])
	CALL send_inline($11, (*($20 + [372]) - $11))
	$11 = *($20 + [368])
	if ( ($11 == 0) ){ goto $label$72 }
	*($20 + [372]) = $11
	CALL $71($11)
	
.LABEL $label$72
	$11 = *($14 + [28])
	if ( ($11 == 0) ){ goto $label$73 }
	*(($14 + [32])) = $11
	CALL $71($11)
	
.LABEL $label$73
	$11 = *($14 + [16])
	if ( ($11 == 0) ){ goto $label$74 }
	*(($14 + [20])) = $11
	CALL $71($11)
	
.LABEL $label$74
	if ( ((*(($20 + [208])) & [1]) == 0) ){ goto $label$75 }
	CALL $71(*(($20 + [216])))
	
.LABEL $label$75
	if ( ((*($20 + [160]) & [1]) == 0) ){ goto $label$76 }
	CALL $71(*(($20 + [168])))
	
.LABEL $label$76
	$18 = *($0)
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [560]
	$16 = (int_64)0
	
.LOOP $label$77:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$82 }
	$11 = *($14)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$81 }
	$11 = ($11 + [165])
	goto $label$80 
	
.LABEL $label$82
	$17 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$81
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$80
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$79
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$78
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$77 }
	*($20 + [240]) = $16
	*($20 + [232]) = $18
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [112]
	$16 = (int_64)0
	
.LOOP $label$83:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$88 }
	$11 = *($14)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$87 }
	$11 = ($11 + [165])
	goto $label$86 
	
.LABEL $label$88
	$17 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$87
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$86
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$85
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$84
	$14 = ($14 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$17 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$83 }
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [128]
	$18 = (int_64)0
	
.LOOP $label$89:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$94 }
	$11 = *($14)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$93 }
	$11 = ($11 + [165])
	goto $label$92 
	
.LABEL $label$94
	$17 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$93
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$92
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$91
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$90
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$17 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$89 }
	$2 = (int_64)0
	$17 = (int_64)59
	$14 = [2832]
	$19 = (int_64)0
	
.LOOP $label$95:
	$15 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$96 }
	$11 = *($14)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$98 }
	$11 = ($11 + [165])
	goto $label$97 
	
.LABEL $label$98
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$97
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$96
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$19 = ((int_64)$15 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$95 }
	*(($20 + [168])) = [0]
	*($20 + [160]) = (int_64)0
	$14 = CALL strlen([2848])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$101 }
	*($20 + [160]) = ($14 << [1])
	$11 = (($20 + [160]) | [1])
	if ( $14 ){ goto $label$100 }
	goto $label$99 
	
.LABEL $label$101
	$13 = (($14 + [16]) & [-16])
	$11 = CALL $70($13)
	*($20 + [160]) = ($13 | [1])
	*($20 + [168]) = $11
	*($20 + [164]) = $14
	
.LABEL $label$100
	CALL memcpy($11, [2848], $14)
	
.LABEL $label$99
	*(($11 + $14)) = [0]
	*(($20 + [200])) = $12
	*(($20 + [212])) = *($20 + [164])
	*($20 + [184]) = $19
	$14 = ($20 + [168])
	*(($20 + [216])) = *($14)
	*($20 + [176]) = *($0)
	*($20 + [192]) = $10
	*($20 + [208]) = *($20 + [160])
	*($20 + [160]) = [0]
	*($20 + [164]) = [0]
	*($14) = [0]
	$14 = CALL $19(($20 + [248]), ($20 + [232]), $16, $18, ($20 + [176]))
	CALL $20(($20 + [368]), $14)
	$11 = *($20 + [368])
	CALL send_inline($11, (*($20 + [372]) - $11))
	$11 = *($20 + [368])
	if ( ($11 == 0) ){ goto $label$102 }
	*($20 + [372]) = $11
	CALL $71($11)
	
.LABEL $label$102
	$11 = *($14 + [28])
	if ( ($11 == 0) ){ goto $label$103 }
	*(($14 + [32])) = $11
	CALL $71($11)
	
.LABEL $label$103
	$11 = *($14 + [16])
	if ( ($11 == 0) ){ goto $label$104 }
	*(($14 + [20])) = $11
	CALL $71($11)
	
.LABEL $label$104
	if ( ((*(($20 + [208])) & [1]) == 0) ){ goto $label$105 }
	CALL $71(*(($20 + [216])))
	
.LABEL $label$105
	if ( ((*($20 + [160]) & [1]) == 0) ){ goto $label$106 }
	CALL $71(*(($20 + [168])))
	
.LABEL $label$106
	CALL eosio_assert([1], [432])
	$2 = (int_64)5459781
	$14 = [0]
	
.LOOP $label$109:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$108 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$110 }
	
.LOOP $label$111:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$108 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$111 }
	
.LABEL $label$110
	$11 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$109 }
	goto $label$107 
	
.LABEL $label$108
	$11 = [0]
	
.LABEL $label$107
	CALL eosio_assert($11, [496])
	CALL eosio_assert(((int_64)*(($6 + [24])) == (int_64)1397703940), [2304])
	$2 = (int_64)
	CALL eosio_assert(((int_64)$2((int_64)50000000 - *($6 + [16]))) > (int_64)-4611686018427387904), [2352])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [2384])
	if ( ((uint_32)(*(($6 + [32])) + [36000]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$115 }
	$14 = ($3 + [8])
	$11 = ((int_64)*($14) == (int_64)1397703940)
	CALL eosio_assert($11, [768])
	$17 = *($3)
	if ( ((int_64)$17 >= (int_64)$2) ){ goto $label$114 }
	$2 = *($6)
	*(($11 = (($20 + [128]) + [8]))) = *($14)
	*($20 + [128]) = *($3)
	*(($20 + [8])) = *($11)
	*($20) = *($20 + [128])
	*($20 + [4]) = *($20 + [132])
	CALL _ZN7eosgame12eosluckyswap12add_quantityEyyN5eosio5assetE($0, $1, $2, $20)
	$0 = *($20 + [312])
	if ( $0 ){ goto $label$113 }
	goto $label$112 
	
.LABEL $label$115
	CALL eosio_assert([1], [432])
	$2 = (int_64)5459781
	$14 = [0]
	
.LOOP $label$118:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$117 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$119 }
	
.LOOP $label$120:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$117 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$120 }
	
.LABEL $label$119
	$11 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$118 }
	goto $label$116 
	
.LABEL $label$117
	$11 = [0]
	
.LABEL $label$116
	CALL eosio_assert($11, [496])
	CALL eosio_assert(((int_64)*(($6 + [24])) == (int_64)1397703940), [768])
	CALL eosio_assert(((int_64)*(($6 + [16])) == (int_64)50000000), [1408])
	$17 = *($0)
	CALL eosio_assert($7, [1728])
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)($20 + [288])), [1952])
	CALL eosio_assert(((int_64)*($20 + [288]) == (int_64)CALL $fimport$3()), [2000])
	$14 = ($6 + [32])
	*($6 + [36]) = (*($14) + [36000])
	$2 = *($6)
	CALL eosio_assert([1], [2064])
	*($20 + [256]) = (($20 + [176]) + [33])
	*($20 + [252]) = ($20 + [176])
	*($20 + [248]) = ($20 + [176])
	CALL $47(($20 + [248]), $6)
	CALL db_update_i64(*($6 + [44]), $17, ($20 + [176]), [33])
	$11 = (($20 + [288]) + [16])
	if ( (uint_64)($2 <= *($11)) ){ goto $label$121 }
	*($11) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$121
	$2 = ((int_64)$5 + (int_64)1)
	CALL _ZN7eosgame12eosluckyswap9add_roundEym(($20 + [176]), $0, $2, (*($14) + [36000]))
	*(($14 = (($20 + [144]) + [8]))) = *(($3 + [8]))
	$17 = *($3)
	*((($20 + [48]) + [12])) = *((($20 + [144]) + [12]))
	*((($20 + [48]) + [8])) = *($14)
	*($20 + [144]) = $17
	*($20 + [52]) = *($20 + [148])
	*($20 + [48]) = *($20 + [144])
	CALL _ZN7eosgame12eosluckyswap12add_quantityEyyN5eosio5assetE($0, $1, $2, ($20 + [48]))
	$0 = *($20 + [312])
	if ( $0 ){ goto $label$113 }
	goto $label$112 
	
.LABEL $label$114
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$122 }
	$15 = *($6)
	*($20 + [120]) = (int_64)1397703940
	*(($20 + [40])) = (int_64)1397703940
	*($20 + [112]) = $2
	*($20 + [32]) = $2
	CALL _ZN7eosgame12eosluckyswap12add_quantityEyyN5eosio5assetE($0, $1, $15, ($20 + [32]))
	
.LABEL $label$122
	CALL _ZN7eosgame12eosluckyswap9add_roundEym(($20 + [176]), $0, ((int_64)*($6) + (int_64)1), (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000)))
	CALL eosio_assert($11, [2304])
	$17 = (int_64)
	CALL eosio_assert(((int_64)$17($17 - $2)) > (int_64)-4611686018427387904), [2352])
	CALL eosio_assert(((int_64)$17 < (int_64)4611686018427387904), [2384])
	if ( ((int_64)$17 < (int_64)1) ){ goto $label$123 }
	$17 = *($6)
	$15 = *(($3 + [8]))
	*(($14 = (($20 + [96]) + [8]))) = $15
	*($20 + [96]) = *($3)
	CALL eosio_assert(((int_64)$15 == (int_64)1397703940), [2304])
	$2 = (int_64)
	*($20 + [96]) = $2(*($20 + [96]) - $2))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [2352])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [2384])
	*((($20 + [16]) + [8])) = *($14)
	*($20 + [16]) = *($20 + [96])
	CALL _ZN7eosgame12eosluckyswap12add_quantityEyyN5eosio5assetE($0, $1, ((int_64)$17 + (int_64)1), ($20 + [16]))
	
.LABEL $label$123
	$0 = *($20 + [312])
	if ( ($0 == 0) ){ goto $label$112 }
	
.LABEL $label$113
	$6 = ($20 + [316])
	$14 = *($6)
	if ( ((int_32)$14 == (int_32)$0) ){ goto $label$125 }
	
.LOOP $label$126:
	$14 = ($14 + [-24])
	$11 = *($14)
	*($14) = [0]
	if ( ($11 == 0) ){ goto $label$127 }
	CALL $71($11)
	
.LABEL $label$127
	if ( ((int_32)$0 != (int_32)$14) ){ goto $label$126 }
	$14 = *(($20 + [312]))
	goto $label$124 
	
.LABEL $label$125
	$14 = $0
	
.LABEL $label$124
	*($6) = $0
	CALL $71($14)
	
.LABEL $label$112
	$0 = *($20 + [352])
	if ( ($0 == 0) ){ goto $label$4 }
	$6 = ($20 + [356])
	$14 = *($6)
	if ( ((int_32)$14 == (int_32)$0) ){ goto $label$129 }
	
.LOOP $label$130:
	$14 = ($14 + [-24])
	$11 = *($14)
	*($14) = [0]
	if ( ($11 == 0) ){ goto $label$131 }
	CALL $71($11)
	
.LABEL $label$131
	if ( ((int_32)$0 != (int_32)$14) ){ goto $label$130 }
	$14 = *(($20 + [352]))
	goto $label$128 
	
.LABEL $label$129
	$14 = $0
	
.LABEL $label$128
	*($6) = $0
	CALL $71($14)
	
.LABEL $label$4
	*([0] + [4]) = ($20 + [384])
	return (unreachable)
	
.LABEL $label$3
	CALL $72(($20 + [160]))
	
.LABEL $label$2
	CALL $72(($20 + [160]))
	
.LABEL $label$1
	CALL $72(($20 + [160]))
	(unreachable)
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$22 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)3) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [160]
	$7 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [176]
	$7 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$46 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$3 = ($3 + [165])
	goto $label$44 
	
.LABEL $label$46
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$42
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$41 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [192]
	$7 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$52 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$3 = ($3 + [165])
	goto $label$50 
	
.LABEL $label$52
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$48
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$47 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	$4 = CALL $6(($9 + [88]), $0)
	if ( ((int_64)$2 <= (int_64)-5001342339331915777) ){ goto $label$56 }
	if ( ((int_64)$2 == (int_64)-5001342339331915776) ){ goto $label$55 }
	if ( ((int_64)$2 == (int_64)3849204592878288896) ){ goto $label$54 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$20 }
	*($9 + [84]) = [0]
	*($9 + [80]) = [1]
	*($9 + [8 align=4]) = *($9 + [80])
	CALL $8($4, ($9 + [8]))
	goto $label$20 
	
.LABEL $label$56
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$53 }
	if ( ((int_64)$2 != (int_64)-6215887050080518144) ){ goto $label$20 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [2]
	*($9 + [32 align=4]) = *($9 + [56])
	CALL $14($4, ($9 + [32]))
	goto $label$20 
	
.LABEL $label$55
	*($9 + [52]) = [0]
	*($9 + [48]) = [3]
	*($9 + [40 align=4]) = *($9 + [48])
	CALL $12($4, ($9 + [40]))
	goto $label$20 
	
.LABEL $label$54
	*($9 + [68]) = [0]
	*($9 + [64]) = [4]
	*($9 + [24 align=4]) = *($9 + [64])
	CALL $12($4, ($9 + [24]))
	goto $label$20 
	
.LABEL $label$53
	*($9 + [76]) = [0]
	*($9 + [72]) = [5]
	*($9 + [16 align=4]) = *($9 + [72])
	CALL $10($4, ($9 + [16]))
	
.LABEL $label$20
	*([0] + [4]) = ($9 + [96])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [432])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [496])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [736])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [736])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [736])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC _ZN7eosgame12eosluckyswap6refundEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [224])
	*([0] + [4]) = $14
	CALL require_auth(*($0))
	$7 = [0]
	*((($14 + [168]) + [32])) = [0]
	*($14 + [184]) = (int_64)-1
	*($14 + [192]) = (int_64)0
	$10 = *($0)
	*($14 + [168]) = $10
	*($14 + [176]) = $10
	$6 = [0]
	$5 = CALL db_find_i64($10, $10, (int_64)3607805513988833280, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $16(($14 + [168]), $5)
	CALL eosio_assert(((int_32)*($6 + [44]) == (int_32)($14 + [168])), [208])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [272])
	$3 = *(($6 + [16]))
	$2 = *($6 + [8])
	CALL eosio_assert(((int_64)$2 > (int_64)0), [320])
	*((($14 + [128]) + [32])) = [0]
	*($14 + [144]) = (int_64)-1
	*($14 + [152]) = (int_64)0
	$10 = *($0)
	*($14 + [128]) = $10
	*($14 + [136]) = $10
	$6 = CALL db_find_i64($10, $10, (int_64)-5001342326447013888, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $17(($14 + [128]), $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($14 + [128])), [208])
	
.LABEL $label$2
	CALL eosio_assert(($7 == 0), [352])
	$12 = *($0)
	CALL eosio_assert(((int_64)*($14 + [128]) == (int_64)CALL $fimport$3()), [368])
	*(($6 = CALL $70([40])) + [16]) = (int_64)1398362884
	*($6 + [8]) = (int_64)0
	CALL eosio_assert([1], [432])
	$5 = ($6 + [16])
	$4 = ($6 + [8])
	$10 = (int_64)5462355
	$0 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [496])
	*($6 + [24]) = ($14 + [128])
	*(($6 + [8])) = $2
	*($6) = $1
	*(($6 + [16])) = $3
	CALL eosio_assert([1], [528])
	CALL memcpy(($14 + [16]), $6, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($14 + [16]) | [8]), $4, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($14 + [16]) + [16]), $5, [8])
	$10 = *($6)
	$7 = CALL db_store_i64(*((($14 + [128]) + [8])), (int_64)-5001342326447013888, $12, $10, ($14 + [16]), [24])
	*($6 + [28]) = $7
	$0 = (($14 + [128]) + [16])
	if ( (uint_64)($10 <= *($0)) ){ goto $label$8 }
	*($0) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($14 + [88]) = $6
	$10 = *($6)
	*($14 + [16]) = $10
	*($14 + [72]) = $7
	$5 = ($14 + [156])
	$0 = *($5)
	if ( ((uint_32)$0 >= (uint_32)*(($14 + [160]))) ){ goto $label$10 }
	*($0 + [8]) = $10
	*($0 + [16]) = $7
	*($14 + [88]) = [0]
	*($0) = $6
	*($5) = ($0 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $18(($14 + [152]), ($14 + [88]), ($14 + [16]), ($14 + [72]))
	
.LABEL $label$9
	$0 = *($14 + [88])
	*($14 + [88]) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $71($0)
	
.LABEL $label$11
	$10 = (int_64)0
	$12 = (int_64)59
	$0 = [544]
	$8 = (int_64)0
	
.LOOP $label$12:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$13 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$6 = ($6 + [165])
	goto $label$14 
	
.LABEL $label$15
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$13
	$0 = ($0 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$12 }
	$10 = (int_64)0
	$9 = (int_64)59
	$0 = [560]
	$11 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$21 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$6 = ($6 + [165])
	goto $label$19 
	
.LABEL $label$21
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$17
	$0 = ($0 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$16 }
	*($14 + [80]) = $11
	*($14 + [72]) = $8
	$10 = (int_64)0
	$9 = (int_64)59
	$0 = [112]
	$8 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$27 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$6 = ($6 + [165])
	goto $label$25 
	
.LABEL $label$27
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$23
	$0 = ($0 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$8 = ((int_64)$12 | (int_64)$8)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$22 }
	$10 = (int_64)0
	$9 = (int_64)59
	$0 = [128]
	$11 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$33 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$6 = ($6 + [165])
	goto $label$31 
	
.LABEL $label$33
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$29
	$0 = ($0 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$28 }
	$10 = (int_64)0
	$12 = (int_64)59
	$0 = [544]
	$13 = (int_64)0
	
.LOOP $label$34:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$35 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$6 = ($6 + [165])
	goto $label$36 
	
.LABEL $label$37
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$35
	$0 = ($0 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$9 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$34 }
	*(($14 + [8])) = [0]
	*($14) = (int_64)0
	$0 = CALL strlen([576])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$38 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$41 }
	*($14) = ($0 << [1])
	$6 = ($14 | [1])
	if ( $0 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$7 = (($0 + [16]) & [-16])
	$6 = CALL $70($7)
	*($14) = ($7 | [1])
	*($14 + [8]) = $6
	*($14 + [4]) = $0
	
.LABEL $label$40
	CALL memcpy($6, [576], $0)
	
.LABEL $label$39
	*(($6 + $0)) = [0]
	*(($14 + [40])) = $3
	*(($14 + [52])) = *($14 + [4])
	*($14 + [24]) = $1
	$0 = ($14 + [8])
	*(($14 + [56])) = *($0)
	*($14 + [16]) = $13
	*($14 + [32]) = $2
	*($14 + [48]) = *($14)
	*($14) = [0]
	*($14 + [4]) = [0]
	*($0) = [0]
	$0 = CALL $19(($14 + [88]), ($14 + [72]), $8, $11, ($14 + [16]))
	CALL $20(($14 + [208]), $0)
	$6 = *($14 + [208])
	CALL send_inline($6, (*($14 + [212]) - $6))
	$6 = *($14 + [208])
	if ( ($6 == 0) ){ goto $label$42 }
	*($14 + [212]) = $6
	CALL $71($6)
	
.LABEL $label$42
	$6 = *($0 + [28])
	if ( ($6 == 0) ){ goto $label$43 }
	*(($0 + [32])) = $6
	CALL $71($6)
	
.LABEL $label$43
	$6 = *($0 + [16])
	if ( ($6 == 0) ){ goto $label$44 }
	*(($0 + [20])) = $6
	CALL $71($6)
	
.LABEL $label$44
	if ( ((*(($14 + [48])) & [1]) == 0) ){ goto $label$45 }
	CALL $71(*(($14 + [56])))
	
.LABEL $label$45
	if ( ((*($14) & [1]) == 0) ){ goto $label$46 }
	CALL $71(*(($14 + [8])))
	
.LABEL $label$46
	$7 = *($14 + [152])
	if ( ($7 == 0) ){ goto $label$47 }
	$5 = ($14 + [156])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$49 }
	
.LOOP $label$50:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$51 }
	CALL $71($6)
	
.LABEL $label$51
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$50 }
	$0 = *(($14 + [152]))
	goto $label$48 
	
.LABEL $label$49
	$0 = $7
	
.LABEL $label$48
	*($5) = $7
	CALL $71($0)
	
.LABEL $label$47
	$5 = *($14 + [192])
	if ( ($5 == 0) ){ goto $label$52 }
	$4 = ($14 + [196])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$54 }
	
.LOOP $label$55:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$56 }
	$7 = *($6 + [32])
	if ( ($7 == 0) ){ goto $label$57 }
	*(($6 + [36])) = $7
	CALL $71($7)
	
.LABEL $label$57
	CALL $71($6)
	
.LABEL $label$56
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$55 }
	$0 = *(($14 + [192]))
	goto $label$53 
	
.LABEL $label$54
	$0 = $5
	
.LABEL $label$53
	*($4) = $5
	CALL $71($0)
	
.LABEL $label$52
	*([0] + [4]) = ($14 + [224])
	return (unreachable)
	
.LABEL $label$38
	CALL $72($14)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [704])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $70([56])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [432])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [496])
	*($4 + [40]) = [0]
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [44]) = $0
	CALL $27(($8 + [32]), $4)
	*($4 + [48]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [48])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $28($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($5 + [32])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($5 + [36])) = $6
	CALL $71($6)
	
.LABEL $label$15
	CALL $71($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [704])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $70([40])
	$6 = CALL $26($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $18(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $71($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*((($9 + [16]) + [24])) = (int_64)1398362884
	*($9 + [24]) = [0]
	*($9 + [16]) = (int_64)0
	*($9 + [32]) = (int_64)0
	CALL eosio_assert([1], [432])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [496])
	*($9 + [84]) = $5
	*($9 + [80]) = $5
	*($9 + [88]) = ($5 + $3)
	*($9 + [48]) = ($9 + [80])
	*($9 + [64]) = ($9 + [16])
	CALL $37(($9 + [64]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($9 + [60])) = *(($9 + [44]))
	$7 = *((($9 + [16]) + [8]))
	*(($1 = (($9 + [48]) + [8]))) = *(($9 + [40]))
	$6 = *($9 + [16])
	*($9 + [48]) = *($9 + [32])
	*($9 + [52]) = *(($9 + [36]))
	*((($9 + [64]) + [8])) = *($1)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*(($9 + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9) = $4
	CALL void $1((int_32 $6), (int_64 ($7 & [255])), (int_32 $9), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC _ZN7eosgame12eosluckyswap9applyfreeEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	CALL require_auth($1)
	CALL eosio_assert([0], [1408])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000)) > (uint_32)[1543323599]), [1424])
	*((($6 + [40]) + [32])) = [0]
	*($6 + [56]) = (int_64)-1
	*($6 + [64]) = (int_64)0
	$3 = *($0)
	*($6 + [40]) = $3
	*($6 + [48]) = $3
	$2 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-6224935807258460160, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $32(($6 + [40]), $5)
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)($6 + [40])), [208])
	
.LABEL $label$1
	CALL eosio_assert(($2 == 0), [1440])
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$3 = *($0)
	*($6) = $3
	*($6 + [8]) = $3
	$0 = CALL db_find_i64($3, $3, (int_64)-3104555582505177088, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $31($6, $0) + [16]) == (int_32)$6), [208])
	$0 = [0]
	goto $label$2 
	
.LABEL $label$3
	$0 = [1]
	
.LABEL $label$2
	CALL eosio_assert($0, [1488])
	$0 = [0]
	$2 = [0]
	$5 = CALL db_lowerbound_i64(*($6 + [40]), *((($6 + [40]) + [8])), (int_64)-6224935807258460160, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $32(($6 + [40]), $5)
	$2 = [1]
	CALL eosio_assert([1], [1184])
	$5 = CALL db_next_i64(*($5 + [32]), ($6 + [96]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$2 = [1]
	
.LOOP $label$5:
	$5 = CALL $32(($6 + [40]), $5)
	CALL eosio_assert([1], [1184])
	$2 = ($2 + [1])
	$5 = CALL db_next_i64(*($5 + [32]), ($6 + [96]))
	if ( ((int_32)$5 >= (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = CALL db_lowerbound_i64(*($6), *(($6 + [8])), (int_64)-3104555582505177088, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $31($6, $5)
	$0 = [1]
	CALL eosio_assert([1], [1184])
	$5 = CALL db_next_i64(*($5 + [20]), ($6 + [96]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$0 = [1]
	
.LOOP $label$7:
	$5 = CALL $31($6, $5)
	CALL eosio_assert([1], [1184])
	$0 = ($0 + [1])
	$5 = CALL db_next_i64(*($5 + [20]), ($6 + [96]))
	if ( ((int_32)$5 >= (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert((($0 + $2) <= [20000]), [1536])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$3()), [368])
	*(($0 = CALL $70([32])) + [16]) = $6
	*($0) = $1
	*($0 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert([1], [528])
	CALL memcpy(($6 + [96]), $0, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($6 + [96]) | [8]), ($0 + [8]), [4])
	$3 = *($0)
	$5 = CALL db_store_i64(*(($6 + [8])), (int_64)-3104555582505177088, $1, $3, ($6 + [96]), [12])
	*($0 + [20]) = $5
	$2 = ($6 + [16])
	if ( (uint_64)($3 <= *($2)) ){ goto $label$8 }
	*($2) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($6 + [88]) = $0
	$1 = *($0)
	*($6 + [96]) = $1
	*($6 + [84]) = $5
	$4 = ($6 + [28])
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)*(($6 + [32]))) ){ goto $label$10 }
	*($2 + [8]) = $1
	*($2 + [16]) = $5
	*($6 + [88]) = [0]
	*($2) = $0
	*($4) = ($2 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $36(($6 + [24]), ($6 + [88]), ($6 + [96]), ($6 + [84]))
	
.LABEL $label$9
	$0 = *($6 + [88])
	*($6 + [88]) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $71($0)
	
.LABEL $label$11
	$5 = *($6 + [24])
	if ( ($5 == 0) ){ goto $label$12 }
	$4 = ($6 + [28])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$16 }
	CALL $71($2)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$15 }
	$0 = *(($6 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$0 = $5
	
.LABEL $label$13
	*($4) = $5
	CALL $71($0)
	
.LABEL $label$12
	$5 = *($6 + [64])
	if ( ($5 == 0) ){ goto $label$17 }
	$4 = ($6 + [68])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$19 }
	
.LOOP $label$20:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$21 }
	CALL $71($2)
	
.LABEL $label$21
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$20 }
	$0 = *(($6 + [64]))
	goto $label$18 
	
.LABEL $label$19
	$0 = $5
	
.LABEL $label$18
	*($4) = $5
	CALL $71($0)
	
.LABEL $label$17
	*([0] + [4]) = ($6 + [112])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [736])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN7eosgame12eosluckyswap7payfreeEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [224])
	*([0] + [4]) = $15
	CALL require_auth(*($0))
	$13 = *($2 + [8])
	$4 = ((int_64)$13 == (int_64)1145393668)
	CALL eosio_assert($4, [1216])
	CALL eosio_assert([1], [432])
	$9 = [0]
	$11 = (int_64)4474194
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [496])
	CALL eosio_assert($4, [768])
	$10 = *($2)
	if ( ((int_64)$10 <= (int_64)249999) ){ goto $label$9 }
	CALL eosio_assert([1], [432])
	$11 = (int_64)4474194
	$9 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$9
	CALL eosio_assert([0], [832])
	goto $label$6 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [496])
	CALL eosio_assert(((int_64)$13 == (int_64)1145393668), [768])
	CALL eosio_assert(((int_64)$10 < (int_64)750001), [832])
	
.LABEL $label$6
	$9 = [0]
	*((($15 + [168]) + [32])) = [0]
	*($15 + [184]) = (int_64)-1
	*($15 + [192]) = (int_64)0
	$11 = *($0)
	*($15 + [168]) = $11
	*($15 + [176]) = $11
	$7 = [0]
	$6 = CALL db_find_i64($11, $11, (int_64)-3104555582505177088, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$7 = CALL $31(($15 + [168]), $6)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($15 + [168])), [208])
	
.LABEL $label$13
	$3 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($3, [864])
	*((($15 + [128]) + [32])) = [0]
	*($15 + [144]) = (int_64)-1
	*($15 + [152]) = (int_64)0
	$11 = *($0)
	*($15 + [128]) = $11
	*($15 + [136]) = $11
	$6 = CALL db_find_i64($11, $11, (int_64)-6224935807258460160, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	$9 = CALL $32(($15 + [128]), $6)
	CALL eosio_assert(((int_32)*($9 + [28]) == (int_32)($15 + [128])), [208])
	
.LABEL $label$14
	CALL eosio_assert(($9 == 0), [896])
	$13 = *($0)
	CALL eosio_assert(((int_64)*($15 + [128]) == (int_64)CALL $fimport$3()), [368])
	*(($6 = CALL $70([40])) + [16]) = (int_64)1398362884
	*($6 + [8]) = (int_64)0
	CALL eosio_assert([1], [432])
	$5 = ($6 + [16])
	$4 = ($6 + [8])
	$11 = (int_64)5462355
	$9 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$8 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$8 = [0]
	
.LABEL $label$15
	CALL eosio_assert($8, [496])
	*($6 + [28]) = ($15 + [128])
	*($6) = $1
	*(($4 + [12])) = *(($2 + [12]))
	*(($4 + [8])) = *(($2 + [8]))
	*(($4 + [4])) = *(($2 + [4]))
	*($4) = *($2)
	*($6 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert([1], [528])
	CALL memcpy(($15 + [16]), $6, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($15 + [16]) | [8]), $4, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($15 + [16]) + [16]), $5, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($15 + [16]) + [24]), ($6 + [24]), [4])
	$11 = *($6)
	$4 = CALL db_store_i64(*((($15 + [128]) + [8])), (int_64)-6224935807258460160, $13, $11, ($15 + [16]), [28])
	*($6 + [32]) = $4
	$9 = (($15 + [128]) + [16])
	if ( (uint_64)($11 <= *($9)) ){ goto $label$20 }
	*($9) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	*($15 + [88]) = $6
	$11 = *($6)
	*($15 + [16]) = $11
	*($15 + [72]) = $4
	$9 = *((($15 + [128]) + [28]))
	if ( ((uint_32)$9 >= (uint_32)*(($15 + [160]))) ){ goto $label$22 }
	*($9 + [8]) = $11
	*($9 + [16]) = $4
	*($15 + [88]) = [0]
	*($9) = $6
	*(($15 + [156])) = ($9 + [24])
	goto $label$21 
	
.LABEL $label$22
	CALL $33(($15 + [152]), ($15 + [88]), ($15 + [16]), ($15 + [72]))
	
.LABEL $label$21
	$9 = *($15 + [88])
	*($15 + [88]) = [0]
	if ( ($9 == 0) ){ goto $label$23 }
	CALL $71($9)
	
.LABEL $label$23
	$14 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [560]
	$12 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$29 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$6 = ($6 + [165])
	goto $label$27 
	
.LABEL $label$29
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$25
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$24 }
	*($15 + [80]) = $12
	*($15 + [72]) = $14
	$11 = (int_64)0
	$13 = (int_64)59
	$9 = [944]
	$12 = (int_64)0
	
.LOOP $label$30:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$31 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$6 = ($6 + [165])
	goto $label$32 
	
.LABEL $label$33
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$31
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$30 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [128]
	$14 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$39 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$6 = ($6 + [165])
	goto $label$37 
	
.LABEL $label$39
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$35
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$34 }
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$9 = CALL strlen([960])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$40 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$43 }
	*($15) = ($9 << [1])
	$6 = ($15 | [1])
	if ( $9 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	$4 = (($9 + [16]) & [-16])
	$6 = CALL $70($4)
	*($15) = ($4 | [1])
	*($15 + [8]) = $6
	*($15 + [4]) = $9
	
.LABEL $label$42
	CALL memcpy($6, [960], $9)
	
.LABEL $label$41
	*(($6 + $9)) = [0]
	*(($15 + [44])) = *(($2 + [12]))
	*(($15 + [40])) = *(($2 + [8]))
	*(($15 + [36])) = *(($2 + [4]))
	*($15 + [24]) = $1
	*($15 + [16]) = *($0)
	*($15 + [32]) = *($2)
	$9 = ($15 + [8])
	*(($15 + [56])) = *($9)
	*($15 + [48]) = *($15)
	*($15) = [0]
	*($15 + [4]) = [0]
	*($9) = [0]
	$9 = CALL $19(($15 + [88]), ($15 + [72]), $12, $14, ($15 + [16]))
	CALL $20(($15 + [208]), $9)
	$6 = *($15 + [208])
	CALL send_inline($6, (*($15 + [212]) - $6))
	$6 = *($15 + [208])
	if ( ($6 == 0) ){ goto $label$44 }
	*($15 + [212]) = $6
	CALL $71($6)
	
.LABEL $label$44
	$6 = *($9 + [28])
	if ( ($6 == 0) ){ goto $label$45 }
	*(($9 + [32])) = $6
	CALL $71($6)
	
.LABEL $label$45
	$6 = *($9 + [16])
	if ( ($6 == 0) ){ goto $label$46 }
	*(($9 + [20])) = $6
	CALL $71($6)
	
.LABEL $label$46
	if ( ((*(($15 + [48])) & [1]) == 0) ){ goto $label$47 }
	CALL $71(*(($15 + [56])))
	
.LABEL $label$47
	if ( ((*($15) & [1]) == 0) ){ goto $label$48 }
	CALL $71(*(($15 + [8])))
	
.LABEL $label$48
	CALL eosio_assert($3, [1136])
	CALL eosio_assert($3, [1184])
	$9 = CALL db_next_i64(*($7 + [20]), ($15 + [16]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$49 }
	CALL $31(($15 + [168]), $9)
	
.LABEL $label$49
	CALL $34(($15 + [168]), $7)
	$2 = *($15 + [152])
	if ( ($2 == 0) ){ goto $label$50 }
	$0 = ($15 + [156])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$52 }
	
.LOOP $label$53:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$54 }
	CALL $71($6)
	
.LABEL $label$54
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$53 }
	$9 = *(($15 + [152]))
	goto $label$51 
	
.LABEL $label$52
	$9 = $2
	
.LABEL $label$51
	*($0) = $2
	CALL $71($9)
	
.LABEL $label$50
	$2 = *($15 + [192])
	if ( ($2 == 0) ){ goto $label$55 }
	$0 = ($15 + [196])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$57 }
	
.LOOP $label$58:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$59 }
	CALL $71($6)
	
.LABEL $label$59
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$58 }
	$9 = *(($15 + [192]))
	goto $label$56 
	
.LABEL $label$57
	$9 = $2
	
.LABEL $label$56
	*($0) = $2
	CALL $71($9)
	
.LABEL $label$55
	*([0] + [4]) = ($15 + [224])
	return (unreachable)
	
.LABEL $label$40
	CALL $72($15)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $70(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $74($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $71($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $71($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [736])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [736])
	CALL memcpy(($0 + [8]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [736])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [736])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1232])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1280])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1344])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $71($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $71($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [736])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [736])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [704])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $70([40])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [432])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [496])
	*($4 + [28]) = $0
	CALL $35(($8 + [32]), $4)
	*($4 + [32]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [32])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $33($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $71($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $70(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $74($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $71($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $71($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $70(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $74($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $71($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [704])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $70([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [736])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [736])
	CALL memcpy(($6 + [8]), ($7 + [8]), [4])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $36(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $71($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$2 = *($0)
	$5 = [0]
	$6 = [0]
	$4 = *(*($3))
	if ( ((uint_64)$4 > (uint_64)(int_64)79) ){ goto $label$1 }
	$6 = [1]
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$1 }
	$4 = (int_64)
	$6 = ( [1] ? (CASTING uint_32)(uint_64 $4((int_64)7 - $4))) : (int_64)(((int_64)$4 & (int_64)255) == 0) )
	
.LABEL $label$1
	*($1 + [8]) = $6
	CALL eosio_assert([1], [432])
	$4 = (int_64)5459781
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	
.LABEL $label$2
	CALL eosio_assert($6, [496])
	*(($1 + [24])) = (int_64)1397703940
	*($1 + [16]) = (int_64)0
	$5 = *(*($3 + [8]))
	*($1 + [36]) = [0]
	*($1 + [32]) = $5
	$6 = $8
	$5 = ($6 + [-48])
	*([0] + [4]) = $5
	*($7 + [4]) = $5
	*($7) = $5
	*($7 + [8]) = ($6 + [-15])
	CALL $47($7, $1)
	$4 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)-4812882490098188288, *(*($0 + [8])), $4, $5, [33])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $70(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $74($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $71($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $71($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [736])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [736])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [736])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [736])
	CALL memcpy(($1 + [36]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [368])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $70([32])
	CALL $64($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $62(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $71($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = *(*(*($2 + [4])))
	*($0 + [8]) = (int_64)1
	$1 = *($2)
	CALL eosio_assert([1], [528])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-4157508551318700032, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [2000])
	$4 = *($1)
	if ( (*($1 + [36]) == 0) ){ goto $label$2 }
	$9 = ($3 + [4])
	goto $label$1 
	
.LABEL $label$2
	$9 = *(*($3) + [4])
	$7 = *($9 + [16])
	$5 = *(($9 + [24]))
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$5), [3024])
	$6 = ((int_64)$7 + (int_64)*($8))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [3072])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [3104])
	CALL eosio_assert([1], [432])
	$9 = ($3 + [4])
	$7 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	
.LABEL $label$3
	CALL eosio_assert($8, [496])
	CALL eosio_assert(((int_64)$5 == (int_64)1397703940), [768])
	if ( ((int_64)$6 < (int_64)50000000) ){ goto $label$1 }
	*(($1 + [36])) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	
.LABEL $label$1
	$3 = *($9)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [24]))), [3024])
	$7 = ((int_64)*($1 + [16]) + (int_64)*($3))
	*($1 + [16]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [3072])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [3104])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [2064])
	$11 = $11
	$3 = ($11 + [-48])
	*([0] + [4]) = $3
	*($10 + [4]) = $3
	*($10) = $3
	*($10 + [8]) = ($11 + [-15])
	CALL $47($10, $1)
	CALL db_update_i64(*($1 + [44]), $2, $3, [33])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [2000])
	*($1 + [28]) = (*($1 + [28]) - *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [2064])
	$6 = *($1 + [32])
	$5 = *(($1 + [36]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$3 = [32]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-8]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$9 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$9 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$3
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $3)
	CALL $39($10, $1)
	CALL db_update_i64(*($1 + [48]), $2, $9, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($9)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [528])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [528])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [528])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [528])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $70(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $74($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $71($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $71($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [2000])
	$4 = *($1)
	$7 = *($3)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [16]))), [3024])
	$8 = ((int_64)*($1 + [8]) + (int_64)*($7))
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [3072])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [3104])
	*($1 + [24]) = (*($1 + [24]) + *(*($3 + [4])))
	*($1 + [28]) = (*($1 + [28]) + *(*($3 + [4])))
	$5 = *(($1 + [36]))
	$7 = *($1 + [32])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$6 = *(($3 + [8]))
	$8 = *($6)
	
.LOOP $label$4:
	if ( ((int_64)*($7) == (int_64)$8) ){ goto $label$3 }
	$7 = ($7 + [8])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$1 }
	$6 = *(($3 + [8]))
	
.LABEL $label$2
	if ( ((int_32)$5 == (int_32)*(($1 + [40]))) ){ goto $label$5 }
	*(($1 + [36])) = ($5 + [8])
	*($5) = *($6)
	goto $label$1 
	
.LABEL $label$5
	CALL $56(($1 + [32]), $6)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [2064])
	$7 = [32]
	$3 = *(($1 + [32]))
	$5 = *(($1 + [36]))
	$6 = ($5 - $3)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$6:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$7 }
	$7 = (($6 & [-8]) + $7)
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$9 }
	$5 = CALL malloc($7)
	goto $label$8 
	
.LABEL $label$9
	$5 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$8
	*($9 + [4]) = $5
	*($9) = $5
	*($9 + [8]) = ($5 + $7)
	CALL $39($9, $1)
	CALL db_update_i64(*($1 + [48]), $2, $5, $7)
	if ( ($7 <= [513]) ){ goto $label$10 }
	CALL free($5)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$2 = *($0)
	$7 = *($3 + [4])
	*($1 + [8]) = *($7)
	*(($1 + [16])) = *(($7 + [8]))
	*($1 + [24]) = *(*($3 + [8]))
	*($1 + [28]) = *(*($3 + [8]))
	$5 = *($1 + [32])
	$7 = $5
	$6 = *(($1 + [36]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	$4 = *(($3 + [12]))
	$8 = *($4)
	$7 = $5
	
.LOOP $label$4:
	if ( ((int_64)*($7) == (int_64)$8) ){ goto $label$3 }
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$1 }
	$4 = *(($3 + [12]))
	
.LABEL $label$2
	if ( ((int_32)$6 == (int_32)*(($1 + [40]))) ){ goto $label$5 }
	$7 = ($6 + [8])
	*(($1 + [36])) = $7
	*($6) = *($4)
	$6 = $7
	goto $label$1 
	
.LABEL $label$5
	CALL $56(($1 + [32]), $4)
	$5 = *(($1 + [32]))
	$6 = *(($1 + [36]))
	
.LABEL $label$1
	$3 = ($6 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($3 >> [3]))
	$7 = [32]
	
.LOOP $label$6:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$7 }
	$7 = (($3 & [-8]) + $7)
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$9 }
	$6 = CALL malloc($7)
	goto $label$8 
	
.LABEL $label$9
	$6 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$8
	*($9 + [4]) = $6
	*($9) = $6
	*($9 + [8]) = ($6 + $7)
	CALL $39($9, $1)
	$8 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($2 + [8]), (int_64)3607805513988833280, *(*($0 + [8])), $8, $6, $7)
	if ( ($7 <= [513]) ){ goto $label$10 }
	CALL free($6)
	
.LABEL $label$10
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $70(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $74($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $71($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [736])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [736])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [736])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}