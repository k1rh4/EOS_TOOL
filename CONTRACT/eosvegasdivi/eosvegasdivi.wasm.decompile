(data (i32.const 8192) "MEV\00")
(data (i32.const 8196) "invalid stake\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8296) "symbol precision mismatch\00")
(data (i32.const 8322) "must stake positive quantity\00")
(data (i32.const 8351) "eosvegascoin\00")
(data (i32.const 8364) "Object not found\00")
(data (i32.const 8381) "insufficient balance\00")
(data (i32.const 8402) "string is too long to be a valid symbol_code\00")
(data (i32.const 8447) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8500) "string is too long to be a valid name\00")
(data (i32.const 8538) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8605) "character is not in allowed character set for names\00")
(data (i32.const 8657) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8708) "error reading iterator\00")
(data (i32.const 8731) "read\00")
(data (i32.const 8736) "cannot create objects in table of another contract\00")
(data (i32.const 8787) "write\00")
(data (i32.const 8793) "cannot pass end iterator to modify\00")
(data (i32.const 8828) "object passed to modify is not in multi_index\00")
(data (i32.const 8874) "cannot modify objects in table of another contract\00")
(data (i32.const 8925) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8984) "attempt to add asset with different symbol\00")
(data (i32.const 9027) "addition underflow\00")
(data (i32.const 9046) "addition overflow\00")
(data (i32.const 9064) "get\00")
(data (i32.const 9068) "next_season_total\00")
(data (i32.const 9086) "must unstake positive quantity\00")
(data (i32.const 9117) "exceed stake balance\00")
(data (i32.const 9138) "substake before stake_index\00")
(data (i32.const 9166) "no stake record - stake\00")
(data (i32.const 9190) "no stake record - stakesummary\00")
(data (i32.const 9221) ".\00")
(data (i32.const 9223) " \00")
(data (i32.const 9225) "row.stake in stakes\00")
(data (i32.const 9245) "substake in stakes\00")
(data (i32.const 9264) "no stake record - stake final\00")
(data (i32.const 9294) "substake in stake_alltotal_index\00")
(data (i32.const 9327) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9386) "attempt to subtract asset with different symbol\00")
(data (i32.const 9434) "subtraction underflow\00")
(data (i32.const 9456) "subtraction overflow\00")
(data (i32.const 9477) "eosvegasdivi\00")
(data (i32.const 9490) "owner:\00")
(data (i32.const 9497) ",finalstake.amount:\00")
(data (i32.const 9517) ",totalfinalstake.amount:\00")
(data (i32.const 9542) ",dividendpool.amount:\00")
(data (i32.const 9564) "EOS\00")
(data (i32.const 9568) "dividend.amount:\00")
(data (i32.const 9585) "cannot increment end iterator\00")
(data (i32.const 9615) "no stake record - mergetofinal\00")
(data (i32.const 9646) "qualified_total\00")
(data (i32.const 9662) ", stake->stakefinal:\00")
(data (i32.const 9683) "no stake record - mergetofinalbatch\00")
(data (i32.const 9719) "owner in for:\00")
(data (i32.const 9733) "no dividend record - claim\00")
(data (i32.const 9760) "active\00")
(data (i32.const 9767) "eosio.token\00")
(data (i32.const 9779) "transfer\00")
(data (i32.const 9788) "Enjoy your Royal Online Vegas dividend!\00")
(data (i32.const 9828) "cannot pass end iterator to erase\00")
(data (i32.const 9862) "object passed to erase is not in multi_index\00")
(data (i32.const 9907) "cannot erase objects in table of another contract\00")
(data (i32.const 9957) "attempt to remove object that was not in multi_index\00")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "prints" (func $fimport$6 (param i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "printn" (func $fimport$8 (param i64)))
(import "env" "printi" (func $fimport$9 (param i64)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$11 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$12 (result i64)))
(import "env" "db_get_i64" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$15 (param i32 i64 i32 i32)))
(import "env" "prints_l" (func $fimport$16 (param i32 i32)))
(import "env" "db_remove_i64" (func $fimport$17 (param i32)))
(import "env" "abort" (func $fimport$18))
(import "env" "memset" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$27 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$28 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$31 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$32 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$35 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$37 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$38 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$39 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $117))
(export "_Znwj" (func $115))
(export "_Znaj" (func $116))
(export "_ZdaPv" (func $118))
(export "_ZnwjSt11align_val_t" (func $119))
(export "_ZnajSt11align_val_t" (func $120))
(export "_ZdlPvSt11align_val_t" (func $121))
(export "_ZdaPvSt11align_val_t" (func $122))
(table $0 12 12 anyfunc)
(elem (i32.const 1) $2 $4 $5 $7 $8 $10 $12 $13 $14 $15 $17)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18428))
(global $global$2 i32 (i32.const 18428))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(($5 = ($1 + [16]))) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	*($2 + [24]) = *($5)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($2 + [16]), ($2 + [24]), [8])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)5455799419163115520, *(*($0 + [8])), $6, $2, [24])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = ($1 + [8])
	CALL $126($6, [9068])
	$5 = *($5)
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$5 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8787])
	CALL memcpy($2, $1, [8])
	*($3 + [12]) = ($2 + [8])
	CALL $84(($3 + [8]), $6)
	CALL eosio_assert(((int_32)(*($3 + [16]) - *($3 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), $7, [8])
	$6 = (*($3 + [12]) + [8])
	*($3 + [12]) = $6
	*($3 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($3 + [16]) - $6) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), ($3 + [24]), [8])
	*($3 + [12]) = (*($3 + [12]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157660942777958400, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [32])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = ($1 + [8])
	CALL $126($6, [9068])
	$5 = *($5)
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$5 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8787])
	CALL memcpy($2, $1, [8])
	*($3 + [12]) = ($2 + [8])
	CALL $84(($3 + [8]), $6)
	CALL eosio_assert(((int_32)(*($3 + [16]) - *($3 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), $7, [8])
	$6 = (*($3 + [12]) + [8])
	*($3 + [12]) = $6
	*($3 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($3 + [16]) - $6) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), ($3 + [24]), [8])
	*($3 + [12]) = (*($3 + [12]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157660942777958400, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [32])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = ($1 + [8])
	CALL $126($6, [9068])
	$5 = *($5)
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$5 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8787])
	CALL memcpy($2, $1, [8])
	*($3 + [12]) = ($2 + [8])
	CALL $84(($3 + [8]), $6)
	CALL eosio_assert(((int_32)(*($3 + [16]) - *($3 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), $7, [8])
	$6 = (*($3 + [12]) + [8])
	*($3 + [12]) = $6
	*($3 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($3 + [16]) - $6) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), ($3 + [24]), [8])
	*($3 + [12]) = (*($3 + [12]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157660942777958400, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [32])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = $1
	CALL $96(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $79(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = $1
	CALL $94(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $79(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$6 = *($1)
	$7 = *($3)
	$8 = *($7)
	$9 = *($7 + [8])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9386])
	$8 = (int_64)
	CALL eosio_assert(((int_64)$8($8 - *($3))) > (int_64)-4611686018427387904), [9434])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9456])
	$10 = *($1 + [24])
	$3 = ($1 + [32])
	$11 = *($3)
	CALL eosio_assert(((int_64)$9 == (int_64)$11), [9386])
	$8 = (int_64)
	CALL eosio_assert(((int_64)$8($10 - $8)) > (int_64)-4611686018427387904), [9434])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9456])
	*($3) = $11
	*($1 + [24]) = $8
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8925])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $133($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8787])
	CALL memcpy($4, $1, [8])
	*($5 + [12]) = ($4 + [8])
	CALL $84(($5 + [8]), $7)
	CALL eosio_assert(((int_32)(*($5 + [16]) - *($5 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($1 + [24]), [8])
	$7 = (*($5 + [12]) + [8])
	*($5 + [12]) = $7
	*($5 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($5 + [16]) - $7) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($5 + [24]), [8])
	*($5 + [12]) = (*($5 + [12]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = $1
	CALL $95(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $79(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $123 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $133($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10012])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $133($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $130 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $131 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $128())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $132($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $133($1)
	
.LABEL $label$2
	*(CALL $128()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $133(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $136($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $133 (int_32 $0)
{
	return CALL $134([10032], $0)
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $135($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8210])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $136($0)
	
.LABEL $label$1
}

void .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18416])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18224]
	$3 = (((int_32)$1 * (int_32)[12]) + [18224])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8731])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8731])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8731])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8731])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $112(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $130($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $124($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $124($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$5 = *($1)
	*($1) = *(*($3))
	$6 = *($1 + [8])
	$3 = ($1 + [16])
	$8 = *($3)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$8), [8984])
	$6 = ((int_64)$6 + (int_64)*($7))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9027])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9046])
	*($3) = $8
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8925])
	CALL eosio_assert([1], [8787])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = $1
	CALL $103(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $79(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = $1
	CALL $101(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $97(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$5 = *($1)
	*($1) = *(*($3))
	$6 = *($1 + [8])
	$3 = ($1 + [16])
	$8 = *($3)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$8), [8984])
	$6 = ((int_64)$6 + (int_64)*($7))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9027])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9046])
	*($3) = $8
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8925])
	CALL eosio_assert([1], [8787])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = $1
	CALL $100(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $99(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$5 = *($1)
	*($1) = *(*($3))
	$6 = *($1 + [8])
	$3 = ($1 + [16])
	$8 = *($3)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$8), [8984])
	$6 = ((int_64)$6 + (int_64)*($7))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9027])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9046])
	*($3) = $8
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8925])
	CALL eosio_assert([1], [8787])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$6 = *($1)
	$7 = *($1 + [24])
	$8 = ($1 + [32])
	$9 = *($8)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [8984])
	$7 = ((int_64)$7 + (int_64)*($3))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9027])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9046])
	*($8) = $9
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8925])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [24])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $133($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8787])
	CALL memcpy($4, $1, [8])
	*($5 + [12]) = ($4 + [8])
	CALL $84(($5 + [8]), $8)
	CALL eosio_assert(((int_32)(*($5 + [16]) - *($5 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($1 + [24]), [8])
	$8 = (*($5 + [12]) + [8])
	*($5 + [12]) = $8
	*($5 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($5 + [16]) - $8) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($5 + [24]), [8])
	*($5 + [12]) = (*($5 + [12]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = $1
	CALL $102(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $79(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$6 = *($1)
	$7 = *($1 + [24])
	$8 = ($1 + [32])
	$9 = *($8)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9386])
	$7 = (int_64)
	CALL eosio_assert(((int_64)$7($7 - *($3))) > (int_64)-4611686018427387904), [9434])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9456])
	*($8) = $9
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8925])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [24])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $133($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8787])
	CALL memcpy($4, $1, [8])
	*($5 + [12]) = ($4 + [8])
	CALL $84(($5 + [8]), $8)
	CALL eosio_assert(((int_32)(*($5 + [16]) - *($5 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($1 + [24]), [8])
	$8 = (*($5 + [12]) + [8])
	*($5 + [12]) = $8
	*($5 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($5 + [16]) - $8) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($5 + [24]), [8])
	*($5 + [12]) = (*($5 + [12]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$5 = *($1)
	*($1) = *(*($3))
	$6 = *($1 + [8])
	$3 = ($1 + [16])
	$8 = *($3)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$8), [9386])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($6 - *($7))) > (int_64)-4611686018427387904), [9434])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9456])
	*($3) = $8
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8925])
	CALL eosio_assert([1], [8787])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $128 ()
{
	return [10016]
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [160])
	$global$0 = $3
	*($3 + [152]) = $1
	CALL require_auth($1)
	$4 = CALL $130([8192])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8402])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8447])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$7 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)4
	
.LABEL $label$1
	$8 = *($2 + [8])
	$6 = [0]
	$9 = *($2)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$5 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$5 = $10
	$6 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$5 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [8196])
	CALL eosio_assert(((int_64)$8 == (int_64)$7), [8296])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [9086])
	*((($3 + [112]) + [32])) = [0]
	*($3 + [128]) = (int_64)-1
	*($3 + [136]) = (int_64)0
	$5 = *($0 + [8])
	*($3 + [112]) = $5
	*($3 + [120]) = $5
	$10 = (int_64)0
	$4 = CALL db_find_i64($5, $5, (int_64)-4157660956847919136, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$4 = CALL $21(($3 + [112]), $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($3 + [112])), [8657])
	$9 = *($2)
	$10 = *($4 + [8])
	$1 = *($3 + [152])
	
.LABEL $label$12
	CALL eosio_assert(((int_64)$9 <= (int_64)$10), [9117])
	*((($3 + [96]) + [8])) = *(($2 + [8]))
	*($3 + [96]) = *($2)
	CALL prints([9138])
	CALL $30(($3 + [96]))
	*((($3 + [56]) + [32])) = [0]
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	$5 = *(($0 + [8]))
	*($3 + [56]) = $5
	*($3 + [64]) = $5
	$4 = CALL db_find_i64($5, $5, (int_64)-4157661383434960896, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$14 }
	$4 = CALL $22(($3 + [56]), $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($3 + [56])), [8657])
	*($3 + [52]) = $4
	*($3 + [48]) = ($3 + [56])
	$5 = *($0)
	*($3 + [8]) = $2
	*($3 + [20]) = $0
	*($3 + [12]) = ($3 + [152])
	*($3 + [16]) = ($3 + [96])
	*($3 + [24]) = ($3 + [56])
	*($3 + [28]) = ($3 + [48])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8793])
	CALL $31(($3 + [56]), $4, $5, ($3 + [8]))
	goto $label$13 
	
.LABEL $label$14
	*($3 + [52]) = [0]
	*($3 + [48]) = ($3 + [56])
	CALL eosio_assert([0], [9166])
	
.LABEL $label$13
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *(($0 + [8]))
	*($3 + [8]) = $5
	*($3 + [16]) = $5
	$4 = CALL db_find_i64($5, $5, (int_64)-4157660956847919136, *($3 + [152]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$17 }
	$4 = CALL $21(($3 + [8]), $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($3 + [8])), [8657])
	$5 = *($0)
	*($3 + [4]) = $2
	*($3) = ($3 + [152])
	CALL eosio_assert([1], [8793])
	CALL $32(($3 + [8]), $4, $5, $3)
	$11 = *($3 + [32])
	if ( $11 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL eosio_assert([0], [9190])
	$11 = *($3 + [32])
	if ( ($11 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$2 = ($3 + [36])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$21 }
	CALL _ZdlPv($6)
	
.LABEL $label$21
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$20 }
	$4 = *(($3 + [32]))
	goto $label$18 
	
.LABEL $label$19
	$4 = $11
	
.LABEL $label$18
	*($2) = $11
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$11 = *($3 + [80])
	if ( ($11 == 0) ){ goto $label$22 }
	$2 = ($3 + [84])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$24 }
	
.LOOP $label$25:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$26 }
	CALL _ZdlPv($6)
	
.LABEL $label$26
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$25 }
	$4 = *(($3 + [80]))
	goto $label$23 
	
.LABEL $label$24
	$4 = $11
	
.LABEL $label$23
	*($2) = $11
	CALL _ZdlPv($4)
	
.LABEL $label$22
	$11 = *($3 + [136])
	if ( ($11 == 0) ){ goto $label$27 }
	$2 = ($3 + [140])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$29 }
	
.LOOP $label$30:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$31 }
	CALL _ZdlPv($6)
	
.LABEL $label$31
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$30 }
	$4 = *(($3 + [136]))
	goto $label$28 
	
.LABEL $label$29
	$4 = $11
	
.LABEL $label$28
	*($2) = $11
	CALL _ZdlPv($4)
	
.LABEL $label$27
	$global$0 = ($3 + [160])
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [56]) + [16]))) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8731])
	CALL memcpy(($4 + [56]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [8731])
	CALL memcpy((($4 + [56]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [8731])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4 + [64])
	$0 = *($4 + [56])
	*((($4 + [96]) + [8])) = *($8)
	*($4 + [96]) = *($4 + [80])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [96]) + [8]))
	*((($4 + [112]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [96])
	*($4 + [8]) = $1
	*($4 + [112]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $136($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [160]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $38(($4 + [24]), ($4 + [160]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($6 = (($4 + [144]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $39(($4 + [160]), ($4 + [72]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $136($2)
	
.LABEL $label$4
	$2 = *(($4 + [104]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [108])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$1 = ($global$0 - [208])
	$global$0 = $1
	*($1 + [104]) = [9477]
	*($1 + [108]) = CALL $130([9477])
	*($1) = *($1 + [104])
	CALL require_auth(*(CALL $19(($1 + [168]), $1)))
	*((($1 + [168]) + [32])) = [0]
	*($1 + [184]) = (int_64)-1
	$2 = *($0 + [8])
	*($1 + [168]) = $2
	*($1 + [176]) = $2
	*($1 + [192]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-4157661383434960896, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $22(($1 + [168]), $3)
	$5 = (($1 + [104]) + [24])
	$6 = (($1 + [104]) + [32])
	$7 = (($1 + [104]) + [28])
	
.LOOP $label$2:
	*($1 + [160]) = *($4)
	*((($1 + [144]) + [8])) = *(($4 + [16]))
	*($1 + [144]) = *($4 + [8])
	CALL prints([9490])
	CALL printn(*($1 + [160]))
	CALL prints([9662])
	CALL $30(($1 + [144]))
	*((($1 + [104]) + [16])) = (int_64)-1
	*($5) = (int_64)0
	*($6) = [0]
	$3 = ($0 + [8])
	$2 = *($3)
	*((($1 + [104]) + [8])) = $2
	*($1 + [104]) = $2
	$8 = CALL db_find_i64($2, $2, (int_64)-4157661383434960896, *($1 + [160]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $22(($1 + [104]), $8)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($1 + [104])), [8657])
	*((($1 + [64]) + [16])) = (int_64)-1
	*(($9 = (($1 + [64]) + [24]))) = (int_64)0
	*((($1 + [64]) + [32])) = [0]
	$2 = *($3)
	*((($1 + [64]) + [8])) = $2
	*($1 + [64]) = $2
	$10 = CALL db_find_i64($2, $2, (int_64)-4157661186618015744, *($1 + [160]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $34(($1 + [64]), $10)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($1 + [64])), [8657])
	$2 = *($0)
	*($1 + [20]) = ($1 + [144])
	*($1 + [16]) = ($1 + [160])
	CALL eosio_assert([1], [8793])
	CALL $49(($1 + [64]), $10, $2, ($1 + [16]))
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [9683])
	$10 = *($5)
	if ( $10 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$2 = *($0)
	*($1 + [20]) = ($1 + [144])
	*($1 + [16]) = ($1 + [160])
	CALL $50(($1 + [56]), ($1 + [64]), $2, ($1 + [16]))
	
.LABEL $label$5
	$2 = *($0)
	*($1 + [20]) = ($1 + [144])
	*($1 + [16]) = ($1 + [160])
	CALL eosio_assert([1], [8793])
	CALL $51(($1 + [104]), $8, $2, ($1 + [16]))
	*((($1 + [16]) + [16])) = (int_64)-1
	*(($11 = (($1 + [16]) + [24]))) = (int_64)0
	*((($1 + [16]) + [32])) = [0]
	$2 = *($3)
	*(($12 = (($1 + [16]) + [8]))) = $2
	*($1 + [16]) = $2
	$3 = CALL db_find_i64($2, $2, (int_64)-4157660942777958400, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$3 = CALL $27(($1 + [16]), $3)
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)($1 + [16])), [8657])
	$2 = *($0)
	*($1 + [56]) = ($1 + [144])
	CALL eosio_assert([1], [8793])
	CALL $52(($1 + [16]), $3, $2, ($1 + [56]))
	goto $label$8 
	
.LABEL $label$9
	$2 = *($0)
	*($1 + [8]) = ($1 + [144])
	CALL $53(($1 + [56]), ($1 + [16]), $2, ($1 + [8]))
	
.LABEL $label$8
	$14 = (($1 + [16]) + [28])
	$8 = *($14)
	$13 = *($11)
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$14 }
	
.LOOP $label$16:
	$3 = ($8 + [-24])
	$10 = *($3)
	if ( ((int_64)*($10) == (int_64)1) ){ goto $label$15 }
	$8 = $3
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($1 + [16])), [8657])
	goto $label$13 
	
.LABEL $label$14
	$3 = CALL db_find_i64(*($1 + [16]), *($12), (int_64)-4157660942777958400, (int_64)1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$12 }
	$10 = CALL $27(($1 + [16]), $3)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($1 + [16])), [8657])
	
.LABEL $label$13
	$2 = *($0)
	*($1 + [56]) = ($1 + [144])
	CALL eosio_assert([1], [8793])
	CALL $54(($1 + [16]), $10, $2, ($1 + [56]))
	$10 = *($11)
	if ( ($10 == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	$2 = *($0)
	*($1 + [8]) = ($1 + [144])
	CALL $55(($1 + [56]), ($1 + [16]), $2, ($1 + [8]))
	$10 = *($11)
	if ( ($10 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$3 = *($14)
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$8 = *($3)
	*($3) = [0]
	if ( ($8 == 0) ){ goto $label$20 }
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($8 + [16])))
	
.LABEL $label$21
	CALL _ZdlPv($8)
	
.LABEL $label$20
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$19 }
	$3 = *($11)
	goto $label$17 
	
.LABEL $label$18
	$3 = $10
	
.LABEL $label$17
	*($14) = $10
	CALL _ZdlPv($3)
	
.LABEL $label$10
	$10 = *($9)
	if ( ($10 == 0) ){ goto $label$22 }
	$13 = (($1 + [64]) + [28])
	$3 = *($13)
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$24 }
	
.LOOP $label$25:
	$3 = ($3 + [-24])
	$8 = *($3)
	*($3) = [0]
	if ( ($8 == 0) ){ goto $label$26 }
	CALL _ZdlPv($8)
	
.LABEL $label$26
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$25 }
	$3 = *($9)
	goto $label$23 
	
.LABEL $label$24
	$3 = $10
	
.LABEL $label$23
	*($13) = $10
	CALL _ZdlPv($3)
	
.LABEL $label$22
	$10 = *($5)
	if ( ($10 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$8 = *($3)
	*($3) = [0]
	if ( ($8 == 0) ){ goto $label$30 }
	CALL _ZdlPv($8)
	
.LABEL $label$30
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$29 }
	$3 = *($5)
	goto $label$27 
	
.LABEL $label$28
	$3 = $10
	
.LABEL $label$27
	*($7) = $10
	CALL _ZdlPv($3)
	
.LABEL $label$3
	CALL eosio_assert([1], [9585])
	$3 = CALL db_next_i64(*($4 + [28]), ($1 + [104]))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL $22(($1 + [168]), $3)
	goto $label$2 
	
.LABEL $label$1
	$10 = *($1 + [192])
	if ( ($10 == 0) ){ goto $label$31 }
	$13 = ($1 + [196])
	$3 = *($13)
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$33 }
	
.LOOP $label$34:
	$3 = ($3 + [-24])
	$8 = *($3)
	*($3) = [0]
	if ( ($8 == 0) ){ goto $label$35 }
	CALL _ZdlPv($8)
	
.LABEL $label$35
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$34 }
	$3 = *(($1 + [192]))
	goto $label$32 
	
.LABEL $label$33
	$3 = $10
	
.LABEL $label$32
	*($13) = $10
	CALL _ZdlPv($3)
	
.LABEL $label$31
	$global$0 = ($1 + [208])
}

void .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [80])
	$global$0 = $1
	*($1 + [64]) = [9477]
	*($1 + [68]) = CALL $130([9477])
	*($1 + [8]) = *($1 + [64])
	CALL require_auth(*(CALL $19(($1 + [24]), ($1 + [8]))))
	*($1 + [72]) = (int_64)0
	*($1 + [64]) = (int_64)0
	$2 = CALL $130([8192])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8402])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8191]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8447])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)4
	
.LABEL $label$1
	*(($1 + [72])) = $3
	*($1 + [64]) = (int_64)0
	*(($1 + [56])) = [0]
	*($1 + [40]) = (int_64)-1
	*($1 + [48]) = (int_64)0
	$3 = *($0 + [8])
	*($1 + [24]) = $3
	*($1 + [32]) = $3
	$2 = CALL db_find_i64($3, $3, (int_64)-4157660942777958400, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$2 = CALL $27(($1 + [24]), $2)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)($1 + [24])), [8657])
	$3 = *($0)
	*($1 + [16]) = ($1 + [64])
	CALL eosio_assert([1], [8793])
	CALL $72(($1 + [24]), $2, $3, ($1 + [16]))
	$0 = *($1 + [48])
	if ( ($0 == 0) ){ goto $label$7 }
	$5 = ($1 + [52])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($1 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $0
	
.LABEL $label$8
	*($5) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$global$0 = ($1 + [80])
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	float_32 $17
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [32]) = [9477]
	*($4 + [36]) = CALL $130([9477])
	*($4 + [8]) = *($4 + [32])
	CALL require_auth(*(CALL $19(($4 + [56]), ($4 + [8]))))
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)*($3 + [4])) ){ goto $label$1 }
	$6 = ($4 + [72])
	$7 = (($4 + [56]) + [24])
	$8 = ($4 + [88])
	$9 = ($3 + [4])
	$10 = ($4 + [84])
	
.LOOP $label$2:
	*($6) = (int_64)-1
	*($7) = (int_64)0
	*($8) = [0]
	$12 = *(($0 + [8]))
	*((($4 + [56]) + [8])) = $12
	*($4 + [56]) = $12
	$13 = *($5 + [8])
	$14 = *($5)
	*($4 + [48]) = $14
	$11 = [0]
	$3 = CALL db_find_i64($12, $12, (int_64)5455799419163115520, $14)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $35(($4 + [56]), $3)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)($4 + [56])), [8657])
	
.LABEL $label$3
	*(($15 = (($4 + [32]) + [8]))) = (int_64)0
	*($4 + [32]) = (int_64)0
	$3 = CALL $130([9564])
	if ( ($3 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8402])
	goto $label$5 
	
.LABEL $label$6
	if ( $3 ){ goto $label$5 }
	$12 = (int_64)0
	goto $label$4 
	
.LABEL $label$5
	$12 = (int_64)0
	
.LOOP $label$7:
	$16 = *(($3 + [9563]))
	if ( ((($16 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [8447])
	
.LABEL $label$8
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$7 }
	$12 = ((int_64)$12 << (int_64)8)
	
.LABEL $label$4
	*($15) = ((int_64)$12 | (int_64)4)
	$17 = ((float_32)((float_32)(CASTING float_32)(int_64 $13) / (float_32)(CASTING float_32)(int_64 *($2))) * (float_32)(CASTING float_32)(int_64 *($1)))
	if ( ((float_32)(float_32)|$17| < (float_32)(float_32)9223372036854775808) ){ goto $label$10 }
	$12 = (int_64)-9223372036854775808
	goto $label$9 
	
.LABEL $label$10
	$12 = (Rounds 0)($17)
	
.LABEL $label$9
	*($4 + [32]) = $12
	CALL prints([9568])
	CALL printi(*($4 + [32]))
	$12 = *($0)
	if ( ($11 == 0) ){ goto $label$13 }
	*($4 + [28]) = ($4 + [32])
	*($4 + [24]) = ($4 + [48])
	CALL eosio_assert([1], [8793])
	CALL $40(($4 + [56]), $11, $12, ($4 + [24]))
	$11 = *($7)
	if ( ($11 == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	*($4 + [28]) = ($4 + [32])
	*($4 + [24]) = ($4 + [48])
	CALL $41(($4 + [16]), ($4 + [56]), $12, ($4 + [24]))
	$11 = *($7)
	if ( $11 ){ goto $label$11 }
	
.LABEL $label$12
	$5 = ($5 + [24])
	if ( ((int_32)$5 != (int_32)*($9)) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$11
	$3 = *($10)
	if ( ((int_32)$3 != (int_32)$11) ){ goto $label$15 }
	$3 = $11
	goto $label$14 
	
.LABEL $label$15
	
.LOOP $label$16:
	$3 = ($3 + [-24])
	$16 = *($3)
	*($3) = [0]
	if ( ($16 == 0) ){ goto $label$17 }
	CALL _ZdlPv($16)
	
.LABEL $label$17
	if ( ((int_32)$11 != (int_32)$3) ){ goto $label$16 }
	$3 = *($7)
	
.LABEL $label$14
	*($10) = $11
	CALL _ZdlPv($3)
	$5 = ($5 + [24])
	if ( ((int_32)$5 != (int_32)*($9)) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [224])
	$global$0 = $1
	*($1 + [136]) = [9477]
	*($1 + [140]) = CALL $130([9477])
	*($1 + [8]) = *($1 + [136])
	CALL require_auth(*(CALL $19(($1 + [176]), ($1 + [8]))))
	*((($1 + [176]) + [32])) = [0]
	*($1 + [192]) = (int_64)-1
	$2 = *($0 + [8])
	*($1 + [176]) = $2
	*($1 + [184]) = $2
	*($1 + [200]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-4157661383434960896, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $22(($1 + [176]), $3)
	
.LOOP $label$2:
	CALL eosio_assert([1], [9828])
	CALL eosio_assert([1], [9585])
	$3 = [0]
	$5 = CALL db_next_i64(*($4 + [28]), ($1 + [136]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $22(($1 + [176]), $5)
	
.LABEL $label$3
	CALL $68(($1 + [176]), $4)
	$4 = $3
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$1
	*((($1 + [136]) + [32])) = [0]
	*($1 + [152]) = (int_64)-1
	$6 = ($0 + [8])
	$2 = *($6)
	*($1 + [136]) = $2
	*($1 + [144]) = $2
	*($1 + [160]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-4157661186618015744, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $34(($1 + [136]), $3)
	
.LOOP $label$5:
	CALL eosio_assert([1], [9828])
	CALL eosio_assert([1], [9585])
	$3 = [0]
	$5 = CALL db_next_i64(*($4 + [28]), ($1 + [96]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL $34(($1 + [136]), $5)
	
.LABEL $label$6
	CALL $69(($1 + [136]), $4)
	$4 = $3
	if ( $3 ){ goto $label$5 }
	
.LABEL $label$4
	*((($1 + [96]) + [32])) = [0]
	*($1 + [112]) = (int_64)-1
	$2 = *($6)
	*($1 + [96]) = $2
	*($1 + [104]) = $2
	*($1 + [120]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-4157660956847919136, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $21(($1 + [96]), $3)
	
.LOOP $label$8:
	CALL eosio_assert([1], [9828])
	CALL eosio_assert([1], [9585])
	$3 = [0]
	$5 = CALL db_next_i64(*($4 + [28]), ($1 + [56]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$3 = CALL $21(($1 + [96]), $5)
	
.LABEL $label$9
	CALL $70(($1 + [96]), $4)
	$4 = $3
	if ( $3 ){ goto $label$8 }
	
.LABEL $label$7
	*((($1 + [56]) + [32])) = [0]
	*($1 + [72]) = (int_64)-1
	$0 = ($0 + [8])
	$2 = *($0)
	*($1 + [56]) = $2
	*($1 + [64]) = $2
	*($1 + [80]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-4157660942777958400, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$10 }
	$4 = CALL $27(($1 + [56]), $3)
	
.LOOP $label$11:
	CALL eosio_assert([1], [9828])
	CALL eosio_assert([1], [9585])
	$3 = [0]
	$5 = CALL db_next_i64(*($4 + [44]), ($1 + [16]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	$3 = CALL $27(($1 + [56]), $5)
	
.LABEL $label$12
	CALL $71(($1 + [56]), $4)
	$4 = $3
	if ( $3 ){ goto $label$11 }
	
.LABEL $label$10
	*(($1 + [48])) = [0]
	*($1 + [32]) = (int_64)-1
	$2 = *($0)
	*($1 + [16]) = $2
	*($1 + [24]) = $2
	*($1 + [40]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)5455799419163115520, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL $35(($1 + [16]), $3)
	
.LOOP $label$14:
	CALL eosio_assert([1], [9828])
	CALL eosio_assert([1], [9585])
	$3 = [0]
	$5 = CALL db_next_i64(*($4 + [28]), ($1 + [216]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$15 }
	$3 = CALL $35(($1 + [16]), $5)
	
.LABEL $label$15
	CALL $67(($1 + [16]), $4)
	$4 = $3
	if ( $3 ){ goto $label$14 }
	
.LABEL $label$13
	$5 = *($1 + [40])
	if ( ($5 == 0) ){ goto $label$16 }
	$0 = ($1 + [44])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($1 + [40]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $5
	
.LABEL $label$17
	*($0) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$5 = *($1 + [80])
	if ( ($5 == 0) ){ goto $label$21 }
	$0 = ($1 + [84])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$26
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($1 + [80]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $5
	
.LABEL $label$22
	*($0) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$5 = *($1 + [120])
	if ( ($5 == 0) ){ goto $label$27 }
	$0 = ($1 + [124])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$29 }
	
.LOOP $label$30:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$31 }
	CALL _ZdlPv($4)
	
.LABEL $label$31
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$30 }
	$3 = *(($1 + [120]))
	goto $label$28 
	
.LABEL $label$29
	$3 = $5
	
.LABEL $label$28
	*($0) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$27
	$5 = *($1 + [160])
	if ( ($5 == 0) ){ goto $label$32 }
	$0 = ($1 + [164])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$34 }
	
.LOOP $label$35:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$36 }
	CALL _ZdlPv($4)
	
.LABEL $label$36
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$35 }
	$3 = *(($1 + [160]))
	goto $label$33 
	
.LABEL $label$34
	$3 = $5
	
.LABEL $label$33
	*($0) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$32
	$5 = *($1 + [200])
	if ( ($5 == 0) ){ goto $label$37 }
	$0 = ($1 + [204])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$39 }
	
.LOOP $label$40:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$41 }
	CALL _ZdlPv($4)
	
.LABEL $label$41
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$40 }
	$3 = *(($1 + [200]))
	goto $label$38 
	
.LABEL $label$39
	$3 = $5
	
.LABEL $label$38
	*($0) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$37
	$global$0 = ($1 + [224])
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $136($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)-3102536759825661953) ){ goto $label$11 }
	if ( ((int_64)$2 > (int_64)4923678652718273848) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-3102536759825661952) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)4923678490122780672) ){ goto $label$1 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [1]
	*($3 + [64]) = *($3 + [104])
	CALL $3($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 <= (int_64)-7877141654007395057) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-7877141654007395056) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-4157661383434960896) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-3841130677495922688) ){ goto $label$1 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [2]
	*($3 + [80]) = *($3 + [88])
	CALL $3($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)4923678652718273849) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)5455799419163115520) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)5455799419166896640) ){ goto $label$1 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [3]
	*($3 + [24]) = *($3 + [144])
	CALL $6($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-7877141970529599488) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-7877141654011268608) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [4]
	*($3 + [40]) = *($3 + [128])
	CALL $3($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [164]) = [0]
	*($3 + [160]) = [5]
	*($3 + [8]) = *($3 + [160])
	CALL $9($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [116]) = [0]
	*($3 + [112]) = [6]
	*($3 + [56]) = *($3 + [112])
	CALL $11($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [140]) = [0]
	*($3 + [136]) = [7]
	*($3 + [32]) = *($3 + [136])
	CALL $9($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [172]) = [0]
	*($3 + [168]) = [8]
	*($3) = *($3 + [168])
	CALL $9($1, $1, $3)
	goto $label$1 
	
.LABEL $label$4
	*($3 + [100]) = [0]
	*($3 + [96]) = [9]
	*($3 + [72]) = *($3 + [96])
	CALL $3($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [156]) = [0]
	*($3 + [152]) = [10]
	*($3 + [16]) = *($3 + [152])
	CALL $16($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [124]) = [0]
	*($3 + [120]) = [11]
	*($3 + [48]) = *($3 + [120])
	CALL $18($1, $1, ($3 + [48]))
	
.LABEL $label$1
	CALL $129([0])
	$global$0 = ($3 + [176])
}

void .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [64])
	$global$0 = $1
	*($1 + [56]) = [9477]
	*($1 + [60]) = CALL $130([9477])
	*($1 + [8]) = *($1 + [56])
	CALL require_auth(*(CALL $19(($1 + [16]), ($1 + [8]))))
	*(($1 + [48])) = [0]
	*($1 + [32]) = (int_64)-1
	$2 = *($0 + [8])
	*($1 + [16]) = $2
	*($1 + [24]) = $2
	*($1 + [40]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)5455799419163115520, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $35(($1 + [16]), $0)
	
.LOOP $label$2:
	CALL eosio_assert([1], [9828])
	CALL eosio_assert([1], [9585])
	$0 = [0]
	$4 = CALL db_next_i64(*($3 + [28]), ($1 + [56]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $35(($1 + [16]), $4)
	
.LABEL $label$3
	CALL $67(($1 + [16]), $3)
	$3 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = ($1 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($1 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $4
	
.LABEL $label$5
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($1 + [64])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	float_32 $17
	$3 = ($global$0 - [128])
	$global$0 = $3
	*($3 + [48]) = [9477]
	*($3 + [52]) = CALL $130([9477])
	*($3) = *($3 + [48])
	CALL require_auth(*(CALL $19(($3 + [88]), $3)))
	*((($3 + [88]) + [32])) = [0]
	*($3 + [104]) = (int_64)-1
	$4 = *($0 + [8])
	*($3 + [88]) = $4
	*($3 + [96]) = $4
	*($3 + [112]) = (int_64)0
	$5 = CALL db_lowerbound_i64($4, $4, (int_64)-4157661186618015744, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $34(($3 + [88]), $5)
	$7 = ($3 + [64])
	$8 = ($3 + [72])
	$9 = (($3 + [48]) + [32])
	$10 = ($3 + [76])
	
.LOOP $label$2:
	*($7) = (int_64)-1
	*($8) = (int_64)0
	$11 = [0]
	*($9) = [0]
	$4 = *(($0 + [8]))
	*((($3 + [48]) + [8])) = $4
	*($3 + [48]) = $4
	$12 = *($6 + [8])
	$13 = *($6)
	*($3 + [40]) = $13
	$5 = CALL db_find_i64($4, $4, (int_64)5455799419163115520, $13)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $35(($3 + [48]), $5)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)($3 + [48])), [8657])
	
.LABEL $label$3
	CALL prints([9490])
	CALL printn(*($3 + [40]))
	CALL prints([9497])
	CALL printi($12)
	CALL prints([9517])
	$13 = *($2)
	CALL printi($13)
	CALL prints([9542])
	$14 = *($1)
	CALL printi($14)
	if ( (int_64)(*(($6 + [8])) == 0) ){ goto $label$7 }
	*(($15 = (($3 + [24]) + [8]))) = (int_64)0
	*($3 + [24]) = (int_64)0
	$5 = CALL $130([9564])
	if ( ($5 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [8402])
	goto $label$10 
	
.LABEL $label$11
	if ( ($5 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$4 = (int_64)0
	
.LOOP $label$12:
	$16 = *(($5 + [9563]))
	if ( ((($16 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [8447])
	
.LABEL $label$13
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	$4 = ((int_64)$4 << (int_64)8)
	goto $label$8 
	
.LABEL $label$9
	$4 = (int_64)0
	
.LABEL $label$8
	*($15) = ((int_64)$4 | (int_64)4)
	$17 = ((float_32)((float_32)(CASTING float_32)(int_64 $12) / (float_32)(CASTING float_32)(int_64 $13)) * (float_32)(CASTING float_32)(int_64 $14))
	if ( ((float_32)(float_32)|$17| < (float_32)(float_32)9223372036854775808) ){ goto $label$15 }
	$4 = (int_64)-9223372036854775808
	goto $label$14 
	
.LABEL $label$15
	$4 = (Rounds 0)($17)
	
.LABEL $label$14
	*($3 + [24]) = $4
	CALL prints([9568])
	CALL printi(*($3 + [24]))
	$4 = *($0)
	if ( ($11 == 0) ){ goto $label$6 }
	*($3 + [20]) = ($3 + [24])
	*($3 + [16]) = ($3 + [40])
	CALL eosio_assert([1], [8793])
	CALL $36(($3 + [48]), $11, $4, ($3 + [16]))
	
.LABEL $label$7
	$11 = *($8)
	if ( ($11 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	*($3 + [20]) = ($3 + [24])
	*($3 + [16]) = ($3 + [40])
	CALL $37(($3 + [8]), ($3 + [48]), $4, ($3 + [16]))
	$11 = *($8)
	if ( ($11 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = ($5 + [-24])
	$16 = *($5)
	*($5) = [0]
	if ( ($16 == 0) ){ goto $label$19 }
	CALL _ZdlPv($16)
	
.LABEL $label$19
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$18 }
	$5 = *($8)
	goto $label$16 
	
.LABEL $label$17
	$5 = $11
	
.LABEL $label$16
	*($10) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$4
	CALL eosio_assert([1], [9585])
	$5 = CALL db_next_i64(*($6 + [28]), ($3 + [48]))
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = CALL $34(($3 + [88]), $5)
	goto $label$2 
	
.LABEL $label$1
	$11 = *($3 + [112])
	if ( ($11 == 0) ){ goto $label$20 }
	$6 = ($3 + [116])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$22 }
	
.LOOP $label$23:
	$5 = ($5 + [-24])
	$16 = *($5)
	*($5) = [0]
	if ( ($16 == 0) ){ goto $label$24 }
	CALL _ZdlPv($16)
	
.LABEL $label$24
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$23 }
	$5 = *(($3 + [112]))
	goto $label$21 
	
.LABEL $label$22
	$5 = $11
	
.LABEL $label$21
	*($6) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$20
	$global$0 = ($3 + [128])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [96]) + [24]))) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [84]) = $2
	*($4 + [80]) = $2
	*($4 + [88]) = ($2 + $7)
	*($4 + [208]) = ($4 + [80])
	*($4 + [48]) = ($4 + [96])
	CALL $33(($4 + [48]), ($4 + [208]))
	*(($8 = (($4 + [32]) + [8]))) = *($4 + [88])
	*($4 + [32]) = *($4 + [80])
	$8 = *($8)
	*(($9 = (($4 + [176]) + [8]))) = $8
	*(($10 = (($4 + [192]) + [8]))) = $8
	$11 = *($4 + [32])
	*($4 + [192]) = $11
	*($4 + [176]) = $11
	$8 = *($10)
	*((($4 + [208]) + [8])) = $8
	*((($4 + [48]) + [24])) = $8
	*($4 + [48]) = $0
	*($4 + [56]) = $1
	$0 = *($4 + [192])
	*($4 + [64]) = $0
	*($4 + [208]) = $0
	*(($8 = (($4 + [144]) + [8]))) = *($4 + [104])
	*(($10 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [144]) = *($4 + [96])
	*($4 + [128]) = *($4 + [112])
	*($9) = *($10)
	*((($4 + [160]) + [8])) = *($8)
	*($4 + [176]) = *($4 + [128])
	*($4 + [160]) = *($4 + [144])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$0 = *((($4 + [160]) + [8]))
	*((($4 + [208]) + [8])) = $0
	$1 = *((($4 + [176]) + [8]))
	*((($4 + [192]) + [8])) = $1
	*((($4 + [16]) + [8])) = $0
	*(($4 + [8])) = $1
	$0 = *($4 + [160])
	*($4 + [208]) = $0
	$1 = *($4 + [176])
	*($4 + [192]) = $1
	*($4 + [16]) = $0
	*($4) = $1
	CALL void $3((int_32 ($4 + [16])), (int_32 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $136($2)
	
.LABEL $label$6
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [176])
	$global$0 = $2
	*($2 + [72]) = [9477]
	*($2 + [76]) = CALL $130([9477])
	*($2 + [8]) = *($2 + [72])
	CALL require_auth(*(CALL $19(($2 + [112]), ($2 + [8]))))
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)*($1 + [4])) ){ goto $label$1 }
	$4 = (($2 + [112]) + [24])
	$5 = (($2 + [112]) + [32])
	$6 = ($1 + [4])
	$7 = (($2 + [112]) + [28])
	
.LOOP $label$2:
	*($2 + [168]) = *($3)
	*((($2 + [152]) + [8])) = *(($3 + [16]))
	*($2 + [152]) = *($3 + [8])
	CALL prints([9719])
	CALL printn(*($2 + [168]))
	CALL prints([9662])
	CALL $30(($2 + [152]))
	*((($2 + [112]) + [16])) = (int_64)-1
	*($4) = (int_64)0
	*($5) = [0]
	$1 = ($0 + [8])
	$8 = *($1)
	*((($2 + [112]) + [8])) = $8
	*($2 + [112]) = $8
	$9 = CALL db_find_i64($8, $8, (int_64)-4157661383434960896, *($2 + [168]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $22(($2 + [112]), $9)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)($2 + [112])), [8657])
	*((($2 + [72]) + [16])) = (int_64)-1
	*(($10 = (($2 + [72]) + [24]))) = (int_64)0
	*((($2 + [72]) + [32])) = [0]
	$8 = *($1)
	*((($2 + [72]) + [8])) = $8
	*($2 + [72]) = $8
	$11 = CALL db_find_i64($8, $8, (int_64)-4157661186618015744, *($2 + [168]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$6 }
	$11 = CALL $34(($2 + [72]), $11)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)($2 + [72])), [8657])
	$8 = *($0)
	*($2 + [28]) = ($2 + [152])
	*($2 + [24]) = ($2 + [168])
	CALL eosio_assert([1], [8793])
	CALL $57(($2 + [72]), $11, $8, ($2 + [24]))
	goto $label$5 
	
.LABEL $label$7
	CALL prints([9683])
	$11 = *($4)
	if ( $11 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$8 = *($0)
	*($2 + [28]) = ($2 + [152])
	*($2 + [24]) = ($2 + [168])
	CALL $58(($2 + [64]), ($2 + [72]), $8, ($2 + [24]))
	
.LABEL $label$5
	$8 = *($0)
	*($2 + [28]) = ($2 + [152])
	*($2 + [24]) = ($2 + [168])
	CALL eosio_assert([1], [8793])
	CALL $59(($2 + [112]), $9, $8, ($2 + [24]))
	*((($2 + [24]) + [16])) = (int_64)-1
	*(($12 = (($2 + [24]) + [24]))) = (int_64)0
	*((($2 + [24]) + [32])) = [0]
	$8 = *($1)
	*(($13 = (($2 + [24]) + [8]))) = $8
	*($2 + [24]) = $8
	$1 = CALL db_find_i64($8, $8, (int_64)-4157660942777958400, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$9 }
	$1 = CALL $27(($2 + [24]), $1)
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)($2 + [24])), [8657])
	$8 = *($0)
	*($2 + [64]) = ($2 + [152])
	CALL eosio_assert([1], [8793])
	CALL $60(($2 + [24]), $1, $8, ($2 + [64]))
	goto $label$8 
	
.LABEL $label$9
	$8 = *($0)
	*($2 + [16]) = ($2 + [152])
	CALL $61(($2 + [64]), ($2 + [24]), $8, ($2 + [16]))
	
.LABEL $label$8
	$15 = (($2 + [24]) + [28])
	$9 = *($15)
	$14 = *($12)
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$14 }
	
.LOOP $label$16:
	$1 = ($9 + [-24])
	$11 = *($1)
	if ( ((int_64)*($11) == (int_64)1) ){ goto $label$15 }
	$9 = $1
	if ( ((int_32)$14 != (int_32)$1) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($2 + [24])), [8657])
	goto $label$13 
	
.LABEL $label$14
	$1 = CALL db_find_i64(*($2 + [24]), *($13), (int_64)-4157660942777958400, (int_64)1)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$12 }
	$11 = CALL $27(($2 + [24]), $1)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($2 + [24])), [8657])
	
.LABEL $label$13
	$8 = *($0)
	*($2 + [64]) = ($2 + [152])
	CALL eosio_assert([1], [8793])
	CALL $62(($2 + [24]), $11, $8, ($2 + [64]))
	$11 = *($12)
	if ( ($11 == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	$8 = *($0)
	*($2 + [16]) = ($2 + [152])
	CALL $63(($2 + [64]), ($2 + [24]), $8, ($2 + [16]))
	$11 = *($12)
	if ( ($11 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$1 = *($15)
	if ( ((int_32)$1 == (int_32)$11) ){ goto $label$18 }
	
.LOOP $label$19:
	$1 = ($1 + [-24])
	$9 = *($1)
	*($1) = [0]
	if ( ($9 == 0) ){ goto $label$20 }
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($9 + [16])))
	
.LABEL $label$21
	CALL _ZdlPv($9)
	
.LABEL $label$20
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$19 }
	$1 = *($12)
	goto $label$17 
	
.LABEL $label$18
	$1 = $11
	
.LABEL $label$17
	*($15) = $11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$11 = *($10)
	if ( ($11 == 0) ){ goto $label$22 }
	$14 = (($2 + [72]) + [28])
	$1 = *($14)
	if ( ((int_32)$1 == (int_32)$11) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = ($1 + [-24])
	$9 = *($1)
	*($1) = [0]
	if ( ($9 == 0) ){ goto $label$26 }
	CALL _ZdlPv($9)
	
.LABEL $label$26
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$25 }
	$1 = *($10)
	goto $label$23 
	
.LABEL $label$24
	$1 = $11
	
.LABEL $label$23
	*($14) = $11
	CALL _ZdlPv($1)
	
.LABEL $label$22
	$11 = *($4)
	if ( ($11 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$11) ){ goto $label$28 }
	
.LOOP $label$29:
	$1 = ($1 + [-24])
	$9 = *($1)
	*($1) = [0]
	if ( ($9 == 0) ){ goto $label$30 }
	CALL _ZdlPv($9)
	
.LABEL $label$30
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$29 }
	$1 = *($4)
	goto $label$27 
	
.LABEL $label$28
	$1 = $11
	
.LABEL $label$27
	*($7) = $11
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$3 = ($3 + [24])
	if ( ((int_32)$3 != (int_32)*($6)) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [176])
}

void .FUNC $10 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [256])
	$global$0 = $2
	CALL require_auth($1)
	*(($2 + [216])) = [0]
	*($2 + [200]) = (int_64)-1
	*($2 + [208]) = (int_64)0
	$3 = *($0 + [8])
	*($2 + [184]) = $3
	*($2 + [192]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)5455799419163115520, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $35(($2 + [184]), $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($2 + [184])), [8657])
	$3 = *($0)
	*($2 + [128]) = [9760]
	*($2 + [132]) = CALL $130([9760])
	*($2 + [24]) = *($2 + [128])
	$5 = *(CALL $19(($2 + [136]), ($2 + [24])))
	*($2 + [112]) = [9767]
	*($2 + [116]) = CALL $130([9767])
	*($2 + [16]) = *($2 + [112])
	$6 = CALL $19(($2 + [120]), ($2 + [16]))
	*($2 + [96]) = [9779]
	*($2 + [100]) = CALL $130([9779])
	*($2 + [8]) = *($2 + [96])
	$7 = CALL $19(($2 + [104]), ($2 + [8]))
	$8 = *($0)
	*((($2 + [32]) + [8])) = [0]
	*($2 + [32]) = (int_64)0
	$0 = CALL $130([9788])
	if ( ((uint_32)$0 > (uint_32)[-17]) ){ goto $label$2 }
	$9 = ($4 + [8])
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$6 }
	*($2 + [32]) = ($0 << [1])
	$10 = (($2 + [32]) | [1])
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	CALL eosio_assert([0], [9733])
	$10 = *($2 + [208])
	if ( $10 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$6
	$11 = (($0 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($2 + [32]) = ($11 | [1])
	*($2 + [40]) = $10
	*($2 + [36]) = $0
	
.LABEL $label$5
	CALL memcpy($10, [9788], $0)
	
.LABEL $label$4
	*(($10 + $0)) = [0]
	*($2 + [56]) = $1
	$1 = *(($9 + [8]))
	$12 = *($9)
	$0 = (($2 + [32]) + [8])
	*(($2 + [88])) = *($0)
	*($0) = [0]
	*((($2 + [48]) + [24])) = $1
	*($2 + [48]) = $8
	$1 = *($2 + [32])
	*($2 + [32]) = (int_64)0
	*($2 + [144]) = *($6)
	*($2 + [152]) = *($7)
	*($2 + [80]) = $1
	*($2 + [64]) = $12
	*(($0 = CALL _Znwj([16]))) = $3
	*($0 + [8]) = $5
	*((($2 + [144]) + [36])) = [0]
	$10 = ($0 + [16])
	*((($2 + [144]) + [24])) = $10
	*(($2 + [164])) = $10
	*($2 + [160]) = $0
	*($2 + [172 align=4]) = (int_64)0
	$0 = *($2 + [80])
	$10 = ( *((($2 + [48]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($10 + [32])
	$3 = (CASTING uint_64)(uint_32 $10)
	$10 = ($2 + [172])
	
.LOOP $label$8:
	$0 = ($0 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	if ( ($0 == 0) ){ goto $label$10 }
	CALL $64($10, $0)
	$10 = *(($2 + [176]))
	$0 = *(($2 + [172]))
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	$0 = [0]
	
.LABEL $label$9
	*($2 + [244]) = $0
	*($2 + [240]) = $0
	*($2 + [248]) = $10
	*($2 + [224]) = ($2 + [240])
	*($2 + [232]) = ($2 + [48])
	CALL $65(($2 + [232]), ($2 + [224]))
	CALL $66(($2 + [240]), ($2 + [144]))
	$0 = *($2 + [240])
	CALL send_inline($0, (*($2 + [244]) - $0))
	$0 = *($2 + [240])
	if ( ($0 == 0) ){ goto $label$11 }
	*($2 + [244]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$0 = *($2 + [172])
	if ( ($0 == 0) ){ goto $label$12 }
	*(($2 + [176])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$12
	$0 = *($2 + [160])
	if ( ($0 == 0) ){ goto $label$13 }
	*(($2 + [164])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((*(($2 + [80])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($2 + [88])))
	
.LABEL $label$14
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($2 + [40])))
	
.LABEL $label$15
	CALL eosio_assert([1], [9828])
	CALL eosio_assert([1], [9585])
	$0 = CALL db_next_i64(*($4 + [28]), ($2 + [48]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$16 }
	CALL $35(($2 + [184]), $0)
	
.LABEL $label$16
	CALL $67(($2 + [184]), $4)
	$10 = *($2 + [208])
	if ( ($10 == 0) ){ goto $label$1 }
	
.LABEL $label$3
	$9 = ($2 + [212])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$10) ){ goto $label$18 }
	
.LOOP $label$19:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$19 }
	$0 = *(($2 + [208]))
	goto $label$17 
	
.LABEL $label$18
	$0 = $10
	
.LABEL $label$17
	*($9) = $10
	CALL _ZdlPv($0)
	$global$0 = ($2 + [256])
	return (unreachable)
	
.LABEL $label$2
	CALL $123(($2 + [32]))
	
.LABEL $label$1
	$global$0 = ($2 + [256])
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8731])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $136($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [160])
	$global$0 = $3
	*($3 + [152]) = $1
	*($3 + [72]) = [9477]
	*($3 + [76]) = CALL $130([9477])
	*($3 + [8]) = *($3 + [72])
	CALL require_auth(*(CALL $19(($3 + [112]), ($3 + [8]))))
	*((($3 + [112]) + [32])) = [0]
	*($3 + [128]) = (int_64)-1
	*($3 + [136]) = (int_64)0
	$4 = *($0 + [8])
	*($3 + [112]) = $4
	*($3 + [120]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)-4157661383434960896, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $22(($3 + [112]), $5)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($3 + [112])), [8657])
	*((($3 + [72]) + [32])) = [0]
	*($3 + [88]) = (int_64)-1
	*($3 + [96]) = (int_64)0
	$4 = *(($0 + [8]))
	*($3 + [72]) = $4
	*($3 + [80]) = $4
	$6 = CALL db_find_i64($4, $4, (int_64)-4157661186618015744, *($3 + [152]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $34(($3 + [72]), $6)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($3 + [72])), [8657])
	$4 = *($0)
	*($3 + [28]) = $2
	*($3 + [24]) = ($3 + [152])
	CALL eosio_assert([1], [8793])
	CALL $42(($3 + [72]), $6, $4, ($3 + [24]))
	goto $label$3 
	
.LABEL $label$5
	CALL eosio_assert([0], [9615])
	$7 = *($3 + [136])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$4 = *($0)
	*($3 + [28]) = $2
	*($3 + [24]) = ($3 + [152])
	CALL $43(($3 + [64]), ($3 + [72]), $4, ($3 + [24]))
	
.LABEL $label$3
	$4 = *($0)
	*($3 + [28]) = $2
	*($3 + [24]) = ($3 + [152])
	CALL eosio_assert([1], [8793])
	CALL $44(($3 + [112]), $5, $4, ($3 + [24]))
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)-1
	$4 = *(($0 + [8]))
	*($3 + [24]) = $4
	*($3 + [32]) = $4
	*($3 + [48]) = (int_64)0
	$5 = CALL db_find_i64($4, $4, (int_64)-4157660942777958400, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $27(($3 + [24]), $5)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)($3 + [24])), [8657])
	$4 = *($0)
	*($3 + [64]) = $2
	CALL eosio_assert([1], [8793])
	CALL $45(($3 + [24]), $5, $4, ($3 + [64]))
	goto $label$6 
	
.LABEL $label$7
	$4 = *($0)
	*($3 + [16]) = $2
	CALL $46(($3 + [64]), ($3 + [24]), $4, ($3 + [16]))
	
.LABEL $label$6
	$6 = *(($3 + [52]))
	$8 = *(($3 + [48]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$14:
	$5 = ($6 + [-24])
	$7 = *($5)
	if ( ((int_64)*($7) == (int_64)1) ){ goto $label$13 }
	$6 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($3 + [24])), [8657])
	goto $label$11 
	
.LABEL $label$12
	$5 = CALL db_find_i64(*($3 + [24]), *(($3 + [32])), (int_64)-4157660942777958400, (int_64)1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$7 = CALL $27(($3 + [24]), $5)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($3 + [24])), [8657])
	
.LABEL $label$11
	$4 = *($0)
	*($3 + [64]) = $2
	CALL eosio_assert([1], [8793])
	CALL $47(($3 + [24]), $7, $4, ($3 + [64]))
	$7 = *($3 + [48])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = *($0)
	*($3 + [16]) = $2
	CALL $48(($3 + [64]), ($3 + [24]), $4, ($3 + [16]))
	$7 = *($3 + [48])
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$8 = ($3 + [52])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$16 }
	
.LOOP $label$17:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$18 }
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$19
	CALL _ZdlPv($6)
	
.LABEL $label$18
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	$5 = *(($3 + [48]))
	goto $label$15 
	
.LABEL $label$16
	$5 = $7
	
.LABEL $label$15
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$8
	$7 = *($3 + [96])
	if ( ($7 == 0) ){ goto $label$20 }
	$8 = ($3 + [100])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$22 }
	
.LOOP $label$23:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$24 }
	CALL _ZdlPv($6)
	
.LABEL $label$24
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$23 }
	$5 = *(($3 + [96]))
	goto $label$21 
	
.LABEL $label$22
	$5 = $7
	
.LABEL $label$21
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$20
	$7 = *($3 + [136])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($3 + [140])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$26 }
	
.LOOP $label$27:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$28 }
	CALL _ZdlPv($6)
	
.LABEL $label$28
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$27 }
	$5 = *(($3 + [136]))
	goto $label$25 
	
.LABEL $label$26
	$5 = $7
	
.LABEL $label$25
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($3 + [160])
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [240])
	$global$0 = $3
	*($3 + [232]) = $1
	CALL require_auth($1)
	$4 = CALL $130([8192])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8402])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$1 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($4 + [8191]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8447])
	
.LABEL $label$6
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$1 = ((int_64)$1 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$1 = (int_64)0
	
.LABEL $label$1
	$6 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$1 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $7
	$5 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$1 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $5 ){ goto $label$11 }
	$5 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [8196])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)$6), [8296])
	$1 = (int_64)0
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [8322])
	*($3 + [152]) = [8351]
	*($3 + [156]) = CALL $130([8351])
	*($3 + [8]) = *($3 + [152])
	$7 = *(CALL $19(($3 + [192]), ($3 + [8])))
	*(($3 + [224])) = [0]
	*($3 + [192]) = $7
	*($3 + [208]) = (int_64)-1
	*($3 + [216]) = (int_64)0
	*($3 + [200]) = *($3 + [232])
	$4 = CALL $130([8192])
	if ( ($4 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [8402])
	goto $label$13 
	
.LABEL $label$14
	if ( ($4 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$1 = (int_64)0
	
.LOOP $label$15:
	$5 = *(($4 + [8191]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [8447])
	
.LABEL $label$16
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$15 }
	$1 = ((int_64)$1 & (int_64)72057594037927935)
	
.LABEL $label$12
	$6 = *(CALL $20(($3 + [192]), $1, [8364]))
	*((($3 + [152]) + [32])) = [0]
	*($3 + [168]) = (int_64)-1
	*($3 + [176]) = (int_64)0
	$1 = *($0 + [8])
	*($3 + [152]) = $1
	*($3 + [160]) = $1
	$7 = (int_64)0
	$4 = CALL db_find_i64($1, $1, (int_64)-4157660956847919136, *($3 + [232]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$17 }
	$4 = CALL $21(($3 + [152]), $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($3 + [152])), [8657])
	$7 = *($4 + [8])
	
.LABEL $label$17
	CALL eosio_assert(((int_64)$6 >= (int_64)((int_64)*($2) + (int_64)$7)), [8381])
	*((($3 + [112]) + [32])) = [0]
	*($3 + [128]) = (int_64)-1
	*($3 + [136]) = (int_64)0
	$1 = *(($0 + [8]))
	*($3 + [112]) = $1
	*($3 + [120]) = $1
	$4 = CALL db_find_i64($1, $1, (int_64)-4157661383434960896, *($3 + [232]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$19 }
	$4 = CALL $22(($3 + [112]), $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($3 + [112])), [8657])
	$1 = *($0)
	*($3 + [76]) = $2
	*($3 + [72]) = ($3 + [232])
	CALL eosio_assert([1], [8793])
	CALL $23(($3 + [112]), $4, $1, ($3 + [72]))
	goto $label$18 
	
.LABEL $label$19
	$1 = *($0)
	*($3 + [76]) = $2
	*($3 + [72]) = ($3 + [232])
	CALL $24(($3 + [24]), ($3 + [112]), $1, ($3 + [72]))
	
.LABEL $label$18
	*(($3 + [104])) = [0]
	*($3 + [88]) = (int_64)-1
	*($3 + [96]) = (int_64)0
	$1 = *(($0 + [8]))
	*($3 + [72]) = $1
	*($3 + [80]) = $1
	$4 = CALL db_find_i64($1, $1, (int_64)-4157660956847919136, *($3 + [232]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$21 }
	$4 = CALL $21(($3 + [72]), $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($3 + [72])), [8657])
	$1 = *($0)
	*($3 + [28]) = $2
	*($3 + [24]) = ($3 + [232])
	CALL eosio_assert([1], [8793])
	CALL $25(($3 + [72]), $4, $1, ($3 + [24]))
	goto $label$20 
	
.LABEL $label$21
	$1 = *($0)
	*($3 + [28]) = $2
	*($3 + [24]) = ($3 + [232])
	CALL $26(($3 + [64]), ($3 + [72]), $1, ($3 + [24]))
	
.LABEL $label$20
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)-1
	$1 = *(($0 + [8]))
	*($3 + [24]) = $1
	*($3 + [32]) = $1
	*($3 + [48]) = (int_64)0
	$4 = CALL db_find_i64($1, $1, (int_64)-4157660942777958400, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$24 }
	$4 = CALL $27(($3 + [24]), $4)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)($3 + [24])), [8657])
	$1 = *($0)
	*($3 + [64]) = $2
	CALL eosio_assert([1], [8793])
	CALL $28(($3 + [24]), $4, $1, ($3 + [64]))
	$8 = *($3 + [48])
	if ( $8 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$1 = *($0)
	*($3 + [16]) = $2
	CALL $29(($3 + [64]), ($3 + [24]), $1, ($3 + [16]))
	$8 = *($3 + [48])
	if ( ($8 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$2 = ($3 + [52])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$26 }
	
.LOOP $label$27:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$28 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$29
	CALL _ZdlPv($5)
	
.LABEL $label$28
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$27 }
	$4 = *(($3 + [48]))
	goto $label$25 
	
.LABEL $label$26
	$4 = $8
	
.LABEL $label$25
	*($2) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$22
	$8 = *($3 + [96])
	if ( ($8 == 0) ){ goto $label$30 }
	$2 = ($3 + [100])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$32 }
	
.LOOP $label$33:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$34 }
	CALL _ZdlPv($5)
	
.LABEL $label$34
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$33 }
	$4 = *(($3 + [96]))
	goto $label$31 
	
.LABEL $label$32
	$4 = $8
	
.LABEL $label$31
	*($2) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$30
	$8 = *($3 + [136])
	if ( ($8 == 0) ){ goto $label$35 }
	$2 = ($3 + [140])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$37 }
	
.LOOP $label$38:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$39 }
	CALL _ZdlPv($5)
	
.LABEL $label$39
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$38 }
	$4 = *(($3 + [136]))
	goto $label$36 
	
.LABEL $label$37
	$4 = $8
	
.LABEL $label$36
	*($2) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$35
	$8 = *($3 + [176])
	if ( ($8 == 0) ){ goto $label$40 }
	$2 = ($3 + [180])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$42 }
	
.LOOP $label$43:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$44 }
	CALL _ZdlPv($5)
	
.LABEL $label$44
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$43 }
	$4 = *(($3 + [176]))
	goto $label$41 
	
.LABEL $label$42
	$4 = $8
	
.LABEL $label$41
	*($2) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$40
	$8 = *($3 + [216])
	if ( ($8 == 0) ){ goto $label$45 }
	$2 = ($3 + [220])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$47 }
	
.LOOP $label$48:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$49 }
	CALL _ZdlPv($5)
	
.LABEL $label$49
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$48 }
	$4 = *(($3 + [216]))
	goto $label$46 
	
.LABEL $label$47
	$4 = $8
	
.LABEL $label$46
	*($2) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$45
	$global$0 = ($3 + [240])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$2 = [0]
	$8 = CALL action_data_size()
	if ( ($8 == 0) ){ goto $label$1 }
	if ( ($8 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($8)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $8)
	
.LABEL $label$1
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $8)
	CALL $56(($4 + [48]), ($4 + [64]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [80]) + [8])) = $3
	*(($9 = (($4 + [96]) + [8]))) = $3
	$10 = *($4)
	*($4 + [96]) = $10
	*($4 + [80]) = $10
	$3 = *($9)
	*((($4 + [112]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	*($4 + [104]) = [0]
	*($4 + [96]) = (int_64)0
	$3 = (*($4 + [68]) - *($4 + [64]))
	$9 = ((int_32)$3 / (int_32)[24])
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((uint_32)$9 >= (uint_32)[178956971]) ){ goto $label$5 }
	$7 = CALL _Znwj($3)
	*(($4 + [104])) = ($7 + ((int_32)$9 * (int_32)[24]))
	*($4 + [96]) = $7
	*($4 + [100]) = $7
	$9 = *($4 + [64])
	$3 = (*($4 + [68]) - $9)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($7, $9, $3)
	$7 = (*($4 + [100]) + ((int_32)((uint_32)$3 / (uint_32)[24]) * (int_32)[24]))
	*($4 + [100]) = $7
	
.LABEL $label$6
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	*($4 + [120]) = [0]
	*($4 + [112]) = (int_64)0
	$7 = ($7 - *($4 + [96]))
	$5 = ((int_32)$7 / (int_32)[24])
	if ( ($7 == 0) ){ goto $label$8 }
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$4 }
	$7 = CALL _Znwj($7)
	*(($4 + [120])) = ($7 + ((int_32)$5 * (int_32)[24]))
	*($4 + [112]) = $7
	*($4 + [116]) = $7
	$9 = *($4 + [96])
	$5 = (*($4 + [100]) - $9)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($7, $9, $5)
	*($4 + [116]) = ($7 + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$8
	CALL void $3((int_32 ($4 + [112])), (int_32 $6))
	$7 = *($4 + [112])
	if ( ($7 == 0) ){ goto $label$9 }
	*($4 + [116]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [96])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [100]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ($8 <= [513]) ){ goto $label$11 }
	CALL $136($2)
	
.LABEL $label$11
	$2 = *($4 + [64])
	if ( ($2 == 0) ){ goto $label$12 }
	*($4 + [68]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$global$0 = ($4 + [128])
	return [1]
	
.LABEL $label$5
	CALL $127(($4 + [96]))
	
.LABEL $label$4
	CALL $127(($4 + [112]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8500])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8605])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8538])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8605])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = $1
	CALL $107(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $97(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$5 = *($1)
	*($1) = *(*($3))
	$6 = *($1 + [8])
	$3 = ($1 + [16])
	$8 = *($3)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$8), [9386])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($6 - *($7))) > (int_64)-4611686018427387904), [9434])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9456])
	*($3) = $8
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8925])
	CALL eosio_assert([1], [8787])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = $1
	CALL $104(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $97(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$5 = *($1)
	*($1) = *(*($3))
	$6 = *($1 + [8])
	$3 = ($1 + [16])
	$8 = *($3)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$8), [9386])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($6 - *($7))) > (int_64)-4611686018427387904), [9434])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9456])
	*($3) = $8
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8925])
	CALL eosio_assert([1], [8787])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$6 = *($1)
	$7 = *($1 + [24])
	$8 = ($1 + [32])
	$9 = *($8)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9386])
	$7 = (int_64)
	CALL eosio_assert(((int_64)$7($7 - *($3))) > (int_64)-4611686018427387904), [9434])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9456])
	*($8) = $9
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8925])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [24])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $133($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8787])
	CALL memcpy($4, $1, [8])
	*($5 + [12]) = ($4 + [8])
	CALL $84(($5 + [8]), $8)
	CALL eosio_assert(((int_32)(*($5 + [16]) - *($5 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($1 + [24]), [8])
	$8 = (*($5 + [12]) + [8])
	*($5 + [12]) = $8
	*($5 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($5 + [16]) - $8) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($5 + [24]), [8])
	*($5 + [12]) = (*($5 + [12]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = $1
	CALL $105(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $79(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$6 = *($1)
	$7 = *($1 + [24])
	$8 = ($1 + [32])
	$9 = *($8)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [8984])
	$7 = ((int_64)$7 + (int_64)*($3))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9027])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9046])
	*($8) = $9
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8925])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [24])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $133($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8787])
	CALL memcpy($4, $1, [8])
	*($5 + [12]) = ($4 + [8])
	CALL $84(($5 + [8]), $8)
	CALL eosio_assert(((int_32)(*($5 + [16]) - *($5 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($1 + [24]), [8])
	$8 = (*($5 + [12]) + [8])
	*($5 + [12]) = $8
	*($5 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($5 + [16]) - $8) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($5 + [24]), [8])
	*($5 + [12]) = (*($5 + [12]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8708])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $133($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8731])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8731])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8731])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $97(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $136($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [9064])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$3 = *($1)
	$6 = *($1 + [4])
	$4 = ((int_32)($6 - $3) / (int_32)[24])
	if ( ((uint_32)$4 >= (uint_32)$8) ){ goto $label$4 }
	CALL $114($1, ($8 - $4))
	$6 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 <= (uint_32)$8) ){ goto $label$5 }
	$6 = ($3 + ((int_32)$8 * (int_32)[24]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($0 + [4])
	$7 = *($8)
	
.LOOP $label$6:
	$4 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [8731])
	CALL memcpy($3, *($8), [8])
	$7 = (*($8) + [8])
	*($8) = $7
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [8731])
	CALL memcpy(($3 + [8]), *($8), [8])
	$7 = (*($8) + [8])
	*($8) = $7
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [8731])
	CALL memcpy(($2 + [8]), *($8), [8])
	*(($3 + [16])) = *($2 + [8])
	$7 = (*($8) + [8])
	*($8) = $7
	$3 = ($3 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$5 = *($1)
	*($1) = *(*($3))
	$6 = *($1 + [8])
	$3 = ($1 + [16])
	$8 = *($3)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$8), [8984])
	$6 = ((int_64)$6 + (int_64)*($7))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9027])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9046])
	*($3) = $8
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8925])
	CALL eosio_assert([1], [8787])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $136($0)
	
.LABEL $label$1
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[24])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[24]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[24]))
	$3 = ($2 + ((int_32)$3 * (int_32)[24]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[24]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 + ((int_32)((int_32)$2 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$8
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$9 }
	CALL _ZdlPv($6)
	
.LABEL $label$9
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8708])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $133($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8731])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8731])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8731])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $99(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $136($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [9064])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$3 = *($1)
	$6 = *($1 + [4])
	$4 = ((int_32)($6 - $3) / (int_32)[24])
	if ( ((uint_32)$4 >= (uint_32)$8) ){ goto $label$4 }
	CALL $113($1, ($8 - $4))
	$6 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 <= (uint_32)$8) ){ goto $label$5 }
	$6 = ($3 + ((int_32)$8 * (int_32)[24]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($0 + [4])
	$7 = *($8)
	
.LOOP $label$6:
	$4 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [8731])
	CALL memcpy($3, *($8), [8])
	$7 = (*($8) + [8])
	*($8) = $7
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [8731])
	CALL memcpy(($3 + [8]), *($8), [8])
	$7 = (*($8) + [8])
	*($8) = $7
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [8731])
	CALL memcpy(($2 + [8]), *($8), [8])
	*(($3 + [16])) = *($2 + [8])
	$7 = (*($8) + [8])
	*($8) = $7
	$3 = ($3 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[24])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[24]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[24]))
	$3 = ($2 + ((int_32)$3 * (int_32)[24]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[24]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 + ((int_32)((int_32)$2 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$8
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$9 }
	CALL _ZdlPv($6)
	
.LABEL $label$9
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8787])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8787])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8787])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8787])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8787])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $131(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10012])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $131(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = $1
	CALL $78(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $79(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$6 = *($1)
	$7 = *($1 + [24])
	$8 = ($1 + [32])
	$9 = *($8)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [8984])
	$7 = ((int_64)$7 + (int_64)*($3))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9027])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9046])
	*($8) = $9
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8925])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [24])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $133($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8787])
	CALL memcpy($4, $1, [8])
	*($5 + [12]) = ($4 + [8])
	CALL $84(($5 + [8]), $8)
	CALL eosio_assert(((int_32)(*($5 + [16]) - *($5 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($1 + [24]), [8])
	$8 = (*($5 + [12]) + [8])
	*($5 + [12]) = $8
	*($5 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($5 + [16]) - $8) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($5 + [24]), [8])
	*($5 + [12]) = (*($5 + [12]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = $1
	CALL $106(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $79(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(($5 = ($1 + [16]))) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	*($2 + [24]) = *($5)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($2 + [16]), ($2 + [24]), [8])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157661186618015744, *(*($0 + [8])), $6, $2, [24])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	*($1) = (int_64)1
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = ($1 + [8])
	CALL $126($6, [9646])
	$5 = *($5)
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$5 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8787])
	CALL memcpy($2, $1, [8])
	*($3 + [12]) = ($2 + [8])
	CALL $84(($3 + [8]), $6)
	CALL eosio_assert(((int_32)(*($3 + [16]) - *($3 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), $7, [8])
	$6 = (*($3 + [12]) + [8])
	*($3 + [12]) = $6
	*($3 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($3 + [16]) - $6) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), ($3 + [24]), [8])
	*($3 + [12]) = (*($3 + [12]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157660942777958400, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [32])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8708])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $133($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8731])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8731])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8731])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $77(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $136($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $20 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8657])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $73($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8657])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$5 = *($1)
	*($1) = *(*($3))
	$6 = *($1 + [8])
	$3 = ($1 + [16])
	$8 = *($3)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$8), [8984])
	$6 = ((int_64)$6 + (int_64)*($7))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9027])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9046])
	*($3) = $8
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8925])
	CALL eosio_assert([1], [8787])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8708])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $133($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8731])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8731])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8731])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $75(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $136($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$5 = *($1)
	*($1) = *(*($3))
	$6 = *($1 + [8])
	$3 = ($1 + [16])
	$8 = *($3)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$8), [8984])
	$6 = ((int_64)$6 + (int_64)*($7))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9027])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9046])
	*($3) = $8
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8925])
	CALL eosio_assert([1], [8787])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = $1
	CALL $74(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $75(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8708])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $133($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	CALL $81(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $79(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $136($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = $1
	CALL $76(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $77(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	*($1) = (int_64)1
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = ($1 + [8])
	CALL $126($6, [9646])
	$5 = *($5)
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$5 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8787])
	CALL memcpy($2, $1, [8])
	*($3 + [12]) = ($2 + [8])
	CALL $84(($3 + [8]), $6)
	CALL eosio_assert(((int_32)(*($3 + [16]) - *($3 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), $7, [8])
	$6 = (*($3 + [12]) + [8])
	*($3 + [12]) = $6
	*($3 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($3 + [16]) - $6) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), ($3 + [24]), [8])
	*($3 + [12]) = (*($3 + [12]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157660942777958400, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [32])
}

int_32 .FUNC $135 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10024]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10028])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10024]) = [1]
	$2 = ($2 << [16])
	*([0] + [10028]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10028])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10028]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10024]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10024]) = [1]
	$3 = ($3 << [16])
	*([0] + [10028]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10028])
	
.LABEL $label$10
	*([0] + [10028]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9862])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9907])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9957])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9862])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9907])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9957])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = ($1 + [8])
	CALL $126($6, [9068])
	$5 = *($5)
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$5 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8787])
	CALL memcpy($2, $1, [8])
	*($3 + [12]) = ($2 + [8])
	CALL $84(($3 + [8]), $6)
	CALL eosio_assert(((int_32)(*($3 + [16]) - *($3 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), $7, [8])
	$6 = (*($3 + [12]) + [8])
	*($3 + [12]) = $6
	*($3 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($3 + [16]) - $6) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), ($3 + [24]), [8])
	*($3 + [12]) = (*($3 + [12]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157660942777958400, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [32])
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8787])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8787])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8787])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8787])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $84(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $127($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9862])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9907])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9957])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $64($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8787])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8787])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $111(CALL $110($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = $1
	CALL $108(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $79(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$6 = *($1)
	$7 = *($1 + [24])
	$8 = ($1 + [32])
	$9 = *($8)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9386])
	$7 = (int_64)
	CALL eosio_assert(((int_64)$7($7 - *($3))) > (int_64)-4611686018427387904), [9434])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9456])
	*($8) = $9
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8925])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [24])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $133($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8787])
	CALL memcpy($4, $1, [8])
	*($5 + [12]) = ($4 + [8])
	CALL $84(($5 + [8]), $8)
	CALL eosio_assert(((int_32)(*($5 + [16]) - *($5 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($1 + [24]), [8])
	$8 = (*($5 + [12]) + [8])
	*($5 + [12]) = $8
	*($5 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($5 + [16]) - $8) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($5 + [24]), [8])
	*($5 + [12]) = (*($5 + [12]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = $1
	CALL $109(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $79(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$6 = *($1)
	$7 = *($1 + [24])
	$8 = ($1 + [32])
	$9 = *($8)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [8984])
	$7 = ((int_64)$7 + (int_64)*($3))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9027])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9046])
	*($8) = $9
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8925])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [24])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $133($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8787])
	CALL memcpy($4, $1, [8])
	*($5 + [12]) = ($4 + [8])
	CALL $84(($5 + [8]), $8)
	CALL eosio_assert(((int_32)(*($5 + [16]) - *($5 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($1 + [24]), [8])
	$8 = (*($5 + [12]) + [8])
	*($5 + [12]) = $8
	*($5 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($5 + [16]) - $8) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($5 + [24]), [8])
	*($5 + [12]) = (*($5 + [12]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(($5 = ($1 + [16]))) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	*($2 + [24]) = *($5)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($2 + [16]), ($2 + [24]), [8])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157661186618015744, *(*($0 + [8])), $6, $2, [24])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(($5 = ($1 + [16]))) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	*($2 + [24]) = *($5)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($2 + [16]), ($2 + [24]), [8])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)5455799419163115520, *(*($0 + [8])), $6, $2, [24])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	*($1) = (int_64)1
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = ($1 + [8])
	CALL $126($6, [9646])
	$5 = *($5)
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$5 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8787])
	CALL memcpy($2, $1, [8])
	*($3 + [12]) = ($2 + [8])
	CALL $84(($3 + [8]), $6)
	CALL eosio_assert(((int_32)(*($3 + [16]) - *($3 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), $7, [8])
	$6 = (*($3 + [12]) + [8])
	*($3 + [12]) = $6
	*($3 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($3 + [16]) - $6) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), ($3 + [24]), [8])
	*($3 + [12]) = (*($3 + [12]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157660942777958400, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [32])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = ($1 + [8])
	CALL $126($6, [9068])
	$5 = *($5)
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$5 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8787])
	CALL memcpy($2, $1, [8])
	*($3 + [12]) = ($2 + [8])
	CALL $84(($3 + [8]), $6)
	CALL eosio_assert(((int_32)(*($3 + [16]) - *($3 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), $7, [8])
	$6 = (*($3 + [12]) + [8])
	*($3 + [12]) = $6
	*($3 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($3 + [16]) - $6) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), ($3 + [24]), [8])
	*($3 + [12]) = (*($3 + [12]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157660942777958400, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [32])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = ($1 + [8])
	CALL $126($6, [9068])
	$5 = *($5)
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$5 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8787])
	CALL memcpy($2, $1, [8])
	*($3 + [12]) = ($2 + [8])
	CALL $84(($3 + [8]), $6)
	CALL eosio_assert(((int_32)(*($3 + [16]) - *($3 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), $7, [8])
	$6 = (*($3 + [12]) + [8])
	*($3 + [12]) = $6
	*($3 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($3 + [16]) - $6) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), ($3 + [24]), [8])
	*($3 + [12]) = (*($3 + [12]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157660942777958400, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [32])
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(($5 = ($1 + [16]))) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	*($2 + [24]) = *($5)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($2 + [16]), ($2 + [24]), [8])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157661186618015744, *(*($0 + [8])), $6, $2, [24])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$6 = *($1)
	$7 = *($1 + [24])
	$8 = ($1 + [32])
	$9 = *($8)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9386])
	$7 = (int_64)
	CALL eosio_assert(((int_64)$7($7 - *($3))) > (int_64)-4611686018427387904), [9434])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9456])
	*($8) = $9
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8925])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [24])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $133($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8787])
	CALL memcpy($4, $1, [8])
	*($5 + [12]) = ($4 + [8])
	CALL $84(($5 + [8]), $8)
	CALL eosio_assert(((int_32)(*($5 + [16]) - *($5 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($1 + [24]), [8])
	$8 = (*($5 + [12]) + [8])
	*($5 + [12]) = $8
	*($5 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($5 + [16]) - $8) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($5 + [24]), [8])
	*($5 + [12]) = (*($5 + [12]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$6 = *($1)
	$7 = *($1 + [24])
	$8 = ($1 + [32])
	$9 = *($8)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [9386])
	$7 = (int_64)
	CALL eosio_assert(((int_64)$7($7 - *($3))) > (int_64)-4611686018427387904), [9434])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9456])
	*($8) = $9
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8925])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [24])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $133($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8787])
	CALL memcpy($4, $1, [8])
	*($5 + [12]) = ($4 + [8])
	CALL $84(($5 + [8]), $8)
	CALL eosio_assert(((int_32)(*($5 + [16]) - *($5 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($1 + [24]), [8])
	$8 = (*($5 + [12]) + [8])
	*($5 + [12]) = $8
	*($5 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($5 + [16]) - $8) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($5 + [24]), [8])
	*($5 + [12]) = (*($5 + [12]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$5 = *($1)
	*($1) = *(*($3))
	$6 = *($1 + [8])
	$3 = ($1 + [16])
	$8 = *($3)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$8), [9386])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($6 - *($7))) > (int_64)-4611686018427387904), [9434])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9456])
	*($3) = $8
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8925])
	CALL eosio_assert([1], [8787])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$5 = *($1)
	*($1) = *(*($3))
	$6 = *($3 + [4])
	$7 = *($6)
	$8 = *($6 + [8])
	$3 = *($3 + [8])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$8), [9386])
	$7 = (int_64)
	CALL eosio_assert(((int_64)$7($7 - *($3))) > (int_64)-4611686018427387904), [9434])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9456])
	$9 = *($1 + [8])
	$3 = ($1 + [16])
	$10 = *($3)
	CALL eosio_assert(((int_64)$8 == (int_64)$10), [9386])
	$7 = (int_64)
	CALL eosio_assert(((int_64)$7($9 - $7)) > (int_64)-4611686018427387904), [9434])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9456])
	*($3) = $10
	*($1 + [8]) = $7
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8925])
	CALL eosio_assert([1], [8787])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = *($0 + [12])
	$5 = ($1 + [16])
	$4 = *($0)
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*($5)), [9327])
	$6 = *($1 + [8])
	if ( ((int_64)*($4) <= (int_64)$6) ){ goto $label$13 }
	$4 = ($1 + [8])
	$7 = *(($4 + [8]))
	*((($2 + [96]) + [8])) = $7
	$8 = *($4)
	*($2 + [96]) = $8
	*($1) = *(*($0 + [4]))
	*((($9 = *($0 + [8])) + [8])) = $7
	*($9) = $8
	$7 = *($5)
	CALL eosio_assert([1], [9386])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($6 - *($1 + [8]))) > (int_64)-4611686018427387904), [9434])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9456])
	*($5) = $7
	*($1 + [8]) = $6
	CALL prints([9225])
	CALL $30($4)
	$1 = *($0 + [8])
	CALL prints([9245])
	CALL $30($1)
	$6 = *($3 + [8])
	*(($2 + [88])) = [0]
	*($2 + [56]) = $6
	*($2 + [64]) = $6
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	$1 = CALL db_find_i64($6, $6, (int_64)-4157661186618015744, *(*($0 + [4])))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$12 }
	$1 = CALL $34(($2 + [56]), $1)
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)($2 + [56])), [8657])
	$6 = *($3)
	*($2 + [16]) = *(($0 + [4]))
	*($2 + [20]) = *($0)
	*($2 + [24]) = ($2 + [96])
	CALL eosio_assert([1], [8793])
	CALL $86(($2 + [56]), $1, $6, ($2 + [16]))
	goto $label$11 
	
.LABEL $label$13
	$6 = *($3)
	$4 = *($0 + [16])
	$1 = *(*($0 + [20]) + [4])
	*($2 + [56]) = *($0 + [4])
	*($2 + [60]) = *($0)
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [8793])
	CALL $87($4, $1, $6, ($2 + [56]))
	$6 = *($3 + [8])
	*(($2 + [88])) = [0]
	*($2 + [56]) = $6
	*($2 + [64]) = $6
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	$1 = CALL db_find_i64($6, $6, (int_64)-4157660942777958400, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$10 }
	$1 = CALL $27(($2 + [56]), $1)
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)($2 + [56])), [8657])
	$4 = *($0 + [8])
	CALL prints([9294])
	CALL $30($4)
	$6 = *($3)
	*($2 + [16]) = *($0)
	CALL eosio_assert([1], [8793])
	CALL $88(($2 + [56]), $1, $6, ($2 + [16]))
	$0 = *($2 + [80])
	if ( $0 ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$12
	CALL eosio_assert([0], [9264])
	
.LABEL $label$11
	$6 = *(($3 + [8]))
	*(($2 + [48])) = [0]
	*($2 + [24]) = $6
	*($2 + [16]) = $6
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$1 = CALL db_find_i64($6, $6, (int_64)-4157660942777958400, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $27(($2 + [16]), $1)
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)($2 + [16])), [8657])
	$4 = *(($0 + [8]))
	CALL prints([9294])
	CALL $30($4)
	$6 = *($3)
	*($2) = ($2 + [96])
	CALL eosio_assert([1], [8793])
	CALL $89(($2 + [16]), $1, $6, $2)
	goto $label$7 
	
.LABEL $label$10
	$6 = *($3)
	*($2 + [96]) = *($0)
	CALL $90(($2 + [16]), ($2 + [56]), $6, ($2 + [96]))
	$0 = *($2 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$5 = ($2 + [84])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$14:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$16
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$14 }
	$1 = *(($2 + [80]))
	goto $label$5 
	
.LABEL $label$8
	$6 = *($3)
	*($2 + [8]) = *($0)
	CALL $91($2, ($2 + [16]), $6, ($2 + [8]))
	
.LABEL $label$7
	$4 = *(($2 + [44]))
	$9 = *(($2 + [40]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$20 }
	
.LOOP $label$22:
	$1 = ($4 + [-24])
	$5 = *($1)
	if ( ((int_64)*($5) == (int_64)1) ){ goto $label$21 }
	$4 = $1
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$20 }
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)($2 + [16])), [8657])
	goto $label$19 
	
.LABEL $label$20
	$1 = CALL db_find_i64(*($2 + [16]), *(($2 + [24])), (int_64)-4157660942777958400, (int_64)1)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$18 }
	$5 = CALL $27(($2 + [16]), $1)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)($2 + [16])), [8657])
	
.LABEL $label$19
	$1 = *(($0 + [8]))
	CALL prints([9294])
	CALL $30($1)
	$6 = *($3)
	*($2) = *($0)
	*($2 + [4]) = ($2 + [96])
	CALL eosio_assert([1], [8793])
	CALL $92(($2 + [16]), $5, $6, $2)
	$0 = *($2 + [40])
	if ( $0 ){ goto $label$17 }
	goto $label$2 
	
.LABEL $label$18
	$6 = *($3)
	*($2 + [8]) = *($0)
	CALL $93($2, ($2 + [16]), $6, ($2 + [8]))
	$0 = *($2 + [40])
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$17
	$5 = ($2 + [44])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$4 }
	
.LOOP $label$23:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$24 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$25
	CALL _ZdlPv($4)
	
.LABEL $label$24
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$23 }
	$1 = *(($2 + [40]))
	goto $label$3 
	
.LABEL $label$6
	$1 = $0
	
.LABEL $label$5
	*($5) = $0
	CALL _ZdlPv($1)
	$global$0 = ($2 + [112])
	return 
	
.LABEL $label$4
	$1 = $0
	
.LABEL $label$3
	*($5) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$0 = *($2 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	$5 = ($2 + [84])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$27 }
	
.LOOP $label$28:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$29 }
	CALL _ZdlPv($4)
	
.LABEL $label$29
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$28 }
	$1 = *(($2 + [80]))
	goto $label$26 
	
.LABEL $label$27
	$1 = $0
	
.LABEL $label$26
	*($5) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($2 + [112])
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8787])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8787])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9064])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $64($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8731])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $83($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $125($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $125($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $123($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8731])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $82(*($1), *($0 + [4]))
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8731])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [8731])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$3 = *($3)
	*($1 + [24]) = *($3)
	*(($1 + [32])) = *(($3 + [8]))
	$6 = *($1)
	CALL eosio_assert([1], [8925])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	$9 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $133($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8787])
	CALL memcpy($4, $1, [8])
	*($5 + [12]) = ($4 + [8])
	CALL $84(($5 + [8]), $7)
	CALL eosio_assert(((int_32)(*($5 + [16]) - *($5 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), $9, [8])
	$7 = (*($5 + [12]) + [8])
	*($5 + [12]) = $7
	*($5 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($5 + [16]) - $7) > (int_32)[7]), [8787])
	CALL memcpy(*($5 + [12]), ($5 + [24]), [8])
	*($5 + [12]) = (*($5 + [12]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8708])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $133($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8731])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8731])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $80(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $136($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9862])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9907])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9957])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9862])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9907])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9957])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(($5 = ($1 + [16]))) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	*($2 + [24]) = *($5)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($2 + [16]), ($2 + [24]), [8])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157660956847919136, *(*($0 + [8])), $6, $2, [24])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(($5 = ($1 + [16]))) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	*($2 + [24]) = *($5)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($2 + [16]), ($2 + [24]), [8])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157661383434960896, *(*($0 + [8])), $6, $2, [24])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [160])
	$global$0 = $2
	*(($3 = (($2 + [64]) + [8]))) = *(($1 + [8]))
	*(($4 = (($2 + [48]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = (int_64)0
	$5 = [0]
	*($2 + [40]) = [0]
	*($2 + [64]) = *($1)
	*($2 + [48]) = *($1 + [16])
	$6 = (*(($1 + [36])) - *($1 + [32]))
	$7 = ((int_32)$6 / (int_32)[24])
	if ( ($6 == 0) ){ goto $label$6 }
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = CALL _Znwj($6)
	*(($2 + [40])) = ($6 + ((int_32)$7 * (int_32)[24]))
	*($2 + [32]) = $6
	*($2 + [36]) = $6
	$5 = *(($1 + [32]))
	$1 = (*(($1 + [36])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($6, $5, $1)
	$5 = ($6 + ((int_32)((uint_32)$1 / (uint_32)[24]) * (int_32)[24]))
	*($2 + [36]) = $5
	goto $label$4 
	
.LABEL $label$6
	$6 = [0]
	$8 = [0]
	$9 = [0]
	goto $label$3 
	
.LABEL $label$5
	$5 = $6
	
.LABEL $label$4
	$8 = $6
	$9 = $6
	
.LABEL $label$3
	*((($2 + [96]) + [8])) = *($4)
	*((($2 + [80]) + [8])) = *($3)
	*($2 + [96]) = *($2 + [48])
	*($2 + [80]) = *($2 + [64])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$7 = (*($0) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($7) + $1))
	
.LABEL $label$7
	*(($4 = (($2 + [144]) + [8]))) = *((($2 + [80]) + [8]))
	*(($10 = (($2 + [128]) + [8]))) = *((($2 + [96]) + [8]))
	*($2 + [144]) = *($2 + [80])
	*($2 + [128]) = *($2 + [96])
	*($2 + [112]) = (int_64)0
	*($2 + [120]) = [0]
	$0 = ($5 - $9)
	$3 = ((int_32)$0 / (int_32)[24])
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$1 }
	$0 = CALL _Znwj($0)
	*(($2 + [120])) = ($0 + ((int_32)$3 * (int_32)[24]))
	*($2 + [112]) = $0
	*($2 + [116]) = $0
	$5 = ($5 - $8)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($0, $6, $5)
	*($2 + [116]) = ($0 + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$8
	*((($2 + [16]) + [8])) = *($4)
	*(($2 + [8])) = *($10)
	*($2 + [16]) = *($2 + [144])
	*($2) = *($2 + [128])
	CALL void $7((int_32 ($2 + [16])), (int_32 $2), (int_32 ($2 + [112])), (int_32 $1))
	$1 = *($2 + [112])
	if ( ($1 == 0) ){ goto $label$9 }
	*($2 + [116]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2 + [32])
	if ( ($1 == 0) ){ goto $label$10 }
	*($2 + [36]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [160])
	return (unreachable)
	
.LABEL $label$2
	CALL $127(($2 + [32]))
	
.LABEL $label$1
	CALL $127(($2 + [112]))
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$5 = *($1)
	*($1) = *(*($3))
	$6 = *($1 + [8])
	$3 = ($1 + [16])
	$8 = *($3)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$8), [8984])
	$6 = ((int_64)$6 + (int_64)*($7))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9027])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9046])
	*($3) = $8
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8925])
	CALL eosio_assert([1], [8787])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8736])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = $1
	CALL $98(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $99(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = ($1 + [8])
	CALL $126($6, [9068])
	$5 = *($5)
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$5 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $133($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8787])
	CALL memcpy($2, $1, [8])
	*($3 + [12]) = ($2 + [8])
	CALL $84(($3 + [8]), $6)
	CALL eosio_assert(((int_32)(*($3 + [16]) - *($3 + [12])) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), $7, [8])
	$6 = (*($3 + [12]) + [8])
	*($3 + [12]) = $6
	*($3 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($3 + [16]) - $6) > (int_32)[7]), [8787])
	CALL memcpy(*($3 + [12]), ($3 + [24]), [8])
	*($3 + [12]) = (*($3 + [12]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157660942777958400, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $136($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [32])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$5 = *($1)
	*($1) = *(*($3))
	$6 = *($1 + [8])
	$3 = ($1 + [16])
	$8 = *($3)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$8), [9386])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($6 - *($7))) > (int_64)-4611686018427387904), [9434])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9456])
	*($3) = $8
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8925])
	CALL eosio_assert([1], [8787])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *($3)
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8731])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8731])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8731])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [8731])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = *($0 + [8])
	$4 = (CASTING uint_32)(uint_64 $3)
	$5 = ((int_64)$3 & (int_64)255)
	$6 = (int_64)($5 == 0)
	if ( $6 ){ goto $label$2 }
	$3 = ((int_64)$5 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$3:
	$7 = ((int_64)$7 * (int_64)10)
	$3 = ((int_64)$3 + (int_64)-1)
	if ( ((int_64)$3 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)1
	
.LABEL $label$1
	$4 = ($4 & [255])
	$8 = ($1 - (($4 + [16]) & [496]))
	$global$0 = $8
	*(($1 = ($8 + $4))) = [0]
	$9 = *($0)
	if ( $6 ){ goto $label$4 }
	$5 = ((int_64)$5 + (int_64)1)
	$3 = ((int_64)$9 % (int_64)$7)
	$1 = ($1 + [-1])
	
.LOOP $label$5:
	$10 = ((int_64)$3 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$10 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$3 = $10
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)$5 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	CALL printi(((int_64)$9 / (int_64)$7))
	CALL prints([9221])
	CALL prints_l($8, $4)
	CALL prints([9223])
	$3 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$6 }
	$1 = [0]
	
.LOOP $label$8:
	*((($2 + [9]) + $1)) = $3
	$0 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$7 }
	$1 = $0
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	
.LABEL $label$7
	CALL prints_l(($2 + [9]), $0)
	
.LABEL $label$6
	$global$0 = ($2 + [16])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8828])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8874])
	$5 = *($1)
	CALL $85($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8925])
	CALL eosio_assert([1], [8787])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [24]) = *(($1 + [16]))
	CALL eosio_assert([1], [8787])
	CALL memcpy(($4 + [16]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $129 (int_32 $0)
{
}

void .FUNC $127 (int_32 $0)
{
	CALL abort()
	(unreachable)
}