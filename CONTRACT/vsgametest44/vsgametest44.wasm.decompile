(data (i32.const 8192) "\00\89\ca[\80Q\01\00\10\0e\00\00\d2%\00\00")
(data (i32.const 8208) "energy does not match\00")
(data (i32.const 8230) "sender does not match\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8338) "could not find player\00")
(data (i32.const 8360) "null\00")
(data (i32.const 8365) "no admin values yet\00")
(data (i32.const 8385) "error reading iterator\00")
(data (i32.const 8408) "read\00")
(data (i32.const 8413) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8464) "get\00%d\00")
(data (i32.const 8471) "cannot create objects in table of another contract\00")
(data (i32.const 8522) "write\00")
(data (i32.const 8528) "string is too long to be a valid name\00")
(data (i32.const 8566) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8633) "character is not in allowed character set for names\00")
(data (i32.const 8686) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8735) "invalid symbol name\00")
(data (i32.const 8755) "cannot pass end iterator to modify\00")
(data (i32.const 8790) "object passed to modify is not in multi_index\00")
(data (i32.const 8836) "cannot modify objects in table of another contract\00")
(data (i32.const 8887) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8946) "EOS\00")
(data (i32.const 8950) "no vip level\00")
(data (i32.const 8963) "string is too long to be a valid symbol_code\00")
(data (i32.const 9008) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9061) "active\00")
(data (i32.const 9068) "moddivact\00")
(data (i32.const 9078) "attempt to add asset with different symbol\00")
(data (i32.const 9121) "addition underflow\00")
(data (i32.const 9140) "addition overflow\00")
(data (i32.const 9158) "cannot increment end iterator\00")
(data (i32.const 9188) "game is paused\00")
(data (i32.const 9203) "no gift no\00")
(data (i32.const 9214) "{\"code\":10000,\"memo\":\"exceeded the number of people who signed in\"}\00")
(data (i32.const 9282) "{\"code\":10001,\"memo\":\"could not draw gift\"}\00")
(data (i32.const 9326) "{\"code\":10002,\"memo\":\"energy not enough\"}\00")
(data (i32.const 9368) "drawgift\00")
(data (i32.const 9377) "wrong number of actions in transaction\00")
(data (i32.const 9416) "draw.warning\00")
(data (i32.const 9429) "VSbet Lottery Reward\ef\bc\81VSbet\e6\af\8f\e6\97\a5\e6\8a\bd\e5\a5\96\e5\a5\96\e5\8a\b1\ef\bc\81\00")
(data (i32.const 9479) "draw-gift:\00")
(data (i32.const 9490) ":\00")
(data (i32.const 9492) "actdraw\00")
(data (i32.const 9500) "cannot pass end iterator to erase\00")
(data (i32.const 9534) "object passed to erase is not in multi_index\00")
(data (i32.const 9579) "cannot erase objects in table of another contract\00")
(data (i32.const 9629) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9682) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9715) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9769) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9817) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9869) "vip\00")
(data (i32.const 9873) "gift\00")
(data (i32.const 9878) "could not find table\00")
(data (i32.const 9899) "invalid pause value\00")
(data (i32.const 9919) "no admin values\00")
(data (i32.const 9935) "invalid level value\00")
(data (i32.const 9955) "parameter error\00")
(data (i32.const 9971) "no Play a game\00")
(data (i32.const 9986) "no rebates\00")
(data (i32.const 9997) "drawreward\00")
(data (i32.const 10008) "VSbet VIP reward\ef\bc\81 VSbet VIP\e8\bf\94\e5\88\a9\ef\bc\81\00")
(data (i32.const 10047) "VSbet referral reward\ef\bc\81 VSbet\e9\82\80\e8\af\b7\e8\bf\94\e4\bd\a3\ef\bc\81\00")
(data (i32.const 18512) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$5 (param i64)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "db_get_i64" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$9))
(import "env" "current_receiver" (func $fimport$10 (result i64)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "send_inline" (func $fimport$13 (param i32 i32)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "has_auth" (func $fimport$15 (param i64) (result i32)))
(import "env" "send_deferred" (func $fimport$16 (param i32 i64 i32 i32 i32)))
(import "env" "read_transaction" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$19 (result i32)))
(import "env" "tapos_block_num" (func $fimport$20 (result i32)))
(import "env" "sha256" (func $fimport$21 (param i32 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$22 (param i32)))
(import "env" "db_previous_i64" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$24 (param i64 i64 i64) (result i32)))
(import "env" "memset" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$26 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $191))
(export "_Znwj" (func $189))
(export "_Znaj" (func $190))
(export "_ZdaPv" (func $192))
(export "_ZnwjSt11align_val_t" (func $193))
(export "_ZnajSt11align_val_t" (func $194))
(export "_ZdlPvSt11align_val_t" (func $195))
(export "_ZdaPvSt11align_val_t" (func $196))
(table $0 21 21 anyfunc)
(elem (i32.const 1) $2 $4 $6 $8 $10 $12 $14 $15 $17 $18 $20 $21 $22 $23 $25 $26 $28 $29 $209 $211)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18592))
(global $global$2 i32 (i32.const 18592))


int_32 .FUNC $174 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [8522])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($3 | [8]), ($0 + [8]), [4])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-4028354230955598960, *(*($2 + [8])), $4, $3, [12])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $6 (int_32 $0, int_64 $1)
{
	CALL $53(($0 + [400]), $1)
}

void .FUNC $176 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8471])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [16]) = (int_64)0
	*($3 + [8]) = [0]
	*($3 + [24]) = $1
	CALL $180(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $85(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9534])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9579])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9629])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $170 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8471])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($3 + [8]) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = $1
	CALL $171(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [24]) = *(*($3 + [4]))
	$3 = *($0)
	CALL eosio_assert([1], [8522])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($2 | [8]), ($1 + [8]), [1])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($2 | [9]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($2 + [17]), ($1 + [24]), [8])
	$4 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($3 + [8]), (int_64)-4031679089989799264, *(*($0 + [8])), $4, $2, [25])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $172 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8887])
	CALL eosio_assert([1], [8522])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	CALL db_update_i64(*($1 + [20]), $2, $4, [12])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [544])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [536]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8408])
	CALL memcpy(($4 + [536]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [120]) = $0
	$3 = ($4 + [272])
	*(($4 + [132])) = $3
	$8 = ($4 + [32])
	*(($4 + [128])) = $8
	*(($4 + [136])) = $0
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = $0
	*(($4 + [192])) = $0
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [232])) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [264])) = [0]
	*(($4 + [256])) = (int_64)0
	*(($4 + [280])) = $0
	*(($4 + [288])) = $0
	*(($4 + [296])) = (int_64)-1
	*(($4 + [304])) = (int_64)0
	*(($4 + [312])) = [0]
	*(($4 + [320])) = $0
	*(($4 + [328])) = $0
	*(($4 + [336])) = (int_64)-1
	*(($4 + [344])) = (int_64)0
	*(($4 + [352])) = [0]
	*(($4 + [360])) = $0
	*(($4 + [368])) = $0
	*(($4 + [376])) = (int_64)-1
	*(($4 + [384])) = (int_64)0
	*($4 + [272]) = $0
	*(($4 + [392])) = [0]
	*(($4 + [408])) = $8
	*(($4 + [412])) = ($4 + [120])
	*(($4 + [416])) = $3
	*(($4 + [424])) = $0
	*(($4 + [432])) = $0
	*(($4 + [440])) = (int_64)-1
	*(($4 + [448])) = (int_64)0
	*(($4 + [456])) = [0]
	*(($4 + [464])) = $0
	*(($4 + [472])) = $0
	*(($4 + [480])) = $0
	*(($4 + [488])) = $0
	*(($4 + [496])) = (int_64)-1
	*(($4 + [504])) = (int_64)0
	*(($4 + [512])) = [0]
	*($4 + [400]) = $0
	*(($4 + [528])) = $0
	*(($4 + [520])) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [536])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $219($2)
	
.LABEL $label$5
	CALL $31($4)
	$global$0 = ($4 + [544])
	return [1]
}

void .FUNC $178 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [16]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [8887])
	$8 = *($1 + [48])
	$7 = *(($1 + [52]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$3 = [41]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$3 = ((((int_32)uint_32(($9 + [-8]) >> [3]) * (int_32)[5]) + $3) + [5])
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $216($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $79($5, $1)
	CALL db_update_i64(*($1 + [64]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $4 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL $56(($0 + [120]), $1, $2)
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [560])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [552]) = [0]
	*($4 + [544]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8408])
	CALL memcpy(($4 + [544]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[8]), [8408])
	CALL memcpy((($4 + [544]) + [8]), ($2 + [8]), [4])
	*(($4 + [28])) = ($2 + [12])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$3 = ($4 + [280])
	*(($4 + [140])) = $3
	$8 = ($4 + [40])
	*(($4 + [136])) = $8
	*(($4 + [144])) = $0
	*(($4 + [152])) = $0
	*(($4 + [160])) = (int_64)-1
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = $0
	*(($4 + [200])) = $0
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [272])) = [0]
	*(($4 + [264])) = (int_64)0
	*(($4 + [288])) = $0
	*(($4 + [296])) = $0
	*(($4 + [304])) = (int_64)-1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = [0]
	*(($4 + [328])) = $0
	*(($4 + [336])) = $0
	*(($4 + [344])) = (int_64)-1
	*(($4 + [352])) = (int_64)0
	*(($4 + [360])) = [0]
	*(($4 + [368])) = $0
	*(($4 + [376])) = $0
	*(($4 + [384])) = (int_64)-1
	*(($4 + [392])) = (int_64)0
	*($4 + [280]) = $0
	*(($4 + [400])) = [0]
	*(($4 + [416])) = $8
	*(($4 + [420])) = ($4 + [128])
	*(($4 + [424])) = $3
	*(($4 + [432])) = $0
	*(($4 + [440])) = $0
	*(($4 + [448])) = (int_64)-1
	*(($4 + [456])) = (int_64)0
	*(($4 + [464])) = [0]
	*(($4 + [472])) = $0
	*(($4 + [480])) = $0
	*(($4 + [488])) = $0
	*(($4 + [496])) = $0
	*(($4 + [504])) = (int_64)-1
	*(($4 + [512])) = (int_64)0
	*(($4 + [520])) = [0]
	*($4 + [408]) = $0
	*(($4 + [536])) = $0
	*(($4 + [528])) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [552])
	$0 = *($4 + [544])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $219($2)
	
.LABEL $label$5
	CALL $31(($4 + [8]))
	$global$0 = ($4 + [560])
	return [1]
}

void .FUNC $127 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8471])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [16]) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56]) = [0]
	*($3 + [60]) = $1
	CALL $134(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [64])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $75(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [52])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	$3 = ($global$0 - [672])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [584]) + [32]))) = (int_64)0
	*($4 + [592]) = (int_64)0
	*($4 + [584]) = (int_64)0
	*($4 + [600]) = (int_64)0
	*($4 + [608]) = (int_64)0
	*($4 + [572]) = $2
	*($4 + [568]) = $2
	*($4 + [576]) = ($2 + $7)
	*($4 + [656]) = ($4 + [568])
	*($4 + [32]) = ($4 + [584])
	CALL $33(($4 + [32]), ($4 + [656]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [576])
	*($4 + [16]) = *($4 + [568])
	$10 = *($9)
	*(($3 = (($4 + [624]) + [8]))) = $10
	*(($9 = (($4 + [640]) + [8]))) = $10
	$11 = *($4 + [16])
	*($4 + [640]) = $11
	*($4 + [624]) = $11
	$10 = *($9)
	*((($4 + [656]) + [8])) = $10
	*(($4 + [56])) = $10
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$1 = *($4 + [640])
	*($4 + [48]) = $1
	*($4 + [656]) = $1
	*(($4 + [72])) = $0
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [112])) = $0
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	$10 = (($4 + [32]) + [32])
	*(($4 + [160])) = $10
	$12 = ($4 + [304])
	*(($4 + [164])) = $12
	*(($4 + [168])) = $0
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [64]) = $0
	*($4 + [152]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [208])) = $0
	*(($4 + [216])) = $0
	*(($4 + [224])) = $0
	*(($4 + [232])) = $0
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = $0
	*(($4 + [280])) = (int_64)-1
	*(($4 + [288])) = (int_64)0
	*(($4 + [296])) = [0]
	*(($4 + [312])) = $0
	*(($4 + [320])) = $0
	*(($4 + [328])) = (int_64)-1
	*($4 + [304]) = $0
	*(($4 + [344])) = [0]
	*(($4 + [336])) = (int_64)0
	*(($4 + [352])) = $0
	*(($4 + [360])) = $0
	*(($4 + [368])) = (int_64)-1
	*(($4 + [376])) = (int_64)0
	*(($4 + [384])) = [0]
	*(($4 + [392])) = $0
	*(($4 + [400])) = $0
	*(($4 + [408])) = (int_64)-1
	*(($4 + [416])) = (int_64)0
	*(($4 + [424])) = [0]
	*(($4 + [440])) = $10
	*(($4 + [444])) = ($4 + [152])
	*(($4 + [448])) = $12
	*(($4 + [456])) = $0
	*(($4 + [464])) = $0
	*($4 + [432]) = $0
	*(($4 + [472])) = (int_64)-1
	*(($4 + [480])) = (int_64)0
	*(($4 + [488])) = [0]
	*(($4 + [496])) = $0
	*(($4 + [504])) = $0
	*(($4 + [512])) = $0
	*(($4 + [520])) = $0
	*(($4 + [528])) = (int_64)-1
	*(($4 + [536])) = (int_64)0
	*(($4 + [544])) = [0]
	*(($4 + [552])) = $0
	*(($4 + [560])) = $0
	*($3) = *($8)
	*($4 + [624]) = *($4 + [608])
	$0 = *($4 + [600])
	$1 = *($4 + [592])
	$11 = *($4 + [584])
	*($9) = *($3)
	*($4 + [640]) = *($4 + [624])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$13 = *((($4 + [640]) + [8]))
	*((($4 + [656]) + [8])) = $13
	*(($4 + [8])) = $13
	$13 = *($4 + [640])
	*($4) = $13
	*($4 + [656]) = $13
	CALL void $3((int_32 $11), (int_64 $1), (int_64 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $219($2)
	
.LABEL $label$5
	CALL $31(($4 + [32]))
	$global$0 = ($4 + [672])
	return [1]
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $216($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10096])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $216($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $188 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [3])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$4 }
	$3 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$7 }
	$3 = int_32($2 >> [2])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL _Znwj(($3 << [3]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3) = (int_64)0
	$3 = (*($0) + [8])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $205($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [3]))
	$5 = ($2 + ($5 << [3]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	$3 = ($3 + [8])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [3]))
	$1 = *($0)
	$7 = ($0 + [4])
	$3 = (*($7) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [20]) = $2
	*($3 + [24]) = $1
	CALL require_auth(*($0))
	$4 = ($0 + [8])
	$6 = *(($0 + [36]))
	$5 = *(($0 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($6 + [-24])
	$7 = *($2)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$6 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$4), [8413])
	goto $label$2 
	
.LABEL $label$3
	$2 = CALL db_find_i64(*($4), *(($0 + [16])), (int_64)-4028354230955598960, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $58($4, $2)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$4), [8413])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [8]) = ($3 + [20])
	CALL eosio_assert([1], [8755])
	CALL $172($4, $7, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [12]) = ($3 + [20])
	*($3 + [8]) = ($3 + [24])
	CALL $173($3, $4, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
}

void .FUNC $48 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = $1
	CALL require_auth(*($0))
	$3 = ($0 + [48])
	$4 = ($0 + [56])
	$5 = CALL db_lowerbound_i64(*($0 + [48]), *($4), (int_64)-4031679089989799264, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$1 }
	CALL $35($3, $5)
	$5 = [0]
	$4 = CALL db_lowerbound_i64(*($3), *($4), (int_64)-4031679089989799264, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $35($3, $4)
	
.LABEL $label$2
	$1 = *($0)
	*($2 + [16]) = ($2 + [24])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8755])
	CALL $169($3, $5, $1, ($2 + [16]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($2 + [16]) = $0
	*($2 + [20]) = ($2 + [24])
	CALL $170(($2 + [8]), $3, $1, ($2 + [16]))
	$global$0 = ($2 + [32])
}

void .FUNC memory ()
{
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8528])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8633])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8566])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8633])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth(*($0 + [40]))
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $44($0, [9999])
	
.LABEL $label$1
	$2 = *($1)
	*($3 + [8]) = $2
	if ( ((int_32)$2 == (int_32)*($1 + [4])) ){ goto $label$2 }
	$4 = ($0 + [40])
	$5 = ($1 + [4])
	
.LOOP $label$3:
	$6 = *($4)
	*($3 + [56]) = ($3 + [8])
	CALL $159(($3 + [16]), $0, $6, ($3 + [56]))
	$1 = *($5)
	$2 = (*($3 + [8]) + [8])
	*($3 + [8]) = $2
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$1 = ($0 + [40])
	$6 = *($1)
	*($3 + [16]) = $6
	*($3 + [24]) = $6
	$2 = CALL db_find_i64($6, $6, (int_64)-4021796522346364928, *($0 + [48]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $149(($3 + [16]), $2)
	CALL eosio_assert(((int_32)*($2 + [12]) == (int_32)($3 + [16])), [8413])
	$6 = *($1)
	CALL eosio_assert([1], [8755])
	CALL $160(($3 + [16]), $2, $6, ($3 + [8]))
	$0 = *($3 + [40])
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = *($1)
	*($3 + [56]) = $0
	CALL $161(($3 + [8]), ($3 + [16]), $6, ($3 + [56]))
	$0 = *($3 + [40])
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$4 = ($3 + [44])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$8 }
	
.LOOP $label$9:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$9 }
	$1 = *(($3 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$1 = $0
	
.LABEL $label$7
	*($4) = $0
	CALL _ZdlPv($1)
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [64])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8464])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $188($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [3]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$6 = *($7)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)*($3) != (int_32)$6), [8408])
	CALL memcpy($2, *($7), [1])
	$6 = (*($7) + [1])
	*($7) = $6
	CALL eosio_assert(((int_32)*($3) != (int_32)$6), [8408])
	CALL memcpy(($2 + [1]), *($7), [1])
	$6 = (*($7) + [1])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[3]), [8408])
	CALL memcpy(($2 + [4]), *($7), [4])
	$6 = (*($7) + [4])
	*($7) = $6
	$2 = ($2 + [8])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth(*($0 + [40]))
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $45($0, [9999])
	
.LABEL $label$1
	$2 = *($1)
	*($3 + [8]) = $2
	if ( ((int_32)$2 == (int_32)*($1 + [4])) ){ goto $label$2 }
	$4 = ($0 + [40])
	$5 = ($1 + [4])
	
.LOOP $label$3:
	$6 = *($4)
	*($3 + [56]) = ($3 + [8])
	CALL $148(($3 + [16]), $0, $6, ($3 + [56]))
	$1 = *($5)
	$2 = (*($3 + [8]) + [48])
	*($3 + [8]) = $2
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$1 = ($0 + [40])
	$6 = *($1)
	*($3 + [16]) = $6
	*($3 + [24]) = $6
	$2 = CALL db_find_i64($6, $6, (int_64)-4021796522346364928, *($0 + [48]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $149(($3 + [16]), $2)
	CALL eosio_assert(((int_32)*($2 + [12]) == (int_32)($3 + [16])), [8413])
	$6 = *($1)
	CALL eosio_assert([1], [8755])
	CALL $150(($3 + [16]), $2, $6, ($3 + [8]))
	$0 = *($3 + [40])
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = *($1)
	*($3 + [56]) = $0
	CALL $151(($3 + [8]), ($3 + [16]), $6, ($3 + [56]))
	$0 = *($3 + [40])
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$4 = ($3 + [44])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$8 }
	
.LOOP $label$9:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$9 }
	$1 = *(($3 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$1 = $0
	
.LABEL $label$7
	*($4) = $0
	CALL _ZdlPv($1)
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [64])
}

void .FUNC $47 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = $1
	CALL require_auth(*($0))
	$3 = ($0 + [48])
	$4 = ($0 + [56])
	$5 = CALL db_lowerbound_i64(*($0 + [48]), *($4), (int_64)-4031679089989799264, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$1 }
	CALL $35($3, $5)
	$5 = [0]
	$4 = CALL db_lowerbound_i64(*($3), *($4), (int_64)-4031679089989799264, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $35($3, $4)
	
.LABEL $label$2
	$1 = *($0)
	*($2 + [16]) = ($2 + [24])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8755])
	CALL $166($3, $5, $1, ($2 + [16]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($2 + [16]) = $0
	*($2 + [20]) = ($2 + [24])
	CALL $167(($2 + [8]), $3, $1, ($2 + [16]))
	$global$0 = ($2 + [32])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [15]) = $1
	CALL require_auth(*($0))
	CALL eosio_assert(($1 <= [2]), [9899])
	$1 = ($0 + [48])
	$3 = [0]
	$4 = [0]
	$5 = ($0 + [56])
	$6 = CALL db_lowerbound_i64(*($0 + [48]), *($5), (int_64)-4031679089989799264, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	CALL $35($1, $6)
	$4 = [1]
	
.LABEL $label$1
	CALL eosio_assert($4, [9919])
	$4 = CALL db_lowerbound_i64(*($1), *($5), (int_64)-4031679089989799264, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $35($1, $4)
	
.LABEL $label$2
	$7 = *($0)
	*($2 + [8]) = ($2 + [15])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8755])
	CALL $165($1, $3, $7, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0 + [40]))
	$3 = [0]
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-4022058411981012992, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $96($0, $5)
	
.LABEL $label$1
	
.LOOP $label$3:
	if ( ($4 == 0) ){ goto $label$2 }
	CALL eosio_assert([1], [9500])
	CALL eosio_assert([1], [9158])
	$5 = [0]
	$6 = CALL db_next_i64(*($4 + [48]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $96($0, $6)
	
.LABEL $label$4
	CALL $152($0, $4)
	$4 = $5
	$3 = ($3 + [1])
	if ( ((int_32)($3 & [65535]) != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0 + [40]))
	$3 = [0]
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-4021794370813427712, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $69($0, $5)
	
.LABEL $label$1
	
.LOOP $label$3:
	if ( ($4 == 0) ){ goto $label$2 }
	CALL eosio_assert([1], [9500])
	CALL eosio_assert([1], [9158])
	$5 = [0]
	$6 = CALL db_next_i64(*($4 + [12]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $69($0, $6)
	
.LABEL $label$4
	CALL $162($0, $4)
	$4 = $5
	$3 = ($3 + [1])
	if ( ((int_32)($3 & [65535]) != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
}

void .FUNC $167 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8471])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($3 + [8]) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = $1
	CALL $168(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $166 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [16]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8887])
	CALL eosio_assert([1], [8522])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [8]), ($1 + [8]), [1])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [9]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 + [17]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [25])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $165 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8887])
	CALL eosio_assert([1], [8522])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [8]), ($1 + [8]), [1])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [9]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 + [17]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [25])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $164 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [12]) = $1
	*($0 + [8]) = [1]
	*($0) = *(*(*($2 + [4])) + [48])
	$1 = *($2)
	CALL eosio_assert([1], [8522])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($3 | [8]), ($0 + [8]), [2])
	$4 = *($0)
	*($0 + [16]) = CALL db_store_i64(*($1 + [8]), (int_64)-4021796522346364928, *(*($2 + [8])), $4, $3, [10])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	*($1) = *(*(*(*($0 + [4]))))
	CALL eosio_assert([1], [8522])
	CALL memcpy($2, $1, [1])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($2 | [1]), ($1 + [1]), [1])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($2 | [2]), ($1 + [4]), [4])
	$4 = *($1)
	*($1 + [12]) = CALL db_store_i64(*($3 + [8]), (int_64)-4021794370813427712, *(*($0 + [8])), $4, $2, [6])
	if ( ((uint_64)*($3 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($3 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9534])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9579])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = (*($1) & [255])
	if ( ((int_32)*(*(($5 + [-24]))) == (int_32)$6) ){ goto $label$3 }
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$3 = ($5 + [-48])
	$5 = ($5 + [-24])
	if ( ((int_32)*(*($3)) != (int_32)$6) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9629])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$6 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $6
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$6 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $6
	CALL db_remove_i64(*(($1 + [12])))
}

void .FUNC $161 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8471])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([24])
	CALL $164($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [16])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $155(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $160 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [12])) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [8]) = (*($1 + [8]) + [1])
	$5 = *($1)
	CALL eosio_assert([1], [8887])
	CALL eosio_assert([1], [8522])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [8]), ($1 + [8]), [2])
	CALL db_update_i64(*($1 + [16]), $2, $4, [10])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $169 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [24]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8887])
	CALL eosio_assert([1], [8522])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [8]), ($1 + [8]), [1])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [9]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 + [17]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [25])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [16]) = *(*($3 + [4]))
	$3 = *($0)
	CALL eosio_assert([1], [8522])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($2 | [8]), ($1 + [8]), [1])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($2 | [9]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($2 + [17]), ($1 + [24]), [8])
	$4 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($3 + [8]), (int_64)-4031679089989799264, *(*($0 + [8])), $4, $2, [25])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $175 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8887])
	CALL eosio_assert([1], [8522])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [8]), ($1 + [8]), [1])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [9]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [17])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8385])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8408])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [8408])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $73(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8471])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [16]) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56]) = [0]
	*($3 + [60]) = $1
	CALL $78(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [64])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $75(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [52])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $50 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [31]) = $2
	*($3 + [32]) = $1
	CALL require_auth(*($0))
	CALL eosio_assert(($2 <= [11]), [9935])
	$4 = ($0 + [112])
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$12:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$11 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [8413])
	if ( $2 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)-4019767415373037568, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$13 }
	$8 = CALL $68($4, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [8413])
	
.LABEL $label$13
	if ( ($2 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$1 = *($0)
	if ( ($8 == 0) ){ goto $label$7 }
	*($3 + [56]) = ($3 + [31])
	CALL eosio_assert([1], [8755])
	CALL $175($4, $8, $1, ($3 + [56]))
	goto $label$3 
	
.LABEL $label$8
	$9 = ($0 + [72])
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$14:
	$7 = ($6 + [-24])
	$2 = *($7)
	if ( ((int_64)*($2) == (int_64)$1) ){ goto $label$6 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$14 }
	goto $label$5 
	
.LABEL $label$7
	*($3 + [60]) = ($3 + [31])
	*($3 + [56]) = ($3 + [32])
	CALL $176(($3 + [40]), $4, $1, ($3 + [56]))
	goto $label$3 
	
.LABEL $label$6
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($2 + [60]) == (int_32)$9), [8413])
	if ( $2 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$7 = CALL db_find_i64(*($9), *(($0 + [80])), (int_64)-4023100430253817856, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $51($9, $7) + [60]) == (int_32)$9), [8413])
	
.LABEL $label$4
	if ( ($8 == 0) ){ goto $label$3 }
	CALL eosio_assert([1], [9500])
	CALL eosio_assert([1], [9158])
	$7 = CALL db_next_i64(*($8 + [28]), ($3 + [56]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$15 }
	CALL $68($4, $7)
	
.LABEL $label$15
	CALL $177($4, $8)
	
.LABEL $label$3
	$2 = ($0 + [72])
	$1 = *($3 + [32])
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$18 }
	
.LOOP $label$20:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$19 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)$2), [8413])
	if ( ($8 == 0) ){ goto $label$17 }
	$6 = $2
	goto $label$16 
	
.LABEL $label$18
	$7 = CALL db_find_i64(*($2), *(($0 + [80])), (int_64)-4023100430253817856, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$17 }
	$8 = CALL $51($2, $7)
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)$2), [8413])
	$6 = $2
	goto $label$16 
	
.LABEL $label$17
	*($3 + [56]) = $1
	$1 = *($0)
	*($3 + [48]) = ($3 + [56])
	CALL $59(($3 + [40]), $2, $1, ($3 + [48]))
	$8 = *($3 + [44])
	$6 = *($3 + [40])
	
.LABEL $label$16
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [8338])
	*($3 + [20]) = $8
	*($3 + [16]) = $6
	*($3 + [8]) = *($3 + [16])
	$5 = CALL $63($0, ($3 + [8]))
	*($3 + [40]) = $5
	if ( $5 ){ goto $label$21 }
	if ( ((int_64)*($8 + [24]) == (int_64)0) ){ goto $label$1 }
	
.LABEL $label$21
	$1 = *($0)
	*($3 + [56]) = ($3 + [40])
	CALL eosio_assert($7, [8755])
	CALL $178($2, $8, $1, ($3 + [56]))
	
.LABEL $label$2
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$1
	CALL eosio_assert($7, [9500])
	CALL eosio_assert($7, [9158])
	$7 = CALL db_next_i64(*($8 + [64]), ($3 + [56]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$22 }
	CALL $51($6, $7)
	
.LABEL $label$22
	CALL $179($2, $8)
	$global$0 = ($3 + [64])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8385])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [16]) = [0]
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56]) = [0]
	*($5 + [60]) = $0
	CALL $74(($3 + [32]), $5)
	*($5 + [64]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $75(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [48])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [52])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [40]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*(($6 = ($1 + [52]))) = *($1 + [48])
	$7 = *($1)
	CALL eosio_assert([1], [8887])
	$9 = *($1 + [48])
	$8 = *($6)
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	$6 = [41]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$2 }
	$6 = ((((int_32)uint_32(($10 + [-8]) >> [3]) * (int_32)[5]) + $6) + [5])
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$4 }
	$4 = CALL $216($6)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $6)
	CALL $79($5, $1)
	CALL db_update_i64(*($1 + [64]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($4)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $53 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [80])
	$5 = *(($0 + [108]))
	$4 = *(($0 + [104]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [8413])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [88])), (int_64)-4021798726879390720, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $128($3, $6)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [8413])
	
.LABEL $label$2
	CALL eosio_assert([1], [9500])
	CALL eosio_assert([1], [9158])
	$6 = CALL db_next_i64(*($7 + [20]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $128($3, $6)
	
.LABEL $label$6
	CALL $136($3, $7)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	if ( ((int_32)$1 != (int_32)[1]) ){ goto $label$1 }
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	*($2 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($3, $3, (int_64)-4023100423488818528, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$1 = CALL $65($2, $0)
	
.LOOP $label$3:
	CALL eosio_assert([1], [9500])
	CALL eosio_assert([1], [9158])
	$0 = [0]
	$4 = CALL db_next_i64(*($1 + [92]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $65($2, $4)
	
.LABEL $label$4
	CALL $181($2, $1)
	$1 = $0
	if ( $0 ){ goto $label$3 }
	
.LABEL $label$2
	$4 = *($2 + [24])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($2 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	CALL _ZdlPv($1)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($2 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $4
	
.LABEL $label$5
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	if ( ((int_32)$1 != (int_32)[1]) ){ goto $label$1 }
	$1 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)-4023100430253817856, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [72])
	$1 = CALL $51($3, $1)
	
.LOOP $label$2:
	CALL eosio_assert([1], [9500])
	CALL eosio_assert([1], [9158])
	$0 = [0]
	$4 = CALL db_next_i64(*($1 + [64]), ($2 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $51($3, $4)
	
.LABEL $label$3
	CALL $179($3, $1)
	$1 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $56 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL require_auth($1)
	CALL eosio_assert(((int_32)$2 == (int_32)[1]), [9955])
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$2 }
	*(($3 + [184])) = [0]
	*($3 + [168]) = (int_64)-1
	*($3 + [176]) = (int_64)0
	$4 = *($0)
	*($3 + [152]) = $4
	*($3 + [160]) = $4
	$5 = [0]
	$2 = CALL db_find_i64($4, $4, (int_64)-4023100423488818528, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $65(($3 + [152]), $2)
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)($3 + [152])), [8413])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [9971])
	CALL eosio_assert(((int_64)*($5 + [32]) > (int_64)9999), [9986])
	$2 = CALL $213([8946])
	if ( ($2 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [8963])
	goto $label$6 
	
.LABEL $label$7
	if ( ($2 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$4 = (int_64)0
	
.LOOP $label$8:
	$7 = *(($2 + [8945]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [9008])
	
.LABEL $label$9
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$8 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$4 
	
.LABEL $label$5
	$8 = (int_64)4
	
.LABEL $label$4
	CALL eosio_assert([1], [8686])
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$9 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$4 = $9
	$7 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$4 = $9
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $7 ){ goto $label$14 }
	$7 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$7 = [0]
	
.LABEL $label$10
	CALL eosio_assert($7, [8735])
	$4 = *(($5 + [32]))
	$9 = *($0)
	*($3 + [96]) = [9061]
	*($3 + [100]) = CALL $213([9061])
	*($3 + [8]) = *($3 + [96])
	$4 = ((int_64)$4 / (int_64)10)
	$10 = CALL $43(($3 + [104]), ($3 + [8]))
	$7 = *($0 + [8])
	$2 = ($7 + [48])
	$11 = *($10)
	$10 = [0]
	$7 = ($7 + [56])
	$12 = CALL db_lowerbound_i64(*($7 + [48]), *($7), (int_64)-4031679089989799264, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$15 }
	CALL $35($2, $12)
	$10 = [1]
	
.LABEL $label$15
	CALL eosio_assert($10, [8365])
	$13 = *(CALL $35($2, CALL $fimport$4(*($2), *($7), (int_64)-4031679089989799264, (int_64)0)) + [16])
	*($3 + [80]) = [9997]
	*($3 + [84]) = CALL $213([9997])
	*($3) = *($3 + [80])
	$10 = CALL $43(($3 + [88]), $3)
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	$2 = CALL $213([10008])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$18 }
	*($3 + [16]) = ($2 << [1])
	$7 = (($3 + [16]) | [1])
	if ( $2 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$12 = (($2 + [16]) & [-16])
	$7 = CALL _Znwj($12)
	*($3 + [16]) = ($12 | [1])
	*($3 + [24]) = $7
	*($3 + [20]) = $2
	
.LABEL $label$17
	CALL memcpy($7, [10008], $2)
	
.LABEL $label$16
	*(($7 + $2)) = [0]
	*((($3 + [32]) + [24])) = $8
	$2 = ($3 + [24])
	*(($3 + [72])) = *($2)
	*($2) = [0]
	*($3 + [40]) = $1
	*($3 + [48]) = $4
	*($3 + [112]) = $13
	*($3 + [32]) = *($0)
	*($3 + [64]) = *($3 + [16])
	*($3 + [16]) = (int_64)0
	*($3 + [120]) = *($10)
	*(($2 = CALL _Znwj([16]))) = $9
	*($2 + [8]) = $11
	*((($3 + [112]) + [36])) = [0]
	$7 = ($2 + [16])
	*((($3 + [112]) + [24])) = $7
	*(($3 + [132])) = $7
	*($3 + [128]) = $2
	*($3 + [140 align=4]) = (int_64)0
	$2 = *($3 + [64])
	$7 = ( *((($3 + [32]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($7 + [32])
	$4 = (CASTING uint_64)(uint_32 $7)
	$7 = ($3 + [140])
	
.LOOP $label$19:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$19 }
	if ( ($2 == 0) ){ goto $label$21 }
	CALL $88($7, $2)
	$7 = *(($3 + [144]))
	$2 = *(($3 + [140]))
	goto $label$20 
	
.LABEL $label$21
	$7 = [0]
	$2 = [0]
	
.LABEL $label$20
	*($3 + [196]) = $2
	*($3 + [192]) = $2
	*($3 + [200]) = $7
	*($3 + [208]) = ($3 + [192])
	*($3 + [216]) = ($3 + [32])
	CALL $182(($3 + [216]), ($3 + [208]))
	if ( ((*(($3 + [64])) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$22
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$23
	CALL $89(($3 + [32]), ($3 + [112]))
	$2 = *($3 + [32])
	CALL send_inline($2, (*($3 + [36]) - $2))
	$2 = *($3 + [32])
	if ( ($2 == 0) ){ goto $label$24 }
	*($3 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$24
	$4 = *($0)
	CALL eosio_assert($6, [8755])
	CALL $183(($3 + [152]), $5, $4, ($3 + [32]))
	$2 = *($3 + [140])
	if ( ($2 == 0) ){ goto $label$25 }
	*(($3 + [144])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$25
	$2 = *($3 + [128])
	if ( ($2 == 0) ){ goto $label$26 }
	*(($3 + [132])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$26
	$10 = *($3 + [176])
	if ( ($10 == 0) ){ goto $label$2 }
	$0 = ($3 + [180])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$28 }
	
.LOOP $label$29:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$30 }
	CALL _ZdlPv($7)
	
.LABEL $label$30
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$29 }
	$2 = *(($3 + [176]))
	goto $label$27 
	
.LABEL $label$28
	$2 = $10
	
.LABEL $label$27
	*($0) = $10
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$global$0 = ($3 + [224])
	return (unreachable)
	
.LABEL $label$1
	CALL $197(($3 + [16]))
}

void .FUNC $57 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL require_auth($1)
	CALL eosio_assert(((int_32)$2 == (int_32)[1]), [9955])
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$2 }
	*(($3 + [184])) = [0]
	*($3 + [168]) = (int_64)-1
	*($3 + [176]) = (int_64)0
	$4 = *($0)
	*($3 + [152]) = $4
	*($3 + [160]) = $4
	$5 = [0]
	$2 = CALL db_find_i64($4, $4, (int_64)-4023100423488818528, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $65(($3 + [152]), $2)
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)($3 + [152])), [8413])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [9971])
	CALL eosio_assert(((int_64)*($5 + [64]) > (int_64)999), [9986])
	$2 = CALL $213([8946])
	if ( ($2 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [8963])
	goto $label$6 
	
.LABEL $label$7
	if ( ($2 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$4 = (int_64)0
	
.LOOP $label$8:
	$7 = *(($2 + [8945]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [9008])
	
.LABEL $label$9
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$8 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$4 
	
.LABEL $label$5
	$8 = (int_64)4
	
.LABEL $label$4
	CALL eosio_assert([1], [8686])
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$9 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$4 = $9
	$7 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$4 = $9
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $7 ){ goto $label$14 }
	$7 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$7 = [0]
	
.LABEL $label$10
	CALL eosio_assert($7, [8735])
	$4 = *(($5 + [64]))
	$9 = *($0)
	*($3 + [96]) = [9061]
	*($3 + [100]) = CALL $213([9061])
	*($3 + [8]) = *($3 + [96])
	$10 = CALL $43(($3 + [104]), ($3 + [8]))
	$7 = *($0 + [8])
	$2 = ($7 + [48])
	$11 = *($10)
	$10 = [0]
	$7 = ($7 + [56])
	$12 = CALL db_lowerbound_i64(*($7 + [48]), *($7), (int_64)-4031679089989799264, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$15 }
	CALL $35($2, $12)
	$10 = [1]
	
.LABEL $label$15
	CALL eosio_assert($10, [8365])
	$13 = *(CALL $35($2, CALL $fimport$4(*($2), *($7), (int_64)-4031679089989799264, (int_64)0)) + [16])
	*($3 + [80]) = [9997]
	*($3 + [84]) = CALL $213([9997])
	*($3) = *($3 + [80])
	$10 = CALL $43(($3 + [88]), $3)
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	$2 = CALL $213([10047])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$18 }
	*($3 + [16]) = ($2 << [1])
	$7 = (($3 + [16]) | [1])
	if ( $2 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$12 = (($2 + [16]) & [-16])
	$7 = CALL _Znwj($12)
	*($3 + [16]) = ($12 | [1])
	*($3 + [24]) = $7
	*($3 + [20]) = $2
	
.LABEL $label$17
	CALL memcpy($7, [10047], $2)
	
.LABEL $label$16
	*(($7 + $2)) = [0]
	*((($3 + [32]) + [24])) = $8
	$2 = ($3 + [24])
	*(($3 + [72])) = *($2)
	*($2) = [0]
	*($3 + [40]) = $1
	*($3 + [48]) = $4
	*($3 + [112]) = $13
	*($3 + [32]) = *($0)
	*($3 + [64]) = *($3 + [16])
	*($3 + [16]) = (int_64)0
	*($3 + [120]) = *($10)
	*(($2 = CALL _Znwj([16]))) = $9
	*($2 + [8]) = $11
	*((($3 + [112]) + [36])) = [0]
	$7 = ($2 + [16])
	*((($3 + [112]) + [24])) = $7
	*(($3 + [132])) = $7
	*($3 + [128]) = $2
	*($3 + [140 align=4]) = (int_64)0
	$2 = *($3 + [64])
	$7 = ( *((($3 + [32]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($7 + [32])
	$4 = (CASTING uint_64)(uint_32 $7)
	$7 = ($3 + [140])
	
.LOOP $label$19:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$19 }
	if ( ($2 == 0) ){ goto $label$21 }
	CALL $88($7, $2)
	$7 = *(($3 + [144]))
	$2 = *(($3 + [140]))
	goto $label$20 
	
.LABEL $label$21
	$7 = [0]
	$2 = [0]
	
.LABEL $label$20
	*($3 + [196]) = $2
	*($3 + [192]) = $2
	*($3 + [200]) = $7
	*($3 + [208]) = ($3 + [192])
	*($3 + [216]) = ($3 + [32])
	CALL $182(($3 + [216]), ($3 + [208]))
	if ( ((*(($3 + [64])) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$22
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$23
	CALL $89(($3 + [32]), ($3 + [112]))
	$2 = *($3 + [32])
	CALL send_inline($2, (*($3 + [36]) - $2))
	$2 = *($3 + [32])
	if ( ($2 == 0) ){ goto $label$24 }
	*($3 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$24
	$4 = *($0)
	CALL eosio_assert($6, [8755])
	CALL $184(($3 + [152]), $5, $4, ($3 + [32]))
	$2 = *($3 + [140])
	if ( ($2 == 0) ){ goto $label$25 }
	*(($3 + [144])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$25
	$2 = *($3 + [128])
	if ( ($2 == 0) ){ goto $label$26 }
	*(($3 + [132])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$26
	$10 = *($3 + [176])
	if ( ($10 == 0) ){ goto $label$2 }
	$0 = ($3 + [180])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$28 }
	
.LOOP $label$29:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$30 }
	CALL _ZdlPv($7)
	
.LABEL $label$30
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$29 }
	$2 = *(($3 + [176]))
	goto $label$27 
	
.LABEL $label$28
	$2 = $10
	
.LABEL $label$27
	*($0) = $10
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$global$0 = ($3 + [224])
	return (unreachable)
	
.LABEL $label$1
	CALL $197(($3 + [16]))
}

void .FUNC $173 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8471])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $174($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [9534])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9579])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9629])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [32])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [32])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [48]))
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*(*($0 + [4])))
	*($1) = *($5)
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$1 }
	CALL $156(($1 + [32]), *($5 + [32]), *(($5 + [36])))
	
.LABEL $label$1
	$7 = *($1 + [32])
	$6 = *(($1 + [36]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[24]))
	$5 = [28]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	$5 = ((((int_32)((uint_32)($8 + [-24]) / (uint_32)[24]) * (int_32)[20]) + $5) + [20])
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $157($3, $1)
	$9 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($4 + [8]), (int_64)-4022058411981012992, *(*($0 + [8])), $9, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$9 >= (uint_64)*($4 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $219($2)
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $150 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [12])) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [8]) = (*($1 + [8]) + [1])
	$5 = *($1)
	CALL eosio_assert([1], [8887])
	CALL eosio_assert([1], [8522])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [8]), ($1 + [8]), [2])
	CALL db_update_i64(*($1 + [16]), $2, $4, [10])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $151 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8471])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([24])
	CALL $154($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [16])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $155(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $156 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = ((int_32)$3 / (int_32)[24])
	if ( ((uint_32)$4 <= (uint_32)((int_32)($5 - $6) / (int_32)[24])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$1 }
	$6 = [178956970]
	$2 = ((int_32)$5 / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	
.LABEL $label$6
	$4 = ((int_32)$6 * (int_32)[24])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + ((int_32)((uint_32)$3 / (uint_32)[24]) * (int_32)[24]))
	goto $label$3 
	
.LABEL $label$4
	$3 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$7 = ( ($1 + ((int_32)$3 * (int_32)[24])) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$5 = ($7 - $1)
	$8 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $5)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + ((int_32)((uint_32)$1 / (uint_32)[24]) * (int_32)[24]))
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + ((int_32)$8 * (int_32)[24]))
	return (unreachable)
	
.LABEL $label$1
	CALL $205($0)
}

int_32 .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), $2, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [36])) - *($1 + [32])) / (int_32)[24]))
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8522])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$4 = *(($1 + [36]))
	$3 = *(($1 + [32]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $158($0, $3)
	$3 = ($3 + [24])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $154 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [12]) = $1
	*($0 + [8]) = [1]
	*($0) = *(*(*($2 + [4])) + [48])
	$1 = *($2)
	CALL eosio_assert([1], [8522])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($3 | [8]), ($0 + [8]), [2])
	$4 = *($0)
	*($0 + [16]) = CALL db_store_i64(*($1 + [8]), (int_64)-4021796522346364928, *(*($2 + [8])), $4, $3, [10])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $155 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $205($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[1]), [8522])
	CALL memcpy(*($0 + [4]), $1, [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [2]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $159 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8471])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([20])) + [4]) = [0]
	*($3) = [0]
	*($3 + [8]) = $1
	CALL $163(($4 + [16]), $3)
	*($4 + [32]) = $3
	$5 = *($3)
	*($4 + [15]) = $5
	$6 = *($3 + [12])
	*($4 + [16]) = $6
	$7 = ($1 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($8 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	*($8 + [16]) = $6
	*($4 + [32]) = [0]
	*($8) = $3
	*($7) = ($8 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $86(($1 + [24]), ($4 + [32]), ($4 + [15]), ($4 + [16]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [9534])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9579])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9629])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [48])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [52])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [48])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [52])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [64]))
}

void .FUNC $183 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [32]) = (int_64)0
	$5 = *($1)
	CALL eosio_assert([1], [8887])
	*($4 + [104]) = ($4 + [88])
	*($4 + [100]) = $4
	*($4 + [96]) = $4
	CALL $82(($4 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $4, [88])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [16])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8385])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([20])) + [4]) = [0]
	*($5) = [0]
	*($5 + [8]) = $0
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8408])
	CALL memcpy($5, $2, [1])
	CALL eosio_assert(((int_32)$4 != (int_32)[1]), [8408])
	CALL memcpy(($5 + [1]), ($2 + [1]), [1])
	CALL eosio_assert(((uint_32)($4 + [-2]) > (uint_32)[3]), [8408])
	CALL memcpy(($5 + [4]), ($2 + [2]), [4])
	*($5 + [12]) = $1
	*($3 + [8]) = $5
	$6 = *($5)
	*($3 + [7]) = $6
	*($3) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	*($8 + [16]) = $1
	*($3 + [8]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $86(($0 + [24]), ($3 + [8]), ($3 + [7]), $3)
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [16])
	return $5
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8385])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [16]) = (int_64)0
	*($5 + [8]) = [0]
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8408])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [8408])
	CALL memcpy(($5 + [8]), ($2 + [8]), [1])
	CALL eosio_assert(((uint_32)($4 + [-9]) > (uint_32)[7]), [8408])
	CALL memcpy(($5 + [16]), ($2 + [9]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $85(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8385])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([104])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [88]) = $0
	CALL $84(($3 + [32]), $5)
	*($5 + [92]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $83(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [16]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [8887])
	$8 = *($1 + [48])
	$7 = *(($1 + [52]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$3 = [41]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$3 = ((((int_32)uint_32(($9 + [-8]) >> [3]) * (int_32)[5]) + $3) + [5])
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $216($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $79($5, $1)
	CALL db_update_i64(*($1 + [64]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8471])
	*(($5 = CALL _Znwj([104])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [88]) = $1
	CALL $81($3, $5)
	*($4 + [120]) = (($4 + [16]) + [88])
	*($4 + [116]) = ($4 + [16])
	*($4 + [112]) = ($4 + [16])
	CALL $82(($4 + [112]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-4023100423488818528, $2, $6, ($4 + [16]), [88])
	*($5 + [92]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [112]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [112]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $83(($1 + [24]), ($4 + [112]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [112])
	*($4 + [112]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [128])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8887])
	*($4 + [104]) = ($4 + [88])
	*($4 + [100]) = $4
	*($4 + [96]) = $4
	CALL $82(($4 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $4, [88])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	float_64 $15
	$4 = ($global$0 - [64])
	$global$0 = $4
	$5 = *($2)
	*($4 + [48]) = (int_64)0
	$6 = *($2 + [8])
	*($4 + [56]) = $6
	CALL eosio_assert([1], [8686])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8735])
	$2 = CALL $213([8946])
	if ( ($2 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [8963])
	goto $label$9 
	
.LABEL $label$10
	if ( ($2 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$7 = (int_64)0
	
.LOOP $label$11:
	$9 = *(($2 + [8945]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [9008])
	
.LABEL $label$12
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$11 }
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$7 << (int_64)8) | (int_64)4)) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)$6 != (int_64)4) ){ goto $label$6 }
	
.LABEL $label$7
	$11 = ($0 + [112])
	$12 = *($1 + [4])
	$7 = *($12)
	$13 = *($12 + [16])
	$9 = *(($0 + [140]))
	$1 = *(($0 + [136]))
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$15 }
	
.LOOP $label$17:
	$2 = ($9 + [-24])
	$10 = *($2)
	if ( ((int_64)*($10) == (int_64)$7) ){ goto $label$16 }
	$9 = $2
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$11), [8413])
	if ( $10 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$2 = CALL db_find_i64(*($11), *(($0 + [120])), (int_64)-4019767415373037568, $7)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$13 }
	$10 = CALL $68($11, $2)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$11), [8413])
	
.LABEL $label$14
	$13 = *($10 + [8])
	
.LABEL $label$13
	$8 = (int_64)0
	if ( (($13 & [255]) == 0) ){ goto $label$18 }
	$14 = ($0 + [16])
	$9 = *(($0 + [44]))
	$1 = *(($0 + [40]))
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$20 }
	$11 = ($13 & [255])
	
.LOOP $label$22:
	$2 = ($9 + [-24])
	$10 = *($2)
	if ( ((int_32)*($10) == (int_32)$11) ){ goto $label$21 }
	$9 = $2
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$20 }
	CALL eosio_assert(((int_32)*($10 + [8]) == (int_32)$14), [8413])
	goto $label$19 
	
.LABEL $label$20
	$10 = [0]
	$2 = CALL db_find_i64(*($14), *(($0 + [24])), (int_64)-4021794370813427712, ((int_64)(CASTING uint_64)(uint_32 $13) & (int_64)255))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$19 }
	$10 = CALL $69($14, $2)
	CALL eosio_assert(((int_32)*($10 + [8]) == (int_32)$14), [8413])
	
.LABEL $label$19
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8950])
	$15 = ((float_64)((float_64)((float_64)(CASTING float_64)(uint_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $3) * (int_64)$5) * (int_64)10)) * (float_64)(float_64)0.0001) * (float_64)(CASTING float_64)(uint_32 *($10 + [1]))) * (float_64)(float_64)0.0001)
	if ( ((float_64)(float_64)|$15| < (float_64)(float_64)9223372036854775808) ){ goto $label$23 }
	$8 = (int_64)-9223372036854775808
	goto $label$18 
	
.LABEL $label$23
	$8 = (Rounds 0)($15)
	
.LABEL $label$18
	*($4 + [48]) = $8
	*(($4 + [40])) = [0]
	$7 = *($0)
	*($4 + [8]) = $7
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = $7
	$2 = CALL db_find_i64($7, $7, (int_64)-4023100423488818528, *($12))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$24 }
	$2 = CALL $65(($4 + [8]), $2)
	CALL eosio_assert(((int_32)*($2 + [88]) == (int_32)($4 + [8])), [8413])
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$24 }
	$7 = *($0)
	*($4 + [4]) = $0
	*($4) = ($4 + [48])
	CALL eosio_assert([1], [8755])
	CALL $70(($4 + [8]), $2, $7, $4)
	
.LABEL $label$24
	$10 = *($4 + [32])
	if ( ($10 == 0) ){ goto $label$6 }
	$1 = ($4 + [36])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$26 }
	
.LOOP $label$27:
	$2 = ($2 + [-24])
	$9 = *($2)
	*($2) = [0]
	if ( ($9 == 0) ){ goto $label$28 }
	CALL _ZdlPv($9)
	
.LABEL $label$28
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$27 }
	$2 = *(($4 + [32]))
	goto $label$25 
	
.LABEL $label$26
	$2 = $10
	
.LABEL $label$25
	*($1) = $10
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
}

int_64 .FUNC $60 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [128])
	$global$0 = $4
	*($4 + [112]) = $1
	*($4 + [120]) = $2
	if ( ((int_64)$1 != (int_64)$2) ){ goto $label$1 }
	*($4 + [104]) = [8685]
	*($4 + [108]) = CALL $213([8685])
	*($4 + [16]) = *($4 + [104])
	*($4 + [120]) = *(CALL $43(($4 + [64]), ($4 + [16])))
	$1 = *($4 + [112])
	
.LABEL $label$1
	*(($4 + [96])) = [0]
	*($4 + [80]) = (int_64)-1
	*($4 + [88]) = (int_64)0
	$2 = *($0)
	*($4 + [64]) = $2
	*($4 + [72]) = $2
	$5 = CALL db_find_i64($2, $2, (int_64)-4023100423488818528, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $65(($4 + [64]), $5)
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)($4 + [64])), [8413])
	*($4 + [32]) = [8360]
	*($4 + [36]) = CALL $213([8360])
	*($4 + [8]) = *($4 + [32])
	$3 = CALL $43(($4 + [48]), ($4 + [8]))
	if ( ((int_64)*($5 + [8]) == (int_64)*($3)) ){ goto $label$6 }
	*($4 + [24]) = [8685]
	*($4 + [28]) = CALL $213([8685])
	*($4) = *($4 + [24])
	$3 = CALL $43(($4 + [40]), $4)
	$1 = *(($5 + [8]))
	if ( ((int_64)$1 != (int_64)*($3)) ){ goto $label$4 }
	
.LABEL $label$6
	$1 = *($0)
	*($4 + [48]) = ($4 + [120])
	CALL eosio_assert([1], [8755])
	CALL $66(($4 + [64]), $5, $1, ($4 + [48]))
	$3 = *($4 + [88])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$1 = *($0)
	*($4 + [56]) = $3
	*($4 + [52]) = ($4 + [120])
	*($4 + [48]) = ($4 + [112])
	CALL $67(($4 + [40]), ($4 + [64]), $1, ($4 + [48]))
	$3 = *($4 + [88])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	*($4 + [120]) = $1
	$3 = *($4 + [88])
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($4 + [92])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	CALL _ZdlPv($5)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($4 + [88]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $3
	
.LABEL $label$7
	*($6) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$1 = *($4 + [120])
	$global$0 = ($4 + [128])
	return $1
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	float_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1 + [4])
	$4 = *($3 + [24])
	$5 = [0]
	$1 = CALL db_lowerbound_i64(*($0 + [16]), *(($0 + [24])), (int_64)-4021794370813427712, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$6 = ((float_64)(CASTING float_64)(uint_64 $4) * (float_64)(float_64)0.0001)
	$5 = [0]
	$7 = ($0 + [16])
	$1 = CALL $69($7, $1)
	$8 = *($1)
	if ( ((uint_32)([0] & [255]) >= (uint_32)$8) ){ goto $label$3 }
	$9 = [2]
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	goto $label$1 
	
.LABEL $label$2
	$9 = [4]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$26 
	
.LABEL $label$29
	$1 = CALL $69($7, $1)
	$8 = *($1)
	if ( ((uint_32)($5 & [255]) >= (uint_32)$8) ){ goto $label$13 }
	$9 = [2]
	goto $label$4 
	
.LABEL $label$28
	if ( ((int_32)((float_64)$6 >= (float_64)(CASTING float_64)(uint_32 *($1 + [4]))) ^ (int_32)[1]) ){ goto $label$14 }
	$9 = [3]
	goto $label$4 
	
.LABEL $label$27
	$5 = $8
	$9 = [0]
	goto $label$4 
	
.LABEL $label$26
	CALL eosio_assert([1], [9158])
	$1 = CALL db_next_i64(*($1 + [12]), ($2 + [8]))
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$15 }
	$9 = [4]
	goto $label$4 
	
.LABEL $label$25
	$10 = ($0 + [112])
	$4 = *($3)
	$8 = *(($0 + [140]))
	$3 = *(($0 + [136]))
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$12 }
	$9 = [5]
	goto $label$4 
	
.LABEL $label$24
	$9 = [6]
	goto $label$4 
	
.LABEL $label$23
	$1 = ($8 + [-24])
	$7 = *($1)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$9 }
	$9 = [7]
	goto $label$4 
	
.LABEL $label$22
	$8 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$21
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$8 }
	$9 = [13]
	goto $label$4 
	
.LABEL $label$20
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$10), [8413])
	if ( $7 ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$19
	$1 = CALL db_find_i64(*($10), *(($0 + [120])), (int_64)-4019767415373037568, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$7 }
	$9 = [9]
	goto $label$4 
	
.LABEL $label$18
	$7 = CALL $68($10, $1)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$10), [8413])
	$9 = [10]
	goto $label$4 
	
.LABEL $label$17
	$1 = *($7 + [8])
	$global$0 = ($2 + [16])
	return (( $1 ? $5 : ((uint_32)$1 > (uint_32)($5 & [255])) ) & [255])
	
.LABEL $label$16
	$global$0 = ($2 + [16])
	return ($5 & [255])
	
.LABEL $label$15
	$9 = [1]
	goto $label$4 
	
.LABEL $label$14
	$9 = [0]
	goto $label$4 
	
.LABEL $label$13
	$9 = [0]
	goto $label$4 
	
.LABEL $label$12
	$9 = [8]
	goto $label$4 
	
.LABEL $label$11
	$9 = [8]
	goto $label$4 
	
.LABEL $label$10
	$9 = [6]
	goto $label$4 
	
.LABEL $label$9
	$9 = [12]
	goto $label$4 
	
.LABEL $label$8
	$9 = [8]
	goto $label$4 
	
.LABEL $label$7
	$9 = [11]
	goto $label$4 
	
.LABEL $label$6
	$9 = [11]
	goto $label$4 
	
.LABEL $label$5
	$9 = [10]
	goto $label$4 
	return $9
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	$6 = *($1)
	$7 = $6
	if ( ((uint_64)*($1 + [40]) >= (uint_64)*(*($3))) ){ goto $label$1 }
	*(($1 + [32])) = (int_64)0
	$7 = CALL current_time()
	*(($1 + [52])) = *($1 + [48])
	$9 = (CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000))
	$8 = *([0] + [8196])
	*(($1 + [40])) = (CASTING uint_64)(uint_32 ((($8 + $9) - ((uint_32)((*([0] + [8200]) << [3]) + $9) % (uint_32)$8)) - *([0] + [8192])))
	$7 = *($1)
	
.LABEL $label$1
	$3 = *($3 + [4])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*($3))
	*(($8 = ($1 + [32]))) = ((int_64)*($8) + (int_64)*($3))
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [8887])
	$9 = *(($1 + [48]))
	$8 = *(($1 + [52]))
	$10 = ($8 - $9)
	$7 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	$3 = [41]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$3 }
	$3 = ((((int_32)uint_32(($10 + [-8]) >> [3]) * (int_32)[5]) + $3) + [5])
	
.LABEL $label$3
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $216($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $79($5, $1)
	CALL db_update_i64(*($1 + [64]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $219($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [16])
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [288])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)3626370891728814079) ){ goto $label$18 }
	if ( ((int_64)$2 <= (int_64)-4417143594308075521) ){ goto $label$17 }
	if ( ((int_64)$2 <= (int_64)-4416985226661068801) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)-4416985226661068800) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-3605952836896030720) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)3626217857749467136) ){ goto $label$1 }
	*($3 + [276]) = [0]
	*($3 + [272]) = [1]
	*($3 + [8]) = *($3 + [272])
	CALL $3($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$18
	if ( ((int_64)$2 <= (int_64)5106325513438232575) ){ goto $label$16 }
	if ( ((int_64)$2 <= (int_64)5606355061291614207) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)5606355061291614208) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)5606356255121256320) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)5606361037433122816) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [2]
	*($3 + [128]) = *($3 + [152])
	CALL $5($1, $1, ($3 + [128]))
	goto $label$1 
	
.LABEL $label$17
	if ( ((int_64)$2 > (int_64)-4417316208295018497) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-4994302107125809152) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4994301836344688640) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [3]
	*($3 + [104]) = *($3 + [176])
	CALL $7($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$16
	if ( ((int_64)$2 > (int_64)4923678860143406591) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)3626370891728814080) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)4835947357830905856) ){ goto $label$1 }
	*($3 + [252]) = [0]
	*($3 + [248]) = [4]
	*($3 + [32]) = *($3 + [248])
	CALL $9($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)-4417143594308075520) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4417095090325946368) ){ goto $label$1 }
	*($3 + [228]) = [0]
	*($3 + [224]) = [5]
	*($3 + [56]) = *($3 + [224])
	CALL $11($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)5106325513438232576) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)5606348217378668544) ){ goto $label$1 }
	*($3 + [268]) = [0]
	*($3 + [264]) = [6]
	*($3 + [16]) = *($3 + [264])
	CALL $13($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)-4417316208295018496) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4417253564733828096) ){ goto $label$1 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [7]
	*($3 + [80]) = *($3 + [200])
	CALL $5($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)4923678860143406592) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)4923678890749481984) ){ goto $label$1 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [8]
	*($3 + [112]) = *($3 + [168])
	CALL $16($1, $1, ($3 + [112]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [196]) = [0]
	*($3 + [192]) = [9]
	*($3 + [88]) = *($3 + [192])
	CALL $13($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [236]) = [0]
	*($3 + [232]) = [10]
	*($3 + [48]) = *($3 + [232])
	CALL $19($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [260]) = [0]
	*($3 + [256]) = [11]
	*($3 + [24]) = *($3 + [256])
	CALL $13($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [148]) = [0]
	*($3 + [144]) = [12]
	*($3 + [136]) = *($3 + [144])
	CALL $5($1, $1, ($3 + [136]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [188]) = [0]
	*($3 + [184]) = [13]
	*($3 + [96]) = *($3 + [184])
	CALL $7($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [284]) = [0]
	*($3 + [280]) = [14]
	*($3) = *($3 + [280])
	CALL $24($1, $1, $3)
	goto $label$1 
	
.LABEL $label$5
	*($3 + [212]) = [0]
	*($3 + [208]) = [15]
	*($3 + [72]) = *($3 + [208])
	CALL $7($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [244]) = [0]
	*($3 + [240]) = [16]
	*($3 + [40]) = *($3 + [240])
	CALL $27($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [220]) = [0]
	*($3 + [216]) = [17]
	*($3 + [64]) = *($3 + [216])
	CALL $7($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [164]) = [0]
	*($3 + [160]) = [18]
	*($3 + [120]) = *($3 + [160])
	CALL $16($1, $1, ($3 + [120]))
	
.LABEL $label$1
	CALL $207([0])
	$global$0 = ($3 + [288])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $88($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8522])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8522])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $91(CALL $90($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $205($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($0)
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*(($1 + [24]))), [9078])
	$5 = ((int_64)*($1 + [16]) + (int_64)*($4))
	*($1 + [16]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9121])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [9140])
	$4 = *($0)
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*(($1 + [40]))), [9078])
	$5 = ((int_64)*($1 + [32]) + (int_64)*($4))
	*($1 + [32]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9121])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [9140])
	$5 = *($1)
	*(($1 = *($0))) = ((int_64)$5 / (int_64)10)
	if ( ((int_64)$5 < (int_64)10) ){ goto $label$1 }
	$5 = *($3)
	*($2 + [48]) = [9061]
	*($2 + [52]) = CALL $213([9061])
	*($2 + [8]) = *($2 + [48])
	$6 = CALL $43(($2 + [56]), ($2 + [8]))
	$4 = *($3 + [8])
	$1 = ($4 + [48])
	$7 = *($6)
	$3 = [0]
	$4 = ($4 + [56])
	$6 = CALL db_lowerbound_i64(*($4 + [48]), *($4), (int_64)-4031679089989799264, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $35($1, $6)
	$3 = [1]
	
.LABEL $label$2
	CALL eosio_assert($3, [8365])
	$8 = *(CALL $35($1, CALL $fimport$4(*($1), *($4), (int_64)-4031679089989799264, (int_64)0)) + [16])
	*($2 + [32]) = [9068]
	*($2 + [36]) = CALL $213([9068])
	*($2) = *($2 + [32])
	$1 = CALL $43(($2 + [40]), $2)
	$0 = *($0)
	*(($4 = (($2 + [16]) + [8]))) = *(($0 + [8]))
	*($2 + [16]) = *($0)
	*($2 + [64]) = $8
	*($2 + [72]) = *($1)
	*(($1 = CALL _Znwj([16]))) = $5
	*($1 + [8]) = $7
	*(($2 + [100])) = [0]
	$0 = ($1 + [16])
	*(($2 + [88])) = $0
	*(($2 + [84])) = $0
	*($2 + [80]) = $1
	*($2 + [92 align=4]) = (int_64)0
	CALL $88(($2 + [92]), [16])
	$1 = *($2 + [92])
	$0 = (*(($2 + [96])) - $1)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8522])
	CALL memcpy($1, ($2 + [16]), [8])
	*($2 + [104]) = *($4)
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8522])
	CALL memcpy(($1 + [8]), ($2 + [104]), [8])
	CALL $89(($2 + [16]), ($2 + [64]))
	$1 = *($2 + [16])
	CALL send_inline($1, (*($2 + [20]) - $1))
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$3 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($2 + [92])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($2 + [96])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *($2 + [80])
	if ( ($1 == 0) ){ goto $label$1 }
	*(($2 + [84])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($2 + [112])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $205($0)
	
.LABEL $label$1
	$8 = *($2)
	$2 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($9 = ((int_32)$5 * (int_32)[24]))))) = $2
	*($1 + [8]) = $8
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $9) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $205($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8408])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8408])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8408])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8408])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8408])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8408])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8408])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8408])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [56])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8408])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8408])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [72])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8408])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $205($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($1) = *(*($0))
	*($1 + [8]) = *(*($0 + [4]))
	$2 = *(*($0 + [8]) + [8])
	CALL eosio_assert([1], [8686])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8735])
	*(($1 + [24])) = $2
	*($1 + [16]) = (int_64)0
	$2 = *(*(($0 + [8])) + [8])
	CALL eosio_assert([1], [8686])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8735])
	*(($1 + [40])) = $2
	*($1 + [32]) = (int_64)0
	$2 = *(*(($0 + [8])) + [8])
	CALL eosio_assert([1], [8686])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$3 = $5
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$15 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$6 = [0]
	
.LABEL $label$11
	CALL eosio_assert($6, [8735])
	*(($1 + [56])) = $2
	*($1 + [48]) = (int_64)0
	$2 = *(*(($0 + [8])) + [8])
	CALL eosio_assert([1], [8686])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$3 = $5
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$20 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$6 = [0]
	
.LABEL $label$16
	CALL eosio_assert($6, [8735])
	*(($1 + [72])) = $2
	*($1 + [64]) = (int_64)0
	*($1 + [80]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8522])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[0]), [8522])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $7, [1])
	$4 = (*($6) + [1])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[3]), [8522])
	CALL memcpy(*($6), ($7 + [4]), [4])
	$4 = (*($6) + [4])
	*($6) = $4
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8522])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8522])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8522])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8522])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $132(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8385])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [12]) = $0
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8408])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-2]) != (int_32)[8]), [8408])
	CALL memcpy(($5 + [8]), ($2 + [8]), [2])
	*($5 + [16]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $155(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $148 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8471])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([56])
	CALL $114($3)
	*($3 + [44]) = $1
	CALL $153(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [48])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $116(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [32])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($1 + [36])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $145 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $205($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [24])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [8])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [16])), (int_64)-4028217089798963200, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $138($9, $10)
	*($3 + [4]) = [0]
	*($3) = $9
	$8 = *(*(CALL $139($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [24])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9817])
	*($1) = *($7)
	$8 = CALL current_time()
	*($1 + [16]) = *(*($5 + [4]))
	*($1 + [8]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) - *([0] + [8192]))
	$5 = *($5 + [8])
	*($1 + [24 align=4]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$5 = $2
	$2 = ($5 + [-32])
	$global$0 = $2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($5 + [-3])
	CALL $147($3, $1)
	$8 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($4 + [8]), (int_64)-4028217089798963200, *(*($0 + [8])), $8, $2, [29])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8408])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8408])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8408])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [8408])
	CALL memcpy(($1 + [24]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8408])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8408])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $141 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8471])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [36]) = $1
	CALL $144(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [40])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $145(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [9534])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9579])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9629])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [40]))
}

int_32 .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [8522])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($3 | [8]), ($0 + [8]), [4])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-4021798726879390720, *(*($2 + [8])), $4, $3, [12])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $205($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $205($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $205($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	$5 = *($1)
	CALL $87($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8887])
	*($4 + [104]) = ($4 + [88])
	*($4 + [100]) = $4
	*($4 + [96]) = $4
	CALL $82(($4 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $4, [88])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8408])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [8408])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8408])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8408])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8464])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $77($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [3]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((int_32)*($6) != (int_32)$3), [8408])
	CALL memcpy($2, *($7), [1])
	$3 = (*($7) + [1])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[3]), [8408])
	CALL memcpy(($2 + [4]), *($7), [4])
	$3 = (*($7) + [4])
	*($7) = $3
	$2 = ($2 + [8])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [3])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$4 }
	$3 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$7 }
	$3 = int_32($2 >> [2])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL _Znwj(($3 << [3]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3) = (int_64)0
	$3 = (*($0) + [8])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $205($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [3]))
	$5 = ($2 + ($5 << [3]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	$3 = ($3 + [8])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [3]))
	$1 = *($0)
	$7 = ($0 + [4])
	$3 = (*($7) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $76($0, ($1 + [48]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8408])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8408])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [8408])
	CALL memcpy(($1 + [16]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8408])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8408])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8408])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $205($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [48])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [52])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*($1 + [8]) = *($4)
	$6 = *($1 + [48])
	$5 = *(($1 + [52]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$9 = *($0)
	$4 = [41]
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$4 = ((((int_32)uint_32(($7 + [-8]) >> [3]) * (int_32)[5]) + $4) + [5])
	
.LABEL $label$2
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $216($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL $79($3, $1)
	$8 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($9 + [8]), (int_64)-4023100430253817856, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($9 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($2)
	if ( (uint_64)($8 <= *($9 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($9 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $80($0, ($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = ($0 + [48])
	$4 = *(($0 + [76]))
	$3 = *(($0 + [72]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( (int_64)(*($6) == 0) ){ goto $label$5 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$2), [8413])
	if ( $6 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = CALL db_find_i64(*($2), *(($0 + [56])), (int_64)7176367599094267904, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $97($2, $5)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$2), [8413])
	
.LABEL $label$3
	$5 = *($6 + [8])
	$7 = CALL current_time()
	$8 = *($0)
	$3 = (CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000))
	$4 = *([0] + [8196])
	if ( ((int_32)$5 != (int_32)((($4 + $3) - ((uint_32)((*([0] + [8200]) << [3]) + $3) % (uint_32)$4)) - *([0] + [8192]))) ){ goto $label$1 }
	CALL eosio_assert([1], [8755])
	CALL $106($2, $6, $8, ($1 + [16]))
	$global$0 = ($1 + [32])
	return 
	
.LABEL $label$2
	CALL $107($1, $2, *($0), ($1 + [8]))
	$global$0 = ($1 + [32])
	return 
	
.LABEL $label$1
	CALL eosio_assert([1], [8755])
	CALL $108($2, $6, $8, ($1 + [24]))
	$global$0 = ($1 + [32])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [3])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$6 = [536870911]
	if ( ((uint_32)int_32($5 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [3])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $205($0)
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($0)
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*(($1 + [56]))), [9078])
	$5 = ((int_64)*($1 + [48]) + (int_64)*($4))
	*($1 + [48]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9121])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [9140])
	$4 = *($0)
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*(($1 + [72]))), [9078])
	$5 = ((int_64)*($1 + [64]) + (int_64)*($4))
	*($1 + [64]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9121])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [9140])
	$5 = *($3)
	*($2 + [48]) = [9061]
	*($2 + [52]) = CALL $213([9061])
	*($2 + [8]) = *($2 + [48])
	$4 = CALL $43(($2 + [56]), ($2 + [8]))
	$3 = *($3 + [8])
	$1 = ($3 + [48])
	$6 = *($4)
	$4 = [0]
	$3 = ($3 + [56])
	$7 = CALL db_lowerbound_i64(*($3 + [48]), *($3), (int_64)-4031679089989799264, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	CALL $35($1, $7)
	$4 = [1]
	
.LABEL $label$1
	CALL eosio_assert($4, [8365])
	$8 = *(CALL $35($1, CALL $fimport$4(*($1), *($3), (int_64)-4031679089989799264, (int_64)0)) + [16])
	*($2 + [32]) = [9068]
	*($2 + [36]) = CALL $213([9068])
	*($2) = *($2 + [32])
	$1 = CALL $43(($2 + [40]), $2)
	$0 = *($0)
	*(($3 = (($2 + [16]) + [8]))) = *(($0 + [8]))
	*($2 + [16]) = *($0)
	*($2 + [64]) = $8
	*($2 + [72]) = *($1)
	*(($1 = CALL _Znwj([16]))) = $5
	*($1 + [8]) = $6
	*(($2 + [100])) = [0]
	$0 = ($1 + [16])
	*(($2 + [88])) = $0
	*(($2 + [84])) = $0
	*($2 + [80]) = $1
	*($2 + [92 align=4]) = (int_64)0
	CALL $88(($2 + [92]), [16])
	$1 = *($2 + [92])
	$0 = (*(($2 + [96])) - $1)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8522])
	CALL memcpy($1, ($2 + [16]), [8])
	*($2 + [104]) = *($3)
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8522])
	CALL memcpy(($1 + [8]), ($2 + [104]), [8])
	CALL $89(($2 + [16]), ($2 + [64]))
	$1 = *($2 + [16])
	CALL send_inline($1, (*($2 + [20]) - $1))
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$2 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$1 = *($2 + [92])
	if ( ($1 == 0) ){ goto $label$3 }
	*(($2 + [96])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($2 + [80])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($2 + [84])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($2 + [112])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [592])
	$global$0 = $2
	*($2 + [72]) = (($2 + [80]) + CALL read_transaction(($2 + [80]), [512]))
	*($2 + [68]) = ($2 + [80])
	*($2 + [64]) = ($2 + [80])
	$3 = CALL current_time()
	*(($2 + [28])) = (int_64)0
	*(($2 + [44])) = (int_64)0
	*(($2 + [52])) = (int_64)0
	*($2 + [12]) = [0]
	*($2 + [16]) = [0]
	*($2 + [20 align=4]) = (int_64)0
	*($2 + [36 align=4]) = (int_64)0
	*($2) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [60])
	CALL $103(($2 + [64]), $2)
	CALL $105(CALL $104(CALL $104(($2 + [64]), ($2 + [24])), ($2 + [36])), ($2 + [48]))
	CALL eosio_assert(((int_32)((int_32)(*(($2 + [40])) - *($2 + [36])) / (int_32)[40]) == (int_32)$1), [9377])
	CALL $102($2)
	$global$0 = ($2 + [592])
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8385])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([56])
	$6 = CALL $114($5)
	*($5 + [44]) = $0
	CALL $115(($3 + [32]), $6)
	*($5 + [48]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $116(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8385])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([32]))) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [20]) = $0
	CALL $120(($3 + [32]), $5)
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $121(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8522])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8522])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8522])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8522])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8522])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	$5 = CALL $213([8946])
	if ( ($5 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [8963])
	goto $label$6 
	
.LABEL $label$7
	if ( ($5 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = (int_64)0
	
.LOOP $label$8:
	$7 = *(($5 + [8945]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [9008])
	
.LABEL $label$9
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$8 }
	if ( ((int_64)*($2 + [8]) != (int_64)((int_64)((int_64)$6 << (int_64)8) | (int_64)4)) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_64)*($2 + [8]) != (int_64)4) ){ goto $label$3 }
	
.LABEL $label$4
	*(($4 + [40])) = [0]
	$6 = *($0)
	*($4 + [8]) = $6
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = $6
	$5 = CALL db_find_i64($6, $6, (int_64)-4023100423488818528, *(*($1 + [4])))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$5 = CALL $65(($4 + [8]), $5)
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)($4 + [8])), [8413])
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$10 }
	$6 = *($0)
	*($4 + [4]) = $0
	*($4) = $2
	CALL eosio_assert([1], [8755])
	CALL $93(($4 + [8]), $5, $6, $4)
	
.LABEL $label$10
	$2 = *($4 + [32])
	if ( ($2 == 0) ){ goto $label$3 }
	$0 = ($4 + [36])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$11:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$11 }
	$5 = *(($4 + [32]))
	goto $label$1 
	
.LABEL $label$3
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$2
	$5 = $2
	
.LABEL $label$1
	*($0) = $2
	CALL _ZdlPv($5)
	$global$0 = ($4 + [48])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	$5 = *($1)
	CALL $94($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8887])
	*($4 + [104]) = ($4 + [88])
	*($4 + [100]) = $4
	*($4 + [96]) = $4
	CALL $82(($4 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $4, [88])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8385])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [36]) = $0
	CALL $146(($3 + [32]), $5)
	*($5 + [40]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $145(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [40]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9769])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4028217089798963200)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9715])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9715])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $138(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $205($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $131 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [32]) = *(*($3))
	*($1 + [40]) = *(*($3 + [4]))
	$6 = *($1)
	$7 = $6
	$3 = *($3 + [8])
	$8 = ($1 + [48])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$1 }
	CALL $99($8, *($3), *($3 + [4]))
	$7 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [8887])
	$9 = *($1 + [48])
	$8 = *(($1 + [52]))
	$10 = ($8 - $9)
	$7 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	$3 = [41]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$3 }
	$3 = ((((int_32)uint_32(($10 + [-8]) >> [3]) * (int_32)[5]) + $3) + [5])
	
.LABEL $label$3
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $216($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $79($5, $1)
	CALL db_update_i64(*($1 + [64]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $219($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [16])
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8522])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8522])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $133 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $1
	$4 = ($0 + [8])
	$5 = ($0 + [16])
	$6 = CALL db_lowerbound_i64(*($0 + [8]), *($5), (int_64)-4028217089798963200, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	CALL $138($4, $6)
	*($3 + [8]) = (CASTING uint_64)(uint_32 $4)
	$7 = ((CASTING uint_32)(uint_64 (int_64))(*(*(CALL $139(($3 + [8])) + [4])) - *(CALL $138($4, CALL $fimport$4(*($4), *($5), (int_64)-4028217089798963200, (int_64)0))))) + [1]
	if ( ((int_32)$7) < (int_32)[101]) ){ goto $label$1 }
	$5 = [0]
	$6 = CALL db_lowerbound_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4028217089798963200, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $138($4, $6)
	
.LABEL $label$2
	$8 = [100]
	
.LOOP $label$3:
	if ( ($5 == 0) ){ goto $label$1 }
	CALL eosio_assert([1], [9500])
	CALL eosio_assert([1], [9158])
	$6 = [0]
	$9 = CALL db_next_i64(*($5 + [40]), ($3 + [8]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $138($4, $9)
	
.LABEL $label$4
	CALL $140($4, $5)
	$5 = $6
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [8]) = $0
	*($3 + [16]) = $2
	*($3 + [12]) = ($3 + [24])
	CALL $141($3, $4, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*($1 + [8]) = *($4)
	$6 = *($1 + [48])
	$5 = *(($1 + [52]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$9 = *($0)
	$4 = [41]
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$4 = ((((int_32)uint_32(($7 + [-8]) >> [3]) * (int_32)[5]) + $4) + [5])
	
.LABEL $label$2
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $216($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL $79($3, $1)
	$8 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($9 + [8]), (int_64)-4023100430253817856, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($9 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($2)
	if ( (uint_64)($8 <= *($9 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($9 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $135 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8887])
	CALL eosio_assert([1], [8522])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	CALL db_update_i64(*($1 + [20]), $2, $4, [12])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9534])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9579])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9629])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $137 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8471])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $143($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $142(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $213 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $208 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [19] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $210($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $210($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $210($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $210($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18512]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $210($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $210($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $210($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $209 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $202 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $213($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $199($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $203 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $199($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $200 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $201($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $201 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $206 ()
{
	return [10100]
}

void .FUNC $207 (int_32 $0)
{
}

void .FUNC $204 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $200(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $212(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8468], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $200(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $200(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $205 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $181 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [9534])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9579])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9629])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [92]))
}

void .FUNC $129 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [16]) = $1
	$5 = (((uint_32)$3 > (uint_32)[9997]) + $2)
	*($4 + [12]) = $5
	$6 = ($0 + [80])
	$3 = *(($0 + [108]))
	$7 = *(($0 + [104]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$2 = ($3 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$5 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$6), [8413])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	$2 = CALL db_find_i64(*($6), *(($0 + [88])), (int_64)-4021798726879390720, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $128($6, $2)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$6), [8413])
	
.LABEL $label$7
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$1 = *($0)
	if ( ($8 == 0) ){ goto $label$1 }
	*($4 + [24]) = ($4 + [12])
	CALL eosio_assert([1], [8755])
	CALL $135($6, $8, $1, ($4 + [24]))
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$2
	if ( ($8 == 0) ){ goto $label$8 }
	CALL eosio_assert([1], [9500])
	CALL eosio_assert([1], [9158])
	$2 = CALL db_next_i64(*($8 + [20]), ($4 + [24]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$9 }
	CALL $128($6, $2)
	
.LABEL $label$9
	CALL $136($6, $8)
	
.LABEL $label$8
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$1
	*($4 + [28]) = ($4 + [12])
	*($4 + [24]) = ($4 + [16])
	CALL $137($4, $6, $1, ($4 + [24]))
	$global$0 = ($4 + [32])
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8385])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8408])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [8408])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $142(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $40(($0 + [424]), $1, $2)
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [640])
	$global$0 = $3
	*(($4 = $3) + [584]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*($4 + [576]) = [0]
	*($4 + [568]) = (int_64)0
	*($4 + [580]) = [0]
	*($4 + [556]) = $2
	*($4 + [552]) = $2
	*($4 + [560]) = ($2 + $5)
	CALL $38(($4 + [552]), ($4 + [568]))
	CALL eosio_assert(((int_32)*($4 + [560]) != (int_32)*($4 + [556])), [8408])
	CALL memcpy(($4 + [16]), *($4 + [556]), [1])
	*($4 + [556]) = (*($4 + [556]) + [1])
	*($4 + [580]) = ((int_32)*($4 + [16]) != (int_32)[0])
	*(($3 = ($4 + [8]))) = *($4 + [560])
	*($4) = *($4 + [552])
	$3 = *($3)
	*((($4 + [592]) + [8])) = $3
	*(($6 = (($4 + [608]) + [8]))) = $3
	$7 = *($4)
	*($4 + [608]) = $7
	*($4 + [592]) = $7
	$3 = *($6)
	*((($4 + [624]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [608])
	*($4 + [32]) = $1
	*($4 + [624]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	$3 = ($4 + [48])
	*(($4 + [144])) = $3
	$6 = ($4 + [288])
	*(($4 + [148])) = $6
	*(($4 + [152])) = $0
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [136]) = $0
	*(($4 + [184])) = [0]
	*(($4 + [176])) = (int_64)0
	*(($4 + [192])) = $0
	*(($4 + [200])) = $0
	*(($4 + [208])) = $0
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [248])) = $0
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*(($4 + [296])) = $0
	*(($4 + [304])) = $0
	*(($4 + [312])) = (int_64)-1
	*($4 + [288]) = $0
	*(($4 + [328])) = [0]
	*(($4 + [320])) = (int_64)0
	*(($4 + [336])) = $0
	*(($4 + [344])) = $0
	*(($4 + [352])) = (int_64)-1
	*(($4 + [360])) = (int_64)0
	*(($4 + [368])) = [0]
	*(($4 + [376])) = $0
	*(($4 + [384])) = $0
	*(($4 + [392])) = (int_64)-1
	*(($4 + [400])) = (int_64)0
	*(($4 + [408])) = [0]
	*(($4 + [424])) = $3
	*(($4 + [428])) = ($4 + [136])
	*(($4 + [432])) = $6
	*(($4 + [440])) = $0
	*(($4 + [448])) = $0
	*($4 + [416]) = $0
	*(($4 + [456])) = (int_64)-1
	*(($4 + [464])) = (int_64)0
	*(($4 + [472])) = [0]
	*(($4 + [480])) = $0
	*(($4 + [488])) = $0
	*(($4 + [496])) = $0
	*(($4 + [504])) = $0
	*(($4 + [512])) = (int_64)-1
	*(($4 + [520])) = (int_64)0
	*(($4 + [528])) = [0]
	*(($4 + [536])) = $0
	*(($4 + [544])) = $0
	*($4 + [628]) = ($4 + [584])
	*($4 + [624]) = ($4 + [16])
	CALL $39(($4 + [624]), ($4 + [568]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $219($2)
	
.LABEL $label$4
	CALL $31(($4 + [16]))
	$6 = *($4 + [568])
	if ( ($6 == 0) ){ goto $label$5 }
	$2 = *($4 + [572])
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($2 + [-48])
	$3 = *(($2 + [-16]))
	if ( ($3 == 0) ){ goto $label$9 }
	*(($2 + [-12])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$2 = $5
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$2 = *($4 + [568])
	goto $label$6 
	
.LABEL $label$7
	$2 = $6
	
.LABEL $label$6
	*($4 + [572]) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [640])
	return [1]
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = CALL current_time()
	*($1 + [12]) = [1]
	$6 = (CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000))
	$5 = *([0] + [8196])
	*($1 + [8]) = ((($5 + $6) - ((uint_32)((*([0] + [8200]) << [3]) + $6) % (uint_32)$5)) - *([0] + [8192]))
	*($1 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert([1], [8522])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($2 | [8]), ($1 + [8]), [4])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($2 | [12]), ($1 + [12]), [4])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($2 + [16]), ($1 + [16]), [4])
	$4 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($3 + [8]), (int_64)7176367599094267904, *(*($0 + [8])), $4, $2, [20])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $205($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8408])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8408])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8408])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8408])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $2 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *(($4 + [8]))
	*((($5 + [16]) + [8])) = $6
	$7 = *($4)
	*(($5 + [8])) = $6
	*($5 + [16]) = $7
	*($5) = $7
	CALL $34(($0 + [120]), $1, $2, $3, $5)
	$global$0 = ($5 + [32])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8522])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8522])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $91($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8522])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8522])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8522])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $91(CALL $90($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8522])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8522])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8522])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8522])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8522])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $14 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL $49(($0 + [32]), $1, $2)
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	CALL $54(($0 + [120]), $1)
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [544])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [536]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[3]), [8408])
	CALL memcpy(($4 + [536]), $2, [4])
	*(($4 + [20])) = ($2 + [4])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [120]) = $0
	$3 = ($4 + [272])
	*(($4 + [132])) = $3
	$8 = ($4 + [32])
	*(($4 + [128])) = $8
	*(($4 + [136])) = $0
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = $0
	*(($4 + [192])) = $0
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [232])) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [264])) = [0]
	*(($4 + [256])) = (int_64)0
	*(($4 + [280])) = $0
	*(($4 + [288])) = $0
	*(($4 + [296])) = (int_64)-1
	*(($4 + [304])) = (int_64)0
	*(($4 + [312])) = [0]
	*(($4 + [320])) = $0
	*(($4 + [328])) = $0
	*(($4 + [336])) = (int_64)-1
	*(($4 + [344])) = (int_64)0
	*(($4 + [352])) = [0]
	*(($4 + [360])) = $0
	*(($4 + [368])) = $0
	*(($4 + [376])) = (int_64)-1
	*(($4 + [384])) = (int_64)0
	*($4 + [272]) = $0
	*(($4 + [392])) = [0]
	*(($4 + [408])) = $8
	*(($4 + [412])) = ($4 + [120])
	*(($4 + [416])) = $3
	*(($4 + [424])) = $0
	*(($4 + [432])) = $0
	*(($4 + [440])) = (int_64)-1
	*(($4 + [448])) = (int_64)0
	*(($4 + [456])) = [0]
	*(($4 + [464])) = $0
	*(($4 + [472])) = $0
	*(($4 + [480])) = $0
	*(($4 + [488])) = $0
	*(($4 + [496])) = (int_64)-1
	*(($4 + [504])) = (int_64)0
	*(($4 + [512])) = [0]
	*($4 + [400]) = $0
	*(($4 + [528])) = $0
	*(($4 + [520])) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *($4 + [536])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $219($2)
	
.LABEL $label$5
	CALL $31($4)
	$global$0 = ($4 + [544])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL $50(($0 + [120]), $1, $2)
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	CALL $46(($0 + [32]), $1)
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [544])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [536]) = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8408])
	CALL memcpy(($4 + [536]), $2, [1])
	*(($4 + [20])) = ($2 + [1])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [120]) = $0
	$3 = ($4 + [272])
	*(($4 + [132])) = $3
	$8 = ($4 + [32])
	*(($4 + [128])) = $8
	*(($4 + [136])) = $0
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = $0
	*(($4 + [192])) = $0
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [232])) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [264])) = [0]
	*(($4 + [256])) = (int_64)0
	*(($4 + [280])) = $0
	*(($4 + [288])) = $0
	*(($4 + [296])) = (int_64)-1
	*(($4 + [304])) = (int_64)0
	*(($4 + [312])) = [0]
	*(($4 + [320])) = $0
	*(($4 + [328])) = $0
	*(($4 + [336])) = (int_64)-1
	*(($4 + [344])) = (int_64)0
	*(($4 + [352])) = [0]
	*(($4 + [360])) = $0
	*(($4 + [368])) = $0
	*(($4 + [376])) = (int_64)-1
	*(($4 + [384])) = (int_64)0
	*($4 + [272]) = $0
	*(($4 + [392])) = [0]
	*(($4 + [408])) = $8
	*(($4 + [412])) = ($4 + [120])
	*(($4 + [416])) = $3
	*(($4 + [424])) = $0
	*(($4 + [432])) = $0
	*(($4 + [440])) = (int_64)-1
	*(($4 + [448])) = (int_64)0
	*(($4 + [456])) = [0]
	*(($4 + [464])) = $0
	*(($4 + [472])) = $0
	*(($4 + [480])) = $0
	*(($4 + [488])) = $0
	*(($4 + [496])) = (int_64)-1
	*(($4 + [504])) = (int_64)0
	*(($4 + [512])) = [0]
	*($4 + [400]) = $0
	*(($4 + [528])) = $0
	*(($4 + [520])) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *($4 + [536])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($8 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $219($2)
	
.LABEL $label$5
	CALL $31($4)
	$global$0 = ($4 + [544])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((int_64)*($0 + [32]) == (int_64)$1) ){ goto $label$1 }
	$4 = ($0 + [88])
	$3 = ($0 + [80])
	$5 = CALL db_lowerbound_i64(*($3), *($4), (int_64)-4031679089989799264, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	CALL $35($3, $5)
	$3 = ((int_32)*(CALL $35($3, CALL $fimport$4(*($3), *($4), (int_64)-4031679089989799264, (int_64)0)) + [8]) != (int_32)[1])
	goto $label$2 
	
.LABEL $label$3
	$3 = [1]
	
.LABEL $label$2
	CALL eosio_assert($3, [9188])
	
.LABEL $label$1
	CALL $36(($0 + [400]), $1, $2, [1])
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [560])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [552]) = [0]
	*($4 + [544]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8408])
	CALL memcpy(($4 + [544]), $2, [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [8408])
	CALL memcpy((($4 + [544]) + [8]), ($2 + [8]), [1])
	*(($4 + [28])) = ($2 + [9])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$3 = ($4 + [280])
	*(($4 + [140])) = $3
	$8 = ($4 + [40])
	*(($4 + [136])) = $8
	*(($4 + [144])) = $0
	*(($4 + [152])) = $0
	*(($4 + [160])) = (int_64)-1
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = $0
	*(($4 + [200])) = $0
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [272])) = [0]
	*(($4 + [264])) = (int_64)0
	*(($4 + [288])) = $0
	*(($4 + [296])) = $0
	*(($4 + [304])) = (int_64)-1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = [0]
	*(($4 + [328])) = $0
	*(($4 + [336])) = $0
	*(($4 + [344])) = (int_64)-1
	*(($4 + [352])) = (int_64)0
	*(($4 + [360])) = [0]
	*(($4 + [368])) = $0
	*(($4 + [376])) = $0
	*(($4 + [384])) = (int_64)-1
	*(($4 + [392])) = (int_64)0
	*($4 + [280]) = $0
	*(($4 + [400])) = [0]
	*(($4 + [416])) = $8
	*(($4 + [420])) = ($4 + [128])
	*(($4 + [424])) = $3
	*(($4 + [432])) = $0
	*(($4 + [440])) = $0
	*(($4 + [448])) = (int_64)-1
	*(($4 + [456])) = (int_64)0
	*(($4 + [464])) = [0]
	*(($4 + [472])) = $0
	*(($4 + [480])) = $0
	*(($4 + [488])) = $0
	*(($4 + [496])) = $0
	*(($4 + [504])) = (int_64)-1
	*(($4 + [512])) = (int_64)0
	*(($4 + [520])) = [0]
	*($4 + [408]) = $0
	*(($4 + [536])) = $0
	*(($4 + [528])) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [552])
	$0 = *($4 + [544])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($8 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $219($2)
	
.LABEL $label$5
	CALL $31(($4 + [8]))
	$global$0 = ($4 + [560])
	return [1]
}

int_32 .FUNC $185 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [76])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [72]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [36])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	return $0
}

void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [32]) = [9869]
	*($3 + [36]) = CALL $213([9869])
	*($3 + [16]) = *($3 + [32])
	if ( ((int_64)*(CALL $43(($3 + [40]), ($3 + [16]))) != (int_64)$1) ){ goto $label$1 }
	CALL $44(($0 + [136]), $2)
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$1
	*($3 + [24]) = [9873]
	*($3 + [28]) = CALL $213([9873])
	*($3 + [8]) = *($3 + [24])
	if ( ((int_64)*(CALL $43(($3 + [40]), ($3 + [8]))) != (int_64)$1) ){ goto $label$2 }
	CALL $45(($0 + [424]), $2)
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$2
	CALL eosio_assert([0], [9878])
	$global$0 = ($3 + [48])
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [560])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [552]) = [0]
	*($4 + [544]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8408])
	CALL memcpy(($4 + [544]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-2]) != (int_32)[8]), [8408])
	CALL memcpy((($4 + [544]) + [8]), ($2 + [8]), [2])
	*(($4 + [28])) = ($2 + [10])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$3 = ($4 + [280])
	*(($4 + [140])) = $3
	$8 = ($4 + [40])
	*(($4 + [136])) = $8
	*(($4 + [144])) = $0
	*(($4 + [152])) = $0
	*(($4 + [160])) = (int_64)-1
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = $0
	*(($4 + [200])) = $0
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [272])) = [0]
	*(($4 + [264])) = (int_64)0
	*(($4 + [288])) = $0
	*(($4 + [296])) = $0
	*(($4 + [304])) = (int_64)-1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = [0]
	*(($4 + [328])) = $0
	*(($4 + [336])) = $0
	*(($4 + [344])) = (int_64)-1
	*(($4 + [352])) = (int_64)0
	*(($4 + [360])) = [0]
	*(($4 + [368])) = $0
	*(($4 + [376])) = $0
	*(($4 + [384])) = (int_64)-1
	*(($4 + [392])) = (int_64)0
	*($4 + [280]) = $0
	*(($4 + [400])) = [0]
	*(($4 + [416])) = $8
	*(($4 + [420])) = ($4 + [128])
	*(($4 + [424])) = $3
	*(($4 + [432])) = $0
	*(($4 + [440])) = $0
	*(($4 + [448])) = (int_64)-1
	*(($4 + [456])) = (int_64)0
	*(($4 + [464])) = [0]
	*(($4 + [472])) = $0
	*(($4 + [480])) = $0
	*(($4 + [488])) = $0
	*(($4 + [496])) = $0
	*(($4 + [504])) = (int_64)-1
	*(($4 + [512])) = (int_64)0
	*(($4 + [520])) = [0]
	*($4 + [408]) = $0
	*(($4 + [536])) = $0
	*(($4 + [528])) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [552])
	$0 = *($4 + [544])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($8 & [65535])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $219($2)
	
.LABEL $label$5
	CALL $31(($4 + [8]))
	$global$0 = ($4 + [560])
	return [1]
}

void .FUNC $184 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [64]) = (int_64)0
	$5 = *($1)
	*($1 + [80]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8887])
	*($4 + [104]) = ($4 + [88])
	*($4 + [100]) = $4
	*($4 + [96]) = $4
	CALL $82(($4 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $4, [88])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[48]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[48])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[89478486]) ){ goto $label$3 }
	$3 = [89478485]
	$2 = ((int_32)($2 - $4) / (int_32)[48])
	if ( ((uint_32)$2 > (uint_32)[44739241]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[48]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	CALL $114($3)
	$3 = (*($2) + [48])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $205($0)
	
.LABEL $label$2
	$7 = ($2 + ((int_32)$3 * (int_32)[48]))
	$5 = ($2 + ((int_32)$5 * (int_32)[48]))
	$3 = $5
	
.LOOP $label$8:
	CALL $114($3)
	$3 = ($3 + [48])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$8 = ($2 + ((int_32)$6 * (int_32)[48]))
	$1 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$10 }
	$10 = ($1 - $9)
	$2 = [0]
	
.LOOP $label$11:
	$3 = ($9 + $2)
	*((($1 = ($5 + $2)) + [-24])) = *(($3 + [-24]))
	*(($1 + [-32])) = *(($3 + [-32]))
	*(($1 + [-40])) = *(($3 + [-40]))
	*(($1 + [-48])) = *(($3 + [-48]))
	*(($6 = ($1 + [-16]))) = (int_64)0
	*(($1 = ($1 + [-8]))) = [0]
	$4 = ($3 + [-16])
	*($6) = *($4)
	$3 = ($3 + [-8])
	*($1) = *($3)
	*($3) = [0]
	*($4) = (int_64)0
	$2 = ($2 + [-48])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$11 }
	$5 = ($5 + $2)
	$1 = *(($0 + [4]))
	$6 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$6 = $1
	
.LABEL $label$9
	*($0) = $5
	*(($0 + [4])) = $8
	*(($0 + [8])) = $7
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$13:
	$3 = ($1 + [-48])
	$2 = *(($1 + [-16]))
	if ( ($2 == 0) ){ goto $label$14 }
	*(($1 + [-12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$14
	$1 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($6 == 0) ){ goto $label$1 }
	CALL _ZdlPv($6)
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $218 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10108]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10112])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10108]) = [1]
	$2 = ($2 << [16])
	*([0] + [10112]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10112])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10112]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10108]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10108]) = [1]
	$3 = ($3 << [16])
	*([0] + [10112]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10112])
	
.LABEL $label$10
	*([0] + [10112]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $186 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [136]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$2 = *(($0 + [96]))
	if ( ($2 == 0) ){ goto $label$6 }
	$5 = ($0 + [100])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	$1 = *($4 + [48])
	if ( ($1 == 0) ){ goto $label$11 }
	*(($4 + [52])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $2
	
.LABEL $label$7
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [40]))
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [44])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	CALL _ZdlPv($4)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$15 }
	$3 = *(($0 + [40]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$3 = *($0)
	CALL eosio_assert([1], [8522])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($2 | [8]), ($1 + [8]), [1])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($2 | [9]), ($1 + [16]), [8])
	$4 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-4019767415373037568, *(*($0 + [8])), $4, $2, [17])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $205($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [36])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[24])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$3 }
	$3 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	CALL $119($3)
	$3 = (*($0) + [24])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $205($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[24]))
	$5 = ($2 + ((int_32)$5 * (int_32)[24]))
	$3 = $5
	
.LOOP $label$8:
	CALL $119($3)
	$3 = ($3 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[24]))
	$1 = *($0)
	$7 = ($0 + [4])
	$3 = (*($7) - $1)
	$2 = ($5 + ((int_32)((int_32)$3 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $114 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$1 = CALL $213([8946])
	if ( ($1 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8963])
	goto $label$3 
	
.LABEL $label$4
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$3 = *(($1 + [8945]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9008])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)4
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($1 = ($0 + [24]))) = $2
	CALL eosio_assert([1], [8686])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $4
	$3 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $4
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$11 }
	$3 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	
.LABEL $label$7
	CALL eosio_assert($3, [8735])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8408])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [8408])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8408])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	$4 = (int_64)0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8408])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = [0]
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *(($0 + [8]))), [8464])
	$7 = ($0 + [4])
	$5 = *($7)
	$3 = *($5)
	$5 = ($5 + [1])
	*($7) = $5
	$6 = ($6 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($3 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$3 = *($1 + [32])
	$8 = ($1 + [36])
	$5 = *($8)
	$7 = ((int_32)($5 - $3) / (int_32)[24])
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$4 }
	$3 = ($1 + [32])
	CALL $117($3, ($6 - $7))
	$5 = *($8)
	$3 = *($3)
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$7 <= (uint_32)$6) ){ goto $label$5 }
	$5 = ($3 + ((int_32)$6 * (int_32)[24]))
	*(($1 + [36])) = $5
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $118($0, $3)
	$3 = ($3 + [24])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8464])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $113($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [8408])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [8408])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $205($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8464])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $88($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8408])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[40])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[40]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $205($0)
	
.LABEL $label$1
	$7 = ($2 + ((int_32)$6 * (int_32)[40]))
	$8 = ($2 + ((int_32)$3 * (int_32)[40]))
	$6 = $8
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$9 = ($8 + ((int_32)$1 * (int_32)[40]))
	$6 = *($0)
	$10 = *(($0 + [4]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$9 }
	$11 = ($6 - $10)
	$1 = [0]
	
.LOOP $label$10:
	$2 = ($10 + $1)
	*((($6 = ($8 + $1)) + [-32])) = *(($2 + [-32]))
	*(($6 + [-40])) = *(($2 + [-40]))
	*(($3 = ($6 + [-24]))) = (int_64)0
	*(($4 = ($6 + [-16]))) = [0]
	$5 = ($2 + [-24])
	*($3) = *($5)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($6 + [-12]))) = (int_64)0
	*(($6 = ($6 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($5) = (int_64)0
	$2 = ($2 + [-4])
	*($6) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$10 }
	$8 = ($8 + $1)
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$3 = $6
	
.LABEL $label$8
	*($0) = $8
	*(($0 + [4])) = $9
	*(($0 + [8])) = $7
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = *(($6 + [-12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($6 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$2 = ($6 + [-40])
	$1 = *(($6 + [-24]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [8408])
	CALL memcpy($1, *($0 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[1]), [8408])
	CALL memcpy(($1 + [2]), *($0 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8408])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8408])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $119 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$1 = CALL $213([8946])
	if ( ($1 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8963])
	goto $label$3 
	
.LABEL $label$4
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$3 = *(($1 + [8945]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9008])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)4
	
.LABEL $label$1
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = $2
	CALL eosio_assert([1], [8686])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$2 = $4
	$5 = [1]
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	$2 = $4
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $3 ){ goto $label$12 }
	$5 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL eosio_assert($5, [8735])
	return $0
	
.LABEL $label$8
	CALL eosio_assert([0], [8735])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8735])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	CALL $55(($0 + [120]), $1)
}

void .FUNC $28 (int_32 $0, int_64 $1)
{
	CALL $47(($0 + [32]), $1)
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL $57(($0 + [120]), $1, $2)
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL $37(($0 + [400]), $1, $2)
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *(($3 + [8]))
	*((($4 + [16]) + [8])) = $5
	$6 = *($3)
	*(($4 + [8])) = $5
	*($4 + [16]) = $6
	*($4) = $6
	CALL $32(($0 + [120]), $1, $2, $4)
	$global$0 = ($4 + [32])
}

void .FUNC $22 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0 + [400]))
	$3 = *(($0 + [412]))
	$4 = ($3 + [72])
	$6 = *(($3 + [100]))
	$5 = *(($3 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)$4), [8413])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($3 + [80])), (int_64)-4023100430253817856, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $51($4, $7)
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)$4), [8413])
	
.LABEL $label$1
	$1 = *(($0 + [400]))
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8755])
	CALL $52($4, $8, $1, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $25 (int_32 $0, int_64 $1)
{
	CALL $48(($0 + [32]), $1)
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$3 = ($global$0 - [672])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [592]) + [24]))) = (int_64)0
	*($4 + [600]) = (int_64)0
	*($4 + [592]) = (int_64)0
	*($4 + [608]) = (int_64)0
	*($4 + [580]) = $2
	*($4 + [576]) = $2
	*($4 + [584]) = ($2 + $7)
	*($4 + [656]) = ($4 + [576])
	*($4 + [40]) = ($4 + [592])
	CALL $30(($4 + [40]), ($4 + [656]))
	*(($9 = (($4 + [24]) + [8]))) = *($4 + [584])
	*($4 + [24]) = *($4 + [576])
	$10 = *($9)
	*(($3 = (($4 + [624]) + [8]))) = $10
	*(($9 = (($4 + [640]) + [8]))) = $10
	$11 = *($4 + [24])
	*($4 + [640]) = $11
	*($4 + [624]) = $11
	$10 = *($9)
	*((($4 + [656]) + [8])) = $10
	*((($4 + [40]) + [24])) = $10
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$1 = *($4 + [640])
	*($4 + [56]) = $1
	*($4 + [656]) = $1
	*(($4 + [80])) = $0
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	$10 = ($4 + [72])
	*(($4 + [168])) = $10
	$12 = ($4 + [312])
	*(($4 + [172])) = $12
	*(($4 + [176])) = $0
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [72]) = $0
	*($4 + [160]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [216])) = $0
	*(($4 + [224])) = $0
	*(($4 + [232])) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*(($4 + [264])) = [0]
	*(($4 + [272])) = $0
	*(($4 + [280])) = $0
	*(($4 + [288])) = (int_64)-1
	*(($4 + [296])) = (int_64)0
	*(($4 + [304])) = [0]
	*(($4 + [320])) = $0
	*(($4 + [328])) = $0
	*(($4 + [336])) = (int_64)-1
	*($4 + [312]) = $0
	*(($4 + [352])) = [0]
	*(($4 + [344])) = (int_64)0
	*(($4 + [360])) = $0
	*(($4 + [368])) = $0
	*(($4 + [376])) = (int_64)-1
	*(($4 + [384])) = (int_64)0
	*(($4 + [392])) = [0]
	*(($4 + [400])) = $0
	*(($4 + [408])) = $0
	*(($4 + [416])) = (int_64)-1
	*(($4 + [424])) = (int_64)0
	*(($4 + [432])) = [0]
	*(($4 + [448])) = $10
	*(($4 + [452])) = ($4 + [160])
	*(($4 + [456])) = $12
	*(($4 + [464])) = $0
	*(($4 + [472])) = $0
	*($4 + [440]) = $0
	*(($4 + [480])) = (int_64)-1
	*(($4 + [488])) = (int_64)0
	*(($4 + [496])) = [0]
	*(($4 + [504])) = $0
	*(($4 + [512])) = $0
	*(($4 + [520])) = $0
	*(($4 + [528])) = $0
	*(($4 + [536])) = (int_64)-1
	*(($4 + [544])) = (int_64)0
	*(($4 + [552])) = [0]
	*(($4 + [560])) = $0
	*(($4 + [568])) = $0
	*($3) = *($8)
	*($4 + [624]) = *($4 + [608])
	$0 = *($4 + [600])
	$1 = *($4 + [592])
	*($9) = *($3)
	*($4 + [640]) = *($4 + [624])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$11 = *((($4 + [640]) + [8]))
	*((($4 + [656]) + [8])) = $11
	*((($4 + [8]) + [8])) = $11
	$11 = *($4 + [640])
	*($4 + [8]) = $11
	*($4 + [656]) = $11
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $219($2)
	
.LABEL $label$5
	CALL $31(($4 + [40]))
	$global$0 = ($4 + [672])
	return [1]
}

int_32 .FUNC $27 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [640])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [584]) = [0]
	*($4 + [576]) = (int_64)0
	*($4 + [588]) = [0]
	*($4 + [564]) = $2
	*($4 + [560]) = $2
	*($4 + [568]) = ($2 + $7)
	CALL $41(($4 + [560]), ($4 + [576]))
	CALL eosio_assert(((int_32)*($4 + [568]) != (int_32)*($4 + [564])), [8408])
	CALL memcpy(($4 + [24]), *($4 + [564]), [1])
	*($4 + [564]) = (*($4 + [564]) + [1])
	*($4 + [588]) = ((int_32)*($4 + [24]) != (int_32)[0])
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [568])
	*($4 + [8]) = *($4 + [560])
	$3 = *($3)
	*((($4 + [592]) + [8])) = $3
	*(($8 = (($4 + [608]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [608]) = $9
	*($4 + [592]) = $9
	$3 = *($8)
	*((($4 + [624]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [608])
	*($4 + [40]) = $1
	*($4 + [624]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = $0
	*(($4 + [80])) = (int_64)-1
	*(($4 + [88])) = (int_64)0
	*(($4 + [96])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = $0
	*(($4 + [120])) = (int_64)-1
	*(($4 + [128])) = (int_64)0
	*(($4 + [136])) = [0]
	$3 = ($4 + [56])
	*(($4 + [152])) = $3
	$8 = ($4 + [296])
	*(($4 + [156])) = $8
	*(($4 + [160])) = $0
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [144]) = $0
	*(($4 + [192])) = [0]
	*(($4 + [184])) = (int_64)0
	*(($4 + [200])) = $0
	*(($4 + [208])) = $0
	*(($4 + [216])) = $0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*(($4 + [304])) = $0
	*(($4 + [312])) = $0
	*(($4 + [320])) = (int_64)-1
	*($4 + [296]) = $0
	*(($4 + [336])) = [0]
	*(($4 + [328])) = (int_64)0
	*(($4 + [344])) = $0
	*(($4 + [352])) = $0
	*(($4 + [360])) = (int_64)-1
	*(($4 + [368])) = (int_64)0
	*(($4 + [376])) = [0]
	*(($4 + [384])) = $0
	*(($4 + [392])) = $0
	*(($4 + [400])) = (int_64)-1
	*(($4 + [408])) = (int_64)0
	*(($4 + [416])) = [0]
	*(($4 + [432])) = $3
	*(($4 + [436])) = ($4 + [144])
	*(($4 + [440])) = $8
	*(($4 + [448])) = $0
	*(($4 + [456])) = $0
	*($4 + [424]) = $0
	*(($4 + [464])) = (int_64)-1
	*(($4 + [472])) = (int_64)0
	*(($4 + [480])) = [0]
	*(($4 + [488])) = $0
	*(($4 + [496])) = $0
	*(($4 + [504])) = $0
	*(($4 + [512])) = $0
	*(($4 + [520])) = (int_64)-1
	*(($4 + [528])) = (int_64)0
	*(($4 + [536])) = [0]
	*(($4 + [544])) = $0
	*(($4 + [552])) = $0
	*($4 + [632]) = [0]
	*($4 + [624]) = (int_64)0
	$3 = (*($4 + [580]) - *($4 + [576]))
	if ( ($3 == 0) ){ goto $label$5 }
	$8 = int_32($3 >> [3])
	if ( ((uint_32)$8 >= (uint_32)[536870912]) ){ goto $label$4 }
	$3 = CALL _Znwj($3)
	*(($4 + [632])) = ($3 + ($8 << [3]))
	*($4 + [624]) = $3
	*($4 + [628]) = $3
	$10 = *($4 + [576])
	$8 = (*($4 + [580]) - $10)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($3, $10, $8)
	*($4 + [628]) = (*($4 + [628]) + $8)
	
.LABEL $label$5
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$8 = *(($4 + [588]))
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 ($4 + [624])), (int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	$5 = *($4 + [624])
	if ( ($5 == 0) ){ goto $label$7 }
	*($4 + [628]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $219($2)
	
.LABEL $label$8
	CALL $31(($4 + [24]))
	$2 = *($4 + [576])
	if ( ($2 == 0) ){ goto $label$9 }
	*($4 + [580]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$global$0 = ($4 + [640])
	return [1]
	
.LABEL $label$4
	CALL $205(($4 + [624]))
	return (unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $42(($0 + [136]), $1, $2)
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $123($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $88($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $124($2, $1)
	CALL $126(CALL $125(CALL $125($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $205($0)
	
.LABEL $label$1
	$6 = *($1 + [16 align=4])
	*($1 + [16 align=4]) = (int_64)0
	$4 = ($1 + [24])
	$7 = *($4)
	*($4) = (int_64)0
	$4 = ($1 + [32])
	$8 = *($4)
	*($4) = (int_64)0
	*(($9 = ($2 + ((int_32)$3 * (int_32)[40])))) = *($1)
	*($9 + [16 align=4]) = $6
	*(($9 + [8])) = *(($1 + [8]))
	*(($9 + [24])) = $7
	*(($9 + [32])) = $8
	$10 = ($2 + ((int_32)$5 * (int_32)[40]))
	$11 = ($9 + [40])
	$1 = *($0)
	$12 = *(($0 + [4]))
	if ( ((int_32)$12 == (int_32)$1) ){ goto $label$6 }
	$13 = ($1 - $12)
	$2 = [0]
	
.LOOP $label$7:
	$5 = ($12 + $2)
	*((($1 = ($9 + $2)) + [-32])) = *(($5 + [-32]))
	*(($1 + [-40])) = *(($5 + [-40]))
	*(($3 = ($1 + [-24]))) = (int_64)0
	*(($4 = ($1 + [-16]))) = [0]
	$14 = ($5 + [-24])
	*($3) = *($14)
	$3 = ($5 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($1 + [-12]))) = (int_64)0
	*(($1 = ($1 + [-4]))) = [0]
	$4 = ($5 + [-12])
	*($3) = *($4)
	*($14) = (int_64)0
	$5 = ($5 + [-4])
	*($1) = *($5)
	*($5) = [0]
	*($4) = (int_64)0
	$2 = ($2 + [-40])
	if ( ((int_32)$13 != (int_32)$2) ){ goto $label$7 }
	$9 = ($9 + $2)
	$1 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $1
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = *(($1 + [-12]))
	if ( ($5 == 0) ){ goto $label$10 }
	*(($1 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$5 = ($1 + [-40])
	$2 = *(($1 + [-24]))
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$1 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8408])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8408])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8408])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	$4 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *(($0 + [8]))), [8464])
	$6 = ($0 + [4])
	$3 = *($6)
	$2 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($2 & [128]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)*($7) != (int_32)$3), [8408])
	$3 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($3), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($4 <= *($7)), [8464])
	$4 = *($3)
	$2 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($2 & [128]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

int_32 .FUNC $102 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8464])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = int_32(($3 - $6) >> [4])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $109($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ($7 << [4]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($3 + [-16])
	$2 = *(($3 + [-12]))
	if ( ($2 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($0 + [8])
	
.LOOP $label$9:
	$2 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($6) - *($2)) > (uint_32)[1]), [8408])
	CALL memcpy($7, *($2), [2])
	*($2) = (*($2) + [2])
	CALL $110($0, ($7 + [4]))
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8464])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = ((int_32)($3 - $6) / (int_32)[40])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $111($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ((int_32)$7 * (int_32)[40]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = *(($3 + [-12]))
	if ( ($7 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = ($3 + [-40])
	$2 = *(($3 + [-24]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($3 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	
.LOOP $label$10:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($7)) > (uint_32)[7]), [8408])
	CALL memcpy($2, *($7), [8])
	$5 = (*($7) + [8])
	*($7) = $5
	CALL eosio_assert(((uint_32)(*($6) - $5) > (uint_32)[7]), [8408])
	CALL memcpy(($2 + [8]), *($7), [8])
	*($7) = (*($7) + [8])
	CALL $110(CALL $112($0, ($2 + [16])), ($2 + [28]))
	$2 = ($2 + [40])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$2
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8471])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32]))) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $122(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $121(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	*($1 + [12]) = (*($1 + [12]) + [1])
	$5 = *($1)
	*($1 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8887])
	CALL eosio_assert([1], [8522])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [12]), ($1 + [12]), [4])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 + [16]), ($1 + [16]), [4])
	CALL db_update_i64(*($1 + [24]), $2, $4, [20])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $205($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$8 = ($7 + ($6 << [4]))
	$9 = ($7 + ($3 << [4]))
	$6 = $9
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$10 = ($9 + ($1 << [4]))
	$6 = *($0)
	$11 = ($0 + [4])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$10 }
	$13 = (($3 + [-1]) - uint_32((($12 + [-16]) - $6) >> [4]))
	$14 = ($6 - $12)
	$6 = [0]
	
.LOOP $label$11:
	*(($3 = (($2 = ($9 + $6)) + [-12]))) = (int_64)0
	*(($4 = ($2 + [-4]))) = [0]
	$1 = ($12 + $6)
	$5 = ($1 + [-12])
	*($3) = *($5)
	$3 = ($1 + [-4])
	*($4) = *($3)
	*(($2 + [-16])) = *(($1 + [-16]))
	*($3) = [0]
	*($5) = (int_64)0
	$6 = ($6 + [-16])
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$11 }
	$9 = ($7 + ($13 << [4]))
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $6
	
.LABEL $label$9
	*($0) = $9
	*($11) = $10
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($6 + [-16])
	$1 = *(($6 + [-12]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	(unreachable)
}

void .FUNC $108 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [8790])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8836])
	$5 = *($1)
	$6 = CALL current_time()
	*($1 + [12]) = [1]
	$8 = (CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000))
	$7 = *([0] + [8196])
	*($1 + [8]) = ((($7 + $8) - ((uint_32)((*([0] + [8200]) << [3]) + $8) % (uint_32)$7)) - *([0] + [8192]))
	*($1 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8887])
	CALL eosio_assert([1], [8522])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 | [12]), ($1 + [12]), [4])
	CALL eosio_assert([1], [8522])
	CALL memcpy(($4 + [16]), ($1 + [16]), [4])
	CALL db_update_i64(*($1 + [24]), $2, $4, [20])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $212 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $208([20], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $219 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18500])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18308]
	$3 = (((int_32)$1 * (int_32)[12]) + [18308])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8464])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$2 = *($1 + [4])
	$3 = ((int_32)($2 - $6) / (int_32)[48])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $187($1, ($7 - $3))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ((int_32)$7 * (int_32)[48]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($2 + [-48])
	$3 = *(($2 + [-16]))
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [-12])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$2 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$2 = $6
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$9:
	CALL $115($0, $7)
	$7 = ($7 + [48])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	$4 = ((int_32)$3 / (int_32)[48])
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[89478486]) ){ goto $label$1 }
	$5 = CALL _Znwj($3)
	*(($2 + [8])) = ($5 + ((int_32)$4 * (int_32)[48]))
	*($2) = $5
	*($2 + [4]) = $5
	$3 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$3 }
	$7 = ($3 - $6)
	$8 = [0]
	
.LOOP $label$4:
	$4 = ($6 + $8)
	*(($3 = ($5 + $8))) = *($4)
	*(($3 + [24])) = *(($4 + [24]))
	*(($3 + [16])) = *(($4 + [16]))
	*(($3 + [8])) = *(($4 + [8]))
	*(($9 = ($3 + [32]))) = [0]
	*(($10 = ($3 + [36]))) = (int_64)0
	$12 = ($4 + [32])
	$11 = ($4 + [36])
	$4 = (*($11) - *($12))
	$13 = ((int_32)$4 / (int_32)[24])
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((uint_32)$13 >= (uint_32)[178956971]) ){ goto $label$2 }
	$4 = CALL _Znwj($4)
	*($9) = $4
	*(($3 + [40])) = ($4 + ((int_32)$13 * (int_32)[24]))
	*($10) = $4
	$9 = *($12)
	$13 = (*($11) - $9)
	if ( ((int_32)$13 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($4, $9, $13)
	*($10) = (*($10) + ((int_32)((uint_32)$13 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$5
	*($2 + [4]) = ($3 + [48])
	$8 = ($8 + [48])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = *($0 + [4])
	$8 = *($3 + [4])
	$4 = (*($0) + int_32($8 >> [1]))
	$10 = *($1 + [12])
	$3 = *($3)
	if ( (($8 & [1]) == 0) ){ goto $label$6 }
	$3 = *((*($4) + $3))
	
.LABEL $label$6
	CALL void $4((int_32 $2), (int_32 ((int_32)($10 & [255]) != (int_32)[0])), (int_32 $3))
	$10 = *($2)
	if ( ($10 == 0) ){ goto $label$7 }
	$3 = *($2 + [4])
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($3 + [-48])
	$8 = *(($3 + [-16]))
	if ( ($8 == 0) ){ goto $label$11 }
	*(($3 + [-12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$10 }
	$3 = *($2)
	goto $label$8 
	
.LABEL $label$9
	$3 = $10
	
.LABEL $label$8
	*($2 + [4]) = $10
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $205(($3 + [32]))
	
.LABEL $label$1
	CALL $205($2)
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$4 = ($global$0 - [208])
	$global$0 = $4
	$5 = *(*($0 + [12]) + [8])
	$6 = ($5 + [48])
	$7 = [0]
	$5 = ($5 + [56])
	$8 = CALL db_lowerbound_i64(*($5 + [48]), *($5), (int_64)-4031679089989799264, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	CALL $35($6, $8)
	$7 = [1]
	
.LABEL $label$1
	CALL eosio_assert($7, [8365])
	$9 = *(CALL $35($6, CALL $fimport$4(*($6), *($5), (int_64)-4031679089989799264, (int_64)0)) + [16])
	if ( CALL has_auth($9) ){ goto $label$2 }
	CALL require_auth($9)
	
.LABEL $label$2
	CALL $95(*(($0 + [12])), [1])
	$10 = ($0 + [24])
	$9 = (CASTING uint_64)(uint_32 $2)
	$5 = *(($0 + [52]))
	$8 = *(($0 + [48]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$9) ){ goto $label$5 }
	$5 = $6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)$10), [8413])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$6 = CALL db_find_i64(*($10), *(($0 + [32])), (int_64)-4022058411981012992, $9)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $96($10, $6)
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)$10), [8413])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9203])
	if ( $2 ){ goto $label$7 }
	$11 = *($0 + [16])
	$12 = ($11 + [48])
	$5 = *(($11 + [76]))
	$10 = *(($11 + [72]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$13:
	$6 = ($5 + [-24])
	$8 = *($6)
	if ( (int_64)(*($8) == 0) ){ goto $label$12 }
	$5 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$12), [8413])
	if ( $8 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$6 = CALL db_find_i64(*($12), *(($11 + [56])), (int_64)7176367599094267904, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$9 }
	$8 = CALL $97($12, $6)
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$12), [8413])
	
.LABEL $label$10
	$5 = *($8 + [8])
	$13 = CALL current_time()
	$6 = [1]
	$11 = (CASTING uint_32)(uint_64 ((uint_64)$13 / (uint_64)(int_64)1000000))
	$10 = *([0] + [8196])
	if ( ((int_32)$5 != (int_32)((($10 + $11) - ((uint_32)((*([0] + [8200]) << [3]) + $11) % (uint_32)$10)) - *([0] + [8192]))) ){ goto $label$8 }
	$6 = ((int_32)*($8 + [12]) < (int_32)[2000])
	goto $label$8 
	
.LABEL $label$9
	$6 = [1]
	
.LABEL $label$8
	CALL eosio_assert($6, [9214])
	CALL $98(*(($0 + [16])))
	
.LABEL $label$7
	*($4 + [200]) = [0]
	*($4 + [192]) = (int_64)0
	$11 = *(($0 + [12]))
	$12 = ($11 + [72])
	$5 = *(($11 + [100]))
	$10 = *(($11 + [96]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$18:
	$6 = ($5 + [-24])
	$8 = *($6)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$17 }
	$5 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)$12), [8413])
	if ( $8 ){ goto $label$15 }
	$6 = [0]
	$10 = [0]
	goto $label$14 
	
.LABEL $label$16
	$6 = [0]
	$10 = [0]
	$5 = CALL db_find_i64(*($12), *(($11 + [80])), (int_64)-4023100430253817856, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$14 }
	$8 = CALL $51($12, $5)
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)$12), [8413])
	
.LABEL $label$15
	$6 = *($8 + [40])
	$10 = *($8 + [32])
	$5 = ($8 + [48])
	if ( ((int_32)($4 + [192]) == (int_32)$5) ){ goto $label$14 }
	CALL $99(($4 + [192]), *($5), *(($8 + [52])))
	
.LABEL $label$14
	$5 = [0]
	if ( ((uint_32)$6 >= (uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - *([0] + [8192]))) ){ goto $label$20 }
	CALL current_time()
	*($4 + [196]) = *($4 + [192])
	goto $label$19 
	
.LABEL $label$20
	$5 = *($4 + [196])
	$6 = *($4 + [192])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$21 }
	
.LOOP $label$22:
	CALL eosio_assert(((int_32)*($6) != (int_32)$2), [9282])
	$6 = ($6 + [8])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$22 }
	
.LABEL $label$21
	$5 = $10
	
.LABEL $label$19
	CALL eosio_assert(((uint_32)$5 >= (uint_32)*($7 + [8])), [9326])
	$13 = CALL current_time()
	*((($4 + [128]) + [28])) = (int_64)0
	*(($4 + [172])) = (int_64)0
	*(($4 + [180])) = (int_64)0
	*($4 + [140]) = [0]
	*($4 + [144]) = [0]
	*($4 + [148 align=4]) = (int_64)0
	*($4 + [164 align=4]) = (int_64)0
	*($4 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$13 / (uint_64)(int_64)1000000)) + [60])
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = ((int_64)((int_64)$1 << (int_64)4) | (int_64)$9)
	$9 = *($0)
	*($4 + [56]) = [9061]
	*($4 + [60]) = CALL $213([9061])
	*($4 + [16]) = *($4 + [56])
	$13 = *(CALL $43(($4 + [64]), ($4 + [16])))
	$14 = *($0)
	*($4 + [40]) = [9368]
	*($4 + [44]) = CALL $213([9368])
	*($4 + [8]) = *($4 + [40])
	$6 = CALL $43(($4 + [48]), ($4 + [8]))
	*($4 + [32]) = $2
	*($4 + [24]) = $1
	*($4 + [72]) = $14
	*($4 + [80]) = *($6)
	*(($6 = CALL _Znwj([16]))) = $9
	*($6 + [8]) = $13
	*((($4 + [72]) + [36])) = [0]
	$5 = ($6 + [16])
	*(($4 + [96])) = $5
	*(($4 + [92])) = $5
	*($4 + [88]) = $6
	*($4 + [100 align=4]) = (int_64)0
	CALL $88((($4 + [72]) + [28]), [9])
	$6 = *($4 + [100])
	$2 = ($4 + [104])
	$5 = (*($2) - $6)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8522])
	CALL memcpy($6, ($4 + [24]), [8])
	CALL eosio_assert(((int_32)($5 + [-8]) > (int_32)[0]), [8522])
	CALL memcpy(($6 + [8]), (($4 + [24]) + [8]), [1])
	CALL $100((($4 + [128]) + [36]), ($4 + [72]))
	$6 = *($4 + [100])
	if ( ($6 == 0) ){ goto $label$23 }
	*($2) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$23
	$6 = *($4 + [88])
	if ( ($6 == 0) ){ goto $label$24 }
	*(($4 + [92])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$24
	*(($4 + [148])) = $3
	$1 = *($0)
	CALL $101(($4 + [72]), ($4 + [128]))
	$6 = *($4 + [72])
	CALL send_deferred(($4 + [112]), $1, $6, (*($4 + [76]) - $6), [0])
	$6 = *($4 + [72])
	if ( ($6 == 0) ){ goto $label$25 }
	*($4 + [76]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$25
	CALL $102(($4 + [128]))
	$6 = *($4 + [192])
	if ( ($6 == 0) ){ goto $label$26 }
	*($4 + [196]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$26
	$global$0 = ($4 + [208])
}

void .FUNC $37 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_64 $17
	$3 = ($global$0 - [368])
	$global$0 = $3
	*($3 + [344]) = $1
	CALL require_auth(*($0))
	$4 = ($0 + [24])
	$5 = (CASTING uint_64)(uint_32 $2)
	$7 = *(($0 + [52]))
	$6 = *(($0 + [48]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$4), [8413])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($4), *(($0 + [32])), (int_64)-4022058411981012992, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $96($4, $8)
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$4), [8413])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9203])
	$10 = *(($0 + [12]))
	$11 = ($10 + [72])
	$7 = *(($10 + [100]))
	$4 = *(($10 + [96]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$9:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$8 }
	$7 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($6 + [60]) == (int_32)$11), [8413])
	if ( $6 ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$8 = CALL db_find_i64(*($11), *(($10 + [80])), (int_64)-4023100430253817856, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $51($11, $8)
	CALL eosio_assert(((int_32)*($6 + [60]) == (int_32)$11), [8413])
	goto $label$5 
	
.LABEL $label$6
	$1 = *($0)
	*($3 + [24]) = ($3 + [344])
	CALL $127(($3 + [96]), $11, $1, ($3 + [24]))
	$6 = *($3 + [100])
	
.LABEL $label$5
	$12 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($12, [8338])
	*($3 + [336]) = *($6 + [40])
	*($3 + [328]) = [0]
	*($3 + [320]) = (int_64)0
	$8 = (*(($6 + [52])) - *($6 + [48]))
	if ( ($8 == 0) ){ goto $label$29 }
	$7 = int_32($8 >> [3])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$28 }
	$8 = CALL _Znwj($8)
	*(($3 + [328])) = ($8 + ($7 << [3]))
	*($3 + [320]) = $8
	*($3 + [324]) = $8
	$4 = *(($6 + [48]))
	$7 = (*(($6 + [52])) - $4)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$29 }
	CALL memcpy($8, $4, $7)
	*($3 + [324]) = (*($3 + [324]) + $7)
	
.LABEL $label$29
	*($3 + [312]) = *($6 + [32])
	$1 = CALL current_time()
	if ( ((uint_64)*($3 + [336]) >= (uint_64)(CASTING uint_64)(uint_32 ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) - *([0] + [8192])))) ){ goto $label$30 }
	*($3 + [312]) = (int_64)0
	*($3 + [324]) = *($3 + [320])
	$1 = CALL current_time()
	$7 = (CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000))
	$8 = *([0] + [8196])
	*($3 + [336]) = (CASTING uint_64)(uint_32 ((($8 + $7) - ((uint_32)((*([0] + [8200]) << [3]) + $7) % (uint_32)$8)) - *([0] + [8192])))
	
.LABEL $label$30
	$7 = *($3 + [324])
	$8 = *($3 + [320])
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$31 }
	
.LOOP $label$32:
	CALL eosio_assert(((int_32)*($8) != (int_32)$2), [9282])
	$8 = ($8 + [8])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$32 }
	
.LABEL $label$31
	CALL eosio_assert(((uint_64)*($3 + [312]) >= (uint_64)*($9 + [8])), [9326])
	$13 = (*($3 + [344]) + $2)
	*($3 + [24]) = (int_64))((CASTING uint_64)(uint_32 ($13 + ((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$20()))) - CALL $fimport$7())
	CALL sha256(($3 + [24]), [4], ($3 + [96]))
	$1 = *($3 + [120])
	$5 = *($3 + [112])
	$14 = *($3 + [104])
	$15 = *($3 + [96])
	*($3 + [304]) = [9416]
	*($3 + [308]) = CALL $213([9416])
	*($3 + [16]) = *($3 + [304])
	CALL $43(($3 + [96]), ($3 + [16]))
	$16 = ($0 + [80])
	$1 = ((uint_64)((int_64)$1 + (int_64)((int_64)$5 + (int_64)((int_64)$14 + (int_64)$15))) % (uint_64)(int_64)10001)
	$7 = *(($0 + [108]))
	$4 = *(($0 + [104]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$37 }
	
.LOOP $label$39:
	$8 = ($7 + [-24])
	$10 = *($8)
	if ( ((int_64)*($10) == (int_64)5606348702032307904) ){ goto $label$38 }
	$7 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$37 }
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$16), [8413])
	if ( ($10 == 0) ){ goto $label$35 }
	$8 = *($10 + [8])
	if ( ((int_32)$8 > (int_32)[2]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$8 = [0]
	$7 = CALL db_find_i64(*($16), *(($0 + [88])), (int_64)-4021798726879390720, (int_64)5606348702032307904)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$34 }
	$8 = CALL $128($16, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$16), [8413])
	$8 = *($8 + [8])
	if ( ((int_32)$8 <= (int_32)[2]) ){ goto $label$34 }
	
.LABEL $label$36
	*($3 + [24]) = (int_64))((CASTING uint_64)(uint_32 ($13 + ((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$20()))) - CALL $fimport$7())
	CALL sha256(($3 + [24]), [4], ($3 + [96]))
	$4 = ((CASTING uint_32)(uint_64 ((uint_64)((int_64)((int_64)((int_64)*($3 + [104]) + (int_64)*($3 + [96])) + (int_64)*($3 + [112])) + (int_64)*($3 + [120])) % (uint_64)(int_64)9998)) + [1])
	goto $label$33 
	
.LABEL $label$35
	$8 = [0]
	
.LABEL $label$34
	$4 = ((CASTING uint_32)(uint_64 $1) + [1])
	CALL $129($0, (int_64)5606348702032307904, $8, $4)
	
.LABEL $label$33
	*($3 + [300]) = $4
	*($3 + [296]) = $2
	$8 = *($3 + [324])
	if ( ((int_32)$8 == (int_32)*((($3 + [320]) + [8]))) ){ goto $label$41 }
	*($8) = *($3 + [296])
	*($3 + [324]) = (*($3 + [324]) + [8])
	goto $label$40 
	
.LABEL $label$41
	CALL $130(($3 + [320]), ($3 + [296]))
	
.LABEL $label$40
	*($3 + [288]) = [0]
	*($3 + [280]) = (int_64)0
	$8 = (*(($9 + [36])) - *($9 + [32]))
	$7 = ((int_32)$8 / (int_32)[24])
	$5 = (int_64)0
	$14 = (int_64)0
	if ( ($8 == 0) ){ goto $label$42 }
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$27 }
	$8 = CALL _Znwj($8)
	*(($3 + [288])) = ($8 + ((int_32)$7 * (int_32)[24]))
	*($3 + [280]) = $8
	*($3 + [284]) = $8
	$5 = (int_64)0
	$14 = (int_64)0
	$9 = *(($9 + [32]))
	$7 = (*(($9 + [36])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$42 }
	CALL memcpy($8, $9, $7)
	$7 = (*($3 + [284]) + ((int_32)((uint_32)$7 / (uint_32)[24]) * (int_32)[24]))
	*($3 + [284]) = $7
	$5 = (int_64)0
	$14 = (int_64)0
	$8 = *($3 + [280])
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$42 }
	
.LOOP $label$44:
	if ( ((int_32)$4 < (int_32)*($8)) ){ goto $label$45 }
	if ( ((int_32)$4 <= (int_32)*(($8 + [2]))) ){ goto $label$43 }
	
.LABEL $label$45
	$8 = ($8 + [24])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$44 }
	$5 = (int_64)0
	$14 = (int_64)0
	goto $label$42 
	
.LABEL $label$43
	$5 = *(($8 + [16]))
	$14 = *(($8 + [8]))
	
.LABEL $label$42
	$1 = *($0)
	*($3 + [100]) = ($3 + [336])
	*($3 + [96]) = ($3 + [312])
	*($3 + [104]) = ($3 + [320])
	CALL eosio_assert($12, [8755])
	CALL $131($11, $6, $1, ($3 + [96]))
	*(($3 + [208])) = [0]
	*($3 + [200]) = (int_64)0
	$8 = CALL $213([9429])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$47 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$50 }
	*($3 + [200]) = ($8 << [1])
	$7 = (($3 + [200]) | [1])
	if ( $8 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$6 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($3 + [200]) = ($6 | [1])
	*($3 + [208]) = $7
	*($3 + [204]) = $8
	
.LABEL $label$49
	CALL memcpy($7, [9429], $8)
	
.LABEL $label$48
	*(($7 + $8)) = [0]
	*(($3 + [192])) = [0]
	*($3 + [184]) = (int_64)0
	$8 = CALL $213([9479])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$46 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$53 }
	*($3 + [184]) = ($8 << [1])
	$9 = (($3 + [184]) | [1])
	$6 = $9
	if ( $8 ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	$7 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($3 + [184]) = ($7 | [1])
	*($3 + [192]) = $6
	*($3 + [188]) = $8
	$9 = (($3 + [184]) | [1])
	
.LABEL $label$52
	CALL memcpy($6, [9479], $8)
	
.LABEL $label$51
	$7 = [0]
	*(($6 + $8)) = [0]
	$8 = *($3 + [184])
	$6 = ($8 & [1])
	$8 = CALL $203(($3 + [200]), ( *($3 + [192]) ? $9 : $6 ), ( *($3 + [188]) ? uint_32($8 >> [1]) : $6 ))
	$6 = ($8 + [8])
	*((($3 + [216]) + [8])) = *($6)
	*($3 + [216]) = *($8)
	*($8) = (int_64)0
	*($6) = [0]
	CALL $204(($3 + [168]), $2)
	$8 = *($3 + [168])
	$6 = ($8 & [1])
	$8 = CALL $203(($3 + [216]), ( *($3 + [176]) ? (($3 + [168]) | [1]) : $6 ), ( *($3 + [172]) ? uint_32($8 >> [1]) : $6 ))
	$6 = ($8 + [8])
	*((($3 + [232]) + [8])) = *($6)
	*($3 + [232]) = *($8)
	*($8) = (int_64)0
	*($6) = [0]
	$8 = CALL $202(($3 + [232]), [9490])
	$6 = ($8 + [8])
	*((($3 + [248]) + [8])) = *($6)
	*($3 + [248]) = *($8)
	*($8) = (int_64)0
	*($6) = [0]
	CALL $204(($3 + [152]), $4)
	$8 = *($3 + [152])
	$6 = ($8 & [1])
	$8 = CALL $203(($3 + [248]), ( *($3 + [160]) ? (($3 + [152]) | [1]) : $6 ), ( *($3 + [156]) ? uint_32($8 >> [1]) : $6 ))
	$6 = ($8 + [8])
	*((($3 + [352]) + [8])) = *($6)
	*($3 + [352]) = *($8)
	*($8) = (int_64)0
	*($6) = [0]
	$8 = CALL $202(($3 + [352]), [9490])
	$6 = ($8 + [8])
	*((($3 + [24]) + [8])) = *($6)
	*($3 + [24]) = *($8)
	*($8) = (int_64)0
	*($6) = [0]
	$1 = *($3 + [344])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$57 }
	$6 = *([0] + [8204])
	
.LOOP $label$59:
	*((($3 + [96]) + ($8 = $7))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$7 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$58 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$59 }
	
.LABEL $label$58
	*(($3 + [144])) = [0]
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$56 }
	*($3 + [136]) = ($7 << [1])
	$6 = (($3 + [136]) | [1])
	goto $label$55 
	
.LABEL $label$57
	*((($3 + [136]) + [8])) = [0]
	*($3 + [136]) = (int_64)0
	*($3 + [136]) = [0]
	$8 = (($3 + [136]) | [1])
	$7 = $8
	goto $label$54 
	
.LABEL $label$56
	$9 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($3 + [136]) = ($9 | [1])
	*($3 + [144]) = $6
	*($3 + [140]) = $7
	
.LABEL $label$55
	$9 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$60:
	*(($6 + $8)) = *((($3 + [96]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$60 }
	$7 = ($6 + $7)
	$8 = (($3 + [136]) | [1])
	
.LABEL $label$54
	*($7) = [0]
	$7 = *($3 + [136])
	$6 = ($7 & [1])
	$8 = CALL $203(($3 + [24]), ( *($3 + [144]) ? $8 : $6 ), ( *($3 + [140]) ? uint_32($7 >> [1]) : $6 ))
	$7 = ($8 + [8])
	*((($3 + [264]) + [8])) = *($7)
	*($3 + [264]) = *($8)
	*($8) = (int_64)0
	*($7) = [0]
	if ( (*($3 + [136]) & [1]) ){ goto $label$62 }
	if ( (*($3 + [24]) & [1]) ){ goto $label$61 }
	goto $label$26 
	
.LABEL $label$62
	CALL _ZdlPv(*((($3 + [136]) + [8])))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$26 }
	
.LABEL $label$61
	CALL _ZdlPv(*($3 + [32]))
	$8 = [1]
	if ( ((*($3 + [352]) & [1]) == 0) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$47
	CALL $197(($3 + [200]))
	
.LABEL $label$46
	CALL $197(($3 + [184]))
	
.LABEL $label$28
	CALL $205(($3 + [320]))
	
.LABEL $label$27
	CALL $205(($3 + [280]))
	
.LABEL $label$26
	$8 = [1]
	if ( (*($3 + [352]) & [1]) ){ goto $label$24 }
	
.LABEL $label$25
	if ( (*($3 + [152]) & $8) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL _ZdlPv(*($3 + [360]))
	if ( ((*($3 + [152]) & $8) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv(*(($3 + [160])))
	$8 = [1]
	if ( ((*($3 + [248]) & [1]) == 0) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$8 = [1]
	if ( (*($3 + [248]) & [1]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( (*($3 + [232]) & $8) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL _ZdlPv(*($3 + [256]))
	if ( ((*($3 + [232]) & $8) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($3 + [240]))
	$8 = [1]
	if ( ((*($3 + [168]) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$8 = [1]
	if ( (*($3 + [168]) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($3 + [216]) & $8) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($3 + [176])))
	if ( ((*($3 + [216]) & $8) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*($3 + [224]))
	$8 = [1]
	if ( ((*($3 + [184]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$8 = [1]
	if ( (*($3 + [184]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((*($3 + [200]) & $8) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	CALL _ZdlPv(*(($3 + [192])))
	if ( ((*($3 + [200]) & $8) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($3 + [208]))
	
.LABEL $label$10
	$1 = *($0)
	*($3 + [80]) = [9061]
	*($3 + [84]) = CALL $213([9061])
	*($3 + [8]) = *($3 + [80])
	$6 = CALL $43(($3 + [88]), ($3 + [8]))
	$7 = *($0 + [8])
	$8 = ($7 + [48])
	$15 = *($6)
	$6 = [0]
	$7 = ($7 + [56])
	$9 = CALL db_lowerbound_i64(*($7 + [48]), *($7), (int_64)-4031679089989799264, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$63 }
	CALL $35($8, $9)
	$6 = [1]
	
.LABEL $label$63
	CALL eosio_assert($6, [8365])
	$17 = *(CALL $35($8, CALL $fimport$4(*($8), *($7), (int_64)-4031679089989799264, (int_64)0)) + [16])
	*($3 + [64]) = [9492]
	*($3 + [68]) = CALL $213([9492])
	*($3) = *($3 + [64])
	$8 = CALL $43(($3 + [72]), $3)
	*((($3 + [24]) + [16])) = $5
	*($3 + [32]) = $14
	*($3 + [24]) = *($3 + [344])
	$7 = CALL $198((($3 + [24]) + [24]), ($3 + [264]))
	*($3 + [96]) = $17
	*($3 + [104]) = *($8)
	*(($8 = CALL _Znwj([16]))) = $1
	*($8 + [8]) = $15
	*(($3 + [132])) = [0]
	$6 = ($8 + [16])
	*((($3 + [96]) + [24])) = $6
	*(($3 + [116])) = $6
	*($3 + [112]) = $8
	*($3 + [124 align=4]) = (int_64)0
	$8 = *($7)
	$6 = ( *((($3 + [24]) + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($6 + [24])
	$1 = (CASTING uint_64)(uint_32 $6)
	$6 = (($3 + [96]) + [28])
	
.LOOP $label$64:
	$8 = ($8 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$64 }
	if ( ($8 == 0) ){ goto $label$66 }
	CALL $88($6, $8)
	$6 = *(($3 + [128]))
	$8 = *(($3 + [124]))
	goto $label$65 
	
.LABEL $label$66
	$6 = [0]
	$8 = [0]
	
.LABEL $label$65
	*($3 + [352]) = $8
	*($3 + [360]) = $6
	$6 = ($6 - $8)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [8522])
	CALL memcpy($8, ($3 + [24]), [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[7]), [8522])
	CALL memcpy(($8 + [8]), (($3 + [24]) + [8]), [8])
	*($3 + [248]) = *((($3 + [24]) + [16]))
	CALL eosio_assert(((int_32)($6 + [-16]) > (int_32)[7]), [8522])
	CALL memcpy(($8 + [16]), ($3 + [248]), [8])
	*($3 + [356]) = ($8 + [24])
	CALL $132(($3 + [352]), $7)
	CALL $89(($3 + [352]), ($3 + [96]))
	$8 = *($3 + [352])
	CALL send_inline($8, (*($3 + [356]) - $8))
	$8 = *($3 + [352])
	if ( ($8 == 0) ){ goto $label$67 }
	*($3 + [356]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$67
	$8 = *($3 + [124])
	if ( ($8 == 0) ){ goto $label$68 }
	*(($3 + [128])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$68
	$8 = *($3 + [112])
	if ( ($8 == 0) ){ goto $label$69 }
	*(($3 + [116])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$69
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$70 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$70
	*($3 + [100]) = $4
	*($3 + [96]) = $2
	*($3 + [104]) = *($3 + [312])
	CALL $133(*($0 + [16]), *($3 + [344]), ($3 + [96]))
	if ( ((*($3 + [264]) & [1]) == 0) ){ goto $label$71 }
	CALL _ZdlPv(*($3 + [272]))
	
.LABEL $label$71
	$8 = *($3 + [280])
	if ( ($8 == 0) ){ goto $label$72 }
	*($3 + [284]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$72
	$8 = *($3 + [320])
	if ( ($8 == 0) ){ goto $label$73 }
	*($3 + [324]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$73
	$global$0 = ($3 + [368])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$5 = ($global$0 - [192])
	$global$0 = $5
	$6 = *($0 + [8])
	$7 = ($6 + [48])
	$8 = [0]
	$6 = ($6 + [56])
	$9 = CALL db_lowerbound_i64(*($6 + [48]), *($6), (int_64)-4031679089989799264, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	CALL $35($7, $9)
	$8 = [1]
	
.LABEL $label$1
	CALL eosio_assert($8, [8365])
	CALL require_auth(*(CALL $35($7, CALL $fimport$4(*($7), *($6), (int_64)-4031679089989799264, (int_64)0)) + [16]))
	$7 = *($4)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8208])
	CALL eosio_assert(($7 <= [50000001]), [8208])
	$10 = ($0 + [72])
	$6 = *(($0 + [100]))
	$9 = *(($0 + [96]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$5 }
	$6 = $7
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)$10), [8413])
	if ( $8 ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_find_i64(*($10), *(($0 + [80])), (int_64)-4023100430253817856, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $51($10, $7)
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)$10), [8413])
	goto $label$2 
	
.LABEL $label$3
	*($5 + [184]) = $2
	$11 = *($0)
	*($5 + [176]) = ($5 + [184])
	CALL $59(($5 + [168]), $10, $11, ($5 + [176]))
	$8 = *($5 + [172])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8338])
	$12 = *(($4 + [8]))
	*((($5 + [152]) + [8])) = $12
	$11 = *($4)
	*((($5 + [72]) + [8])) = $12
	*($5 + [72]) = $11
	*($5 + [152]) = $11
	$2 = CALL $60($0, $2, $3, ($5 + [72]))
	*($5 + [144]) = [8685]
	*($5 + [148]) = CALL $213([8685])
	*($5 + [64]) = *($5 + [144])
	if ( ((int_64)$2 == (int_64)*(CALL $43(($5 + [184]), ($5 + [64])))) ){ goto $label$7 }
	*($5 + [136]) = [8360]
	*($5 + [140]) = CALL $213([8360])
	*($5 + [56]) = *($5 + [136])
	if ( ((int_64)$2 == (int_64)*(CALL $43(($5 + [168]), ($5 + [56])))) ){ goto $label$7 }
	$6 = *(($0 + [100]))
	$9 = *(($0 + [96]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$12:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$11 }
	$6 = $7
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)$10), [8413])
	if ( $8 ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$7 = CALL db_find_i64(*(($0 + [72])), *(($0 + [80])), (int_64)-4023100430253817856, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	$8 = CALL $51($10, $7)
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)$10), [8413])
	goto $label$8 
	
.LABEL $label$9
	*($5 + [184]) = $2
	$11 = *($0)
	*($5 + [176]) = ($5 + [184])
	CALL $59(($5 + [168]), $10, $11, ($5 + [176]))
	$8 = *($5 + [172])
	$10 = *($5 + [168])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8338])
	*($5 + [128]) = [8360]
	*($5 + [132]) = CALL $213([8360])
	*($5 + [48]) = *($5 + [128])
	$7 = CALL $43(($5 + [184]), ($5 + [48]))
	$6 = ($4 + [8])
	$3 = *($6)
	*((($5 + [112]) + [8])) = $3
	$12 = *($7)
	$11 = *($4)
	*((($5 + [32]) + [8])) = $3
	*($5 + [112]) = $11
	*($5 + [32]) = $11
	CALL $60($0, $2, $12, ($5 + [32]))
	$2 = *($4)
	$11 = *($6)
	*((($5 + [8]) + [8])) = $11
	*((($5 + [88]) + [8])) = $11
	*($5 + [108]) = $8
	*($5 + [104]) = $10
	*($5 + [8]) = $2
	*($5 + [88]) = $2
	*($5 + [24]) = *($5 + [104])
	CALL $92($0, ($5 + [24]), ($5 + [8]), [0])
	
.LABEL $label$7
	$global$0 = ($5 + [192])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8385])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($5 + [8]) = [0]
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	CALL $71(($3 + [32]), $5)
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $72(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = *($0 + [8])
	$6 = ($5 + [48])
	$7 = [0]
	$5 = ($5 + [56])
	$8 = CALL db_lowerbound_i64(*($5 + [48]), *($5), (int_64)-4031679089989799264, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	CALL $35($6, $8)
	$7 = [1]
	
.LABEL $label$1
	CALL eosio_assert($7, [8365])
	CALL require_auth(*(CALL $35($6, CALL $fimport$4(*($6), *($5), (int_64)-4031679089989799264, (int_64)0)) + [16]))
	$9 = *($3)
	CALL eosio_assert(((int_64)$9 != (int_64)0), [8208])
	CALL eosio_assert((uint_64)($9 <= (int_64)50000001), [8208])
	$10 = *(($0 + [8]))
	$11 = ($10 + [8])
	$5 = *(($10 + [36]))
	$8 = *(($10 + [32]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$5 }
	$5 = $6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$11), [8413])
	if ( $7 ){ goto $label$3 }
	$12 = [0]
	goto $label$2 
	
.LABEL $label$4
	$12 = [0]
	$6 = CALL db_find_i64(*($11), *(($10 + [16])), (int_64)-4028354230955598960, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $58($11, $6)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$11), [8413])
	
.LABEL $label$3
	$12 = *($7 + [8])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [8230])
	$10 = ($0 + [72])
	$5 = *(($0 + [100]))
	$8 = *(($0 + [96]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$11:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$10 }
	$5 = $6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$10), [8413])
	if ( ($7 == 0) ){ goto $label$8 }
	$5 = $10
	goto $label$7 
	
.LABEL $label$9
	$6 = CALL db_find_i64(*($10), *(($0 + [80])), (int_64)-4023100430253817856, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$7 = CALL $51($10, $6)
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$10), [8413])
	$5 = $10
	goto $label$7 
	
.LABEL $label$8
	*($4 + [136]) = $2
	$1 = *($0)
	*($4 + [104]) = ($4 + [136])
	CALL $59(($4 + [120]), $10, $1, ($4 + [104]))
	$7 = *($4 + [124])
	$5 = *($4 + [120])
	
.LABEL $label$7
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8338])
	*($4 + [96]) = [8360]
	*($4 + [100]) = CALL $213([8360])
	*($4 + [48]) = *($4 + [96])
	$8 = CALL $43(($4 + [104]), ($4 + [48]))
	$11 = ($3 + [8])
	$13 = *($11)
	*((($4 + [80]) + [8])) = $13
	$14 = *($8)
	$1 = *($3)
	*((($4 + [32]) + [8])) = $13
	*($4 + [80]) = $1
	*($4 + [32]) = $1
	CALL $60($0, $2, $14, ($4 + [32]))
	$2 = *($3)
	$1 = *($11)
	*((($4 + [8]) + [8])) = $1
	*((($4 + [56]) + [8])) = $1
	*($4 + [76]) = $7
	*($4 + [8]) = $2
	*($4 + [56]) = $2
	*($4 + [72]) = $5
	*($4 + [24]) = *($4 + [72])
	CALL $61($0, ($4 + [24]), ($4 + [8]), $12)
	*($4 + [136]) = $9
	*($4 + [132]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - *([0] + [8192]))
	$2 = *($0)
	*($4 + [124]) = ($4 + [136])
	*($4 + [120]) = ($4 + [132])
	CALL eosio_assert($6, [8755])
	CALL $62($10, $7, $2, ($4 + [120]))
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $5))
	*($4) = $2
	*($4 + [120]) = $2
	*($4 + [119]) = CALL $63($0, $4)
	$2 = *($0)
	*($4 + [112]) = ($4 + [119])
	CALL eosio_assert($6, [8755])
	CALL $64($10, $7, $2, ($4 + [112]))
	$global$0 = ($4 + [144])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8408])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8408])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8408])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8408])
	CALL memcpy(($4 + [24]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [8408])
	CALL memcpy(($2 + [8]), *($1 + [4]), [8])
	*(($4 + [32])) = *($2 + [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8408])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8408])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8408])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [8408])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [504]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [508])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [504]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$2 = *(($0 + [448]))
	if ( ($2 == 0) ){ goto $label$6 }
	$5 = ($0 + [452])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$11 }
	*(($4 + [36])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [448]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $2
	
.LABEL $label$7
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$6
	CALL $185(($0 + [272]))
	CALL $186(($0 + [120]))
	$1 = *(($0 + [104]))
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [108])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	CALL _ZdlPv($4)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$15 }
	$3 = *(($0 + [104]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	$1 = *(($0 + [64]))
	if ( ($1 == 0) ){ goto $label$17 }
	$2 = ($0 + [68])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$19 }
	
.LOOP $label$20:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$21 }
	CALL _ZdlPv($4)
	
.LABEL $label$21
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$20 }
	$3 = *(($0 + [64]))
	goto $label$18 
	
.LABEL $label$19
	$3 = $1
	
.LABEL $label$18
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$17
	return $0
}

int_32 .FUNC $215 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $216($1)
	
.LABEL $label$2
	*(CALL $206()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $216(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $219($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $214 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $206())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $215($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $217 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $218($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8252])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $216 (int_32 $0)
{
	return CALL $217([10116], $0)
}

void .FUNC $211 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $210 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $198 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $199 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $197 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $219($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $214(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10096])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $214(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $219($0)
	
.LABEL $label$1
}