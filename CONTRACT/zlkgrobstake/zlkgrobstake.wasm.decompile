(data (i32.const 8192) "wait a moment\00")
(data (i32.const 8206) "invalid quantity\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8309) "must positive quantity\00")
(data (i32.const 8332) "out of range\00")
(data (i32.const 8345) "ROB\00")
(data (i32.const 8349) "quantity more than asset amount\00")
(data (i32.const 8381) "no stake record\00")
(data (i32.const 8397) "more than amount\00")
(data (i32.const 8414) "no unstake record\00")
(data (i32.const 8432) "unstake user is not exist\00")
(data (i32.const 8458) "error reading iterator\00")
(data (i32.const 8481) "read\00")
(data (i32.const 8486) "string is too long to be a valid symbol_code\00")
(data (i32.const 8531) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8584) "unable to find key\00")
(data (i32.const 8603) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8654) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8703) "invalid symbol name\00")
(data (i32.const 8723) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 8782) "write\00")
(data (i32.const 8788) "cannot pass end iterator to modify\00")
(data (i32.const 8823) "object passed to modify is not in multi_index\00")
(data (i32.const 8869) "cannot modify objects in table of another contract\00")
(data (i32.const 8920) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8979) "attempt to add asset with different symbol\00")
(data (i32.const 9022) "addition underflow\00")
(data (i32.const 9041) "addition overflow\00")
(data (i32.const 9059) "must not negative quantity\00")
(data (i32.const 9086) "cannot create objects in table of another contract\00")
(data (i32.const 9137) "cannot pass end iterator to erase\00")
(data (i32.const 9171) "cannot increment end iterator\00")
(data (i32.const 9201) "object passed to erase is not in multi_index\00")
(data (i32.const 9246) "cannot erase objects in table of another contract\00")
(data (i32.const 9296) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9349) "attempt to subtract asset with different symbol\00")
(data (i32.const 9397) "subtraction underflow\00")
(data (i32.const 9419) "subtraction overflow\00")
(data (i32.const 9440) "staking < 0!\00")
(data (i32.const 9453) "unstaking < 0!\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "db_next_i64" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$6 (result i64)))
(import "env" "memcpy" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$8 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "cancel_deferred" (func $fimport$10 (param i32) (result i32)))
(import "env" "send_deferred" (func $fimport$11 (param i32 i64 i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$15 (param i32)))
(import "env" "abort" (func $fimport$16))
(import "env" "set_blockchain_parameters_packed" (func $fimport$17 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$19 (param i32 i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $30))
(export "_ZdlPv" (func $52))
(export "_Znwj" (func $50))
(export "_Znaj" (func $51))
(export "_ZdaPv" (func $53))
(export "_ZnwjSt11align_val_t" (func $54))
(export "_ZnajSt11align_val_t" (func $55))
(export "_ZdlPvSt11align_val_t" (func $56))
(export "_ZdaPvSt11align_val_t" (func $57))
(table $0 5 5 anyfunc)
(elem (i32.const 1) $1 $29 $25 $13)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17884))
(global $global$2 i32 (i32.const 17884))


void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [11]) = $2
	$5 = ($0 + [112])
	$2 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)-3660453291822678016, (int_64)0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$1 }
	$0 = CALL $9($5, $2)
	*($4 + [20]) = $3
	*($4 + [16]) = ($4 + [11])
	CALL eosio_assert([1], [8788])
	CALL $20($5, $0, (int_64)0, ($4 + [16]))
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$1
	*($4) = $3
	*($4 + [4]) = ($4 + [11])
	*($4 + [40]) = $1
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$4()), [9086])
	*($4 + [16]) = $5
	*($4 + [20]) = $4
	*($4 + [24]) = ($4 + [40])
	*(($2 = CALL _Znwj([80])) + [24]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = (int_64)0
	*($2 + [64]) = $5
	CALL $21(($4 + [16]), $2)
	*($4 + [32]) = $2
	$1 = *($2)
	*($4 + [16]) = $1
	$3 = *($2 + [68])
	*($4 + [12]) = $3
	$6 = ($0 + [140])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [144]))) ){ goto $label$4 }
	*($5 + [8]) = $1
	*($5 + [16]) = $3
	*($4 + [32]) = [0]
	*($5) = $2
	*($6) = ($5 + [24])
	$0 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $12(($0 + [136]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	$0 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($4 + [48])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $61())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $63($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $19 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [112])
	$global$0 = $2
	*($2 + [40]) = (int_64)0
	*($2 + [32]) = $1
	CALL cancel_deferred(($2 + [32]))
	$3 = CALL current_time()
	*(($2 + [60])) = (int_64)0
	*(($2 + [76])) = (int_64)0
	*(($2 + [84])) = (int_64)0
	*($2 + [44]) = [0]
	*($2 + [48]) = [0]
	*($2 + [52 align=4]) = (int_64)0
	*($2 + [68 align=4]) = (int_64)0
	*($2 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [60])
	*($2 + [24]) = (int_64)3617214756542218240
	*($2 + [16]) = *($0)
	*($2 + [96]) = (int_64)7185110133309964288
	*($2 + [8]) = $1
	CALL $22(($2 + [68]), ($2 + [16]), $0, ($2 + [96]), ($2 + [8]))
	*($2 + [52]) = ((uint_64)*($0 + [152]) / (uint_64)(int_64)1000000)
	*($2 + [24]) = (int_64)0
	*($2 + [16]) = $1
	CALL $23(($2 + [96]), ($2 + [32]))
	$0 = *($2 + [96])
	CALL send_deferred(($2 + [16]), $1, $0, (*($2 + [100]) - $0), [0])
	$0 = *($2 + [96])
	if ( ($0 == 0) ){ goto $label$1 }
	*($2 + [100]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $24(($2 + [32]))
	$global$0 = ($2 + [112])
}

int_32 .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9480]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9484])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9480]) = [1]
	$2 = ($2 << [16])
	*([0] + [9484]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9484])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9484]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9480]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9480]) = [1]
	$3 = ($3 << [16])
	*([0] + [9484]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9484])
	
.LABEL $label$10
	*([0] + [9484]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $66($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8223])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $58($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17872])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17680]
	$3 = (((int_32)$1 * (int_32)[12]) + [17680])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $29 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [8603])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-3102536757352737664, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $16($3, $6)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [8603])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8432])
	if ( (uint_64)((int_64))(CALL current_time() - *($7 + [24])) <= *($0 + [152])) ){ goto $label$5 }
	CALL eosio_assert($6, [9137])
	CALL eosio_assert($6, [9171])
	$6 = CALL db_next_i64(*($7 + [36]), ($2 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $16($3, $6)
	
.LABEL $label$6
	CALL $26($3, $7)
	$8 = *(($7 + [16]))
	*((($2 + [24]) + [8])) = $8
	$9 = *($7 + [8])
	*((($2 + [8]) + [8])) = $8
	*($2 + [8]) = $9
	*($2 + [24]) = $9
	CALL $18($0, $1, [2], ($2 + [8]))
	
.LABEL $label$5
	$global$0 = ($2 + [48])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	float_32 $10
	float_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8823])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [8869])
	$6 = *($1)
	*(($7 = *($3))) = *($1 + [8])
	$7 = ($1 + [16])
	*(($7 + [8])) = *($7)
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($7)), [8979])
	$8 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9022])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9041])
	$9 = *($7)
	$10 = (CASTING float_32)(int_64 *($1 + [8]))
	$11 = ((float_32)$10 / (float_32)(float_32)1e4)
	if ( ((int_32)((float_32)$11 > (float_32)(float_32)1e8) ^ (int_32)[1]) ){ goto $label$1 }
	$10 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $10) * (float_64)(float_64)1.1))
	$11 = ((float_32)$10 / (float_32)(float_32)1e4)
	
.LABEL $label$1
	if ( ((int_32)((float_32)$11 > (float_32)(float_32)1e6) ^ (int_32)[1]) ){ goto $label$2 }
	$10 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $10) * (float_64)(float_64)1.1))
	$11 = ((float_32)$10 / (float_32)(float_32)1e4)
	
.LABEL $label$2
	if ( ((int_32)((float_32)$11 > (float_32)(float_32)1e4) ^ (int_32)[1]) ){ goto $label$3 }
	$10 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $10) * (float_64)(float_64)1.1))
	$11 = ((float_32)$10 / (float_32)(float_32)1e4)
	
.LABEL $label$3
	if ( ((int_32)((float_32)$11 > (float_32)(float_32)100) ^ (int_32)[1]) ){ goto $label$4 }
	$10 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $10) * (float_64)(float_64)1.1))
	
.LABEL $label$4
	if ( ((float_32)(float_32)|$10| < (float_32)(float_32)9223372036854775808) ){ goto $label$6 }
	$12 = (int_64)-9223372036854775808
	goto $label$5 
	
.LABEL $label$6
	$12 = (Rounds 0)($10)
	
.LABEL $label$5
	$8 = ((int_64)$12 + (int_64)4611686018427387903)
	CALL eosio_assert((uint_64)($8 <= (int_64)9223372036854775807), [8654])
	$7 = [0]
	if ( ((uint_64)$8 > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$8 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$13 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $13
	$7 = [1]
	$14 = $3
	$3 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $13
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$14 = ($3 + [1])
	$3 = $14
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$3 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [8206])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$12 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9059])
	*(($1 + [32])) = $9
	*($1 + [24]) = $12
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8920])
	$7 = $4
	$3 = ($7 + [-48])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($7 + [-8])
	CALL $46($5, $1)
	CALL db_update_i64(*($1 + [44]), $2, $3, [40])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($5 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	*($1) = CALL current_time()
	*($1 + [8]) = CALL current_time()
	$6 = *(*($5) + [8])
	CALL eosio_assert([1], [8654])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8703])
	*(($1 + [24])) = $6
	*($1 + [16]) = (int_64)0
	$6 = *(*($5) + [8])
	CALL eosio_assert([1], [8654])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$10 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [8703])
	*(($1 + [40])) = $6
	*($1 + [32]) = (int_64)0
	$6 = *(*($5) + [8])
	CALL eosio_assert([1], [8654])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$7 = $9
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$15 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$10 = [0]
	
.LABEL $label$11
	CALL eosio_assert($10, [8703])
	*(($1 + [56])) = $6
	*($1 + [48]) = (int_64)0
	if ( ((int_32)*(*($5 + [4])) != (int_32)[1]) ){ goto $label$16 }
	$10 = *($5)
	$7 = *($10)
	*(($8 = ($1 + [48]))) = $7
	*(($8 + [8])) = *(($10 + [8]))
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9453])
	
.LABEL $label$16
	$10 = $2
	$8 = ($10 + [-64])
	$global$0 = $8
	*($3 + [4]) = $8
	*($3) = $8
	*($3 + [8]) = $10
	CALL $49($3, $1)
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-3660453291822678016, *(*($0 + [8])), $7, $8, [64])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$17 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	$global$0 = ($3 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8823])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [8869])
	$6 = *($1)
	*($1 + [8]) = CALL current_time()
	$7 = *(*($3))
	if ( ((int_32)$7 == (int_32)[2]) ){ goto $label$2 }
	if ( ((int_32)$7 != (int_32)[1]) ){ goto $label$1 }
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [56]))), [8979])
	$8 = ((int_64)*($1 + [48]) + (int_64)*($3))
	*($1 + [48]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9022])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [9041])
	goto $label$1 
	
.LABEL $label$2
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [56]))), [9349])
	$8 = (int_64)
	*($1 + [48]) = $8(*($1 + [48]) - *($3)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9397])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [9419])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($1 + [48]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9453])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8920])
	$3 = $4
	$4 = ($3 + [-64])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = $3
	CALL $49($5, $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [16])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $38($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $39($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $40($2, $1)
	CALL $42(CALL $41(CALL $41($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $58($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $39(($6 + [28]), [8])
	$2 = *($6 + [28])
	CALL eosio_assert(((int_32)(*(($6 + [32])) - $2) > (int_32)[7]), [8782])
	CALL memcpy($2, $4, [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [224])
	$global$0 = $2
	*($2 + [136]) = $1
	CALL require_auth($1)
	$3 = [0]
	*(($2 + [176])) = [0]
	*($2 + [152]) = (int_64)-260984680006177120
	*($2 + [144]) = (int_64)-260984680006177120
	*($2 + [160]) = (int_64)-1
	*($2 + [168]) = (int_64)0
	$4 = CALL db_lowerbound_i64((int_64)-260984680006177120, (int_64)-260984680006177120, (int_64)-4157493832830681088, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = *(CALL $2(($2 + [144]), $4) + [8])
	$5 = *($2 + [168])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($2 + [172])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$5 }
	CALL _ZdlPv($7)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($2 + [168]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$1
	CALL eosio_assert((($3 & [255]) == 0), [8192])
	$6 = ($0 + [72])
	$1 = *($2 + [136])
	$7 = *(($0 + [100]))
	$3 = *(($0 + [96]))
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$9:
	$4 = ($7 + [-24])
	$5 = *($4)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$8 }
	$7 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$6), [8603])
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	$4 = CALL db_find_i64(*($6), *(($0 + [80])), (int_64)-3102536757352737664, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $16($6, $4)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$6), [8603])
	
.LABEL $label$6
	$4 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($4, [8414])
	*(($7 = (($2 + [144]) + [8]))) = *(($5 + [16]))
	*($2 + [144]) = *($5 + [8])
	CALL eosio_assert($4, [9137])
	CALL eosio_assert($4, [9171])
	$4 = CALL db_next_i64(*($5 + [36]), ($2 + [96]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$10 }
	CALL $16($6, $4)
	
.LABEL $label$10
	CALL $26($6, $5)
	$1 = *($7)
	*((($2 + [120]) + [8])) = $1
	*((($2 + [32]) + [8])) = $1
	$1 = *($2 + [144])
	*($2 + [120]) = $1
	*($2 + [32]) = $1
	$1 = *($2 + [136])
	CALL $18($0, $1, [2], ($2 + [32]))
	*($2 + [104]) = (int_64)0
	*($2 + [96]) = $1
	CALL cancel_deferred(($2 + [96]))
	$6 = ($0 + [32])
	$7 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$12 }
	
.LOOP $label$14:
	$4 = ($7 + [-24])
	$3 = *($4)
	if ( ((int_64)*($3) == (int_64)$1) ){ goto $label$13 }
	$7 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)$6), [8603])
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	$4 = CALL db_find_i64(*($6), *(($0 + [40])), (int_64)-4157658851160489984, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$11 }
	$3 = CALL $4($6, $4)
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)$6), [8603])
	
.LABEL $label$11
	*($2 + [96]) = (int_64)0
	$1 = *($2 + [152])
	*($2 + [104]) = $1
	CALL eosio_assert([1], [8654])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$1 = $8
	$9 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	$1 = $8
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$5 = ($4 + [1])
	$4 = $5
	if ( $7 ){ goto $label$22 }
	$9 = [1]
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL eosio_assert($9, [8703])
	if ( ($3 == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL eosio_assert([0], [8703])
	if ( $3 ){ goto $label$16 }
	
.LABEL $label$17
	$1 = *($2 + [136])
	*($2 + [84]) = ($2 + [144])
	*($2 + [80]) = ($2 + [136])
	*($2 + [88]) = $0
	*($2 + [216]) = $1
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$4()), [9086])
	*($2 + [192]) = $6
	*($2 + [196]) = ($2 + [80])
	*($2 + [200]) = ($2 + [216])
	*(($4 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = $6
	CALL $27(($2 + [192]), $4)
	*($2 + [208]) = $4
	$1 = *($4)
	*($2 + [192]) = $1
	$5 = *($4 + [44])
	*($2 + [188]) = $5
	$3 = ($0 + [60])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [64]))) ){ goto $label$24 }
	*($7 + [8]) = $1
	*($7 + [16]) = $5
	*($2 + [208]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	$4 = *($2 + [208])
	*($2 + [208]) = [0]
	if ( $4 ){ goto $label$23 }
	goto $label$15 
	
.LABEL $label$24
	CALL $6(($0 + [56]), ($2 + [208]), ($2 + [192]), ($2 + [188]))
	$4 = *($2 + [208])
	*($2 + [208]) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	
.LABEL $label$23
	CALL _ZdlPv($4)
	goto $label$15 
	
.LABEL $label$16
	*($2 + [200]) = $0
	*($2 + [196]) = ($2 + [144])
	*($2 + [192]) = ($2 + [96])
	CALL eosio_assert([1], [8788])
	CALL $28($6, $3, (int_64)0, ($2 + [192]))
	
.LABEL $label$15
	$1 = *((($2 + [144]) + [8]))
	*((($2 + [64]) + [8])) = $1
	$8 = *((($2 + [96]) + [8]))
	*((($2 + [48]) + [8])) = $8
	*((($2 + [16]) + [8])) = $1
	*(($2 + [8])) = $8
	$1 = *($2 + [144])
	*($2 + [64]) = $1
	$8 = *($2 + [96])
	*($2 + [48]) = $8
	*($2 + [16]) = $1
	*($2) = $8
	CALL $8($0, *($2 + [136]), [1], ($2 + [16]), $2)
	$global$0 = ($2 + [224])
}

int_32 .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	float_32 $8
	float_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$4 = *($4 + [4])
	$6 = *(($4 + [8]))
	*(($1 + [16])) = $6
	$7 = *($4)
	*($1 + [8]) = $7
	$8 = (CASTING float_32)(int_64 $7)
	$9 = ((float_32)$8 / (float_32)(float_32)1e4)
	if ( ((int_32)((float_32)$9 > (float_32)(float_32)1e8) ^ (int_32)[1]) ){ goto $label$1 }
	$8 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $8) * (float_64)(float_64)1.1))
	$9 = ((float_32)$8 / (float_32)(float_32)1e4)
	
.LABEL $label$1
	if ( ((int_32)((float_32)$9 > (float_32)(float_32)1e6) ^ (int_32)[1]) ){ goto $label$2 }
	$8 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $8) * (float_64)(float_64)1.1))
	$9 = ((float_32)$8 / (float_32)(float_32)1e4)
	
.LABEL $label$2
	if ( ((int_32)((float_32)$9 > (float_32)(float_32)1e4) ^ (int_32)[1]) ){ goto $label$3 }
	$8 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $8) * (float_64)(float_64)1.1))
	$9 = ((float_32)$8 / (float_32)(float_32)1e4)
	
.LABEL $label$3
	if ( ((int_32)((float_32)$9 > (float_32)(float_32)100) ^ (int_32)[1]) ){ goto $label$4 }
	$8 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $8) * (float_64)(float_64)1.1))
	
.LABEL $label$4
	if ( ((float_32)(float_32)|$8| < (float_32)(float_32)9223372036854775808) ){ goto $label$6 }
	$10 = (int_64)-9223372036854775808
	goto $label$5 
	
.LABEL $label$6
	$10 = (Rounds 0)($8)
	
.LABEL $label$5
	$7 = ((int_64)$10 + (int_64)4611686018427387903)
	CALL eosio_assert((uint_64)($7 <= (int_64)9223372036854775807), [8654])
	$11 = [0]
	if ( ((uint_64)$7 > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$12 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $12
	$11 = [1]
	$13 = $4
	$4 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $12
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = ((int_32)$4 < (int_32)[6])
	$13 = ($4 + [1])
	$4 = $13
	if ( $11 ){ goto $label$11 }
	$11 = [1]
	$4 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$11 = [0]
	
.LABEL $label$7
	CALL eosio_assert($11, [8206])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9059])
	*(($1 + [32])) = $6
	*($1 + [24]) = $10
	$11 = $2
	$4 = ($11 + [-48])
	$global$0 = $4
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($11 + [-8])
	CALL $46($3, $1)
	$7 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($5 + [8]), (int_64)-4157658851160489984, *(*($0 + [8])), $7, $4, [40])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$12 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($3 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9201])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9246])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9296])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8782])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8782])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8782])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8782])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8782])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8782])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8782])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8782])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8481])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [56])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8782])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8782])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8782])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8782])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $43($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8782])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8782])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8782])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $43(CALL $44($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8782])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8782])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8782])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8782])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8782])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8782])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8481])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8782])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8782])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8782])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8782])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8782])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8481])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8782])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8782])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8782])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [64])
	$global$0 = $5
	*($5 + [27]) = $2
	$6 = ($0 + [112])
	$2 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)-3660453291822678016, (int_64)0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = CALL $9($6, $2)
	*($5 + [12]) = $4
	*($5 + [8]) = $0
	*($5 + [20]) = $3
	*($5 + [16]) = ($5 + [27])
	CALL eosio_assert([1], [8788])
	CALL $10($6, $2, (int_64)0, ($5 + [8]))
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$1
	*($5 + [8]) = $4
	*($5 + [16]) = $3
	*($5 + [12]) = ($5 + [27])
	*($5 + [20]) = $0
	*($5 + [56]) = $1
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$4()), [9086])
	*($5 + [32]) = $6
	*($5 + [36]) = ($5 + [8])
	*($5 + [40]) = ($5 + [56])
	*(($2 = CALL _Znwj([80])) + [24]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = (int_64)0
	*($2 + [64]) = $6
	CALL $11(($5 + [32]), $2)
	*($5 + [48]) = $2
	$1 = *($2)
	*($5 + [32]) = $1
	$3 = *($2 + [68])
	*($5 + [28]) = $3
	$4 = ($0 + [140])
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [144]))) ){ goto $label$4 }
	*($6 + [8]) = $1
	*($6 + [16]) = $3
	*($5 + [48]) = [0]
	*($6) = $2
	*($4) = ($6 + [24])
	$0 = *($5 + [48])
	*($5 + [48]) = [0]
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $12(($0 + [136]), ($5 + [48]), ($5 + [32]), ($5 + [28]))
	$0 = *($5 + [48])
	*($5 + [48]) = [0]
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($5 + [64])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8458])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $64($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = $0
	CALL $48(($3 + [32]), $5)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $12(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $67($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $58($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	float_32 $10
	float_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8823])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [8869])
	$6 = *($1)
	*(($7 = *($3))) = *($1 + [8])
	$7 = ($1 + [16])
	*(($7 + [8])) = *($7)
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($7)), [8979])
	$8 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9022])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9041])
	$9 = *($7)
	$10 = (CASTING float_32)(int_64 *($1 + [8]))
	$11 = ((float_32)$10 / (float_32)(float_32)1e4)
	if ( ((int_32)((float_32)$11 > (float_32)(float_32)1e8) ^ (int_32)[1]) ){ goto $label$1 }
	$10 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $10) * (float_64)(float_64)1.1))
	$11 = ((float_32)$10 / (float_32)(float_32)1e4)
	
.LABEL $label$1
	if ( ((int_32)((float_32)$11 > (float_32)(float_32)1e6) ^ (int_32)[1]) ){ goto $label$2 }
	$10 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $10) * (float_64)(float_64)1.1))
	$11 = ((float_32)$10 / (float_32)(float_32)1e4)
	
.LABEL $label$2
	if ( ((int_32)((float_32)$11 > (float_32)(float_32)1e4) ^ (int_32)[1]) ){ goto $label$3 }
	$10 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $10) * (float_64)(float_64)1.1))
	$11 = ((float_32)$10 / (float_32)(float_32)1e4)
	
.LABEL $label$3
	if ( ((int_32)((float_32)$11 > (float_32)(float_32)100) ^ (int_32)[1]) ){ goto $label$4 }
	$10 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $10) * (float_64)(float_64)1.1))
	
.LABEL $label$4
	if ( ((float_32)(float_32)|$10| < (float_32)(float_32)9223372036854775808) ){ goto $label$6 }
	$12 = (int_64)-9223372036854775808
	goto $label$5 
	
.LABEL $label$6
	$12 = (Rounds 0)($10)
	
.LABEL $label$5
	$8 = ((int_64)$12 + (int_64)4611686018427387903)
	CALL eosio_assert((uint_64)($8 <= (int_64)9223372036854775807), [8654])
	$7 = [0]
	if ( ((uint_64)$8 > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$8 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$13 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $13
	$7 = [1]
	$14 = $3
	$3 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $13
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$14 = ($3 + [1])
	$3 = $14
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$3 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [8206])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$12 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9059])
	*(($1 + [32])) = $9
	*($1 + [24]) = $12
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8920])
	$7 = $4
	$3 = ($7 + [-48])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($7 + [-8])
	CALL $46($5, $1)
	CALL db_update_i64(*($1 + [44]), $2, $3, [40])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($5 + [16])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8458])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $64($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	CALL $45(($3 + [32]), $5)
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $67($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	float_32 $8
	float_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$4 = *($4 + [4])
	$6 = *(($4 + [8]))
	*(($1 + [16])) = $6
	$7 = *($4)
	*($1 + [8]) = $7
	$8 = (CASTING float_32)(int_64 $7)
	$9 = ((float_32)$8 / (float_32)(float_32)1e4)
	if ( ((int_32)((float_32)$9 > (float_32)(float_32)1e8) ^ (int_32)[1]) ){ goto $label$1 }
	$8 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $8) * (float_64)(float_64)1.1))
	$9 = ((float_32)$8 / (float_32)(float_32)1e4)
	
.LABEL $label$1
	if ( ((int_32)((float_32)$9 > (float_32)(float_32)1e6) ^ (int_32)[1]) ){ goto $label$2 }
	$8 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $8) * (float_64)(float_64)1.1))
	$9 = ((float_32)$8 / (float_32)(float_32)1e4)
	
.LABEL $label$2
	if ( ((int_32)((float_32)$9 > (float_32)(float_32)1e4) ^ (int_32)[1]) ){ goto $label$3 }
	$8 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $8) * (float_64)(float_64)1.1))
	$9 = ((float_32)$8 / (float_32)(float_32)1e4)
	
.LABEL $label$3
	if ( ((int_32)((float_32)$9 > (float_32)(float_32)100) ^ (int_32)[1]) ){ goto $label$4 }
	$8 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $8) * (float_64)(float_64)1.1))
	
.LABEL $label$4
	if ( ((float_32)(float_32)|$8| < (float_32)(float_32)9223372036854775808) ){ goto $label$6 }
	$10 = (int_64)-9223372036854775808
	goto $label$5 
	
.LABEL $label$6
	$10 = (Rounds 0)($8)
	
.LABEL $label$5
	$7 = ((int_64)$10 + (int_64)4611686018427387903)
	CALL eosio_assert((uint_64)($7 <= (int_64)9223372036854775807), [8654])
	$11 = [0]
	if ( ((uint_64)$7 > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$12 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $12
	$11 = [1]
	$13 = $4
	$4 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $12
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = ((int_32)$4 < (int_32)[6])
	$13 = ($4 + [1])
	$4 = $13
	if ( $11 ){ goto $label$11 }
	$11 = [1]
	$4 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$11 = [0]
	
.LABEL $label$7
	CALL eosio_assert($11, [8206])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9059])
	*(($1 + [32])) = $6
	*($1 + [24]) = $10
	$11 = $2
	$4 = ($11 + [-48])
	$global$0 = $4
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($11 + [-8])
	CALL $46($3, $1)
	$7 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($5 + [8]), (int_64)-4157658851160489984, *(*($0 + [8])), $7, $4, [40])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$12 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($3 + [16])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8458])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $64($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	CALL $34(($3 + [32]), $5)
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $35(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $67($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $3 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8603])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $36($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8603])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [176])
	$global$0 = $3
	*($3 + [88]) = $1
	CALL require_auth($1)
	$4 = [0]
	*(($3 + [128])) = [0]
	*($3 + [104]) = (int_64)-260984680006177120
	*($3 + [96]) = (int_64)-260984680006177120
	*($3 + [112]) = (int_64)-1
	*($3 + [120]) = (int_64)0
	$5 = [0]
	$6 = CALL db_lowerbound_i64((int_64)-260984680006177120, (int_64)-260984680006177120, (int_64)-4157493832830681088, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = *(CALL $2(($3 + [96]), $6) + [8])
	$7 = *($3 + [120])
	if ( ($7 == 0) ){ goto $label$1 }
	$8 = ($3 + [124])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$5 }
	CALL _ZdlPv($9)
	
.LABEL $label$5
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	$6 = *(($3 + [120]))
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*($8) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$1
	CALL eosio_assert((($5 & [255]) == 0), [8192])
	$10 = *($2)
	$11 = ((int_64)$10 + (int_64)4611686018427387903)
	if ( ((uint_64)$11 > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$1 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $12
	$4 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $9 ){ goto $label$10 }
	$4 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [8206])
	$1 = (int_64)0
	CALL eosio_assert(((int_64)$10 > (int_64)0), [8309])
	CALL eosio_assert((uint_64)($11 <= (int_64)9223372036854775807), [8332])
	$6 = CALL $60([8345])
	if ( ($6 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [8486])
	goto $label$12 
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$1 = (int_64)0
	
.LOOP $label$14:
	$9 = *(($6 + [8344]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [8531])
	
.LABEL $label$15
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$14 }
	
.LABEL $label$11
	$12 = *($3 + [88])
	*((($3 + [96]) + [32])) = [0]
	*($3 + [104]) = $12
	*($3 + [96]) = (int_64)-260984679985572560
	*($3 + [112]) = (int_64)-1
	*($3 + [120]) = (int_64)0
	$1 = *(CALL $3(($3 + [96]), $1, [8584]))
	$7 = *($3 + [120])
	if ( ($7 == 0) ){ goto $label$16 }
	$4 = ($3 + [124])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$20 }
	CALL _ZdlPv($9)
	
.LABEL $label$20
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$19 }
	$6 = *(($3 + [120]))
	goto $label$17 
	
.LABEL $label$18
	$6 = $7
	
.LABEL $label$17
	*($4) = $7
	CALL _ZdlPv($6)
	$12 = *($3 + [88])
	
.LABEL $label$16
	CALL eosio_assert(((int_64)*($2) <= (int_64)$1), [8349])
	$5 = ($0 + [32])
	$9 = *(($0 + [60]))
	$7 = *(($0 + [56]))
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$22 }
	
.LOOP $label$24:
	$6 = ($9 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$12) ){ goto $label$23 }
	$9 = $6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$22 }
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$5), [8603])
	goto $label$21 
	
.LABEL $label$22
	$4 = [0]
	$6 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-4157658851160489984, $12)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$21 }
	$4 = CALL $4($5, $6)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$5), [8603])
	
.LABEL $label$21
	*($3 + [96]) = (int_64)0
	$1 = *($2 + [8])
	*($3 + [104]) = $1
	CALL eosio_assert([1], [8654])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$12 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$1 = $12
	$8 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$31
	$1 = $12
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $9 ){ goto $label$32 }
	$8 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$29 }
	
.LABEL $label$30
	CALL eosio_assert($8, [8703])
	if ( ($4 == 0) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	CALL eosio_assert([0], [8703])
	if ( $4 ){ goto $label$26 }
	
.LABEL $label$27
	$1 = *($3 + [88])
	*($3 + [76]) = $2
	*($3 + [72]) = ($3 + [88])
	*($3 + [80]) = $0
	*($3 + [168]) = $1
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$4()), [9086])
	*($3 + [144]) = $5
	*($3 + [148]) = ($3 + [72])
	*($3 + [152]) = ($3 + [168])
	*(($6 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = $5
	CALL $5(($3 + [144]), $6)
	*($3 + [160]) = $6
	$1 = *($6)
	*($3 + [144]) = $1
	$7 = *($6 + [44])
	*($3 + [140]) = $7
	$4 = ($0 + [60])
	$9 = *($4)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [64]))) ){ goto $label$34 }
	*($9 + [8]) = $1
	*($9 + [16]) = $7
	*($3 + [160]) = [0]
	*($9) = $6
	*($4) = ($9 + [24])
	$6 = *($3 + [160])
	*($3 + [160]) = [0]
	if ( $6 ){ goto $label$33 }
	goto $label$25 
	
.LABEL $label$34
	CALL $6(($0 + [56]), ($3 + [160]), ($3 + [144]), ($3 + [140]))
	$6 = *($3 + [160])
	*($3 + [160]) = [0]
	if ( ($6 == 0) ){ goto $label$25 }
	
.LABEL $label$33
	CALL _ZdlPv($6)
	goto $label$25 
	
.LABEL $label$26
	*($3 + [148]) = $2
	*($3 + [152]) = $0
	*($3 + [144]) = ($3 + [96])
	CALL eosio_assert([1], [8788])
	CALL $7($5, $4, (int_64)0, ($3 + [144]))
	
.LABEL $label$25
	$12 = *(($2 + [8]))
	*((($3 + [56]) + [8])) = $12
	$1 = *($2)
	*((($3 + [24]) + [8])) = $12
	$12 = *((($3 + [96]) + [8]))
	*((($3 + [8]) + [8])) = $12
	*((($3 + [40]) + [8])) = $12
	$12 = *($3 + [96])
	*($3 + [40]) = $12
	*($3 + [56]) = $1
	*($3 + [24]) = $1
	*($3 + [8]) = $12
	CALL $8($0, *($3 + [88]), [1], ($3 + [24]), ($3 + [8]))
	$global$0 = ($3 + [176])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9201])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9246])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9296])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	float_32 $10
	float_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8823])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [8869])
	$6 = *($1)
	*(($7 = *($3))) = *($1 + [8])
	$7 = ($1 + [16])
	*(($7 + [8])) = *($7)
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($7)), [9349])
	$8 = (int_64)
	*($1 + [8]) = $8(*($1 + [8]) - *($3)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9397])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9419])
	$9 = *($7)
	$10 = (CASTING float_32)(int_64 *($1 + [8]))
	$11 = ((float_32)$10 / (float_32)(float_32)1e4)
	if ( ((int_32)((float_32)$11 > (float_32)(float_32)1e8) ^ (int_32)[1]) ){ goto $label$1 }
	$10 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $10) * (float_64)(float_64)1.1))
	$11 = ((float_32)$10 / (float_32)(float_32)1e4)
	
.LABEL $label$1
	if ( ((int_32)((float_32)$11 > (float_32)(float_32)1e6) ^ (int_32)[1]) ){ goto $label$2 }
	$10 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $10) * (float_64)(float_64)1.1))
	$11 = ((float_32)$10 / (float_32)(float_32)1e4)
	
.LABEL $label$2
	if ( ((int_32)((float_32)$11 > (float_32)(float_32)1e4) ^ (int_32)[1]) ){ goto $label$3 }
	$10 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $10) * (float_64)(float_64)1.1))
	$11 = ((float_32)$10 / (float_32)(float_32)1e4)
	
.LABEL $label$3
	if ( ((int_32)((float_32)$11 > (float_32)(float_32)100) ^ (int_32)[1]) ){ goto $label$4 }
	$10 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $10) * (float_64)(float_64)1.1))
	
.LABEL $label$4
	if ( ((float_32)(float_32)|$10| < (float_32)(float_32)9223372036854775808) ){ goto $label$6 }
	$12 = (int_64)-9223372036854775808
	goto $label$5 
	
.LABEL $label$6
	$12 = (Rounds 0)($10)
	
.LABEL $label$5
	$8 = ((int_64)$12 + (int_64)4611686018427387903)
	CALL eosio_assert((uint_64)($8 <= (int_64)9223372036854775807), [8654])
	$7 = [0]
	if ( ((uint_64)$8 > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$8 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$13 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $13
	$7 = [1]
	$14 = $3
	$3 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $13
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$14 = ($3 + [1])
	$3 = $14
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$3 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [8206])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$12 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9059])
	*(($1 + [32])) = $9
	*($1 + [24]) = $12
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8920])
	$7 = $4
	$3 = ($7 + [-48])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($7 + [-8])
	CALL $46($5, $1)
	CALL db_update_i64(*($1 + [44]), $2, $3, [40])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($5 + [16])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8458])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $64($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = $0
	CALL $47(($3 + [32]), $5)
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $17(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $67($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $58($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	float_32 $9
	float_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_64 $16
	int_64 $17
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8823])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [8869])
	$6 = *($1)
	*($1 + [8]) = CALL current_time()
	$7 = *($3 + [4])
	$8 = *($7 + [8])
	$9 = (CASTING float_32)(int_64 *($7))
	$10 = ((float_32)$9 / (float_32)(float_32)1e4)
	if ( ((int_32)((float_32)$10 > (float_32)(float_32)1e8) ^ (int_32)[1]) ){ goto $label$1 }
	$9 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $9) * (float_64)(float_64)1.1))
	$10 = ((float_32)$9 / (float_32)(float_32)1e4)
	
.LABEL $label$1
	if ( ((int_32)((float_32)$10 > (float_32)(float_32)1e6) ^ (int_32)[1]) ){ goto $label$2 }
	$9 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $9) * (float_64)(float_64)1.1))
	$10 = ((float_32)$9 / (float_32)(float_32)1e4)
	
.LABEL $label$2
	if ( ((int_32)((float_32)$10 > (float_32)(float_32)1e4) ^ (int_32)[1]) ){ goto $label$3 }
	$9 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $9) * (float_64)(float_64)1.1))
	$10 = ((float_32)$9 / (float_32)(float_32)1e4)
	
.LABEL $label$3
	if ( ((int_32)((float_32)$10 > (float_32)(float_32)100) ^ (int_32)[1]) ){ goto $label$4 }
	$9 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $9) * (float_64)(float_64)1.1))
	
.LABEL $label$4
	if ( ((float_32)(float_32)|$9| < (float_32)(float_32)9223372036854775808) ){ goto $label$6 }
	$11 = (int_64)-9223372036854775808
	goto $label$5 
	
.LABEL $label$6
	$11 = (Rounds 0)($9)
	
.LABEL $label$5
	$12 = ((int_64)$11 + (int_64)4611686018427387903)
	CALL eosio_assert((uint_64)($12 <= (int_64)9223372036854775807), [8654])
	$13 = [0]
	if ( ((uint_64)$12 > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$14 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$12 = $14
	$13 = [1]
	$15 = $7
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$12 = $14
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$13 = ((int_32)$7 < (int_32)[6])
	$15 = ($7 + [1])
	$7 = $15
	if ( $13 ){ goto $label$11 }
	$13 = [1]
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$13 = [0]
	
.LABEL $label$7
	CALL eosio_assert($13, [8206])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9059])
	$7 = *(*($3 + [8]))
	if ( ((int_32)$7 == (int_32)[2]) ){ goto $label$21 }
	$14 = (int_64)0
	$16 = (int_64)0
	if ( ((int_32)$7 != (int_32)[1]) ){ goto $label$12 }
	$7 = *($3 + [12])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [24]))), [8979])
	$12 = ((int_64)*($1 + [16]) + (int_64)*($7))
	*($1 + [16]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9022])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [9041])
	$7 = *(($3 + [4]))
	$12 = *($7)
	$16 = *($7 + [8])
	$13 = *($3 + [12])
	CALL eosio_assert(((int_64)*($13 + [8]) == (int_64)$16), [8979])
	$12 = ((int_64)$12 + (int_64)*($13))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9022])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [9041])
	$9 = (CASTING float_32)(int_64 $12)
	$10 = ((float_32)$9 / (float_32)(float_32)1e4)
	if ( ((int_32)((float_32)$10 > (float_32)(float_32)1e8) ^ (int_32)[1]) ){ goto $label$22 }
	$9 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $9) * (float_64)(float_64)1.1))
	$10 = ((float_32)$9 / (float_32)(float_32)1e4)
	
.LABEL $label$22
	if ( ((int_32)((float_32)$10 > (float_32)(float_32)1e6) ^ (int_32)[1]) ){ goto $label$23 }
	$9 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $9) * (float_64)(float_64)1.1))
	$10 = ((float_32)$9 / (float_32)(float_32)1e4)
	
.LABEL $label$23
	if ( ((int_32)((float_32)$10 > (float_32)(float_32)1e4) ^ (int_32)[1]) ){ goto $label$24 }
	$9 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $9) * (float_64)(float_64)1.1))
	$10 = ((float_32)$9 / (float_32)(float_32)1e4)
	
.LABEL $label$24
	if ( ((int_32)((float_32)$10 > (float_32)(float_32)100) ^ (int_32)[1]) ){ goto $label$25 }
	$9 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $9) * (float_64)(float_64)1.1))
	
.LABEL $label$25
	if ( ((float_32)(float_32)|$9| < (float_32)(float_32)9223372036854775808) ){ goto $label$20 }
	$14 = (int_64)-9223372036854775808
	goto $label$19 
	
.LABEL $label$21
	$7 = *($3 + [12])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [24]))), [9349])
	$12 = (int_64)
	*($1 + [16]) = $12(*($1 + [16]) - *($7)))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9397])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [9419])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($1 + [16]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9440])
	$7 = *(($3 + [4]))
	$12 = *($7)
	$16 = *($7 + [8])
	$13 = *($3 + [12])
	CALL eosio_assert(((int_64)*($13 + [8]) == (int_64)$16), [9349])
	$12 = (int_64)
	CALL eosio_assert(((int_64)$12($12 - *($13))) > (int_64)-4611686018427387904), [9397])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [9419])
	$9 = (CASTING float_32)(int_64 $12)
	$10 = ((float_32)$9 / (float_32)(float_32)1e4)
	if ( ((int_32)((float_32)$10 > (float_32)(float_32)1e8) ^ (int_32)[1]) ){ goto $label$26 }
	$9 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $9) * (float_64)(float_64)1.1))
	$10 = ((float_32)$9 / (float_32)(float_32)1e4)
	
.LABEL $label$26
	if ( ((int_32)((float_32)$10 > (float_32)(float_32)1e6) ^ (int_32)[1]) ){ goto $label$27 }
	$9 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $9) * (float_64)(float_64)1.1))
	$10 = ((float_32)$9 / (float_32)(float_32)1e4)
	
.LABEL $label$27
	if ( ((int_32)((float_32)$10 > (float_32)(float_32)1e4) ^ (int_32)[1]) ){ goto $label$28 }
	$9 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $9) * (float_64)(float_64)1.1))
	$10 = ((float_32)$9 / (float_32)(float_32)1e4)
	
.LABEL $label$28
	if ( ((int_32)((float_32)$10 > (float_32)(float_32)100) ^ (int_32)[1]) ){ goto $label$29 }
	$9 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $9) * (float_64)(float_64)1.1))
	
.LABEL $label$29
	if ( ((float_32)(float_32)|$9| < (float_32)(float_32)9223372036854775808) ){ goto $label$18 }
	$14 = (int_64)-9223372036854775808
	goto $label$17 
	
.LABEL $label$20
	$14 = (Rounds 0)($9)
	
.LABEL $label$19
	$12 = ((int_64)$14 + (int_64)4611686018427387903)
	CALL eosio_assert((uint_64)($12 <= (int_64)9223372036854775807), [8654])
	$13 = [0]
	if ( ((uint_64)$12 > (uint_64)(int_64)9223372036854775806) ){ goto $label$15 }
	$12 = (uint_64)$16 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$17 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$12 = $17
	$13 = [1]
	$15 = $7
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$30 }
	goto $label$15 
	
.LABEL $label$31
	$12 = $17
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$13 = ((int_32)$7 < (int_32)[6])
	$15 = ($7 + [1])
	$7 = $15
	if ( $13 ){ goto $label$32 }
	$13 = [1]
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$30 }
	goto $label$15 
	
.LABEL $label$18
	$14 = (Rounds 0)($9)
	
.LABEL $label$17
	$12 = ((int_64)$14 + (int_64)4611686018427387903)
	CALL eosio_assert((uint_64)($12 <= (int_64)9223372036854775807), [8654])
	$13 = [0]
	if ( ((uint_64)$12 > (uint_64)(int_64)9223372036854775806) ){ goto $label$13 }
	$12 = (uint_64)$16 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$17 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$12 = $17
	$13 = [1]
	$15 = $7
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$33 }
	goto $label$13 
	
.LABEL $label$34
	$12 = $17
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$13 = ((int_32)$7 < (int_32)[6])
	$15 = ($7 + [1])
	$7 = $15
	if ( $13 ){ goto $label$35 }
	$13 = [1]
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$33 }
	goto $label$13 
	
.LABEL $label$16
	$13 = [0]
	
.LABEL $label$15
	CALL eosio_assert($13, [8206])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$14 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9059])
	goto $label$12 
	
.LABEL $label$14
	$13 = [0]
	
.LABEL $label$13
	CALL eosio_assert($13, [8206])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$14 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9059])
	
.LABEL $label$12
	$7 = ($1 + [40])
	CALL eosio_assert(((int_64)$8 == (int_64)*($7)), [9349])
	$12 = (int_64)
	*($1 + [32]) = $12(*($1 + [32]) - $11))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9397])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [9419])
	CALL eosio_assert(((int_64)$16 == (int_64)*($7)), [8979])
	$12 = ((int_64)*($1 + [32]) + (int_64)$14)
	*($1 + [32]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9022])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [9041])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8920])
	$13 = $4
	$7 = ($13 + [-64])
	$global$0 = $7
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $13
	CALL $49($5, $1)
	CALL db_update_i64(*($1 + [68]), $2, $7, [64])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$36 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$36
	$global$0 = ($5 + [16])
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	float_32 $14
	float_32 $15
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	*($1) = CALL current_time()
	*($1 + [8]) = CALL current_time()
	$6 = *(*($5) + [8])
	CALL eosio_assert([1], [8654])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8703])
	*(($1 + [24])) = $6
	*($1 + [16]) = (int_64)0
	$6 = *(*($5) + [8])
	CALL eosio_assert([1], [8654])
	$12 = ($1 + [16])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$10 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [8703])
	*(($1 + [40])) = $6
	*($1 + [32]) = (int_64)0
	if ( ((int_32)*(*($5 + [4])) != (int_32)[1]) ){ goto $label$11 }
	$8 = *($5 + [8])
	$7 = *($8)
	*($12) = $7
	*(($12 + [8])) = *(($8 + [8]))
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9440])
	$8 = *($5 + [8])
	$13 = *($8 + [8])
	$14 = (CASTING float_32)(int_64 *($8))
	$15 = ((float_32)$14 / (float_32)(float_32)1e4)
	if ( ((int_32)((float_32)$15 > (float_32)(float_32)1e8) ^ (int_32)[1]) ){ goto $label$12 }
	$14 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $14) * (float_64)(float_64)1.1))
	$15 = ((float_32)$14 / (float_32)(float_32)1e4)
	
.LABEL $label$12
	if ( ((int_32)((float_32)$15 > (float_32)(float_32)1e6) ^ (int_32)[1]) ){ goto $label$13 }
	$14 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $14) * (float_64)(float_64)1.1))
	$15 = ((float_32)$14 / (float_32)(float_32)1e4)
	
.LABEL $label$13
	if ( ((int_32)((float_32)$15 > (float_32)(float_32)1e4) ^ (int_32)[1]) ){ goto $label$14 }
	$14 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $14) * (float_64)(float_64)1.1))
	$15 = ((float_32)$14 / (float_32)(float_32)1e4)
	
.LABEL $label$14
	if ( ((int_32)((float_32)$15 > (float_32)(float_32)100) ^ (int_32)[1]) ){ goto $label$15 }
	$14 = (DEMOTE float_32)(float_64 ((float_64)(PROMOTE float_64)(float_32 $14) * (float_64)(float_64)1.1))
	
.LABEL $label$15
	if ( ((float_32)(float_32)|$14| < (float_32)(float_32)9223372036854775808) ){ goto $label$17 }
	$6 = (int_64)-9223372036854775808
	goto $label$16 
	
.LABEL $label$17
	$6 = (Rounds 0)($14)
	
.LABEL $label$16
	$7 = ((int_64)$6 + (int_64)4611686018427387903)
	CALL eosio_assert((uint_64)($7 <= (int_64)9223372036854775807), [8654])
	$10 = [0]
	if ( ((uint_64)$7 > (uint_64)(int_64)9223372036854775806) ){ goto $label$18 }
	$7 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$7 = $9
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$22 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$10 = [0]
	
.LABEL $label$18
	CALL eosio_assert($10, [8206])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9059])
	*(($1 + [40])) = $13
	*(($1 + [32])) = $6
	
.LABEL $label$11
	$6 = *(*($5) + [8])
	CALL eosio_assert([1], [8654])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$7 = $9
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$27 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$10 = [0]
	
.LABEL $label$23
	CALL eosio_assert($10, [8703])
	*(($1 + [56])) = $6
	*($1 + [48]) = (int_64)0
	$10 = $2
	$8 = ($10 + [-64])
	$global$0 = $8
	*($3 + [4]) = $8
	*($3) = $8
	*($3 + [8]) = $10
	CALL $49($3, $1)
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-3660453291822678016, *(*($0 + [8])), $7, $8, [64])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$28 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$28
	$global$0 = ($3 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $58($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL require_auth($1)
	$4 = [0]
	$5 = *($2)
	$6 = ((int_64)$5 + (int_64)4611686018427387903)
	if ( ((uint_64)$6 > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$4 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8206])
	CALL eosio_assert(((int_64)$5 > (int_64)0), [8309])
	CALL eosio_assert((uint_64)($6 <= (int_64)9223372036854775807), [8332])
	$11 = ($0 + [32])
	$4 = *(($0 + [60]))
	$10 = *(($0 + [56]))
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$9:
	$8 = ($4 + [-24])
	$12 = *($8)
	if ( ((int_64)*($12) == (int_64)$1) ){ goto $label$8 }
	$4 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)$11), [8603])
	goto $label$6 
	
.LABEL $label$7
	$12 = [0]
	$8 = CALL db_find_i64(*($11), *(($0 + [40])), (int_64)-4157658851160489984, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$12 = CALL $4($11, $8)
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)$11), [8603])
	
.LABEL $label$6
	$13 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($13, [8381])
	$6 = *($2)
	CALL eosio_assert(((int_64)$6 <= (int_64)*($12 + [8])), [8397])
	*($3 + [104]) = (int_64)0
	$5 = *($2 + [8])
	*($3 + [112]) = $5
	CALL eosio_assert([1], [8654])
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$7 = $9
	$4 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$7 = $9
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $4 ){ goto $label$14 }
	$4 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$4 = [0]
	
.LABEL $label$10
	CALL eosio_assert($4, [8703])
	CALL eosio_assert(((int_64)*(($12 + [16])) == (int_64)$5), [8723])
	if ( ((int_64)*($12 + [8]) != (int_64)$6) ){ goto $label$16 }
	$8 = ($12 + [8])
	*((($3 + [104]) + [8])) = *(($8 + [8]))
	*($3 + [104]) = *($8)
	CALL eosio_assert($13, [9137])
	CALL eosio_assert($13, [9171])
	$8 = CALL db_next_i64(*($12 + [44]), ($3 + [128]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$17 }
	CALL $4($11, $8)
	
.LABEL $label$17
	CALL $14($11, $12)
	goto $label$15 
	
.LABEL $label$16
	*($3 + [132]) = $2
	*($3 + [136]) = $0
	*($3 + [128]) = ($3 + [104])
	CALL eosio_assert($13, [8788])
	CALL $15($11, $12, (int_64)0, ($3 + [128]))
	
.LABEL $label$15
	$9 = *(($2 + [8]))
	*((($3 + [88]) + [8])) = $9
	$5 = *((($3 + [104]) + [8]))
	*((($3 + [72]) + [8])) = $5
	$7 = *($2)
	*((($3 + [40]) + [8])) = $9
	*((($3 + [24]) + [8])) = $5
	$9 = *($3 + [104])
	*($3 + [72]) = $9
	*($3 + [88]) = $7
	*($3 + [40]) = $7
	*($3 + [24]) = $9
	CALL $8($0, $1, [2], ($3 + [40]), ($3 + [24]))
	$11 = ($0 + [72])
	$4 = *(($0 + [100]))
	$12 = *(($0 + [96]))
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$21 }
	
.LOOP $label$23:
	$8 = ($4 + [-24])
	$10 = *($8)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$22 }
	$4 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$21 }
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$11), [8603])
	goto $label$20 
	
.LABEL $label$21
	$4 = ($0 + [80])
	$8 = CALL db_find_i64(*($11), *($4), (int_64)-3102536757352737664, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$19 }
	$10 = CALL $16($11, $8)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$11), [8603])
	
.LABEL $label$20
	CALL eosio_assert([1], [8788])
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$11), [8823])
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$4()), [8869])
	$7 = *($10)
	$8 = ($10 + [16])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*($8)), [8979])
	$9 = ((int_64)*($10 + [8]) + (int_64)*($2))
	*($10 + [8]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9022])
	CALL eosio_assert(((int_64)*($10 + [8]) < (int_64)4611686018427387904), [9041])
	*($10 + [24]) = CALL current_time()
	CALL eosio_assert(((int_64)$7 == (int_64)*($10)), [8920])
	CALL eosio_assert([1], [8782])
	CALL memcpy(($3 + [128]), $10, [8])
	CALL eosio_assert([1], [8782])
	CALL memcpy((($3 + [128]) | [8]), ($10 + [8]), [8])
	*($3 + [168]) = *($8)
	CALL eosio_assert([1], [8782])
	CALL memcpy((($3 + [128]) + [16]), ($3 + [168]), [8])
	CALL eosio_assert([1], [8782])
	CALL memcpy((($3 + [128]) + [24]), ($10 + [24]), [8])
	CALL db_update_i64(*($10 + [36]), (int_64)0, ($3 + [128]), [32])
	$8 = ($0 + [88])
	if ( (uint_64)($7 <= *($8)) ){ goto $label$18 }
	*($8) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	goto $label$18 
	
.LABEL $label$19
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$4()), [9086])
	*(($8 = CALL _Znwj([48])) + [32]) = $11
	*($8) = $1
	*($8 + [8]) = *($2)
	*($8 + [16]) = *(($2 + [8]))
	*($8 + [24]) = CALL current_time()
	CALL eosio_assert([1], [8782])
	CALL memcpy(($3 + [128]), $8, [8])
	CALL eosio_assert([1], [8782])
	CALL memcpy((($3 + [128]) | [8]), ($8 + [8]), [8])
	*($3 + [168]) = *($8 + [16])
	CALL eosio_assert([1], [8782])
	CALL memcpy(($3 + [144]), ($3 + [168]), [8])
	CALL eosio_assert([1], [8782])
	CALL memcpy((($3 + [128]) + [24]), ($8 + [24]), [8])
	$7 = *($8)
	$10 = CALL db_store_i64(*($4), (int_64)-3102536757352737664, $1, $7, ($3 + [128]), [32])
	*($8 + [36]) = $10
	$4 = ($0 + [88])
	if ( (uint_64)($7 <= *($4)) ){ goto $label$24 }
	*($4) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	*($3 + [168]) = $8
	$7 = *($8)
	*($3 + [128]) = $7
	*($3 + [124]) = $10
	$12 = ($0 + [100])
	$4 = *($12)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [104]))) ){ goto $label$26 }
	*($4 + [8]) = $7
	*($4 + [16]) = $10
	*($3 + [168]) = [0]
	*($4) = $8
	*($12) = ($4 + [24])
	$8 = *($3 + [168])
	*($3 + [168]) = [0]
	if ( $8 ){ goto $label$25 }
	goto $label$18 
	
.LABEL $label$26
	CALL $17(($0 + [96]), ($3 + [168]), ($3 + [128]), ($3 + [124]))
	$8 = *($3 + [168])
	*($3 + [168]) = [0]
	if ( ($8 == 0) ){ goto $label$18 }
	
.LABEL $label$25
	CALL _ZdlPv($8)
	
.LABEL $label$18
	$9 = *(($2 + [8]))
	*((($3 + [56]) + [8])) = $9
	$7 = *($2)
	*((($3 + [8]) + [8])) = $9
	*($3 + [56]) = $7
	*($3 + [8]) = $7
	CALL $18($0, $1, [1], ($3 + [8]))
	CALL $19($0, $1)
	$global$0 = ($3 + [176])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8458])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $64($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8481])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8481])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $37(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $67($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $58($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8481])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [8481])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8481])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $58($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $64($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8481])
	CALL memcpy(($4 + [168]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*($4 + [160]) = (int_64)86400000000
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [168])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $67($2)
	
.LABEL $label$5
	CALL $33(($4 + [8]))
	$global$0 = ($4 + [176])
	return [1]
}

int_32 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [136]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)-3102536759825661953) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-4994048603321270272) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4157661383434960896) ){ goto $label$1 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [1]
	*($3) = *($3 + [56])
	CALL $31($1, $1, $3)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_64)$2 == (int_64)-3102536759825661952) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)7185110133309964288) ){ goto $label$1 }
	*($3 + [36]) = [0]
	*($3 + [32]) = [2]
	*($3 + [24]) = *($3 + [32])
	CALL $32($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [44]) = [0]
	*($3 + [40]) = [3]
	*($3 + [16]) = *($3 + [40])
	CALL $32($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [52]) = [0]
	*($3 + [48]) = [4]
	*($3 + [8]) = *($3 + [48])
	CALL $31($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $59([0])
	$global$0 = ($3 + [64])
}

int_32 .FUNC $31 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $64($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [184]) + [16]))) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [184]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8481])
	CALL memcpy(($4 + [184]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [8481])
	CALL memcpy((($4 + [184]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [8481])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*($4 + [176]) = (int_64)86400000000
	*(($8 = (($4 + [208]) + [8]))) = *($3)
	*($4 + [208]) = *($4 + [192])
	$0 = *($4 + [184])
	*((($4 + [224]) + [8])) = *($8)
	*($4 + [224]) = *($4 + [208])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$1 = *((($4 + [224]) + [8]))
	*((($4 + [240]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [224])
	*($4 + [8]) = $1
	*($4 + [240]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $67($2)
	
.LABEL $label$5
	CALL $33(($4 + [24]))
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $58 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $59 (int_32 $0)
{
}

int_32 .FUNC $61 ()
{
	return [9472]
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $64($1)
	
.LABEL $label$2
	*(CALL $61()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $64(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $67($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $64 (int_32 $0)
{
	return CALL $65([9488], $0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $64($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9468])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $64($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $67($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $62(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9468])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $62(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $67($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}