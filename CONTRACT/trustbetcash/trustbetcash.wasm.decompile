(data (i32.const 8192) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 8448) "carry == 0\00Assertion failed: %s (%s: %s: %d)\n\00-+   0X0x\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8513) "utils.hpp\00(null)\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8616) "DecodeBase58\00")
(data (i32.const 8629) "No delimiter in signature\00")
(data (i32.const 8655) "SIG\00-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 8678) "Signature Key has invalid prefix\00inf\00")
(data (i32.const 8715) "No curve in signature\00INF\00")
(data (i32.const 8741) "K1\00nan\00")
(data (i32.const 8748) "R1\00NAN\00")
(data (i32.const 8755) "Incorrect curve\00.\00")
(data (i32.const 8773) "Signature has no data\00")
(data (i32.const 8795) "Decode signature failed\00")
(data (i32.const 8819) "Invalid signature\00")
(data (i32.const 8837) "Signature checksum mismatch\00")
(data (i32.const 8865) "0123456789abcdef\00")
(data (i32.const 8882) "transfer\00%llu\00")
(data (i32.const 8896) "eosio.token\00")
(data (i32.const 8908) "trustbetteam\00")
(data (i32.const 8922) "enjoy game\00")
(data (i32.const 8933) "cannot transfer to self\00")
(data (i32.const 8957) "The fuse blew!\00")
(data (i32.const 8972) "public key not exist\00")
(data (i32.const 8993) "EOS\00")
(data (i32.const 8997) "TBT\00")
(data (i32.const 9001) "must EOS or TBT token\00")
(data (i32.const 9023) "invalid token transfer\00")
(data (i32.const 9046) "can not less than 0.1 EOS\00")
(data (i32.const 9072) "can not greater than 800 EOS\00")
(data (i32.const 9101) "can not less than 1 TBT\00")
(data (i32.const 9125) "can not greater than 80000 TBT\00")
(data (i32.const 9156) "don\'t fool me, bet quantity check fail\00")
(data (i32.const 9195) "host insufficient balance\00")
(data (i32.const 9221) "trustbetmine\00")
(data (i32.const 9234) "trustbetsrvr\00")
(data (i32.const 9247) "the account has no permission\00")
(data (i32.const 9277) "bet does not exist\00")
(data (i32.const 9296) "not the time to reveal\00")
(data (i32.const 9320) "\de\1c\00\00")
(data (i32.const 9324) "sample result err!!!\00")
(data (i32.const 9345) "quantity_pay err!!\00")
(data (i32.const 9364) "enjoy game, uid is \00")
(data (i32.const 9384) "  id is\00")
(data (i32.const 9392) "referrer can not be yourself\00")
(data (i32.const 9421) "invalid referrer account name\00")
(data (i32.const 9451) "trustbetinfo\00")
(data (i32.const 9464) "hourth already trxprofit\00")
(data (i32.const 9489) "id does not found\00")
(data (i32.const 9507) "trustbetdivi\00")
(data (i32.const 9520) "not the time to trxprofit\00")
(data (i32.const 9546) "hourth not found\00")
(data (i32.const 9563) "already trxprofit this hourth\00")
(data (i32.const 9593) "overdrawn eos balance\00")
(data (i32.const 9615) "overdrawn tbt balance\00")
(data (i32.const 9637) "profit:\00")
(data (i32.const 9645) "hourth does not trxprofit\00")
(data (i32.const 9671) "invalid permission\00")
(data (i32.const 9690) "string is too long to be a valid name\00")
(data (i32.const 9728) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9795) "character is not in allowed character set for names\00")
(data (i32.const 9847) "string is too long to be a valid symbol_code\00")
(data (i32.const 9892) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9945) "unable to find key\00")
(data (i32.const 9964) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10015) "error reading iterator\00")
(data (i32.const 10038) "read\00")
(data (i32.const 10043) "invalid memo\00")
(data (i32.const 10056) ";\00")
(data (i32.const 10058) ":\00")
(data (i32.const 10060) "invalid bet fields\00")
(data (i32.const 10079) "r\00")
(data (i32.const 10081) "u\00")
(data (i32.const 10083) "invalid uid\00")
(data (i32.const 10095) "f\00")
(data (i32.const 10097) "bet key must less than or equal to 7\00")
(data (i32.const 10134) "bet value must more than or equal to 1\00")
(data (i32.const 10173) "uid not found\00")
(data (i32.const 10188) "\t\00\00\00\n\00\00\00")
(data (i32.const 10196) "static const char *boost::detail::ctti<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> > >::n() [T = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]\00")
(data (i32.const 10418) "T = \00")
(data (i32.const 10424) "\t\00\00\00\0b\00\00\00")
(data (i32.const 10432) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 10481) "invalid symbol name\00")
(data (i32.const 10501) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10560) "multiplication overflow\00")
(data (i32.const 10584) "multiplication underflow\00")
(data (i32.const 10609) "cannot create objects in table of another contract\00")
(data (i32.const 10660) "write\00")
(data (i32.const 10666) "cannot pass end iterator to modify\00")
(data (i32.const 10701) "object passed to modify is not in multi_index\00")
(data (i32.const 10747) "cannot modify objects in table of another contract\00")
(data (i32.const 10798) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10857) "singleton does not exist\00")
(data (i32.const 10882) "attempt to subtract asset with different symbol\00")
(data (i32.const 10930) "subtraction underflow\00")
(data (i32.const 10952) "subtraction overflow\00")
(data (i32.const 10973) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 11027) "cannot decrement iterator at beginning of table\00")
(data (i32.const 11075) "get\00")
(data (i32.const 11079) "bet asset err!!\00")
(data (i32.const 11095) "attempt to add asset with different symbol\00")
(data (i32.const 11138) "addition underflow\00")
(data (i32.const 11157) "addition overflow\00")
(data (i32.const 11175) "next primary key in table is at autoincrement limit\00")
(data (i32.const 11227) "cannot pass end iterator to erase\00")
(data (i32.const 11261) "cannot increment end iterator\00")
(data (i32.const 11291) "object passed to erase is not in multi_index\00")
(data (i32.const 11336) "cannot erase objects in table of another contract\00")
(data (i32.const 11386) "attempt to remove object that was not in multi_index\00")
(data (i32.const 19888) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 19968) "\05\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\10\00\00\00\d4,\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 20112) "\00N\00\00")
(data (i32.const 20128) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 20224) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 22032) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 22496) "0123456789ABCDEF")
(data (i32.const 22512) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memmove" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$4 (param i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$5 (result i32)))
(import "env" "read_action_data" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$7 (param i64)))
(import "env" "db_find_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multi3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "db_lowerbound_i64" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "has_auth" (func $fimport$12 (param i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$14 (param i64)))
(import "env" "is_account" (func $fimport$15 (param i64) (result i32)))
(import "env" "current_receiver" (func $fimport$16 (result i64)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(import "env" "sha256" (func $fimport$19 (param i32 i32 i32)))
(import "env" "assert_recover_key" (func $fimport$20 (param i32 i32 i32 i32 i32)))
(import "env" "db_get_i64" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$22 (param i32 i64 i32 i32)))
(import "env" "db_previous_i64" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$24 (param i64 i64 i64) (result i32)))
(import "env" "send_deferred" (func $fimport$25 (param i32 i64 i32 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$26 (param i32)))
(import "env" "__lttf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$28))
(import "env" "prints_l" (func $fimport$29 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$40 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$41 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$44 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$46 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$47 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$48 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $6))
(export "_Znwj" (func $130))
(export "_ZdlPv" (func $132))
(export "_Znaj" (func $131))
(export "_ZdaPv" (func $133))
(export "_ZnwjSt11align_val_t" (func $134))
(export "_ZnajSt11align_val_t" (func $135))
(export "_ZdlPvSt11align_val_t" (func $136))
(export "_ZdaPvSt11align_val_t" (func $137))
(table $0 17 17 anyfunc)
(elem (i32.const 1) $8 $10 $12 $14 $15 $17 $19 $21 $91 $93 $100 $166 $168 $170 $171 $172)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 22769))
(global $global$2 i32 (i32.const 22769))


int_32 .FUNC $174 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *($2 + [20])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	if ( CALL $173($2) ){ goto $label$2 }
	$4 = *($2 + [20])
	if ( ((*(($2 + [16])) - $4) <= $1) ){ goto $label$1 }
	
.LABEL $label$3
	$6 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$5 }
	$6 = [0]
	$5 = $0
	$3 = [0]
	
.LOOP $label$6:
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$5 }
	$3 = ($3 + [1])
	$7 = ($5 + $1)
	$8 = ($5 + [-1])
	$5 = $8
	if ( ((int_32)*(($7 + [-1])) != (int_32)[10]) ){ goto $label$6 }
	$6 = (($1 - $3) + [1])
	$5 = CALL int_32 $2((int_32 $0), (int_32 $6), (int_32 *($2 + [36])))
	if ( ($5 <= $6) ){ goto $label$2 }
	$0 = (($8 + $1) + [1])
	$4 = *(($2 + [20]))
	$1 = ($3 + [-1])
	
.LABEL $label$5
	CALL memcpy($4, $0, $1)
	*(($3 = ($2 + [20]))) = (*($3) + $1)
	$5 = ($6 + $1)
	
.LABEL $label$2
	return $5
	return .LABEL $label$1
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL memory()
	[0]
	[0]
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$3 }
	*($3 + [240]) = [8882]
	*($3 + [244]) = CALL $194([8882])
	*($3 + [104]) = *($3 + [240])
	CALL $7(($3 + [248]), ($3 + [104]))
	[1]
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	
.LABEL $label$3
	*($3 + [224]) = [8896]
	*($3 + [228]) = CALL $194([8896])
	*($3 + [96]) = *($3 + [224])
	CALL $7(($3 + [232]), ($3 + [96]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$6 }
	*($3 + [208]) = [8882]
	*($3 + [212]) = CALL $194([8882])
	*($3 + [88]) = *($3 + [208])
	CALL $7(($3 + [216]), ($3 + [88]))
	[1]
	$4 = [1]
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$5 }
	
.LABEL $label$6
	*($3 + [192]) = [8908]
	*($3 + [196]) = CALL $194([8908])
	*($3 + [80]) = *($3 + [192])
	CALL $7(($3 + [200]), ($3 + [80]))
	if ( ((int_64)$1 != (int_64)-3605821319196013280) ){ goto $label$4 }
	*($3 + [176]) = [8882]
	*($3 + [180]) = CALL $194([8882])
	*($3 + [72]) = *($3 + [176])
	$4 = ((int_64)$2 == (int_64)-3617168760277827584)
	CALL $7(($3 + [184]), ($3 + [72]))
	
.LABEL $label$5
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	if ( ([0] == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$13 }
	if ( ((int_64)$2 > (int_64)-4417260059113816065) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-4994024814571159552) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$1 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [1]
	*($3 + [16]) = *($3 + [160])
	CALL $9($0, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 > (int_64)4923678616170004479) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-3604186121715056640) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [2]
	*($3 + [40]) = *($3 + [136])
	CALL $11($0, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-4417260059113816064) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-4417084425906421760) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [3]
	*($3 + [64]) = *($3 + [112])
	CALL $13($0, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)4923678616170004480) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)4923678863589618176) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [4]
	*($3 + [48]) = *($3 + [128])
	CALL $11($0, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [156]) = [0]
	*($3 + [152]) = [5]
	*($3 + [24]) = *($3 + [152])
	CALL $16($0, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [172]) = [0]
	*($3 + [168]) = [6]
	*($3 + [8]) = *($3 + [168])
	CALL $18($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [124]) = [0]
	*($3 + [120]) = [7]
	*($3 + [56]) = *($3 + [120])
	CALL $20($0, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [148]) = [0]
	*($3 + [144]) = [8]
	*($3 + [32]) = *($3 + [144])
	CALL $11($0, $1, ($3 + [32]))
	
.LABEL $label$1
	CALL $158([0])
	$global$0 = ($3 + [256])
}

int_32 .FUNC $176 (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [2] ? [3] : (int_64)(((int_64)$2 | (int_64)$0) == 0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC $177 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL $156()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL $156()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

int_32 .FUNC $170 (int_32 $0)
{
	return [0]
}

int_32 .FUNC $171 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

int_64 .FUNC $172 (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [9690])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [9795])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9728])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9795])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $178 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL $177($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [176])
	$global$0 = $3
	$4 = [0]
	$5 = CALL $150($1, [95], [0])
	CALL eosio_assert(((int_32)$5 != (int_32)[-1]), [8629])
	$6 = CALL $140(($3 + [160]), $1, [0], $5, $1)
	$8 = *($3 + [160])
	$7 = CALL $194([8655])
	if ( ((int_32)$7 != (int_32)( *($6 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$1 }
	$4 = (CALL $151($6, [0], [-1], [8655], $7) == 0)
	
.LABEL $label$1
	CALL eosio_assert($4, [8678])
	$4 = ($5 + [1])
	$8 = CALL $150($1, [95], $4)
	CALL eosio_assert(((int_32)$8 != (int_32)[-1]), [8715])
	$4 = CALL $140(($3 + [144]), $1, $4, ($8 + ((int_32)$5 ^ (int_32)[-1])), $1)
	$5 = *($3 + [144])
	$7 = CALL $194([8741])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$4 }
	if ( (CALL $151($4, [0], [-1], [8741], $7) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = [0]
	$7 = *($3 + [144])
	$9 = CALL $194([8748])
	if ( ((int_32)$9 != (int_32)( *(($4 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	$5 = (CALL $151($4, [0], [-1], [8748], $9) == 0)
	goto $label$2 
	
.LABEL $label$3
	$5 = [1]
	
.LABEL $label$2
	CALL eosio_assert($5, [8755])
	$5 = [0]
	$7 = *($3 + [144])
	$9 = CALL $194([8741])
	if ( ((int_32)$9 != (int_32)( *(($4 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$5 }
	$5 = (CALL $151($4, [0], [-1], [8741], $9) == 0)
	
.LABEL $label$5
	$1 = *($3 + [128])
	$8 = CALL $140(($3 + [128]), $1, ($8 + [1]), [-1], $1)
	CALL eosio_assert(((int_32)( *($8 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) ) != (int_32)[0]), [8773])
	*($3 + [120]) = [0]
	*($3 + [112]) = (int_64)0
	CALL eosio_assert(CALL $1(( *($8 + [8]) ? ($8 + [1]) : (*($3 + [128]) & [1]) ), ($3 + [112])), [8795])
	CALL eosio_assert(((int_32)(*($3 + [116]) - *($3 + [112])) == (int_32)[69]), [8819])
	if ( (*($2) == 0) ){ goto $label$6 }
	CALL memmove(($3 + [40]), *($3 + [112]), [65])
	*($3 + [106]) = [49]
	*($3 + [105]) = ( [75] ? [82] : $5 )
	CALL ripemd160(($3 + [40]), [67], $3)
	CALL eosio_assert((CALL $193($3, (*($3 + [116]) + [-4]), [4]) == 0), [8837])
	
.LABEL $label$6
	*($0) = ((int_32)$5 ^ (int_32)[1])
	$0 = ($0 + [1])
	$1 = [0]
	$5 = *($3 + [112])
	
.LOOP $label$7:
	*(($0 + $1)) = *(($5 + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[65]) ){ goto $label$7 }
	*($3 + [116]) = $5
	CALL _ZdlPv($5)
	if ( (*($3 + [128]) & [1]) ){ goto $label$12 }
	if ( (*($3 + [144]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($8 + [8])))
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($3 + [160]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	$global$0 = ($3 + [176])
	return 
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($3 + [176])
}

int_64 .FUNC $5 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0)
	$3 = ($2 & [1])
	$4 = ( *($0 + [8]) ? ($0 + [1]) : $3 )
	$3 = ( *($0 + [4]) ? uint_32($2 >> [1]) : $3 )
	if ( ($3 <= [4]) ){ goto $label$4 }
	$5 = ($3 + [-4])
	$0 = $4
	$2 = $3
	
.LOOP $label$5:
	CALL memcpy(($1 + [12]), $0, [4])
	$6 = ((int_32)*($1 + [12]) * (int_32)[1540483477])
	$2 = ((int_32)((int_32)((int_32)uint_32($6 >> [24]) ^ (int_32)$6) * (int_32)[1540483477]) ^ (int_32)((int_32)$2 * (int_32)[1540483477]))
	$0 = ($0 + [4])
	$3 = ($3 + [-4])
	if ( ((uint_32)$3 > (uint_32)[3]) ){ goto $label$5 }
	$0 = ($5 & [-4])
	$4 = (($4 + $0) + [4])
	$3 = ($5 - $0)
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$2 = $3
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$3 != (int_32)[3]) ){ goto $label$1 }
	$2 = ((int_32)(*($4 + [2]) << [16]) ^ (int_32)$2)
	
.LABEL $label$6
	$2 = ((int_32)(*($4 + [1]) << [8]) ^ (int_32)$2)
	
.LABEL $label$2
	$2 = ((int_32)((int_32)$2 ^ (int_32)*($4)) * (int_32)[1540483477])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	$0 = ((int_32)((int_32)uint_32($2 >> [13]) ^ (int_32)$2) * (int_32)[1540483477])
	return (CASTING uint_64)(uint_32 ((int_32)uint_32($0 >> [15]) ^ (int_32)$0))
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	
.LOOP $label$1:
	$5 = ($1 + [-2])
	$6 = ($1 + [-1])
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$5 }
	
.LOOP $label$7:
	if ( ((int_32)$0 <= (int_32)[30]) ){ goto $label$19 }
	$7 = ($4 + uint_32($0 >> [1]))
	if ( ((int_32)$0 < (int_32)[1000]) ){ goto $label$20 }
	$0 = uint_32($0 >> [2])
	$8 = CALL $128($4, ($4 + $0), $7, ($7 + $0), $6, $2)
	goto $label$18 
	
.LABEL $label$20
	$0 = *($6)
	$9 = *($4)
	$10 = *($7)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$23 }
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$22 }
	*($4) = $0
	*($6) = $9
	$8 = [1]
	$9 = *($7)
	$3 = *($4)
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$23
	$8 = [0]
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$18 }
	*($7) = $0
	*($6) = $10
	$8 = [1]
	$10 = *($4)
	$0 = *($7)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$18 }
	*($4) = $0
	*($7) = $10
	goto $label$21 
	
.LABEL $label$22
	*($4) = $10
	*($7) = $9
	$8 = [1]
	$0 = *($6)
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$18 }
	*($7) = $0
	*($6) = $9
	
.LABEL $label$21
	$8 = [2]
	$9 = *($7)
	$3 = *($4)
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$0 = *($4 + [2])
	$9 = *($4)
	$10 = *($4 + [1])
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$29 }
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$28 }
	*($4) = $0
	*(($4 + [2])) = $9
	goto $label$27 
	
.LABEL $label$29
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$25 }
	*(($4 + [2])) = $10
	*(($11 = ($4 + [1]))) = $0
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$26 }
	*($4) = $0
	*($11) = $9
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$24 }
	goto $label$3 
	
.LABEL $label$28
	*($4) = $10
	*(($10 = ($4 + [1]))) = $9
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$25 }
	*(($4 + [2])) = $9
	*($10) = $0
	
.LABEL $label$27
	$10 = $9
	
.LABEL $label$26
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$24 }
	goto $label$3 
	
.LABEL $label$25
	$10 = $0
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$24
	$7 = [0]
	
.LOOP $label$30:
	$11 = *($6)
	if ( ((int_32)$11 >= (int_32)int_32(($10 << [24]) >> [24])) ){ goto $label$31 }
	$0 = $7
	
.LOOP $label$34:
	*((($9 = ($4 + $0)) + $12)) = $10
	if ( ((int_32)$0 == (int_32)[-2]) ){ goto $label$33 }
	$0 = ($0 + [-1])
	$10 = *(($9 + [1]))
	if ( ((int_32)$11 < (int_32)$10) ){ goto $label$34 }
	$0 = (($4 + $0) + $12)
	goto $label$32 
	
.LABEL $label$33
	$0 = $4
	
.LABEL $label$32
	*($0) = $11
	
.LABEL $label$31
	$0 = ($6 + [1])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	$7 = ($7 + [1])
	$10 = *($6)
	$6 = $0
	goto $label$30 
	
.LABEL $label$18
	$9 = *($7)
	$3 = *($4)
	if ( ((int_32)$3 >= (int_32)$9) ){ goto $label$16 }
	
.LABEL $label$17
	$10 = $6
	$3 = ($4 + [1])
	if ( ($3 <= $10) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$0 = $5
	
.LOOP $label$35:
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$14 }
	$10 = *($0)
	$11 = ($0 + [-1])
	$0 = $11
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$35 }
	*($4) = $10
	*(($10 = ($11 + [1]))) = $3
	$8 = ($8 + [1])
	$3 = ($4 + [1])
	if ( ((uint_32)$3 >= (uint_32)$10) ){ goto $label$13 }
	
.LABEL $label$15
	
.LOOP $label$36:
	$0 = ($3 + [-1])
	$9 = *($7)
	
.LOOP $label$37:
	$0 = ($0 + [1])
	$11 = *($0)
	if ( ((int_32)$11 < (int_32)$9) ){ goto $label$37 }
	$3 = ($0 + [1])
	
.LOOP $label$38:
	$10 = ($10 + [-1])
	$12 = *($10)
	if ( ((int_32)$12 >= (int_32)$9) ){ goto $label$38 }
	if ( ((uint_32)$0 > (uint_32)$10) ){ goto $label$39 }
	*($0) = $12
	*($10) = $11
	$7 = ( $10 ? $7 : ((int_32)$7 == (int_32)$0) )
	$8 = ($8 + [1])
	goto $label$36 
	
.LABEL $label$39
	$3 = $0
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$12 = ($4 + [1])
	$9 = *($6)
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$40 }
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$3 }
	$12 = ($4 + [2])
	
.LOOP $label$42:
	$0 = ($12 + [-1])
	$10 = *($0)
	if ( ((int_32)$3 < (int_32)$10) ){ goto $label$41 }
	$12 = ($12 + [1])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$42 }
	goto $label$3 
	
.LABEL $label$41
	*($0) = $9
	*($6) = $10
	
.LABEL $label$40
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$43:
	$0 = ($12 + [-1])
	$10 = *($4)
	
.LOOP $label$44:
	$0 = ($0 + [1])
	$9 = *($0)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$44 }
	$12 = ($0 + [1])
	
.LOOP $label$45:
	$6 = ($6 + [-1])
	$11 = *($6)
	if ( ((int_32)$10 < (int_32)$11) ){ goto $label$45 }
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$46 }
	*($0) = $11
	*($6) = $9
	goto $label$43 
	
.LABEL $label$46
	$10 = ([4] & [7])
	if ( ((uint_32)$10 > (uint_32)[4]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$13
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$11 }
	
.LABEL $label$12
	$10 = *($3)
	$0 = *($7)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$11 }
	*($3) = $0
	*($7) = $10
	if ( ($8 + [1]) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	if ( $8 ){ goto $label$9 }
	
.LABEL $label$10
	$10 = CALL $129($4, $3, $2)
	$0 = ($3 + [1])
	if ( CALL $129($0, $1, $2) ){ goto $label$6 }
	if ( $10 ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)($3 - $4) >= (int_32)($1 - $3)) ){ goto $label$2 }
	CALL $127($4, $3, $2)
	$0 = ($3 + [1])
	
.LABEL $label$8
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$5 }
	goto $label$7 
	
.LABEL $label$6
	$1 = ( $1 ? $3 : $10 )
	$0 = $4
	$10 = (( [1] ? [2] : $10 ) & [7])
	if ( ((uint_32)$10 <= (uint_32)[4]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	goto $label$3 
	
.LABEL $label$59
	$9 = *($4)
	$0 = ($1 + [-1])
	$10 = *($0)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$3 }
	*($4) = $10
	*($0) = $9
	return 
	
.LABEL $label$58
	$9 = ($1 + [-1])
	$0 = *($9)
	$11 = *($4)
	$10 = *($4 + [1])
	if ( ((int_32)$10 >= (int_32)$11) ){ goto $label$55 }
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$53 }
	*($4) = $0
	*($9) = $11
	return 
	
.LABEL $label$57
	CALL $128($4, ($4 + [1]), ($4 + [2]), ($4 + [3]), ($1 + [-1]), $2)
	return 
	
.LABEL $label$56
	$11 = ($1 + [-1])
	$10 = *($4 + [2])
	$9 = *($4)
	$0 = *($4 + [1])
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$54 }
	if ( ((int_32)$10 >= (int_32)$0) ){ goto $label$52 }
	*($4) = $10
	*(($4 + [2])) = $9
	goto $label$51 
	
.LABEL $label$55
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$3 }
	*(($11 = ($4 + [1]))) = $0
	*($9) = $10
	$10 = *($4)
	$0 = *($11)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$3 }
	*($4) = $0
	*($11) = $10
	return 
	
.LABEL $label$54
	if ( ((int_32)$10 >= (int_32)$0) ){ goto $label$50 }
	*(($4 + [2])) = $0
	*(($12 = ($4 + [1]))) = $10
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$48 }
	*($4) = $10
	*($12) = $9
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	goto $label$47 
	
.LABEL $label$53
	*($4) = $10
	*(($0 = ($4 + [1]))) = $11
	$10 = *($9)
	if ( ((int_32)$10 >= (int_32)$11) ){ goto $label$3 }
	*($0) = $10
	*($9) = $11
	return 
	
.LABEL $label$52
	*($4) = $0
	*(($0 = ($4 + [1]))) = $9
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$49 }
	*(($4 + [2])) = $9
	*($0) = $10
	
.LABEL $label$51
	$0 = $9
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	goto $label$47 
	
.LABEL $label$50
	$0 = $10
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	goto $label$47 
	
.LABEL $label$49
	$0 = $10
	
.LABEL $label$48
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	
.LABEL $label$47
	*(($10 = ($4 + [2]))) = $12
	*($11) = $0
	$9 = ($4 + [1])
	$11 = *($9)
	$0 = *($10)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$3 }
	*($10) = $11
	*($9) = $0
	$10 = *($4)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$3 }
	*($4) = $0
	*(($4 + [1])) = $10
	return 
	
.LABEL $label$4
	if ( (([1] << $10) & [21]) ){ goto $label$1 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	CALL $127(($3 + [1]), $1, $2)
	$1 = $3
	$0 = $4
	goto $label$1 
	$0
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $189 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $187($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $188 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $37(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $37(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$6 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10038])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10038])
	$3 = *($5)
	
.LABEL $label$8
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$4 = *($0 + [32])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$1) ){ goto $label$9 }
	CALL eosio_assert([0], [10038])
	$1 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy(($2 + [8]), $1, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	*($4) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*(($1 + [92])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10701])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10747])
	
.LABEL $label$2
	$5 = *($1)
	$2 = *($2)
	*($1) = *($2)
	$6 = ($1 + [8])
	CALL $141($6, ($2 + [8]))
	*(($1 + [32])) = *(($2 + [32]))
	*($1 + [24]) = *($2 + [24])
	$7 = ($1 + [40])
	CALL $141($7, ($2 + [40]))
	*(($1 + [81])) = *(($2 + [81]))
	*(($1 + [76])) = *(($2 + [76]))
	*(($1 + [68])) = *(($2 + [68]))
	*(($1 + [60])) = *(($2 + [60]))
	*($1 + [52 align=4]) = *($2 + [52 align=4])
	if ( ((int_64)$5 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [10798])
	
.LABEL $label$3
	$8 = ($1 + [52])
	$9 = ($1 + [24])
	$2 = *($6)
	$10 = ( *(($1 + [12])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($10 + [61])
	$11 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$4:
	$2 = ($2 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	$10 = *(($1 + [40]))
	$10 = ( *(($1 + [44])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$2 = ($10 + $2)
	$11 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	if ( ($2 <= [513]) ){ goto $label$7 }
	$3 = CALL $200($2)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$6
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($3 + $2)
	*($4 + [16]) = $4
	*($4 + [28]) = $6
	*($4 + [32]) = $9
	*($4 + [40]) = $7
	*($4 + [44]) = $8
	*($4 + [24]) = $1
	*($4 + [36]) = ($1 + [32])
	*($4 + [48]) = ($1 + [56])
	*($4 + [52]) = ($1 + [72])
	*($4 + [56]) = ($1 + [88])
	CALL $111(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [96]), (int_64)0, $3, $2)
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $203($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$8
	$global$0 = ($4 + [64])
}

void .FUNC memory ()
{
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $30($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $51(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [112]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)6823129357326745600, (int_64)6823129357326745600)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $76($0, $4)
	if ( ((int_32)*($4 + [112]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$2
	*($3) = $1
	CALL $77($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $78($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

int_32 .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	$5 = ($global$0 - [80])
	$global$0 = $5
	CALL $153(($5 + [64]), *($3))
	$3 = *($4)
	$6 = ($3 & [1])
	$4 = CALL $149(($5 + [64]), [0], ( *($4 + [8]) ? ($4 + [1]) : $6 ), ( *($4 + [4]) ? uint_32($3 >> [1]) : $6 ))
	$3 = ($4 + [8])
	*(($5 + [8])) = *($3)
	*($5) = *($4)
	*($4) = (int_64)0
	*($3) = [0]
	CALL $153(($5 + [32]), *($2))
	$4 = *($5 + [32])
	$2 = ($4 & [1])
	$4 = CALL $148($5, ( *($5 + [40]) ? (($5 + [32]) | [1]) : $2 ), ( *($5 + [36]) ? uint_32($4 >> [1]) : $2 ))
	$2 = ($4 + [8])
	*((($5 + [48]) + [8])) = *($2)
	*($5 + [48]) = *($4)
	*($4) = (int_64)0
	*($2) = [0]
	if ( (*($5 + [32]) & [1]) ){ goto $label$5 }
	if ( (*($5) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*((($5 + [32]) + [8])))
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	$3 = [1]
	if ( (*($5 + [64]) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = [1]
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($5 + [72]))
	
.LABEL $label$1
	$4 = *($5 + [48])
	$2 = ($4 & $3)
	CALL sha256(( *($5 + [56]) ? (($5 + [48]) | $3) : $2 ), ( *($5 + [52]) ? uint_32($4 >> $3) : $2 ), $5)
	$4 = [0]
	*($5 + [72]) = [0]
	*($5 + [64]) = (int_64)0
	
.LOOP $label$6:
	$2 = *(($5 + $4))
	CALL $147(($5 + [64]), *((uint_32($2 >> [4]) + [8865])))
	CALL $147(($5 + [64]), *((($2 & [15]) + [8865])))
	$4 = ($4 + $3)
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$6 }
	$7 = CALL $5(($5 + [64]))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$7
	$4 = (CASTING uint_32)(uint_64 ((uint_64)$7 % (uint_64)*($1)))
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$8
	$global$0 = ($5 + [80])
	return $4
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*(($1 + [92])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11291])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11336])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [11386])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$13
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$14
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$15:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$16 }
	if ( ((*($8 + [40]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($8 + [48])))
	
.LABEL $label$17
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($8 + [16])))
	
.LABEL $label$18
	CALL _ZdlPv($8)
	
.LABEL $label$16
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$15 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [96]))
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $125(($6 + [28]), $4)
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = [0]
	CALL $121(($4 + [16]), $0)
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $30($4, $6)
	$5 = *($4 + [4])
	$6 = *($4)
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $6
	*($4 + [16]) = $6
	*($4 + [24]) = $5
	CALL $122(($4 + [16]), $0)
	$0 = *($4)
	CALL send_deferred($1, $2, $0, (*($4 + [4]) - $0), $3)
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$3 }
	*($4 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($4 + [32])
}

int_32 .FUNC $167 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $166 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $165 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [12] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $167($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $167($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $167($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $167($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19888]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $167($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $167($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $167($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $164 ()
{
	CALL $197([11456])
}

int_32 .FUNC $163 ()
{
	CALL $196([11456])
	return [11464]
}

int_32 .FUNC $162 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $183($0, $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $161 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL $159($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$3 = *($0 + [8])
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	if ( (*([0] + [11452]) == 0) ){ goto $label$8 }
	$4 = CALL $161(*([0] + [11452]))
	
.LABEL $label$8
	$0 = *(CALL $163())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL $159($0)
	
.LABEL $label$11
	$3 = *($0 + [28])
	$2 = *($0 + [20])
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$12 }
	$5 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$5 = CALL $159($0)
	$3 = *(($0 + [28]))
	$2 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$2 = [-1]
	if ( $5 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$3 = *($0 + [8])
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($5 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $160($0)
	
.LABEL $label$14
	$4 = ($2 | $4)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL $160($0)
	
.LABEL $label$18
	$0 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL $164()
	return $4
	
.LABEL $label$3
	$2 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $160($0)
	
.LABEL $label$1
	return $2
}

void .FUNC $160 (int_32 $0)
{
}

int_32 .FUNC $169 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $165([13], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $168 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $175 (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10015])
	
.LABEL $label$5
	$2 = CALL $200($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [20]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10038])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [10038])
	
.LABEL $label$8
	$8 = ($5 + [16])
	CALL memcpy(($3 + [24]), $7, [8])
	*(($5 + [8])) = *($3 + [24])
	$7 = ($2 + [16])
	if ( ((int_32)($4 & [-4]) != (int_32)[16]) ){ goto $label$9 }
	CALL eosio_assert([0], [10038])
	
.LABEL $label$9
	CALL memcpy($8, $7, [4])
	*($5 + [24]) = $1
	*($3 + [16]) = $5
	$9 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($3 + [24]) = $9)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$12 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $61(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $203($2)
	
.LABEL $label$10
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$13 }
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [20]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10701])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10747])
	
.LABEL $label$2
	*($1 + [16]) = (*($1 + [16]) + [1])
	$5 = *($1 + [8])
	$6 = *($2)
	$7 = CALL $194([8993])
	if ( ($7 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [9847])
	goto $label$6 
	
.LABEL $label$7
	if ( ($7 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = (int_64)0
	
.LOOP $label$8:
	$9 = *(($7 + [8992]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)*($6 + [8]) == (int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)4)) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)*($6 + [8]) != (int_64)4) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = *($2)
	if ( ((int_64)*($7 + [8]) == (int_64)*(($1 + [8]))) ){ goto $label$10 }
	CALL eosio_assert([0], [11095])
	
.LABEL $label$10
	$8 = ((int_64)*($1) + (int_64)*($7))
	*($1) = $8
	if ( ((int_64)$8 > (int_64)-4611686018427387904) ){ goto $label$11 }
	CALL eosio_assert([0], [11138])
	$8 = *($1)
	
.LABEL $label$11
	if ( ((int_64)$8 < (int_64)4611686018427387904) ){ goto $label$3 }
	CALL eosio_assert([0], [11157])
	
.LABEL $label$3
	if ( ((int_64)$5 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$12 }
	CALL eosio_assert([0], [10798])
	
.LABEL $label$12
	$9 = $3
	$7 = ($9 + [-32])
	$global$0 = $7
	*($4 + [4]) = $7
	*($4) = $7
	*($4 + [8]) = ($9 + [-12])
	CALL $126($4, $1)
	CALL db_update_i64(*($1 + [24]), (int_64)0, $7, [20])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$13
	$global$0 = ($4 + [16])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [96])
	$global$0 = $2
	*($2) = *($1)
	$3 = CALL $139(($2 + [8]), ($1 + [8]))
	*(($2 + [32])) = *(($1 + [32]))
	*($2 + [24]) = *($1 + [24])
	$4 = CALL $139(($2 + [40]), ($1 + [40]))
	*(($2 + [81])) = *(($1 + [81]))
	*(($2 + [76])) = *(($1 + [76]))
	*(($2 + [68])) = *(($1 + [68]))
	*(($2 + [60])) = *(($1 + [60]))
	*($2 + [52 align=4]) = *($1 + [52 align=4])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*($0) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 $2), (int_32 $1))
	if ( (*($4) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*(($2 + [48])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*(($2 + [16])))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10660])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10660])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10660])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $112(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $112(*($1), *($0))
	$3 = *($0)
	$4 = ($3 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10660])
	$5 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$4 = ($3 + [24])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10660])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$5 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $5
	*($2 + [8]) = *(($3 + [32]))
	if ( ((int_32)(*(($0 + [8])) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10660])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, ($2 + [8]), [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($3 + [40])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10660])
	$1 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($1, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10015])
	
.LABEL $label$5
	$4 = CALL $200($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	$5 = CALL _Znwj([88])
	CALL $55($5)
	*($5 + [76]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [72])
	CALL $114(($3 + [40]), ($3 + [32]))
	*($5 + [80]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $57(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $203($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*(($1 + [76])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10701])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10747])
	
.LABEL $label$2
	$5 = *($2)
	$6 = *($1)
	$7 = CALL $194([8993])
	if ( ($7 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [9847])
	goto $label$9 
	
.LABEL $label$10
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$8 = (int_64)0
	
.LOOP $label$11:
	$9 = *(($7 + [8992]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$12
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$11 }
	$10 = *($2)
	if ( ((int_64)*($5 + [8]) != (int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)4)) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$10 = *($2)
	if ( ((int_64)*($5 + [8]) == (int_64)4) ){ goto $label$6 }
	
.LABEL $label$7
	$7 = CALL $194([8997])
	if ( ($7 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [9847])
	goto $label$15 
	
.LABEL $label$16
	if ( ($7 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$8 = (int_64)0
	
.LOOP $label$17:
	$9 = *(($7 + [8996]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$17 }
	if ( ((int_64)*($10 + [8]) == (int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)4)) ){ goto $label$13 }
	goto $label$5 
	
.LABEL $label$14
	if ( ((int_64)*($10 + [8]) != (int_64)4) ){ goto $label$5 }
	
.LABEL $label$13
	$7 = *($2)
	if ( ((int_64)*($7 + [8]) == (int_64)*(($1 + [48]))) ){ goto $label$19 }
	CALL eosio_assert([0], [11095])
	
.LABEL $label$19
	$8 = ((int_64)*($1 + [40]) + (int_64)*($7))
	*($1 + [40]) = $8
	if ( ((int_64)$8 > (int_64)-4611686018427387904) ){ goto $label$20 }
	CALL eosio_assert([0], [11138])
	$8 = *(($1 + [40]))
	
.LABEL $label$20
	if ( ((int_64)$8 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [11157])
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_64)*($10 + [8]) == (int_64)*(($1 + [16]))) ){ goto $label$21 }
	CALL eosio_assert([0], [11095])
	
.LABEL $label$21
	$8 = ((int_64)*($1 + [8]) + (int_64)*($10))
	*($1 + [8]) = $8
	if ( ((int_64)$8 > (int_64)-4611686018427387904) ){ goto $label$22 }
	CALL eosio_assert([0], [11138])
	$8 = *(($1 + [8]))
	
.LABEL $label$22
	if ( ((int_64)$8 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [11157])
	if ( ((int_64)$6 != (int_64)*($1)) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [10798])
	
.LABEL $label$3
	$9 = $3
	$7 = ($9 + [-80])
	$global$0 = $7
	*($4 + [4]) = $7
	*($4) = $7
	*($4 + [8]) = ($9 + [-7])
	*($4 + [16]) = $4
	*($4 + [24]) = $1
	*($4 + [28]) = ($1 + [8])
	*($4 + [32]) = ($1 + [24])
	*($4 + [36]) = ($1 + [40])
	*($4 + [40]) = ($1 + [56])
	*($4 + [44]) = ($1 + [72])
	CALL $62(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [80]), (int_64)0, $7, [73])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$23 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	$global$0 = ($4 + [48])
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	*($0) = (int_64)0
	$1 = CALL $194([8993])
	if ( ($1 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9847])
	goto $label$3 
	
.LABEL $label$4
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$3 = *(($1 + [8992]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)4
	
.LABEL $label$1
	*($0 + [8]) = (int_64)0
	*(($0 + [16])) = $2
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $4
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $4
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$11 }
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [10481])
	
.LABEL $label$7
	$1 = CALL $194([8993])
	if ( ($1 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9847])
	goto $label$14 
	
.LABEL $label$15
	if ( ($1 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$2 = (int_64)0
	
.LOOP $label$16:
	$3 = *(($1 + [8992]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$17
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$16 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$2 = (int_64)4
	
.LABEL $label$12
	*($0 + [24]) = (int_64)0
	*(($0 + [32])) = $2
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$2 = $4
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$2 = $4
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$22 }
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	CALL eosio_assert([0], [10481])
	
.LABEL $label$18
	$1 = CALL $194([8997])
	if ( ($1 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [9847])
	goto $label$25 
	
.LABEL $label$26
	if ( ($1 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$2 = (int_64)0
	
.LOOP $label$27:
	$3 = *(($1 + [8996]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$28
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$27 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$23 
	
.LABEL $label$24
	$2 = (int_64)4
	
.LABEL $label$23
	*($0 + [40]) = (int_64)0
	*(($0 + [48])) = $2
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$2 = $4
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$2 = $4
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$33 }
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	CALL eosio_assert([0], [10481])
	
.LABEL $label$29
	$1 = CALL $194([8997])
	if ( ($1 <= [8]) ){ goto $label$37 }
	CALL eosio_assert([0], [9847])
	goto $label$36 
	
.LABEL $label$37
	if ( ($1 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	$2 = (int_64)0
	
.LOOP $label$38:
	$3 = *(($1 + [8996]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$39 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$39
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$38 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$34 
	
.LABEL $label$35
	$2 = (int_64)4
	
.LABEL $label$34
	*($0 + [56]) = (int_64)0
	*(($0 + [64])) = $2
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$41:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$43 }
	$2 = $4
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$41 }
	goto $label$42 
	
.LABEL $label$43
	$2 = $4
	
.LOOP $label$44:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$40 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$44 }
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$41 }
	
.LABEL $label$42
	*($0 + [72]) = [0]
	return $0
	
.LABEL $label$40
	CALL eosio_assert([0], [10481])
	*($0 + [72]) = [0]
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *($4 + [4])
	$7 = CALL $194([8993])
	if ( ($7 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9847])
	goto $label$3 
	
.LABEL $label$4
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = (int_64)0
	
.LOOP $label$5:
	$9 = *(($7 + [8992]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$6
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	$10 = *(($4 + [4]))
	if ( ((int_64)*($6 + [8]) != (int_64)$8) ){ goto $label$8 }
	*($1 + [8]) = *($10)
	*(($1 + [16])) = *(($10 + [8]))
	goto $label$7 
	
.LABEL $label$8
	$7 = CALL $194([8997])
	if ( ($7 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9847])
	goto $label$11 
	
.LABEL $label$12
	if ( ($7 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$8 = (int_64)0
	
.LOOP $label$13:
	$9 = *(($7 + [8996]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$14
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$13 }
	if ( ((int_64)*($10 + [8]) != (int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)4)) ){ goto $label$7 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_64)*($10 + [8]) != (int_64)4) ){ goto $label$7 }
	
.LABEL $label$9
	$7 = *(($4 + [4]))
	*($1 + [40]) = *($7)
	*(($1 + [48])) = *(($7 + [8]))
	
.LABEL $label$7
	$9 = $2
	$7 = ($9 + [-80])
	$global$0 = $7
	*($3 + [4]) = $7
	*($3) = $7
	*($3 + [8]) = ($9 + [-7])
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [24])
	*($3 + [36]) = ($1 + [40])
	*($3 + [40]) = ($1 + [56])
	*($3 + [44]) = ($1 + [72])
	CALL $62(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [80]) = CALL db_store_i64(*($5 + [8]), (int_64)-5915276457541632000, *(*($0 + [8])), $8, $7, [73])
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$15 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	$global$0 = ($3 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $173 (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $152 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $194($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $142($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

void .FUNC $153 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $144(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $169(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8891], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $144(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $144(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $150 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $192(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $151 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $193(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $156 ()
{
	return [11444]
}

void .FUNC $157 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL $162(*([0] + [20112]), [8459], $4)
	CALL $161([0])
	CALL abort()
	(unreachable)
}

void .FUNC $154 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $155 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

void .FUNC $158 (int_32 $0)
{
}

int_32 .FUNC $159 (int_32 $0)
{
	int_32 $1
	return $1
}

int_32 .FUNC $179 (int_32 $0, int_32 $1)
{
	return $0
}

int_32 .FUNC $183 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$global$0 = $3
	*($3 + [284]) = $2
	*(($3 + [272])) = (int_64)0
	*(($3 + [264])) = (int_64)0
	*(($3 + [256])) = (int_64)0
	*($3 + [248]) = (int_64)0
	*($3 + [240]) = (int_64)0
	*($3 + [280]) = *($3 + [284])
	$4 = [0]
	$2 = [-1]
	if ( ((int_32)CALL $184([0], $1, ($3 + [280]), ($3 + [80]), ($3 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $159($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) <= (int_32)[0]) ){ goto $label$6 }
	$5 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	*($0) = ($2 & [-33])
	$5 = ($2 & [32])
	if ( *($0 + [48]) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($3 + [80])
	*($0 + [28]) = $3
	*($0 + [20]) = $3
	$7 = *($0 + [44])
	*($0 + [44]) = $3
	$2 = CALL $184($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	if ( ($7 == 0) ){ goto $label$3 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $7
	*($6) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$7 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $7 )
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $184($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	
.LABEL $label$3
	$1 = *($0)
	*($0) = ($1 | $5)
	$1 = ($1 & [32])
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $160($0)
	
.LABEL $label$7
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	$global$0 = ($3 + [288])
	return $2
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$1 = CALL $194([8993])
	if ( ($1 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9847])
	goto $label$3 
	
.LABEL $label$4
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$3 = *(($1 + [8992]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)0
	
.LABEL $label$1
	*($0) = (int_64)50000
	*($0 + [8]) = ((int_64)$2 | (int_64)4)
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $4
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $4
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$11 }
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [10481])
	
.LABEL $label$7
	$1 = CALL $194([8993])
	if ( ($1 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9847])
	goto $label$14 
	
.LABEL $label$15
	if ( ($1 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$2 = (int_64)0
	
.LOOP $label$16:
	$3 = *(($1 + [8992]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$17
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$16 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$12 
	
.LABEL $label$13
	$2 = (int_64)0
	
.LABEL $label$12
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = ((int_64)$2 | (int_64)4)
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$2 = $4
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$2 = $4
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$22 }
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	CALL eosio_assert([0], [10481])
	
.LABEL $label$18
	$1 = CALL $194([8993])
	if ( ($1 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [9847])
	goto $label$25 
	
.LABEL $label$26
	if ( ($1 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$2 = (int_64)0
	
.LOOP $label$27:
	$3 = *(($1 + [8992]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$28
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$27 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$23 
	
.LABEL $label$24
	$2 = (int_64)4
	
.LABEL $label$23
	*($0 + [32]) = (int_64)10000000
	*(($0 + [40])) = $2
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$2 = $4
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$2 = $4
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$33 }
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	CALL eosio_assert([0], [10481])
	
.LABEL $label$29
	$1 = CALL $194([8997])
	if ( ($1 <= [8]) ){ goto $label$37 }
	CALL eosio_assert([0], [9847])
	goto $label$36 
	
.LABEL $label$37
	if ( ($1 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	$2 = (int_64)0
	
.LOOP $label$38:
	$3 = *(($1 + [8996]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$39 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$39
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$38 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$34 
	
.LABEL $label$35
	$2 = (int_64)4
	
.LABEL $label$34
	*($0 + [48]) = (int_64)50000000
	*(($0 + [56])) = $2
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$43 }
	$2 = $4
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$43
	$2 = $4
	
.LOOP $label$44:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$41 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$44 }
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	CALL eosio_assert([0], [10481])
	
.LABEL $label$40
	$1 = CALL $194([8997])
	if ( ($1 <= [8]) ){ goto $label$48 }
	CALL eosio_assert([0], [9847])
	goto $label$47 
	
.LABEL $label$48
	if ( ($1 == 0) ){ goto $label$46 }
	
.LABEL $label$47
	$2 = (int_64)0
	
.LOOP $label$49:
	$3 = *(($1 + [8996]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$50 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$50
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$49 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$45 
	
.LABEL $label$46
	$2 = (int_64)4
	
.LABEL $label$45
	*($0 + [64]) = (int_64)0
	*(($0 + [72])) = $2
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$54 }
	$2 = $4
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$54
	$2 = $4
	
.LOOP $label$55:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$52 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$55 }
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	CALL eosio_assert([0], [10481])
	
.LABEL $label$51
	$1 = CALL $194([8997])
	if ( ($1 <= [8]) ){ goto $label$59 }
	CALL eosio_assert([0], [9847])
	goto $label$58 
	
.LABEL $label$59
	if ( ($1 == 0) ){ goto $label$57 }
	
.LABEL $label$58
	$2 = (int_64)0
	
.LOOP $label$60:
	$3 = *(($1 + [8996]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$61 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$61
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$60 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$56 
	
.LABEL $label$57
	$2 = (int_64)4
	
.LABEL $label$56
	*($0 + [80]) = (int_64)1410065408
	*(($0 + [88])) = $2
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$64:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$63 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$65 }
	$2 = $4
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$64 }
	goto $label$62 
	
.LABEL $label$65
	$2 = $4
	
.LOOP $label$66:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$63 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$66 }
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$64 }
	goto $label$62 
	
.LABEL $label$63
	CALL eosio_assert([0], [10481])
	
.LABEL $label$62
	*($0 + [96]) = [3600]
	$2 = CALL current_time()
	*($0 + [104]) = [0]
	*($0 + [100]) = ((uint_64)$2 / (uint_64)(int_64)1000000)
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*(($1 + [76])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11291])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11336])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [11386])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [80]))
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [112]) = [8896]
	*($4 + [116]) = CALL $194([8896])
	*($4 + [8]) = *($4 + [112])
	$5 = CALL $7(($4 + [120]), ($4 + [8]))
	$6 = CALL $194([8997])
	if ( ($6 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9847])
	goto $label$5 
	
.LABEL $label$6
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$7 = (int_64)0
	
.LOOP $label$7:
	$8 = *(($6 + [8996]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$8
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$7 }
	if ( ((int_64)*($2 + [8]) != (int_64)((int_64)((int_64)$7 << (int_64)8) | (int_64)4)) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_64)*($2 + [8]) == (int_64)4) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = *($5)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [104]) = [8908]
	*($4 + [108]) = CALL $194([8908])
	*($4) = *($4 + [104])
	$9 = *(CALL $7(($4 + [16]), $4))
	*($5) = $9
	
.LABEL $label$1
	$7 = *($0)
	*((($4 + [16]) + [24])) = *(($2 + [8]))
	*($4 + [16]) = $7
	*($4 + [24]) = *($1)
	*($4 + [32]) = *($2)
	$8 = CALL $139((($4 + [16]) + [32]), $3)
	*($4 + [72]) = (int_64)-3617168760277827584
	*($4 + [64]) = $9
	*(($6 = CALL _Znwj([16]))) = $7
	*($6 + [8]) = (int_64)3617214756542218240
	*((($4 + [64]) + [36])) = [0]
	$2 = ($6 + [16])
	*((($4 + [64]) + [24])) = $2
	*(($4 + [84])) = $2
	*($4 + [80]) = $6
	*($4 + [92 align=4]) = (int_64)0
	$6 = *($8)
	$8 = ( *((($4 + [16]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($8 + [32])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($4 + [92])
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$9 }
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $30($8, $6)
	$8 = *(($4 + [96]))
	$6 = *(($4 + [92]))
	goto $label$10 
	
.LABEL $label$11
	$8 = [0]
	$6 = [0]
	
.LABEL $label$10
	*($4 + [132]) = $6
	*($4 + [128]) = $6
	*($4 + [136]) = $8
	*($4 + [144]) = ($4 + [128])
	*($4 + [152]) = ($4 + [16])
	CALL $79(($4 + [152]), ($4 + [144]))
	CALL $32(($4 + [64]))
	$6 = *($4 + [92])
	if ( ($6 == 0) ){ goto $label$12 }
	*(($4 + [96])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$6 = *($4 + [80])
	if ( ($6 == 0) ){ goto $label$13 }
	*(($4 + [84])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$13
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [56])))
	
.LABEL $label$14
	$global$0 = ($4 + [160])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*(($1 + [76])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10701])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10747])
	
.LABEL $label$2
	$5 = *($1)
	$6 = *(*($2) + [4])
	if ( ((int_64)*(($6 + [48])) == (int_64)*(($1 + [48]))) ){ goto $label$3 }
	CALL eosio_assert([0], [11095])
	
.LABEL $label$3
	$7 = ((int_64)*($1 + [40]) + (int_64)*($6 + [40]))
	*($1 + [40]) = $7
	if ( ((int_64)$7 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [11138])
	$7 = *(($1 + [40]))
	
.LABEL $label$4
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [11157])
	
.LABEL $label$5
	$2 = *(*($2) + [4])
	if ( ((int_64)*(($2 + [48])) == (int_64)*(($1 + [64]))) ){ goto $label$6 }
	CALL eosio_assert([0], [11095])
	
.LABEL $label$6
	$7 = ((int_64)*($1 + [56]) + (int_64)*($2 + [40]))
	*($1 + [56]) = $7
	if ( ((int_64)$7 <= (int_64)-4611686018427387904) ){ goto $label$11 }
	if ( ((int_64)$7 >= (int_64)4611686018427387904) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL eosio_assert([0], [11138])
	if ( ((int_64)*(($1 + [56])) < (int_64)4611686018427387904) ){ goto $label$9 }
	
.LABEL $label$10
	CALL eosio_assert([0], [11157])
	if ( ((int_64)$5 != (int_64)*($1)) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((int_64)$5 == (int_64)*($1)) ){ goto $label$7 }
	
.LABEL $label$8
	CALL eosio_assert([0], [10798])
	
.LABEL $label$7
	$3 = $3
	$2 = ($3 + [-80])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($3 + [-7])
	*($4 + [16]) = $4
	*($4 + [24]) = $1
	*($4 + [28]) = ($1 + [8])
	*($4 + [32]) = ($1 + [24])
	*($4 + [36]) = ($1 + [40])
	*($4 + [40]) = ($1 + [56])
	*($4 + [44]) = ($1 + [72])
	CALL $62(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [80]), (int_64)0, $2, [73])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($4 + [48])
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [80]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [11027])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5915276457541632000)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [10973])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10973])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $53(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*(($1 + [76])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10701])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10747])
	
.LABEL $label$2
	*($1 + [72]) = *(*($2))
	$5 = *($1)
	$2 = $3
	$3 = ($2 + [-80])
	$global$0 = $3
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($2 + [-7])
	*($4 + [16]) = $4
	*($4 + [28]) = ($1 + [8])
	*($4 + [24]) = $1
	*($4 + [32]) = ($1 + [24])
	*($4 + [36]) = ($1 + [40])
	*($4 + [40]) = ($1 + [56])
	*($4 + [44]) = ($1 + [72])
	CALL $62(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [80]), (int_64)0, $3, [73])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1 + [16]) = [1]
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = CALL $194([8993])
	if ( ($7 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9847])
	goto $label$5 
	
.LABEL $label$6
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$8 = (int_64)0
	
.LOOP $label$7:
	$9 = *(($7 + [8992]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$8
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	if ( ((int_64)*($6 + [8]) != (int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)4)) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_64)*($6 + [8]) == (int_64)4) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = CALL $194([8993])
	if ( ($7 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9847])
	goto $label$11 
	
.LABEL $label$12
	if ( ($7 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$8 = (int_64)0
	
.LOOP $label$13:
	$9 = *(($7 + [8992]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$14
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$13 }
	$10 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$9 
	
.LABEL $label$10
	$10 = (int_64)4
	
.LABEL $label$9
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$11 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$8 = $11
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$8 = $11
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$6 = ($7 + [1])
	$7 = $6
	if ( $9 ){ goto $label$19 }
	$7 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	CALL eosio_assert([0], [10481])
	
.LABEL $label$15
	*($1 + [8]) = $10
	*($1) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$7 = *($5)
	*($1) = *($7)
	*(($1 + [8])) = *(($7 + [8]))
	
.LABEL $label$1
	$9 = $2
	$7 = ($9 + [-32])
	$global$0 = $7
	*($3 + [4]) = $7
	*($3) = $7
	*($3 + [8]) = ($9 + [-12])
	CALL $126($3, $1)
	$8 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8
	*($1 + [24]) = CALL db_store_i64(*($4 + [8]), (int_64)-6030912129794572288, *(*($0 + [8])), $8), $7, [20])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$20 }
	*(($4 + [16])) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$20
	$global$0 = ($3 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*(($1 + [76])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10701])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10747])
	
.LABEL $label$2
	$5 = *($1)
	$6 = *(*($2) + [4])
	if ( ((int_64)*(($6 + [16])) == (int_64)*(($1 + [16]))) ){ goto $label$3 }
	CALL eosio_assert([0], [11095])
	
.LABEL $label$3
	$7 = ((int_64)*($1 + [8]) + (int_64)*($6 + [8]))
	*($1 + [8]) = $7
	if ( ((int_64)$7 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [11138])
	$7 = *(($1 + [8]))
	
.LABEL $label$4
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [11157])
	
.LABEL $label$5
	$2 = *(*($2) + [4])
	if ( ((int_64)*(($2 + [16])) == (int_64)*(($1 + [32]))) ){ goto $label$6 }
	CALL eosio_assert([0], [11095])
	
.LABEL $label$6
	$7 = ((int_64)*($1 + [24]) + (int_64)*($2 + [8]))
	*($1 + [24]) = $7
	if ( ((int_64)$7 <= (int_64)-4611686018427387904) ){ goto $label$11 }
	if ( ((int_64)$7 >= (int_64)4611686018427387904) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL eosio_assert([0], [11138])
	if ( ((int_64)*(($1 + [24])) < (int_64)4611686018427387904) ){ goto $label$9 }
	
.LABEL $label$10
	CALL eosio_assert([0], [11157])
	if ( ((int_64)$5 != (int_64)*($1)) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((int_64)$5 == (int_64)*($1)) ){ goto $label$7 }
	
.LABEL $label$8
	CALL eosio_assert([0], [10798])
	
.LABEL $label$7
	$3 = $3
	$2 = ($3 + [-80])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($3 + [-7])
	*($4 + [16]) = $4
	*($4 + [24]) = $1
	*($4 + [28]) = ($1 + [8])
	*($4 + [32]) = ($1 + [24])
	*($4 + [36]) = ($1 + [40])
	*($4 + [40]) = ($1 + [56])
	*($4 + [44]) = ($1 + [72])
	CALL $62(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [80]), (int_64)0, $2, [73])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($4 + [48])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [20])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[0]) ){ goto $label$10 }
	CALL eosio_assert([0], [10660])
	$1 = *(($0 + [4]))
	
.LABEL $label$10
	CALL memcpy($1, $4, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL $155(int_32(($3 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$3 = *($0 + [1])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$4 }
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$3 = [0]
	
.LOOP $label$5:
	$4 = ($0 + $3)
	$5 = ($3 + [1])
	$3 = $5
	if ( ((int_32)*(($4 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$4 = ($0 + $5)
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$4 = $0
	
.LABEL $label$1
	$0 = ((uint_32)((int_32)CALL $194($4) * (int_32)[733]) / (uint_32)[1000])
	$6 = ($0 + [1])
	$7 = CALL _Znwj($6)
	$8 = ($7 + $0)
	$0 = [0]
	
.LOOP $label$6:
	*(($7 + $0)) = [0]
	$0 = ($0 + [1])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$17 }
	$3 = [0]
	
.LOOP $label$18:
	$9 = $3
	$10 = $4
	if ( CALL $155(int_32(($0 << [24]) >> [24])) ){ goto $label$16 }
	$0 = *($10)
	$11 = *(($0 + [8192]))
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$0 != (int_32)[49]) ){ goto $label$20 }
	$3 = [0]
	if ( ($9 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$3 = [0]
	$0 = $8
	
.LOOP $label$22:
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$21 }
	$4 = (((int_32)*($0) * (int_32)[58]) + $11)
	*($0) = $4
	$3 = ($3 + [1])
	$0 = ($0 + [-1])
	$11 = ((int_32)$4 / (int_32)[256])
	if ( ((uint_32)($4 + [255]) > (uint_32)[510]) ){ goto $label$22 }
	if ( ($3 <= $9) ){ goto $label$22 }
	goto $label$19 
	
.LABEL $label$21
	if ( $11 ){ goto $label$9 }
	
.LABEL $label$19
	$4 = ($10 + [1])
	$0 = *($10 + [1])
	if ( $0 ){ goto $label$18 }
	goto $label$15 
	
.LABEL $label$17
	$3 = [0]
	goto $label$15 
	
.LABEL $label$16
	$3 = $9
	$4 = $10
	
.LABEL $label$15
	$9 = ($7 + $6)
	$0 = ($4 + [-1])
	
.LOOP $label$23:
	$0 = ($0 + [1])
	if ( CALL $155(*($0)) ){ goto $label$23 }
	$4 = [0]
	if ( *($0) ){ goto $label$13 }
	$4 = ($7 + ($6 - $3))
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$12 }
	$0 = $4
	if ( *($4) ){ goto $label$10 }
	$6 = ([0] - $3)
	$0 = [-1]
	$11 = $8
	
.LOOP $label$24:
	$4 = $11
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$11 }
	$0 = ($0 + [-1])
	$11 = ($4 + [1])
	if ( (*((($4 + $6) + [2])) == 0) ){ goto $label$24 }
	$0 = (($4 - $3) + [2])
	$4 = (($11 - $3) + [1])
	goto $label$10 
	
.LABEL $label$14
	$4 = [0]
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$12
	$0 = $9
	goto $label$10 
	
.LABEL $label$11
	$0 = (($4 - $3) + [2])
	$4 = $0
	
.LABEL $label$10
	$3 = (($9 - $4) + $5)
	$11 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $11) >= (uint_32)$3) ){ goto $label$25 }
	$4 = *($1 + [4])
	$4 = *($1)
	$11 = (*($1 + [4]) - $4)
	$10 = CALL _Znwj($3)
	$12 = ($10 + ($4 - $11))
	$6 = ($12 - $11)
	$3 = ($10 + $3)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$26 }
	CALL memcpy($6, $4, $11)
	$4 = *($1)
	
.LABEL $label$26
	*($1) = $6
	*(($1 + [4])) = $12
	*(($1 + [8])) = $3
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	*($2 + [15]) = [0]
	CALL $2($1, $5, ($2 + [15]))
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$27 }
	$6 = ($8 + [1])
	$9 = ($1 + [8])
	$4 = ($1 + [4])
	
.LOOP $label$28:
	$3 = ($0 + [1])
	$11 = *($4)
	if ( ((int_32)$11 == (int_32)*($9)) ){ goto $label$29 }
	*($11) = *($0)
	*($4) = (*($4) + [1])
	$0 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL $3($1, $0)
	$0 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$28 }
	
.LABEL $label$27
	$4 = [1]
	if ( $7 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $157([8448], [8513], [64], [8616])
	
.LABEL $label$8
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($2 + [16])
	(unreachable)
	return $4
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = [0]
	$3 = *($1 + [8])
	*($2 + [8]) = $3
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$4 = $2
	$5 = $1
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL _Znaj($3)
	*($2) = $4
	$5 = *($1)
	
.LABEL $label$1
	CALL memcpy($4, $5, $3)
	*($2 + [12]) = *($1 + [12])
	*($2 + [16]) = [0]
	$1 = *(($2 + [8]))
	*($2 + [24]) = $1
	$3 = ($0 + [4])
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $2
	$5 = ($2 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL _Znaj($1)
	*($2 + [16]) = $5
	$4 = *($2)
	
.LABEL $label$3
	CALL memcpy($5, $4, $1)
	*($2 + [28]) = *(($2 + [12]))
	$1 = CALL $90([10188], ($2 + [16]), $3)
	if ( (*((($2 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdaPv($3)
	
.LABEL $label$5
	if ( (*(($2 + [8])) <= [9]) ){ goto $label$6 }
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdaPv($3)
	
.LABEL $label$6
	*($0) = ( [10188] ? [0] : $1 )
	$global$0 = ($2 + [32])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3) = [0]
	$4 = *($1 + [8])
	*($3 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $3
	$6 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL _Znaj($4)
	*($3) = $5
	$6 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $6, $4)
	*($3 + [12]) = *($1 + [12])
	*($0) = [0]
	*($3 + [16]) = [0]
	$1 = *(($3 + [8]))
	*($3 + [24]) = $1
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $3
	$5 = ($3 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL _Znaj($1)
	*($3 + [16]) = $5
	$4 = *($3)
	
.LABEL $label$3
	CALL memcpy($5, $4, $1)
	*($3 + [28]) = *(($3 + [12]))
	CALL $89($0, ($3 + [16]))
	if ( (*((($3 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdaPv($1)
	
.LABEL $label$5
	if ( (*(($3 + [8])) <= [9]) ){ goto $label$6 }
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$6 }
	CALL _ZdaPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($1 + [4])
	$5 = ($3 | [1])
	$6 = ($1 + [16])
	$7 = ($1 + [20])
	$8 = ($3 + [8])
	$9 = ($1 + [28])
	$10 = ($1 + [32])
	$11 = ($1 + [24])
	$12 = [1]
	if ( *($1) ){ goto $label$2 }
	$14 = [1]
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$64 
	
.LABEL $label$65
	*($7) = $13
	*($6) = *($11)
	*($11) = $12
	$12 = [1]
	if ( (*($1) == 0) ){ goto $label$31 }
	$14 = [0]
	goto $label$3 
	
.LABEL $label$64
	$12 = ((int_32)*($10) != (int_32)[0])
	$14 = [1]
	goto $label$3 
	
.LABEL $label$63
	if ( (*($2) == 0) ){ goto $label$30 }
	$14 = [2]
	goto $label$3 
	
.LABEL $label$62
	$13 = ((int_32)*(($2 + [32])) != (int_32)[0])
	if ( ((int_32)($12 | $13) == (int_32)[1]) ){ goto $label$29 }
	$14 = [3]
	goto $label$3 
	
.LABEL $label$61
	$13 = *(($2 + [16]))
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	if ( ((int_32)$16 != (int_32)(*(($2 + [20])) - $13)) ){ goto $label$27 }
	$14 = [24]
	goto $label$3 
	
.LABEL $label$60
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$8 }
	$14 = [25]
	goto $label$3 
	
.LABEL $label$59
	$17 = $12
	$14 = [26]
	goto $label$3 
	
.LABEL $label$58
	if ( ((int_32)*($17) != (int_32)*($13)) ){ goto $label$26 }
	$14 = [27]
	goto $label$3 
	
.LABEL $label$57
	$13 = ($13 + [1])
	$17 = ($17 + [1])
	if ( ((int_32)$15 != (int_32)$17) ){ goto $label$7 }
	$14 = [28]
	goto $label$3 
	
.LABEL $label$56
	if ( ((int_32)*($11) != (int_32)*(($2 + [24]))) ){ goto $label$28 }
	$14 = [29]
	goto $label$3 
	
.LABEL $label$55
	if ( ((int_32)*($9) != (int_32)*(($2 + [28]))) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$54
	$13 = [1]
	$14 = [32]
	goto $label$3 
	
.LABEL $label$53
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$4 }
	$14 = [30]
	goto $label$3 
	
.LABEL $label$52
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	$14 = [4]
	goto $label$3 
	
.LABEL $label$51
	*($8) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$25 }
	$14 = [5]
	goto $label$3 
	
.LABEL $label$50
	if ( ((uint_32)$16 > (uint_32)[10]) ){ goto $label$24 }
	$14 = [22]
	goto $label$3 
	
.LABEL $label$49
	*($3) = ($16 << [1])
	$17 = $5
	if ( ((int_32)$12 != (int_32)$15) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$48
	$13 = (($16 + [16]) & [-16])
	$17 = CALL _Znwj($13)
	*($8) = $17
	*($3) = ($13 | [1])
	*($3 + [4]) = $16
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$23 }
	$14 = [7]
	goto $label$3 
	
.LABEL $label$47
	$13 = $17
	$14 = [8]
	goto $label$3 
	
.LABEL $label$46
	*($13) = *($12)
	$13 = ($13 + [1])
	$12 = ($12 + [1])
	if ( ((int_32)$15 != (int_32)$12) ){ goto $label$20 }
	$14 = [9]
	goto $label$3 
	
.LABEL $label$45
	$17 = ($17 + $16)
	$14 = [10]
	goto $label$3 
	
.LABEL $label$44
	*($17) = [0]
	$12 = ($0 + [4])
	$13 = *($12)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [8]))) ){ goto $label$19 }
	$14 = [21]
	goto $label$3 
	
.LABEL $label$43
	*($13) = *($3)
	*(($13 + [8])) = *($8)
	*($8) = [0]
	*($12) = (*($12) + [12])
	*($3) = (int_64)0
	$12 = *($9)
	$13 = *($1)
	if ( $13 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$42
	CALL $88($0, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$18 }
	$14 = [12]
	goto $label$3 
	
.LABEL $label$41
	CALL _ZdlPv(*($8))
	$14 = [13]
	goto $label$3 
	
.LABEL $label$40
	$12 = *($9)
	$13 = *($1)
	if ( ($13 == 0) ){ goto $label$17 }
	$14 = [14]
	goto $label$3 
	
.LABEL $label$39
	CALL void $3((int_32 $4), (int_32 *($11)), (int_32 $12), (int_32 *(($13 & [-2]) + [4])))
	$13 = *($3)
	if ( ((int_32)$13 == (int_32)*($9)) ){ goto $label$14 }
	$14 = [15]
	goto $label$3 
	
.LABEL $label$38
	$12 = *($3 + [4])
	goto $label$13 
	
.LABEL $label$37
	*($3 + [4]) = $12
	*($3) = $12
	$13 = $12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$36
	if ( ((int_32)*($7) != (int_32)$13) ){ goto $label$9 }
	$14 = [19]
	goto $label$3 
	
.LABEL $label$35
	*($10) = [1]
	goto $label$10 
	
.LABEL $label$34
	$12 = *($3 + [4])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$33
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$32
	CALL $138($3)
	
.LABEL $label$31
	$14 = [1]
	goto $label$3 
	
.LABEL $label$30
	$14 = [33]
	goto $label$3 
	
.LABEL $label$29
	$14 = [32]
	goto $label$3 
	
.LABEL $label$28
	$14 = [4]
	goto $label$3 
	
.LABEL $label$27
	$14 = [4]
	goto $label$3 
	
.LABEL $label$26
	$14 = [4]
	goto $label$3 
	
.LABEL $label$25
	$14 = [23]
	goto $label$3 
	
.LABEL $label$24
	$14 = [6]
	goto $label$3 
	
.LABEL $label$23
	$14 = [10]
	goto $label$3 
	
.LABEL $label$22
	$14 = [10]
	goto $label$3 
	
.LABEL $label$21
	$14 = [7]
	goto $label$3 
	
.LABEL $label$20
	$14 = [8]
	goto $label$3 
	
.LABEL $label$19
	$14 = [11]
	goto $label$3 
	
.LABEL $label$18
	$14 = [13]
	goto $label$3 
	
.LABEL $label$17
	$14 = [20]
	goto $label$3 
	
.LABEL $label$16
	$14 = [20]
	goto $label$3 
	
.LABEL $label$15
	$14 = [14]
	goto $label$3 
	
.LABEL $label$14
	$14 = [17]
	goto $label$3 
	
.LABEL $label$13
	$14 = [16]
	goto $label$3 
	
.LABEL $label$12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$11
	$14 = [16]
	goto $label$3 
	
.LABEL $label$10
	$14 = [16]
	goto $label$3 
	
.LABEL $label$9
	$14 = [16]
	goto $label$3 
	
.LABEL $label$8
	$14 = [28]
	goto $label$3 
	
.LABEL $label$7
	$14 = [26]
	goto $label$3 
	
.LABEL $label$6
	$14 = [31]
	goto $label$3 
	
.LABEL $label$5
	$14 = [30]
	goto $label$3 
	
.LABEL $label$4
	$14 = [31]
	goto $label$3 
	$14
	return (unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [8]) = [0]
	$5 = *($3 + [8])
	*($4 + [16]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($4 + [8])
	$7 = $3
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4 + [8]) = $6
	$7 = *($3)
	
.LABEL $label$1
	CALL memcpy($6, $7, $5)
	*($4 + [20]) = *($3 + [12])
	CALL $87($0, ($4 + [8]), [0])
	if ( (*(($4 + [16])) <= [9]) ){ goto $label$3 }
	$3 = *($4 + [8])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdaPv($3)
	
.LABEL $label$3
	*($0 + [16]) = $1
	*($0 + [24]) = $1
	*($0 + [28]) = $2
	*($0 + [32]) = [0]
	*(($0 + [20])) = $1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$8 }
	CALL void ($4 + [24])((int_32 ($0 + [4])), (int_32 $1), (int_32 $2), (int_32 *(($3 & [-2]) + [4])))
	$2 = *($4 + [24])
	if ( ((int_32)$2 == (int_32)*($0 + [28])) ){ goto $label$7 }
	$1 = *($4 + [28])
	goto $label$5 
	
.LABEL $label$8
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	$1 = $2
	goto $label$6 
	
.LABEL $label$7
	$1 = *($4 + [28])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)*(($0 + [20])) != (int_32)$1) ){ goto $label$5 }
	*(($0 + [32])) = [1]
	
.LABEL $label$5
	*(($0 + [20])) = $2
	$2 = ($0 + [24])
	*(($0 + [16])) = *($2)
	*($2) = $1
	
.LABEL $label$4
	$global$0 = ($4 + [32])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [272])
	$global$0 = $3
	$4 = *($1 + [8])
	$5 = *($1 + [4])
	$6 = *($1)
	*($3 + [176]) = [0]
	$7 = *($2 + [8])
	*($3 + [184]) = $7
	$1 = ($6 & [1])
	$4 = ( $4 ? ($1 + [1]) : $1 )
	$1 = ($4 + ( $5 ? uint_32($6 >> [1]) : $1 ))
	if ( ((uint_32)$7 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($3 + [176])
	$5 = $2
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($7)
	*($3 + [176]) = $6
	$5 = *($2)
	
.LABEL $label$1
	CALL memcpy($6, $5, $7)
	*($3 + [188]) = *($2 + [12])
	$1 = CALL $95(($3 + [192]), $4, $1, ($3 + [176]))
	*($3 + [232]) = [0]
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$3 }
	*($3 + [232]) = $2
	if ( ($2 & [1]) ){ goto $label$4 }
	CALL void ($1 + [4])((int_32 (($3 + [232]) | [4])), (int_32 [0]), (int_32 *(($2 & [-2]))))
	goto $label$3 
	
.LABEL $label$4
	CALL memcpy((($3 + [232]) | [4]), ($1 + [4]), [12])
	
.LABEL $label$3
	*($3 + [248]) = *($1 + [16 align=4])
	*($3 + [256]) = *($1 + [24 align=4])
	*($3 + [264]) = *($1 + [32])
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ($2 & [1]) ){ goto $label$6 }
	$2 = *(($2 & [-2]))
	if ( ($2 == 0) ){ goto $label$6 }
	$7 = ($1 + [4])
	CALL void $7((int_32 $7), (int_32 [2]), (int_32 $2))
	
.LABEL $label$6
	*($1) = [0]
	
.LABEL $label$5
	if ( (*(($3 + [184])) <= [9]) ){ goto $label$7 }
	$1 = *($3 + [176])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdaPv($1)
	
.LABEL $label$7
	*(($3 + [116])) = (int_64)0
	*($3 + [112]) = [0]
	*($3 + [96]) = [0]
	*($3 + [124]) = [0]
	*($3 + [128]) = [1]
	*($3 + [136]) = [0]
	*($3 + [160]) = (int_64)0
	*($3 + [168]) = [1]
	*($3 + [152]) = *($3 + [112])
	*($3 + [40]) = [0]
	$1 = *($3 + [232])
	if ( ($1 == 0) ){ goto $label$8 }
	*($3 + [40]) = $1
	if ( ($1 & [1]) ){ goto $label$9 }
	CALL void (($3 + [232]) | [4])((int_32 (($3 + [40]) | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$8 
	
.LABEL $label$9
	CALL memcpy((($3 + [40]) | [4]), (($3 + [232]) | [4]), [12])
	
.LABEL $label$8
	*($3) = [0]
	*($3 + [56]) = *((($3 + [232]) + [16]))
	*($3 + [64]) = *((($3 + [232]) + [24]))
	*($3 + [72]) = *((($3 + [232]) + [32]))
	$1 = *($3 + [136])
	if ( ($1 == 0) ){ goto $label$10 }
	*($3) = $1
	if ( ($1 & [1]) ){ goto $label$11 }
	CALL void (($3 + [136]) | [4])((int_32 ($3 | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$10 
	
.LABEL $label$11
	CALL memcpy(($3 | [4]), (($3 + [136]) | [4]), [12])
	
.LABEL $label$10
	*($3 + [16]) = *((($3 + [136]) + [16]))
	*($3 + [24]) = *((($3 + [136]) + [24]))
	*($3 + [32]) = *((($3 + [136]) + [32]))
	$6 = CALL $96(($3 + [80]), ($3 + [40]), $3)
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ($1 & [1]) ){ goto $label$13 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($3 | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$13
	*($3) = [0]
	
.LABEL $label$12
	$1 = *($3 + [40])
	if ( ($1 == 0) ){ goto $label$14 }
	if ( ($1 & [1]) ){ goto $label$15 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$15 }
	$2 = (($3 + [40]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$15
	*($3 + [40]) = [0]
	
.LABEL $label$14
	$7 = *($0)
	*($0) = *($6)
	*($6) = $7
	$8 = *($6 + [4 align=4])
	$2 = *($0 + [4])
	*($6 + [4]) = $2
	$1 = *($0 + [8])
	*($0 + [4 align=4]) = $8
	*($6 + [8]) = $1
	if ( ($7 == 0) ){ goto $label$16 }
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$1 = ($2 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$20
	$2 = $1
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$19 }
	$1 = *($6)
	goto $label$17 
	
.LABEL $label$18
	$1 = $7
	
.LABEL $label$17
	*(($6 + [4])) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$16
	$1 = *($3 + [136])
	if ( ($1 == 0) ){ goto $label$21 }
	if ( ($1 & [1]) ){ goto $label$22 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$22 }
	$2 = (($3 + [136]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$22
	*($3 + [136]) = [0]
	
.LABEL $label$21
	$1 = *($3 + [232])
	if ( ($1 == 0) ){ goto $label$23 }
	if ( ($1 & [1]) ){ goto $label$24 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$24 }
	$2 = (($3 + [232]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$24
	*($3 + [232]) = [0]
	
.LABEL $label$23
	$global$0 = ($3 + [272])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [272])
	$global$0 = $3
	$4 = *($1 + [8])
	$5 = *($1 + [4])
	$6 = *($1)
	*($3 + [176]) = [0]
	$7 = *($2 + [8])
	*($3 + [184]) = $7
	$1 = ($6 & [1])
	$4 = ( $4 ? ($1 + [1]) : $1 )
	$1 = ($4 + ( $5 ? uint_32($6 >> [1]) : $1 ))
	if ( ((uint_32)$7 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($3 + [176])
	$5 = $2
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($7)
	*($3 + [176]) = $6
	$5 = *($2)
	
.LABEL $label$1
	CALL memcpy($6, $5, $7)
	*($3 + [188]) = *($2 + [12])
	$1 = CALL $85(($3 + [192]), $4, $1, ($3 + [176]))
	*($3 + [232]) = [0]
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$3 }
	*($3 + [232]) = $2
	if ( ($2 & [1]) ){ goto $label$4 }
	CALL void ($1 + [4])((int_32 (($3 + [232]) | [4])), (int_32 [0]), (int_32 *(($2 & [-2]))))
	goto $label$3 
	
.LABEL $label$4
	CALL memcpy((($3 + [232]) | [4]), ($1 + [4]), [12])
	
.LABEL $label$3
	*($3 + [248]) = *($1 + [16 align=4])
	*($3 + [256]) = *($1 + [24 align=4])
	*($3 + [264]) = *($1 + [32])
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ($2 & [1]) ){ goto $label$6 }
	$2 = *(($2 & [-2]))
	if ( ($2 == 0) ){ goto $label$6 }
	$7 = ($1 + [4])
	CALL void $7((int_32 $7), (int_32 [2]), (int_32 $2))
	
.LABEL $label$6
	*($1) = [0]
	
.LABEL $label$5
	if ( (*(($3 + [184])) <= [9]) ){ goto $label$7 }
	$1 = *($3 + [176])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdaPv($1)
	
.LABEL $label$7
	*(($3 + [116])) = (int_64)0
	*($3 + [112]) = [0]
	*($3 + [96]) = [0]
	*($3 + [124]) = [0]
	*($3 + [128]) = [1]
	*($3 + [136]) = [0]
	*($3 + [160]) = (int_64)0
	*($3 + [168]) = [1]
	*($3 + [152]) = *($3 + [112])
	*($3 + [40]) = [0]
	$1 = *($3 + [232])
	if ( ($1 == 0) ){ goto $label$8 }
	*($3 + [40]) = $1
	if ( ($1 & [1]) ){ goto $label$9 }
	CALL void (($3 + [232]) | [4])((int_32 (($3 + [40]) | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$8 
	
.LABEL $label$9
	CALL memcpy((($3 + [40]) | [4]), (($3 + [232]) | [4]), [12])
	
.LABEL $label$8
	*($3) = [0]
	*($3 + [56]) = *((($3 + [232]) + [16]))
	*($3 + [64]) = *((($3 + [232]) + [24]))
	*($3 + [72]) = *((($3 + [232]) + [32]))
	$1 = *($3 + [136])
	if ( ($1 == 0) ){ goto $label$10 }
	*($3) = $1
	if ( ($1 & [1]) ){ goto $label$11 }
	CALL void (($3 + [136]) | [4])((int_32 ($3 | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$10 
	
.LABEL $label$11
	CALL memcpy(($3 | [4]), (($3 + [136]) | [4]), [12])
	
.LABEL $label$10
	*($3 + [16]) = *((($3 + [136]) + [16]))
	*($3 + [24]) = *((($3 + [136]) + [24]))
	*($3 + [32]) = *((($3 + [136]) + [32]))
	$6 = CALL $86(($3 + [80]), ($3 + [40]), $3)
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ($1 & [1]) ){ goto $label$13 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($3 | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$13
	*($3) = [0]
	
.LABEL $label$12
	$1 = *($3 + [40])
	if ( ($1 == 0) ){ goto $label$14 }
	if ( ($1 & [1]) ){ goto $label$15 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$15 }
	$2 = (($3 + [40]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$15
	*($3 + [40]) = [0]
	
.LABEL $label$14
	$7 = *($0)
	*($0) = *($6)
	*($6) = $7
	$8 = *($6 + [4 align=4])
	$2 = *($0 + [4])
	*($6 + [4]) = $2
	$1 = *($0 + [8])
	*($0 + [4 align=4]) = $8
	*($6 + [8]) = $1
	if ( ($7 == 0) ){ goto $label$16 }
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$1 = ($2 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$20
	$2 = $1
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$19 }
	$1 = *($6)
	goto $label$17 
	
.LABEL $label$18
	$1 = $7
	
.LABEL $label$17
	*(($6 + [4])) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$16
	$1 = *($3 + [136])
	if ( ($1 == 0) ){ goto $label$21 }
	if ( ($1 & [1]) ){ goto $label$22 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$22 }
	$2 = (($3 + [136]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$22
	*($3 + [136]) = [0]
	
.LABEL $label$21
	$1 = *($3 + [232])
	if ( ($1 == 0) ){ goto $label$23 }
	if ( ($1 & [1]) ){ goto $label$24 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$24 }
	$2 = (($3 + [232]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$24
	*($3 + [232]) = [0]
	
.LABEL $label$23
	$global$0 = ($3 + [272])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [10609])
	
.LABEL $label$1
	*(($5 = CALL _Znwj([48])) + [36]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($5 + [8])) = *(($3 + [8]))
	*(($5 + [16])) = *(($3 + [16]))
	*(($5 + [24])) = *(($3 + [24]))
	*(($5 + [32])) = *(($3 + [32]))
	CALL memcpy(($4 + [16]), $5, [34])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-5868465776486252544, $2, (int_64)-5868465776486252544, ($4 + [16]), [34])
	*($5 + [40]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-5868465776486252544) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)-5868465776486252543
	
.LABEL $label$2
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-5868465776486252544
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)-5868465776486252544
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $113(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($4 + [64])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*(($1 + [36])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10701])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10747])
	
.LABEL $label$2
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [32])) = *(($3 + [32]))
	*(($1 + [24])) = *(($3 + [24]))
	*(($1 + [16])) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	$3 = ($4 + [-48])
	$global$0 = $3
	CALL memcpy($3, $1, [34])
	CALL db_update_i64(*(($1 + [40])), $2, $3, [34])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-5868465776486252544) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)-5868465776486252543
	
.LABEL $label$3
	$global$0 = $5
}

void .FUNC $182 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$6 = ($5) & [32767]
	if ( ((int_32)$6) == (int_32)[32767]) ){ goto $label$1 }
	if ( $6 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($4, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL $182(($4 + [16]), *($4), *(($4 + [8])), $3)
	$5 = (*($3) + [-120])
	$2 = *($4 + [24])
	$1 = *($4 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($5 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($5 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	*($3) = $5
	
.LABEL $label$1
	*($0) = $1
	*($0 + [8]) = $2
	$global$0 = ($4 + [32])
}

int_32 .FUNC $149 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $142($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $148 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $142($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $145 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $144 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $145($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $194($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $142($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $142($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10015])
	
.LABEL $label$5
	$2 = CALL $200($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10038])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [10038])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	$8 = *($3 + [24])
	*(($5 + [8])) = $8
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	*($3 + [24]) = $8)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $8
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $82(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $203($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4) = [0]
	$5 = *($2 + [8])
	*($4 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = $4
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4) = $6
	$2 = *($2)
	
.LABEL $label$1
	CALL memcpy($6, $2, $5)
	*($4 + [32]) = [0]
	$2 = *(($4 + [8]))
	*($4 + [40]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$4 }
	$5 = $4
	$6 = ($4 + [32])
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL _Znaj($2)
	*($4 + [32]) = $6
	$5 = *($4)
	
.LABEL $label$3
	CALL memcpy($6, $5, $2)
	*($4 + [16]) = [0]
	$2 = *((($4 + [32]) + [8]))
	*($4 + [24]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$6 }
	$5 = ($4 + [16])
	$6 = ($4 + [32])
	goto $label$5 
	
.LABEL $label$6
	$5 = CALL _Znaj($2)
	*($4 + [16]) = $5
	$2 = *((($4 + [16]) + [8]))
	$6 = *($4 + [32])
	
.LABEL $label$5
	CALL memcpy($5, $6, $2)
	*($4 + [28]) = $3
	if ( (*((($4 + [32]) + [8])) <= [9]) ){ goto $label$7 }
	$2 = *($4 + [32])
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdaPv($2)
	
.LABEL $label$7
	$2 = CALL $83($0, $1, ($4 + [16]))
	if ( (*((($4 + [16]) + [8])) <= [9]) ){ goto $label$8 }
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$8 }
	CALL _ZdaPv($5)
	
.LABEL $label$8
	if ( (*(($4 + [8])) <= [9]) ){ goto $label$9 }
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdaPv($5)
	
.LABEL $label$9
	$global$0 = ($4 + [48])
	return $2
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10038])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10038])
	$6 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10038])
	$6 = *($5)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10038])
	$6 = *($5)
	
.LABEL $label$8
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [10038])
	$6 = *($5)
	
.LABEL $label$10
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [10038])
	$6 = *($5)
	
.LABEL $label$12
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$13 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$13
	CALL memcpy($6, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$6 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$14 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$14
	CALL memcpy($6, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$4 = *($0 + [32])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$1) ){ goto $label$15 }
	CALL eosio_assert([0], [10038])
	$1 = *(($0 + [4]))
	
.LABEL $label$15
	CALL memcpy(($2 + [8]), $1, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	*($4) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*(($4 + [36])) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5868465776486252544, (int_64)-5868465776486252544)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $25($0, $4)
	if ( ((int_32)*(($4 + [36])) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$2
	*($3) = $1
	CALL $80($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $81($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10015])
	
.LABEL $label$5
	$4 = CALL $200($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	$5 = CALL _Znwj([128])
	CALL $69($5)
	*($5 + [112]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [80])
	*($3 + [64]) = ($5 + [96])
	*($3 + [68]) = ($5 + [100])
	*($3 + [72]) = ($5 + [104])
	CALL $70(($3 + [40]), ($3 + [32]))
	*($5 + [116]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)6823129357326745600
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = (int_64)6823129357326745600
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($7) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $120(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $203($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [112]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10701])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10747])
	
.LABEL $label$2
	$1 = CALL memcpy($1, *($3), [105])
	$3 = $4
	$4 = ($3 + [-112])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-7])
	*($5 + [16]) = $5
	*($5 + [28]) = ($1 + [16])
	*($5 + [24]) = $1
	*($5 + [32]) = ($1 + [32])
	*($5 + [36]) = ($1 + [48])
	*($5 + [40]) = ($1 + [64])
	*($5 + [44]) = ($1 + [80])
	*($5 + [48]) = ($1 + [96])
	*($5 + [52]) = ($1 + [100])
	*($5 + [56]) = ($1 + [104])
	CALL $119(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [116]), $2, $4, [105])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)6823129357326745600) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)6823129357326745601
	
.LABEL $label$3
	$global$0 = ($5 + [64])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4) = [0]
	$5 = *($2 + [8])
	*($4 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = $4
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4) = $6
	$2 = *($2)
	
.LABEL $label$1
	CALL memcpy($6, $2, $5)
	*($4 + [32]) = [0]
	$2 = *(($4 + [8]))
	*($4 + [40]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$4 }
	$5 = $4
	$6 = ($4 + [32])
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL _Znaj($2)
	*($4 + [32]) = $6
	$5 = *($4)
	
.LABEL $label$3
	CALL memcpy($6, $5, $2)
	*($4 + [16]) = [0]
	$2 = *((($4 + [32]) + [8]))
	*($4 + [24]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$6 }
	$5 = ($4 + [16])
	$6 = ($4 + [32])
	goto $label$5 
	
.LABEL $label$6
	$5 = CALL _Znaj($2)
	*($4 + [16]) = $5
	$2 = *((($4 + [16]) + [8]))
	$6 = *($4 + [32])
	
.LABEL $label$5
	CALL memcpy($5, $6, $2)
	*($4 + [28]) = $3
	if ( (*((($4 + [32]) + [8])) <= [9]) ){ goto $label$7 }
	$2 = *($4 + [32])
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdaPv($2)
	
.LABEL $label$7
	$2 = CALL $84($0, $1, ($4 + [16]))
	if ( (*((($4 + [16]) + [8])) <= [9]) ){ goto $label$8 }
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$8 }
	CALL _ZdaPv($5)
	
.LABEL $label$8
	if ( (*(($4 + [8])) <= [9]) ){ goto $label$9 }
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdaPv($5)
	
.LABEL $label$9
	$global$0 = ($4 + [48])
	return $2
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $108(CALL $107($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10660])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10660])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [176])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [10609])
	
.LABEL $label$1
	$5 = CALL _Znwj([128])
	CALL $69($5)
	*($5 + [112]) = $1
	$5 = CALL memcpy($5, *($3), [105])
	*($4 + [120]) = ($4 + [105])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	*($4 + [128]) = ($4 + [112])
	*($4 + [140]) = ($5 + [16])
	*($4 + [136]) = $5
	*($4 + [144]) = ($5 + [32])
	*($4 + [148]) = ($5 + [48])
	*($4 + [152]) = ($5 + [64])
	*($4 + [156]) = ($5 + [80])
	*($4 + [160]) = ($5 + [96])
	*($4 + [164]) = ($5 + [100])
	*($4 + [168]) = ($5 + [104])
	CALL $119(($4 + [136]), ($4 + [128]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)6823129357326745600, $2, (int_64)6823129357326745600, $4, [105])
	*($5 + [116]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6823129357326745600) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)6823129357326745601
	
.LABEL $label$2
	*($4 + [136]) = $5
	*($4) = (int_64)6823129357326745600
	*($4 + [112]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)6823129357326745600
	*($3 + [16]) = $6
	*($4 + [136]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $120(($1 + [24]), ($4 + [136]), $4, ($4 + [112]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [136])
	*($4 + [136]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($4 + [176])
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10660])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10660])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10660])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $112(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = [0]
	$3 = *($1 + [8])
	*($2 + [8]) = $3
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$4 = $2
	$5 = $1
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL _Znaj($3)
	*($2) = $4
	$5 = *($1)
	
.LABEL $label$1
	CALL memcpy($4, $5, $3)
	*($2 + [12]) = *($1 + [12])
	*($2 + [16]) = [0]
	$1 = *(($2 + [8]))
	*($2 + [24]) = $1
	$3 = ($0 + [4])
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $2
	$5 = ($2 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL _Znaj($1)
	*($2 + [16]) = $5
	$4 = *($2)
	
.LABEL $label$3
	CALL memcpy($5, $4, $1)
	*($2 + [28]) = *(($2 + [12]))
	$1 = CALL $99([10424], ($2 + [16]), $3)
	if ( (*((($2 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdaPv($3)
	
.LABEL $label$5
	if ( (*(($2 + [8])) <= [9]) ){ goto $label$6 }
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdaPv($3)
	
.LABEL $label$6
	*($0) = ( [10424] ? [0] : $1 )
	$global$0 = ($2 + [32])
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3) = [0]
	$4 = *($1 + [8])
	*($3 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $3
	$6 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL _Znaj($4)
	*($3) = $5
	$6 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $6, $4)
	*($3 + [12]) = *($1 + [12])
	*(($1 = CALL _Znwj([16]))) = [0]
	$4 = *(($3 + [8]))
	*($1 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$4 }
	$5 = $3
	$6 = $1
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL _Znaj($4)
	*($1) = $6
	$4 = *(($1 + [8]))
	$5 = *($3)
	
.LABEL $label$3
	CALL memcpy($6, $5, $4)
	*($2) = $1
	*($1 + [12]) = *(($3 + [12]))
	if ( (*(($3 + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdaPv($1)
	
.LABEL $label$5
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4) = [0]
	$5 = *($1 + [8])
	*($4 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = $4
	$7 = $1
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4) = $6
	$7 = *($1)
	
.LABEL $label$1
	CALL memcpy($6, $7, $5)
	$8 = *(($4 + [8]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$10 }
	if ( ((uint_32)$8 >= (uint_32)[9]) ){ goto $label$12 }
	$9 = ($4 + $8)
	if ( ($8 == 0) ){ goto $label$9 }
	
.LOOP $label$13:
	$10 = *($2)
	$5 = $4
	$6 = $8
	
.LOOP $label$14:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$14 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$15 }
	if ( ((int_32)*($5) <= (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$15
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$9 = *($4)
	$12 = ($9 + $8)
	
.LOOP $label$16:
	$10 = *($2)
	$5 = $9
	$6 = $8
	
.LOOP $label$17:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$17 }
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$18 }
	if ( ((int_32)*($5) <= (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$18
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$16 }
	
.LABEL $label$11
	$2 = $3
	
.LABEL $label$10
	if ( ($8 <= [9]) ){ goto $label$8 }
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$8 }
	CALL _ZdaPv($5)
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$7 }
	$5 = *($4)
	
.LOOP $label$19:
	if ( ((int_32)$5 <= (int_32)*($2)) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$19 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	if ( (*($1 + [12]) == 0) ){ goto $label$20 }
	$8 = ($2 + [1])
	goto $label$3 
	
.LABEL $label$20
	$9 = *(($1 + [8]))
	if ( ((uint_32)$9 >= (uint_32)[9]) ){ goto $label$6 }
	$12 = ($1 + $9)
	if ( ($9 == 0) ){ goto $label$5 }
	$8 = $2
	
.LOOP $label$21:
	$10 = *($8)
	$5 = $1
	$6 = $9
	
.LOOP $label$22:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$22 }
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$3 }
	if ( ((int_32)*($5) > (int_32)$10) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$21 }
	goto $label$4 
	
.LABEL $label$7
	$2 = $3
	goto $label$4 
	
.LABEL $label$6
	$12 = *($1)
	$1 = ($12 + $9)
	$8 = $2
	
.LOOP $label$23:
	$10 = *($8)
	$5 = $12
	$6 = $9
	
.LOOP $label$24:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$24 }
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	if ( ((int_32)*($5) > (int_32)$10) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$23 }
	goto $label$4 
	
.LABEL $label$5
	$6 = ((int_32)$12 == (int_32)$1)
	if ( $6 ){ goto $label$25 }
	$7 = ($3 + [-1])
	$5 = *($1)
	$8 = $2
	
.LOOP $label$26:
	if ( ((int_32)$5 > (int_32)*($8)) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	$8 = ($8 + [1])
	if ( ($6 == 0) ){ goto $label$26 }
	goto $label$3 
	
.LABEL $label$25
	$8 = $2
	goto $label$3 
	
.LABEL $label$4
	$8 = $3
	
.LABEL $label$3
	*($0 + [4]) = $8
	*($0) = $2
	$global$0 = ($4 + [16])
}

int_32 .FUNC $95 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [8]) = [0]
	$5 = *($3 + [8])
	*($4 + [16]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($4 + [8])
	$7 = $3
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4 + [8]) = $6
	$7 = *($3)
	
.LABEL $label$1
	CALL memcpy($6, $7, $5)
	*($4 + [20]) = *($3 + [12])
	CALL $97($0, ($4 + [8]), [0])
	if ( (*(($4 + [16])) <= [9]) ){ goto $label$3 }
	$3 = *($4 + [8])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdaPv($3)
	
.LABEL $label$3
	*($0 + [16]) = $1
	*($0 + [24]) = $1
	*($0 + [28]) = $2
	*($0 + [32]) = [0]
	*(($0 + [20])) = $1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$8 }
	CALL void ($4 + [24])((int_32 ($0 + [4])), (int_32 $1), (int_32 $2), (int_32 *(($3 & [-2]) + [4])))
	$2 = *($4 + [24])
	if ( ((int_32)$2 == (int_32)*($0 + [28])) ){ goto $label$7 }
	$1 = *($4 + [28])
	goto $label$5 
	
.LABEL $label$8
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	$1 = $2
	goto $label$6 
	
.LABEL $label$7
	$1 = *($4 + [28])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)*(($0 + [20])) != (int_32)$1) ){ goto $label$5 }
	*(($0 + [32])) = [1]
	
.LABEL $label$5
	*(($0 + [20])) = $2
	$2 = ($0 + [24])
	*(($0 + [16])) = *($2)
	*($2) = $1
	
.LABEL $label$4
	$global$0 = ($4 + [32])
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($1 + [4])
	$5 = ($3 | [1])
	$6 = ($1 + [16])
	$7 = ($1 + [20])
	$8 = ($3 + [8])
	$9 = ($1 + [28])
	$10 = ($1 + [32])
	$11 = ($1 + [24])
	$12 = [1]
	if ( *($1) ){ goto $label$2 }
	$14 = [1]
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$64 
	
.LABEL $label$65
	*($7) = $13
	*($6) = *($11)
	*($11) = $12
	$12 = [1]
	if ( (*($1) == 0) ){ goto $label$31 }
	$14 = [0]
	goto $label$3 
	
.LABEL $label$64
	$12 = ((int_32)*($10) != (int_32)[0])
	$14 = [1]
	goto $label$3 
	
.LABEL $label$63
	if ( (*($2) == 0) ){ goto $label$30 }
	$14 = [2]
	goto $label$3 
	
.LABEL $label$62
	$13 = ((int_32)*(($2 + [32])) != (int_32)[0])
	if ( ((int_32)($12 | $13) == (int_32)[1]) ){ goto $label$29 }
	$14 = [3]
	goto $label$3 
	
.LABEL $label$61
	$13 = *(($2 + [16]))
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	if ( ((int_32)$16 != (int_32)(*(($2 + [20])) - $13)) ){ goto $label$27 }
	$14 = [24]
	goto $label$3 
	
.LABEL $label$60
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$8 }
	$14 = [25]
	goto $label$3 
	
.LABEL $label$59
	$17 = $12
	$14 = [26]
	goto $label$3 
	
.LABEL $label$58
	if ( ((int_32)*($17) != (int_32)*($13)) ){ goto $label$26 }
	$14 = [27]
	goto $label$3 
	
.LABEL $label$57
	$13 = ($13 + [1])
	$17 = ($17 + [1])
	if ( ((int_32)$15 != (int_32)$17) ){ goto $label$7 }
	$14 = [28]
	goto $label$3 
	
.LABEL $label$56
	if ( ((int_32)*($11) != (int_32)*(($2 + [24]))) ){ goto $label$28 }
	$14 = [29]
	goto $label$3 
	
.LABEL $label$55
	if ( ((int_32)*($9) != (int_32)*(($2 + [28]))) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$54
	$13 = [1]
	$14 = [32]
	goto $label$3 
	
.LABEL $label$53
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$4 }
	$14 = [30]
	goto $label$3 
	
.LABEL $label$52
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	$14 = [4]
	goto $label$3 
	
.LABEL $label$51
	*($8) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$25 }
	$14 = [5]
	goto $label$3 
	
.LABEL $label$50
	if ( ((uint_32)$16 > (uint_32)[10]) ){ goto $label$24 }
	$14 = [22]
	goto $label$3 
	
.LABEL $label$49
	*($3) = ($16 << [1])
	$17 = $5
	if ( ((int_32)$12 != (int_32)$15) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$48
	$13 = (($16 + [16]) & [-16])
	$17 = CALL _Znwj($13)
	*($8) = $17
	*($3) = ($13 | [1])
	*($3 + [4]) = $16
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$23 }
	$14 = [7]
	goto $label$3 
	
.LABEL $label$47
	$13 = $17
	$14 = [8]
	goto $label$3 
	
.LABEL $label$46
	*($13) = *($12)
	$13 = ($13 + [1])
	$12 = ($12 + [1])
	if ( ((int_32)$15 != (int_32)$12) ){ goto $label$20 }
	$14 = [9]
	goto $label$3 
	
.LABEL $label$45
	$17 = ($17 + $16)
	$14 = [10]
	goto $label$3 
	
.LABEL $label$44
	*($17) = [0]
	$12 = ($0 + [4])
	$13 = *($12)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [8]))) ){ goto $label$19 }
	$14 = [21]
	goto $label$3 
	
.LABEL $label$43
	*($13) = *($3)
	*(($13 + [8])) = *($8)
	*($8) = [0]
	*($12) = (*($12) + [12])
	*($3) = (int_64)0
	$12 = *($9)
	$13 = *($1)
	if ( $13 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$42
	CALL $88($0, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$18 }
	$14 = [12]
	goto $label$3 
	
.LABEL $label$41
	CALL _ZdlPv(*($8))
	$14 = [13]
	goto $label$3 
	
.LABEL $label$40
	$12 = *($9)
	$13 = *($1)
	if ( ($13 == 0) ){ goto $label$17 }
	$14 = [14]
	goto $label$3 
	
.LABEL $label$39
	CALL void $3((int_32 $4), (int_32 *($11)), (int_32 $12), (int_32 *(($13 & [-2]) + [4])))
	$13 = *($3)
	if ( ((int_32)$13 == (int_32)*($9)) ){ goto $label$14 }
	$14 = [15]
	goto $label$3 
	
.LABEL $label$38
	$12 = *($3 + [4])
	goto $label$13 
	
.LABEL $label$37
	*($3 + [4]) = $12
	*($3) = $12
	$13 = $12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$36
	if ( ((int_32)*($7) != (int_32)$13) ){ goto $label$9 }
	$14 = [19]
	goto $label$3 
	
.LABEL $label$35
	*($10) = [1]
	goto $label$10 
	
.LABEL $label$34
	$12 = *($3 + [4])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$33
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$32
	CALL $138($3)
	
.LABEL $label$31
	$14 = [1]
	goto $label$3 
	
.LABEL $label$30
	$14 = [33]
	goto $label$3 
	
.LABEL $label$29
	$14 = [32]
	goto $label$3 
	
.LABEL $label$28
	$14 = [4]
	goto $label$3 
	
.LABEL $label$27
	$14 = [4]
	goto $label$3 
	
.LABEL $label$26
	$14 = [4]
	goto $label$3 
	
.LABEL $label$25
	$14 = [23]
	goto $label$3 
	
.LABEL $label$24
	$14 = [6]
	goto $label$3 
	
.LABEL $label$23
	$14 = [10]
	goto $label$3 
	
.LABEL $label$22
	$14 = [10]
	goto $label$3 
	
.LABEL $label$21
	$14 = [7]
	goto $label$3 
	
.LABEL $label$20
	$14 = [8]
	goto $label$3 
	
.LABEL $label$19
	$14 = [11]
	goto $label$3 
	
.LABEL $label$18
	$14 = [13]
	goto $label$3 
	
.LABEL $label$17
	$14 = [20]
	goto $label$3 
	
.LABEL $label$16
	$14 = [20]
	goto $label$3 
	
.LABEL $label$15
	$14 = [14]
	goto $label$3 
	
.LABEL $label$14
	$14 = [17]
	goto $label$3 
	
.LABEL $label$13
	$14 = [16]
	goto $label$3 
	
.LABEL $label$12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$11
	$14 = [16]
	goto $label$3 
	
.LABEL $label$10
	$14 = [16]
	goto $label$3 
	
.LABEL $label$9
	$14 = [16]
	goto $label$3 
	
.LABEL $label$8
	$14 = [28]
	goto $label$3 
	
.LABEL $label$7
	$14 = [26]
	goto $label$3 
	
.LABEL $label$6
	$14 = [31]
	goto $label$3 
	
.LABEL $label$5
	$14 = [30]
	goto $label$3 
	
.LABEL $label$4
	$14 = [31]
	goto $label$3 
	$14
	return (unreachable)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3) = [0]
	$4 = *($1 + [8])
	*($3 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $3
	$6 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL _Znaj($4)
	*($3) = $5
	$6 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $6, $4)
	*($3 + [12]) = *($1 + [12])
	*($0) = [0]
	*($3 + [16]) = [0]
	$1 = *(($3 + [8]))
	*($3 + [24]) = $1
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $3
	$5 = ($3 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL _Znaj($1)
	*($3 + [16]) = $5
	$4 = *($3)
	
.LABEL $label$3
	CALL memcpy($5, $4, $1)
	*($3 + [28]) = *(($3 + [12]))
	CALL $98($0, ($3 + [16]))
	if ( (*((($3 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdaPv($1)
	
.LABEL $label$5
	if ( (*(($3 + [8])) <= [9]) ){ goto $label$6 }
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$6 }
	CALL _ZdaPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $0
}

int_32 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3) = [0]
	$4 = *($1 + [8])
	*($3 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $3
	$6 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL _Znaj($4)
	*($3) = $5
	$6 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $6, $4)
	*($3 + [12]) = *($1 + [12])
	*(($1 = CALL _Znwj([16]))) = [0]
	$4 = *(($3 + [8]))
	*($1 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$4 }
	$5 = $3
	$6 = $1
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL _Znaj($4)
	*($1) = $6
	$4 = *(($1 + [8]))
	$5 = *($3)
	
.LABEL $label$3
	CALL memcpy($6, $5, $4)
	*($2) = $1
	*($1 + [12]) = *(($3 + [12]))
	if ( (*(($3 + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdaPv($1)
	
.LABEL $label$5
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$4 }
	$0 = [0]
	
.LOOP $label$5:
	$2 = [0]
	
.LOOP $label$7:
	if ( ((int_32)*((($0 + $2) + [10235])) != (int_32)*(($2 + [10418]))) ){ goto $label$6 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$3 }
	$2 = ($2 + [1])
	if ( ((int_32)($0 + $2) != (int_32)[183]) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[183]) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	CALL $92($0, $1, $2)
	return 
	
.LABEL $label$3
	if ( ((int_32)$0 != (int_32)[183]) ){ goto $label$1 }
	
.LABEL $label$2
	*($1) = [10235]
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$1
	*($1) = ($0 + [10239])
	*($1 + [4]) = [0]
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((uint_32)$2 > (uint_32)[3]) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$15
	$3 = *($0)
	$2 = CALL _Znwj([16])
	$4 = *($3 + [8])
	*($2) = [0]
	*($2 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$10 }
	$0 = $3
	$5 = $2
	goto $label$9 
	
.LABEL $label$14
	$4 = [0]
	
.LOOP $label$16:
	$2 = [0]
	
.LOOP $label$18:
	if ( ((int_32)*((($4 + $2) + [10235])) != (int_32)*(($2 + [10418]))) ){ goto $label$17 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)($4 + $2) != (int_32)[183]) ){ goto $label$18 }
	goto $label$7 
	
.LABEL $label$17
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$16 }
	goto $label$7 
	
.LABEL $label$13
	*($1) = *($0)
	*($0) = [0]
	return 
	
.LABEL $label$12
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$19 }
	if ( (*($2 + [8]) <= [9]) ){ goto $label$20 }
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdaPv($4)
	
.LABEL $label$20
	CALL _ZdlPv($2)
	
.LABEL $label$19
	*($1) = [0]
	return 
	
.LABEL $label$11
	$3 = *($1)
	$4 = [0]
	
.LOOP $label$21:
	$2 = [0]
	
.LOOP $label$23:
	if ( ((int_32)*((($4 + $2) + [10235])) != (int_32)*(($2 + [10418]))) ){ goto $label$22 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$6 }
	$2 = ($2 + [1])
	if ( ((int_32)($4 + $2) != (int_32)[183]) ){ goto $label$23 }
	goto $label$5 
	
.LABEL $label$22
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$21 }
	goto $label$5 
	
.LABEL $label$10
	$5 = CALL _Znaj($4)
	*($2) = $5
	$4 = *(($2 + [8]))
	$0 = *($3)
	
.LABEL $label$9
	CALL memcpy($5, $0, $4)
	$4 = *($3 + [12])
	*($1) = $2
	*($2 + [12]) = $4
	return 
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$4 }
	
.LABEL $label$7
	*($1) = [10235]
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = [10235]
	$5 = [0]
	$4 = *($3)
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	*($1) = ($4 + [10239])
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$3
	$2 = ($4 + [10239])
	$5 = [0]
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ($3 + [1])
	
.LOOP $label$25:
	if ( ((int_32)($4 & [255]) != (int_32)*($2)) ){ goto $label$24 }
	$2 = ($2 + [1])
	$4 = *($3)
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$25 }
	goto $label$1 
	
.LABEL $label$24
	$5 = $4
	
.LABEL $label$1
	if ( ((int_32)($5 & [255]) != (int_32)*($2)) ){ goto $label$26 }
	*($1) = *($0)
	return 
	
.LABEL $label$26
	*($1) = [0]
	$2
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL $94($0, *($1), $2, $3)
}

void .FUNC $138 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $200($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11440])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $200($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $203($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $198(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [11440])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $198(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $203($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $202 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11476]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11480])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11476]) = [1]
	$2 = ($2 << [16])
	*([0] + [11480]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11480])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11480]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11476]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11476]) = [1]
	$3 = ($3 << [16])
	*([0] + [11480]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11480])
	
.LABEL $label$10
	*([0] + [11480]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $203 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19868])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19676]
	$3 = (((int_32)$1 * (int_32)[12]) + [19676])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $200 (int_32 $0)
{
	return CALL $201([11484], $0)
}

int_32 .FUNC $201 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $202($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [8530])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $181 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL $180([20224], *([0] + [20]))
	$1 = [0]
	
.LOOP $label$4:
	if ( ((int_32)*(($1 + [20128])) == (int_32)$0) ){ goto $label$3 }
	$2 = [87]
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[87]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = [20224]
	
.LOOP $label$5:
	$0 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $0 ){ goto $label$5 }
	$1 = $3
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	return CALL $180($3, *([0] + [20]))
	return .LABEL $label$1
}

int_32 .FUNC $129 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = [1]
	$4 = ($1 - $0)
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$20 }
	goto $label$2 
	
.LABEL $label$21
	$5 = *($0)
	$4 = ($1 + [-1])
	$2 = *($4)
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$2 }
	*($0) = $2
	*($4) = $5
	return [1]
	
.LABEL $label$20
	$2 = *($0 + [2])
	$5 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$16 }
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$13 }
	*($0) = $2
	*(($0 + [2])) = $5
	goto $label$12 
	
.LABEL $label$19
	$5 = ($1 + [-1])
	$4 = *($5)
	$6 = *($0)
	$2 = *($0 + [1])
	if ( ((int_32)$2 >= (int_32)$6) ){ goto $label$15 }
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$8 }
	*($0) = $4
	*($5) = $6
	return [1]
	
.LABEL $label$18
	CALL $128($0, ($0 + [1]), ($0 + [2]), ($0 + [3]), ($1 + [-1]), $2)
	return [1]
	
.LABEL $label$17
	$6 = ($1 + [-1])
	$2 = *($0 + [2])
	$5 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$14 }
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$7 }
	*($0) = $2
	*(($0 + [2])) = $5
	goto $label$6 
	
.LABEL $label$16
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$10 }
	*(($0 + [2])) = $4
	*(($6 = ($0 + [1]))) = $2
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$11 }
	*($0) = $2
	*($6) = $5
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$9 }
	goto $label$2 
	
.LABEL $label$15
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$2 }
	$3 = [1]
	*(($6 = ($0 + [1]))) = $4
	*($5) = $2
	$2 = *($0)
	$4 = *($6)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$2 }
	*($0) = $4
	*(($0 + [1])) = $2
	return [1]
	
.LABEL $label$14
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$4 }
	*(($0 + [2])) = $4
	*(($7 = ($0 + [1]))) = $2
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$5 }
	*($0) = $2
	*($7) = $5
	$5 = *($6)
	if ( ((int_32)$5 < (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$13
	*($0) = $4
	*(($4 = ($0 + [1]))) = $5
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$10 }
	*(($0 + [2])) = $5
	*($4) = $2
	
.LABEL $label$12
	$4 = $5
	
.LABEL $label$11
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$9 }
	goto $label$2 
	
.LABEL $label$10
	$4 = $2
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$9
	$8 = [0]
	$9 = [0]
	
.LOOP $label$22:
	$5 = *($7)
	if ( ((int_32)$5 >= (int_32)int_32(($4 << [24]) >> [24])) ){ goto $label$23 }
	$3 = $8
	
.LOOP $label$25:
	*((($2 = ($0 + $3)) + $6)) = $4
	if ( ((int_32)$3 == (int_32)[-2]) ){ goto $label$24 }
	$3 = ($3 + [-1])
	$4 = *(($2 + [1]))
	if ( ((int_32)$5 < (int_32)$4) ){ goto $label$25 }
	*((($0 + $3) + $6)) = $5
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[8]) ){ goto $label$23 }
	goto $label$1 
	
.LABEL $label$24
	*($0) = $5
	$9 = ($9 + [1])
	if ( ((int_32)$9 == (int_32)[8]) ){ goto $label$1 }
	
.LABEL $label$23
	$3 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$2 }
	$8 = ($8 + [1])
	$4 = *($7)
	$7 = $2
	goto $label$22 
	
.LABEL $label$8
	*($0) = $2
	$3 = [1]
	*(($0 + [1])) = $6
	$4 = *($5)
	if ( ((int_32)$4 >= (int_32)$6) ){ goto $label$2 }
	*(($0 + [1])) = $4
	*($5) = $6
	return [1]
	
.LABEL $label$7
	*($0) = $4
	*(($4 = ($0 + [1]))) = $5
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$4 }
	*(($0 + [2])) = $5
	*($4) = $2
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	$5 = *($6)
	if ( ((int_32)$5 >= (int_32)$4) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$4 = $2
	$5 = *($6)
	if ( ((int_32)$5 >= (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	*(($2 = ($0 + [2]))) = $5
	*($6) = $4
	$3 = [1]
	$5 = *(($0 + [1]))
	$4 = *($2)
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$2 }
	*($2) = $5
	$3 = [1]
	*(($0 + [1])) = $4
	$2 = *($0)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$2 }
	*($0) = $4
	*(($0 + [1])) = $2
	return [1]
	
.LABEL $label$2
	return $3
	
.LABEL $label$1
	$4
	return ((int_32)($7 + [1]) == (int_32)$1)
}

int_32 .FUNC $128 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = *($2)
	$8 = *($0)
	$7 = *($1)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$5 }
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$4 }
	*($0) = $6
	*($2) = $8
	$9 = [1]
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$2 }
	*($1) = $6
	*($2) = $7
	$9 = [1]
	$8 = *($0)
	$6 = *($1)
	if ( ((int_32)$6 >= (int_32)$8) ){ goto $label$1 }
	*($0) = $6
	*($1) = $8
	$7 = *($2)
	$9 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($0) = $7
	*($1) = $8
	$9 = [1]
	$7 = *($2)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$1 }
	*($1) = $7
	*($2) = $8
	$9 = [2]
	
.LABEL $label$3
	$7 = $8
	goto $label$1 
	
.LABEL $label$2
	$7 = $6
	
.LABEL $label$1
	$6 = *($3)
	if ( ((int_32)$6 >= (int_32)int_32(($7 << [24]) >> [24])) ){ goto $label$10 }
	*($2) = $6
	*($3) = $7
	$6 = *($1)
	$7 = *($2)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$9 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$8 }
	*($0) = $7
	*($1) = $6
	$9 = ($9 + [3])
	
.LABEL $label$10
	$6 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$9 = ($9 + [1])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$9 = ($9 + [2])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$7
	return $9
	
.LABEL $label$6
	*($3) = $7
	*($4) = $6
	$6 = *($2)
	$7 = *($3)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$13 }
	*($2) = $7
	*($3) = $6
	$3 = *($1)
	$7 = *($2)
	if ( ((int_32)$7 >= (int_32)$3) ){ goto $label$12 }
	*($1) = $7
	*($2) = $3
	$7 = *($0)
	$2 = *($1)
	if ( ((int_32)$2 >= (int_32)$7) ){ goto $label$11 }
	*($0) = $2
	*($1) = $7
	return ($9 + [4])
	
.LABEL $label$13
	return ($9 + [1])
	
.LABEL $label$12
	return ($9 + [2])
	
.LABEL $label$11
	return ($9 + [3])
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	$4 = ($global$0 - [496])
	$global$0 = $4
	$5 = [1]
	if ( CALL has_auth(*($0)) ){ goto $label$1 }
	*($4 + [400]) = [9234]
	*($4 + [404]) = CALL $194([9234])
	*($4 + [24]) = *($4 + [400])
	$5 = CALL has_auth(*(CALL $7(($4 + [408]), ($4 + [24]))))
	
.LABEL $label$1
	CALL eosio_assert($5, [9247])
	CALL $39($0, $2, $3)
	$6 = ($0 + [280])
	$7 = *($1)
	$3 = *(($0 + [308]))
	$8 = *(($0 + [304]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$5:
	$5 = ($3 + [-24])
	$9 = *($5)
	if ( ((int_64)*($9) == (int_64)$7) ){ goto $label$4 }
	$3 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$3 }
	if ( ((int_32)*(($9 + [92])) == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert([0], [9964])
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	$5 = CALL db_find_i64(*($6), *(($0 + [288])), (int_64)4229865212519383040, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $33($6, $5)
	if ( ((int_32)*($9 + [92]) == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$2
	$3 = [0]
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9277])
	$7 = CALL current_time()
	CALL eosio_assert(((int_64)*($9 + [24]) != (int_64)((int_64)((uint_64)$7 / (uint_64)(int_64)1000000) & (int_64)4294967295)), [9296])
	$10 = (($4 + [384]) | [4])
	*($4 + [384]) = $10
	*($4 + [388 align=4]) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [368]) = [0]
	*($4 + [360]) = (int_64)0
	$11 = ($9 + [40])
	CALL $27($0, $11, ($4 + [384]), ($4 + [376]), ($4 + [360]), ($4 + [352]))
	$12 = CALL $40($0, [9320], ($9 + [32]), $1, $2)
	$8 = [0]
	$2 = *(($0 + [268]))
	$5 = *($0 + [264])
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	$13 = ($2 + [-12])
	$2 = [0]
	$8 = [0]
	
.LOOP $label$7:
	$2 = (*(($5 + [8])) + $2)
	$14 = ($12 <= $2)
	$8 = ( $5 ? $8 : $14 )
	if ( $14 ){ goto $label$6 }
	$14 = ((int_32)$13 != (int_32)$5)
	$5 = ($5 + [12])
	if ( $14 ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9324])
	$15 = *(($9 + [64]))
	$7 = (uint_64)$15 >> (uint_64)(int_64)8)
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$16 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$7 = $16
	$5 = $3
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$7 = $16
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$2 = ($3 + [1])
	$3 = $2
	if ( $5 ){ goto $label$12 }
	$3 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [10481])
	
.LABEL $label$8
	$7 = (CASTING uint_64)(uint_32 uint_32(*($8) >> [1]))
	$5 = *($4 + [388])
	if ( ($5 == 0) ){ goto $label$15 }
	$3 = $10
	$16 = *($5 + [16])
	if ( ((uint_64)$16 > (uint_64)$7) ){ goto $label$14 }
	$17 = [2]
	goto $label$13 
	
.LABEL $label$15
	$5 = $10
	$3 = $10
	$17 = [3]
	goto $label$13 
	
.LABEL $label$14
	$17 = [152]
	
.LABEL $label$13
	
.LOOP $label$16:
	goto $label$284 
	
.LABEL $label$286
	if ( ((uint_64)$16 >= (uint_64)$7) ){ goto $label$128 }
	$17 = [151]
	goto $label$16 
	
.LABEL $label$285
	$3 = ($5 + [4])
	$2 = *($5 + [4])
	if ( ($2 == 0) ){ goto $label$130 }
	$17 = [0]
	goto $label$16 
	
.LABEL $label$284
	$5 = $3
	$17 = [1]
	goto $label$16 
	
.LABEL $label$283
	$3 = $5
	$5 = $2
	$16 = *($5 + [16])
	if ( ((uint_64)$16 <= (uint_64)$7) ){ goto $label$131 }
	$17 = [152]
	goto $label$16 
	
.LABEL $label$282
	$2 = *($5)
	if ( $2 ){ goto $label$129 }
	$17 = [153]
	goto $label$16 
	
.LABEL $label$281
	$3 = $5
	$2 = *($3)
	if ( $2 ){ goto $label$125 }
	goto $label$126 
	
.LABEL $label$280
	$2 = *($3)
	if ( $2 ){ goto $label$127 }
	$17 = [148]
	goto $label$16 
	
.LABEL $label$279
	*(($2 = CALL _Znwj([32]))) = (int_64)0
	*($2 + [8]) = $5
	*($3) = $2
	*($2 + [24]) = (int_64)0
	*($2 + [16]) = $7
	$5 = $2
	$14 = *(*($4 + [384]))
	if ( ($14 == 0) ){ goto $label$17 }
	$17 = [149]
	goto $label$16 
	
.LABEL $label$278
	*($4 + [384]) = $14
	$5 = *($3)
	$17 = [150]
	goto $label$16 
	
.LABEL $label$277
	CALL $41(*($4 + [388]), $5)
	*(($5 = ($4 + [392]))) = (*($5) + [1])
	$17 = [4]
	goto $label$16 
	
.LABEL $label$276
	if ( (int_64)(*(($2 + [24])) == 0) ){ goto $label$124 }
	$17 = [5]
	goto $label$16 
	
.LABEL $label$275
	$7 = (CASTING uint_64)(uint_32 uint_32(*($8) >> [1]))
	$5 = *($4 + [388])
	if ( ($5 == 0) ){ goto $label$123 }
	$17 = [6]
	goto $label$16 
	
.LABEL $label$274
	$16 = *($5 + [16])
	if ( ((uint_64)$16 > (uint_64)$7) ){ goto $label$122 }
	$17 = [7]
	goto $label$16 
	
.LABEL $label$273
	if ( ((uint_64)$16 >= (uint_64)$7) ){ goto $label$120 }
	$17 = [141]
	goto $label$16 
	
.LABEL $label$272
	$10 = ($5 + [4])
	$3 = *($5 + [4])
	if ( ($3 == 0) ){ goto $label$121 }
	$17 = [142]
	goto $label$16 
	
.LABEL $label$271
	$5 = $10
	$17 = [143]
	goto $label$16 
	
.LABEL $label$270
	$10 = $5
	$5 = $3
	$16 = *($5 + [16])
	if ( ((uint_64)$16 <= (uint_64)$7) ){ goto $label$132 }
	$17 = [144]
	goto $label$16 
	
.LABEL $label$269
	$3 = *($5)
	if ( $3 ){ goto $label$18 }
	$17 = [145]
	goto $label$16 
	
.LABEL $label$268
	$10 = $5
	$3 = *($10)
	if ( $3 ){ goto $label$117 }
	goto $label$118 
	
.LABEL $label$267
	$18 = (int_64)0
	goto $label$101 
	
.LABEL $label$266
	$5 = $10
	$17 = [8]
	goto $label$16 
	
.LABEL $label$265
	$3 = *($10)
	if ( $3 ){ goto $label$119 }
	$17 = [138]
	goto $label$16 
	
.LABEL $label$264
	*(($3 = CALL _Znwj([32]))) = (int_64)0
	*($3 + [8]) = $5
	*($10) = $3
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = $7
	$5 = $3
	$2 = *(*($4 + [384]))
	if ( ($2 == 0) ){ goto $label$19 }
	$17 = [139]
	goto $label$16 
	
.LABEL $label$263
	*($4 + [384]) = $2
	$5 = *($10)
	$17 = [140]
	goto $label$16 
	
.LABEL $label$262
	CALL $41(*($4 + [388]), $5)
	*(($5 = ($4 + [392]))) = (*($5) + [1])
	$17 = [9]
	goto $label$16 
	
.LABEL $label$261
	$15 = *(($9 + [64]))
	$19 = *(($3 + [24]))
	if ( (uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$116 }
	$17 = [10]
	goto $label$16 
	
.LABEL $label$260
	CALL eosio_assert([0], [10432])
	$17 = [11]
	goto $label$16 
	
.LABEL $label$259
	$5 = [0]
	$16 = (uint_64)$15 >> (uint_64)(int_64)8
	$7 = $16)
	$17 = [12]
	goto $label$16 
	
.LABEL $label$258
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$111 }
	$17 = [132]
	goto $label$16 
	
.LABEL $label$257
	$18 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$17 = [133]
	goto $label$16 
	
.LABEL $label$256
	$7 = $18
	$3 = $5
	$5 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$113 }
	goto $label$112 
	
.LABEL $label$255
	$7 = $18
	$17 = [135]
	goto $label$16 
	
.LABEL $label$254
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$110 }
	$17 = [136]
	goto $label$16 
	
.LABEL $label$253
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$3 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $3 ){ goto $label$20 }
	$17 = [137]
	goto $label$16 
	
.LABEL $label$252
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$115 }
	goto $label$114 
	
.LABEL $label$251
	CALL eosio_assert([0], [10481])
	$17 = [14]
	goto $label$16 
	
.LABEL $label$250
	CALL __multi3(($4 + [8]), *($8 + [4]), (int_64)0, $19, (int_64)$19 >> (int_64)63))
	$7 = *(($4 + [16]))
	$18 = *($4 + [8])
	if ( (( (uint_64)($18 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ) == 0) ){ goto $label$109 }
	$17 = [130]
	goto $label$16 
	
.LABEL $label$249
	if ( ( ((uint_64)$18 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ) ){ goto $label$108 }
	$17 = [131]
	goto $label$16 
	
.LABEL $label$248
	CALL eosio_assert([0], [10584])
	goto $label$107 
	
.LABEL $label$247
	CALL eosio_assert([0], [10560])
	$17 = [16]
	goto $label$16 
	
.LABEL $label$246
	$3 = [0]
	if ( ((uint_64)((int_64)$18 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$106 }
	$17 = [121]
	goto $label$16 
	
.LABEL $label$245
	$5 = [0]
	$17 = [122]
	goto $label$16 
	
.LABEL $label$244
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$17 = [124]
	goto $label$16 
	
.LABEL $label$243
	$7 = (uint_64)$16 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$16 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$17 = [125]
	goto $label$16 
	
.LABEL $label$242
	$16 = $7
	$3 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$241
	$16 = $7
	$17 = [127]
	goto $label$16 
	
.LABEL $label$240
	if ( ((int_64)((int_64)$16 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$17 = [128]
	goto $label$16 
	
.LABEL $label$239
	$16 = (uint_64)$16 >> (uint_64)(int_64)8)
	$3 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $3 ){ goto $label$22 }
	$17 = [129]
	goto $label$16 
	
.LABEL $label$238
	$3 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$237
	$3 = [0]
	$17 = [17]
	goto $label$16 
	
.LABEL $label$236
	CALL eosio_assert($3, [9345])
	$17 = [18]
	goto $label$16 
	
.LABEL $label$235
	*($4 + [256]) = *($1)
	$12 = CALL $139((($4 + [256]) + [8]), ($4 + [360]))
	*($4 + [280]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($4 + [288]) = *(($9 + [32]))
	$2 = CALL $139(($4 + [296]), $11)
	$7 = *(($9 + [64]))
	$16 = *($9 + [56])
	$5 = *($8)
	*(($4 + [336])) = $15
	*((($4 + [256]) + [64])) = $7
	*($4 + [308]) = $5
	*($4 + [328]) = $18
	*($4 + [312]) = $16
	*($4 + [344]) = [0]
	$5 = CALL $194([8993])
	if ( ($5 <= [8]) ){ goto $label$100 }
	$17 = [120]
	goto $label$16 
	
.LABEL $label$234
	CALL eosio_assert([0], [9847])
	goto $label$98 
	
.LABEL $label$233
	if ( ($5 == 0) ){ goto $label$99 }
	$17 = [20]
	goto $label$16 
	
.LABEL $label$232
	$7 = (int_64)0
	$17 = [21]
	goto $label$16 
	
.LABEL $label$231
	$3 = *(($5 + [8992]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$96 }
	$17 = [118]
	goto $label$16 
	
.LABEL $label$230
	CALL eosio_assert([0], [9892])
	$17 = [22]
	goto $label$16 
	
.LABEL $label$229
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$97 }
	$17 = [23]
	goto $label$16 
	
.LABEL $label$228
	$16 = ((int_64)$7 << (int_64)8)
	$17 = [24]
	goto $label$16 
	
.LABEL $label$227
	$7 = *(($9 + [64]))
	CALL $26(($4 + [240]), ( (int_64)6138663591592764928 ? (int_64)-3605821319196013280 : ((int_64)$7 == (int_64)((int_64)$16 | (int_64)4)) ), *($0), (uint_64)$7 >> (uint_64)(int_64)8))
	$7 = CALL current_time()
	*(($4 + [204])) = (int_64)0
	*(($4 + [220])) = (int_64)0
	*(($4 + [228])) = (int_64)0
	*($4 + [188]) = [0]
	*($4 + [192]) = [0]
	*($4 + [196 align=4]) = (int_64)0
	*($4 + [212 align=4]) = (int_64)0
	*($4 + [176]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	if ( ((int_64)*($4 + [248]) == (int_64)$15) ){ goto $label$94 }
	$17 = [25]
	goto $label$16 
	
.LABEL $label$226
	CALL eosio_assert([0], [10501])
	$17 = [26]
	goto $label$16 
	
.LABEL $label$225
	$8 = ($4 + [308])
	$14 = (($4 + [256]) + [24])
	if ( ((int_64)*($4 + [240]) <= (int_64)$18) ){ goto $label$93 }
	$17 = [48]
	goto $label$16 
	
.LABEL $label$224
	*(($4 + [344])) = [1]
	if ( ((int_64)$18 < (int_64)1) ){ goto $label$91 }
	$17 = [49]
	goto $label$16 
	
.LABEL $label$223
	$5 = CALL $194([8993])
	if ( ($5 <= [8]) ){ goto $label$73 }
	$17 = [117]
	goto $label$16 
	
.LABEL $label$222
	CALL eosio_assert([0], [9847])
	goto $label$71 
	
.LABEL $label$221
	*(($4 + [344])) = [0]
	goto $label$92 
	
.LABEL $label$220
	$16 = (int_64)0
	goto $label$95 
	
.LABEL $label$219
	if ( ($5 == 0) ){ goto $label$72 }
	$17 = [51]
	goto $label$16 
	
.LABEL $label$218
	$7 = (int_64)0
	$17 = [52]
	goto $label$16 
	
.LABEL $label$217
	$3 = *(($5 + [8992]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$69 }
	$17 = [115]
	goto $label$16 
	
.LABEL $label$216
	CALL eosio_assert([0], [9892])
	$17 = [53]
	goto $label$16 
	
.LABEL $label$215
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$70 }
	$17 = [54]
	goto $label$16 
	
.LABEL $label$214
	if ( ((int_64)$15 != (int_64)((int_64)((int_64)$7 << (int_64)8) | (int_64)4)) ){ goto $label$65 }
	$17 = [100]
	goto $label$16 
	
.LABEL $label$213
	$5 = ($0 + [112])
	if ( ((int_64)*(($0 + [120])) == (int_64)$15) ){ goto $label$33 }
	$17 = [101]
	goto $label$16 
	
.LABEL $label$212
	CALL eosio_assert([0], [10501])
	$17 = [102]
	goto $label$16 
	
.LABEL $label$211
	if ( ((int_64)*($5) > (int_64)$18) ){ goto $label$68 }
	$17 = [103]
	goto $label$16 
	
.LABEL $label$210
	$3 = ($0 + [128])
	$7 = *($3)
	$20 = *(($0 + [136]))
	if ( ((int_64)*(($4 + [248])) == (int_64)$20) ){ goto $label$32 }
	$17 = [104]
	goto $label$16 
	
.LABEL $label$209
	CALL eosio_assert([0], [10882])
	$17 = [105]
	goto $label$16 
	
.LABEL $label$208
	$19 = (int_64)
	if ( ((int_64)$19($7 - *($4 + [240]))) <= (int_64)-4611686018427387904) ){ goto $label$31 }
	$17 = [113]
	goto $label$16 
	
.LABEL $label$207
	if ( ((int_64)$19 < (int_64)4611686018427387904) ){ goto $label$30 }
	$17 = [114]
	goto $label$16 
	
.LABEL $label$206
	CALL eosio_assert([0], [10952])
	goto $label$29 
	
.LABEL $label$205
	if ( ((int_64)$15 == (int_64)((int_64)0 | (int_64)4)) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$204
	CALL eosio_assert([0], [10930])
	$17 = [107]
	goto $label$16 
	
.LABEL $label$203
	$13 = ($9 + [24])
	$7 = *($13)
	*(($3 + [8])) = *((($4 + [240]) + [8]))
	*($3) = *($4 + [240])
	$3 = ($0 + [212])
	$16 = *($3)
	*($3) = *($13)
	if ( ((uint_64)(int_64))($7 - $16) > (uint_64)*(($0 + [208]))) ){ goto $label$28 }
	$17 = [108]
	goto $label$16 
	
.LABEL $label$202
	if ( ((int_64)$20 == (int_64)*(($0 + [152]))) ){ goto $label$27 }
	$17 = [109]
	goto $label$16 
	
.LABEL $label$201
	CALL eosio_assert([0], [10501])
	$17 = [110]
	goto $label$16 
	
.LABEL $label$200
	if ( ((int_64)$19 < (int_64)*(($0 + [144]))) ){ goto $label$26 }
	$17 = [111]
	goto $label$16 
	
.LABEL $label$199
	*(($0 + [216])) = [1]
	$17 = [112]
	goto $label$16 
	
.LABEL $label$198
	CALL $42(($0 + [72]), $5, *($0))
	$17 = [55]
	goto $label$16 
	
.LABEL $label$197
	$5 = CALL $194([8997])
	if ( ($5 <= [8]) ){ goto $label$64 }
	$17 = [99]
	goto $label$16 
	
.LABEL $label$196
	CALL eosio_assert([0], [9847])
	goto $label$62 
	
.LABEL $label$195
	if ( ($5 == 0) ){ goto $label$63 }
	$17 = [57]
	goto $label$16 
	
.LABEL $label$194
	$7 = (int_64)0
	$17 = [58]
	goto $label$16 
	
.LABEL $label$193
	$3 = *(($5 + [8996]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$60 }
	$17 = [97]
	goto $label$16 
	
.LABEL $label$192
	CALL eosio_assert([0], [9892])
	$17 = [59]
	goto $label$16 
	
.LABEL $label$191
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$61 }
	$17 = [60]
	goto $label$16 
	
.LABEL $label$190
	if ( ((int_64)$15 != (int_64)((int_64)((int_64)$7 << (int_64)8) | (int_64)4)) ){ goto $label$56 }
	$17 = [82]
	goto $label$16 
	
.LABEL $label$189
	if ( ((int_64)*(($0 + [168])) == (int_64)$15) ){ goto $label$41 }
	$17 = [83]
	goto $label$16 
	
.LABEL $label$188
	CALL eosio_assert([0], [10501])
	$17 = [84]
	goto $label$16 
	
.LABEL $label$187
	if ( ((int_64)*(($0 + [160])) > (int_64)$18) ){ goto $label$59 }
	$17 = [85]
	goto $label$16 
	
.LABEL $label$186
	$5 = ($0 + [176])
	$7 = *($5)
	$20 = *(($0 + [184]))
	if ( ((int_64)*(($4 + [248])) == (int_64)$20) ){ goto $label$40 }
	$17 = [86]
	goto $label$16 
	
.LABEL $label$185
	CALL eosio_assert([0], [10882])
	$17 = [87]
	goto $label$16 
	
.LABEL $label$184
	$19 = (int_64)
	if ( ((int_64)$19($7 - *($4 + [240]))) <= (int_64)-4611686018427387904) ){ goto $label$39 }
	$17 = [95]
	goto $label$16 
	
.LABEL $label$183
	if ( ((int_64)$19 < (int_64)4611686018427387904) ){ goto $label$38 }
	$17 = [96]
	goto $label$16 
	
.LABEL $label$182
	CALL eosio_assert([0], [10952])
	goto $label$37 
	
.LABEL $label$181
	if ( ((int_64)$15 == (int_64)((int_64)0 | (int_64)4)) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$180
	CALL eosio_assert([0], [10930])
	$17 = [89]
	goto $label$16 
	
.LABEL $label$179
	$3 = ($0 + [112])
	$13 = ($9 + [24])
	$7 = *($13)
	*(($5 + [8])) = *((($4 + [240]) + [8]))
	*($5) = *($4 + [240])
	$5 = ($0 + [212])
	$16 = *($5)
	*($5) = *($13)
	if ( ((uint_64)(int_64))($7 - $16) > (uint_64)*(($0 + [208]))) ){ goto $label$36 }
	$17 = [90]
	goto $label$16 
	
.LABEL $label$178
	if ( ((int_64)$20 == (int_64)*(($0 + [200]))) ){ goto $label$35 }
	$17 = [91]
	goto $label$16 
	
.LABEL $label$177
	CALL eosio_assert([0], [10501])
	$17 = [92]
	goto $label$16 
	
.LABEL $label$176
	if ( ((int_64)$19 < (int_64)*(($0 + [192]))) ){ goto $label$34 }
	$17 = [93]
	goto $label$16 
	
.LABEL $label$175
	*(($0 + [216])) = [1]
	$17 = [94]
	goto $label$16 
	
.LABEL $label$174
	CALL $42(($0 + [72]), $3, *($0))
	$17 = [61]
	goto $label$16 
	
.LABEL $label$173
	if ( (*(($0 + [216])) == 0) ){ goto $label$55 }
	$17 = [62]
	goto $label$16 
	
.LABEL $label$172
	*(($4 + [344])) = [0]
	goto $label$90 
	
.LABEL $label$171
	CALL $152(($4 + [416]), [9364], ($4 + [360]))
	$5 = CALL $146(($4 + [416]), [9384])
	$3 = ($5 + [8])
	*((($4 + [32]) + [8])) = *($3)
	*($4 + [32]) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	$7 = *($0)
	*($4 + [480]) = (int_64)100000000
	$13 = ($0 + [320])
	*($4 + [480]) = ((int_64)CALL $28($13, $7, ($4 + [480])) + (int_64)1)
	CALL $29($13, ($4 + [480]), *($0))
	CALL $153(($4 + [480]), *($4 + [480]))
	$5 = *($4 + [480])
	$3 = ($5 & [1])
	$5 = CALL $148(($4 + [32]), ( *($4 + [488]) ? (($4 + [480]) | [1]) : $3 ), ( *($4 + [484]) ? uint_32($5 >> [1]) : $3 ))
	$3 = ($5 + [8])
	*((($4 + [160]) + [8])) = *($3)
	*($4 + [160]) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( (*($4 + [480]) & [1]) ){ goto $label$54 }
	$17 = [81]
	goto $label$16 
	
.LABEL $label$170
	if ( (*($4 + [32]) & [1]) ){ goto $label$53 }
	$17 = [80]
	goto $label$16 
	
.LABEL $label$169
	if ( ((*($4 + [416]) & [1]) == 0) ){ goto $label$51 }
	$17 = [66]
	goto $label$16 
	
.LABEL $label$168
	CALL _ZdlPv(*($4 + [424]))
	$17 = [67]
	goto $label$16 
	
.LABEL $label$167
	*($4 + [152]) = (int_64)3617214756542218240
	*($4 + [144]) = *($0)
	$5 = CALL $194([8993])
	if ( ($5 <= [8]) ){ goto $label$48 }
	$17 = [79]
	goto $label$16 
	
.LABEL $label$166
	CALL eosio_assert([0], [9847])
	goto $label$46 
	
.LABEL $label$165
	CALL _ZdlPv(*((($4 + [480]) + [8])))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$52 }
	$17 = [65]
	goto $label$16 
	
.LABEL $label$164
	CALL _ZdlPv(*($4 + [40]))
	if ( (*($4 + [416]) & [1]) ){ goto $label$49 }
	goto $label$50 
	
.LABEL $label$163
	if ( ($5 == 0) ){ goto $label$47 }
	$17 = [69]
	goto $label$16 
	
.LABEL $label$162
	$7 = (int_64)0
	$17 = [70]
	goto $label$16 
	
.LABEL $label$161
	$3 = *(($5 + [8992]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$44 }
	$17 = [77]
	goto $label$16 
	
.LABEL $label$160
	CALL eosio_assert([0], [9892])
	$17 = [71]
	goto $label$16 
	
.LABEL $label$159
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$45 }
	$17 = [72]
	goto $label$16 
	
.LABEL $label$158
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	$17 = [73]
	goto $label$16 
	
.LABEL $label$157
	*($4 + [136]) = ( (int_64)6138663591592764928 ? (int_64)-3605821319196013280 : ((int_64)*(($9 + [64])) == (int_64)$7) )
	*($4 + [128]) = (int_64)-3617168760277827584
	$7 = *(($9 + [32]))
	*(($4 + [440])) = $15
	*($4 + [416]) = *($0)
	*($4 + [432]) = $18
	*($4 + [424]) = $7
	CALL $139((($4 + [416]) + [32]), ($4 + [160]))
	$7 = CALL current_time()
	*(($4 + [60])) = (int_64)0
	*(($4 + [76])) = (int_64)0
	*(($4 + [84])) = (int_64)0
	*($4 + [44]) = [0]
	*($4 + [48]) = [0]
	*($4 + [52 align=4]) = (int_64)0
	*($4 + [68 align=4]) = (int_64)0
	*($4 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	CALL $43(($4 + [68]), ($4 + [144]), ($4 + [136]), ($4 + [128]), ($4 + [416]))
	$7 = *($0)
	*($4 + [480]) = (int_64)100000000
	*($4 + [480]) = ((int_64)CALL $28($13, $7, ($4 + [480])) + (int_64)1)
	CALL $29($13, ($4 + [480]), *($0))
	$7 = *($4 + [480])
	*($4 + [488]) = (int_64)0
	*($4 + [480]) = $7
	CALL $44(($4 + [32]), ($4 + [480]), *($0), [0])
	CALL $45(($4 + [32]))
	if ( ((*($4 + [448]) & [1]) == 0) ){ goto $label$42 }
	$17 = [74]
	goto $label$16 
	
.LABEL $label$156
	CALL _ZdlPv(*(($4 + [456])))
	$17 = [75]
	goto $label$16 
	
.LABEL $label$155
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$89 }
	$17 = [76]
	goto $label$16 
	
.LABEL $label$154
	CALL _ZdlPv(*($4 + [168]))
	$17 = [28]
	goto $label$16 
	
.LABEL $label$153
	*($4 + [152]) = (int_64)3617214756542218240
	*($4 + [144]) = *($0)
	*($4 + [160]) = (int_64)-4994024814571159552
	*($4 + [32]) = *($4 + [256])
	$13 = CALL $139((($4 + [32]) + [8]), $12)
	*(($4 + [64])) = *(($14 + [8]))
	*($4 + [56]) = *($14)
	$5 = CALL $139(($4 + [72]), $2)
	*(($4 + [113])) = *(($8 + [29]))
	*(($4 + [108])) = *(($8 + [24]))
	*(($4 + [100])) = *(($8 + [16]))
	*((($4 + [32]) + [60])) = *(($8 + [8]))
	*($4 + [84 align=4]) = *($8)
	$7 = CALL current_time()
	*(($4 + [444])) = (int_64)0
	*(($4 + [460])) = (int_64)0
	*(($4 + [468])) = (int_64)0
	*($4 + [428]) = [0]
	*($4 + [432]) = [0]
	*($4 + [436 align=4]) = (int_64)0
	*($4 + [452 align=4]) = (int_64)0
	*($4 + [416]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	CALL $46(($4 + [452]), ($4 + [144]), $0, ($4 + [160]), ($4 + [32]))
	$7 = *($0)
	*($4 + [480]) = (int_64)100000000
	$3 = ($0 + [320])
	*($4 + [480]) = ((int_64)CALL $28($3, $7, ($4 + [480])) + (int_64)1)
	CALL $29($3, ($4 + [480]), *($0))
	$7 = *($4 + [480])
	*($4 + [488]) = (int_64)0
	*($4 + [480]) = $7
	CALL $44(($4 + [416]), ($4 + [480]), *($0), [0])
	CALL $45(($4 + [416]))
	if ( (*($5) & [1]) ){ goto $label$88 }
	$17 = [47]
	goto $label$16 
	
.LABEL $label$152
	if ( (*($13) & [1]) ){ goto $label$87 }
	$17 = [46]
	goto $label$16 
	
.LABEL $label$151
	if ( (*(($4 + [344])) == 0) ){ goto $label$85 }
	$17 = [31]
	goto $label$16 
	
.LABEL $label$150
	if ( $9 ){ goto $label$83 }
	$17 = [42]
	goto $label$16 
	
.LABEL $label$149
	CALL eosio_assert([0], [11227])
	CALL eosio_assert([0], [11261])
	$17 = [32]
	goto $label$16 
	
.LABEL $label$148
	$5 = CALL db_next_i64(*($9 + [96]), ($4 + [32]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$82 }
	$17 = [33]
	goto $label$16 
	
.LABEL $label$147
	CALL $33($6, $5)
	$17 = [34]
	goto $label$16 
	
.LABEL $label$146
	CALL $47($6, $9)
	goto $label$81 
	
.LABEL $label$145
	CALL _ZdlPv(*(($4 + [80])))
	if ( ((*($13) & [1]) == 0) ){ goto $label$86 }
	$17 = [30]
	goto $label$16 
	
.LABEL $label$144
	CALL _ZdlPv(*(($4 + [48])))
	if ( *(($4 + [344])) ){ goto $label$84 }
	$17 = [43]
	goto $label$16 
	
.LABEL $label$143
	*($4 + [32]) = ($4 + [256])
	if ( $9 ){ goto $label$74 }
	$17 = [45]
	goto $label$16 
	
.LABEL $label$142
	CALL eosio_assert([0], [10666])
	$17 = [44]
	goto $label$16 
	
.LABEL $label$141
	CALL $48($6, $9, ($4 + [32]))
	$17 = [35]
	goto $label$16 
	
.LABEL $label$140
	CALL $45(($4 + [176]))
	if ( (*($2) & [1]) ){ goto $label$80 }
	$17 = [41]
	goto $label$16 
	
.LABEL $label$139
	if ( (*($12) & [1]) ){ goto $label$79 }
	$17 = [40]
	goto $label$16 
	
.LABEL $label$138
	if ( ((*($4 + [360]) & [1]) == 0) ){ goto $label$77 }
	$17 = [38]
	goto $label$16 
	
.LABEL $label$137
	CALL _ZdlPv(*(($4 + [368])))
	$17 = [39]
	goto $label$16 
	
.LABEL $label$136
	CALL $36(($4 + [384]), *($4 + [388]))
	$global$0 = ($4 + [496])
	return 
	
.LABEL $label$135
	CALL _ZdlPv(*(($4 + [304])))
	if ( ((*($12) & [1]) == 0) ){ goto $label$78 }
	$17 = [37]
	goto $label$16 
	
.LABEL $label$134
	CALL _ZdlPv(*(($4 + [272])))
	if ( (*($4 + [360]) & [1]) ){ goto $label$75 }
	goto $label$76 
	
.LABEL $label$133
	$7 = (int_64)4
	goto $label$43 
	
.LABEL $label$132
	$17 = [7]
	goto $label$16 
	
.LABEL $label$131
	$17 = [2]
	goto $label$16 
	
.LABEL $label$130
	$17 = [3]
	goto $label$16 
	
.LABEL $label$129
	$17 = [1]
	goto $label$16 
	
.LABEL $label$128
	$17 = [3]
	goto $label$16 
	
.LABEL $label$127
	$17 = [4]
	goto $label$16 
	
.LABEL $label$126
	$17 = [148]
	goto $label$16 
	
.LABEL $label$125
	$17 = [4]
	goto $label$16 
	
.LABEL $label$124
	$17 = [147]
	goto $label$16 
	
.LABEL $label$123
	$17 = [146]
	goto $label$16 
	
.LABEL $label$122
	$17 = [144]
	goto $label$16 
	
.LABEL $label$121
	$17 = [8]
	goto $label$16 
	
.LABEL $label$120
	$17 = [8]
	goto $label$16 
	
.LABEL $label$119
	$17 = [9]
	goto $label$16 
	
.LABEL $label$118
	$17 = [138]
	goto $label$16 
	
.LABEL $label$117
	$17 = [9]
	goto $label$16 
	
.LABEL $label$116
	$17 = [11]
	goto $label$16 
	
.LABEL $label$115
	$17 = [12]
	goto $label$16 
	
.LABEL $label$114
	$17 = [14]
	goto $label$16 
	
.LABEL $label$113
	$17 = [12]
	goto $label$16 
	
.LABEL $label$112
	$17 = [14]
	goto $label$16 
	
.LABEL $label$111
	$17 = [13]
	goto $label$16 
	
.LABEL $label$110
	$17 = [13]
	goto $label$16 
	
.LABEL $label$109
	$17 = [15]
	goto $label$16 
	
.LABEL $label$108
	$17 = [16]
	goto $label$16 
	
.LABEL $label$107
	$17 = [16]
	goto $label$16 
	
.LABEL $label$106
	$17 = [17]
	goto $label$16 
	
.LABEL $label$105
	$17 = [122]
	goto $label$16 
	
.LABEL $label$104
	$17 = [17]
	goto $label$16 
	
.LABEL $label$103
	$17 = [122]
	goto $label$16 
	
.LABEL $label$102
	$17 = [17]
	goto $label$16 
	
.LABEL $label$101
	$17 = [18]
	goto $label$16 
	
.LABEL $label$100
	$17 = [19]
	goto $label$16 
	
.LABEL $label$99
	$17 = [119]
	goto $label$16 
	
.LABEL $label$98
	$17 = [20]
	goto $label$16 
	
.LABEL $label$97
	$17 = [21]
	goto $label$16 
	
.LABEL $label$96
	$17 = [22]
	goto $label$16 
	
.LABEL $label$95
	$17 = [24]
	goto $label$16 
	
.LABEL $label$94
	$17 = [26]
	goto $label$16 
	
.LABEL $label$93
	$17 = [27]
	goto $label$16 
	
.LABEL $label$92
	$17 = [28]
	goto $label$16 
	
.LABEL $label$91
	$17 = [28]
	goto $label$16 
	
.LABEL $label$90
	$17 = [28]
	goto $label$16 
	
.LABEL $label$89
	$17 = [28]
	goto $label$16 
	
.LABEL $label$88
	$17 = [29]
	goto $label$16 
	
.LABEL $label$87
	$17 = [30]
	goto $label$16 
	
.LABEL $label$86
	$17 = [46]
	goto $label$16 
	
.LABEL $label$85
	$17 = [43]
	goto $label$16 
	
.LABEL $label$84
	$17 = [31]
	goto $label$16 
	
.LABEL $label$83
	$17 = [32]
	goto $label$16 
	
.LABEL $label$82
	$17 = [34]
	goto $label$16 
	
.LABEL $label$81
	$17 = [35]
	goto $label$16 
	
.LABEL $label$80
	$17 = [36]
	goto $label$16 
	
.LABEL $label$79
	$17 = [37]
	goto $label$16 
	
.LABEL $label$78
	$17 = [40]
	goto $label$16 
	
.LABEL $label$77
	$17 = [39]
	goto $label$16 
	
.LABEL $label$76
	$17 = [39]
	goto $label$16 
	
.LABEL $label$75
	$17 = [38]
	goto $label$16 
	
.LABEL $label$74
	$17 = [44]
	goto $label$16 
	
.LABEL $label$73
	$17 = [50]
	goto $label$16 
	
.LABEL $label$72
	$17 = [116]
	goto $label$16 
	
.LABEL $label$71
	$17 = [51]
	goto $label$16 
	
.LABEL $label$70
	$17 = [52]
	goto $label$16 
	
.LABEL $label$69
	$17 = [53]
	goto $label$16 
	
.LABEL $label$68
	$17 = [55]
	goto $label$16 
	
.LABEL $label$67
	$17 = [100]
	goto $label$16 
	
.LABEL $label$66
	$17 = [55]
	goto $label$16 
	
.LABEL $label$65
	$17 = [55]
	goto $label$16 
	
.LABEL $label$64
	$17 = [56]
	goto $label$16 
	
.LABEL $label$63
	$17 = [98]
	goto $label$16 
	
.LABEL $label$62
	$17 = [57]
	goto $label$16 
	
.LABEL $label$61
	$17 = [58]
	goto $label$16 
	
.LABEL $label$60
	$17 = [59]
	goto $label$16 
	
.LABEL $label$59
	$17 = [61]
	goto $label$16 
	
.LABEL $label$58
	$17 = [82]
	goto $label$16 
	
.LABEL $label$57
	$17 = [61]
	goto $label$16 
	
.LABEL $label$56
	$17 = [61]
	goto $label$16 
	
.LABEL $label$55
	$17 = [63]
	goto $label$16 
	
.LABEL $label$54
	$17 = [64]
	goto $label$16 
	
.LABEL $label$53
	$17 = [65]
	goto $label$16 
	
.LABEL $label$52
	$17 = [80]
	goto $label$16 
	
.LABEL $label$51
	$17 = [67]
	goto $label$16 
	
.LABEL $label$50
	$17 = [67]
	goto $label$16 
	
.LABEL $label$49
	$17 = [66]
	goto $label$16 
	
.LABEL $label$48
	$17 = [68]
	goto $label$16 
	
.LABEL $label$47
	$17 = [78]
	goto $label$16 
	
.LABEL $label$46
	$17 = [69]
	goto $label$16 
	
.LABEL $label$45
	$17 = [70]
	goto $label$16 
	
.LABEL $label$44
	$17 = [71]
	goto $label$16 
	
.LABEL $label$43
	$17 = [73]
	goto $label$16 
	
.LABEL $label$42
	$17 = [75]
	goto $label$16 
	
.LABEL $label$41
	$17 = [84]
	goto $label$16 
	
.LABEL $label$40
	$17 = [87]
	goto $label$16 
	
.LABEL $label$39
	$17 = [88]
	goto $label$16 
	
.LABEL $label$38
	$17 = [89]
	goto $label$16 
	
.LABEL $label$37
	$17 = [89]
	goto $label$16 
	
.LABEL $label$36
	$17 = [94]
	goto $label$16 
	
.LABEL $label$35
	$17 = [92]
	goto $label$16 
	
.LABEL $label$34
	$17 = [94]
	goto $label$16 
	
.LABEL $label$33
	$17 = [102]
	goto $label$16 
	
.LABEL $label$32
	$17 = [105]
	goto $label$16 
	
.LABEL $label$31
	$17 = [106]
	goto $label$16 
	
.LABEL $label$30
	$17 = [107]
	goto $label$16 
	
.LABEL $label$29
	$17 = [107]
	goto $label$16 
	
.LABEL $label$28
	$17 = [112]
	goto $label$16 
	
.LABEL $label$27
	$17 = [110]
	goto $label$16 
	
.LABEL $label$26
	$17 = [112]
	goto $label$16 
	
.LABEL $label$25
	$17 = [123]
	goto $label$16 
	
.LABEL $label$24
	$17 = [123]
	goto $label$16 
	
.LABEL $label$23
	$17 = [126]
	goto $label$16 
	
.LABEL $label$22
	$17 = [127]
	goto $label$16 
	
.LABEL $label$21
	$17 = [134]
	goto $label$16 
	
.LABEL $label$20
	$17 = [135]
	goto $label$16 
	
.LABEL $label$19
	$17 = [140]
	goto $label$16 
	
.LABEL $label$18
	$17 = [143]
	goto $label$16 
	
.LABEL $label$17
	$17 = [150]
	goto $label$16 
	$17
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [464])
	$global$0 = $3
	*(($4 = $3) + [456]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $200($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [440])) = (int_64)0
	*(($4 + [448])) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [412]) = $3
	*($4 + [408]) = $3
	*($4 + [416]) = ($3 + $2)
	$5 = $3
	if ( ((uint_32)$2 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10038])
	$5 = *($4 + [412])
	
.LABEL $label$5
	CALL memcpy(($4 + [424]), $5, [8])
	*($4 + [412]) = ($5 + [8])
	CALL $37(($4 + [408]), (($4 + [424]) + [8]))
	CALL $37(($4 + [408]), ($4 + [444]))
	$5 = *((($4 + [408]) + [8]))
	*((($4 + [32]) + [8])) = $5
	*((($4 + [8]) + [8])) = $5
	$6 = *($4 + [408])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	$5 = CALL $23(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $5
	*($4 + [28]) = ($4 + [456])
	CALL $38(($4 + [24]), ($4 + [424]))
	if ( ($2 <= [513]) ){ goto $label$6 }
	CALL $203($3)
	
.LABEL $label$6
	CALL $24($5)
	if ( ((*($4 + [444]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [452])))
	
.LABEL $label$7
	if ( ((*($4 + [432]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [440])))
	
.LABEL $label$8
	$global$0 = ($4 + [464])
	return [1]
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [10660])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [4])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [10660])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [2])
	$4 = (*($3) + [2])
	*($3) = $4
	$3 = ($1 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [10660])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [4])
	$3 = (*($4) + [4])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [12])
	$8 = ($0 + [8])
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [10660])
	$3 = *($4)
	
.LABEL $label$5
	CALL memcpy($3, ($2 + [14]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$4 }
	$4 = ($1 + [16])
	$8 = ($0 + [8])
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [10660])
	$3 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $4, [1])
	$3 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [20])
	
.LOOP $label$7:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [10660])
	$3 = *($4)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$7 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $123($0, $1)
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10660])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [14]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *(($1 + [28]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $75($0, $6)
	$6 = ($6 + [40])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [40])) - *($1 + [36])) / (int_32)[40]))
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$5:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [10660])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$5 }
	$6 = *(($1 + [40]))
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $75($0, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = CALL $124($0, ($1 + [48]))
	$global$0 = ($2 + [16])
	return $4
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL _ZdlPv($4)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($3 << [1])
	$5 = ( $1 ? $4 : ($4 <= $1) )
	
.LABEL $label$6
	$4 = CALL _Znwj($5)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $5)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = *($2)
	$4 = (*($0) + [1])
	*($0) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $4)
	$5 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($5 == 0) ){ goto $label$8 }
	CALL memset($4, *($2), $5)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$4 = ($0 + [4])
	$0 = *($4)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($4) + [1])
	*($4) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $154($0)
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10660])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *($1 + [8])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10660])
	$4 = *($3)
	
.LABEL $label$2
	$6 = ($1 + [16])
	CALL memcpy($4, ($2 + [8]), [8])
	$1 = (*($3) + [8])
	*($3) = $1
	if ( ((int_32)(*($5) - $1) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [10660])
	$1 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($1, $6, [4])
	*(($3 = ($0 + [4]))) = (*($3) + [4])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [8])
	$4 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-61] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = *($1 + [40])
	$4 = ( *(($1 + [44])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = ($3 - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$7 = ($1 + [40])
	
.LOOP $label$2:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $30($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	
.LABEL $label$3
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = $4
	*($2 + [16]) = $2
	*($2 + [28]) = $6
	*($2 + [40]) = $7
	*($2 + [24]) = $1
	*($2 + [32]) = ($1 + [24])
	*($2 + [36]) = ($1 + [32])
	*($2 + [44]) = ($1 + [52])
	*($2 + [48]) = ($1 + [56])
	*($2 + [52]) = ($1 + [72])
	*($2 + [56]) = ($1 + [88])
	CALL $111(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10660])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$7 = ($0 + [4])
	$1 = ($0 + [8])
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$5 }
	$8 = [2]
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	goto $label$3 
	
.LABEL $label$4
	$8 = [3]
	
.LABEL $label$3
	
.LOOP $label$6:
	goto $label$10 
	
.LABEL $label$12
	$4 = *($7)
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$7 }
	$8 = [2]
	goto $label$6 
	
.LABEL $label$11
	CALL eosio_assert([0], [10660])
	$4 = *($7)
	$8 = [0]
	goto $label$6 
	
.LABEL $label$10
	CALL memcpy($4, $6, [2])
	*($7) = (*($7) + [2])
	CALL $108($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$8 = [3]
	goto $label$6 
	
.LABEL $label$9
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$8
	$8 = [1]
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	goto $label$6 
	return $8
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [32])
	$4 = *($1)
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($6 + [-24])
	$7 = *($1)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$3 }
	$6 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	if ( ((int_32)*(($7 + [76])) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [9964])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$1 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)-5915276457541632000, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $53($3, $1)
	if ( ((int_32)*($7 + [76]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9546])
	CALL eosio_assert(((int_32)*($7 + [72]) != (int_32)[0]), [9645])
	if ( $7 ){ goto $label$5 }
	CALL eosio_assert([0], [11227])
	CALL eosio_assert([0], [11261])
	
.LABEL $label$5
	$1 = CALL db_next_i64(*($7 + [80]), ($2 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	CALL $53($3, $1)
	
.LABEL $label$6
	CALL $68($3, $7)
	$global$0 = ($2 + [16])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [240])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL require_recipient(*($1 + [32]))
	*($2 + [192]) = (($2 + [192]) | [4])
	*($2 + [196 align=4]) = (int_64)0
	*($2 + [184]) = (int_64)0
	*($2 + [176]) = [0]
	*($2 + [168]) = (int_64)0
	CALL $27($0, ($1 + [40]), ($2 + [192]), ($2 + [184]), ($2 + [168]), ($2 + [160]))
	$3 = *($1 + [56])
	CALL __multi3(($2 + [8]), $3, (int_64)$3 >> (int_64)63), (int_64)3, (int_64)0)
	$4 = *(($1 + [64]))
	$3 = *(($2 + [16]))
	$5 = *($2 + [8])
	if ( (( (uint_64)($5 <= (int_64)4611686018427387904) ? ((int_64)$3 < (int_64)0) : (int_64)($3 == 0) ) == 0) ){ goto $label$2 }
	if ( ( ((uint_64)$5 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$3 > (int_64)-1) : ((int_64)$3 == (int_64)-1) ) ){ goto $label$1 }
	CALL eosio_assert([0], [10584])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [10560])
	
.LABEL $label$1
	$6 = ((int_64)$5 / (int_64)1000)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$3 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$3 = $5
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$7 }
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = *($2 + [184])
	if ( (int_64)($3 == 0) ){ goto $label$3 }
	CALL eosio_assert(((int_64)$3 != (int_64)*(($1 + [32]))), [9392])
	CALL eosio_assert(CALL $fimport$15(*($2 + [184])), [9421])
	CALL $152(($2 + [120]), [9364], ($2 + [168]))
	$7 = CALL $146(($2 + [120]), [9384])
	$8 = ($7 + [8])
	*((($2 + [72]) + [8])) = *($8)
	*($2 + [72]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	$3 = *($0)
	*($2 + [40]) = (int_64)100000000
	$7 = ($0 + [320])
	*($2 + [40]) = ((int_64)CALL $28($7, $3, ($2 + [40])) + (int_64)1)
	CALL $29($7, ($2 + [40]), *($0))
	CALL $153(($2 + [40]), *($2 + [40]))
	$7 = *($2 + [40])
	$8 = ($7 & [1])
	$7 = CALL $148(($2 + [72]), ( *($2 + [48]) ? (($2 + [40]) | [1]) : $8 ), ( *($2 + [44]) ? uint_32($7 >> [1]) : $8 ))
	$8 = ($7 + [8])
	*((($2 + [208]) + [8])) = *($8)
	*($2 + [208]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	if ( (*($2 + [40]) & [1]) ){ goto $label$12 }
	if ( (*($2 + [72]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*((($2 + [40]) + [8])))
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($2 + [80]))
	if ( (*($2 + [120]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( ((*($2 + [120]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($2 + [128]))
	
.LABEL $label$8
	$5 = *($0)
	$7 = CALL $194([8993])
	if ( ($7 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [9847])
	goto $label$15 
	
.LABEL $label$16
	if ( ($7 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$3 = (int_64)0
	
.LOOP $label$17:
	$8 = *(($7 + [8992]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$18
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$17 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$13 
	
.LABEL $label$14
	$3 = (int_64)0
	
.LABEL $label$13
	$10 = *(($1 + [64]))
	*((($2 + [72]) + [24])) = $4
	*($2 + [88]) = $6
	*($2 + [72]) = *($0)
	*($2 + [80]) = *($2 + [184])
	$8 = CALL $139((($2 + [72]) + [32]), ($2 + [208]))
	*(($9 = (($2 + [120]) + [24]))) = [0]
	*($2 + [128]) = (int_64)-3617168760277827584
	*($2 + [120]) = ( (int_64)6138663591592764928 ? (int_64)-3605821319196013280 : ((int_64)$10 == (int_64)((int_64)$3 | (int_64)4)) )
	*($2 + [136]) = (int_64)0
	*(($7 = CALL _Znwj([16]))) = $5
	*($7 + [8]) = (int_64)3617214756542218240
	*((($2 + [120]) + [36])) = [0]
	$11 = ($7 + [16])
	*($9) = $11
	*(($2 + [140])) = $11
	*($2 + [136]) = $7
	*($2 + [148 align=4]) = (int_64)0
	$7 = *($8)
	$8 = ( *((($2 + [72]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [32])
	$3 = (CASTING uint_64)(uint_32 $8)
	$8 = ($2 + [148])
	
.LOOP $label$19:
	$7 = ($7 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$19 }
	if ( ($7 == 0) ){ goto $label$21 }
	CALL $30($8, $7)
	$8 = *(($2 + [152]))
	$7 = *(($2 + [148]))
	goto $label$20 
	
.LABEL $label$21
	$8 = [0]
	$7 = [0]
	
.LABEL $label$20
	*($2 + [44]) = $7
	*($2 + [40]) = $7
	*($2 + [48]) = $8
	*($2 + [232]) = ($2 + [40])
	*($2 + [56]) = ($2 + [72])
	CALL $51(($2 + [56]), ($2 + [232]))
	CALL $32(($2 + [120]))
	$7 = *($2 + [148])
	if ( ($7 == 0) ){ goto $label$22 }
	*(($2 + [152])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$22
	$7 = *($2 + [136])
	if ( ($7 == 0) ){ goto $label$23 }
	*(($2 + [140])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$23
	if ( ((*($2 + [104]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($2 + [112])))
	
.LABEL $label$24
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($2 + [216]))
	
.LABEL $label$3
	$12 = ($1 + [56])
	if ( ((int_64)*($2 + [160]) < (int_64)0) ){ goto $label$25 }
	$7 = CALL $194([8993])
	if ( ($7 <= [8]) ){ goto $label$29 }
	CALL eosio_assert([0], [9847])
	goto $label$28 
	
.LABEL $label$29
	if ( ($7 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$3 = (int_64)0
	
.LOOP $label$30:
	$8 = *(($7 + [8992]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$31 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$31
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$30 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$26 
	
.LABEL $label$27
	$3 = (int_64)0
	
.LABEL $label$26
	if ( ((int_64)*(($1 + [64])) != (int_64)((int_64)$3 | (int_64)4)) ){ goto $label$25 }
	$3 = *($0)
	*($2 + [72]) = (int_64)100000000
	$7 = ($0 + [320])
	*($2 + [72]) = ((int_64)CALL $28($7, $3, ($2 + [72])) + (int_64)1)
	CALL $29($7, ($2 + [72]), *($0))
	CALL $153(($2 + [56]), *($2 + [72]))
	$5 = *($2 + [160])
	$4 = *(($12 + [8]))
	*((($2 + [40]) + [8])) = $4
	$7 = (($2 + [56]) + [8])
	*((($2 + [72]) + [8])) = *($7)
	*($7) = [0]
	*((($2 + [72]) + [32])) = $4
	*($2 + [88]) = $5
	*($2 + [120]) = (int_64)-3605821319201630400
	*($2 + [128]) = (int_64)-5003134543285190656
	*($2 + [136]) = [0]
	$5 = *($12)
	*($2 + [40]) = $5
	*($2 + [72]) = *($2 + [56])
	*($2 + [56]) = (int_64)0
	*($2 + [96]) = $5
	*($2 + [112]) = *($1 + [24])
	*(($8 = ($2 + [140]))) = [0]
	*(($9 = ($2 + [144]))) = [0]
	*(($7 = CALL _Znwj([16]))) = $3
	*($7 + [8]) = (int_64)3617214756542218240
	*(($2 + [156])) = [0]
	$11 = ($7 + [16])
	*($9) = $11
	*($8) = $11
	*($2 + [136]) = $7
	*($2 + [148 align=4]) = (int_64)0
	$7 = *($2 + [72])
	$8 = ( *($2 + [76]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [32])
	$3 = (CASTING uint_64)(uint_32 $8)
	$8 = ($2 + [148])
	
.LOOP $label$32:
	$7 = ($7 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$32 }
	if ( ($7 == 0) ){ goto $label$34 }
	CALL $30($8, $7)
	$8 = *(($2 + [152]))
	$7 = *(($2 + [148]))
	goto $label$33 
	
.LABEL $label$34
	$8 = [0]
	$7 = [0]
	
.LABEL $label$33
	*($2 + [212]) = $7
	*($2 + [208]) = $7
	*($2 + [216]) = $8
	*($2 + [224]) = ($2 + [208])
	*($2 + [232]) = ($2 + [72])
	CALL $52(($2 + [232]), ($2 + [224]))
	CALL $32(($2 + [120]))
	$7 = *($2 + [148])
	if ( ($7 == 0) ){ goto $label$35 }
	*(($2 + [152])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$35
	$7 = *($2 + [136])
	if ( ($7 == 0) ){ goto $label$36 }
	*(($2 + [140])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$36
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($2 + [80]))
	
.LABEL $label$37
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$25
	$7 = CALL $194([8993])
	if ( ($7 <= [8]) ){ goto $label$41 }
	CALL eosio_assert([0], [9847])
	goto $label$40 
	
.LABEL $label$41
	if ( ($7 == 0) ){ goto $label$39 }
	
.LABEL $label$40
	$3 = (int_64)0
	
.LOOP $label$42:
	$8 = *(($7 + [8992]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$43 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$43
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$42 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$38 
	
.LABEL $label$39
	$3 = (int_64)0
	
.LABEL $label$38
	if ( ((int_64)*(($1 + [64])) != (int_64)((int_64)$3 | (int_64)4)) ){ goto $label$47 }
	$3 = *($0)
	*($2 + [24]) = [9451]
	*($2 + [28]) = CALL $194([9451])
	*($2) = *($2 + [24])
	$7 = CALL $7(($2 + [32]), $2)
	$5 = *($0)
	*($2 + [72]) = (int_64)100000000
	$8 = ($0 + [320])
	*($2 + [72]) = ((int_64)CALL $28($8, $5, ($2 + [72])) + (int_64)1)
	CALL $29($8, ($2 + [72]), *($0))
	CALL $153(($2 + [56]), *($2 + [72]))
	$5 = *(($12 + [8]))
	*((($2 + [40]) + [8])) = $5
	$8 = (($2 + [56]) + [8])
	*((($2 + [72]) + [8])) = *($8)
	*($8) = [0]
	*((($2 + [72]) + [32])) = $5
	$5 = *($12)
	*($2 + [40]) = $5
	*($2 + [72]) = *($2 + [56])
	*($2 + [56]) = (int_64)0
	*($2 + [88]) = *(($1 + [32]))
	*($2 + [96]) = $5
	*($2 + [112]) = *($1 + [24])
	*($2 + [120]) = *($7)
	*($2 + [128]) = (int_64)-3617370165638856704
	*($2 + [136]) = [0]
	*(($8 = ($2 + [140]))) = [0]
	*(($9 = (($2 + [120]) + [24]))) = [0]
	*(($7 = CALL _Znwj([16]))) = $3
	*($7 + [8]) = (int_64)3617214756542218240
	*(($2 + [156])) = [0]
	$11 = ($7 + [16])
	*($9) = $11
	*($8) = $11
	*($2 + [136]) = $7
	*($2 + [148 align=4]) = (int_64)0
	$7 = *($2 + [72])
	$8 = ( *($2 + [76]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [32])
	$3 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [24])
	$9 = ($2 + [148])
	
.LOOP $label$48:
	$7 = ($7 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$48 }
	if ( ($7 == 0) ){ goto $label$46 }
	CALL $30($9, $7)
	$9 = *(($2 + [152]))
	$7 = *(($2 + [148]))
	goto $label$45 
	
.LABEL $label$47
	$8 = ($1 + [24])
	goto $label$44 
	
.LABEL $label$46
	$9 = [0]
	$7 = [0]
	
.LABEL $label$45
	*($2 + [212]) = $7
	*($2 + [208]) = $7
	*($2 + [216]) = $9
	*($2 + [224]) = ($2 + [208])
	*($2 + [232]) = ($2 + [72])
	CALL $52(($2 + [232]), ($2 + [224]))
	CALL $32(($2 + [120]))
	$7 = *($2 + [148])
	if ( ($7 == 0) ){ goto $label$49 }
	*(($2 + [152])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$49
	$7 = *($2 + [136])
	if ( ($7 == 0) ){ goto $label$50 }
	*(($2 + [140])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$50
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$51 }
	CALL _ZdlPv(*($2 + [80]))
	
.LABEL $label$51
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$44
	$3 = ((uint_64)*($8) / (uint_64)(int_64)3600)
	*($2 + [208]) = $3
	$13 = ($0 + [32])
	$8 = *(($0 + [60]))
	$11 = *(($0 + [56]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$55 }
	
.LOOP $label$57:
	$7 = ($8 + [-24])
	$9 = *($7)
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$56 }
	$8 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$56
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$55 }
	if ( ((int_32)*(($9 + [76])) == (int_32)$13) ){ goto $label$58 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$58
	if ( $9 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$7 = CALL db_find_i64(*($13), *(($0 + [40])), (int_64)-5915276457541632000, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$53 }
	$9 = CALL $53($13, $7)
	if ( ((int_32)*($9 + [76]) == (int_32)$13) ){ goto $label$54 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$54
	CALL eosio_assert((*($9 + [72]) == 0), [9464])
	*($2 + [72]) = $12
	CALL $54($13, $9, ($2 + [72]))
	goto $label$52 
	
.LABEL $label$53
	$3 = *($0)
	*($2 + [44]) = $12
	*($2 + [40]) = ($2 + [208])
	*($2 + [120]) = $3
	if ( ((int_64)*(($0 + [32])) == (int_64)CALL current_receiver()) ){ goto $label$59 }
	CALL eosio_assert([0], [10609])
	
.LABEL $label$59
	*($2 + [72]) = $13
	*($2 + [76]) = ($2 + [40])
	*($2 + [80]) = ($2 + [120])
	$7 = CALL _Znwj([88])
	CALL $55($7)
	*($7 + [76]) = $13
	CALL $56(($2 + [72]), $7)
	*($2 + [56]) = $7
	$3 = *($7)
	*($2 + [72]) = $3
	$9 = *($7 + [80])
	*($2 + [232]) = $9
	$11 = ($0 + [60])
	$8 = *($11)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [64]))) ){ goto $label$61 }
	*($8 + [8]) = $3
	*($8 + [16]) = $9
	*($2 + [56]) = [0]
	*($8) = $7
	*($11) = ($8 + [24])
	$7 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $7 ){ goto $label$60 }
	goto $label$52 
	
.LABEL $label$61
	CALL $57(($0 + [56]), ($2 + [56]), ($2 + [72]), ($2 + [232]))
	$7 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($7 == 0) ){ goto $label$52 }
	
.LABEL $label$60
	CALL _ZdlPv($7)
	
.LABEL $label$52
	*((($2 + [72]) + [32])) = [0]
	*($2 + [88]) = (int_64)-1
	$3 = (int_64)0
	*($2 + [96]) = (int_64)0
	*($2 + [72]) = *($0)
	*($2 + [80]) = *(($1 + [32]))
	$7 = CALL $194([8993])
	if ( ($7 <= [8]) ){ goto $label$68 }
	CALL eosio_assert([0], [9847])
	goto $label$67 
	
.LABEL $label$68
	if ( ($7 == 0) ){ goto $label$66 }
	
.LABEL $label$67
	$3 = (int_64)0
	
.LOOP $label$69:
	$8 = *(($7 + [8992]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$70 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$70
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$69 }
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	$8 = *(($2 + [100]))
	$11 = *(($2 + [96]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$66 }
	
.LOOP $label$72:
	$7 = ($8 + [-24])
	$9 = *($7)
	if ( ((int_64)(uint_64)*($9 + [8]) >> (uint_64)(int_64)8) == (int_64)$3) ){ goto $label$71 }
	$8 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$72 }
	goto $label$66 
	
.LABEL $label$71
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$66 }
	if ( ((int_32)*($9 + [20]) == (int_32)($2 + [72])) ){ goto $label$73 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$73
	if ( $9 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$7 = CALL db_find_i64(*($2 + [72]), *(($2 + [80])), (int_64)-6030912129794572288, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$64 }
	$9 = CALL $58(($2 + [72]), $7)
	if ( ((int_32)*($9 + [20]) == (int_32)($2 + [72])) ){ goto $label$65 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$65
	*($2 + [120]) = $12
	CALL $59(($2 + [72]), $9, ($2 + [120]))
	$0 = *($2 + [96])
	if ( $0 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$64
	$3 = *($0)
	*($2 + [224]) = $12
	*($2 + [40]) = $3
	if ( ((int_64)*($2 + [72]) == (int_64)CALL current_receiver()) ){ goto $label$74 }
	CALL eosio_assert([0], [10609])
	
.LABEL $label$74
	*($2 + [124]) = ($2 + [224])
	*($2 + [120]) = ($2 + [72])
	*($2 + [128]) = ($2 + [40])
	*(($7 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($7) = (int_64)0
	*($7 + [20]) = ($2 + [72])
	CALL $60(($2 + [120]), $7)
	*($2 + [56]) = $7
	$3 = (uint_64)*($7 + [8]) >> (uint_64)(int_64)8
	*($2 + [120]) = $3)
	$0 = *($7 + [24])
	*($2 + [232]) = $0
	$9 = ($2 + [100])
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)*((($2 + [72]) + [32]))) ){ goto $label$77 }
	*($8 + [8]) = $3
	*($8 + [16]) = $0
	*($2 + [56]) = [0]
	*($8) = $7
	*($9) = ($8 + [24])
	$7 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $7 ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$77
	CALL $61(($2 + [96]), ($2 + [56]), ($2 + [120]), ($2 + [232]))
	$7 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($7 == 0) ){ goto $label$75 }
	
.LABEL $label$76
	CALL _ZdlPv($7)
	
.LABEL $label$75
	$0 = *($2 + [96])
	if ( ($0 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	$9 = ($2 + [100])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$79 }
	
.LOOP $label$80:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$81 }
	CALL _ZdlPv($8)
	
.LABEL $label$81
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$80 }
	$7 = *(($2 + [96]))
	goto $label$78 
	
.LABEL $label$79
	$7 = $0
	
.LABEL $label$78
	*($9) = $0
	CALL _ZdlPv($7)
	
.LABEL $label$62
	if ( ((*($2 + [168]) & [1]) == 0) ){ goto $label$82 }
	CALL _ZdlPv(*(($2 + [176])))
	
.LABEL $label$82
	CALL $36(($2 + [192]), *($2 + [196]))
	$global$0 = ($2 + [240])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [528])
	$global$0 = $3
	*(($4 = $3) + [520]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $200($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	CALL memset(($4 + [424]), [0], [96])
	*(($4 + [440])) = [0]
	*(($4 + [472])) = [0]
	*(($4 + [488])) = (int_64)0
	*(($4 + [504])) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [448]) = (int_64)0
	*($4 + [456]) = (int_64)0
	*($4 + [464]) = (int_64)0
	*($4 + [480]) = (int_64)0
	*($4 + [496]) = (int_64)0
	*($4 + [512]) = [0]
	*($4 + [412]) = $2
	*($4 + [408]) = $2
	*($4 + [416]) = ($2 + $5)
	*($4 + [24]) = ($4 + [408])
	*($4 + [52]) = (($4 + [424]) + [8])
	*($4 + [56]) = ($4 + [448])
	*($4 + [60]) = ($4 + [456])
	$3 = ($4 + [464])
	*($4 + [64]) = $3
	*($4 + [68]) = ($4 + [476])
	*($4 + [72]) = ($4 + [480])
	*($4 + [76]) = ($4 + [496])
	*($4 + [80]) = ($4 + [512])
	*($4 + [48]) = ($4 + [424])
	CALL $49(($4 + [48]), ($4 + [24]))
	$6 = *($4 + [416])
	*((($4 + [32]) + [8])) = $6
	*((($4 + [8]) + [8])) = $6
	$7 = *($4 + [408])
	*($4 + [8]) = $7
	*($4 + [32]) = $7
	$6 = CALL $23(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $6
	*($4 + [28]) = ($4 + [520])
	CALL $50(($4 + [24]), ($4 + [424]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $203($2)
	
.LABEL $label$4
	CALL $24($6)
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [472])))
	
.LABEL $label$5
	if ( ((*(($4 + [432])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [440])))
	
.LABEL $label$6
	$global$0 = ($4 + [528])
	return [1]
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	$5 = ($global$0 - [304])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$1 }
	$7 = *($4)
	if ( (( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ) == 0) ){ goto $label$1 }
	$10 = ($9 & [1])
	$9 = *($4)
	$8 = *(($4 + [4]))
	$7 = CALL $194([8921])
	if ( ((int_32)$7 != (int_32)( $8 ? uint_32($9 >> [1]) : $10 )) ){ goto $label$2 }
	if ( (CALL $151($4, [0], [-1], [8921], $7) == 0) ){ goto $label$1 }
	$9 = *($4)
	$10 = ($9 & [1])
	$8 = *(($4 + [4]))
	
.LABEL $label$2
	$11 = *($4 + [8])
	$7 = CALL $194([8922])
	if ( ($7 == 0) ){ goto $label$1 }
	$9 = ( $8 ? uint_32($9 >> [1]) : $10 )
	if ( ((int_32)$9 < (int_32)$7) ){ goto $label$3 }
	$11 = ( $11 ? ($4 + [1]) : $10 )
	$8 = ($11 + $9)
	$10 = $11
	
.LOOP $label$4:
	$9 = (($9 - $7) + [1])
	if ( ($9 == 0) ){ goto $label$3 }
	$9 = CALL $192($10, [101], $9)
	if ( ($9 == 0) ){ goto $label$3 }
	if ( (CALL $193($9, [8922], $7) == 0) ){ goto $label$5 }
	$10 = ($9 + [1])
	$9 = ($8 - $10)
	if ( ((int_32)$9 >= (int_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$3 }
	if ( ((int_32)($9 - $11) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$3
	CALL require_auth(*($1))
	CALL eosio_assert(((int_64)*($1) != (int_64)*($2)), [8933])
	CALL eosio_assert(((int_32)*(($0 + [216])) ^ (int_32)[1]), [8957])
	$2 = ($0 + [224])
	$7 = *(($0 + [252]))
	if ( ((int_32)$7 == (int_32)*(($0 + [248]))) ){ goto $label$7 }
	$7 = *(($7 + [-24]))
	if ( ((int_32)*(($7 + [36])) == (int_32)$2) ){ goto $label$6 }
	CALL eosio_assert([0], [9964])
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$9 = CALL db_find_i64(*($2), *(($0 + [232])), (int_64)-5868465776486252544, (int_64)-5868465776486252544)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $25($2, $9)
	if ( ((int_32)*(($7 + [36])) == (int_32)$2) ){ goto $label$6 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8972])
	$2 = CALL $194([8993])
	if ( ($2 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [9847])
	goto $label$10 
	
.LABEL $label$11
	if ( ($2 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$6 = (int_64)0
	
.LOOP $label$12:
	$7 = *(($2 + [8992]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$13
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$12 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$8 
	
.LABEL $label$9
	$6 = (int_64)0
	
.LABEL $label$8
	if ( ((int_64)*($3 + [8]) != (int_64)((int_64)$6 | (int_64)4)) ){ goto $label$15 }
	CALL eosio_assert([1], [9001])
	goto $label$14 
	
.LABEL $label$15
	$2 = CALL $194([8997])
	if ( ($2 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [9847])
	goto $label$18 
	
.LABEL $label$19
	if ( ($2 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$6 = (int_64)0
	
.LOOP $label$20:
	$7 = *(($2 + [8996]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$21
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$20 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$16 
	
.LABEL $label$17
	$6 = (int_64)0
	
.LABEL $label$16
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)((int_64)$6 | (int_64)4)), [9001])
	
.LABEL $label$14
	$7 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$22 }
	$6 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$12 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$6 = $12
	$7 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$25
	$6 = $12
	
.LOOP $label$26:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$23 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $7 ){ goto $label$26 }
	$7 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$7 = [0]
	
.LABEL $label$22
	CALL eosio_assert($7, [9023])
	$2 = CALL $194([8993])
	if ( ($2 <= [8]) ){ goto $label$30 }
	CALL eosio_assert([0], [9847])
	goto $label$29 
	
.LABEL $label$30
	if ( ($2 == 0) ){ goto $label$28 }
	
.LABEL $label$29
	$6 = (int_64)0
	
.LOOP $label$31:
	$7 = *(($2 + [8992]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$32 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$32
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$31 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$27 
	
.LABEL $label$28
	$6 = (int_64)0
	
.LABEL $label$27
	$12 = *($3)
	if ( ((int_64)*(($3 + [8])) != (int_64)((int_64)$6 | (int_64)4)) ){ goto $label$34 }
	CALL eosio_assert(((int_64)$12 > (int_64)999), [9046])
	CALL eosio_assert(((int_64)*($3) < (int_64)8000001), [9072])
	goto $label$33 
	
.LABEL $label$34
	CALL eosio_assert(((int_64)$12 > (int_64)9999), [9101])
	CALL eosio_assert(((int_64)*($3) < (int_64)800000001), [9125])
	
.LABEL $label$33
	$2 = CALL $194([8993])
	if ( ($2 <= [8]) ){ goto $label$38 }
	CALL eosio_assert([0], [9847])
	goto $label$37 
	
.LABEL $label$38
	if ( ($2 == 0) ){ goto $label$36 }
	
.LABEL $label$37
	$6 = (int_64)0
	
.LOOP $label$39:
	$7 = *(($2 + [8992]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$40 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$40
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$39 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$35 
	
.LABEL $label$36
	$6 = (int_64)0
	
.LABEL $label$35
	$7 = ($3 + [8])
	$12 = *($7)
	CALL $26(($5 + [256]), ( (int_64)6138663591592764928 ? (int_64)-3605821319196013280 : ((int_64)$12 == (int_64)((int_64)$6 | (int_64)4)) ), *($0), (uint_64)$12 >> (uint_64)(int_64)8))
	$11 = (($5 + [240]) | [4])
	*($5 + [240]) = $11
	*($5 + [244 align=4]) = (int_64)0
	*($5 + [232]) = (int_64)0
	$2 = [0]
	*($5 + [224]) = [0]
	*($5 + [216]) = (int_64)0
	CALL $27($0, $4, ($5 + [240]), ($5 + [232]), ($5 + [216]), ($5 + [208]))
	$13 = *($7)
	$14 = (uint_64)$13 >> (uint_64)(int_64)8
	$6 = $14)
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$12 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$45 }
	$6 = $12
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$43 }
	goto $label$44 
	
.LABEL $label$45
	$6 = $12
	
.LOOP $label$46:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $7 ){ goto $label$46 }
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$43 }
	
.LABEL $label$44
	$6 = $14
	$12 = $13
	goto $label$41 
	
.LABEL $label$42
	CALL eosio_assert([0], [10481])
	$12 = *(($3 + [8]))
	$6 = (uint_64)$12 >> (uint_64)(int_64)8)
	
.LABEL $label$41
	*($5 + [200]) = $12
	*($5 + [192]) = (int_64)0
	$2 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$12 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$50 }
	$6 = $12
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$50
	$6 = $12
	
.LOOP $label$51:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $7 ){ goto $label$51 }
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	CALL eosio_assert([0], [10481])
	
.LABEL $label$47
	$7 = *($5 + [240])
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$53 }
	$8 = ($3 + [8])
	$15 = ($0 + [264])
	$16 = (int_64)0
	
.LOOP $label$54:
	$10 = $7
	$7 = [0]
	if ( ((uint_64)((int_64)$16 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$55 }
	$2 = [0]
	$6 = $14
	
.LOOP $label$57:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$56 }
	$12 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$58 }
	$6 = $12
	$7 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$58
	$6 = $12
	
.LOOP $label$59:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$56 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $7 ){ goto $label$59 }
	$7 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$56
	$7 = [0]
	
.LABEL $label$55
	CALL eosio_assert($7, [11079])
	$17 = *($8)
	$18 = *($10 + [24])
	if ( (uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$60 }
	CALL eosio_assert([0], [10432])
	
.LABEL $label$60
	$6 = (uint_64)$17 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$64:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$63 }
	$12 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$66 }
	$6 = $12
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$64 }
	goto $label$65 
	
.LABEL $label$66
	$6 = $12
	
.LOOP $label$67:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$63 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $7 ){ goto $label$67 }
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$64 }
	
.LABEL $label$65
	if ( ((int_64)$17 == (int_64)$13) ){ goto $label$61 }
	goto $label$62 
	
.LABEL $label$63
	CALL eosio_assert([0], [10481])
	if ( ((int_64)$17 == (int_64)$13) ){ goto $label$61 }
	
.LABEL $label$62
	CALL eosio_assert([0], [11095])
	
.LABEL $label$61
	$16 = ((int_64)$18 + (int_64)$16)
	if ( ((int_64)$16 <= (int_64)-4611686018427387904) ){ goto $label$69 }
	if ( ((int_64)$16 < (int_64)4611686018427387904) ){ goto $label$68 }
	CALL eosio_assert([0], [11157])
	goto $label$68 
	
.LABEL $label$69
	CALL eosio_assert([0], [11138])
	
.LABEL $label$68
	$17 = *($8)
	$18 = *(($10 + [24]))
	if ( (uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$70 }
	CALL eosio_assert([0], [10432])
	
.LABEL $label$70
	$6 = (uint_64)$17 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$73:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$72 }
	$12 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$74 }
	$6 = $12
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$74
	$6 = $12
	
.LOOP $label$75:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$72 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $7 ){ goto $label$75 }
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$72
	CALL eosio_assert([0], [10481])
	
.LABEL $label$71
	CALL __multi3(($5 + [8]), *((*($15) + ((int_32)*(($10 + [16])) * (int_32)[24])) + [4]), (int_64)0, $18, (int_64)$18 >> (int_64)63))
	*((($5 + [24]) + [8])) = $17
	*($5 + [24]) = $18
	$12 = *((($5 + [8]) + [8]))
	$6 = *($5 + [8])
	if ( (( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$12 < (int_64)0) : (int_64)($12 == 0) ) == 0) ){ goto $label$77 }
	if ( ( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$12 > (int_64)-1) : ((int_64)$12 == (int_64)-1) ) ){ goto $label$76 }
	CALL eosio_assert([0], [10584])
	goto $label$76 
	
.LABEL $label$77
	CALL eosio_assert([0], [10560])
	
.LABEL $label$76
	*($5 + [24]) = $6
	$2 = (($5 + [192]) + [8])
	if ( ((int_64)$17 == (int_64)*($2)) ){ goto $label$78 }
	CALL eosio_assert([0], [10501])
	
.LABEL $label$78
	$7 = ( ($5 + [192]) ? ($5 + [24]) : ((int_64)*($5 + [192]) > (int_64)$6) )
	*($2) = *(($7 + [8]))
	*($5 + [192]) = *($7)
	$2 = *($10 + [4])
	if ( ($2 == 0) ){ goto $label$80 }
	
.LOOP $label$81:
	$7 = $2
	$2 = *($7)
	if ( $2 ){ goto $label$81 }
	goto $label$79 
	
.LABEL $label$80
	$7 = *($10 + [8])
	if ( ((int_32)*($7) == (int_32)$10) ){ goto $label$79 }
	$9 = ($10 + [8])
	
.LOOP $label$82:
	$2 = *($9)
	$9 = ($2 + [8])
	$7 = *($2 + [8])
	if ( ((int_32)$2 != (int_32)*($7)) ){ goto $label$82 }
	
.LABEL $label$79
	if ( ((int_32)$7 != (int_32)$11) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	$16 = (int_64)0
	
.LABEL $label$52
	if ( ((int_64)$13 == (int_64)*(($3 + [8]))) ){ goto $label$83 }
	CALL eosio_assert([0], [10501])
	
.LABEL $label$83
	CALL eosio_assert(((int_64)$16 == (int_64)*($3)), [9156])
	$12 = *((($5 + [192]) + [8]))
	$6 = *($5 + [192])
	if ( ((int_64)$6 >= (int_64)2305843009213693952) ){ goto $label$87 }
	if ( ((int_64)$6 > (int_64)-2305843009213693952) ){ goto $label$86 }
	CALL eosio_assert([0], [10584])
	$6 = ((int_64)$6 << (int_64)1)
	if ( ((int_64)$12 != (int_64)*($5 + [264])) ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$87
	CALL eosio_assert([0], [10560])
	
.LABEL $label$86
	$6 = ((int_64)$6 << (int_64)1)
	if ( ((int_64)$12 == (int_64)*($5 + [264])) ){ goto $label$84 }
	
.LABEL $label$85
	CALL eosio_assert([0], [10501])
	
.LABEL $label$84
	CALL eosio_assert(((int_64)*($5 + [256]) >= (int_64)$6), [9195])
	$2 = CALL $194([8993])
	if ( ($2 <= [8]) ){ goto $label$91 }
	CALL eosio_assert([0], [9847])
	goto $label$90 
	
.LABEL $label$91
	if ( ($2 == 0) ){ goto $label$89 }
	
.LABEL $label$90
	$6 = (int_64)0
	
.LOOP $label$92:
	$7 = *(($2 + [8992]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$93 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$93
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$92 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$88 
	
.LABEL $label$89
	$6 = (int_64)0
	
.LABEL $label$88
	$2 = ($3 + [8])
	if ( ((int_64)*($2) != (int_64)((int_64)$6 | (int_64)4)) ){ goto $label$94 }
	$6 = *($0)
	*($5 + [136]) = [9221]
	*($5 + [140]) = CALL $194([9221])
	*($5) = *($5 + [136])
	$7 = CALL $7(($5 + [144]), $5)
	$12 = *($0)
	*($5 + [24]) = (int_64)100000000
	$9 = ($0 + [320])
	*($5 + [24]) = ((int_64)CALL $28($9, $12, ($5 + [24])) + (int_64)1)
	CALL $29($9, ($5 + [24]), *($0))
	CALL $153(($5 + [120]), *($5 + [24]))
	$9 = (($5 + [120]) + [8])
	*((($5 + [24]) + [8])) = *($9)
	*($9) = [0]
	*(($5 + [56])) = *($2)
	*($5 + [24]) = *($5 + [120])
	*($5 + [120]) = (int_64)0
	*($5 + [40]) = *($1)
	*($5 + [48]) = *($3)
	$9 = CALL $139(($5 + [64]), ($5 + [216]))
	*($5 + [160]) = (int_64)-7807376982139731968
	*($5 + [152]) = *($7)
	*(($2 = CALL _Znwj([16]))) = $6
	*($2 + [8]) = (int_64)3617214756542218240
	*(($5 + [188])) = [0]
	$7 = ($2 + [16])
	*((($5 + [152]) + [24])) = $7
	*(($5 + [172])) = $7
	*($5 + [168]) = $2
	*($5 + [180 align=4]) = (int_64)0
	$2 = *($5 + [24])
	$7 = ( *($5 + [28]) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($7 + [24])
	$6 = (CASTING uint_64)(uint_32 $7)
	$10 = ($5 + [180])
	
.LOOP $label$95:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$95 }
	$7 = *($9)
	$7 = ( *(($5 + [68])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$2 = ($7 + $2)
	$6 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$96:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$96 }
	if ( ($2 == 0) ){ goto $label$98 }
	CALL $30($10, $2)
	$7 = *(($5 + [184]))
	$2 = *(($5 + [180]))
	goto $label$97 
	
.LABEL $label$98
	$7 = [0]
	$2 = [0]
	
.LABEL $label$97
	*($5 + [276]) = $2
	*($5 + [272]) = $2
	*($5 + [280]) = $7
	*($5 + [288]) = ($5 + [272])
	*($5 + [296]) = ($5 + [24])
	CALL $31(($5 + [296]), ($5 + [288]))
	CALL $32(($5 + [152]))
	$2 = *($5 + [180])
	if ( ($2 == 0) ){ goto $label$99 }
	*(($5 + [184])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$99
	$2 = *($5 + [168])
	if ( ($2 == 0) ){ goto $label$100 }
	*(($5 + [172])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$100
	if ( (*($5 + [64]) & [1]) ){ goto $label$104 }
	if ( (*($5 + [24]) & [1]) ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$104
	CALL _ZdlPv(*(($5 + [72])))
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$102 }
	
.LABEL $label$103
	CALL _ZdlPv(*($5 + [32]))
	if ( (*($5 + [120]) & [1]) ){ goto $label$101 }
	goto $label$94 
	
.LABEL $label$102
	if ( ((*($5 + [120]) & [1]) == 0) ){ goto $label$94 }
	
.LABEL $label$101
	CALL _ZdlPv(*(($5 + [128])))
	
.LABEL $label$94
	$2 = ($0 + [280])
	$6 = *(($0 + [296]))
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$107 }
	$6 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($2), *(($0 + [288])), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$106 }
	CALL $33($2, $7)
	*($5 + [28]) = [0]
	*($5 + [24]) = $2
	$6 = *(*(CALL $34(($5 + [24])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	*(($0 + [296])) = $6
	
.LABEL $label$107
	if ( (uint_64)($6 <= (int_64)-2) ){ goto $label$105 }
	CALL eosio_assert([0], [11175])
	$6 = *(($0 + [296]))
	goto $label$105 
	
.LABEL $label$106
	*(($0 + [296])) = (int_64)0
	
.LABEL $label$105
	*($5 + [24]) = $6
	$9 = CALL $139((($5 + [24]) + [8]), ($5 + [216]))
	$6 = CALL current_time()
	*($5 + [56]) = *($1)
	*($5 + [48]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$7 = CALL $139(($5 + [64]), $4)
	$6 = *(($3 + [8]))
	*(($5 + [88])) = $6
	*(($5 + [104])) = $6
	*($5 + [76]) = [99]
	*($5 + [112]) = [0]
	$6 = *($3)
	*($5 + [80]) = $6
	*($5 + [96]) = $6
	$6 = *($0)
	*($5 + [272]) = ($5 + [24])
	CALL $35(($5 + [152]), $2, $6, ($5 + [272]))
	if ( (*($7) & [1]) ){ goto $label$112 }
	if ( (*($9) & [1]) ){ goto $label$111 }
	goto $label$110 
	
.LABEL $label$112
	CALL _ZdlPv(*(($5 + [72])))
	if ( ((*($9) & [1]) == 0) ){ goto $label$110 }
	
.LABEL $label$111
	CALL _ZdlPv(*(($5 + [40])))
	if ( (*($5 + [216]) & [1]) ){ goto $label$109 }
	goto $label$108 
	
.LABEL $label$110
	if ( ((*($5 + [216]) & [1]) == 0) ){ goto $label$108 }
	
.LABEL $label$109
	CALL _ZdlPv(*(($5 + [224])))
	
.LABEL $label$108
	CALL $36(($5 + [240]), *($5 + [244]))
	
.LABEL $label$1
	$global$0 = ($5 + [304])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [480])
	$global$0 = $2
	*($2 + [336]) = [9507]
	*($2 + [340]) = CALL $194([9507])
	*($2 + [112]) = *($2 + [336])
	CALL require_auth(*(CALL $7(($2 + [344]), ($2 + [112]))))
	$3 = CALL current_time()
	$4 = (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) / (uint_32)[3600]))
	CALL eosio_assert((uint_64)(*($1) <= $4), [9520])
	$5 = ($0 + [32])
	$3 = *($1)
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	if ( ((int_32)*(($9 + [76])) == (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$5
	*($2 + [332]) = $9
	*($2 + [328]) = $5
	$8 = (($2 + [328]) | [4])
	goto $label$1 
	
.LABEL $label$2
	$8 = CALL db_find_i64(*($5), *(($0 + [40])), (int_64)-5915276457541632000, $3)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$6 }
	$9 = CALL $53($5, $8)
	if ( ((int_32)*($9 + [76]) == (int_32)$5) ){ goto $label$7 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$7
	*($2 + [332]) = $9
	*($2 + [328]) = $5
	$8 = (($2 + [328]) | [4])
	goto $label$1 
	
.LABEL $label$6
	$9 = [0]
	*($2 + [332]) = [0]
	*($2 + [328]) = $5
	$8 = (($2 + [328]) | [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9546])
	CALL eosio_assert((*($9 + [72]) == 0), [9563])
	$3 = *($9 + [8])
	CALL __multi3(($2 + [96]), $3, (int_64)$3 >> (int_64)63), (int_64)14, (int_64)0)
	$10 = *(($9 + [16]))
	$3 = *(($2 + [104]))
	$11 = *($2 + [96])
	if ( (( (uint_64)($11 <= (int_64)4611686018427387904) ? ((int_64)$3 < (int_64)0) : (int_64)($3 == 0) ) == 0) ){ goto $label$9 }
	if ( ( ((uint_64)$11 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$3 > (int_64)-1) : ((int_64)$3 == (int_64)-1) ) ){ goto $label$8 }
	CALL eosio_assert([0], [10584])
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [10560])
	
.LABEL $label$8
	*($2 + [320]) = $10
	*($2 + [312]) = ((int_64)$11 / (int_64)1000)
	$8 = *($8)
	$3 = *($8 + [40])
	CALL __multi3(($2 + [80]), $3, (int_64)$3 >> (int_64)63), (int_64)14, (int_64)0)
	$3 = *(($8 + [48]))
	$11 = *(($2 + [88]))
	$10 = *($2 + [80])
	if ( (( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$11 < (int_64)0) : (int_64)($11 == 0) ) == 0) ){ goto $label$11 }
	if ( ( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$11 > (int_64)-1) : ((int_64)$11 == (int_64)-1) ) ){ goto $label$10 }
	CALL eosio_assert([0], [10584])
	goto $label$10 
	
.LABEL $label$11
	CALL eosio_assert([0], [10560])
	
.LABEL $label$10
	*($2 + [280]) = [8896]
	*($2 + [296]) = ((int_64)$10 / (int_64)1000)
	*($2 + [304]) = $3
	*($2 + [284]) = CALL $194([8896])
	*($2 + [72]) = *($2 + [280])
	CALL $7(($2 + [288]), ($2 + [72]))
	*($2 + [264]) = [8896]
	*($2 + [268]) = CALL $194([8896])
	*($2 + [64]) = *($2 + [264])
	CALL $7(($2 + [272]), ($2 + [64]))
	*($2 + [248]) = [8908]
	*($2 + [252]) = CALL $194([8908])
	*($2 + [56]) = *($2 + [248])
	CALL $7(($2 + [256]), ($2 + [56]))
	*($2 + [232]) = [8908]
	*($2 + [236]) = CALL $194([8908])
	*($2 + [48]) = *($2 + [232])
	CALL $7(($2 + [240]), ($2 + [48]))
	*($2 + [200]) = [8896]
	*($2 + [204]) = CALL $194([8896])
	*($2 + [40]) = *($2 + [200])
	$11 = *((($2 + [312]) + [8]))
	CALL $26(($2 + [216]), *(CALL $7(($2 + [208]), ($2 + [40]))), *($0), (uint_64)$11 >> (uint_64)(int_64)8))
	*($2 + [168]) = [8908]
	*($2 + [172]) = CALL $194([8908])
	*($2 + [32]) = *($2 + [168])
	CALL $26(($2 + [184]), *(CALL $7(($2 + [176]), ($2 + [32]))), *($0), (uint_64)$3 >> (uint_64)(int_64)8))
	if ( ((int_64)$11 == (int_64)*($2 + [224])) ){ goto $label$12 }
	CALL eosio_assert([0], [10501])
	$3 = *((($2 + [296]) + [8]))
	
.LABEL $label$12
	CALL eosio_assert(((int_64)*($2 + [216]) > (int_64)*($2 + [312])), [9593])
	if ( ((int_64)*($2 + [192]) == (int_64)$3) ){ goto $label$13 }
	CALL eosio_assert([0], [10501])
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*($2 + [184]) > (int_64)*($2 + [296])), [9615])
	*($2 + [167]) = [1]
	$8 = CALL $194([8993])
	if ( ($8 <= [8]) ){ goto $label$17 }
	CALL eosio_assert([0], [9847])
	goto $label$16 
	
.LABEL $label$17
	if ( ($8 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$3 = (int_64)0
	
.LOOP $label$18:
	$7 = *(($8 + [8992]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$19 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$19
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$18 }
	$11 = ((int_64)$3 << (int_64)8)
	goto $label$14 
	
.LABEL $label$15
	$11 = (int_64)0
	
.LABEL $label$14
	$3 = (uint_64)$11 >> (uint_64)(int_64)8)
	$10 = ((int_64)$11 | (int_64)4)
	$8 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$11 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$3 = $11
	$7 = $8
	$8 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$3 = $11
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$24 }
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	CALL eosio_assert([0], [10481])
	
.LABEL $label$20
	$8 = CALL $194([8997])
	if ( ($8 <= [8]) ){ goto $label$28 }
	CALL eosio_assert([0], [9847])
	goto $label$27 
	
.LABEL $label$28
	if ( ($8 == 0) ){ goto $label$26 }
	
.LABEL $label$27
	$3 = (int_64)0
	
.LOOP $label$29:
	$7 = *(($8 + [8996]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$30 }
	CALL eosio_assert([0], [9892])
	
.LABEL $label$30
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$29 }
	$11 = ((int_64)$3 << (int_64)8)
	goto $label$25 
	
.LABEL $label$26
	$11 = (int_64)0
	
.LABEL $label$25
	$3 = (uint_64)$11 >> (uint_64)(int_64)8)
	$12 = ((int_64)$11 | (int_64)4)
	$8 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$11 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$3 = $11
	$7 = $8
	$8 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	$3 = $11
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$32 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$35 }
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	CALL eosio_assert([0], [10481])
	
.LABEL $label$31
	*(($2 + [360])) = [0]
	*($2 + [352]) = (int_64)0
	$8 = CALL $194([9637])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$36 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$39 }
	*($2 + [352]) = ($8 << [1])
	$7 = (($2 + [352]) | [1])
	if ( $8 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$9 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($2 + [352]) = ($9 | [1])
	*($2 + [360]) = $7
	*($2 + [356]) = $8
	
.LABEL $label$38
	CALL memcpy($7, [9637], $8)
	
.LABEL $label$37
	*(($7 + $8)) = [0]
	CALL $153(($2 + [456]), *($1))
	$8 = *($2 + [456])
	$7 = ($8 & [1])
	$8 = CALL $148(($2 + [352]), ( *($2 + [464]) ? (($2 + [456]) | [1]) : $7 ), ( *($2 + [460]) ? uint_32($8 >> [1]) : $7 ))
	$7 = ($8 + [8])
	*((($2 + [152]) + [8])) = *($7)
	*($2 + [152]) = *($8)
	*($8) = (int_64)0
	*($7) = [0]
	if ( ((*($2 + [456]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*((($2 + [456]) + [8])))
	
.LABEL $label$40
	if ( ((*($2 + [352]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*($2 + [360]))
	
.LABEL $label$41
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$44 }
	
.LOOP $label$46:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$4) ){ goto $label$45 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$45
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$44 }
	if ( ((int_32)*(($9 + [76])) == (int_32)$5) ){ goto $label$47 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$47
	if ( $9 ){ goto $label$42 }
	goto $label$43 
	
.LABEL $label$44
	$8 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-5915276457541632000, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$43 }
	$9 = CALL $53($5, $8)
	if ( ((int_32)*($9 + [76]) == (int_32)$5) ){ goto $label$42 }
	CALL eosio_assert([0], [9964])
	goto $label$42 
	
.LABEL $label$43
	$11 = *($0)
	if ( ((int_64)*(($0 + [32])) == (int_64)CALL current_receiver()) ){ goto $label$48 }
	CALL eosio_assert([0], [10609])
	
.LABEL $label$48
	$9 = CALL _Znwj([88])
	CALL $55($9)
	*($9 + [76]) = $5
	*($9) = $4
	*($2 + [440]) = (($2 + [352]) + [73])
	*($2 + [436]) = ($2 + [352])
	*($2 + [432]) = ($2 + [352])
	*($2 + [448]) = ($2 + [432])
	*($2 + [460]) = ($9 + [8])
	*($2 + [456]) = $9
	*($2 + [464]) = ($9 + [24])
	*($2 + [468]) = ($9 + [40])
	*($2 + [472]) = ($9 + [56])
	*($2 + [476]) = ($9 + [72])
	CALL $62(($2 + [456]), ($2 + [448]))
	$3 = *($9)
	$7 = CALL db_store_i64(*(($0 + [40])), (int_64)-5915276457541632000, $11, $3, ($2 + [352]), [73])
	*($9 + [80]) = $7
	$8 = ($0 + [48])
	if ( (uint_64)($3 <= *($8)) ){ goto $label$49 }
	*($8) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$49
	*($2 + [456]) = $9
	$3 = *($9)
	*($2 + [352]) = $3
	*($2 + [432]) = $7
	$6 = ($0 + [60])
	$8 = *($6)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [64]))) ){ goto $label$51 }
	*($8 + [8]) = $3
	*($8 + [16]) = $7
	*($2 + [456]) = [0]
	*($8) = $9
	*($6) = ($8 + [24])
	$8 = *($2 + [456])
	*($2 + [456]) = [0]
	if ( $8 ){ goto $label$50 }
	goto $label$42 
	
.LABEL $label$51
	CALL $57(($0 + [56]), ($2 + [456]), ($2 + [352]), ($2 + [432]))
	$8 = *($2 + [456])
	*($2 + [456]) = [0]
	if ( ($8 == 0) ){ goto $label$42 }
	
.LABEL $label$50
	CALL _ZdlPv($8)
	
.LABEL $label$42
	if ( ((int_64)*(($2 + [320])) == (int_64)$10) ){ goto $label$52 }
	CALL eosio_assert([0], [10501])
	
.LABEL $label$52
	if ( ((int_64)*($2 + [312]) > (int_64)99999) ){ goto $label$53 }
	*($2 + [352]) = ($2 + [328])
	if ( $9 ){ goto $label$54 }
	CALL eosio_assert([0], [10666])
	
.LABEL $label$54
	CALL $63($5, $9, ($2 + [352]))
	*($2 + [167]) = [2]
	
.LABEL $label$53
	if ( ((int_64)*(($2 + [304])) == (int_64)$12) ){ goto $label$55 }
	CALL eosio_assert([0], [10501])
	
.LABEL $label$55
	if ( ((int_64)*($2 + [296]) > (int_64)9999999) ){ goto $label$60 }
	*($2 + [352]) = ($2 + [328])
	if ( $9 ){ goto $label$61 }
	CALL eosio_assert([0], [10666])
	
.LABEL $label$61
	CALL $64($5, $9, ($2 + [352]))
	if ( ((int_32)*($2 + [167]) != (int_32)[2]) ){ goto $label$59 }
	*($2 + [167]) = [4]
	goto $label$56 
	
.LABEL $label$60
	$8 = *($2 + [167])
	if ( ((int_32)$8 == (int_32)[3]) ){ goto $label$58 }
	if ( ((int_32)$8 == (int_32)[2]) ){ goto $label$57 }
	if ( ((int_32)$8 != (int_32)[1]) ){ goto $label$56 }
	*($2 + [144]) = [9507]
	*($2 + [148]) = CALL $194([9507])
	*($2 + [16]) = *($2 + [144])
	CALL $65($0, CALL $7(($2 + [352]), ($2 + [16])), ($2 + [312]), ($2 + [152]))
	*($2 + [136]) = [9507]
	*($2 + [140]) = CALL $194([9507])
	*($2 + [8]) = *($2 + [136])
	CALL $65($0, CALL $7(($2 + [352]), ($2 + [8])), ($2 + [296]), ($2 + [152]))
	goto $label$56 
	
.LABEL $label$59
	*($2 + [167]) = [3]
	
.LABEL $label$58
	*($2 + [120]) = [9507]
	*($2 + [124]) = CALL $194([9507])
	*($2) = *($2 + [120])
	CALL $65($0, CALL $7(($2 + [352]), $2), ($2 + [312]), ($2 + [152]))
	goto $label$56 
	
.LABEL $label$57
	*($2 + [128]) = [9507]
	*($2 + [132]) = CALL $194([9507])
	*($2 + [24]) = *($2 + [128])
	CALL $65($0, CALL $7(($2 + [352]), ($2 + [24])), ($2 + [296]), ($2 + [152]))
	
.LABEL $label$56
	$8 = *($2 + [332])
	*($2 + [352]) = ($2 + [167])
	if ( $8 ){ goto $label$62 }
	CALL eosio_assert([0], [10666])
	
.LABEL $label$62
	CALL $66($5, $8, ($2 + [352]))
	if ( ((*($2 + [152]) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*($2 + [160]))
	
.LABEL $label$63
	$8 = [0]
	$3 = (CASTING uint_64)(uint_32 $5)
	$7 = CALL db_lowerbound_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-5915276457541632000, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$64 }
	$8 = CALL $53($5, $7)
	
.LABEL $label$64
	*($2 + [352]) = $3
	if ( (uint_64)((int_64))(*(*(CALL $67(($2 + [352])) + [4])) - *($8)) <= (int_64)169) ){ goto $label$65 }
	*($2 + [360]) = (int_64)4923678863589618176
	$3 = *($0)
	*($2 + [352]) = $3
	*(($7 = CALL _Znwj([16]))) = $3
	*($7 + [8]) = (int_64)3617214756542218240
	*(($2 + [388])) = [0]
	$9 = ($7 + [16])
	*(($2 + [376])) = $9
	*(($2 + [372])) = $9
	*($2 + [368]) = $7
	*($2 + [380 align=4]) = (int_64)0
	CALL $30(($2 + [380]), [8])
	$7 = *($2 + [380])
	if ( ((int_32)(*(($2 + [384])) - $7) > (int_32)[7]) ){ goto $label$66 }
	CALL eosio_assert([0], [10660])
	
.LABEL $label$66
	CALL memcpy($7, $8, [8])
	CALL $32(($2 + [352]))
	$8 = *($2 + [380])
	if ( ($8 == 0) ){ goto $label$67 }
	*(($2 + [384])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$67
	$8 = *($2 + [368])
	if ( ($8 == 0) ){ goto $label$65 }
	*(($2 + [372])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$65
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$36
	CALL $138(($2 + [352]))
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [416])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $200($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [400]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10038])
	
.LABEL $label$5
	CALL memcpy(($4 + [400]), $2, [8])
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $23(($4 + [40]), $0, $1, ($4 + [8]))
	*($4 + [408]) = *($4 + [400])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 ($4 + [408])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $203($2)
	
.LABEL $label$7
	CALL $24($8)
	$global$0 = ($4 + [416])
	return [1]
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = [1]
	if ( CALL has_auth(*($0)) ){ goto $label$1 }
	*($2 + [48]) = [9234]
	*($2 + [52]) = CALL $194([9234])
	*($2) = *($2 + [48])
	$3 = CALL has_auth(*(CALL $7(($2 + [56]), $2)))
	
.LABEL $label$1
	CALL eosio_assert($3, [9247])
	*((($2 + [8]) + [32])) = *(($1 + [32]))
	*((($2 + [8]) + [24])) = *(($1 + [24]))
	*((($2 + [8]) + [16])) = *(($1 + [16]))
	*((($2 + [8]) + [8])) = *(($1 + [8]))
	*($2 + [8]) = *($1)
	CALL $71(($0 + [224]), ($2 + [8]), *($0))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [512])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $200($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [392]) + [32]))) = [0]
	*(($9 = (($4 + [392]) + [24]))) = (int_64)0
	*(($10 = (($4 + [392]) + [16]))) = (int_64)0
	*(($11 = (($4 + [392]) + [8]))) = (int_64)0
	*($4 + [392]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[33]) ){ goto $label$4 }
	CALL eosio_assert([0], [10038])
	
.LABEL $label$4
	CALL memcpy(($4 + [392]), $2, [34])
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [34])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$12 = CALL $23(($4 + [32]), $0, $1, $4)
	*(($3 = (($4 + [432]) + [32]))) = *($8)
	*(($8 = (($4 + [432]) + [24]))) = *($9)
	*(($9 = (($4 + [432]) + [16]))) = *($10)
	*(($10 = (($4 + [432]) + [8]))) = *($11)
	*($4 + [432]) = *($4 + [392])
	*((($4 + [472]) + [32])) = *($3)
	*((($4 + [472]) + [24])) = *($8)
	*((($4 + [472]) + [16])) = *($9)
	*((($4 + [472]) + [8])) = *($10)
	*($4 + [472]) = *($4 + [432])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [472])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $203($2)
	
.LABEL $label$6
	CALL $24($12)
	$global$0 = ($4 + [512])
	return [1]
}

void .FUNC $185 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	
.LABEL $label$18
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$16
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$15
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$8
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$2
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($3, *($1))
	*($0 + [8]) = *(($3 + [8]))
	*($0) = *($3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$4 = *($1)
	*($0 + [8]) = *($1 + [8])
	*($0) = $4
	$global$0 = ($3 + [16])
	$1
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [528])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $200($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [440]))) = (int_64)0
	*(($4 + [456])) = [0]
	*($4 + [424]) = (int_64)0
	*($4 + [416]) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [448]) = (int_64)0
	*($4 + [404]) = $2
	*($4 + [400]) = $2
	*($4 + [408]) = ($2 + $7)
	*($4 + [496]) = ($4 + [400])
	*($4 + [40]) = ($4 + [416])
	CALL $22(($4 + [40]), ($4 + [496]))
	$8 = *($4 + [408])
	*((($4 + [24]) + [8])) = $8
	*((($4 + [8]) + [8])) = $8
	$9 = *($4 + [400])
	*($4 + [8]) = $9
	*($4 + [24]) = $9
	$10 = CALL $23(($4 + [40]), $0, $1, ($4 + [8]))
	*(($8 = (($4 + [480]) + [8]))) = *($3)
	*($4 + [480]) = *($4 + [432])
	$0 = *($4 + [424])
	$1 = *($4 + [416])
	$3 = CALL $139(($4 + [464]), ($4 + [448]))
	*((($4 + [496]) + [8])) = *($8)
	*($4 + [520]) = $1
	*($4 + [512]) = $0
	*($4 + [496]) = *($4 + [480])
	$8 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	CALL void $8((int_32 ($4 + [520])), (int_32 ($4 + [512])), (int_32 ($4 + [496])), (int_32 $3), (int_32 $6))
	if ( ((*($4 + [464]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $203($2)
	
.LABEL $label$6
	CALL $24($10)
	if ( ((*($4 + [448]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [456])))
	
.LABEL $label$7
	$global$0 = ($4 + [528])
	return [1]
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [16]) = [9451]
	*($2 + [20]) = CALL $194([9451])
	*($2 + [8]) = *($2 + [16])
	$3 = [1]
	if ( CALL has_auth(*(CALL $7(($2 + [24]), ($2 + [8])))) ){ goto $label$1 }
	$3 = CALL has_auth(*($0))
	
.LABEL $label$1
	CALL eosio_assert($3, [9671])
	CALL $42(($0 + [72]), $1, *($0))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $184 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_64 $29
	int_64 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	$5 = ($global$0 - [8128])
	$global$0 = $5
	$6 = (($5 + [704]) | [8])
	$7 = (($5 + [704]) | [9])
	$8 = ([-2] - ($5 + [704]))
	$9 = ($5 + [7664])
	$10 = (($5 + [692]) + [12])
	$11 = (($5 + [352]) + [54])
	$12 = (($5 + [352]) + [55])
	$13 = [0]
	$14 = [0]
	$15 = [0]
	
.LOOP $label$4:
	if ( ($0 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$1 = *($17)
	if ( ($1 == 0) ){ goto $label$1 }
	$15 = $17
	$1 = ($1 & [255])
	if ( ($1 == 0) ){ goto $label$24 }
	
.LOOP $label$25:
	if ( ((int_32)$1 == (int_32)[37]) ){ goto $label$23 }
	$1 = *($15 + [1])
	$15 = ($15 + [1])
	$1 = ($1 & [255])
	if ( $1 ){ goto $label$25 }
	
.LABEL $label$24
	$1 = $15
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$22 }
	goto $label$3 
	
.LABEL $label$23
	$18 = $15
	
.LOOP $label$27:
	if ( ((int_32)*(($18 + [1])) != (int_32)[37]) ){ goto $label$26 }
	$15 = ($15 + [1])
	$19 = *($18 + [2])
	$1 = ($18 + [2])
	$18 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$27 }
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$22 
	
.LABEL $label$26
	$1 = $18
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	
.LABEL $label$22
	if ( (*($0) & [32]) ){ goto $label$28 }
	CALL $174($17, $15, $0)
	
.LABEL $label$28
	if ( $15 ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	
.LOOP $label$29:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$15 = *($17)
	if ( ($15 == 0) ){ goto $label$31 }
	$1 = $17
	$15 = ($15 & [255])
	if ( ($15 == 0) ){ goto $label$33 }
	
.LOOP $label$34:
	if ( ((int_32)$15 == (int_32)[37]) ){ goto $label$32 }
	$15 = *($1 + [1])
	$1 = ($1 + [1])
	$15 = ($15 & [255])
	if ( $15 ){ goto $label$34 }
	
.LABEL $label$33
	$18 = ([2147483647] - $14)
	$15 = ($1 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$32
	$18 = $1
	$15 = $1
	
.LOOP $label$36:
	if ( ((int_32)*(($15 + [1])) != (int_32)[37]) ){ goto $label$35 }
	$18 = ($18 + [1])
	$19 = *($15 + [2])
	$1 = ($15 + [2])
	$15 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$36 }
	$18 = ([2147483647] - $14)
	$15 = ($18 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$30 
	
.LABEL $label$35
	$1 = $15
	$18 = ([2147483647] - $14)
	$15 = ($18 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$31
	if ( $0 ){ goto $label$1 }
	if ( ($13 == 0) ){ goto $label$46 }
	$1 = [1]
	$15 = *($4 + [4])
	if ( ($15 == 0) ){ goto $label$37 }
	CALL $185(($3 + [16]), $15, $2)
	$15 = *($4 + [8])
	if ( ($15 == 0) ){ goto $label$45 }
	CALL $185(($3 + [32]), $15, $2)
	$15 = *($4 + [12])
	if ( ($15 == 0) ){ goto $label$44 }
	CALL $185(($3 + [48]), $15, $2)
	$15 = *($4 + [16])
	if ( ($15 == 0) ){ goto $label$43 }
	CALL $185(($3 + [64]), $15, $2)
	$15 = *($4 + [20])
	if ( ($15 == 0) ){ goto $label$42 }
	CALL $185(($3 + [80]), $15, $2)
	$15 = *($4 + [24])
	if ( ($15 == 0) ){ goto $label$41 }
	CALL $185(($3 + [96]), $15, $2)
	$15 = *($4 + [28])
	if ( ($15 == 0) ){ goto $label$40 }
	CALL $185(($3 + [112]), $15, $2)
	$15 = *($4 + [32])
	if ( ($15 == 0) ){ goto $label$39 }
	CALL $185(($3 + [128]), $15, $2)
	$15 = *($4 + [36])
	if ( ($15 == 0) ){ goto $label$38 }
	CALL $185(($3 + [144]), $15, $2)
	$global$0 = ($5 + [8128])
	return [1]
	
.LABEL $label$46
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$45
	$1 = [2]
	goto $label$37 
	
.LABEL $label$44
	$1 = [3]
	goto $label$37 
	
.LABEL $label$43
	$1 = [4]
	goto $label$37 
	
.LABEL $label$42
	$1 = [5]
	goto $label$37 
	
.LABEL $label$41
	$1 = [6]
	goto $label$37 
	
.LABEL $label$40
	$1 = [7]
	goto $label$37 
	
.LABEL $label$39
	$1 = [8]
	goto $label$37 
	
.LABEL $label$38
	$1 = [9]
	
.LABEL $label$37
	$15 = ($4 + ($1 << [2]))
	
.LOOP $label$47:
	if ( *($15) ){ goto $label$18 }
	$15 = ($15 + [4])
	$14 = [1]
	$1 = ($1 + [1])
	if ( ((uint_32)$1 <= (uint_32)[9]) ){ goto $label$47 }
	goto $label$1 
	
.LABEL $label$30
	if ( $15 ){ goto $label$29 }
	
.LABEL $label$19
	$15 = ($1 + [1])
	$16 = *($1 + [1])
	$20 = ($16 + [-48])
	if ( ((uint_32)$20 > (uint_32)[9]) ){ goto $label$50 }
	$19 = ((int_32)*($1 + [2]) == (int_32)[36])
	$15 = ( ($1 + [3]) ? $15 : $19 )
	$21 = ( $20 ? [-1] : $19 )
	$13 = ( [1] ? $13 : $19 )
	$22 = [0]
	$16 = *(($1 + ( [3] ? [1] : $19 )))
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	goto $label$49 
	
.LABEL $label$50
	$21 = [-1]
	$22 = [0]
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	
.LABEL $label$49
	$1 = ([1] << $1)
	if ( (($1 & [75913]) == 0) ){ goto $label$48 }
	$19 = ($15 + [1])
	$22 = [0]
	
.LOOP $label$51:
	$22 = ($1 | $22)
	$15 = $19
	$16 = *($15)
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 >= (uint_32)[32]) ){ goto $label$48 }
	$19 = ($15 + [1])
	$1 = ([1] << $1)
	if ( ($1 & [75913]) ){ goto $label$51 }
	
.LABEL $label$48
	if ( ((int_32)$16 != (int_32)[42]) ){ goto $label$57 }
	$1 = (*($15 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$56 }
	if ( ((int_32)*($15 + [2]) != (int_32)[36]) ){ goto $label$56 }
	*(($4 + ($1 << [2]))) = [10]
	$23 = ($15 + [3])
	$13 = [1]
	$20 = *((($3 + (*(($15 + [1])) << [4])) + [-768]))
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	goto $label$55 
	
.LABEL $label$57
	$20 = [0]
	$19 = ($16 + [-48])
	if ( ((uint_32)$19 > (uint_32)[9]) ){ goto $label$54 }
	$1 = [0]
	
.LOOP $label$58:
	$20 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$59 }
	$1 = ((int_32)$1 * (int_32)[10])
	$20 = ( [-1] ? ($1 + $19) : ((int_32)$19 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$59
	$19 = *($15 + [1])
	$23 = ($15 + [1])
	$15 = $23
	$1 = $20
	$19 = ($19 + [-48])
	if ( ($19 <= [10]) ){ goto $label$58 }
	if ( ((int_32)$20 >= (int_32)[0]) ){ goto $label$52 }
	goto $label$3 
	
.LABEL $label$56
	if ( $13 ){ goto $label$18 }
	$23 = ($15 + [1])
	if ( ($0 == 0) ){ goto $label$53 }
	$15 = *($2)
	*($2) = ($15 + [4])
	$13 = [0]
	$20 = *($15)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	
.LABEL $label$55
	$20 = ([0] - $20)
	$22 = ($22 | [8192])
	goto $label$52 
	
.LABEL $label$54
	$23 = $15
	goto $label$52 
	
.LABEL $label$53
	$13 = [0]
	$20 = [0]
	
.LABEL $label$52
	$15 = [0]
	$16 = [-1]
	if ( ((int_32)*($23) != (int_32)[46]) ){ goto $label$66 }
	$19 = *($23 + [1])
	if ( ((int_32)$19 != (int_32)[42]) ){ goto $label$65 }
	$1 = (*($23 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$64 }
	if ( ((int_32)*($23 + [3]) != (int_32)[36]) ){ goto $label$64 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($23 + [4])
	$16 = *((($3 + (*(($23 + [2])) << [4])) + [-768]))
	goto $label$61 
	
.LABEL $label$66
	$1 = $23
	$24 = [0]
	goto $label$60 
	
.LABEL $label$65
	$1 = ($23 + [1])
	$25 = ($19 + [-48])
	if ( ((uint_32)$25 > (uint_32)[9]) ){ goto $label$63 }
	$23 = [0]
	$19 = $1
	
.LOOP $label$67:
	$16 = [-1]
	if ( ((uint_32)$23 > (uint_32)[214748364]) ){ goto $label$68 }
	$1 = ((int_32)$23 * (int_32)[10])
	$16 = ( [-1] ? ($1 + $25) : ((int_32)$25 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$68
	$24 = [1]
	$25 = *($19 + [1])
	$1 = ($19 + [1])
	$19 = $1
	$23 = $16
	$25 = ($25 + [-48])
	if ( ($25 <= [10]) ){ goto $label$67 }
	goto $label$60 
	
.LABEL $label$64
	if ( $13 ){ goto $label$18 }
	$1 = ($23 + [2])
	if ( ($0 == 0) ){ goto $label$62 }
	$19 = *($2)
	*($2) = ($19 + [4])
	$16 = *($19)
	goto $label$61 
	
.LABEL $label$63
	$24 = [1]
	$16 = [0]
	goto $label$60 
	
.LABEL $label$62
	$16 = [0]
	
.LABEL $label$61
	$24 = ((int_32)uint_32($16 >> [31]) ^ (int_32)[1])
	
.LABEL $label$60
	
.LOOP $label$69:
	$19 = $15
	$15 = (*($1) + [-65])
	if ( ((uint_32)$15 > (uint_32)[57]) ){ goto $label$18 }
	$1 = ($1 + [1])
	$15 = *(((((int_32)$19 * (int_32)[58]) + $15) + [22032]))
	if ( (($15 + [-1]) <= [8]) ){ goto $label$69 }
	if ( ($15 == 0) ){ goto $label$18 }
	if ( ((int_32)$15 != (int_32)[27]) ){ goto $label$72 }
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$18 }
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$72
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$73 }
	*(($4 + ($21 << [2]))) = $15
	$15 = ($3 + ($21 << [4]))
	*($5 + [424]) = *(($15 + [8]))
	*($5 + [416]) = *($15)
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$73
	if ( ($0 == 0) ){ goto $label$70 }
	CALL $185(($5 + [416]), $15, $2)
	
.LABEL $label$71
	$23 = ($22 & [-65537])
	$21 = ( $23 ? $22 : ($22 & [8192]) )
	$26 = [0]
	$27 = [8494]
	$15 = *(($1 + [-1]))
	$28 = ( ( ($15 & [-33]) ? $15 : ((int_32)($15 & [15]) == (int_32)[3]) ) ? $15 : $19 )
	$15 = ($28 + [-65])
	if ( ((uint_32)$15 > (uint_32)[55]) ){ goto $label$9 }
	$22 = $12
	goto $label$101 
	
.LABEL $label$101
	if ( ((int_32)$16 > (int_32)[-1]) ){ goto $label$102 }
	if ( $24 ){ goto $label$3 }
	
.LABEL $label$102
	$29 = *($5 + [424])
	$30 = *($5 + [416])
	*($5 + [748]) = [0]
	if ( (CALL $175($30, $29) == 0) ){ goto $label$103 }
	$31 = [1]
	$32 = [8659]
	$29 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	if ( ((int_32)CALL $176($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$103
	if ( ($21 & [2048]) ){ goto $label$99 }
	$31 = ($21 & [1])
	$32 = ( [8665] ? [8660] : $31 )
	if ( ((int_32)CALL $176($30, $29) > (int_32)[1]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$100
	$29 = *($5 + [416])
	if ( ((int_64)$29 <= (int_64)-1) ){ goto $label$86 }
	if ( ($21 & [2048]) ){ goto $label$84 }
	$26 = ($21 & [1])
	$27 = ( [8496] ? [8494] : $26 )
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$99
	$31 = [1]
	$32 = [8662]
	if ( ((int_32)CALL $176($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$98
	*((($5 + [344]) + [4])) = [0]
	*($5 + [344]) = *($5 + [416])
	*($5 + [416]) = ($5 + [344])
	$16 = [-1]
	$17 = ($5 + [344])
	goto $label$96 
	
.LABEL $label$97
	$17 = *($5 + [416])
	if ( ($16 == 0) ){ goto $label$80 }
	
.LABEL $label$96
	$15 = [0]
	$18 = $17
	
.LOOP $label$104:
	$19 = *($18)
	if ( ($19 == 0) ){ goto $label$82 }
	$19 = CALL $178(($5 + [340]), $19)
	$22 = ((int_32)$19 < (int_32)[0])
	if ( $22 ){ goto $label$83 }
	if ( ((uint_32)$19 > (uint_32)($16 - $15)) ){ goto $label$83 }
	$18 = ($18 + [4])
	$15 = ($19 + $15)
	if ( ((uint_32)$16 > (uint_32)$15) ){ goto $label$104 }
	goto $label$82 
	
.LABEL $label$95
	*((($5 + [352]) + [54])) = *($5 + [416])
	$16 = [1]
	$17 = $11
	$22 = $12
	$21 = $23
	goto $label$8 
	
.LABEL $label$94
	$17 = CALL $181(*(CALL $156()))
	goto $label$88 
	
.LABEL $label$93
	$15 = [0]
	$18 = ($19 & [255])
	if ( ((uint_32)$18 > (uint_32)[7]) ){ goto $label$4 }
	goto $label$105 
	
.LABEL $label$105
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$92
	$17 = $12
	$29 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$106 }
	$17 = $12
	
.LOOP $label$107:
	*(($17 = ($17 + [-1]))) = (((CASTING uint_32)(uint_64 $29) & [7]) | [48])
	$29 = (uint_64)$29 >> (uint_64)(int_64)3
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$107 }
	
.LABEL $label$106
	if ( ($21 & [8]) ){ goto $label$81 }
	$26 = [0]
	$27 = [8494]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$91
	$16 = ( $16 ? [8] : ((uint_32)$16 > (uint_32)[8]) )
	$21 = ($21 | [8])
	$28 = [120]
	
.LABEL $label$90
	$26 = [0]
	$27 = [8494]
	$29 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$108 }
	$15 = ($28 & [32])
	$17 = $12
	
.LOOP $label$109:
	*(($17 = ($17 + [-1]))) = (*((((CASTING uint_32)(uint_64 $29) & [15]) + [22496])) | $15)
	$29 = (uint_64)$29 >> (uint_64)(int_64)4
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$109 }
	if ( (($21 & [8]) == 0) ){ goto $label$12 }
	if ( (int_64)(*($5 + [416]) == 0) ){ goto $label$12 }
	$27 = (int_32($28 >> [4]) + [8494])
	$26 = [2]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$108
	$17 = $12
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$89
	$15 = *($5 + [416])
	$17 = ( $15 ? [8523] : $15 )
	
.LABEL $label$88
	$26 = [0]
	$15 = CALL $195($17, ( [2147483647] ? $16 : ((int_32)$16 < (int_32)[0]) ))
	$22 = ($17 + $15)
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$85 }
	$21 = $23
	$16 = $15
	goto $label$8 
	
.LABEL $label$87
	$26 = [0]
	$27 = [8494]
	$29 = *($5 + [416])
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$86
	$29 = (int_64)
	*($5 + [416]) = $29((int_64)0 - $29))
	$26 = [1]
	$27 = [8494]
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$85
	$21 = $23
	$16 = $15
	if ( (*($22) == 0) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$84
	$26 = [1]
	$27 = [8495]
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$83
	if ( $22 ){ goto $label$2 }
	
.LABEL $label$82
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$3 }
	$23 = ($21 & [73728])
	if ( $23 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$81
	$15 = ($12 - $17)
	$27 = ( [8494] ? [8499] : ((int_32)$16 > (int_32)$15) )
	$26 = ((int_32)$16 <= (int_32)$15)
	goto $label$12 
	
.LABEL $label$80
	$15 = [0]
	$23 = ($21 & [73728])
	if ( ($23 == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$79
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$78
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$77
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$76
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$75
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$74
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$70
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$18
	*(CALL $156()) = [22]
	goto $label$2 
	
.LABEL $label$17
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$16 }
	$18 = ($25 <= [256])
	$25 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $25 ? [256] : $18 ))
	$16 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$111 }
	$18 = ($19 == 0)
	$19 = $25
	
.LOOP $label$112:
	if ( (($18 & [1]) == 0) ){ goto $label$113 }
	CALL $174(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$113
	$22 = ($16 & [32])
	$18 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$112 }
	if ( $22 ){ goto $label$16 }
	$25 = ($25 & [255])
	goto $label$110 
	
.LABEL $label$111
	if ( $19 ){ goto $label$16 }
	
.LABEL $label$110
	CALL $174(($5 + [432]), $25, $0)
	
.LABEL $label$16
	if ( ($15 == 0) ){ goto $label$114 }
	$18 = [0]
	
.LOOP $label$115:
	$19 = *($17)
	if ( ($19 == 0) ){ goto $label$114 }
	$19 = CALL $178(($5 + [340]), $19)
	$18 = ($19 + $18)
	if ( ((uint_32)$18 > (uint_32)$15) ){ goto $label$114 }
	if ( (*($0) & [32]) ){ goto $label$116 }
	CALL $174(($5 + [340]), $19, $0)
	
.LABEL $label$116
	$17 = ($17 + [4])
	if ( ($18 <= $15) ){ goto $label$115 }
	
.LABEL $label$114
	if ( ((int_32)$23 != (int_32)[8192]) ){ goto $label$117 }
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$117 }
	$18 = ($22 <= [256])
	$22 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$119 }
	$18 = ($19 == 0)
	$19 = $22
	
.LOOP $label$120:
	if ( (($18 & [1]) == 0) ){ goto $label$121 }
	CALL $174(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$121
	$16 = ($17 & [32])
	$18 = ($16 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$120 }
	if ( $16 ){ goto $label$117 }
	$22 = ($22 & [255])
	goto $label$118 
	
.LABEL $label$119
	if ( $19 ){ goto $label$117 }
	
.LABEL $label$118
	CALL $174(($5 + [432]), $22, $0)
	
.LABEL $label$117
	$15 = ( $20 ? $15 : ((int_32)$20 > (int_32)$15) )
	goto $label$4 
	
.LABEL $label$15
	$30 = $29
	$17 = $12
	goto $label$13 
	
.LABEL $label$14
	$17 = $12
	
.LOOP $label$122:
	$30 = ((uint_64)$29 / (uint_64)(int_64)10)
	*(($17 = ($17 + [-1]))) = ((CASTING uint_32)(uint_64 (int_64))($29 - ((int_64)$30 * (int_64)10))) | [48])
	$15 = ((uint_64)$29 > (uint_64)(int_64)42949672959)
	$29 = $30
	if ( $15 ){ goto $label$122 }
	
.LABEL $label$13
	$15 = (CASTING uint_32)(uint_64 $30)
	if ( ($15 == 0) ){ goto $label$12 }
	
.LOOP $label$123:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$123 }
	
.LABEL $label$12
	if ( ($24 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$10
	$21 = ( ($21 & [-65537]) ? $21 : ((int_32)$16 > (int_32)[-1]) )
	$29 = *($5 + [416])
	if ( $16 ){ goto $label$124 }
	if ( ((int_64)($29 == 0) == 0) ){ goto $label$124 }
	$17 = $12
	$22 = $12
	$16 = [0]
	goto $label$8 
	
.LABEL $label$124
	$15 = (($12 - $17) + (int_64)($29 == 0))
	$16 = ( $16 ? $15 : ((int_32)$16 > (int_32)$15) )
	
.LABEL $label$9
	$22 = $12
	
.LABEL $label$8
	$24 = ($22 - $17)
	$28 = ( $24 ? $16 : ((int_32)$16 < (int_32)$24) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$3 }
	$25 = ($26 + $28)
	$15 = ( $25 ? $20 : ((int_32)$20 < (int_32)$25) )
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$125 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$125 }
	$18 = ($36 <= [256])
	$36 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $36 ? [256] : $18 ))
	$22 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$127 }
	$18 = ($19 == 0)
	$19 = $36
	
.LOOP $label$128:
	if ( (($18 & [1]) == 0) ){ goto $label$129 }
	CALL $174(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$129
	$23 = ($22 & [32])
	$18 = ($23 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$128 }
	if ( $23 ){ goto $label$125 }
	$36 = ($36 & [255])
	goto $label$126 
	
.LABEL $label$127
	if ( $19 ){ goto $label$125 }
	
.LABEL $label$126
	CALL $174(($5 + [432]), $36, $0)
	
.LABEL $label$125
	if ( (*($0) & [32]) ){ goto $label$130 }
	CALL $174($27, $26, $0)
	
.LABEL $label$130
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$131 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$131 }
	$18 = ($26 <= [256])
	$26 = ($15 - $25)
	CALL memset(($5 + [432]), [48], ( $26 ? [256] : $18 ))
	$22 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$133 }
	$18 = ($19 == 0)
	$19 = $26
	
.LOOP $label$134:
	if ( (($18 & [1]) == 0) ){ goto $label$135 }
	CALL $174(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$135
	$23 = ($22 & [32])
	$18 = ($23 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$134 }
	if ( $23 ){ goto $label$131 }
	$26 = ($26 & [255])
	goto $label$132 
	
.LABEL $label$133
	if ( $19 ){ goto $label$131 }
	
.LABEL $label$132
	CALL $174(($5 + [432]), $26, $0)
	
.LABEL $label$131
	if ( ((int_32)$24 >= (int_32)$16) ){ goto $label$136 }
	$18 = ($23 <= [256])
	$23 = ($28 - $24)
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $18 ))
	$16 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$138 }
	$18 = ($19 == 0)
	$19 = $23
	
.LOOP $label$139:
	if ( (($18 & [1]) == 0) ){ goto $label$140 }
	CALL $174(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$140
	$22 = ($16 & [32])
	$18 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$139 }
	if ( $22 ){ goto $label$136 }
	$23 = ($23 & [255])
	goto $label$137 
	
.LABEL $label$138
	if ( $19 ){ goto $label$136 }
	
.LABEL $label$137
	CALL $174(($5 + [432]), $23, $0)
	
.LABEL $label$136
	if ( (*($0) & [32]) ){ goto $label$141 }
	CALL $174($17, $24, $0)
	
.LABEL $label$141
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$4 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$4 }
	$18 = ($16 <= [256])
	$16 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$143 }
	$18 = ($19 == 0)
	$19 = $16
	
.LOOP $label$144:
	if ( (($18 & [1]) == 0) ){ goto $label$145 }
	CALL $174(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$145
	$20 = ($17 & [32])
	$18 = ($20 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$144 }
	if ( $20 ){ goto $label$4 }
	$16 = ($16 & [255])
	goto $label$142 
	
.LABEL $label$143
	if ( $19 ){ goto $label$4 }
	
.LABEL $label$142
	CALL $174(($5 + [432]), $16, $0)
	goto $label$4 
	
.LABEL $label$7
	$23 = CALL __unordtf2($30, $29, $30, $29)
	$16 = ($31 + [3])
	if ( ($21 & [8192]) ){ goto $label$146 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$146 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$148 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$149:
	if ( (($15 & [1]) == 0) ){ goto $label$150 }
	CALL $174(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$150
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$149 }
	if ( $17 ){ goto $label$146 }
	$22 = ($22 & [255])
	goto $label$147 
	
.LABEL $label$148
	if ( $18 ){ goto $label$146 }
	
.LABEL $label$147
	CALL $174(($5 + [432]), $22, $0)
	
.LABEL $label$146
	$15 = *($0)
	if ( ($15 & [32]) ){ goto $label$155 }
	CALL $174($32, $31, $0)
	if ( ((*($0) & [32]) == 0) ){ goto $label$154 }
	goto $label$153 
	
.LABEL $label$155
	if ( ($15 & [32]) ){ goto $label$153 }
	
.LABEL $label$154
	$15 = uint_32(($28 & [32]) >> [5])
	CALL $174(( ( [8744] ? [8751] : $15 ) ? ( [8711] ? [8737] : $15 ) : $23 ), [3], $0)
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }
	goto $label$152 
	
.LABEL $label$153
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }
	
.LABEL $label$152
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$151 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$157 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$158:
	if ( (($15 & [1]) == 0) ){ goto $label$159 }
	CALL $174(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$159
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$158 }
	if ( $17 ){ goto $label$151 }
	$22 = ($22 & [255])
	goto $label$156 
	
.LABEL $label$157
	if ( $18 ){ goto $label$151 }
	
.LABEL $label$156
	CALL $174(($5 + [432]), $22, $0)
	
.LABEL $label$151
	$15 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	goto $label$5 
	
.LABEL $label$6
	CALL $182(($5 + [320]), $30, $29, ($5 + [748]))
	$30 = *($5 + [328])
	$29 = *($5 + [320])
	CALL __addtf3(($5 + [304]), $29, $30, $29, $30)
	$30 = *((($5 + [304]) + [8]))
	$29 = *($5 + [304])
	if ( (CALL __eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$160 }
	*($5 + [748]) = (*($5 + [748]) + [-1])
	
.LABEL $label$160
	$33 = ($28 | [32])
	if ( ((int_32)$33 != (int_32)[97]) ){ goto $label$173 }
	$22 = ($28 & [32])
	$26 = ( ($32 + [9]) ? $32 : $22 )
	if ( ((uint_32)$16 > (uint_32)[26]) ){ goto $label$171 }
	if ( (([27] - $16) == 0) ){ goto $label$171 }
	$15 = ($16 + [-27])
	$34 = (int_64)4612248968380809216
	$35 = (int_64)0
	
.LOOP $label$174:
	CALL __multf3(($5 + [208]), $35, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($5 + [208]) + [8]))
	$35 = *($5 + [208])
	$15 = ($15 + [1])
	if ( $15 ){ goto $label$174 }
	if ( ((int_32)*($26) != (int_32)[45]) ){ goto $label$172 }
	CALL __subtf3(($5 + [160]), $29, ((int_64)$30 ^ (int_64)-9223372036854775808), $35, $34)
	CALL __addtf3(($5 + [144]), $35, $34, *($5 + [160]), *((($5 + [160]) + [8])))
	$30 = ((int_64)*((($5 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$29 = *($5 + [144])
	goto $label$171 
	
.LABEL $label$173
	$15 = ((int_32)$16 < (int_32)[0])
	if ( (CALL __netf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$176 }
	CALL __multf3(($5 + [288]), $29, $30, (int_64)0, (int_64)4619285842798575616)
	$22 = (*($5 + [748]) + [-28])
	*($5 + [748]) = $22
	$30 = *((($5 + [288]) + [8]))
	$29 = *($5 + [288])
	goto $label$175 
	
.LABEL $label$176
	$22 = *($5 + [748])
	
.LABEL $label$175
	$27 = ( [6] ? $16 : $15 )
	$36 = ( ($5 + [752]) ? $9 : ((int_32)$22 < (int_32)[0]) )
	$19 = $36
	
.LOOP $label$177:
	$15 = CALL __fixunstfsi($29, $30)
	CALL __floatunsitf(($5 + [272]), $15)
	CALL __subtf3(($5 + [256]), $29, $30, *($5 + [272]), *((($5 + [272]) + [8])))
	CALL __multf3(($5 + [240]), *($5 + [256]), *((($5 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($19) = $15
	$19 = ($19 + [4])
	$30 = *((($5 + [240]) + [8]))
	$29 = *($5 + [240])
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$177 }
	if ( ((int_32)$22 < (int_32)[1]) ){ goto $label$180 }
	$18 = $36
	
.LOOP $label$181:
	$17 = ( $22 ? [29] : ((int_32)$22 < (int_32)[29]) )
	$15 = ($19 + [-4])
	if ( ($15 <= $18) ){ goto $label$182 }
	$30 = (CASTING uint_64)(uint_32 $17)
	$29 = (int_64)0
	
.LOOP $label$183:
	$29 = ((uint_64)$29 / (uint_64)(int_64)1000000000)
	$29 = ((int_64)((int_64)*($15) << (int_64)$30) + (int_64)((int_64)$29 & (int_64)4294967295))
	*($15) = (int_64))($29 - ((int_64)$29 * (int_64)1000000000))
	$15 = ($15 + [-4])
	if ( ((uint_32)$15 >= (uint_32)$18) ){ goto $label$183 }
	$15 = (CASTING uint_32)(uint_64 $29)
	if ( ($15 == 0) ){ goto $label$182 }
	*(($18 = ($18 + [-4]))) = $15
	
.LABEL $label$182
	
.LOOP $label$185:
	$15 = $19
	if ( ((uint_32)$15 <= (uint_32)$18) ){ goto $label$184 }
	$19 = ($15 + [-4])
	if ( (*($19) == 0) ){ goto $label$185 }
	
.LABEL $label$184
	$19 = $15
	$22 = ($22 - $17)
	if ( ((int_32)$22 > (int_32)[0]) ){ goto $label$181 }
	*($5 + [748]) = $22
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$178 }
	goto $label$179 
	
.LABEL $label$180
	$15 = $19
	$18 = $36
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$178 }
	
.LABEL $label$179
	$26 = (((uint_32)($27 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$33 != (int_32)[102]) ){ goto $label$187 }
	$37 = ($36 + ($26 << [2]))
	
.LOOP $label$188:
	$19 = ([0] - $22)
	$23 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$190 }
	$25 = uint_32([1000000000] >> $23)
	$24 = ((int_32)([-1] << $23) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$191:
	$16 = *($19)
	*($19) = (uint_32($16 >> $23) + $17)
	$17 = ((int_32)($16 & $24) * (int_32)$25)
	$19 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$191 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$189 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$189 
	
.LABEL $label$190
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$189
	$15 = ( $37 ? $15 : ((int_32)int_32(($15 - $36) >> [2]) > (int_32)$26) )
	$22 = ($23 + $22)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$188 }
	goto $label$186 
	
.LABEL $label$187
	
.LOOP $label$192:
	$19 = ([0] - $22)
	$23 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$194 }
	$25 = uint_32([1000000000] >> $23)
	$24 = ((int_32)([-1] << $23) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$195:
	$16 = *($19)
	*($19) = (uint_32($16 >> $23) + $17)
	$17 = ((int_32)($16 & $24) * (int_32)$25)
	$19 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$195 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$193 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$193 
	
.LABEL $label$194
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$193
	$15 = ( ($18 + ($26 << [2])) ? $15 : ((int_32)int_32(($15 - $18) >> [2]) > (int_32)$26) )
	$22 = ($23 + $22)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$192 }
	
.LABEL $label$186
	*($5 + [748]) = $22
	
.LABEL $label$178
	$19 = [0]
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$196 }
	$19 = ((int_32)int_32(($36 - $18) >> [2]) * (int_32)[9])
	$16 = *($18)
	if ( ($16 <= [10]) ){ goto $label$196 }
	$17 = [10]
	
.LOOP $label$197:
	$19 = ($19 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$197 }
	
.LABEL $label$196
	$23 = ((int_32)$33 == (int_32)[103])
	$25 = (((int_32)$27 != (int_32)[0]) & $23)
	$16 = ( [0] ? $19 : ((int_32)$33 == (int_32)[102]) )
	$17 = (($27 - $16) - $25)
	if ( ((int_32)$17 >= (int_32)(((int_32)int_32(($15 - $36) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$198 }
	$24 = ($17 + [147456])
	$26 = ((int_32)$24 / (int_32)[9])
	$37 = ($36 + ($26 << [2]))
	$22 = ($37 + [-65532])
	$17 = [10]
	$26 = ((int_32)$26 * (int_32)[9])
	if ( ((int_32)($24 - $26) > (int_32)[7]) ){ goto $label$199 }
	$16 = (((($27 + ([0] - $25)) + [147455]) - $16) - $26)
	$17 = [10]
	
.LOOP $label$200:
	$17 = ((int_32)$17 * (int_32)[10])
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$200 }
	
.LABEL $label$199
	$24 = ((uint_32)$25 / (uint_32)$17)
	$25 = *($22)
	$16 = ($25 - ((int_32)$24 * (int_32)$17))
	$26 = ($22 + [4])
	if ( ((int_32)$26 != (int_32)$15) ){ goto $label$202 }
	if ( ($16 == 0) ){ goto $label$201 }
	
.LABEL $label$202
	if ( ($24 & [1]) ){ goto $label$204 }
	$29 = (int_64)4643211215818981376
	$30 = (int_64)0
	if ( ((uint_32)$22 <= (uint_32)$18) ){ goto $label$203 }
	if ( ((int_32)$17 != (int_32)[1000000000]) ){ goto $label$203 }
	if ( ((*(($22 + [-4])) & [1]) == 0) ){ goto $label$203 }
	
.LABEL $label$204
	$29 = (int_64)4643211215818981376
	$30 = (int_64)1
	
.LABEL $label$203
	$34 = (int_64)4611123068473966592
	$24 = uint_32($17 >> [1])
	if ( ($16 <= $24) ){ goto $label$205 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$16 == (int_32)$24) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$15) )
	
.LABEL $label$205
	if ( ($31 == 0) ){ goto $label$206 }
	if ( ((int_32)*($32) != (int_32)[45]) ){ goto $label$206 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$29 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	
.LABEL $label$206
	CALL __addtf3(($5 + [224]), $30, $29, (int_64)0, $34)
	$16 = ($25 - $16)
	*($22) = $16
	if ( (CALL __eqtf2(*($5 + [224]), *((($5 + [224]) + [8])), $30, $29) == 0) ){ goto $label$201 }
	$19 = ($16 + $17)
	*($22) = $19
	if ( ($19 <= [1000000000]) ){ goto $label$207 }
	$19 = ($37 + [-65536])
	
.LOOP $label$208:
	*(($19 + [4])) = [0]
	if ( ((uint_32)$19 >= (uint_32)$18) ){ goto $label$209 }
	*(($18 = ($18 + [-4]))) = [0]
	
.LABEL $label$209
	$17 = (*($19) + [1])
	*($19) = $17
	$19 = ($19 + [-4])
	if ( ((uint_32)$17 > (uint_32)[999999999]) ){ goto $label$208 }
	$22 = ($19 + [4])
	
.LABEL $label$207
	$19 = ((int_32)int_32(($36 - $18) >> [2]) * (int_32)[9])
	$16 = *($18)
	if ( ($16 <= [10]) ){ goto $label$201 }
	$17 = [10]
	
.LOOP $label$210:
	$19 = ($19 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$210 }
	
.LABEL $label$201
	$17 = ($22 + [4])
	$15 = ( $17 ? $15 : ((uint_32)$15 > (uint_32)$17) )
	
.LABEL $label$198
	$22 = ([0] - $19)
	
.LOOP $label$213:
	$16 = $15
	if ( ((uint_32)$16 <= (uint_32)$18) ){ goto $label$212 }
	$15 = ($16 + [-4])
	if ( (*($15) == 0) ){ goto $label$213 }
	$24 = [1]
	if ( $23 ){ goto $label$211 }
	goto $label$162 
	
.LABEL $label$212
	$24 = [0]
	if ( ($23 == 0) ){ goto $label$162 }
	
.LABEL $label$211
	$15 = ($27 + ($27 == 0))
	if ( ((int_32)$15 <= (int_32)$19) ){ goto $label$170 }
	if ( ((int_32)$19 < (int_32)[-4]) ){ goto $label$170 }
	$28 = ($28 + [-1])
	$27 = (($15 + [-1]) - $19)
	$23 = ($21 & [8])
	if ( ($23 == 0) ){ goto $label$169 }
	goto $label$161 
	
.LABEL $label$172
	CALL __addtf3(($5 + [192]), $29, $30, $35, $34)
	CALL __subtf3(($5 + [176]), *($5 + [192]), *((($5 + [192]) + [8])), $35, $34)
	$30 = *((($5 + [176]) + [8]))
	$29 = *($5 + [176])
	
.LABEL $label$171
	$19 = $10
	$15 = int_32($23 >> [31])
	$23 = *($5 + [748])
	$15 = ((int_32)($23 + $15) ^ (int_32)$15)
	if ( ($15 == 0) ){ goto $label$215 }
	$18 = [0]
	
.LOOP $label$216:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [692]) + $18) + [11])) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$216 }
	$19 = ((($5 + [692]) + $18) + [12])
	if ( $18 ){ goto $label$214 }
	
.LABEL $label$215
	*(($19 = ($19 + [-1]))) = [48]
	
.LABEL $label$214
	$25 = ($31 | [2])
	*(($24 = ($19 + [-2]))) = ($28 + [15])
	*(($19 + [-1])) = ( [45] ? [43] : ((int_32)$23 < (int_32)[0]) )
	if ( ($21 & [8]) ){ goto $label$217 }
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$168 }
	$15 = ($5 + [704])
	
.LOOP $label$218:
	$18 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [80]), $18)
	CALL __subtf3(($5 + [64]), $29, $30, *($5 + [80]), *((($5 + [80]) + [8])))
	CALL __multf3(($5 + [48]), *($5 + [64]), *((($5 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [22496])) | $22)
	$30 = *((($5 + [48]) + [8]))
	$29 = *($5 + [48])
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$219 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$219
	$15 = $18
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$218 }
	goto $label$167 
	
.LABEL $label$217
	$15 = ($5 + [704])
	
.LOOP $label$220:
	$18 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [128]), $18)
	CALL __subtf3(($5 + [112]), $29, $30, *($5 + [128]), *((($5 + [128]) + [8])))
	CALL __multf3(($5 + [96]), *($5 + [112]), *((($5 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [22496])) | $22)
	$30 = *((($5 + [96]) + [8]))
	$29 = *($5 + [96])
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$221 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$221
	$15 = $18
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$220 }
	goto $label$167 
	
.LABEL $label$170
	$27 = ($15 + [-1])
	$28 = ($28 + [-2])
	$23 = ($21 & [8])
	if ( $23 ){ goto $label$161 }
	
.LABEL $label$169
	$15 = [9]
	if ( ($24 == 0) ){ goto $label$222 }
	$23 = *(($16 + [-4]))
	if ( ($23 == 0) ){ goto $label$222 }
	$15 = [0]
	if ( ((uint_32)$23 % (uint_32)[10]) ){ goto $label$222 }
	$17 = [10]
	$15 = [0]
	
.LOOP $label$223:
	$15 = ($15 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( (((uint_32)$23 % (uint_32)$17) == 0) ){ goto $label$223 }
	
.LABEL $label$222
	$17 = (((int_32)int_32(($16 - $36) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($28 | [32]) != (int_32)[102]) ){ goto $label$166 }
	$23 = [0]
	$15 = ($17 - $15)
	$15 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$27 = ( $27 ? $15 : ((int_32)$27 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$168
	$18 = ($5 + [704])
	
.LOOP $label$224:
	$19 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [32]), $19)
	CALL __subtf3(($5 + [16]), $29, $30, *($5 + [32]), *((($5 + [32]) + [8])))
	CALL __multf3($5, *($5 + [16]), *((($5 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($15 = $18)) = (*(($19 + [22496])) | $22)
	$30 = *(($5 + [8]))
	$29 = *($5)
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$225 }
	if ( (CALL __eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$225 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$225
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$224 }
	
.LABEL $label$167
	$15 = [-1]
	$22 = ($10 - $24)
	if ( ((int_32)(([2147483645] - $25) - $22) < (int_32)$16) ){ goto $label$5 }
	$23 = ($18 - ($5 + [704]))
	$28 = ( ( ($16 + [2]) ? $23 : ((int_32)($8 + $18) < (int_32)$16) ) ? $23 : $16 )
	$16 = (($22 + $25) + $28)
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$163 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$163 }
	$15 = ($27 <= [256])
	$27 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $27 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$165 }
	$15 = ($18 == 0)
	$18 = $27
	
.LOOP $label$226:
	if ( (($15 & [1]) == 0) ){ goto $label$227 }
	CALL $174(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$227
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$226 }
	if ( $17 ){ goto $label$163 }
	$27 = ($27 & [255])
	goto $label$164 
	
.LABEL $label$166
	$23 = [0]
	$15 = (($17 + $19) - $15)
	$15 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$27 = ( $27 ? $15 : ((int_32)$27 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$165
	if ( $18 ){ goto $label$163 }
	
.LABEL $label$164
	CALL $174(($5 + [432]), $27, $0)
	
.LABEL $label$163
	if ( (*($0) & [32]) ){ goto $label$228 }
	CALL $174($26, $25, $0)
	
.LABEL $label$228
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$229 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$229 }
	$15 = ($25 <= [256])
	$25 = ($20 - $16)
	CALL memset(($5 + [432]), [48], ( $25 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$231 }
	$15 = ($18 == 0)
	$18 = $25
	
.LOOP $label$232:
	if ( (($15 & [1]) == 0) ){ goto $label$233 }
	CALL $174(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$233
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$232 }
	if ( $17 ){ goto $label$229 }
	$25 = ($25 & [255])
	goto $label$230 
	
.LABEL $label$231
	if ( $18 ){ goto $label$229 }
	
.LABEL $label$230
	CALL $174(($5 + [432]), $25, $0)
	
.LABEL $label$229
	if ( (*($0) & [32]) ){ goto $label$234 }
	CALL $174(($5 + [704]), $23, $0)
	
.LABEL $label$234
	$23 = ($28 - $23)
	if ( ((int_32)$23 < (int_32)[1]) ){ goto $label$235 }
	$15 = ($23 <= [256])
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$237 }
	$15 = ($18 == 0)
	$18 = $23
	
.LOOP $label$238:
	if ( (($15 & [1]) == 0) ){ goto $label$239 }
	CALL $174(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$239
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$238 }
	if ( $17 ){ goto $label$235 }
	$23 = ($23 & [255])
	goto $label$236 
	
.LABEL $label$237
	if ( $18 ){ goto $label$235 }
	
.LABEL $label$236
	CALL $174(($5 + [432]), $23, $0)
	
.LABEL $label$235
	if ( (*($0) & [32]) ){ goto $label$240 }
	CALL $174($24, $22, $0)
	
.LABEL $label$240
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$241 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$241 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$243 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$244:
	if ( (($15 & [1]) == 0) ){ goto $label$245 }
	CALL $174(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$245
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$244 }
	if ( $17 ){ goto $label$241 }
	$22 = ($22 & [255])
	goto $label$242 
	
.LABEL $label$243
	if ( $18 ){ goto $label$241 }
	
.LABEL $label$242
	CALL $174(($5 + [432]), $22, $0)
	
.LABEL $label$241
	$15 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$162
	$23 = ($21 & [8])
	
.LABEL $label$161
	$15 = [-1]
	$25 = ($27 | $23)
	if ( ((int_32)$27 > (int_32)( [2147483645] ? [2147483646] : $25 )) ){ goto $label$5 }
	$26 = (($27 + ((int_32)$25 != (int_32)[0])) + [1])
	$33 = ((int_32)($28 | [32]) != (int_32)[102])
	if ( $33 ){ goto $label$247 }
	if ( ((int_32)$19 > (int_32)([2147483647] - $26)) ){ goto $label$5 }
	$19 = ( $19 ? [0] : ((int_32)$19 > (int_32)[0]) )
	goto $label$246 
	
.LABEL $label$247
	$17 = $10
	$38 = ((int_32)$19 < (int_32)[0])
	$15 = ( $22 ? $19 : $38 )
	if ( ($15 == 0) ){ goto $label$248 }
	
.LOOP $label$249:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$249 }
	
.LABEL $label$248
	if ( ((int_32)($10 - $17) > (int_32)[1]) ){ goto $label$250 }
	$15 = ($17 + [-1])
	
.LOOP $label$251:
	*($15) = [48]
	$19 = ($10 - $15)
	$17 = ($15 + [-1])
	$15 = $17
	if ( ((int_32)$19 < (int_32)[2]) ){ goto $label$251 }
	$17 = ($17 + [1])
	
.LABEL $label$250
	*(($37 = ($17 + [-2]))) = $28
	$15 = [-1]
	*(($17 + [-1])) = ( [45] ? [43] : $38 )
	$19 = ($10 - $37)
	if ( ((int_32)$19 > (int_32)([2147483647] - $26)) ){ goto $label$5 }
	
.LABEL $label$246
	$15 = [-1]
	$19 = ($19 + $26)
	if ( ((int_32)$19 > (int_32)((int_32)$31 ^ (int_32)[2147483647])) ){ goto $label$5 }
	$26 = ($19 + $31)
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$252 }
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$252 }
	$15 = ($28 <= [256])
	$28 = ($20 - $26)
	CALL memset(($5 + [432]), [32], ( $28 ? [256] : $15 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$254 }
	$15 = ($19 == 0)
	$19 = $28
	
.LOOP $label$255:
	if ( (($15 & [1]) == 0) ){ goto $label$256 }
	CALL $174(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$256
	$22 = ($17 & [32])
	$15 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$255 }
	if ( $22 ){ goto $label$252 }
	$28 = ($28 & [255])
	goto $label$253 
	
.LABEL $label$254
	if ( $19 ){ goto $label$252 }
	
.LABEL $label$253
	CALL $174(($5 + [432]), $28, $0)
	
.LABEL $label$252
	if ( (*($0) & [32]) ){ goto $label$257 }
	CALL $174($32, $31, $0)
	
.LABEL $label$257
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$258 }
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$258 }
	$15 = ($28 <= [256])
	$28 = ($20 - $26)
	CALL memset(($5 + [432]), [48], ( $28 ? [256] : $15 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$260 }
	$15 = ($19 == 0)
	$19 = $28
	
.LOOP $label$261:
	if ( (($15 & [1]) == 0) ){ goto $label$262 }
	CALL $174(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$262
	$22 = ($17 & [32])
	$15 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$261 }
	if ( $22 ){ goto $label$258 }
	$28 = ($28 & [255])
	goto $label$259 
	
.LABEL $label$260
	if ( $19 ){ goto $label$258 }
	
.LABEL $label$259
	CALL $174(($5 + [432]), $28, $0)
	
.LABEL $label$258
	if ( $33 ){ goto $label$273 }
	$23 = ( $36 ? $18 : ((uint_32)$18 > (uint_32)$36) )
	$22 = $23
	
.LOOP $label$274:
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$276 }
	$18 = [0]
	
.LOOP $label$277:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($6 + $18)) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$277 }
	goto $label$275 
	
.LABEL $label$276
	$18 = [0]
	
.LABEL $label$275
	$15 = ($7 + $18)
	if ( ((int_32)$22 == (int_32)$23) ){ goto $label$281 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$280 }
	
.LOOP $label$282:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$282 }
	$15 = ($5 + [704])
	if ( ((*($0) & [32]) == 0) ){ goto $label$279 }
	goto $label$278 
	
.LABEL $label$281
	if ( $18 ){ goto $label$280 }
	*(($15 = ($15 + [-1]))) = [48]
	
.LABEL $label$280
	if ( (*($0) & [32]) ){ goto $label$278 }
	
.LABEL $label$279
	CALL $174($15, ($7 - $15), $0)
	
.LABEL $label$278
	$22 = ($22 + [4])
	if ( ((uint_32)$22 <= (uint_32)$36) ){ goto $label$274 }
	if ( ($25 == 0) ){ goto $label$283 }
	if ( (*($0) & [32]) ){ goto $label$283 }
	CALL $174([8771], [1], $0)
	
.LABEL $label$283
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$272 }
	if ( ((uint_32)$22 >= (uint_32)$16) ){ goto $label$271 }
	
.LOOP $label$284:
	$15 = $7
	$18 = *($22)
	if ( ($18 == 0) ){ goto $label$286 }
	$15 = $7
	
.LOOP $label$287:
	$19 = ((uint_32)$18 / (uint_32)[10])
	*(($15 = ($15 + [-1]))) = (($18 - ((int_32)$19 * (int_32)[10])) | [48])
	$17 = ((uint_32)$18 > (uint_32)[9])
	$18 = $19
	if ( $17 ){ goto $label$287 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$285 }
	
.LABEL $label$286
	
.LOOP $label$288:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$288 }
	
.LABEL $label$285
	if ( (*($0) & [32]) ){ goto $label$289 }
	CALL $174($15, ( $27 ? [9] : ((int_32)$27 < (int_32)[9]) ), $0)
	
.LABEL $label$289
	$15 = ($27 + [-9])
	if ( ((int_32)$27 < (int_32)[10]) ){ goto $label$270 }
	$27 = $15
	$22 = ($22 + [4])
	if ( ($22 <= $16) ){ goto $label$284 }
	goto $label$270 
	
.LABEL $label$273
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$266 }
	$25 = ( $16 ? ($18 + [4]) : $24 )
	if ( ($23 == 0) ){ goto $label$268 }
	$22 = $18
	
.LOOP $label$290:
	$17 = $7
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$292 }
	$19 = [0]
	
.LOOP $label$293:
	$17 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$293 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$291 }
	
.LABEL $label$292
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$291
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$295 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$294 }
	
.LOOP $label$296:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$296 }
	goto $label$294 
	
.LABEL $label$295
	$15 = *($0)
	if ( ($15 & [32]) ){ goto $label$297 }
	CALL $174($17, [1], $0)
	$15 = *($0)
	
.LABEL $label$297
	$17 = ($17 + [1])
	if ( ($15 & [32]) ){ goto $label$294 }
	CALL $174([8771], [1], $0)
	
.LABEL $label$294
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$298 }
	CALL $174($17, ( $15 ? $27 : ((int_32)$27 > (int_32)$15) ), $0)
	
.LABEL $label$298
	$27 = ($27 - $15)
	$22 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$267 }
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$290 }
	goto $label$267 
	
.LABEL $label$272
	$15 = $27
	if ( ((int_32)$15 >= (int_32)[1]) ){ goto $label$269 }
	goto $label$265 
	
.LABEL $label$271
	$15 = $27
	
.LABEL $label$270
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$265 }
	
.LABEL $label$269
	$18 = ($15 <= [256])
	CALL memset(($5 + [432]), [48], ( $15 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$300 }
	$18 = ($19 == 0)
	$19 = $15
	
.LOOP $label$301:
	if ( (($18 & [1]) == 0) ){ goto $label$302 }
	CALL $174(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$302
	$16 = ($17 & [32])
	$18 = ($16 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$301 }
	if ( $16 ){ goto $label$265 }
	$15 = ($15 & [255])
	goto $label$299 
	
.LABEL $label$300
	if ( $19 ){ goto $label$265 }
	
.LABEL $label$299
	CALL $174(($5 + [432]), $15, $0)
	if ( ((int_32)$21 == (int_32)[8192]) ){ goto $label$264 }
	goto $label$263 
	
.LABEL $label$268
	$22 = $18
	
.LOOP $label$303:
	$17 = $7
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$305 }
	$19 = [0]
	
.LOOP $label$306:
	$17 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$306 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$304 }
	
.LABEL $label$305
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$304
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$308 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$307 }
	
.LOOP $label$309:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$309 }
	goto $label$307 
	
.LABEL $label$308
	if ( (*($0) & [32]) ){ goto $label$310 }
	CALL $174($17, [1], $0)
	
.LABEL $label$310
	$17 = ($17 + [1])
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$307 }
	if ( (*($0) & [32]) ){ goto $label$307 }
	CALL $174([8771], [1], $0)
	
.LABEL $label$307
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$311 }
	CALL $174($17, ( $15 ? $27 : ((int_32)$27 > (int_32)$15) ), $0)
	
.LABEL $label$311
	$27 = ($27 - $15)
	$22 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$267 }
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$303 }
	
.LABEL $label$267
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$266 }
	$18 = ($27 <= [256])
	CALL memset(($5 + [432]), [48], ( $27 ? [256] : $18 ))
	$19 = *($0)
	$15 = ($19 & [32])
	if ( $18 ){ goto $label$313 }
	$15 = ($15 == 0)
	$18 = $27
	
.LOOP $label$314:
	if ( (($15 & [1]) == 0) ){ goto $label$315 }
	CALL $174(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$315
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$314 }
	if ( $17 ){ goto $label$266 }
	$27 = ($27 & [255])
	goto $label$312 
	
.LABEL $label$313
	if ( $15 ){ goto $label$266 }
	
.LABEL $label$312
	CALL $174(($5 + [432]), $27, $0)
	
.LABEL $label$266
	if ( (*($0) & [32]) ){ goto $label$265 }
	CALL $174($37, ($10 - $37), $0)
	
.LABEL $label$265
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$263 }
	
.LABEL $label$264
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$263 }
	$15 = ($16 <= [256])
	$16 = ($20 - $26)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$317 }
	$15 = ($18 == 0)
	$18 = $16
	
.LOOP $label$318:
	if ( (($15 & [1]) == 0) ){ goto $label$319 }
	CALL $174(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$319
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$318 }
	if ( $17 ){ goto $label$263 }
	$16 = ($16 & [255])
	goto $label$316 
	
.LABEL $label$317
	if ( $18 ){ goto $label$263 }
	
.LABEL $label$316
	CALL $174(($5 + [432]), $16, $0)
	
.LABEL $label$263
	$15 = ( $20 ? $26 : ((int_32)$20 > (int_32)$26) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	
.LABEL $label$3
	*(CALL $156()) = [75]
	
.LABEL $label$2
	$14 = [-1]
	
.LABEL $label$1
	$global$0 = ($5 + [8128])
	$15
	$18
	return $14
}

int_32 .FUNC $187 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $186($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $186 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $180 (int_32 $0, int_32 $1)
{
	return CALL $179($0, $1)
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 + ((int_32)((int_32)$1 / (int_32)[-12]) * (int_32)[12]))
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$4 = ($4 + [12])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [11075])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $30($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [10038])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [20])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$1) ){ goto $label$10 }
	CALL eosio_assert([0], [10038])
	$1 = *(($0 + [4]))
	
.LABEL $label$10
	CALL memcpy($4, $1, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $115 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	if ( ((int_32)*($5 + [112]) == (int_32)$1) ){ goto $label$4 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$4
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6823129357326745600, (int_64)6823129357326745600)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $76($1, $5)
	if ( ((int_32)*($5 + [112]) == (int_32)$1) ){ goto $label$2 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$2
	CALL memcpy($0, $5, [112])
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $118($4, $1, $2, ($4 + [8]))
	CALL memcpy($0, *($4 + [4]), [112])
	$global$0 = ($4 + [16])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10660])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [10660])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $112(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $112(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$6 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10660])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10660])
	$3 = *($5)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$1 = *($1)
	*($2 + [8]) = *(*($0 + [32]))
	$0 = *($1 + [4])
	if ( ((int_32)(*($1 + [8]) - $0) > (int_32)[0]) ){ goto $label$9 }
	CALL eosio_assert([0], [10660])
	$0 = *(($1 + [4]))
	
.LABEL $label$9
	CALL memcpy($0, ($2 + [8]), [1])
	*(($0 = ($1 + [4]))) = (*($0) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $118 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [176])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [10609])
	
.LABEL $label$1
	$5 = CALL _Znwj([128])
	CALL $69($5)
	*($5 + [112]) = $1
	$5 = CALL memcpy($5, *($3), [105])
	*($4 + [120]) = ($4 + [105])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	*($4 + [128]) = ($4 + [112])
	*($4 + [140]) = ($5 + [16])
	*($4 + [136]) = $5
	*($4 + [144]) = ($5 + [32])
	*($4 + [148]) = ($5 + [48])
	*($4 + [152]) = ($5 + [64])
	*($4 + [156]) = ($5 + [80])
	*($4 + [160]) = ($5 + [96])
	*($4 + [164]) = ($5 + [100])
	*($4 + [168]) = ($5 + [104])
	CALL $119(($4 + [136]), ($4 + [128]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)6823129357326745600, $2, (int_64)6823129357326745600, $4, [105])
	*($5 + [116]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6823129357326745600) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)6823129357326745601
	
.LABEL $label$2
	*($4 + [136]) = $5
	*($4) = (int_64)6823129357326745600
	*($4 + [112]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)6823129357326745600
	*($3 + [16]) = $6
	*($4 + [136]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $120(($1 + [24]), ($4 + [136]), $4, ($4 + [112]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [136])
	*($4 + [136]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($4 + [176])
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10660])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10660])
	$6 = *($5)
	
.LABEL $label$4
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10660])
	$6 = *($5)
	
.LABEL $label$6
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10660])
	$6 = *($5)
	
.LABEL $label$8
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [10660])
	$6 = *($5)
	
.LABEL $label$10
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [10660])
	$6 = *($5)
	
.LABEL $label$12
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$13 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$13
	CALL memcpy($5, $6, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$6 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$14 }
	CALL eosio_assert([0], [10660])
	$5 = *(($4 + [4]))
	
.LABEL $label$14
	CALL memcpy($5, $6, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$1 = *($1)
	*($2 + [8]) = *(*($0 + [32]))
	$0 = *($1 + [4])
	if ( ((int_32)(*($1 + [8]) - $0) > (int_32)[0]) ){ goto $label$15 }
	CALL eosio_assert([0], [10660])
	$0 = *(($1 + [4]))
	
.LABEL $label$15
	CALL memcpy($0, ($2 + [8]), [1])
	*(($0 = ($1 + [4]))) = (*($0) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $102($0, $4)
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$2
	*($3) = $1
	CALL $104($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $105($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_64 .FUNC $28 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $102($0, $4)
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$2
	$1 = *($4)
	$global$0 = ($3 + [16])
	return $1
	
.LABEL $label$1
	*($3 + [8]) = $2
	CALL $103($3, $0, $1, ($3 + [8]))
	$1 = *(*($3 + [4]))
	$global$0 = ($3 + [16])
	return $1
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [280])
	$4 = *($1)
	$6 = *(($0 + [308]))
	$5 = *(($0 + [304]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($6 + [-24])
	$7 = *($1)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$3 }
	$6 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	if ( ((int_32)*(($7 + [92])) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [9964])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$1 = CALL db_find_i64(*($3), *(($0 + [288])), (int_64)4229865212519383040, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $33($3, $1)
	if ( ((int_32)*($7 + [92]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9489])
	if ( $7 ){ goto $label$5 }
	CALL eosio_assert([0], [11227])
	CALL eosio_assert([0], [11261])
	
.LABEL $label$5
	$1 = CALL db_next_i64(*($7 + [96]), ($2 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	CALL $33($3, $1)
	
.LABEL $label$6
	CALL $47($3, $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [752])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $200($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL memset(($4 + [416]), [0], [112])
	CALL $69(($4 + [416]))
	*($4 + [404]) = $2
	*($4 + [400]) = $2
	*($4 + [408]) = ($2 + $7)
	*($4 + [640]) = ($4 + [400])
	*($4 + [44]) = ($4 + [432])
	*($4 + [48]) = ($4 + [448])
	*($4 + [52]) = ($4 + [464])
	*($4 + [56]) = ($4 + [480])
	*($4 + [60]) = ($4 + [496])
	*($4 + [64]) = ($4 + [512])
	*($4 + [68]) = ($4 + [516])
	*($4 + [72]) = ($4 + [520])
	*($4 + [40]) = ($4 + [416])
	CALL $70(($4 + [40]), ($4 + [640]))
	$3 = *($4 + [408])
	*((($4 + [24]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$8 = *($4 + [400])
	*($4 + [8]) = $8
	*($4 + [24]) = $8
	$9 = CALL $23(($4 + [40]), $0, $1, ($4 + [8]))
	CALL memcpy(($4 + [528]), ($4 + [416]), [112])
	CALL memcpy(($4 + [640]), ($4 + [528]), [112])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [640])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $203($2)
	
.LABEL $label$5
	CALL $24($9)
	$global$0 = ($4 + [752])
	return [1]
}

int_32 .FUNC $23 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [240])
	$global$0 = $4
	*(($5 = (($4 + [224]) + [8]))) = *(($3 + [8]))
	*($4 + [224]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*(($6 = (($4 + [112]) + [8]))) = $3
	$2 = *($4 + [224])
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [112]) = $2
	*(($0 + [40])) = $1
	*($0 + [32]) = $1
	*(($0 + [48])) = (int_64)-1
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = [0]
	*($0 + [72]) = $1
	*(($0 + [80])) = $1
	*(($0 + [88])) = (int_64)-1
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = [0]
	$3 = CALL $69(($0 + [112]))
	*(($0 + [240])) = (int_64)-1
	*(($0 + [248])) = (int_64)0
	*(($0 + [256])) = [0]
	*($0 + [264 align=4]) = (int_64)0
	*(($7 = ($0 + [272]))) = [0]
	*($0 + [280]) = $1
	*(($0 + [288])) = $1
	*(($0 + [296])) = (int_64)-1
	*(($0 + [304])) = (int_64)0
	*(($0 + [312])) = [0]
	*(($0 + [336])) = (int_64)-1
	*(($0 + [344])) = (int_64)0
	$1 = *($0)
	*($0 + [224]) = $1
	*(($0 + [232])) = $1
	*($0 + [320]) = $1
	*(($0 + [328])) = $1
	*(($0 + [352])) = [0]
	$4 = CALL memset($4, [0], [112])
	CALL $115(($4 + [112]), ($0 + [72]), $1, CALL $69($4))
	CALL memcpy($3, ($4 + [112]), [105])
	*($4 + [120]) = [40]
	*($4 + [112]) = (int_64)429496729600
	$5 = ($0 + [264])
	$3 = ($0 + [268])
	$8 = *($3)
	if ( ((uint_32)$8 >= (uint_32)*($7)) ){ goto $label$2 }
	*($8) = *($4 + [112])
	*(($8 + [8])) = *($6)
	$7 = (*($3) + [12])
	*($3) = $7
	goto $label$1 
	
.LABEL $label$2
	CALL $116($5, ($4 + [112]))
	$7 = *($3)
	
.LABEL $label$1
	*($4 + [120]) = [63]
	*($4 + [112]) = (int_64)214748364801
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$4 }
	*($7) = *($4 + [112])
	*(($7 + [8])) = *((($4 + [112]) + [8]))
	$7 = (*($3) + [12])
	*($3) = $7
	goto $label$3 
	
.LABEL $label$4
	CALL $116($5, ($4 + [112]))
	$7 = *($3)
	
.LABEL $label$3
	*($4 + [120]) = [150]
	*($4 + [112]) = (int_64)171798691842
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$6 }
	*($7) = *($4 + [112])
	*(($7 + [8])) = *((($4 + [112]) + [8]))
	$7 = (*($3) + [12])
	*($3) = $7
	goto $label$5 
	
.LABEL $label$6
	CALL $116($5, ($4 + [112]))
	$7 = *($3)
	
.LABEL $label$5
	*($4 + [120]) = [591]
	*($4 + [112]) = (int_64)8589934595
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$8 }
	*($7) = *($4 + [112])
	*(($7 + [8])) = *((($4 + [112]) + [8]))
	$7 = (*($3) + [12])
	*($3) = $7
	goto $label$7 
	
.LABEL $label$8
	CALL $116($5, ($4 + [112]))
	$7 = *($3)
	
.LABEL $label$7
	*($4 + [120]) = [200]
	*($4 + [112]) = (int_64)128849018884
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$10 }
	*($7) = *($4 + [112])
	*(($7 + [8])) = *((($4 + [112]) + [8]))
	$7 = (*($3) + [12])
	*($3) = $7
	goto $label$9 
	
.LABEL $label$10
	CALL $116($5, ($4 + [112]))
	$7 = *($3)
	
.LABEL $label$9
	*($4 + [120]) = [591]
	*($4 + [112]) = (int_64)8589934597
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$12 }
	*($7) = *($4 + [112])
	*(($7 + [8])) = *((($4 + [112]) + [8]))
	$7 = (*($3) + [12])
	*($3) = $7
	goto $label$11 
	
.LABEL $label$12
	CALL $116($5, ($4 + [112]))
	$7 = *($3)
	
.LABEL $label$11
	*($4 + [120]) = [300]
	*($4 + [112]) = (int_64)85899345926
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$14 }
	*($7) = *($4 + [112])
	*(($7 + [8])) = *((($4 + [112]) + [8]))
	$7 = (*($3) + [12])
	*($3) = $7
	goto $label$13 
	
.LABEL $label$14
	CALL $116($5, ($4 + [112]))
	$7 = *($3)
	
.LABEL $label$13
	*($4 + [120]) = [591]
	*($4 + [112]) = (int_64)8589934599
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$16 }
	*($7) = *($4 + [112])
	*(($7 + [8])) = *((($4 + [112]) + [8]))
	$7 = (*($3) + [12])
	*($3) = $7
	goto $label$15 
	
.LABEL $label$16
	CALL $116($5, ($4 + [112]))
	$7 = *($3)
	
.LABEL $label$15
	*($4 + [120]) = [300]
	*($4 + [112]) = (int_64)85899345928
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$18 }
	*($7) = *($4 + [112])
	*(($7 + [8])) = *((($4 + [112]) + [8]))
	$7 = (*($3) + [12])
	*($3) = $7
	goto $label$17 
	
.LABEL $label$18
	CALL $116($5, ($4 + [112]))
	$7 = *($3)
	
.LABEL $label$17
	*($4 + [120]) = [591]
	*($4 + [112]) = (int_64)8589934601
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$20 }
	*($7) = *($4 + [112])
	*(($7 + [8])) = *((($4 + [112]) + [8]))
	$7 = (*($3) + [12])
	*($3) = $7
	goto $label$19 
	
.LABEL $label$20
	CALL $116($5, ($4 + [112]))
	$7 = *($3)
	
.LABEL $label$19
	*($4 + [120]) = [400]
	*($4 + [112]) = (int_64)64424509450
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$22 }
	*($7) = *($4 + [112])
	*(($7 + [8])) = *((($4 + [112]) + [8]))
	$7 = (*($3) + [12])
	*($3) = $7
	goto $label$21 
	
.LABEL $label$22
	CALL $116($5, ($4 + [112]))
	$7 = *($3)
	
.LABEL $label$21
	*($4 + [120]) = [591]
	*($4 + [112]) = (int_64)8589934603
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$24 }
	*($7) = *($4 + [112])
	*(($7 + [8])) = *((($4 + [112]) + [8]))
	$7 = (*($3) + [12])
	*($3) = $7
	goto $label$23 
	
.LABEL $label$24
	CALL $116($5, ($4 + [112]))
	$7 = *($3)
	
.LABEL $label$23
	*($4 + [120]) = [600]
	*($4 + [112]) = (int_64)42949672972
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$26 }
	*($7) = *($4 + [112])
	*(($7 + [8])) = *((($4 + [112]) + [8]))
	$7 = (*($3) + [12])
	*($3) = $7
	goto $label$25 
	
.LABEL $label$26
	CALL $116($5, ($4 + [112]))
	$7 = *($3)
	
.LABEL $label$25
	*($4 + [120]) = [591]
	*($4 + [112]) = (int_64)8589934605
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$28 }
	*($7) = *($4 + [112])
	*(($7 + [8])) = *((($4 + [112]) + [8]))
	$7 = (*($3) + [12])
	*($3) = $7
	goto $label$27 
	
.LABEL $label$28
	CALL $116($5, ($4 + [112]))
	$7 = *($3)
	
.LABEL $label$27
	*($4 + [120]) = [1200]
	*($4 + [112]) = (int_64)21474836494
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$30 }
	*($7) = *($4 + [112])
	*(($7 + [8])) = *((($4 + [112]) + [8]))
	$7 = (*($3) + [12])
	*($3) = $7
	goto $label$29 
	
.LABEL $label$30
	CALL $116($5, ($4 + [112]))
	$7 = *($3)
	
.LABEL $label$29
	*($4 + [120]) = [591]
	*($4 + [112]) = (int_64)8589934607
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$31 }
	*($7) = *($4 + [112])
	*(($7 + [8])) = *((($4 + [112]) + [8]))
	*($3) = (*($3) + [12])
	$global$0 = ($4 + [240])
	return $0
	
.LABEL $label$31
	CALL $116($5, ($4 + [112]))
	$global$0 = ($4 + [240])
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10038])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10038])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10038])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10038])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $37(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10015])
	
.LABEL $label$5
	$2 = CALL $200($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([48])) + [36]) = $0
	if ( ((uint_32)$4 > (uint_32)[33]) ){ goto $label$7 }
	CALL eosio_assert([0], [10038])
	
.LABEL $label$7
	CALL memcpy($5, $2, [34])
	*($5 + [40]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-5868465776486252544
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = (int_64)-5868465776486252544
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $113(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $203($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [344]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [348])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [344]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [304]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [308])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$11
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($3)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [304]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$3 = *($0 + [264])
	if ( ($3 == 0) ){ goto $label$13 }
	*(($0 + [268])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$13
	$1 = *(($0 + [248]))
	if ( ($1 == 0) ){ goto $label$14 }
	$2 = ($0 + [252])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$16 }
	
.LOOP $label$17:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$18 }
	CALL _ZdlPv($4)
	
.LABEL $label$18
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$17 }
	$3 = *(($0 + [248]))
	goto $label$15 
	
.LABEL $label$16
	$3 = $1
	
.LABEL $label$15
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$14
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$19 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$21 }
	
.LOOP $label$22:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$23 }
	CALL _ZdlPv($4)
	
.LABEL $label$23
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$22 }
	$3 = *(($0 + [96]))
	goto $label$20 
	
.LABEL $label$21
	$3 = $1
	
.LABEL $label$20
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$19
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$24 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$26 }
	
.LOOP $label$27:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$28 }
	CALL _ZdlPv($4)
	
.LABEL $label$28
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$27 }
	$3 = *(($0 + [56]))
	goto $label$25 
	
.LABEL $label$26
	$3 = $1
	
.LABEL $label$25
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$24
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$6 = ($global$0 - [96])
	$global$0 = $6
	CALL eosio_assert(((int_32)CALL $150($1, [58], [0]) != (int_32)[-1]), [10043])
	*($3) = (int_64)0
	if ( (*($4) & [1]) ){ goto $label$2 }
	*($4) = [0]
	goto $label$1 
	
.LABEL $label$2
	*(*($4 + [8])) = [0]
	*($4 + [4]) = [0]
	
.LABEL $label$1
	*($5) = (int_64)-1
	$7 = [0]
	*($6 + [88]) = [0]
	*($6 + [80]) = (int_64)0
	$8 = CALL $194([10056])
	*($6 + [72]) = $8
	*($6 + [64]) = [0]
	if ( ((uint_32)$8 >= (uint_32)[9]) ){ goto $label$5 }
	$9 = ($6 + [64])
	if ( $8 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = CALL _Znaj($8)
	*($6 + [64]) = $9
	
.LABEL $label$4
	CALL memmove($9, [10056], $8)
	$7 = *(($6 + [72]))
	
.LABEL $label$3
	CALL $127($9, ($9 + $7), ($6 + [48]))
	CALL $73(($6 + [80]), $1, ($6 + [64]), [1])
	if ( (*(($6 + [72])) <= [9]) ){ goto $label$6 }
	$8 = *($6 + [64])
	if ( ($8 == 0) ){ goto $label$6 }
	CALL _ZdaPv($8)
	
.LABEL $label$6
	$11 = *($6 + [84])
	$10 = *($6 + [80])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$7 }
	$12 = ($2 + [4])
	
.LOOP $label$8:
	*((($6 + [48]) + [8])) = [0]
	*($6 + [48]) = (int_64)0
	$9 = CALL $194([10058])
	*(($1 = (($6 + [32]) + [8]))) = $9
	*($6 + [32]) = [0]
	if ( ((uint_32)$9 >= (uint_32)[9]) ){ goto $label$11 }
	$8 = ($6 + [32])
	if ( $9 ){ goto $label$10 }
	$9 = [0]
	goto $label$9 
	
.LABEL $label$11
	$8 = CALL _Znaj($9)
	*($6 + [32]) = $8
	
.LABEL $label$10
	CALL memmove($8, [10058], $9)
	$9 = *($1)
	
.LABEL $label$9
	CALL $127($8, ($8 + $9), ($6 + [24]))
	CALL $74(($6 + [48]), $10, ($6 + [32]), [1])
	if ( (*($1) <= [9]) ){ goto $label$12 }
	$8 = *($6 + [32])
	if ( ($8 == 0) ){ goto $label$12 }
	CALL _ZdaPv($8)
	
.LABEL $label$12
	CALL eosio_assert(((int_32)(*($6 + [52]) - *($6 + [48])) == (int_32)[24]), [10060])
	$8 = *($6 + [48])
	$9 = *($8)
	$1 = CALL $194([10079])
	if ( ((int_32)$1 != (int_32)( *($8 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$28 }
	if ( (CALL $151($8, [0], [-1], [10079], $1) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$8 = *($6 + [48])
	$9 = *($8)
	$1 = CALL $194([10081])
	if ( ((int_32)$1 != (int_32)( *($8 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$29 }
	if ( (CALL $151($8, [0], [-1], [10081], $1) == 0) ){ goto $label$26 }
	
.LABEL $label$29
	$8 = *($6 + [48])
	$9 = *($8)
	$1 = CALL $194([10095])
	if ( ((int_32)$1 != (int_32)( *($8 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$30 }
	if ( (CALL $151($8, [0], [-1], [10095], $1) == 0) ){ goto $label$25 }
	
.LABEL $label$30
	$8 = *($6 + [48])
	$8 = CALL $191(( *($8 + [8]) ? ($8 + [1]) : (*($8) & [1]) ), [0], [0])
	$9 = *($6 + [48])
	$13 = CALL $191(( *(($9 + [20])) ? ($9 + [13]) : (*($9 + [12]) & [1]) ), [0], [0])
	CALL eosio_assert(($8 <= [8]), [10097])
	CALL eosio_assert(((uint_32)$13 > (uint_32)[999]), [10134])
	$14 = (CASTING uint_64)(uint_32 $8)
	$9 = *($12)
	if ( ($9 == 0) ){ goto $label$32 }
	$1 = $12
	$8 = $9
	
.LOOP $label$33:
	$7 = (uint_64)(*($8 + [16]) <= $14)
	$1 = ( $1 ? $8 : $7 )
	$8 = *(($8 + ($7 << [2])))
	if ( $8 ){ goto $label$33 }
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$32 }
	if ( ((uint_64)*($1 + [16]) <= (uint_64)$14) ){ goto $label$31 }
	
.LABEL $label$32
	$1 = $12
	
.LABEL $label$31
	if ( ($9 == 0) ){ goto $label$34 }
	$8 = $12
	$15 = *($9 + [16])
	if ( ((uint_64)$15 <= (uint_64)$14) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$34
	$9 = $12
	$8 = $12
	$16 = [3]
	goto $label$13 
	
.LABEL $label$27
	$8 = *($6 + [48])
	if ( (*($8 + [12]) & [1]) ){ goto $label$24 }
	$8 = (($8 + [12]) + [1])
	goto $label$23 
	
.LABEL $label$26
	CALL $141($4, (*($6 + [48]) + [12]))
	$8 = *($4)
	CALL eosio_assert(((int_32)( *(($4 + [4])) ? uint_32($8 >> [1]) : ($8 & [1]) ) == (int_32)[36]), [10083])
	$1 = *($6 + [48])
	if ( ($1 == 0) ){ goto $label$15 }
	$9 = *($6 + [52])
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$22 }
	
.LOOP $label$35:
	$8 = ($9 + [-12])
	if ( ((*($8) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($9 + [-4])))
	
.LABEL $label$36
	$9 = $8
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$35 }
	$8 = *($6 + [48])
	goto $label$21 
	
.LABEL $label$25
	$8 = *($6 + [48])
	*($5) = (CASTING uint_64)(uint_32 CALL $191(( *(($8 + [20])) ? ($8 + [13]) : (*($8 + [12]) & [1]) ), [0], [0]))
	$1 = *($6 + [48])
	if ( ($1 == 0) ){ goto $label$14 }
	$9 = *($6 + [52])
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$20 }
	
.LOOP $label$37:
	$8 = ($9 + [-12])
	if ( ((*($8) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($9 + [-4])))
	
.LABEL $label$38
	$9 = $8
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$37 }
	$8 = *($6 + [48])
	goto $label$19 
	
.LABEL $label$24
	$8 = *(($8 + [20]))
	
.LABEL $label$23
	*($6 + [16]) = $8
	*($6 + [20]) = CALL $194($8)
	*($6 + [8]) = *($6 + [16])
	CALL $7(($6 + [24]), ($6 + [8]))
	*($3) = *($6 + [24])
	$1 = *($6 + [48])
	if ( ($1 == 0) ){ goto $label$16 }
	$9 = *($6 + [52])
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$40 }
	
.LOOP $label$41:
	$8 = ($9 + [-12])
	if ( ((*($8) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*(($9 + [-4])))
	
.LABEL $label$42
	$9 = $8
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$41 }
	$8 = *($6 + [48])
	goto $label$39 
	
.LABEL $label$40
	$8 = $1
	
.LABEL $label$39
	*($6 + [52]) = $1
	CALL _ZdlPv($8)
	$16 = [12]
	goto $label$13 
	
.LABEL $label$22
	$8 = $1
	
.LABEL $label$21
	*($6 + [52]) = $1
	CALL _ZdlPv($8)
	$10 = ($10 + [12])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$20
	$8 = $1
	
.LABEL $label$19
	*($6 + [52]) = $1
	CALL _ZdlPv($8)
	$10 = ($10 + [12])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$18
	$16 = [17]
	goto $label$13 
	
.LABEL $label$17
	$16 = [2]
	goto $label$13 
	
.LABEL $label$16
	$16 = [12]
	goto $label$13 
	
.LABEL $label$15
	$16 = [12]
	goto $label$13 
	
.LABEL $label$14
	$16 = [12]
	
.LABEL $label$13
	
.LOOP $label$43:
	goto $label$73 
	
.LABEL $label$77
	$8 = $9
	$9 = $7
	$15 = *($9 + [16])
	if ( ((uint_64)$15 <= (uint_64)$14) ){ goto $label$58 }
	$16 = [17]
	goto $label$43 
	
.LABEL $label$76
	$7 = *($9)
	if ( $7 ){ goto $label$54 }
	goto $label$55 
	
.LABEL $label$75
	if ( ((uint_64)$15 >= (uint_64)$14) ){ goto $label$53 }
	$16 = [16]
	goto $label$43 
	
.LABEL $label$74
	$8 = ($9 + [4])
	$7 = *($9 + [4])
	if ( ($7 == 0) ){ goto $label$56 }
	$16 = [0]
	goto $label$43 
	
.LABEL $label$73
	$9 = $8
	goto $label$57 
	
.LABEL $label$72
	$15 = (CASTING uint_64)(uint_32 $13)
	$7 = *($8)
	if ( $7 ){ goto $label$52 }
	$16 = [13]
	goto $label$43 
	
.LABEL $label$71
	*(($7 = CALL _Znwj([32]))) = (int_64)0
	*($7 + [8]) = $9
	*($8) = $7
	*($7 + [24]) = (int_64)0
	*($7 + [16]) = $14
	$9 = $7
	$13 = *(*($2))
	if ( ($13 == 0) ){ goto $label$44 }
	$16 = [14]
	goto $label$43 
	
.LABEL $label$70
	*($2) = $13
	$9 = *($8)
	$16 = [15]
	goto $label$43 
	
.LABEL $label$69
	CALL $41(*(($2 + [4])), $9)
	*(($8 = ($2 + [8]))) = (*($8) + [1])
	goto $label$51 
	
.LABEL $label$68
	$15 = (CASTING uint_64)(uint_32 $13)
	$8 = $9
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$50 }
	$16 = [4]
	goto $label$43 
	
.LABEL $label$67
	*(($8 = ($7 + [24]))) = ((int_64)( (int_64)0 ? *($8) : ((int_32)$1 == (int_32)$12) ) + (int_64)$15)
	$1 = *($6 + [48])
	if ( ($1 == 0) ){ goto $label$49 }
	$16 = [5]
	goto $label$43 
	
.LABEL $label$66
	$9 = *($6 + [52])
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$47 }
	$16 = [6]
	goto $label$43 
	
.LABEL $label$65
	$8 = ($9 + [-12])
	if ( ((*($8) & [1]) == 0) ){ goto $label$46 }
	$16 = [7]
	goto $label$43 
	
.LABEL $label$64
	CALL _ZdlPv(*(($9 + [-4])))
	$16 = [8]
	goto $label$43 
	
.LABEL $label$63
	$9 = $8
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$48 }
	$16 = [9]
	goto $label$43 
	
.LABEL $label$62
	$8 = *($6 + [48])
	goto $label$45 
	
.LABEL $label$61
	$8 = $1
	$16 = [10]
	goto $label$43 
	
.LABEL $label$60
	*($6 + [52]) = $1
	CALL _ZdlPv($8)
	$10 = ($10 + [12])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$59
	$10 = ($10 + [12])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$58
	$16 = [2]
	goto $label$43 
	
.LABEL $label$57
	$16 = [1]
	goto $label$43 
	
.LABEL $label$56
	$16 = [3]
	goto $label$43 
	
.LABEL $label$55
	$16 = [18]
	goto $label$43 
	
.LABEL $label$54
	$16 = [1]
	goto $label$43 
	
.LABEL $label$53
	$16 = [3]
	goto $label$43 
	
.LABEL $label$52
	$16 = [4]
	goto $label$43 
	
.LABEL $label$51
	$16 = [4]
	goto $label$43 
	
.LABEL $label$50
	$16 = [13]
	goto $label$43 
	
.LABEL $label$49
	$16 = [12]
	goto $label$43 
	
.LABEL $label$48
	$16 = [6]
	goto $label$43 
	
.LABEL $label$47
	$16 = [11]
	goto $label$43 
	
.LABEL $label$46
	$16 = [8]
	goto $label$43 
	
.LABEL $label$45
	$16 = [10]
	goto $label$43 
	
.LABEL $label$44
	$16 = [15]
	goto $label$43 
	
.LABEL $label$7
	$8 = *($4)
	CALL eosio_assert(((int_32)( *(($4 + [4])) ? uint_32($8 >> [1]) : ($8 & [1]) ) != (int_32)[0]), [10173])
	$1 = *($6 + [80])
	if ( ($1 == 0) ){ goto $label$78 }
	$9 = *($6 + [84])
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$80 }
	
.LOOP $label$81:
	$8 = ($9 + [-12])
	if ( ((*($8) & [1]) == 0) ){ goto $label$82 }
	CALL _ZdlPv(*(($9 + [-4])))
	
.LABEL $label$82
	$9 = $8
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$81 }
	$8 = *($6 + [80])
	goto $label$79 
	
.LABEL $label$80
	$8 = $1
	
.LABEL $label$79
	*($6 + [84]) = $1
	CALL _ZdlPv($8)
	
.LABEL $label$78
	$global$0 = ($6 + [96])
	$16
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = $2
	*($4 + [8]) = $1
	$5 = CALL db_find_i64($1, $2, (int_64)3607749779137757184, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $72(($4 + [8]), $5)
	if ( ((int_32)*($5 + [16]) == (int_32)($4 + [8])) ){ goto $label$5 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$5
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($4 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [32]))
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [9945])
	*(($0 + [8])) = *([0] + [8])
	*($0) = *([0])
	
.LABEL $label$3
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$2
	$0 = $6
	
.LABEL $label$1
	*($7) = $6
	CALL _ZdlPv($0)
	$global$0 = ($4 + [48])
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4) = [0]
	$5 = *($1 + [8])
	*($4 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = $4
	$7 = $1
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4) = $6
	$7 = *($1)
	
.LABEL $label$1
	CALL memcpy($6, $7, $5)
	$8 = *(($4 + [8]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$10 }
	if ( ((uint_32)$8 >= (uint_32)[9]) ){ goto $label$12 }
	$9 = ($4 + $8)
	if ( ($8 == 0) ){ goto $label$9 }
	
.LOOP $label$13:
	$10 = *($2)
	$5 = $4
	$6 = $8
	
.LOOP $label$14:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$14 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$15 }
	if ( ((int_32)*($5) <= (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$15
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$9 = *($4)
	$12 = ($9 + $8)
	
.LOOP $label$16:
	$10 = *($2)
	$5 = $9
	$6 = $8
	
.LOOP $label$17:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$17 }
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$18 }
	if ( ((int_32)*($5) <= (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$18
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$16 }
	
.LABEL $label$11
	$2 = $3
	
.LABEL $label$10
	if ( ($8 <= [9]) ){ goto $label$8 }
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$8 }
	CALL _ZdaPv($5)
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$7 }
	$5 = *($4)
	
.LOOP $label$19:
	if ( ((int_32)$5 <= (int_32)*($2)) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$19 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	if ( (*($1 + [12]) == 0) ){ goto $label$20 }
	$8 = ($2 + [1])
	goto $label$3 
	
.LABEL $label$20
	$9 = *(($1 + [8]))
	if ( ((uint_32)$9 >= (uint_32)[9]) ){ goto $label$6 }
	$12 = ($1 + $9)
	if ( ($9 == 0) ){ goto $label$5 }
	$8 = $2
	
.LOOP $label$21:
	$10 = *($8)
	$5 = $1
	$6 = $9
	
.LOOP $label$22:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$22 }
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$3 }
	if ( ((int_32)*($5) > (int_32)$10) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$21 }
	goto $label$4 
	
.LABEL $label$7
	$2 = $3
	goto $label$4 
	
.LABEL $label$6
	$12 = *($1)
	$1 = ($12 + $9)
	$8 = $2
	
.LOOP $label$23:
	$10 = *($8)
	$5 = $12
	$6 = $9
	
.LOOP $label$24:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$24 }
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	if ( ((int_32)*($5) > (int_32)$10) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$23 }
	goto $label$4 
	
.LABEL $label$5
	$6 = ((int_32)$12 == (int_32)$1)
	if ( $6 ){ goto $label$25 }
	$7 = ($3 + [-1])
	$5 = *($1)
	$8 = $2
	
.LOOP $label$26:
	if ( ((int_32)$5 > (int_32)*($8)) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	$8 = ($8 + [1])
	if ( ($6 == 0) ){ goto $label$26 }
	goto $label$3 
	
.LABEL $label$25
	$8 = $2
	goto $label$3 
	
.LABEL $label$4
	$8 = $3
	
.LABEL $label$3
	*($0 + [4]) = $8
	*($0) = $2
	$global$0 = ($4 + [16])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL $101($0, *($1), $2, $3)
}

void .FUNC $103 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [10609])
	
.LABEL $label$1
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$2
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7235159537265672192
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $106(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10015])
	
.LABEL $label$5
	$2 = CALL $200($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10038])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = (int_64)7235159537265672192
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $106(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $203($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $105 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [10609])
	
.LABEL $label$1
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$2
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7235159537265672192
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $106(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10701])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10747])
	
.LABEL $label$2
	*($1) = *(*($3))
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $3, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$3
	$global$0 = $5
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10660])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10660])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10660])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	$6 = *($0)
	$7 = ($1 + [8])
	CALL $141($7, ($5 + [8]))
	$5 = *($4)
	*($1 + [24]) = *($5 + [24])
	*($1 + [32]) = *($5 + [32])
	$8 = ($1 + [40])
	CALL $141($8, ($5 + [40]))
	$5 = *($4)
	*($1 + [52]) = *($5 + [52])
	*(($1 + [64])) = *(($5 + [64]))
	*($1 + [56]) = *($5 + [56])
	$4 = *($4)
	*($1 + [72]) = *($4 + [72])
	$9 = *(($4 + [80]))
	*($1 + [88]) = [0]
	*(($1 + [80])) = $9
	$4 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [61])
	$9 = (CASTING uint_64)(uint_32 $5)
	$10 = ($1 + [88])
	$11 = ($1 + [72])
	$12 = ($1 + [56])
	$13 = ($1 + [52])
	$14 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$5 = *(($1 + [40]))
	$5 = ( *(($1 + [44])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$4 = ($5 + $4)
	$9 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$5 = CALL $200($4)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$3
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = $7
	*($3 + [24]) = $1
	*($3 + [32]) = $14
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = $8
	*($3 + [44]) = $13
	*($3 + [48]) = $12
	*($3 + [52]) = $11
	*($3 + [56]) = $10
	CALL $111(($3 + [24]), ($3 + [16]))
	$9 = *($1)
	*($1 + [96]) = CALL db_store_i64(*($6 + [8]), (int_64)4229865212519383040, *(*($0 + [8])), $9, $5, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$9 >= (uint_64)*($6 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $203($5)
	if ( (uint_64)($9 <= *($6 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [64])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10660])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [10660])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $139(($2 + [24]), ($1 + [8]))
	$1 = CALL $139(($2 + [8]), ($1 + [20]))
	*($2 + [40]) = $3
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	CALL void $6((int_32 ($2 + [40])), (int_32 $4), (int_32 $1), (int_32 $0))
	if ( (*($1) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	$4 = ($0 + [224])
	$5 = *(($0 + [252]))
	if ( ((int_32)$5 == (int_32)*(($0 + [248]))) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	if ( ((int_32)*(($5 + [36])) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [9964])
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$6 = CALL db_find_i64(*($4), *(($0 + [232])), (int_64)-5868465776486252544, (int_64)-5868465776486252544)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $25($4, $6)
	if ( ((int_32)*(($5 + [36])) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8972])
	$5 = *(($0 + [252]))
	if ( ((int_32)$5 == (int_32)*(($0 + [248]))) ){ goto $label$5 }
	$0 = *(($5 + [-24]))
	if ( ((int_32)*(($0 + [36])) == (int_32)$4) ){ goto $label$6 }
	CALL eosio_assert([0], [9964])
	
.LABEL $label$6
	if ( $0 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)-5868465776486252544, (int_64)-5868465776486252544)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $25($4, $0)
	if ( ((int_32)*(($0 + [36])) == (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert([0], [9964])
	goto $label$3 
	
.LABEL $label$4
	$0 = [0]
	CALL eosio_assert([0], [10857])
	
.LABEL $label$3
	*((($3 + [104]) + [32])) = *(($0 + [32]))
	*((($3 + [104]) + [24])) = *(($0 + [24]))
	*((($3 + [104]) + [16])) = *(($0 + [16]))
	*((($3 + [104]) + [8])) = *(($0 + [8]))
	*($3 + [104]) = *($0)
	*($3) = [1]
	CALL $4(($3 + [32]), $1, $3)
	$0 = ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) )
	CALL sha256($0, CALL $194($0), $3)
	CALL assert_recover_key($3, ($3 + [32]), [66], ($3 + [104]), [34])
	$global$0 = ($3 + [144])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $36($0, *($1))
	CALL $36($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $117($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $143($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $143($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $138($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [96]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [11027])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4229865212519383040)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [10973])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10973])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $33(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [10609])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([104])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = [0]
	*($3 + [92]) = $1
	CALL $109(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [96])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $110(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$5
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $30($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $75(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10015])
	
.LABEL $label$5
	$4 = CALL $200($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL _Znwj([104])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = [0]
	*($5 + [92]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [52])
	*($3 + [64]) = ($5 + [56])
	*($3 + [68]) = ($5 + [72])
	*($3 + [72]) = ($5 + [88])
	CALL $49(($3 + [40]), ($3 + [32]))
	*($5 + [96]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $110(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $203($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $154($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $112(*($1), *($0))
	$3 = *($0)
	$4 = ($3 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10660])
	$5 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$4 = ($3 + [24])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10660])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$5 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $5
	*($2 + [8]) = *(($3 + [32]))
	if ( ((int_32)(*(($0 + [8])) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10660])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, ($2 + [8]), [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	CALL $112(*($1), ($3 + [40]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $198 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $156())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $199($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $199 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $200($1)
	
.LABEL $label$2
	*(CALL $156()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $200(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $203($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $196 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $197 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC $194 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $195 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL $192($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC $192 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $193 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_64 .FUNC $190 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $189($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $156()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $189($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [22513]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $188($0, (int_64)0)
	*(CALL $156()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $189($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $189($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $189($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $189($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [22513])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [22513]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [22513]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $189($0)
	$5 = *(($6 + [22513]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $189($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [22513]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8504]))
	$8 = (int_64)0
	$5 = *(($6 + [22513]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [22513]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $189($0)
	$5 = *(($6 + [22513]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $189($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [22513]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $188($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [22513]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [22513]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $189($0) + [22513]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $156()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $156()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $156()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $191 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $188($3, (int_64)0)
	$4 = CALL $190($3, $2, [1], (int_64)4294967295)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}