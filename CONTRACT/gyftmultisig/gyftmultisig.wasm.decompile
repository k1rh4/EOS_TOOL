(data (i32.const 8240) "failed to allocate pages\00Gyft request not found.\00")
(data (i32.const 8289) "Proposal ID is not found.\00")
(data (i32.const 8315) "Permission to delete proposal denied.\00")
(data (i32.const 8353) "OPEN\00")
(data (i32.const 8358) "APPROVED\00")
(data (i32.const 8367) "cannot create objects in table of another contract\00")
(data (i32.const 8418) "write\00")
(data (i32.const 8424) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8475) "error reading iterator\00")
(data (i32.const 8498) "read\00")
(data (i32.const 8503) "cannot pass end iterator to erase\00")
(data (i32.const 8537) "cannot increment end iterator\00")
(data (i32.const 8567) "object passed to erase is not in multi_index\00")
(data (i32.const 8612) "cannot erase objects in table of another contract\00")
(data (i32.const 8662) "attempt to remove object that was not in multi_index\00")
(data (i32.const 8715) "next primary key in table is at autoincrement limit\00")
(data (i32.const 8767) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 8821) "cannot decrement iterator at beginning of table\00")
(data (i32.const 8869) "object passed to modify is not in multi_index\00")
(data (i32.const 8915) "cannot modify objects in table of another contract\00")
(data (i32.const 8966) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9025) "get\00")
(data (i32.const 0) "H#\00\00")
(import "env" "current_receiver" (func $fimport$0 (result i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "abort" (func $fimport$2))
(import "env" "memset" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "is_account" (func $fimport$7 (param i64) (result i32)))
(import "env" "require_auth" (func $fimport$8 (param i64)))
(import "env" "has_auth" (func $fimport$9 (param i64) (result i32)))
(import "env" "action_data_size" (func $fimport$10 (result i32)))
(import "env" "read_action_data" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$14 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$15 (param i32 i32)))
(import "env" "__multf3" (func $fimport$16 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$17 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$18 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$20 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$25 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$27 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$28 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$32 (param i32 i64)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$33 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$34 (param i32 i32) (result i32)))
(import "env" "set_proposed_producers" (func $fimport$35 (param i32 i32) (result i64)))
(import "env" "current_time" (func $fimport$36 (result i64)))
(import "env" "get_active_producers" (func $fimport$37 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$38 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$39 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$40 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$41 (param i32)))
(import "env" "db_idx64_find_primary" (func $fimport$42 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$43 (param i32)))
(import "env" "db_previous_i64" (func $fimport$44 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$45 (param i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$46 (param i32 i64 i32 i32)))
(export "apply" (func $42))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $32 $39 $40 $27 $31 $30 $24 $36)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 9029))
(global $global$2 i32 (i32.const 9029))


int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $7($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $62 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [88]) = (int_64)0
	$5 = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8498])
	
.LABEL $label$5
	CALL memcpy(($3 + [88]), $2, [8])
	*(($3 + [8])) = $5
	*($3 + [20]) = ($2 + [8])
	*($3 + [16]) = $2
	*($3 + [24]) = $5
	*($3) = *($3 + [16])
	$2 = CALL $49(($3 + [32]), $0, $1, $3)
	CALL $31($2, *($3 + [88]))
	if ( (*($2 + [40]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [28]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $9(*(($2 + [48])))
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $9(*(($2 + [36])))
	$global$0 = ($3 + [96])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [96])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $20($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [84]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [8821])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5915097263692054528)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [8767])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [8767])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $37(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8498])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8498])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $54(*($1), *($0 + [8]))
	CALL $54(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [8498])
	$1 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $1, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
}

void .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	$2 = *($0)
	*($1) = $2
	*($1 + [8]) = $2
	*($1 + [24]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-5915097263692054528, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $37($1, $3)
	
.LOOP $label$2:
	if ( CALL has_auth(*($0)) ){ goto $label$3 }
	if ( CALL has_auth(*($3 + [8])) ){ goto $label$3 }
	CALL eosio_assert([0], [8315])
	
.LABEL $label$3
	if ( $3 ){ goto $label$4 }
	CALL eosio_assert([0], [8503])
	CALL eosio_assert([0], [8537])
	
.LABEL $label$4
	$4 = [0]
	$5 = CALL db_next_i64(*($3 + [84]), ($1 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $37($1, $5)
	
.LABEL $label$5
	CALL $38($1, $3)
	$3 = $4
	if ( $4 ){ goto $label$2 }
	
.LABEL $label$1
	CALL $35(($1 + [24]))
	$global$0 = ($1 + [48])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [24])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$4 = *($3)
	$3 = *($0 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$6
	$3 = *($0)
	$0 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$8 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$8
	*($2) = ($1 + [8])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [44]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8567])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [8612])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [8662])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [28]) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($6 + [36])))
	
.LABEL $label$13
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL $9(*(($6 + [24])))
	
.LABEL $label$14
	CALL $9($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$15:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$16 }
	if ( ((*($9 + [28]) & [1]) == 0) ){ goto $label$17 }
	CALL $9(*(($9 + [36])))
	
.LABEL $label$17
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$18 }
	CALL $9(*(($9 + [24])))
	
.LABEL $label$18
	CALL $9($9)
	
.LABEL $label$16
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$15 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
	$9 = *($1 + [52])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$20 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7464606065499714432, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL db_idx64_remove($9)
	
.LABEL $label$19
	$global$0 = ($2 + [16])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8475])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $7([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [44]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [28])
	*($3 + [56]) = ($5 + [40])
	CALL $65(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = [-1]
	*($5 + [48]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $26(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [36])))
	
.LABEL $label$11
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $9(*(($1 + [24])))
	
.LABEL $label$12
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $7(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $9($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $7($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $9($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $23 ()
{
	int_64 $0
	int_32 $1
	if ( (*([0] + [8221]) == 0) ){ goto $label$1 }
	return *([0] + [8224])
	
.LABEL $label$1
	if ( (*([0] + [8220]) == 0) ){ goto $label$3 }
	$0 = *([0] + [8232])
	goto $label$2 
	
.LABEL $label$3
	$0 = CALL current_time()
	*([0] + [8220]) = [1]
	*([0] + [8232]) = $0
	
.LABEL $label$2
	*([0] + [8221]) = [1]
	$1 = (CASTING uint_32)(uint_64 ((int_64)((int_64)((int_64)$0 / (int_64)1000) + (int_64)-946684800000) / (int_64)500))
	*([0] + [8224]) = $1
	return $1
}

void .FUNC $22 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	$6 = ($1 + [16])
	CALL $19($6, *($4 + [8]))
	$7 = ($1 + [28])
	CALL $19($7, *($4 + [12]))
	*($1 + [40]) = ((uint_64)((int_64)((int_64)(CASTING uint_64)(uint_32 CALL $23()) * (int_64)500000) + (int_64)946684800000000) / (uint_64)(int_64)1000000)
	$4 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($8 + [20])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [40])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$10 = *(($1 + [28]))
	$10 = ( *(($1 + [32])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$4 = ($10 + $4)
	$9 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $1($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = $6
	*($3 + [36]) = $7
	*($3 + [40]) = $8
	CALL $63(($3 + [24]), ($3 + [16]))
	$9 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($5 + [8]), (int_64)7464606065499714432, *(*($0 + [8])), $9, $2, $4)
	if ( ($4 <= [513]) ){ goto $label$5 }
	CALL $2($2)
	
.LABEL $label$5
	if ( (uint_64)($9 <= *($5 + [16])) ){ goto $label$6 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$9 = *(($5 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [52]) = CALL db_idx64_store($9, (int_64)7464606065499714432, $11, $12, ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = ($global$0 - [112])
	$global$0 = $5
	*($5 + [56]) = $2
	*($5 + [64]) = $1
	*(($6 = ($5 + [48]))) = [0]
	*($5 + [32]) = (int_64)-1
	*($5 + [40]) = (int_64)0
	*($5 + [52]) = [0]
	$1 = *($0)
	*($5 + [16]) = $1
	*($5 + [24]) = $1
	*($5 + [8]) = $3
	*($5 + [12]) = $4
	*($5 + [4]) = ($5 + [64])
	*($5) = ($5 + [56])
	*($5 + [104]) = $1
	if ( ((int_64)$1 == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [8367])
	
.LABEL $label$1
	*($5 + [84]) = $5
	*($5 + [80]) = ($5 + [16])
	*($5 + [88]) = ($5 + [104])
	*(($4 = CALL $7([56])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16 align=4]) = (int_64)0
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [44]) = ($5 + [16])
	CALL $25(($5 + [80]), $4)
	*($5 + [96]) = $4
	$1 = *($4)
	*($5 + [80]) = $1
	$0 = *($4 + [48])
	*($5 + [76]) = $0
	$7 = ($5 + [44])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*($6)) ){ goto $label$6 }
	*($3 + [8]) = $1
	*($3 + [16]) = $0
	*($5 + [96]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	$4 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $26(($5 + [40]), ($5 + [96]), ($5 + [80]), ($5 + [76]))
	$4 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( $4 ){ goto $label$4 }
	
.LABEL $label$5
	$0 = *($5 + [40])
	if ( ($0 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((*($4 + [28]) & [1]) == 0) ){ goto $label$7 }
	CALL $9(*(($4 + [36])))
	
.LABEL $label$7
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL $9(*(($4 + [24])))
	
.LABEL $label$8
	CALL $9($4)
	$0 = *($5 + [40])
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($5 + [44])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	if ( ((*($4 + [28]) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($4 + [36])))
	
.LABEL $label$13
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL $9(*(($4 + [24])))
	
.LABEL $label$14
	CALL $9($4)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$11 }
	$4 = *(($5 + [40]))
	goto $label$9 
	
.LABEL $label$10
	$4 = $0
	
.LABEL $label$9
	*($6) = $0
	CALL $9($4)
	
.LABEL $label$2
	$global$0 = ($5 + [112])
}

void .FUNC $27 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	*($2 + [36]) = [0]
	$4 = *($0)
	*($2) = $4
	*($2 + [8]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)7464606065499714432, $1)
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL $28($2, $0)
	if ( ((int_32)*($3 + [44]) == (int_32)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [8424])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8265])
	CALL eosio_assert([0], [8503])
	CALL eosio_assert([0], [8537])
	
.LABEL $label$1
	$0 = CALL db_next_i64(*($3 + [48]), ($2 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	CALL $28($2, $0)
	
.LABEL $label$3
	CALL $29($2, $3)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$9 }
	CALL $9(*(($3 + [36])))
	
.LABEL $label$9
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL $9(*(($3 + [24])))
	
.LABEL $label$10
	CALL $9($3)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$7 }
	$3 = *(($2 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL $9($3)
	
.LABEL $label$4
	$global$0 = ($2 + [48])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $22($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [36])))
	
.LABEL $label$11
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $9(*(($1 + [24])))
	
.LABEL $label$12
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $9($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $49 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($0) = $1
	*($0 + [8]) = $2
	$2 = *($3)
	*($0 + [16]) = $2
	$3 = *(($3 + [8]))
	*(($4 + [8])) = $3
	*(($0 + [24])) = $3
	*($4) = $2
	*(($0 + [36])) = [0]
	*($0 + [28 align=4]) = (int_64)0
	$5 = ($0 + [28])
	$3 = CALL $16([8353])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($3 + [16]) & [-16])
	$5 = CALL $7($6)
	*($0 + [28]) = ($6 | [1])
	*(($0 + [36])) = $5
	*(($0 + [32])) = $3
	
.LABEL $label$4
	CALL memcpy($5, [8353], $3)
	
.LABEL $label$3
	*(($5 + $3)) = [0]
	*(($0 + [48])) = [0]
	*($0 + [40 align=4]) = (int_64)0
	$5 = ($0 + [40])
	$3 = CALL $16([8358])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$8 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$6 = (($3 + [16]) & [-16])
	$5 = CALL $7($6)
	*($0 + [40]) = ($6 | [1])
	*(($0 + [48])) = $5
	*(($0 + [44])) = $3
	
.LABEL $label$7
	CALL memcpy($5, [8358], $3)
	
.LABEL $label$6
	*(($5 + $3)) = [0]
	$global$0 = ($4 + [16])
	return $0
	
.LABEL $label$2
	CALL $17($5)
	
.LABEL $label$1
	CALL $17($5)
	(unreachable)
	return (unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8498])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8498])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	CALL $54(*($1), ($3 + [16]))
	CALL $54(*($1), ($3 + [28]))
	CALL $54(*($1), ($3 + [40]))
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8498])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8498])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8498])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $54(*($1), *($0 + [12]))
	CALL $54(*($1), *($0 + [16]))
	CALL $54(*($1), *($0 + [20]))
	CALL $54(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [8498])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$3 = *($0 + [32])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [8498])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $1, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8418])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8418])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8418])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $64(*($1), *($0 + [12]))
	CALL $64(*($1), *($0 + [16]))
	CALL $64(*($1), *($0 + [20]))
	CALL $64(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [8418])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$3 = *($0 + [32])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [8418])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($1, $3, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
}

int_32 .FUNC $43 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [168]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $5)
	*($4 + [16]) = ($4 + [96])
	*($4 + [40]) = ($4 + [112])
	CALL $48(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [104])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [96])
	*($4) = $6
	*($4 + [24]) = $6
	$3 = CALL $49(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [168])
	CALL $50(($4 + [16]), ($4 + [112]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$14 }
	$2 = [1]
	if ( (*($3 + [40]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $2($2)
	$2 = [1]
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL $9(*(($3 + [48])))
	if ( ((*($3 + [28]) & $2) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( (*($3 + [28]) & $2) ){ goto $label$10 }
	
.LABEL $label$11
	$2 = [1]
	if ( (*($4 + [152]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $9(*(($3 + [36])))
	$2 = [1]
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $9(*(($4 + [160])))
	if ( ((*($4 + [140]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($4 + [140]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [128]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $9(*(($4 + [148])))
	$2 = [1]
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $9(*(($4 + [136])))
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)4929037352137289727) ){ goto $label$8 }
	if ( ((int_64)$2 > (int_64)3626371159920361471) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4997459176540717056) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)3626343085497229824) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [1]
	*($3) = *($3 + [120])
	CALL $43($1, $1, $3)
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 > (int_64)5378243340544352767) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)4929037352137289728) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)4931261077527831424) ){ goto $label$1 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [2]
	*($3 + [32]) = *($3 + [88])
	CALL $44($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)3626371159920361472) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)3849304916161986560) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [3]
	*($3 + [8]) = *($3 + [112])
	CALL $45($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)5378243340544352768) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)5378271414967484416) ){ goto $label$1 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [56]) = *($3 + [64])
	CALL $46($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [100]) = [0]
	*($3 + [96]) = [5]
	*($3 + [24]) = *($3 + [96])
	CALL $46($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [84]) = [0]
	*($3 + [80]) = [6]
	*($3 + [40]) = *($3 + [80])
	CALL $44($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [76]) = [0]
	*($3 + [72]) = [7]
	*($3 + [48]) = *($3 + [72])
	CALL $47($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [108]) = [0]
	*($3 + [104]) = [8]
	*($3 + [16]) = *($3 + [104])
	CALL $45($1, $1, ($3 + [16]))
	
.LABEL $label$1
	CALL $15([0])
	$global$0 = ($3 + [128])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [80]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8869])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [8915])
	
.LABEL $label$2
	$6 = *($1)
	$7 = ($1 + [60])
	CALL $19($7, (*($3) + [40]))
	*($1 + [76]) = ((uint_64)((int_64)((int_64)(CASTING uint_64)(uint_32 CALL $23()) * (int_64)500000) + (int_64)946684800000000) / (uint_64)(int_64)1000000)
	$8 = ($1 + [76])
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [8966])
	
.LABEL $label$3
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	*($5 + [48]) = $7
	*($5 + [56]) = $8
	*($5 + [24]) = $1
	$9 = ($1 + [8])
	*($5 + [28]) = $9
	$10 = ($1 + [16])
	*($5 + [32]) = $10
	$11 = ($1 + [24])
	*($5 + [36]) = $11
	$12 = ($1 + [36])
	*($5 + [40]) = $12
	$13 = ($1 + [48])
	*($5 + [44]) = $13
	$14 = ($1 + [72])
	*($5 + [52]) = $14
	CALL $67(($5 + [24]), $5)
	$3 = *($5 + [16])
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $1($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [28]) = $9
	*($5 + [32]) = $10
	*($5 + [36]) = $11
	*($5 + [40]) = $12
	*($5 + [44]) = $13
	*($5 + [48]) = $7
	*($5 + [52]) = $14
	*($5 + [56]) = $8
	*($5 + [24]) = $1
	CALL $68(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [84]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $2($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [64])
}

void .FUNC $40 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)-5915097263692054528, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $37(($2 + [8]), $4)
	if ( ((int_32)*($4 + [80]) == (int_32)($2 + [8])) ){ goto $label$2 }
	CALL eosio_assert([0], [8424])
	
.LABEL $label$2
	CALL require_auth(*($4 + [16]))
	$3 = *($0)
	*($2) = $0
	CALL $41(($2 + [8]), $4, $3, $2)
	CALL $35(($2 + [32]))
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL eosio_assert([0], [8289])
}

int_32 .FUNC $47 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $1($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [100]) = $3
	*($4 + [96]) = $3
	*($4 + [104]) = ($3 + $2)
	*($4 + [16]) = ($4 + [96])
	*($4 + [40]) = ($4 + [112])
	CALL $51(($4 + [40]), ($4 + [16]))
	$5 = *($4 + [104])
	*((($4 + [24]) + [8])) = $5
	*(($4 + [8])) = $5
	$6 = *($4 + [96])
	*($4) = $6
	*($4 + [24]) = $6
	$5 = CALL $49(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $5
	*($4 + [20]) = ($4 + [152])
	CALL $52(($4 + [16]), ($4 + [112]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$13 }
	$3 = [1]
	if ( (*($5 + [40]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $2($3)
	$3 = [1]
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $9(*(($5 + [48])))
	if ( ((*($5 + [28]) & $3) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( (*($5 + [28]) & $3) ){ goto $label$9 }
	
.LABEL $label$10
	$3 = [1]
	if ( (*($4 + [140]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $9(*(($5 + [36])))
	$3 = [1]
	if ( ((*($4 + [140]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $9(*(($4 + [148])))
	if ( (*($4 + [128]) & $3) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($4 + [128]) & $3) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $9(*(($4 + [136])))
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $46 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [96])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [88]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8498])
	
.LABEL $label$5
	CALL memcpy(($4 + [88]), $2, [8])
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$3 = CALL $49(($4 + [32]), $0, $1, $4)
	$8 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	if ( ($5 & [1]) ){ goto $label$12 }
	CALL void $8((int_32 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL void $8((int_32 $0), (int_64 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $2($2)
	$2 = [1]
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$2 = [1]
	if ( (*($3 + [40]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((*($3 + [28]) & $2) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	CALL $9(*(($3 + [48])))
	if ( ((*($3 + [28]) & $2) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $9(*(($3 + [36])))
	
.LABEL $label$6
	$global$0 = ($4 + [96])
	return [1]
}

int_32 .FUNC $45 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [96])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [88]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8498])
	
.LABEL $label$5
	CALL memcpy(($4 + [88]), $2, [8])
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$3 = CALL $49(($4 + [32]), $0, $1, $4)
	$8 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	if ( ($5 & [1]) ){ goto $label$12 }
	CALL void $8((int_32 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL void $8((int_32 $0), (int_64 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $2($2)
	$2 = [1]
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$2 = [1]
	if ( (*($3 + [40]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((*($3 + [28]) & $2) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	CALL $9(*(($3 + [48])))
	if ( ((*($3 + [28]) & $2) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $9(*(($3 + [36])))
	
.LABEL $label$6
	$global$0 = ($4 + [96])
	return [1]
}

int_32 .FUNC $44 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [96])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [16])) = $3
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$3 = CALL $49(($4 + [40]), $0, $1, ($4 + [8]))
	$8 = (($4 + [40]) + int_32($5 >> [1]))
	if ( ($5 & [1]) ){ goto $label$11 }
	CALL void $8((int_32 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL void $8((int_32 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $2($2)
	$2 = [1]
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = [1]
	if ( (*($3 + [40]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((*($3 + [28]) & $2) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL $9(*(($3 + [48])))
	if ( ((*($3 + [28]) & $2) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $9(*(($3 + [36])))
	
.LABEL $label$5
	$global$0 = ($4 + [96])
	return [1]
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $7($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $22($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $9($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8498])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8498])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $54(*($1), ($0 + [16]))
	CALL $54(*($1), ($0 + [28]))
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [60]) & [1]) == 0) ){ goto $label$10 }
	CALL $9(*(($1 + [68])))
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $9(*(($1 + [56])))
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $9(*(($1 + [44])))
	if ( (*($1 + [24]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $9(*(($1 + [32])))
	
.LABEL $label$4
	CALL $9($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $9($1)
	
.LABEL $label$11
	return $0
}

void .FUNC $60 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [180]) = $2
	*($3 + [176]) = $2
	$5 = ($2 + $4)
	*($3 + [184]) = $5
	*($3 + [168]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8498])
	$5 = *(($3 + [184]))
	$2 = *($3 + [180])
	
.LABEL $label$5
	CALL memcpy(($3 + [168]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [180]) = $2
	*($3 + [160]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8498])
	$2 = *($3 + [180])
	
.LABEL $label$6
	CALL memcpy(($3 + [160]), $2, [8])
	*($3 + [180]) = ($2 + [8])
	*($3 + [152]) = [0]
	*($3 + [144]) = (int_64)0
	CALL $54(($3 + [176]), ($3 + [144]))
	*($3 + [136]) = [0]
	*($3 + [128]) = (int_64)0
	CALL $54(($3 + [176]), ($3 + [128]))
	$2 = *((($3 + [176]) + [8]))
	*((($3 + [56]) + [8])) = $2
	*((($3 + [8]) + [8])) = $2
	$6 = *($3 + [176])
	*($3 + [8]) = $6
	*($3 + [56]) = $6
	$4 = CALL $18(($3 + [24]), ($3 + [128]))
	$5 = CALL $18(($3 + [40]), ($3 + [144]))
	$2 = CALL $49(($3 + [72]), $0, $1, ($3 + [8]))
	CALL $24($2, *($3 + [168]), *($3 + [160]), $5, $4)
	if ( (*($4) & [1]) ){ goto $label$17 }
	if ( (*($5) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $9(*($4 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL $9(*($5 + [8]))
	$4 = [1]
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$4 = [1]
	if ( (*($2 + [40]) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($2 + [28]) & $4) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $9(*(($2 + [48])))
	if ( ((*($2 + [28]) & $4) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $9(*(($2 + [36])))
	$2 = [1]
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$2 = [1]
	if ( (*($3 + [128]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($3 + [144]) & $2) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $9(*(($3 + [136])))
	if ( ((*($3 + [144]) & $2) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $9(*(($3 + [152])))
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [192])
}

void .FUNC $71 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = ($global$0 - [48])
	$global$0 = $6
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$8 = (*($0) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($8) + $0))
	
.LABEL $label$1
	$5 = CALL $18($6, $5)
	$4 = CALL $18(($6 + [16]), $4)
	$3 = CALL $18(($6 + [32]), $3)
	CALL void $8((int_32 $1), (int_64 $2), (int_64 $3), (int_32 $4), (int_32 $5), (int_32 $0))
	if ( (*($5) & [1]) ){ goto $label$6 }
	if ( (*($4) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $9(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $9(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($3) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($6 + [48])
	return 
	
.LABEL $label$2
	CALL $9(*($3 + [8]))
	$global$0 = ($6 + [48])
}

int_32 .FUNC $8 (int_32 $0)
{
	return CALL $7($0)
}

void .FUNC $9 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

int_32 .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $4())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $5($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $1($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $1($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $4 ()
{
	return [8208]
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $1($1)
	
.LABEL $label$2
	*(CALL $4()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $1(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $2($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $2 (int_32 $0)
{
}

void .FUNC $3 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

void .FUNC $0 ()
{
	CALL $3()
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8240])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	CALL $13($0, $1)
}

void .FUNC $15 (int_32 $0)
{
}

int_32 .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $17 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $10 (int_32 $0)
{
	CALL $9($0)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $6(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $6(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	return CALL $11($0, $1)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

void .FUNC $36 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$4 = *($0)
	*($2) = $4
	*($2 + [8]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)-5915097263692054528, $1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = CALL $37($2, $5)
	if ( ((int_32)*($3 + [80]) == (int_32)$2) ){ goto $label$6 }
	CALL eosio_assert([0], [8424])
	
.LABEL $label$6
	if ( CALL has_auth(*($0)) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [8289])
	if ( CALL has_auth(*($0)) ){ goto $label$3 }
	
.LABEL $label$4
	if ( CALL has_auth(*($3 + [8])) ){ goto $label$3 }
	CALL eosio_assert([0], [8315])
	if ( $3 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( $3 ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8503])
	CALL eosio_assert([0], [8537])
	
.LABEL $label$1
	$0 = CALL db_next_i64(*($3 + [84]), ($2 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	CALL $37($2, $0)
	
.LABEL $label$7
	CALL $38($2, $3)
	CALL $35(($2 + [24]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8475])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $7([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [80]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [36])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [60])
	*($3 + [68]) = ($5 + [72])
	*($3 + [72]) = ($5 + [76])
	CALL $69(($3 + [40]), ($3 + [32]))
	*($5 + [84]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $34(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( (*($1 + [60]) & [1]) ){ goto $label$17 }
	if ( (*($1 + [48]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $9(*(($1 + [68])))
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL $9(*(($1 + [56])))
	$4 = [1]
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$4 = [1]
	if ( (*($1 + [36]) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((*($1 + [24]) & $4) == 0) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	CALL $9(*(($1 + [44])))
	if ( ((*($1 + [24]) & $4) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $9(*(($1 + [32])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL $7(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $22($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $70(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

int_32 .FUNC $35 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [60]) & [1]) == 0) ){ goto $label$12 }
	CALL $9(*(($3 + [68])))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $9(*(($3 + [56])))
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $9(*(($3 + [44])))
	if ( (*($3 + [24]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $9(*(($3 + [32])))
	
.LABEL $label$6
	CALL $9($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $9($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	$6 = ($global$0 - [128])
	$global$0 = $6
	*($6 + [72]) = $2
	*($6 + [80]) = $1
	CALL require_auth($1)
	*(($7 = ($6 + [64]))) = [0]
	*($6 + [48]) = (int_64)-1
	*($6 + [56]) = (int_64)0
	$1 = *($0)
	*($6 + [32]) = $1
	*($6 + [40]) = $1
	*($6 + [12]) = $3
	*($6 + [16]) = $4
	*($6 + [20]) = $5
	*($6 + [24]) = $0
	*($6 + [4]) = ($6 + [80])
	*($6) = ($6 + [32])
	*($6 + [8]) = ($6 + [72])
	*($6 + [120]) = $1
	if ( ((int_64)CALL current_receiver() == (int_64)*($6 + [32])) ){ goto $label$1 }
	CALL eosio_assert([0], [8367])
	
.LABEL $label$1
	*($6 + [100]) = $6
	*($6 + [96]) = ($6 + [32])
	*($6 + [104]) = ($6 + [120])
	*(($0 = CALL $7([96])) + [16]) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*($0 + [40 align=4]) = (int_64)0
	*($0 + [48 align=4]) = (int_64)0
	*($0 + [56 align=4]) = (int_64)0
	*($0 + [64 align=4]) = (int_64)0
	*($0 + [80]) = ($6 + [32])
	CALL $33(($6 + [96]), $0)
	*($6 + [112]) = $0
	$1 = *($0)
	*($6 + [96]) = $1
	$4 = *($0 + [84])
	*($6 + [92]) = $4
	$3 = ($6 + [60])
	$5 = *($3)
	if ( ((uint_32)$5 >= (uint_32)*($7)) ){ goto $label$4 }
	*($5 + [8]) = $1
	*($5 + [16]) = $4
	*($6 + [112]) = [0]
	*($5) = $0
	*($3) = ($5 + [24])
	$0 = *($6 + [112])
	*($6 + [112]) = [0]
	if ( ($0 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	CALL $34(($6 + [56]), ($6 + [112]), ($6 + [96]), ($6 + [92]))
	$0 = *($6 + [112])
	*($6 + [112]) = [0]
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	if ( (*($0 + [60]) & [1]) ){ goto $label$11 }
	if ( (*($0 + [48]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $9(*(($0 + [68])))
	if ( ((*($0 + [48]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $9(*(($0 + [56])))
	$5 = [1]
	if ( ((*($0 + [36]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = [1]
	if ( (*($0 + [36]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((*($0 + [24]) & $5) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL $9(*(($0 + [44])))
	if ( ((*($0 + [24]) & $5) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $9(*(($0 + [32])))
	
.LABEL $label$5
	CALL $9($0)
	
.LABEL $label$2
	CALL $35(($6 + [56]))
	$global$0 = ($6 + [128])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5 + [24])
	$7 = *($5)
	$8 = *($7 + [16])
	if ( ((int_64)$8 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$8 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = (int_64)0
	$9 = CALL db_lowerbound_i64(*($7), *($7 + [8]), (int_64)-5915097263692054528, (int_64)0)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $37($7, $9)
	*($3 + [28]) = [0]
	*($3 + [24]) = $7
	$8 = *(*(CALL $66(($3 + [24])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	*(($7 + [16])) = $8
	if ( (uint_64)($8 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [8715])
	$8 = *(($7 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*(($7 + [16])) = (int_64)0
	
.LABEL $label$1
	*($1) = $8
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	$9 = ($1 + [24])
	CALL $19($9, *($5 + [12]))
	$10 = ($1 + [36])
	CALL $19($10, *($5 + [16]))
	$11 = ($1 + [48])
	CALL $19($11, *($5 + [20]))
	$12 = ($1 + [60])
	CALL $19($12, ($6 + [28]))
	*($1 + [72]) = ((uint_64)((int_64)((int_64)(CASTING uint_64)(uint_32 CALL $23()) * (int_64)500000) + (int_64)946684800000000) / (uint_64)(int_64)1000000)
	*($3 + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$13 = ($1 + [16])
	*($3 + [32]) = $13
	*($3 + [36]) = $9
	*($3 + [40]) = $10
	*($3 + [44]) = $11
	*($3 + [48]) = $12
	$14 = ($1 + [72])
	*($3 + [52]) = $14
	$15 = ($1 + [76])
	*($3 + [56]) = $15
	CALL $67(($3 + [24]), $3)
	$7 = *($3 + [16])
	if ( ($7 <= [513]) ){ goto $label$6 }
	$5 = CALL $1($7)
	goto $label$5 
	
.LABEL $label$6
	$5 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $7)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	*($3 + [32]) = $13
	*($3 + [36]) = $9
	*($3 + [40]) = $10
	*($3 + [44]) = $11
	*($3 + [48]) = $12
	*($3 + [52]) = $14
	*($3 + [56]) = $15
	CALL $68(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($4 + [8]), (int_64)-5915097263692054528, *(*($0 + [8])), $8, $5, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $2($5)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [64])
}

void .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	*($1 + [36]) = [0]
	$2 = *($0)
	*($1) = $2
	*($1 + [8]) = $2
	*($1 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)7464606065499714432, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $28($1, $0)
	
.LOOP $label$2:
	if ( (CALL is_account(*($0)) == 0) ){ goto $label$3 }
	if ( $0 ){ goto $label$4 }
	CALL eosio_assert([0], [8503])
	CALL eosio_assert([0], [8537])
	
.LABEL $label$4
	$3 = [0]
	$4 = CALL db_next_i64(*($0 + [48]), ($1 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL $28($1, $4)
	
.LABEL $label$5
	CALL $29($1, $0)
	$0 = $3
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = *($0 + [48])
	$0 = [0]
	$3 = CALL db_next_i64($3, ($1 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$0 = CALL $28($1, $3)
	
.LABEL $label$6
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$4 = *($1 + [24])
	if ( ($4 == 0) ){ goto $label$7 }
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	if ( ((*($0 + [28]) & [1]) == 0) ){ goto $label$12 }
	CALL $9(*(($0 + [36])))
	
.LABEL $label$12
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($0 + [24])))
	
.LABEL $label$13
	CALL $9($0)
	
.LABEL $label$11
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$10 }
	$0 = *(($1 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $4
	
.LABEL $label$8
	*($5) = $4
	CALL $9($0)
	
.LABEL $label$7
	$global$0 = ($1 + [48])
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth((int_64)7464601119210252160)
	$3 = [0]
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	*($2 + [36]) = [0]
	$4 = *($0)
	*($2) = $4
	*($2 + [8]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)7464606065499714432, $1)
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL $28($2, $0)
	if ( ((int_32)*($3 + [44]) == (int_32)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [8424])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8265])
	CALL eosio_assert([0], [8503])
	CALL eosio_assert([0], [8537])
	
.LABEL $label$1
	$0 = CALL db_next_i64(*($3 + [48]), ($2 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	CALL $28($2, $0)
	
.LABEL $label$3
	CALL $29($2, $3)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$9 }
	CALL $9(*(($3 + [36])))
	
.LABEL $label$9
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL $9(*(($3 + [24])))
	
.LABEL $label$10
	CALL $9($3)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$7 }
	$3 = *(($2 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL $9($3)
	
.LABEL $label$4
	$global$0 = ($2 + [48])
}

void .FUNC $58 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	$4 = ($2 + $4)
	*(($3 + [16])) = $4
	*($3 + [28]) = $2
	*($3 + [24]) = $2
	*($3 + [32]) = $4
	*($3 + [8]) = *($3 + [24])
	$2 = CALL $49(($3 + [40]), $0, $1, ($3 + [8]))
	CALL $39($2)
	if ( (*($2 + [40]) & [1]) ){ goto $label$7 }
	if ( (*($2 + [28]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $9(*(($2 + [48])))
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $9(*(($2 + [36])))
	$global$0 = ($3 + [96])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [96])
}

void .FUNC $59 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	$4 = ($2 + $4)
	*(($3 + [16])) = $4
	*($3 + [28]) = $2
	*($3 + [24]) = $2
	*($3 + [32]) = $4
	*($3 + [8]) = *($3 + [24])
	$2 = CALL $49(($3 + [40]), $0, $1, ($3 + [8]))
	CALL $30($2)
	if ( (*($2 + [40]) & [1]) ){ goto $label$7 }
	if ( (*($2 + [28]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $9(*(($2 + [48])))
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $9(*(($2 + [36])))
	$global$0 = ($3 + [96])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [96])
}

void .FUNC $61 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [88]) = (int_64)0
	$5 = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8498])
	
.LABEL $label$5
	CALL memcpy(($3 + [88]), $2, [8])
	*(($3 + [8])) = $5
	*($3 + [20]) = ($2 + [8])
	*($3 + [16]) = $2
	*($3 + [24]) = $5
	*($3) = *($3 + [16])
	$2 = CALL $49(($3 + [32]), $0, $1, $3)
	CALL $27($2, *($3 + [88]))
	if ( (*($2 + [40]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [28]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $9(*(($2 + [48])))
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $9(*(($2 + [36])))
	$global$0 = ($3 + [96])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [96])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8418])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8418])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $64(*($1), *($0 + [8]))
	CALL $64(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [8418])
	$1 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($1, $3, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8418])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [8418])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	$1 = CALL $18($2, ($1 + [40]))
	$4 = CALL $18(($2 + [16]), ($1 + [28]))
	$3 = CALL $18(($2 + [32]), ($1 + [16]))
	CALL $71($0, *($1), *($1 + [8]), $3, $4, $1)
	if ( (*($1) & [1]) ){ goto $label$5 }
	if ( (*($4) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $9(*($1 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL $9(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	CALL $9(*($3 + [8]))
	$global$0 = ($2 + [48])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [80]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8567])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [8612])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [8662])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [60]) & [1]) == 0) ){ goto $label$19 }
	CALL $9(*(($5 + [68])))
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL $9(*(($5 + [56])))
	if ( ((*($5 + [36]) & [1]) == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((*($5 + [36]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL $9(*(($5 + [44])))
	if ( (*($5 + [24]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL $9(*(($5 + [32])))
	
.LABEL $label$13
	CALL $9($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$20:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$21 }
	if ( ((*($8 + [60]) & [1]) == 0) ){ goto $label$28 }
	CALL $9(*(($8 + [68])))
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$28
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL $9(*(($8 + [56])))
	if ( ((*($8 + [36]) & [1]) == 0) ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$26
	if ( ((*($8 + [36]) & [1]) == 0) ){ goto $label$24 }
	
.LABEL $label$25
	CALL $9(*(($8 + [44])))
	if ( (*($8 + [24]) & [1]) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	if ( ((*($8 + [24]) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL $9(*(($8 + [32])))
	
.LABEL $label$22
	CALL $9($8)
	
.LABEL $label$21
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$20 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [84]))
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $18(($2 + [16]), ($1 + [16]))
	$1 = CALL $18($2, ($1 + [28]))
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$8 = CALL $18(($2 + [32]), $1)
	$6 = CALL $18(($2 + [48]), $5)
	CALL void $7((int_32 $4), (int_64 $3), (int_64 $6), (int_32 $8), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $9(*($8 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $9(*($6 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($5) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $9(*($1 + [8]))
	if ( ((*($5) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $9(*($5 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC $53 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [224])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [212]) = $2
	*($3 + [208]) = $2
	$5 = ($2 + $4)
	*($3 + [216]) = $5
	*($3 + [200]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8498])
	$5 = *(($3 + [216]))
	$2 = *($3 + [212])
	
.LABEL $label$5
	CALL memcpy(($3 + [200]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [212]) = $2
	*($3 + [192]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8498])
	$2 = *($3 + [212])
	
.LABEL $label$6
	CALL memcpy(($3 + [192]), $2, [8])
	*($3 + [212]) = ($2 + [8])
	*($3 + [184]) = [0]
	*($3 + [176]) = (int_64)0
	CALL $54(($3 + [208]), ($3 + [176]))
	*($3 + [168]) = [0]
	*($3 + [160]) = (int_64)0
	CALL $54(($3 + [208]), ($3 + [160]))
	*($3 + [152]) = [0]
	*($3 + [144]) = (int_64)0
	CALL $54(($3 + [208]), ($3 + [144]))
	$2 = *((($3 + [208]) + [8]))
	*((($3 + [72]) + [8])) = $2
	*((($3 + [8]) + [8])) = $2
	$6 = *($3 + [208])
	*($3 + [8]) = $6
	*($3 + [72]) = $6
	$4 = CALL $18(($3 + [24]), ($3 + [144]))
	$7 = CALL $18(($3 + [40]), ($3 + [160]))
	$5 = CALL $18(($3 + [56]), ($3 + [176]))
	$2 = CALL $49(($3 + [88]), $0, $1, ($3 + [8]))
	CALL $32($2, *($3 + [200]), *($3 + [192]), $5, $7, $4)
	if ( (*($4) & [1]) ){ goto $label$21 }
	if ( (*($7) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL $9(*($4 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL $9(*($7 + [8]))
	$4 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$4 = [1]
	if ( (*($5) & [1]) ){ goto $label$17 }
	
.LABEL $label$18
	if ( (*($2 + [40]) & $4) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $9(*($5 + [8]))
	if ( ((*($2 + [40]) & $4) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL $9(*(($2 + [48])))
	$4 = [1]
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$4 = [1]
	if ( (*($2 + [28]) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($3 + [144]) & $4) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $9(*(($2 + [36])))
	if ( ((*($3 + [144]) & $4) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $9(*(($3 + [152])))
	$2 = [1]
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$2 = [1]
	if ( (*($3 + [160]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($3 + [176]) & $2) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $9(*(($3 + [168])))
	if ( ((*($3 + [176]) & $2) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $9(*(($3 + [184])))
	$global$0 = ($3 + [224])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [224])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $55($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $7($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $21($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $21($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $17($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $9($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [9025])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $72($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8498])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $56 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $1($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [88])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [88])
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8498])
	
.LABEL $label$1
	CALL memcpy($5, $2, [8])
	*(($3 + [8])) = $6
	*($3 + [20]) = ($2 + [8])
	*($3 + [16]) = $2
	*($3 + [24]) = $6
	*($3) = *($3 + [16])
	$2 = CALL $49(($3 + [32]), $0, $1, $3)
	CALL $40($2, *($3 + [88]))
	if ( (*($2 + [40]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [28]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $9(*(($2 + [48])))
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $9(*(($2 + [36])))
	$global$0 = ($3 + [96])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [96])
}

void .FUNC $57 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $1($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [88])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [88])
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8498])
	
.LABEL $label$1
	CALL memcpy($5, $2, [8])
	*(($3 + [8])) = $6
	*($3 + [20]) = ($2 + [8])
	*($3 + [16]) = $2
	*($3 + [24]) = $6
	*($3) = *($3 + [16])
	$2 = CALL $49(($3 + [32]), $0, $1, $3)
	CALL $36($2, *($3 + [88]))
	if ( (*($2 + [40]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [28]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $9(*(($2 + [48])))
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $9(*(($2 + [36])))
	$global$0 = ($3 + [96])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [96])
}