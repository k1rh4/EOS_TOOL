(data (i32.const 8192) "0123456789abcdef\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8218) "read_transaction failed\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8333) "unable to find balance by symbol\00")
(data (i32.const 8366) "unable to find key\00")
(data (i32.const 8385) "EOS\00")
(data (i32.const 8389) "eosio.ram\00")
(data (i32.const 8399) "eosio.token\00")
(data (i32.const 8411) "betlottocomp\00")
(data (i32.const 8424) "bithumbshiny\00")
(data (i32.const 8437) "bitfinexcw55\00%d\00")
(data (i32.const 8453) "okexoffiline\00")
(data (i32.const 8466) "chintailease\00")
(data (i32.const 8479) "eosio.ramfee\00")
(data (i32.const 8492) "quantity invalid\00")
(data (i32.const 8509) "transfer quantity must be positive\00")
(data (i32.const 17272) "YOU WON, congratulations. \e6\81\ad\e5\96\9c\e4\bd\a0\e4\b8\ad\e5\a5\96. \e5\8b\9d\e5\88\a9\e3\82\92\e3\81\8a\e7\a5\9d\e3\81\84\e3\81\97\e3\81\be\e3\81\99. \ec\8a\b9\eb\a6\ac\eb\a5\bc \ec\b6\95\ed\95\98\ed\95\a9\eb\8b\88\eb\8b\a4. team @ http://enjoy.bet\00")
(data (i32.const 17395) "Jackpot, congratulations. \e6\81\ad\e5\96\9c\e4\bd\a0\e4\b8\ad\e5\a4\a7\e5\a5\96. \e5\a4\a7\e8\b3\9e\e3\81\8a\e3\82\81\e3\81\a7\e3\81\a8\e3\81\86. \eb\8c\80\ec\83\81\ec\9d\84 \ec\b6\95\ed\95\98\ed\95\a9\eb\8b\88\eb\8b\a4. team @ http://enjoy.bet \00")
(data (i32.const 17516) "Lucky dividend. Lucky\e5\b9\b3\e5\88\86\e5\a5\96\e9\87\91. \e8\b3\9e\e9\87\91\e3\82\92\e7\ad\89\e5\88\86\e3\81\99\e3\82\8b. \ec\83\81\ea\b8\88\ec\9d\84 \eb\98\91\ea\b0\99\ec\9d\b4 \eb\82\98\eb\88\84\eb\8b\a4. team @ http://enjoy.bet \00")
(data (i32.const 17630) "unable to find the global config, run init firstly\00")
(data (i32.const 17681) "unable to find the symbol config\00")
(data (i32.const 17714) "period status is invalid\00: no conversion\00")
(data (i32.const 17755) "a period with same symbol is already running.\00: out of range\00")
(data (i32.const 17816) "receiver is invalid\00")
(data (i32.const 17836) "invalid contract code\00")
(data (i32.const 17858) "to account should be contract account\00")
(data (i32.const 17896) "eosio\00")
(data (i32.const 17902) "invalid memo for instant lottery\00")
(data (i32.const 17935) "cannot find running period\00")
(data (i32.const 17962) "invalid bet count\00")
(data (i32.const 17980) "invalid bet amount\00")
(data (i32.const 17999) "available count should equal to tickets selected\00")
(data (i32.const 18048) "active\00")
(data (i32.const 18055) "transfer\00")
(data (i32.const 18064) "bet refund\00")
(data (i32.const 18075) "cannot get period by serial\00")
(data (i32.const 18103) "period status should be settling\00")
(data (i32.const 18136) "cannot find bet by jackpot serial\00")
(data (i32.const 18170) "cannot find bet by lucky bet serial\00")
(data (i32.const 18206) "period status is not running\00")
(data (i32.const 18235) "enjoyprovide\00")
(data (i32.const 18248) "reward\00")
(data (i32.const 18255) "lucky\00")
(data (i32.const 18261) "onerror\00")
(data (i32.const 18269) "string is too long to be a valid symbol_code\00")
(data (i32.const 18314) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 18367) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18416) "invalid symbol name\00")
(data (i32.const 18436) "attempt to add asset with different symbol\00")
(data (i32.const 18479) "addition underflow\00")
(data (i32.const 18498) "addition overflow\00")
(data (i32.const 18516) "string is too long to be a valid name\00")
(data (i32.const 18554) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 18621) "character is not in allowed character set for names\00")
(data (i32.const 18673) "write\00")
(data (i32.const 18679) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18730) "error reading iterator\00")
(data (i32.const 18753) "read\00")
(data (i32.const 18758) "get\00")
(data (i32.const 18762) "cannot create objects in table of another contract\00")
(data (i32.const 18813) "next primary key in table is at autoincrement limit\00")
(data (i32.const 18865) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 18919) "cannot decrement iterator at beginning of table\00")
(data (i32.const 18967) "cannot pass end iterator to modify\00")
(data (i32.const 19002) "object passed to modify is not in multi_index\00")
(data (i32.const 19048) "cannot modify objects in table of another contract\00")
(data (i32.const 19099) "updater cannot change primary key when modifying an object\00")
(data (i32.const 19158) "cannot increment end iterator\00")
(data (i32.const 19188) "stopround\00")
(data (i32.const 19198) "cannot find tablename, should not reach here\00")
(data (i32.const 19244) "0K\00\00")
(data (i32.const 19248) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 19281) "cannot get first bet\00")
(data (i32.const 19302) "lucky first bet bonus\00")
(data (i32.const 19324) "cannot get last bet\00")
(data (i32.const 19344) "lucky last bet bonus\00")
(data (i32.const 19365) "lucky jackpot commission\00")
(data (i32.const 19390) "cannot pass end iterator to erase\00")
(data (i32.const 19424) "object passed to erase is not in multi_index\00")
(data (i32.const 19469) "cannot erase objects in table of another contract\00")
(data (i32.const 19519) "attempt to remove object that was not in multi_index\00")
(data (i32.const 19584) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 19664) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "transaction_size" (func $fimport$0 (result i32)))
(import "env" "read_transaction" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "sha256" (func $fimport$3 (param i32 i32 i32)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$5 (result i32)))
(import "env" "tapos_block_num" (func $fimport$6 (result i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "sha512" (func $fimport$8 (param i32 i32 i32)))
(import "env" "require_auth" (func $fimport$9 (param i64)))
(import "env" "current_receiver" (func $fimport$10 (result i64)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$14 (param i32 i32)))
(import "env" "send_deferred" (func $fimport$15 (param i32 i64 i32 i32 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$16 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$17 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$18 (result i32)))
(import "env" "read_action_data" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$21 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$22 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$24 (param i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$25 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$26 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$27 (param i32 i64 i32)))
(import "env" "cancel_deferred" (func $fimport$28 (param i32) (result i32)))
(import "env" "memmove" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$30 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$31 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$32 (param i32)))
(import "env" "abort" (func $fimport$33))
(import "env" "memset" (func $fimport$34 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$35 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$40 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$42 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$43 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$44 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$45 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$46 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$47 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$48 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$49 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$50 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$51 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$52 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$53 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$54 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $65))
(export "_ZdlPv" (func $122))
(export "_Znwj" (func $120))
(export "_Znaj" (func $121))
(export "_ZdaPv" (func $123))
(export "_ZnwjSt11align_val_t" (func $124))
(export "_ZnajSt11align_val_t" (func $125))
(export "_ZdlPvSt11align_val_t" (func $126))
(export "_ZdaPvSt11align_val_t" (func $127))
(table $0 15 15 anyfunc)
(elem (i32.const 1) $36 $15 $61 $59 $20 $31 $63 $50 $28 $12 $13 $14 $151 $153)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19921))
(global $global$2 i32 (i32.const 19921))


int_32 .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$1 = ($global$0 - [176])
	$global$0 = $1
	$2 = CALL $164([8385])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [18269])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [18314])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert([1], [18367])
	$5 = ((int_64)$3 & (int_64)72057594037927935)
	$6 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$5 = $3
	$4 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$5 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [18416])
	*($1 + [168]) = [8389]
	*($1 + [172]) = CALL $164([8389])
	*($1 + [88]) = *($1 + [168])
	$3 = *(CALL $7(($1 + [96]), ($1 + [88])))
	$2 = CALL $164([8385])
	if ( ($2 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [18269])
	goto $label$14 
	
.LABEL $label$15
	if ( ($2 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$5 = (int_64)0
	
.LOOP $label$16:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [18314])
	
.LABEL $label$17
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$13
	$5 = (int_64)0
	
.LABEL $label$12
	*($1 + [168]) = [8399]
	*($1 + [172]) = CALL $164([8399])
	*($1 + [80]) = *($1 + [168])
	$8 = *(CALL $7(($1 + [96]), ($1 + [80])))
	*(($1 + [128])) = [0]
	*($1 + [104]) = $3
	*($1 + [96]) = $8
	*($1 + [112]) = (int_64)-1
	*($1 + [120]) = (int_64)0
	$2 = CALL $2(($1 + [96]), ((int_64)$5 & (int_64)72057594037927935), [8333])
	$5 = *($2 + [8])
	$3 = *($2)
	$7 = *($1 + [120])
	if ( ($7 == 0) ){ goto $label$18 }
	$9 = ($1 + [124])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$22 }
	CALL _ZdlPv($4)
	
.LABEL $label$22
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$21 }
	$2 = *(($1 + [120]))
	goto $label$19 
	
.LABEL $label$20
	$2 = $7
	
.LABEL $label$19
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$18
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [18436])
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18479])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [18498])
	*($1 + [168]) = [8411]
	*($1 + [172]) = CALL $164([8411])
	*($1 + [72]) = *($1 + [168])
	$8 = *(CALL $7(($1 + [96]), ($1 + [72])))
	$2 = CALL $164([8385])
	if ( ($2 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [18269])
	goto $label$25 
	
.LABEL $label$26
	if ( ($2 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$5 = (int_64)0
	
.LOOP $label$27:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [18314])
	
.LABEL $label$28
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$27 }
	goto $label$23 
	
.LABEL $label$24
	$5 = (int_64)0
	
.LABEL $label$23
	*($1 + [168]) = [8399]
	*($1 + [172]) = CALL $164([8399])
	*($1 + [64]) = *($1 + [168])
	$10 = *(CALL $7(($1 + [96]), ($1 + [64])))
	*(($1 + [128])) = [0]
	*($1 + [104]) = $8
	*($1 + [96]) = $10
	*($1 + [112]) = (int_64)-1
	*($1 + [120]) = (int_64)0
	$2 = CALL $2(($1 + [96]), ((int_64)$5 & (int_64)72057594037927935), [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [120])
	if ( ($7 == 0) ){ goto $label$29 }
	$9 = ($1 + [124])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$31 }
	
.LOOP $label$32:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$33 }
	CALL _ZdlPv($4)
	
.LABEL $label$33
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$32 }
	$2 = *(($1 + [120]))
	goto $label$30 
	
.LABEL $label$31
	$2 = $7
	
.LABEL $label$30
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$29
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [18436])
	$3 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18479])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [18498])
	*($1 + [168]) = [8424]
	*($1 + [172]) = CALL $164([8424])
	*($1 + [56]) = *($1 + [168])
	$8 = *(CALL $7(($1 + [96]), ($1 + [56])))
	$2 = CALL $164([8385])
	if ( ($2 <= [8]) ){ goto $label$37 }
	CALL eosio_assert([0], [18269])
	goto $label$36 
	
.LABEL $label$37
	if ( ($2 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	$5 = (int_64)0
	
.LOOP $label$38:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$39 }
	CALL eosio_assert([0], [18314])
	
.LABEL $label$39
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$38 }
	goto $label$34 
	
.LABEL $label$35
	$5 = (int_64)0
	
.LABEL $label$34
	*($1 + [168]) = [8399]
	*($1 + [172]) = CALL $164([8399])
	*($1 + [48]) = *($1 + [168])
	$10 = *(CALL $7(($1 + [96]), ($1 + [48])))
	*(($1 + [128])) = [0]
	*($1 + [104]) = $8
	*($1 + [96]) = $10
	*($1 + [112]) = (int_64)-1
	*($1 + [120]) = (int_64)0
	$2 = CALL $2(($1 + [96]), ((int_64)$5 & (int_64)72057594037927935), [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [120])
	if ( ($7 == 0) ){ goto $label$40 }
	$9 = ($1 + [124])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$42 }
	
.LOOP $label$43:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$44 }
	CALL _ZdlPv($4)
	
.LABEL $label$44
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$43 }
	$2 = *(($1 + [120]))
	goto $label$41 
	
.LABEL $label$42
	$2 = $7
	
.LABEL $label$41
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$40
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [18436])
	$3 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18479])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [18498])
	*($1 + [168]) = [8437]
	*($1 + [172]) = CALL $164([8437])
	*($1 + [40]) = *($1 + [168])
	$8 = *(CALL $7(($1 + [96]), ($1 + [40])))
	$2 = CALL $164([8385])
	if ( ($2 <= [8]) ){ goto $label$48 }
	CALL eosio_assert([0], [18269])
	goto $label$47 
	
.LABEL $label$48
	if ( ($2 == 0) ){ goto $label$46 }
	
.LABEL $label$47
	$5 = (int_64)0
	
.LOOP $label$49:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$50 }
	CALL eosio_assert([0], [18314])
	
.LABEL $label$50
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$49 }
	goto $label$45 
	
.LABEL $label$46
	$5 = (int_64)0
	
.LABEL $label$45
	*($1 + [168]) = [8399]
	*($1 + [172]) = CALL $164([8399])
	*($1 + [32]) = *($1 + [168])
	$10 = *(CALL $7(($1 + [96]), ($1 + [32])))
	*(($1 + [128])) = [0]
	*($1 + [104]) = $8
	*($1 + [96]) = $10
	*($1 + [112]) = (int_64)-1
	*($1 + [120]) = (int_64)0
	$2 = CALL $2(($1 + [96]), ((int_64)$5 & (int_64)72057594037927935), [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [120])
	if ( ($7 == 0) ){ goto $label$51 }
	$9 = ($1 + [124])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$53 }
	
.LOOP $label$54:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$55 }
	CALL _ZdlPv($4)
	
.LABEL $label$55
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$54 }
	$2 = *(($1 + [120]))
	goto $label$52 
	
.LABEL $label$53
	$2 = $7
	
.LABEL $label$52
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$51
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [18436])
	$3 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18479])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [18498])
	*($1 + [168]) = [8453]
	*($1 + [172]) = CALL $164([8453])
	*($1 + [24]) = *($1 + [168])
	$8 = *(CALL $7(($1 + [96]), ($1 + [24])))
	$2 = CALL $164([8385])
	if ( ($2 <= [8]) ){ goto $label$59 }
	CALL eosio_assert([0], [18269])
	goto $label$58 
	
.LABEL $label$59
	if ( ($2 == 0) ){ goto $label$57 }
	
.LABEL $label$58
	$5 = (int_64)0
	
.LOOP $label$60:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$61 }
	CALL eosio_assert([0], [18314])
	
.LABEL $label$61
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$60 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$56 
	
.LABEL $label$57
	$5 = (int_64)0
	
.LABEL $label$56
	*($1 + [168]) = [8399]
	*($1 + [172]) = CALL $164([8399])
	*($1 + [16]) = *($1 + [168])
	$10 = *(CALL $7(($1 + [96]), ($1 + [16])))
	*(($1 + [128])) = [0]
	*($1 + [104]) = $8
	*($1 + [96]) = $10
	*($1 + [112]) = (int_64)-1
	*($1 + [120]) = (int_64)0
	$2 = CALL $2(($1 + [96]), $5, [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [120])
	if ( ($7 == 0) ){ goto $label$62 }
	$9 = ($1 + [124])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$64 }
	
.LOOP $label$65:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$66 }
	CALL _ZdlPv($4)
	
.LABEL $label$66
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$65 }
	$2 = *(($1 + [120]))
	goto $label$63 
	
.LABEL $label$64
	$2 = $7
	
.LABEL $label$63
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$62
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [18436])
	$3 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18479])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [18498])
	*($1 + [168]) = [8466]
	*($1 + [172]) = CALL $164([8466])
	*($1 + [8]) = *($1 + [168])
	$8 = *(CALL $7(($1 + [96]), ($1 + [8])))
	$2 = CALL $164([8385])
	if ( ($2 <= [8]) ){ goto $label$70 }
	CALL eosio_assert([0], [18269])
	goto $label$69 
	
.LABEL $label$70
	if ( ($2 == 0) ){ goto $label$68 }
	
.LABEL $label$69
	$5 = (int_64)0
	
.LOOP $label$71:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$72 }
	CALL eosio_assert([0], [18314])
	
.LABEL $label$72
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$71 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$67 
	
.LABEL $label$68
	$5 = (int_64)0
	
.LABEL $label$67
	*($1 + [168]) = [8399]
	*($1 + [172]) = CALL $164([8399])
	*($1) = *($1 + [168])
	$10 = *(CALL $7(($1 + [96]), $1))
	*(($9 = ($1 + [128]))) = [0]
	*($1 + [104]) = $8
	*($1 + [96]) = $10
	*($1 + [112]) = (int_64)-1
	*($1 + [120]) = (int_64)0
	$2 = CALL $2(($1 + [96]), $5, [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [120])
	if ( ($7 == 0) ){ goto $label$73 }
	$11 = ($1 + [124])
	$2 = *($11)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$75 }
	
.LOOP $label$76:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$77 }
	CALL _ZdlPv($4)
	
.LABEL $label$77
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$76 }
	$2 = *(($1 + [120]))
	goto $label$74 
	
.LABEL $label$75
	$2 = $7
	
.LABEL $label$74
	*($11) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$73
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [18436])
	$5 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [18479])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [18498])
	$2 = CALL tapos_block_prefix()
	$4 = CALL tapos_block_num()
	$3 = CALL current_time()
	*($9) = [0]
	*($1 + [104]) = (int_64)6138663577826885632
	*($1 + [96]) = (int_64)6138663577826885632
	*($1 + [112]) = (int_64)-1
	*($1 + [120]) = (int_64)0
	$6 = (CASTING int_64)(int_32 ((int_32)$4 * (int_32)$2))
	$2 = CALL $4(($1 + [96]), (int_64)4995142087184830980, [8366])
	$8 = *($2 + [40])
	$10 = *($2 + [16])
	$7 = *($1 + [120])
	if ( ($7 == 0) ){ goto $label$78 }
	$9 = ($1 + [124])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$80 }
	
.LOOP $label$81:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$82 }
	CALL _ZdlPv($4)
	
.LABEL $label$82
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$81 }
	$2 = *(($1 + [120]))
	goto $label$79 
	
.LABEL $label$80
	$2 = $7
	
.LABEL $label$79
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$78
	*($1 + [168]) = ((int_64)((int_64)((int_64))(((int_64)$5 + (int_64)(CASTING int_64)(int_32 $0)) - $3) + (int_64)$6) + (int_64)$10) + (int_64)$8)
	CALL sha512(($1 + [168]), [4], ($1 + [96]))
	$5 = CALL $155(*((($1 + [96]) + (CASTING uint_32)(uint_64 ((int_64)CALL $155(*((($1 + [96]) + ((int_32)(((int_32)CALL $fimport$5() * (int_32)CALL $fimport$6()) + $0) % (int_32)[64])))) % (int_64)64)))))
	$global$0 = ($1 + [176])
	return (CASTING uint_32)(uint_64 $5)
}

int_32 .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $171($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8247])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $171 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8868]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8872])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8868]) = [1]
	$2 = ($2 << [16])
	*([0] + [8872]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8872])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8872]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8868]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8868]) = [1]
	$3 = ($3 << [16])
	*([0] + [8872]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8872])
	
.LABEL $label$10
	*([0] + [8872]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $172 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $170([8876], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [18516])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [18621])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [18554])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [18621])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $4 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$0), [18679])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5069606918720847872, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $5($0, $4)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$0), [18679])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18730])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $169($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*($3 + [8]) = $0
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)4602678819172646912
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)4602678819172646912
	*($5 + [64]) = $0
	CALL $87(($3 + [8]), $5)
	*($3 + [24]) = $5
	$6 = *($5 + [8])
	*($3 + [8]) = $6
	$7 = *($5 + [68])
	*($3 + [4]) = $7
	$8 = ($0 + [28])
	$1 = *($8)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($1 + [8]) = $6
	*($1 + [16]) = $7
	*($3 + [24]) = [0]
	*($1) = $5
	*($8) = ($1 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $88(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $173($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18730])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $169($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18753])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18753])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $86(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $173($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $82($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $41($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $83($2, $1)
	CALL $85(CALL $84(CALL $84($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC memory ()
{
	CALL $119()
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $41($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18673])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18673])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $81(CALL $80($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18673])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $96(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $146($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [108])) == (int_32)$0), [19002])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [19048])
	$6 = ($1 + [20])
	$7 = ($1 + [8])
	$8 = *($7)
	$9 = *($1 + [20])
	if ( ($9 & [1]) ){ goto $label$5 }
	$10 = ($6 + [1])
	$9 = uint_32($9 >> [1])
	if ( ((uint_32)$9 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$10 = *(($1 + [28]))
	$9 = *(($1 + [24]))
	if ( ($9 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [18269])
	goto $label$2 
	
.LABEL $label$3
	if ( $9 ){ goto $label$2 }
	$11 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$11 = (int_64)0
	
.LOOP $label$6:
	$12 = (($10 + $9) + [-1])
	$13 = *($12)
	if ( ((($13 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [18314])
	$13 = *($12)
	
.LABEL $label$7
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$6 }
	$11 = ((int_64)$11 << (int_64)8)
	
.LABEL $label$1
	$9 = (*($1 + [42]) - *(*($3)))
	*($1 + [42]) = $9
	*($5 + [24]) = $8
	*($5 + [32]) = ((int_64)$11 | (int_64)*($1 + [32]))
	$8 = *($1)
	if ( ($9 & [65535]) ){ goto $label$8 }
	*($1 + [16]) = [15]
	*($1 + [88]) = ((int_64)CALL current_time() + (int_64)300000000)
	*($5 + [56]) = (int_64)0
	*($5 + [48]) = ((int_64)*($1) + (int_64)10000)
	CALL cancel_deferred(($5 + [48]))
	*(*($3 + [4])) = [1]
	
.LABEL $label$8
	$15 = *($9 + [4])
	$9 = *($3 + [8])
	$14 = *($9)
	if ( ((int_32)$14 == (int_32)$15) ){ goto $label$9 }
	$16 = ($1 + [48])
	$13 = *($16)
	$17 = ($1 + [44])
	
.LOOP $label$10:
	$9 = *($17)
	if ( ((int_32)$9 == (int_32)$13) ){ goto $label$11 }
	$10 = *($14)
	
.LOOP $label$13:
	$12 = ($10 & [255])
	if ( ((int_32)*($9) == (int_32)$12) ){ goto $label$12 }
	$9 = ($9 + [1])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$11 }
	if ( ((int_32)($13 + [-1]) == (int_32)$9) ){ goto $label$14 }
	$10 = ($9 + [1])
	
.LOOP $label$15:
	$18 = *($10)
	if ( ((int_32)$18 == (int_32)$12) ){ goto $label$16 }
	*($9) = $18
	$9 = ($9 + [1])
	
.LABEL $label$16
	$10 = ($10 + [1])
	if ( ((int_32)$13 != (int_32)$10) ){ goto $label$15 }
	$13 = *($16)
	
.LABEL $label$14
	if ( ((int_32)$9 == (int_32)$13) ){ goto $label$11 }
	$12 = ($13 - $13)
	if ( ($12 == 0) ){ goto $label$17 }
	CALL memmove($9, $13, $12)
	
.LABEL $label$17
	$13 = ($9 + $12)
	*($16) = $13
	
.LABEL $label$11
	$14 = ($14 + [1])
	if ( ((int_32)$14 != (int_32)$15) ){ goto $label$10 }
	
.LABEL $label$9
	$12 = ($1 + [42])
	$18 = ($1 + [32])
	$14 = ($5 + [32])
	$11 = *(*($3 + [12]))
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)$11)
	*($1 + [64]) = ((int_64)$11 + (int_64)*($1 + [64]))
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [19099])
	$9 = *(($1 + [20]))
	$13 = ( *(($1 + [24])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($13 + [26])
	$11 = (CASTING uint_64)(uint_32 $13)
	$10 = ($1 + [64])
	$15 = ($1 + [56])
	
.LOOP $label$18:
	$9 = ($9 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$18 }
	$17 = ($1 + [44])
	$16 = *($1 + [44])
	$13 = *(($1 + [48]))
	$3 = ($13 - $16)
	$11 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$19:
	$9 = ($9 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$19 }
	$13 = (( $9 ? ($3 + $9) : ((int_32)$16 == (int_32)$13) ) + [45])
	if ( ($13 <= [513]) ){ goto $label$21 }
	$9 = CALL $169($13)
	goto $label$20 
	
.LABEL $label$21
	$9 = ($4 - (($13 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$20
	*($5 + [12]) = $9
	*($5 + [8]) = $9
	*($5 + [16]) = ($9 + $13)
	*($5 + [40]) = ($5 + [8])
	*($5 + [52]) = $7
	*($5 + [60]) = $6
	*($5 + [64]) = $18
	*($5 + [76]) = $12
	*($5 + [80]) = $17
	*($5 + [84]) = $15
	*($5 + [88]) = $10
	*($5 + [48]) = $1
	*($5 + [56]) = ($1 + [16])
	*($5 + [68]) = ($1 + [36])
	*($5 + [72]) = ($1 + [40])
	*($5 + [92]) = ($1 + [72])
	*($5 + [96]) = ($1 + [80])
	*($5 + [100]) = ($1 + [88])
	*($5 + [104]) = ($1 + [96])
	*($5 + [108]) = ($1 + [97])
	*($5 + [112]) = ($1 + [98])
	*($5 + [116]) = ($1 + [99])
	*($5 + [120]) = ($1 + [100])
	*($5 + [128]) = ($1 + [102])
	*($5 + [124]) = ($1 + [101])
	*($5 + [132]) = ($1 + [103])
	*($5 + [136]) = ($1 + [104])
	CALL $101(($5 + [48]), ($5 + [40]))
	CALL db_update_i64(*($1 + [112]), $2, $9, $13)
	if ( ($13 <= [513]) ){ goto $label$22 }
	CALL $173($9)
	
.LABEL $label$22
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$23 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	*($5 + [48]) = *($7)
	if ( (CALL $163(($5 + [24]), ($5 + [48]), [8]) == 0) ){ goto $label$24 }
	$9 = *($1 + [116])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$25 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747008, ($5 + [40]), $8)
	*(($1 + [116])) = $9
	
.LABEL $label$25
	CALL db_idx64_update($9, $2, ($5 + [48]))
	
.LABEL $label$24
	$9 = *($6)
	if ( ($9 & [1]) ){ goto $label$30 }
	$10 = ($6 + [1])
	$9 = uint_32($9 >> [1])
	if ( ((uint_32)$9 >= (uint_32)[8]) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$10 = *(($1 + [28]))
	$9 = *(($1 + [24]))
	if ( ($9 <= [8]) ){ goto $label$28 }
	
.LABEL $label$29
	CALL eosio_assert([0], [18269])
	goto $label$27 
	
.LABEL $label$28
	if ( $9 ){ goto $label$27 }
	$11 = (int_64)0
	goto $label$26 
	
.LABEL $label$27
	$11 = (int_64)0
	
.LOOP $label$31:
	$12 = (($10 + $9) + [-1])
	$13 = *($12)
	if ( ((($13 + [-65]) & [255]) <= [26]) ){ goto $label$32 }
	CALL eosio_assert([0], [18314])
	$13 = *($12)
	
.LABEL $label$32
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$31 }
	$11 = ((int_64)$11 << (int_64)8)
	
.LABEL $label$26
	*($5 + [48]) = ((int_64)$11 | (int_64)*($18))
	if ( (CALL $163($14, ($5 + [48]), [8]) == 0) ){ goto $label$33 }
	$13 = ($1 + [120])
	$9 = *($13)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$34 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747007, ($5 + [40]), $8)
	*($13) = $9
	
.LABEL $label$34
	CALL db_idx64_update($9, $2, ($5 + [48]))
	
.LABEL $label$33
	$global$0 = ($5 + [144])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $146($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $41(($7 + [28]), [32])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $113(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $146($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [88])))
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [48])))
	if ( (*($3 + [24]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [176])
	$global$0 = $3
	$4 = CALL current_time()
	*(($3 + [132])) = (int_64)0
	*(($3 + [148])) = (int_64)0
	*(($3 + [156])) = (int_64)0
	*($3 + [116]) = [0]
	*($3 + [120]) = [0]
	*($3 + [124 align=4]) = (int_64)0
	*($3 + [140 align=4]) = (int_64)0
	*($3 + [104]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	$4 = *($0)
	*($3 + [88]) = [18048]
	*($3 + [92]) = CALL $164([18048])
	*($3 + [24]) = *($3 + [88])
	*($3 + [96]) = *(CALL $7(($3 + [32]), ($3 + [24])))
	*($3 + [88]) = $4
	*($3 + [168]) = [18235]
	*($3 + [172]) = CALL $164([18235])
	*($3 + [16]) = *($3 + [168])
	*($3 + [80]) = *(CALL $7(($3 + [32]), ($3 + [16])))
	*($3 + [168]) = [18248]
	*($3 + [172]) = CALL $164([18248])
	*($3 + [8]) = *($3 + [168])
	*($3 + [72]) = *(CALL $7(($3 + [32]), ($3 + [8])))
	*($3 + [168]) = [18255]
	*($3 + [172]) = CALL $164([18255])
	*($3) = *($3 + [168])
	$4 = *(CALL $7(($3 + [32]), $3))
	*($3 + [40]) = $2
	*($3 + [48]) = $4
	*($3 + [32]) = *($1)
	*($3 + [56]) = *($0)
	CALL $47(($3 + [140]), ($3 + [88]), ($3 + [80]), ($3 + [72]), ($3 + [32]))
	*($3 + [124]) = [1]
	$2 = CALL current_time()
	*($3 + [40]) = (int_64)0
	*($3 + [32]) = $2
	$2 = *($0)
	CALL $48(($3 + [88]), ($3 + [104]))
	$0 = *($3 + [88])
	CALL send_deferred(($3 + [32]), $2, $0, (*($3 + [92]) - $0), [1])
	$0 = *($3 + [88])
	if ( ($0 == 0) ){ goto $label$1 }
	*($3 + [92]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $49(($3 + [104]))
	$global$0 = ($3 + [176])
}

int_32 .FUNC $167 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $147())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $168($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $166 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $165 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $164 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $163 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $162 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $161 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $158($3, (int_64)0)
	$4 = CALL $160($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $160 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $159($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $147()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $159($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19665]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $158($0, (int_64)0)
	*(CALL $147()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $159($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $159($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $159($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $159($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19665])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19665]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19665]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $159($0)
	$5 = *(($6 + [19665]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $159($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19665]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8209]))
	$8 = (int_64)0
	$5 = *(($6 + [19665]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19665]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $159($0)
	$5 = *(($6 + [19665]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $159($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19665]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $158($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19665]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19665]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $159($0) + [19665]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $147()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $147()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $147()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $169 (int_32 $0)
{
	return CALL $170([8876], $0)
}

int_32 .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $169($1)
	
.LABEL $label$2
	*(CALL $147()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $169(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $173($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [108])) == (int_32)$0), [19002])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [19048])
	$5 = ($1 + [20])
	$6 = ($1 + [8])
	$7 = *($6)
	$8 = *($1 + [20])
	if ( ($8 & [1]) ){ goto $label$5 }
	$9 = ($5 + [1])
	$8 = uint_32($8 >> [1])
	if ( ((uint_32)$8 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = *(($1 + [28]))
	$8 = *(($1 + [24]))
	if ( ($8 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [18269])
	goto $label$2 
	
.LABEL $label$3
	if ( $8 ){ goto $label$2 }
	$10 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$10 = (int_64)0
	
.LOOP $label$6:
	$11 = (($9 + $8) + [-1])
	$12 = *($11)
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [18314])
	$12 = *($11)
	
.LABEL $label$7
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$6 }
	$10 = ((int_64)$10 << (int_64)8)
	
.LABEL $label$1
	*($1 + [64]) = (int_64)0
	*($1 + [16]) = [20]
	*($4 + [24]) = $7
	*($4 + [32]) = ((int_64)$10 | (int_64)*($1 + [32]))
	$7 = *($1)
	CALL eosio_assert([1], [19099])
	$8 = *(($1 + [20]))
	$12 = ( *(($1 + [24])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($12 + [26])
	$10 = (CASTING uint_64)(uint_32 $12)
	$11 = ($1 + [16])
	$9 = ($1 + [64])
	$13 = ($1 + [32])
	$14 = ($4 + [32])
	
.LOOP $label$8:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$8 }
	$15 = ($1 + [44])
	$16 = *($1 + [44])
	$12 = *(($1 + [48]))
	$17 = ($12 - $16)
	$10 = (CASTING uint_64)(uint_32 $17)
	
.LOOP $label$9:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$9 }
	$12 = (( $8 ? ($17 + $8) : ((int_32)$16 == (int_32)$12) ) + [45])
	if ( ($12 <= [513]) ){ goto $label$11 }
	$8 = CALL $169($12)
	goto $label$10 
	
.LABEL $label$11
	$8 = ($3 - (($12 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$10
	*($4 + [12]) = $8
	*($4 + [8]) = $8
	*($4 + [16]) = ($8 + $12)
	*($4 + [40]) = ($4 + [8])
	*($4 + [52]) = $6
	*($4 + [56]) = $11
	*($4 + [60]) = $5
	*($4 + [64]) = $13
	*($4 + [80]) = $15
	*($4 + [88]) = $9
	*($4 + [48]) = $1
	*($4 + [68]) = ($1 + [36])
	*($4 + [72]) = ($1 + [40])
	*($4 + [76]) = ($1 + [42])
	*($4 + [84]) = ($1 + [56])
	*($4 + [92]) = ($1 + [72])
	*($4 + [96]) = ($1 + [80])
	*($4 + [100]) = ($1 + [88])
	*($4 + [104]) = ($1 + [96])
	*($4 + [108]) = ($1 + [97])
	*($4 + [112]) = ($1 + [98])
	*($4 + [116]) = ($1 + [99])
	*($4 + [120]) = ($1 + [100])
	*($4 + [128]) = ($1 + [102])
	*($4 + [124]) = ($1 + [101])
	*($4 + [132]) = ($1 + [103])
	*($4 + [136]) = ($1 + [104])
	CALL $101(($4 + [48]), ($4 + [40]))
	CALL db_update_i64(*($1 + [112]), $2, $8, $12)
	if ( ($12 <= [513]) ){ goto $label$12 }
	CALL $173($8)
	
.LABEL $label$12
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($4 + [48]) = *($6)
	if ( (CALL $163(($4 + [24]), ($4 + [48]), [8]) == 0) ){ goto $label$14 }
	$8 = *($1 + [116])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$15 }
	$8 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747008, ($4 + [40]), $7)
	*(($1 + [116])) = $8
	
.LABEL $label$15
	CALL db_idx64_update($8, $2, ($4 + [48]))
	
.LABEL $label$14
	$8 = *($5)
	if ( ($8 & [1]) ){ goto $label$20 }
	$9 = ($5 + [1])
	$8 = uint_32($8 >> [1])
	if ( ((uint_32)$8 >= (uint_32)[8]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$9 = *(($1 + [28]))
	$8 = *(($1 + [24]))
	if ( ($8 <= [8]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL eosio_assert([0], [18269])
	goto $label$17 
	
.LABEL $label$18
	if ( $8 ){ goto $label$17 }
	$10 = (int_64)0
	goto $label$16 
	
.LABEL $label$17
	$10 = (int_64)0
	
.LOOP $label$21:
	$11 = (($9 + $8) + [-1])
	$12 = *($11)
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [18314])
	$12 = *($11)
	
.LABEL $label$22
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$21 }
	$10 = ((int_64)$10 << (int_64)8)
	
.LABEL $label$16
	*($4 + [48]) = ((int_64)$10 | (int_64)*($13))
	if ( (CALL $163($14, ($4 + [48]), [8]) == 0) ){ goto $label$23 }
	$12 = ($1 + [120])
	$8 = *($12)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$24 }
	$8 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747007, ($4 + [40]), $7)
	*($12) = $8
	
.LABEL $label$24
	CALL db_idx64_update($8, $2, ($4 + [48]))
	
.LABEL $label$23
	$global$0 = ($4 + [144])
}

void .FUNC $59 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [44]) = [0]
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-6147718988072747008, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $29(($2 + [8]), $5)
	CALL eosio_assert(((int_32)*($4 + [108]) == (int_32)($2 + [8])), [18679])
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [18075])
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)[10]), [18206])
	$3 = *($0)
	CALL eosio_assert($5, [18967])
	CALL $60(($2 + [8]), $4, $3)
	$3 = *($4 + [8])
	$5 = *($4 + [20])
	if ( ($5 & [1]) ){ goto $label$6 }
	$6 = (($4 + [20]) + [1])
	$1 = ((int_64)$3 + (int_64)1)
	$5 = uint_32($5 >> [1])
	if ( ((uint_32)$5 >= (uint_32)[8]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = *(($4 + [28]))
	$1 = ((int_64)$3 + (int_64)1)
	$5 = *(($4 + [24]))
	if ( ($5 <= [8]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [18269])
	goto $label$3 
	
.LABEL $label$4
	if ( $5 ){ goto $label$3 }
	$3 = (int_64)0
	goto $label$2 
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$7:
	$7 = (($6 + $5) + [-1])
	$8 = *($7)
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [18314])
	$8 = *($7)
	
.LABEL $label$8
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$3 = ((int_64)$3 << (int_64)8)
	
.LABEL $label$2
	*($2) = ((int_64)$3 | (int_64)*($4 + [32]))
	CALL current_time()
	CALL $32($0, $1, $2, $3)
	$6 = *($2 + [32])
	if ( ($6 == 0) ){ goto $label$9 }
	$4 = (($2 + [8]) + [28])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$8 = ($8 + [-24])
	$5 = *($8)
	*($8) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	$7 = *($5 + [44])
	if ( ($7 == 0) ){ goto $label$14 }
	*(($5 + [48])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [28])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$12 }
	$5 = *(($2 + [32]))
	goto $label$10 
	
.LABEL $label$11
	$5 = $6
	
.LABEL $label$10
	*($4) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($2 + [48])
}

void .FUNC $50 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$6 = ($global$0 - [368])
	$global$0 = $6
	*($6 + [336]) = $5
	*($6 + [344]) = $4
	CALL require_auth(*($0))
	*((($6 + [296]) + [32])) = [0]
	*($6 + [312]) = (int_64)-1
	*($6 + [320]) = (int_64)0
	*($6 + [332]) = [0]
	$4 = *($0)
	*($6 + [296]) = $4
	*($6 + [304]) = $4
	$7 = [0]
	$8 = CALL db_find_i64($4, $4, (int_64)-6147718988072747008, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $29(($6 + [296]), $8)
	CALL eosio_assert(((int_32)*($7 + [108]) == (int_32)($6 + [296])), [18679])
	
.LABEL $label$1
	*($6 + [292]) = $7
	*($6 + [288]) = ($6 + [296])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18075])
	CALL eosio_assert(((int_32)*(*($6 + [292]) + [16]) == (int_32)[15]), [18103])
	$7 = CALL $25($0)
	*($6 + [232]) = *($7)
	$9 = CALL $129((($6 + [232]) | [4]), ($7 + [4]))
	*((($6 + [232]) + [48])) = *(($7 + [48]))
	*((($6 + [232]) + [40])) = *(($7 + [40]))
	*((($6 + [232]) + [32])) = *(($7 + [32]))
	*((($6 + [232]) + [24])) = *(($7 + [24]))
	*($6 + [248]) = *($7 + [16])
	$8 = *($6 + [292])
	$7 = *($8 + [20])
	if ( ($7 & [1]) ){ goto $label$6 }
	$10 = (($8 + [20]) + [1])
	$7 = uint_32($7 >> [1])
	if ( ((uint_32)$7 >= (uint_32)[8]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$10 = *(($8 + [28]))
	$7 = *(($8 + [24]))
	if ( ($7 <= [8]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [18269])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$3 }
	$4 = (int_64)0
	goto $label$2 
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$7:
	$11 = (($10 + $7) + [-1])
	$8 = *($11)
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [18314])
	$8 = *($11)
	
.LABEL $label$8
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	$8 = *($6 + [292])
	
.LABEL $label$2
	*($6 + [224]) = ((int_64)((int_64)$4 << (int_64)8) | (int_64)*($8 + [32]))
	$7 = CALL $27($0, ($6 + [224]))
	*($6 + [184]) = *($7)
	$12 = CALL $129((($6 + [184]) | [4]), ($7 + [4]))
	$13 = CALL $129((($6 + [184]) + [16]), ($7 + [16]))
	*($6 + [212 align=4]) = *($7 + [28 align=4])
	*($6 + [176]) = *(*($6 + [292]) + [64])
	*(($6 + [168])) = [0]
	*(($6 + [174])) = [0]
	*($6 + [152]) = (int_64)-1
	*($6 + [160]) = (int_64)0
	*($6 + [172]) = [0]
	$4 = *($0)
	*($6 + [136]) = $4
	*($6 + [144]) = $4
	$4 = CALL current_time()
	*((($6 + [72]) + [28])) = (int_64)0
	*(($6 + [116])) = (int_64)0
	*(($6 + [124])) = (int_64)0
	*($6 + [84]) = [0]
	*($6 + [88]) = [0]
	*($6 + [92 align=4]) = (int_64)0
	*($6 + [108 align=4]) = (int_64)0
	*($6 + [72]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$9 }
	$8 = *((($6 + [136]) + [28]))
	$10 = *(($6 + [160]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$11 }
	
.LOOP $label$13:
	$7 = ($8 + [-24])
	$11 = *($7)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$12 }
	$8 = $7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($11 + [92]) == (int_32)($6 + [136])), [18679])
	goto $label$10 
	
.LABEL $label$11
	$11 = [0]
	$7 = CALL db_find_i64(*($6 + [136]), *(($6 + [144])), (int_64)4229865762275196928, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	$11 = CALL $51(($6 + [136]), $7)
	CALL eosio_assert(((int_32)*($11 + [92]) == (int_32)($6 + [136])), [18679])
	
.LABEL $label$10
	$7 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($7, [18136])
	$4 = *($0)
	*($6 + [44]) = $0
	*($6 + [36]) = ($6 + [232])
	*($6 + [32]) = ($6 + [288])
	*($6 + [40]) = ($6 + [176])
	*($6 + [48]) = ($6 + [72])
	*($6 + [52]) = ($6 + [184])
	*($6 + [56]) = ($6 + [224])
	*($6 + [60]) = ($6 + [136])
	*($6 + [64]) = ($6 + [344])
	*($6 + [68]) = ($6 + [336])
	CALL eosio_assert($7, [18967])
	CALL $52(($6 + [136]), $11, $4, ($6 + [32]))
	
.LABEL $label$9
	$3 = *($3)
	$14 = *($3 + [4])
	$7 = ($14 - $3)
	if ( ($7 == 0) ){ goto $label$14 }
	$4 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$2 = ((uint_64)((int_64)*(*($6 + [292]) + [56]) * (int_64)*($6 + [255])) / (uint_64)(int_64)100)
	$1 = ((uint_64)$2 / (uint_64)$4)
	*($6 + [352]) = $1
	if ( (uint_64)($2 <= $4) ){ goto $label$14 }
	*($6 + [176]) = (int_64))(*($6 + [176]) - ((int_64)$1 * (int_64)$4))
	if ( ((int_32)$3 == (int_32)$14) ){ goto $label$14 }
	$15 = ($6 + [164])
	$16 = ($6 + [160])
	$17 = (($6 + [136]) + [8])
	$18 = ($6 + [44])
	$19 = ($6 + [48])
	
.LOOP $label$15:
	$4 = *($3)
	$8 = *($15)
	$10 = *($16)
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$17 }
	
.LOOP $label$19:
	$7 = ($8 + [-24])
	$11 = *($7)
	if ( ((int_64)*($11) == (int_64)$4) ){ goto $label$18 }
	$8 = $7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$17 }
	CALL eosio_assert(((int_32)*($11 + [92]) == (int_32)($6 + [136])), [18679])
	goto $label$16 
	
.LABEL $label$17
	$11 = [0]
	$7 = CALL db_find_i64(*($6 + [136]), *($17), (int_64)4229865762275196928, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$16 }
	$11 = CALL $51(($6 + [136]), $7)
	CALL eosio_assert(((int_32)*($11 + [92]) == (int_32)($6 + [136])), [18679])
	
.LABEL $label$16
	$7 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($7, [18170])
	$4 = *($0)
	*($6 + [36]) = $0
	*((($6 + [32]) + [8])) = ($6 + [72])
	*($18) = ($6 + [184])
	*($19) = ($6 + [224])
	*($6 + [32]) = ($6 + [352])
	CALL eosio_assert($7, [18967])
	CALL $53(($6 + [136]), $11, $4, ($6 + [32]))
	$3 = ($3 + [8])
	if ( ((int_32)$3 != (int_32)$14) ){ goto $label$15 }
	
.LABEL $label$14
	$4 = *($6 + [176])
	if ( (int_64)($4 == 0) ){ goto $label$20 }
	$7 = *($6 + [292])
	$2 = (int_64)
	*($6 + [352]) = ((uint_64)$4 / (uint_64)$2(*($7 + [40]) - *($7 + [42]))))
	if ( ((uint_64)$2 > (uint_64)$4) ){ goto $label$20 }
	*($6 + [24]) = ($6 + [136])
	CALL $54(($6 + [16]), ($6 + [24]), $7)
	CALL $55(($6 + [8]), ($6 + [24]), *($6 + [292]))
	$7 = *($6 + [20])
	if ( ((int_32)$7 == (int_32)*($6 + [12])) ){ goto $label$20 }
	$8 = ($6 + [40])
	$11 = ($6 + [44])
	$10 = ($6 + [48])
	
.LOOP $label$21:
	$4 = *($0)
	*($6 + [36]) = $0
	*($8) = ($6 + [72])
	*($11) = ($6 + [184])
	*($10) = ($6 + [224])
	*($6 + [32]) = ($6 + [352])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18967])
	CALL $56(*($6 + [24]), $7, $4, ($6 + [32]))
	CALL $57(($6 + [16]))
	$7 = *($6 + [20])
	if ( ((int_32)$7 != (int_32)*($6 + [12])) ){ goto $label$21 }
	
.LABEL $label$20
	$4 = *($0)
	$7 = *($6 + [292])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18967])
	CALL $58(($6 + [296]), $7, $4)
	if ( ((int_32)*(($6 + [112])) == (int_32)*($6 + [108])) ){ goto $label$22 }
	*(($6 + [92])) = [120]
	$4 = CALL current_time()
	*($6 + [40]) = (int_64)0
	*($6 + [32]) = $4
	$4 = *($0)
	CALL $48(($6 + [352]), ($6 + [72]))
	$7 = *($6 + [352])
	CALL send_deferred(($6 + [32]), $4, $7, (*($6 + [356]) - $7), [1])
	$7 = *($6 + [352])
	if ( ($7 == 0) ){ goto $label$22 }
	*($6 + [356]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$22
	CALL $49(($6 + [72]))
	CALL $45((($6 + [136]) + [24]))
	if ( (*($13) & [1]) ){ goto $label$29 }
	if ( (*($12) & [1]) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL _ZdlPv(*((($6 + [184]) + [24])))
	if ( ((*($12) & [1]) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv(*(($6 + [196])))
	if ( ((*($9) & [1]) == 0) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	if ( (*($9) & [1]) ){ goto $label$25 }
	
.LABEL $label$26
	$10 = *($6 + [320])
	if ( $10 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*(($6 + [244])))
	$10 = *($6 + [320])
	if ( ($10 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$0 = (($6 + [296]) + [28])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$31 }
	
.LOOP $label$32:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$33 }
	$11 = *($7 + [44])
	if ( ($11 == 0) ){ goto $label$34 }
	*(($7 + [48])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$34
	if ( ((*($7 + [20]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($7 + [28])))
	
.LABEL $label$35
	CALL _ZdlPv($7)
	
.LABEL $label$33
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$32 }
	$7 = *(($6 + [320]))
	goto $label$30 
	
.LABEL $label$31
	$7 = $10
	
.LABEL $label$30
	*($0) = $10
	CALL _ZdlPv($7)
	$global$0 = ($6 + [368])
	return 
	
.LABEL $label$23
	$global$0 = ($6 + [368])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18730])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $169($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [32]) = [0]
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [80 align=4]) = (int_64)0
	*($5 + [88]) = [0]
	*($5 + [92]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [36])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [52])
	*($3 + [68]) = ($5 + [56])
	*($3 + [72]) = ($5 + [60])
	*($3 + [76]) = ($5 + [64])
	*($3 + [80]) = ($5 + [68])
	*($3 + [84]) = ($5 + [69])
	*($3 + [88]) = ($5 + [72])
	*($3 + [92]) = ($5 + [80])
	CALL $110(($3 + [40]), ($3 + [32]))
	*($5 + [96]) = $1
	*($5 + [100 align=4]) = (int_64)-1
	*($5 + [108]) = [-1]
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $39(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $173($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [80]) & [1]) ){ goto $label$14 }
	if ( (*($1 + [40]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [88])))
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [48])))
	if ( (*($1 + [24]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	$4 = ($global$0 - [464])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [19002])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [19048])
	$6 = ($1 + [24])
	$7 = ($1 + [16])
	$8 = *($7)
	$9 = ($1 + [8])
	$10 = *($9)
	$11 = *($1 + [24])
	if ( ($11 & [1]) ){ goto $label$2 }
	$11 = uint_32($11 >> [1])
	$12 = ($6 + [1])
	goto $label$1 
	
.LABEL $label$2
	$11 = *(($1 + [28]))
	$12 = *(($1 + [32]))
	
.LABEL $label$1
	*($5 + [236]) = $11
	*($5 + [232]) = $12
	*($5 + [144]) = *($5 + [232])
	$13 = *(CALL $7(($5 + [304]), ($5 + [144])))
	*($5 + [160]) = $8
	*($5 + [152]) = $10
	*($5 + [168]) = $13
	$13 = *($1)
	*($1 + [68]) = [1]
	$12 = *(*($3) + [4])
	$11 = (CASTING uint_32)(uint_64 ((uint_64)((int_64)*($12 + [56]) * (int_64)*(*($3 + [4]) + [22])) / (uint_64)(int_64)100))
	*($1 + [56]) = $11
	$14 = (*($1 + [52]) + $11)
	*($1 + [52]) = $14
	*(($15 = *($3 + [8]))) = (int_64))(*($15) - (CASTING uint_64)(uint_32 $14))
	$16 = ($1 + [56])
	$12 = *($12 + [97])
	if ( ($12 == 0) ){ goto $label$4 }
	$17 = *($3 + [16])
	$15 = *($3 + [12])
	$8 = *($15)
	*($5 + [232]) = [18048]
	*($5 + [236]) = CALL $164([18048])
	*($5 + [136]) = *($5 + [232])
	*($5 + [240]) = *(CALL $7(($5 + [304]), ($5 + [136])))
	*($5 + [232]) = $8
	$12 = ((uint_32)((int_32)$12 * (int_32)$11) / (uint_32)[100])
	$11 = *($3 + [20])
	$14 = *($11 + [4])
	if ( ($14 & [1]) ){ goto $label$6 }
	$14 = uint_32($14 >> [1])
	$11 = (($11 + [4]) + [1])
	goto $label$5 
	
.LABEL $label$6
	$14 = *(($11 + [8]))
	$11 = *(($11 + [12]))
	
.LABEL $label$5
	$18 = (CASTING uint_64)(uint_32 $12)
	*($5 + [428]) = $14
	*($5 + [424]) = $11
	*($5 + [128]) = *($5 + [424])
	$19 = CALL $7(($5 + [200]), ($5 + [128]))
	*($5 + [288]) = [18055]
	*($5 + [292]) = CALL $164([18055])
	*($5 + [120]) = *($5 + [288])
	*($5 + [416]) = *(CALL $7(($5 + [304]), ($5 + [120])))
	$11 = *($6)
	if ( ($11 & [1]) ){ goto $label$8 }
	$11 = uint_32($11 >> [1])
	$12 = ($6 + [1])
	goto $label$7 
	
.LABEL $label$8
	$11 = *(($1 + [28]))
	$12 = *(($1 + [32]))
	
.LABEL $label$7
	$20 = ($17 + [36])
	*($5 + [404]) = $11
	*($5 + [400]) = $12
	*($5 + [112]) = *($5 + [400])
	$21 = CALL $7(($5 + [408]), ($5 + [112]))
	$22 = *(*($3 + [24]))
	$23 = (int_64)
	CALL eosio_assert((uint_64)(((int_64)$23(*($16) - $18)) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18367])
	$8 = (uint_64)$22 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$8 = $10
	$12 = [1]
	$14 = $11
	$11 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$8 = $10
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$12 = ((int_32)$11 < (int_32)[6])
	$14 = ($11 + [1])
	$11 = $14
	if ( $12 ){ goto $label$13 }
	$12 = [1]
	$11 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$12 = [0]
	
.LABEL $label$9
	CALL eosio_assert($12, [18416])
	$14 = CALL $129(($5 + [440]), [8556])
	$8 = *($15)
	*((($5 + [304]) + [40])) = *((($5 + [440]) + [8]))
	*((($5 + [304]) + [24])) = $22
	$10 = *($5 + [440])
	*($14) = (int_64)0
	*($14 + [8]) = [0]
	*($5 + [304]) = $8
	*($5 + [312]) = *($21)
	*($5 + [320]) = $23
	*($5 + [336]) = $10
	$12 = *(($17 + [40]))
	if ( ((uint_32)$12 >= (uint_32)*(($17 + [44]))) ){ goto $label$17 }
	*($12 + [8]) = *($5 + [416])
	*($12 + [16 align=4]) = (int_64)0
	*($12) = *($19)
	*(($19 = ($12 + [24]))) = [0]
	$11 = CALL _Znwj([16])
	*($12 + [16]) = $11
	$21 = ($11 + [16])
	*($19) = $21
	*(($11 + [8])) = *((($5 + [232]) + [8]))
	*($11) = *($5 + [232])
	*(($12 + [20])) = $21
	*($12 + [28 align=4]) = (int_64)0
	*(($12 + [36])) = [0]
	$11 = *($5 + [336])
	$19 = ( *((($5 + [304]) + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($19 + [32])
	$8 = (CASTING uint_64)(uint_32 $19)
	$19 = ($12 + [28])
	
.LOOP $label$18:
	$11 = ($11 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	if ( ($11 == 0) ){ goto $label$16 }
	CALL $41($19, $11)
	$19 = *(($12 + [32]))
	$11 = *(($12 + [28]))
	goto $label$15 
	
.LABEL $label$17
	CALL $111($20, ($5 + [232]), $19, ($5 + [416]), ($5 + [304]))
	goto $label$14 
	
.LABEL $label$16
	$19 = [0]
	$11 = [0]
	
.LABEL $label$15
	*($5 + [292]) = $11
	*($5 + [288]) = $11
	*($5 + [296]) = $19
	*($5 + [224]) = ($5 + [288])
	*($5 + [280]) = ($5 + [304])
	CALL $42(($5 + [280]), ($5 + [224]))
	*(($11 = ($17 + [40]))) = (*($11) + [40])
	
.LABEL $label$14
	if ( ((*(($5 + [336])) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($5 + [344])))
	
.LABEL $label$19
	if ( ((*($5 + [440]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($14 + [8])))
	
.LABEL $label$20
	$24 = (int_64)0
	$22 = (int_64)0
	$11 = *(*($3) + [4])
	if ( (*($11 + [103]) == 0) ){ goto $label$21 }
	$11 = CALL $112(*($3 + [28]), *(*($3 + [32])), [19281])
	*((($5 + [304]) + [16])) = *(($11 + [16]))
	*((($5 + [304]) + [8])) = *(($11 + [8]))
	*($5 + [304]) = *($11)
	$19 = CALL $129((($5 + [304]) + [24]), ($11 + [24]))
	*($5 + [340]) = *($11 + [36])
	$21 = CALL $129((($5 + [304]) + [40]), ($11 + [40]))
	*((($5 + [304]) + [76])) = *(($11 + [76]))
	*((($5 + [304]) + [68])) = *(($11 + [68]))
	*((($5 + [304]) + [60])) = *(($11 + [60]))
	*($5 + [356 align=4]) = *($11 + [52 align=4])
	$20 = CALL $129((($5 + [304]) + [80]), ($11 + [80]))
	$17 = *(($3 + [16]))
	$8 = *(*(*($3) + [4]) + [103])
	$10 = *($15)
	*($5 + [288]) = [18048]
	*($5 + [292]) = CALL $164([18048])
	*($5 + [104]) = *($5 + [288])
	*($5 + [296]) = *(CALL $7(($5 + [232]), ($5 + [104])))
	*($5 + [288]) = $10
	$22 = ((uint_64)((int_64)$8 * (int_64)$18) / (uint_64)(int_64)100)
	$11 = *(($3 + [20]))
	$12 = *($11 + [4])
	if ( ($12 & [1]) ){ goto $label$23 }
	$12 = uint_32($12 >> [1])
	$11 = (($11 + [4]) + [1])
	goto $label$22 
	
.LABEL $label$23
	$12 = *(($11 + [8]))
	$11 = *(($11 + [12]))
	
.LABEL $label$22
	$25 = ($17 + [36])
	*($5 + [412]) = $12
	*($5 + [408]) = $11
	*($5 + [96]) = *($5 + [408])
	$26 = CALL $7(($5 + [416]), ($5 + [96]))
	*($5 + [440]) = [18055]
	*($5 + [444]) = CALL $164([18055])
	*($5 + [88]) = *($5 + [440])
	*($5 + [280]) = *(CALL $7(($5 + [232]), ($5 + [88])))
	$11 = *($19)
	$12 = ($11 & [1])
	*($5 + [216]) = ( *(($5 + [336])) ? ($19 + [1]) : $12 )
	*($5 + [220]) = ( *(($5 + [332])) ? uint_32($11 >> [1]) : $12 )
	*($5 + [80]) = *($5 + [216])
	$27 = CALL $7(($5 + [224]), ($5 + [80]))
	$23 = *(*(($3 + [24])))
	CALL eosio_assert([1], [18367])
	$8 = (uint_64)$23 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$8 = $10
	$12 = [1]
	$14 = $11
	$11 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$8 = $10
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$12 = ((int_32)$11 < (int_32)[6])
	$14 = ($11 + [1])
	$11 = $14
	if ( $12 ){ goto $label$28 }
	$12 = [1]
	$11 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$12 = [0]
	
.LABEL $label$24
	CALL eosio_assert($12, [18416])
	*(($5 + [208])) = [0]
	*($5 + [200]) = (int_64)0
	$11 = CALL $164([19302])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$36 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$39 }
	*($5 + [200]) = ($11 << [1])
	$12 = (($5 + [200]) | [1])
	if ( $11 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$14 = (($11 + [16]) & [-16])
	$12 = CALL _Znwj($14)
	*($5 + [200]) = ($14 | [1])
	*($5 + [208]) = $12
	*($5 + [204]) = $11
	
.LABEL $label$38
	CALL memcpy($12, [19302], $11)
	
.LABEL $label$37
	*(($12 + $11)) = [0]
	$8 = *($15)
	$11 = (($5 + [200]) + [8])
	*((($5 + [232]) + [40])) = *($11)
	*((($5 + [232]) + [24])) = $23
	*($11) = [0]
	*($5 + [232]) = $8
	*($5 + [240]) = *($27)
	*($5 + [248]) = $22
	*($5 + [264]) = *($5 + [200])
	*($5 + [200]) = (int_64)0
	$12 = *(($17 + [40]))
	if ( ((uint_32)$12 >= (uint_32)*(($17 + [44]))) ){ goto $label$43 }
	*($12 + [8]) = *($5 + [280])
	*($12 + [16 align=4]) = (int_64)0
	*($12) = *($26)
	*(($14 = ($12 + [24]))) = [0]
	$11 = CALL _Znwj([16])
	*($12 + [16]) = $11
	$26 = ($11 + [16])
	*($14) = $26
	*(($11 + [8])) = *((($5 + [288]) + [8]))
	*($11) = *($5 + [288])
	*(($12 + [20])) = $26
	*($12 + [28 align=4]) = (int_64)0
	*(($12 + [36])) = [0]
	$11 = *($5 + [264])
	$14 = ( *((($5 + [232]) + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($14 + [32])
	$8 = (CASTING uint_64)(uint_32 $14)
	$14 = ($12 + [28])
	
.LOOP $label$44:
	$11 = ($11 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$44 }
	if ( ($11 == 0) ){ goto $label$42 }
	CALL $41($14, $11)
	$14 = *(($12 + [32]))
	$11 = *(($12 + [28]))
	goto $label$41 
	
.LABEL $label$43
	CALL $111($25, ($5 + [288]), $26, ($5 + [280]), ($5 + [232]))
	goto $label$40 
	
.LABEL $label$42
	$14 = [0]
	$11 = [0]
	
.LABEL $label$41
	*($5 + [444]) = $11
	*($5 + [440]) = $11
	*($5 + [448]) = $14
	*($5 + [184]) = ($5 + [440])
	*($5 + [192]) = ($5 + [232])
	CALL $42(($5 + [192]), ($5 + [184]))
	*(($11 = ($17 + [40]))) = (*($11) + [40])
	
.LABEL $label$40
	if ( (*(($5 + [264])) & [1]) ){ goto $label$46 }
	if ( (*($5 + [200]) & [1]) ){ goto $label$45 }
	goto $label$35 
	
.LABEL $label$46
	CALL _ZdlPv(*(($5 + [272])))
	if ( ((*($5 + [200]) & [1]) == 0) ){ goto $label$35 }
	
.LABEL $label$45
	CALL _ZdlPv(*(($5 + [208])))
	$11 = [1]
	if ( ((*($20) & [1]) == 0) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	CALL $128(($5 + [200]))
	
.LABEL $label$35
	$11 = [1]
	if ( (*($20) & [1]) ){ goto $label$33 }
	
.LABEL $label$34
	if ( (*($21) & $11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	CALL _ZdlPv(*(($5 + [392])))
	if ( ((*($21) & $11) == 0) ){ goto $label$31 }
	
.LABEL $label$32
	CALL _ZdlPv(*(($5 + [352])))
	if ( (*($19) & [1]) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	if ( ((*($19) & [1]) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	CALL _ZdlPv(*(($5 + [336])))
	
.LABEL $label$29
	$11 = *(*($3) + [4])
	
.LABEL $label$21
	if ( (*($11 + [104]) == 0) ){ goto $label$47 }
	$11 = CALL $112(*($3 + [28]), *(*($3 + [36])), [19324])
	*((($5 + [304]) + [16])) = *(($11 + [16]))
	*((($5 + [304]) + [8])) = *(($11 + [8]))
	*($5 + [304]) = *($11)
	$19 = CALL $129((($5 + [304]) + [24]), ($11 + [24]))
	*($5 + [340]) = *($11 + [36])
	$21 = CALL $129((($5 + [304]) + [40]), ($11 + [40]))
	*((($5 + [304]) + [76])) = *(($11 + [76]))
	*((($5 + [304]) + [68])) = *(($11 + [68]))
	*((($5 + [304]) + [60])) = *(($11 + [60]))
	*($5 + [356 align=4]) = *($11 + [52 align=4])
	$20 = CALL $129((($5 + [304]) + [80]), ($11 + [80]))
	$17 = *(($3 + [16]))
	$8 = *(*(*($3) + [4]) + [104])
	$10 = *($15)
	*($5 + [288]) = [18048]
	*($5 + [292]) = CALL $164([18048])
	*($5 + [72]) = *($5 + [288])
	*($5 + [296]) = *(CALL $7(($5 + [232]), ($5 + [72])))
	*($5 + [288]) = $10
	$23 = ((uint_64)((int_64)$8 * (int_64)$18) / (uint_64)(int_64)100)
	$11 = *(($3 + [20]))
	$12 = *($11 + [4])
	if ( ($12 & [1]) ){ goto $label$49 }
	$12 = uint_32($12 >> [1])
	$11 = (($11 + [4]) + [1])
	goto $label$48 
	
.LABEL $label$49
	$12 = *(($11 + [8]))
	$11 = *(($11 + [12]))
	
.LABEL $label$48
	$25 = ($17 + [36])
	*($5 + [284]) = $12
	*($5 + [280]) = $11
	*($5 + [64]) = *($5 + [280])
	$26 = CALL $7(($5 + [416]), ($5 + [64]))
	*($5 + [440]) = [18055]
	*($5 + [444]) = CALL $164([18055])
	*($5 + [56]) = *($5 + [440])
	*($5 + [224]) = *(CALL $7(($5 + [232]), ($5 + [56])))
	$11 = *($19)
	$12 = ($11 & [1])
	*($5 + [184]) = ( *(($5 + [336])) ? ($19 + [1]) : $12 )
	*($5 + [188]) = ( *(($5 + [332])) ? uint_32($11 >> [1]) : $12 )
	*($5 + [48]) = *($5 + [184])
	$27 = CALL $7(($5 + [192]), ($5 + [48]))
	$24 = *(*(($3 + [24])))
	CALL eosio_assert([1], [18367])
	$8 = (uint_64)$24 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$52:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$51 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$53 }
	$8 = $10
	$12 = [1]
	$14 = $11
	$11 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$53
	$8 = $10
	
.LOOP $label$54:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$51 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$12 = ((int_32)$11 < (int_32)[6])
	$14 = ($11 + [1])
	$11 = $14
	if ( $12 ){ goto $label$54 }
	$12 = [1]
	$11 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$51
	$12 = [0]
	
.LABEL $label$50
	CALL eosio_assert($12, [18416])
	*(($5 + [208])) = [0]
	*($5 + [200]) = (int_64)0
	$11 = CALL $164([19344])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$62 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$65 }
	*($5 + [200]) = ($11 << [1])
	$12 = (($5 + [200]) | [1])
	if ( $11 ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$65
	$14 = (($11 + [16]) & [-16])
	$12 = CALL _Znwj($14)
	*($5 + [200]) = ($14 | [1])
	*($5 + [208]) = $12
	*($5 + [204]) = $11
	
.LABEL $label$64
	CALL memcpy($12, [19344], $11)
	
.LABEL $label$63
	*(($12 + $11)) = [0]
	$8 = *($15)
	$11 = (($5 + [200]) + [8])
	*((($5 + [232]) + [40])) = *($11)
	*((($5 + [232]) + [24])) = $24
	*($11) = [0]
	*($5 + [232]) = $8
	*($5 + [240]) = *($27)
	*($5 + [248]) = $23
	*($5 + [264]) = *($5 + [200])
	*($5 + [200]) = (int_64)0
	$12 = *(($17 + [40]))
	if ( ((uint_32)$12 >= (uint_32)*(($17 + [44]))) ){ goto $label$69 }
	*($12 + [8]) = *($5 + [224])
	*($12 + [16 align=4]) = (int_64)0
	*($12) = *($26)
	*(($14 = ($12 + [24]))) = [0]
	$11 = CALL _Znwj([16])
	*($12 + [16]) = $11
	$26 = ($11 + [16])
	*($14) = $26
	*(($11 + [8])) = *((($5 + [288]) + [8]))
	*($11) = *($5 + [288])
	*(($12 + [20])) = $26
	*($12 + [28 align=4]) = (int_64)0
	*(($12 + [36])) = [0]
	$11 = *($5 + [264])
	$14 = ( *((($5 + [232]) + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($14 + [32])
	$8 = (CASTING uint_64)(uint_32 $14)
	$14 = ($12 + [28])
	
.LOOP $label$70:
	$11 = ($11 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$70 }
	if ( ($11 == 0) ){ goto $label$68 }
	CALL $41($14, $11)
	$14 = *(($12 + [32]))
	$11 = *(($12 + [28]))
	goto $label$67 
	
.LABEL $label$69
	CALL $111($25, ($5 + [288]), $26, ($5 + [224]), ($5 + [232]))
	goto $label$66 
	
.LABEL $label$68
	$14 = [0]
	$11 = [0]
	
.LABEL $label$67
	*($5 + [444]) = $11
	*($5 + [440]) = $11
	*($5 + [448]) = $14
	*($5 + [456]) = ($5 + [440])
	*($5 + [176]) = ($5 + [232])
	CALL $42(($5 + [176]), ($5 + [456]))
	*(($11 = ($17 + [40]))) = (*($11) + [40])
	
.LABEL $label$66
	if ( (*(($5 + [264])) & [1]) ){ goto $label$72 }
	if ( (*($5 + [200]) & [1]) ){ goto $label$71 }
	goto $label$61 
	
.LABEL $label$72
	CALL _ZdlPv(*(($5 + [272])))
	if ( ((*($5 + [200]) & [1]) == 0) ){ goto $label$61 }
	
.LABEL $label$71
	CALL _ZdlPv(*(($5 + [208])))
	$11 = [1]
	if ( ((*($20) & [1]) == 0) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$62
	CALL $128(($5 + [200]))
	
.LABEL $label$61
	$11 = [1]
	if ( (*($20) & [1]) ){ goto $label$59 }
	
.LABEL $label$60
	if ( (*($21) & $11) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$59
	CALL _ZdlPv(*(($5 + [392])))
	if ( ((*($21) & $11) == 0) ){ goto $label$57 }
	
.LABEL $label$58
	CALL _ZdlPv(*(($5 + [352])))
	if ( (*($19) & [1]) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	if ( ((*($19) & [1]) == 0) ){ goto $label$55 }
	
.LABEL $label$56
	CALL _ZdlPv(*(($5 + [336])))
	
.LABEL $label$55
	$24 = (int_64))((int_64)0 - $23)
	
.LABEL $label$47
	$17 = *(($3 + [16]))
	$8 = *($15)
	*($5 + [232]) = [18048]
	*($5 + [236]) = CALL $164([18048])
	*($5 + [40]) = *($5 + [232])
	*($5 + [240]) = *(CALL $7(($5 + [304]), ($5 + [40])))
	*($5 + [232]) = $8
	$11 = *(($3 + [20]))
	$12 = *($11 + [4])
	if ( ($12 & [1]) ){ goto $label$74 }
	$12 = uint_32($12 >> [1])
	$11 = (($11 + [4]) + [1])
	goto $label$73 
	
.LABEL $label$74
	$12 = *(($11 + [8]))
	$11 = *(($11 + [12]))
	
.LABEL $label$73
	$20 = ($17 + [36])
	*($5 + [420]) = $12
	*($5 + [416]) = $11
	*($5 + [32]) = *($5 + [416])
	$19 = CALL $7(($5 + [200]), ($5 + [32]))
	*($5 + [288]) = [18055]
	*($5 + [292]) = CALL $164([18055])
	*($5 + [24]) = *($5 + [288])
	*($5 + [224]) = *(CALL $7(($5 + [304]), ($5 + [24])))
	*($5 + [176]) = [8411]
	*($5 + [180]) = CALL $164([8411])
	*($5 + [16]) = *($5 + [176])
	$21 = CALL $7(($5 + [192]), ($5 + [16]))
	$23 = *(*(($3 + [24])))
	$18 = ((int_64)$24 + (int_64))($18 - $22)
	CALL eosio_assert((uint_64)(((int_64)$18) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18367])
	$8 = (uint_64)$23 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$77:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$76 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$78 }
	$8 = $10
	$12 = [1]
	$14 = $11
	$11 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$77 }
	goto $label$75 
	
.LABEL $label$78
	$8 = $10
	
.LOOP $label$79:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$76 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$12 = ((int_32)$11 < (int_32)[6])
	$14 = ($11 + [1])
	$11 = $14
	if ( $12 ){ goto $label$79 }
	$12 = [1]
	$11 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$77 }
	goto $label$75 
	
.LABEL $label$76
	$12 = [0]
	
.LABEL $label$75
	CALL eosio_assert($12, [18416])
	*(($5 + [448])) = [0]
	*($5 + [440]) = (int_64)0
	$11 = CALL $164([19365])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$82 }
	*($5 + [440]) = ($11 << [1])
	$12 = (($5 + [440]) | [1])
	if ( $11 ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$82
	$14 = (($11 + [16]) & [-16])
	$12 = CALL _Znwj($14)
	*($5 + [440]) = ($14 | [1])
	*($5 + [448]) = $12
	*($5 + [444]) = $11
	
.LABEL $label$81
	CALL memcpy($12, [19365], $11)
	
.LABEL $label$80
	*(($12 + $11)) = [0]
	$8 = *($15)
	$11 = (($5 + [440]) + [8])
	*((($5 + [304]) + [40])) = *($11)
	*((($5 + [304]) + [24])) = $23
	*($11) = [0]
	*($5 + [304]) = $8
	*($5 + [312]) = *($21)
	*($5 + [320]) = $18
	*($5 + [336]) = *($5 + [440])
	*($5 + [440]) = (int_64)0
	$12 = *(($17 + [40]))
	if ( ((uint_32)$12 >= (uint_32)*(($17 + [44]))) ){ goto $label$86 }
	*($12 + [8]) = *($5 + [224])
	*($12 + [16 align=4]) = (int_64)0
	*($12) = *($19)
	*(($14 = ($12 + [24]))) = [0]
	$11 = CALL _Znwj([16])
	*($12 + [16]) = $11
	$3 = ($11 + [16])
	*($14) = $3
	*(($11 + [8])) = *((($5 + [232]) + [8]))
	*($11) = *($5 + [232])
	*(($12 + [20])) = $3
	*($12 + [28 align=4]) = (int_64)0
	*(($12 + [36])) = [0]
	$11 = *($5 + [336])
	$14 = ( *((($5 + [304]) + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($14 + [32])
	$8 = (CASTING uint_64)(uint_32 $14)
	$14 = ($12 + [28])
	
.LOOP $label$87:
	$11 = ($11 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$87 }
	if ( ($11 == 0) ){ goto $label$85 }
	CALL $41($14, $11)
	$14 = *(($12 + [32]))
	$11 = *(($12 + [28]))
	goto $label$84 
	
.LABEL $label$86
	CALL $111($20, ($5 + [232]), $19, ($5 + [224]), ($5 + [304]))
	goto $label$83 
	
.LABEL $label$85
	$14 = [0]
	$11 = [0]
	
.LABEL $label$84
	*($5 + [292]) = $11
	*($5 + [288]) = $11
	*($5 + [296]) = $14
	*($5 + [432]) = ($5 + [288])
	*($5 + [456]) = ($5 + [304])
	CALL $42(($5 + [456]), ($5 + [432]))
	*(($11 = ($17 + [40]))) = (*($11) + [40])
	
.LABEL $label$83
	if ( ((*(($5 + [336])) & [1]) == 0) ){ goto $label$88 }
	CALL _ZdlPv(*(($5 + [344])))
	
.LABEL $label$88
	if ( ((*($5 + [440]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($5 + [448])))
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$13 == (int_64)*($1)), [19099])
	*($5 + [288]) = [0]
	*($5 + [232]) = ($5 + [288])
	*($5 + [308]) = $9
	*($5 + [304]) = $1
	*($5 + [312]) = $7
	*($5 + [316]) = $6
	$14 = ($1 + [36])
	*($5 + [320]) = $14
	$3 = ($1 + [40])
	*($5 + [324]) = $3
	$15 = ($1 + [52])
	*($5 + [328]) = $15
	*($5 + [332]) = $16
	$17 = ($1 + [60])
	*($5 + [336]) = $17
	$19 = ($1 + [64])
	*($5 + [340]) = $19
	$21 = ($1 + [68])
	*($5 + [344]) = $21
	$20 = ($1 + [69])
	*($5 + [348]) = $20
	$26 = ($1 + [72])
	*($5 + [352]) = $26
	$27 = ($1 + [80])
	*($5 + [356]) = $27
	CALL $107(($5 + [304]), ($5 + [232]))
	$12 = *($5 + [288])
	if ( ($12 <= [513]) ){ goto $label$90 }
	$11 = CALL $169($12)
	goto $label$89 
	
.LABEL $label$90
	$11 = ($4 - (($12 + [15]) & [-16]))
	$global$0 = $11
	
.LABEL $label$89
	*($5 + [236]) = $11
	*($5 + [232]) = $11
	*($5 + [240]) = ($11 + $12)
	*($5 + [288]) = ($5 + [232])
	*($5 + [308]) = $9
	*($5 + [312]) = $7
	*($5 + [316]) = $6
	*($5 + [320]) = $14
	*($5 + [324]) = $3
	*($5 + [328]) = $15
	*($5 + [332]) = $16
	*($5 + [336]) = $17
	*($5 + [340]) = $19
	*($5 + [344]) = $21
	*($5 + [348]) = $20
	*($5 + [352]) = $26
	*($5 + [356]) = $27
	*($5 + [304]) = $1
	CALL $108(($5 + [304]), ($5 + [288]))
	CALL db_update_i64(*($1 + [96]), $2, $11, $12)
	if ( ($12 <= [513]) ){ goto $label$91 }
	CALL $173($11)
	
.LABEL $label$91
	if ( (uint_64)($13 <= *($0 + [16])) ){ goto $label$92 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$92
	$11 = ($5 + [160])
	*($5 + [304]) = *($9)
	if ( (CALL $163(($5 + [152]), ($5 + [304]), [8]) == 0) ){ goto $label$93 }
	$12 = *($1 + [100])
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$94 }
	$12 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865762275196928, ($5 + [288]), $13)
	*(($1 + [100])) = $12
	
.LABEL $label$94
	CALL db_idx64_update($12, $2, ($5 + [304]))
	
.LABEL $label$93
	*($5 + [304]) = *($7)
	if ( (CALL $163($11, ($5 + [304]), [8]) == 0) ){ goto $label$95 }
	$12 = ($1 + [104])
	$11 = *($12)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$96 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865762275196929, ($5 + [288]), $13)
	*($12) = $11
	
.LABEL $label$96
	CALL db_idx64_update($11, $2, ($5 + [304]))
	
.LABEL $label$95
	$11 = ($5 + [168])
	$12 = *($6)
	if ( ($12 & [1]) ){ goto $label$98 }
	$12 = uint_32($12 >> [1])
	$14 = ($6 + [1])
	goto $label$97 
	
.LABEL $label$98
	$12 = *(($1 + [28]))
	$14 = *(($1 + [32]))
	
.LABEL $label$97
	*($5 + [292]) = $12
	*($5 + [288]) = $14
	*($5 + [8]) = *($5 + [288])
	*($5 + [304]) = *(CALL $7(($5 + [304]), ($5 + [8])))
	if ( (CALL $163($11, ($5 + [304]), [8]) == 0) ){ goto $label$99 }
	$12 = ($1 + [108])
	$11 = *($12)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$100 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865762275196930, ($5 + [288]), $13)
	*($12) = $11
	
.LABEL $label$100
	CALL db_idx64_update($11, $2, ($5 + [304]))
	
.LABEL $label$99
	$global$0 = ($5 + [464])
	return (unreachable)
	
.LABEL $label$3
	CALL $128(($5 + [440]))
	(unreachable)
	(unreachable)
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_64 $25
	int_64 $26
	int_32 $27
	$4 = ($global$0 - [240])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [19002])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [19048])
	$6 = ($1 + [24])
	$7 = ($1 + [16])
	$8 = *($7)
	$9 = ($1 + [8])
	$10 = *($9)
	$11 = *($1 + [24])
	if ( ($11 & [1]) ){ goto $label$2 }
	$11 = uint_32($11 >> [1])
	$12 = ($6 + [1])
	goto $label$1 
	
.LABEL $label$2
	$11 = *(($1 + [28]))
	$12 = *(($1 + [32]))
	
.LABEL $label$1
	*($5 + [60]) = $11
	*($5 + [56]) = $12
	*($5 + [48]) = *($5 + [56])
	$13 = *(CALL $7(($5 + [184]), ($5 + [48])))
	*($5 + [64]) = $8
	*($5 + [56]) = $10
	*($5 + [72]) = $13
	$13 = *($1)
	*($1 + [69]) = [1]
	$11 = *(*($3))
	*($1 + [60]) = $11
	*($1 + [52]) = ($11 + *($1 + [52]))
	$14 = *($3 + [8])
	$15 = *($3 + [4])
	$8 = *($15)
	*($5 + [136]) = [18048]
	*($5 + [140]) = CALL $164([18048])
	*($5 + [40]) = *($5 + [136])
	*($5 + [144]) = *(CALL $7(($5 + [184]), ($5 + [40])))
	*($5 + [136]) = $8
	$11 = *($3 + [12])
	$12 = *($11 + [4])
	if ( ($12 & [1]) ){ goto $label$4 }
	$12 = uint_32($12 >> [1])
	$11 = (($11 + [4]) + [1])
	goto $label$3 
	
.LABEL $label$4
	$12 = *(($11 + [8]))
	$11 = *(($11 + [12]))
	
.LABEL $label$3
	$16 = ($1 + [60])
	*($5 + [124]) = $12
	*($5 + [120]) = $11
	*($5 + [32]) = *($5 + [120])
	$17 = CALL $7(($5 + [128]), ($5 + [32]))
	*($5 + [152]) = [18055]
	*($5 + [156]) = CALL $164([18055])
	*($5 + [24]) = *($5 + [152])
	$18 = *(CALL $7(($5 + [184]), ($5 + [24])))
	*($5 + [112]) = $18
	$11 = *($6)
	if ( ($11 & [1]) ){ goto $label$6 }
	$11 = uint_32($11 >> [1])
	$12 = ($6 + [1])
	goto $label$5 
	
.LABEL $label$6
	$11 = *(($1 + [28]))
	$12 = *(($1 + [32]))
	
.LABEL $label$5
	$19 = ($1 + [52])
	$20 = ($1 + [69])
	$21 = ($14 + [36])
	$22 = ($5 + [72])
	$23 = (($5 + [56]) + [8])
	*($5 + [100]) = $11
	*($5 + [96]) = $12
	*($5 + [16]) = *($5 + [96])
	$24 = CALL $7(($5 + [104]), ($5 + [16]))
	$25 = *($16)
	$26 = *(*($3 + [16]))
	CALL eosio_assert([1], [18367])
	$8 = (uint_64)$26 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $10
	$11 = [1]
	$12 = $3
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$11 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $11 ){ goto $label$11 }
	$11 = [1]
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$11 = [0]
	
.LABEL $label$7
	CALL eosio_assert($11, [18416])
	CALL $142(($5 + [80]), *($1 + [36]))
	$8 = *($15)
	$3 = (($5 + [80]) + [8])
	*((($5 + [184]) + [40])) = *($3)
	*((($5 + [184]) + [24])) = $26
	*($3) = [0]
	*($5 + [184]) = $8
	*($5 + [192]) = *($24)
	*($5 + [200]) = $25
	*($5 + [216]) = *($5 + [80])
	*($5 + [80]) = (int_64)0
	$11 = *(($14 + [40]))
	if ( ((uint_32)$11 >= (uint_32)*(($14 + [44]))) ){ goto $label$15 }
	*($11 + [8]) = $18
	*($11 + [16 align=4]) = (int_64)0
	*($11) = *($17)
	*(($12 = ($11 + [24]))) = [0]
	$3 = CALL _Znwj([16])
	*($11 + [16]) = $3
	$15 = ($3 + [16])
	*($12) = $15
	*(($3 + [8])) = *((($5 + [136]) + [8]))
	*($3) = *($5 + [136])
	*(($11 + [20])) = $15
	*($11 + [28 align=4]) = (int_64)0
	*(($11 + [36])) = [0]
	$3 = *($5 + [216])
	$12 = ( *((($5 + [184]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($12 + [32])
	$8 = (CASTING uint_64)(uint_32 $12)
	$12 = ($11 + [28])
	
.LOOP $label$16:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$16 }
	if ( ($3 == 0) ){ goto $label$14 }
	CALL $41($12, $3)
	$12 = *(($11 + [32]))
	$3 = *(($11 + [28]))
	goto $label$13 
	
.LABEL $label$15
	CALL $111($21, ($5 + [136]), $17, ($5 + [112]), ($5 + [184]))
	goto $label$12 
	
.LABEL $label$14
	$12 = [0]
	$3 = [0]
	
.LABEL $label$13
	*($5 + [156]) = $3
	*($5 + [152]) = $3
	*($5 + [160]) = $12
	*($5 + [168]) = ($5 + [152])
	*($5 + [176]) = ($5 + [184])
	CALL $42(($5 + [176]), ($5 + [168]))
	*(($3 = ($14 + [40]))) = (*($3) + [40])
	
.LABEL $label$12
	if ( ((*(($5 + [216])) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($5 + [224])))
	
.LABEL $label$17
	$12 = ($1 + [36])
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($5 + [88])))
	
.LABEL $label$18
	CALL eosio_assert(((int_64)$13 == (int_64)*($1)), [19099])
	*($5 + [152]) = [0]
	*($5 + [136]) = ($5 + [152])
	*($5 + [188]) = $9
	*($5 + [184]) = $1
	*($5 + [192]) = $7
	*($5 + [196]) = $6
	*($5 + [200]) = $12
	$14 = ($1 + [40])
	*($5 + [204]) = $14
	*($5 + [208]) = $19
	$15 = ($1 + [56])
	*($5 + [212]) = $15
	*($5 + [216]) = $16
	$17 = ($1 + [64])
	*($5 + [220]) = $17
	$24 = ($1 + [68])
	*($5 + [224]) = $24
	*($5 + [228]) = $20
	$21 = ($1 + [72])
	*($5 + [232]) = $21
	$27 = ($1 + [80])
	*($5 + [236]) = $27
	CALL $107(($5 + [184]), ($5 + [136]))
	$11 = *($5 + [152])
	if ( ($11 <= [513]) ){ goto $label$20 }
	$3 = CALL $169($11)
	goto $label$19 
	
.LABEL $label$20
	$3 = ($4 - (($11 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$19
	*($5 + [140]) = $3
	*($5 + [136]) = $3
	*($5 + [144]) = ($3 + $11)
	*($5 + [152]) = ($5 + [136])
	*($5 + [188]) = $9
	*($5 + [192]) = $7
	*($5 + [196]) = $6
	*($5 + [200]) = $12
	*($5 + [204]) = $14
	*($5 + [208]) = $19
	*($5 + [212]) = $15
	*($5 + [216]) = $16
	*($5 + [220]) = $17
	*($5 + [224]) = $24
	*($5 + [228]) = $20
	*($5 + [232]) = $21
	*($5 + [236]) = $27
	*($5 + [184]) = $1
	CALL $108(($5 + [184]), ($5 + [152]))
	CALL db_update_i64(*($1 + [96]), $2, $3, $11)
	if ( ($11 <= [513]) ){ goto $label$21 }
	CALL $173($3)
	
.LABEL $label$21
	if ( (uint_64)($13 <= *($0 + [16])) ){ goto $label$22 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$22
	*($5 + [184]) = *($9)
	if ( (CALL $163(($5 + [56]), ($5 + [184]), [8]) == 0) ){ goto $label$23 }
	$3 = *($1 + [100])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$24 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865762275196928, ($5 + [152]), $13)
	*(($1 + [100])) = $3
	
.LABEL $label$24
	CALL db_idx64_update($3, $2, ($5 + [184]))
	
.LABEL $label$23
	*($5 + [184]) = *($7)
	if ( (CALL $163($23, ($5 + [184]), [8]) == 0) ){ goto $label$25 }
	$11 = ($1 + [104])
	$3 = *($11)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$26 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865762275196929, ($5 + [152]), $13)
	*($11) = $3
	
.LABEL $label$26
	CALL db_idx64_update($3, $2, ($5 + [184]))
	
.LABEL $label$25
	$3 = *($6)
	if ( ($3 & [1]) ){ goto $label$28 }
	$3 = uint_32($3 >> [1])
	$11 = ($6 + [1])
	goto $label$27 
	
.LABEL $label$28
	$3 = *(($1 + [28]))
	$11 = *(($1 + [32]))
	
.LABEL $label$27
	*($5 + [156]) = $3
	*($5 + [152]) = $11
	*($5 + [8]) = *($5 + [152])
	*($5 + [184]) = *(CALL $7(($5 + [184]), ($5 + [8])))
	if ( (CALL $163($22, ($5 + [184]), [8]) == 0) ){ goto $label$29 }
	$11 = ($1 + [108])
	$3 = *($11)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$30 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865762275196930, ($5 + [152]), $13)
	*($11) = $3
	
.LABEL $label$30
	CALL db_idx64_update($3, $2, ($5 + [184]))
	
.LABEL $label$29
	$global$0 = ($5 + [240])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4229865762275196928, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [92]) == (int_32)$7), [18679])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $51($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4229865762275196928, $6))
	CALL eosio_assert(((int_32)*($4 + [92]) == (int_32)$7), [18679])
	
.LABEL $label$2
	*($4 + [100]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)4229865762275196928, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [92]) == (int_32)$7), [18679])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $51($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4229865762275196928, $6))
	CALL eosio_assert(((int_32)*($4 + [92]) == (int_32)$7), [18679])
	
.LABEL $label$2
	*($4 + [100]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_64 $24
	int_64 $25
	int_32 $26
	int_32 $27
	$4 = ($global$0 - [240])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [19002])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [19048])
	$6 = ($1 + [24])
	$7 = ($1 + [16])
	$8 = *($7)
	$9 = ($1 + [8])
	$10 = *($9)
	$11 = *($1 + [24])
	if ( ($11 & [1]) ){ goto $label$2 }
	$11 = uint_32($11 >> [1])
	$12 = ($6 + [1])
	goto $label$1 
	
.LABEL $label$2
	$11 = *(($1 + [28]))
	$12 = *(($1 + [32]))
	
.LABEL $label$1
	*($5 + [60]) = $11
	*($5 + [56]) = $12
	*($5 + [48]) = *($5 + [56])
	$13 = *(CALL $7(($5 + [184]), ($5 + [48])))
	*($5 + [64]) = $8
	*($5 + [56]) = $10
	*($5 + [72]) = $13
	$13 = *($1)
	$11 = *(*($3))
	*($1 + [64]) = $11
	*($1 + [52]) = ($11 + *($1 + [52]))
	$14 = *($3 + [8])
	$15 = *($3 + [4])
	$8 = *($15)
	*($5 + [136]) = [18048]
	*($5 + [140]) = CALL $164([18048])
	*($5 + [40]) = *($5 + [136])
	*($5 + [144]) = *(CALL $7(($5 + [184]), ($5 + [40])))
	*($5 + [136]) = $8
	$11 = *($3 + [12])
	$12 = *($11 + [4])
	if ( ($12 & [1]) ){ goto $label$4 }
	$12 = uint_32($12 >> [1])
	$11 = (($11 + [4]) + [1])
	goto $label$3 
	
.LABEL $label$4
	$12 = *(($11 + [8]))
	$11 = *(($11 + [12]))
	
.LABEL $label$3
	$16 = ($1 + [64])
	*($5 + [124]) = $12
	*($5 + [120]) = $11
	*($5 + [32]) = *($5 + [120])
	$17 = CALL $7(($5 + [128]), ($5 + [32]))
	*($5 + [152]) = [18055]
	*($5 + [156]) = CALL $164([18055])
	*($5 + [24]) = *($5 + [152])
	$18 = *(CALL $7(($5 + [184]), ($5 + [24])))
	*($5 + [112]) = $18
	$11 = *($6)
	if ( ($11 & [1]) ){ goto $label$6 }
	$11 = uint_32($11 >> [1])
	$12 = ($6 + [1])
	goto $label$5 
	
.LABEL $label$6
	$11 = *(($1 + [28]))
	$12 = *(($1 + [32]))
	
.LABEL $label$5
	$19 = ($1 + [52])
	$20 = ($14 + [36])
	$21 = ($5 + [72])
	$22 = (($5 + [56]) + [8])
	*($5 + [100]) = $11
	*($5 + [96]) = $12
	*($5 + [16]) = *($5 + [96])
	$23 = CALL $7(($5 + [104]), ($5 + [16]))
	$24 = *($16)
	$25 = *(*($3 + [16]))
	CALL eosio_assert([1], [18367])
	$8 = (uint_64)$25 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $10
	$11 = [1]
	$12 = $3
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$11 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $11 ){ goto $label$11 }
	$11 = [1]
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$11 = [0]
	
.LABEL $label$7
	CALL eosio_assert($11, [18416])
	CALL $142(($5 + [80]), *($1 + [36]))
	$8 = *($15)
	$3 = (($5 + [80]) + [8])
	*((($5 + [184]) + [40])) = *($3)
	*((($5 + [184]) + [24])) = $25
	*($3) = [0]
	*($5 + [184]) = $8
	*($5 + [192]) = *($23)
	*($5 + [200]) = $24
	*($5 + [216]) = *($5 + [80])
	*($5 + [80]) = (int_64)0
	$11 = *(($14 + [40]))
	if ( ((uint_32)$11 >= (uint_32)*(($14 + [44]))) ){ goto $label$15 }
	*($11 + [8]) = $18
	*($11 + [16 align=4]) = (int_64)0
	*($11) = *($17)
	*(($12 = ($11 + [24]))) = [0]
	$3 = CALL _Znwj([16])
	*($11 + [16]) = $3
	$15 = ($3 + [16])
	*($12) = $15
	*(($3 + [8])) = *((($5 + [136]) + [8]))
	*($3) = *($5 + [136])
	*(($11 + [20])) = $15
	*($11 + [28 align=4]) = (int_64)0
	*(($11 + [36])) = [0]
	$3 = *($5 + [216])
	$12 = ( *((($5 + [184]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($12 + [32])
	$8 = (CASTING uint_64)(uint_32 $12)
	$12 = ($11 + [28])
	
.LOOP $label$16:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$16 }
	if ( ($3 == 0) ){ goto $label$14 }
	CALL $41($12, $3)
	$12 = *(($11 + [32]))
	$3 = *(($11 + [28]))
	goto $label$13 
	
.LABEL $label$15
	CALL $111($20, ($5 + [136]), $17, ($5 + [112]), ($5 + [184]))
	goto $label$12 
	
.LABEL $label$14
	$12 = [0]
	$3 = [0]
	
.LABEL $label$13
	*($5 + [156]) = $3
	*($5 + [152]) = $3
	*($5 + [160]) = $12
	*($5 + [168]) = ($5 + [152])
	*($5 + [176]) = ($5 + [184])
	CALL $42(($5 + [176]), ($5 + [168]))
	*(($3 = ($14 + [40]))) = (*($3) + [40])
	
.LABEL $label$12
	if ( ((*(($5 + [216])) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($5 + [224])))
	
.LABEL $label$17
	$12 = ($1 + [36])
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($5 + [88])))
	
.LABEL $label$18
	CALL eosio_assert(((int_64)$13 == (int_64)*($1)), [19099])
	*($5 + [152]) = [0]
	*($5 + [136]) = ($5 + [152])
	*($5 + [188]) = $9
	*($5 + [184]) = $1
	*($5 + [192]) = $7
	*($5 + [196]) = $6
	*($5 + [200]) = $12
	$14 = ($1 + [40])
	*($5 + [204]) = $14
	*($5 + [208]) = $19
	$15 = ($1 + [56])
	*($5 + [212]) = $15
	$17 = ($1 + [60])
	*($5 + [216]) = $17
	*($5 + [220]) = $16
	$23 = ($1 + [68])
	*($5 + [224]) = $23
	$20 = ($1 + [69])
	*($5 + [228]) = $20
	$26 = ($1 + [72])
	*($5 + [232]) = $26
	$27 = ($1 + [80])
	*($5 + [236]) = $27
	CALL $107(($5 + [184]), ($5 + [136]))
	$11 = *($5 + [152])
	if ( ($11 <= [513]) ){ goto $label$20 }
	$3 = CALL $169($11)
	goto $label$19 
	
.LABEL $label$20
	$3 = ($4 - (($11 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$19
	*($5 + [140]) = $3
	*($5 + [136]) = $3
	*($5 + [144]) = ($3 + $11)
	*($5 + [152]) = ($5 + [136])
	*($5 + [188]) = $9
	*($5 + [192]) = $7
	*($5 + [196]) = $6
	*($5 + [200]) = $12
	*($5 + [204]) = $14
	*($5 + [208]) = $19
	*($5 + [212]) = $15
	*($5 + [216]) = $17
	*($5 + [220]) = $16
	*($5 + [224]) = $23
	*($5 + [228]) = $20
	*($5 + [232]) = $26
	*($5 + [236]) = $27
	*($5 + [184]) = $1
	CALL $108(($5 + [184]), ($5 + [152]))
	CALL db_update_i64(*($1 + [96]), $2, $3, $11)
	if ( ($11 <= [513]) ){ goto $label$21 }
	CALL $173($3)
	
.LABEL $label$21
	if ( (uint_64)($13 <= *($0 + [16])) ){ goto $label$22 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$22
	*($5 + [184]) = *($9)
	if ( (CALL $163(($5 + [56]), ($5 + [184]), [8]) == 0) ){ goto $label$23 }
	$3 = *($1 + [100])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$24 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865762275196928, ($5 + [152]), $13)
	*(($1 + [100])) = $3
	
.LABEL $label$24
	CALL db_idx64_update($3, $2, ($5 + [184]))
	
.LABEL $label$23
	*($5 + [184]) = *($7)
	if ( (CALL $163($22, ($5 + [184]), [8]) == 0) ){ goto $label$25 }
	$11 = ($1 + [104])
	$3 = *($11)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$26 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865762275196929, ($5 + [152]), $13)
	*($11) = $3
	
.LABEL $label$26
	CALL db_idx64_update($3, $2, ($5 + [184]))
	
.LABEL $label$25
	$3 = *($6)
	if ( ($3 & [1]) ){ goto $label$28 }
	$3 = uint_32($3 >> [1])
	$11 = ($6 + [1])
	goto $label$27 
	
.LABEL $label$28
	$3 = *(($1 + [28]))
	$11 = *(($1 + [32]))
	
.LABEL $label$27
	*($5 + [156]) = $3
	*($5 + [152]) = $11
	*($5 + [8]) = *($5 + [152])
	*($5 + [184]) = *(CALL $7(($5 + [184]), ($5 + [8])))
	if ( (CALL $163($21, ($5 + [184]), [8]) == 0) ){ goto $label$29 }
	$11 = ($1 + [108])
	$3 = *($11)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$30 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865762275196930, ($5 + [152]), $13)
	*($11) = $3
	
.LABEL $label$30
	CALL db_idx64_update($3, $2, ($5 + [184]))
	
.LABEL $label$29
	$global$0 = ($5 + [240])
}

int_32 .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [19158])
	$3 = *($0 + [4])
	$4 = *($3 + [100])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4229865762275196928, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [100]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [92]) == (int_32)$7), [18679])
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $51($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4229865762275196928, $6))
	CALL eosio_assert(((int_32)*($2 + [92]) == (int_32)$7), [18679])
	
.LABEL $label$3
	*($2 + [100]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $173 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17260])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17068]
	$3 = (((int_32)$1 * (int_32)[12]) + [17068])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $152 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $150 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [13] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $152($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $152($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $152($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $152($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19584]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $152($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $152($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $152($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $151 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $156 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $157 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $156($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $154 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $150([14], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_64 .FUNC $155 (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

void .FUNC $158 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $159 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $157($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_32 .FUNC $69 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $169($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18753])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $173($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $68 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $169($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18753])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $173($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [192])
	$global$0 = $3
	CALL memory()
	*($3 + [176]) = [18261]
	*($3 + [180]) = CALL $164([18261])
	*($3 + [96]) = *($3 + [176])
	if ( ((int_64)*(CALL $7(($3 + [184]), ($3 + [96]))) == (int_64)$2) ){ goto $label$1 }
	*($3 + [176]) = [18055]
	*($3 + [180]) = CALL $164([18055])
	*($3 + [88]) = *($3 + [176])
	if ( ((int_64)*(CALL $7(($3 + [184]), ($3 + [88]))) != (int_64)$2) ){ goto $label$2 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [1]
	*($3 + [8]) = *($3 + [168])
	CALL $66($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	*($3 + [176]) = [18055]
	*($3 + [180]) = CALL $164([18055])
	*($3 + [80]) = *($3 + [176])
	if ( ((int_64)*(CALL $7(($3 + [184]), ($3 + [80]))) == (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)4923678616182587391) ){ goto $label$9 }
	if ( ((int_64)$2 > (int_64)-4417018962198396929) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-7297707859695370240) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-4417029266017353728) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [2]
	*($3 + [24]) = *($3 + [152])
	CALL $67($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 > (int_64)4929617868719723007) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)4923678616182587392) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)4923678856662291328) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [3]
	*($3 + [40]) = *($3 + [136])
	CALL $68($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-4417018962198396928) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4149684618451746816) ){ goto $label$1 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [4]
	*($3 + [72]) = *($3 + [104])
	CALL $69($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)4929617868719723008) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [5]
	*($3 + [16]) = *($3 + [160])
	CALL $70($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [148]) = [0]
	*($3 + [144]) = [6]
	*($3 + [32]) = *($3 + [144])
	CALL $71($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [132]) = [0]
	*($3 + [128]) = [7]
	*($3 + [48]) = *($3 + [128])
	CALL $69($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [116]) = [0]
	*($3 + [112]) = [8]
	*($3 + [64]) = *($3 + [112])
	CALL $72($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [124]) = [0]
	*($3 + [120]) = [9]
	*($3 + [56]) = *($3 + [120])
	CALL $69($1, $1, ($3 + [56]))
	
.LABEL $label$1
	CALL $148([0])
	$global$0 = ($3 + [192])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [19424])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [19469])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19519])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [88])))
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [48])))
	if ( (*($4 + [24]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$15:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$16 }
	if ( ((*($6 + [80]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($6 + [88])))
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($6 + [48])))
	if ( (*($6 + [24]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$17
	CALL _ZdlPv($6)
	
.LABEL $label$16
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$15 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [96]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $114(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $67 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $169($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [88])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = [0]
	*($4 + [100]) = [0]
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	CALL $76(($4 + [56]), ($4 + [72]))
	CALL $76(($4 + [56]), ($4 + [84]))
	CALL eosio_assert(((int_32)*($4 + [64]) != (int_32)*($4 + [60])), [18753])
	CALL memcpy((($4 + [72]) + [24]), *($4 + [60]), [1])
	$3 = (*($4 + [60]) + [1])
	*($4 + [60]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [64]) - $3) > (uint_32)[3]), [18753])
	CALL memcpy(($4 + [100]), *($4 + [60]), [4])
	*($4 + [60]) = (*($4 + [60]) + [4])
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $77(($4 + [128]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( (*($4 + [84]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $173($2)
	if ( ((*($4 + [84]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [92])))
	$2 = [1]
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$2 = [1]
	if ( (*($4 + [72]) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	CALL _ZdlPv(*(($4 + [80])))
	$global$0 = ($4 + [144])
	return $2
}

int_32 .FUNC $66 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $169($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [64]) + [24]))) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $73(($4 + [16]), ($4 + [144]))
	*(($9 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($3 = (($4 + [128]) + [8]))) = *($9)
	*($4 + [128]) = *($4)
	$10 = *($3)
	*(($9 = (($4 + [144]) + [8]))) = $10
	*((($4 + [16]) + [24])) = $10
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($3) = *($8)
	*($4 + [128]) = *($4 + [80])
	$0 = *($4 + [72])
	$1 = *($4 + [64])
	$8 = CALL $129(($4 + [112]), ($4 + [96]))
	*($9) = *($3)
	*($4 + [168]) = $1
	*($4 + [160]) = $0
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [168])), (int_32 ($4 + [160])), (int_32 ($4 + [144])), (int_32 $8), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $173($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [104])))
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $61 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($2 + [32])) = [0]
	*($2 + [24]) = (int_64)0
	*($2 + [36]) = [0]
	$4 = *($0)
	*($2) = $4
	*($2 + [8]) = $4
	*($2 + [16]) = (int_64)-1
	if ( ((int_64)$1 == (int_64)-1) ){ goto $label$3 }
	$5 = CALL db_find_i64($4, $4, (int_64)-6147718988072747008, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$3 = CALL $29($2, $5)
	CALL eosio_assert(((int_32)*($3 + [108]) == (int_32)$2), [18679])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)[30]), [17714])
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [19390])
	CALL eosio_assert($5, [19158])
	$5 = CALL db_next_i64(*($3 + [112]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	CALL $29($2, $5)
	
.LABEL $label$5
	CALL $62($2, $3)
	CALL $63($0, $1)
	$6 = *($2 + [24])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = CALL db_lowerbound_i64($4, $4, (int_64)-6147718988072747008, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$0 = CALL $29($2, $3)
	
.LOOP $label$7:
	CALL eosio_assert([1], [19390])
	CALL eosio_assert([1], [19158])
	$3 = [0]
	$5 = CALL db_next_i64(*($0 + [112]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$3 = CALL $29($2, $5)
	
.LABEL $label$8
	CALL $62($2, $0)
	$0 = $3
	if ( $3 ){ goto $label$7 }
	
.LABEL $label$6
	$6 = *($2 + [24])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	$5 = *($3 + [44])
	if ( ($5 == 0) ){ goto $label$13 }
	*(($3 + [48])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$14
	CALL _ZdlPv($3)
	
.LABEL $label$12
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$11 }
	$3 = *(($2 + [24]))
	goto $label$9 
	
.LABEL $label$10
	$3 = $6
	
.LABEL $label$9
	*($7) = $6
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [108])) == (int_32)$0), [19002])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [19048])
	$5 = ($1 + [20])
	$6 = ($1 + [8])
	$7 = *($6)
	$8 = *($1 + [20])
	if ( ($8 & [1]) ){ goto $label$5 }
	$9 = ($5 + [1])
	$8 = uint_32($8 >> [1])
	if ( ((uint_32)$8 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = *(($1 + [28]))
	$8 = *(($1 + [24]))
	if ( ($8 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [18269])
	goto $label$2 
	
.LABEL $label$3
	if ( $8 ){ goto $label$2 }
	$10 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$10 = (int_64)0
	
.LOOP $label$6:
	$11 = (($9 + $8) + [-1])
	$12 = *($11)
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [18314])
	$12 = *($11)
	
.LABEL $label$7
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$6 }
	$10 = ((int_64)$10 << (int_64)8)
	
.LABEL $label$1
	*($1 + [16]) = [15]
	*($4 + [24]) = $7
	*($4 + [32]) = ((int_64)$10 | (int_64)*($1 + [32]))
	$7 = *($1)
	*($1 + [88]) = ((int_64)CALL current_time() + (int_64)300000000)
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [19099])
	$8 = *(($1 + [20]))
	$12 = ( *(($1 + [24])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($12 + [26])
	$10 = (CASTING uint_64)(uint_32 $12)
	$11 = ($1 + [88])
	$9 = ($1 + [16])
	$13 = ($1 + [32])
	$14 = ($4 + [32])
	
.LOOP $label$8:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$8 }
	$15 = ($1 + [44])
	$16 = *($1 + [44])
	$12 = *(($1 + [48]))
	$17 = ($12 - $16)
	$10 = (CASTING uint_64)(uint_32 $17)
	
.LOOP $label$9:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$9 }
	$12 = (( $8 ? ($17 + $8) : ((int_32)$16 == (int_32)$12) ) + [45])
	if ( ($12 <= [513]) ){ goto $label$11 }
	$8 = CALL $169($12)
	goto $label$10 
	
.LABEL $label$11
	$8 = ($3 - (($12 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$10
	*($4 + [12]) = $8
	*($4 + [8]) = $8
	*($4 + [16]) = ($8 + $12)
	*($4 + [40]) = ($4 + [8])
	*($4 + [52]) = $6
	*($4 + [56]) = $9
	*($4 + [60]) = $5
	*($4 + [64]) = $13
	*($4 + [80]) = $15
	*($4 + [100]) = $11
	*($4 + [48]) = $1
	*($4 + [68]) = ($1 + [36])
	*($4 + [72]) = ($1 + [40])
	*($4 + [76]) = ($1 + [42])
	*($4 + [84]) = ($1 + [56])
	*($4 + [88]) = ($1 + [64])
	*($4 + [92]) = ($1 + [72])
	*($4 + [96]) = ($1 + [80])
	*($4 + [104]) = ($1 + [96])
	*($4 + [108]) = ($1 + [97])
	*($4 + [112]) = ($1 + [98])
	*($4 + [116]) = ($1 + [99])
	*($4 + [120]) = ($1 + [100])
	*($4 + [128]) = ($1 + [102])
	*($4 + [124]) = ($1 + [101])
	*($4 + [132]) = ($1 + [103])
	*($4 + [136]) = ($1 + [104])
	CALL $101(($4 + [48]), ($4 + [40]))
	CALL db_update_i64(*($1 + [112]), $2, $8, $12)
	if ( ($12 <= [513]) ){ goto $label$12 }
	CALL $173($8)
	
.LABEL $label$12
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($4 + [48]) = *($6)
	if ( (CALL $163(($4 + [24]), ($4 + [48]), [8]) == 0) ){ goto $label$14 }
	$8 = *($1 + [116])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$15 }
	$8 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747008, ($4 + [40]), $7)
	*(($1 + [116])) = $8
	
.LABEL $label$15
	CALL db_idx64_update($8, $2, ($4 + [48]))
	
.LABEL $label$14
	$8 = *($5)
	if ( ($8 & [1]) ){ goto $label$20 }
	$9 = ($5 + [1])
	$8 = uint_32($8 >> [1])
	if ( ((uint_32)$8 >= (uint_32)[8]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$9 = *(($1 + [28]))
	$8 = *(($1 + [24]))
	if ( ($8 <= [8]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL eosio_assert([0], [18269])
	goto $label$17 
	
.LABEL $label$18
	if ( $8 ){ goto $label$17 }
	$10 = (int_64)0
	goto $label$16 
	
.LABEL $label$17
	$10 = (int_64)0
	
.LOOP $label$21:
	$11 = (($9 + $8) + [-1])
	$12 = *($11)
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [18314])
	$12 = *($11)
	
.LABEL $label$22
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$21 }
	$10 = ((int_64)$10 << (int_64)8)
	
.LABEL $label$16
	*($4 + [48]) = ((int_64)$10 | (int_64)*($13))
	if ( (CALL $163($14, ($4 + [48]), [8]) == 0) ){ goto $label$23 }
	$12 = ($1 + [120])
	$8 = *($12)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$24 }
	$8 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747007, ($4 + [40]), $7)
	*($12) = $8
	
.LABEL $label$24
	CALL db_idx64_update($8, $2, ($4 + [48]))
	
.LABEL $label$23
	$global$0 = ($4 + [144])
}

void .FUNC $63 (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($2 + [64]) = $1
	CALL require_auth(*($0))
	*(($2 + [56])) = [0]
	*(($2 + [62])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	*($2 + [60]) = [0]
	$1 = *($0)
	*($2 + [24]) = $1
	*($2 + [32]) = $1
	*($2 + [16]) = ($2 + [24])
	CALL $54(($2 + [8]), ($2 + [16]), ($2 + [64]))
	CALL $55($2, ($2 + [16]), ($2 + [64]))
	if ( ((int_32)*($2 + [12]) == (int_32)*($2 + [4])) ){ goto $label$1 }
	$1 = *($2 + [8])
	
.LOOP $label$2:
	*($2 + [72]) = $1
	$0 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$0) != (int_32)[0]), [19390])
	CALL $57(($2 + [72]))
	CALL $64(*($2 + [16]), $0)
	$1 = *($2 + [72])
	*($2 + [8]) = $1
	if ( ((int_32)*($2 + [4]) != (int_32)(CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32))) ){ goto $label$2 }
	
.LABEL $label$1
	CALL $45(($2 + [48]))
	$global$0 = ($2 + [80])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($1 + [108])) == (int_32)$0), [19424])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [19469])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19519])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	$9 = *($4 + [44])
	if ( ($9 == 0) ){ goto $label$10 }
	*(($4 + [48])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [28])))
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$8 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	$9 = *($6 + [44])
	if ( ($9 == 0) ){ goto $label$14 }
	*(($6 + [48])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	if ( ((*($6 + [20]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [28])))
	
.LABEL $label$15
	CALL _ZdlPv($6)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [112]))
	$6 = *($1 + [116])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$17 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747008, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL db_idx64_remove($6)
	
.LABEL $label$16
	$6 = *(($1 + [120]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$19 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747007, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL db_idx64_remove($6)
	
.LABEL $label$18
	$global$0 = ($2 + [16])
}

void .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = $1
	$3 = CALL transaction_size()
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	$5 = CALL read_transaction($4, $3)
	CALL eosio_assert(((int_32)$3 == (int_32)$5), [8218])
	$6 = $1
	CALL sha256($4, $5, $6)
	$1 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	
.LOOP $label$1:
	$3 = *(($6 + $1))
	CALL $136($0, *((uint_32($3 >> [4]) + [8192])))
	CALL $136($0, *((($3 & [15]) + [8192])))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$1 }
	$2
	$global$0 = ($6 + [32])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $76(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [56])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [18753])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $146($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy($1, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18753])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($1 + [8]) = *($2 + [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy(($1 + [16]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18753])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18753])
	CALL memcpy(($1 + [32]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18753])
	CALL memcpy(($1 + [40]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18753])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18753])
	CALL memcpy(($1 + [56]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($1 + [68]) = *(*($0 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $146($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18673])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [18673])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $81($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18673])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18673])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18673])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $81(CALL $80($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [18673])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [18673])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [18673])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [18673])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18673])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18673])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18673])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18673])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18673])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18673])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18673])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $149 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $165([8592])
	$3 = *([0] + [8600])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8604])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8608]
	*([0] + [8600]) = [8608]
	$4 = *([0] + [8604])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $172([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8600])
	*([0] + [8600]) = $3
	*([0] + [8604]) = [0]
	
.LABEL $label$2
	*([0] + [8604]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $166([8592])
	return [0]
	
.LABEL $label$1
	CALL $166([8592])
	return [-1]
}

void .FUNC $148 (int_32 $0)
{
}

void .FUNC $145 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $144 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $147 ()
{
	return [8584]
}

void .FUNC $146 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $141 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $143($1, $0, [17739])
	CALL $145()
	(unreachable)
}

void .FUNC $140 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $143($1, $0, [17801])
	CALL $144()
	(unreachable)
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $164($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $132($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $134(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $154(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8450], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $134(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $134(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $72 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $169($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $78(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $79(($4 + [144]), ($4 + [72]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $173($2)
	
.LABEL $label$4
	$2 = *(($4 + [88]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [92])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18753])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $76(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $70 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $169($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*($4 + [80]) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [84]) = [0]
	*($4 + [86 align=2]) = (int_64)0
	*($4 + [94]) = [0]
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = [0]
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $74(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $75(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [72]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $173($2)
	$2 = [1]
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [80])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $71 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $169($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [48]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18753])
	CALL memcpy(($4 + [32]), $2, [8])
	*($4) = (int_64)0
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [18753])
	CALL memcpy($4, ($2 + [8]), [8])
	*($4 + [40]) = *($4)
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [18753])
	CALL memcpy((($4 + [32]) + [16]), ($2 + [16]), [8])
	*(($4 + [20])) = ($2 + [24])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$0 = *($4 + [32])
	$1 = *($4 + [48])
	*($4 + [56]) = *($4 + [40])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 ($4 + [56])), (int_32 $1), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $173($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $90($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $133($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $133($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $128($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = CALL $129(($2 + [16]), $1)
	$4 = CALL $129($2, ($1 + [12]))
	$5 = *($1 + [28])
	$6 = *($1 + [24])
	$1 = *($0 + [4])
	$7 = *($1 + [4])
	$0 = (*($0) + int_32($7 >> [1]))
	$1 = *($1)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$8 = CALL $129(($2 + [32]), $4)
	$7 = CALL $129(($2 + [48]), $3)
	CALL void $0((int_32 $7), (int_32 $8), (int_32 ($6 & [255])), (int_32 $5), (int_32 $1))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($7 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($3) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $76(*($1), *($0))
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [18753])
	CALL memcpy(($0 + [12]), *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy(($0 + [14]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy(($0 + [15]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*($2 + [8]) = $0
	CALL $115(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = CALL $129($2, $1)
	$4 = *($1 + [40])
	$5 = *($1 + [32])
	$6 = *($1 + [24])
	$7 = *($1 + [22])
	$8 = *($1 + [21])
	$9 = *($1 + [20])
	$10 = *($1 + [19])
	$11 = *($1 + [18])
	$12 = *($1 + [17])
	$13 = *($1 + [16])
	$14 = *($1 + [15])
	$15 = *($1 + [14])
	$16 = *($1 + [12])
	$1 = *($0 + [4])
	$17 = *($1 + [4])
	$0 = (*($0) + int_32($17 >> [1]))
	$1 = *($1)
	if ( (($17 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$17 = CALL $129(($2 + [16]), $3)
	CALL void $0((int_32 $17), (int_32 ($16 & [65535])), (int_32 ($15 & [255])), (int_32 ($14 & [255])), (int_32 ($13 & [255])), (int_32 ($12 & [255])), (int_32 ($11 & [255])), (int_32 ($10 & [255])), (int_32 ($9 & [255])), (int_32 ($8 & [255])), (int_32 ($7 & [255])), (int_32 $6), (int_64 $5), (int_64 $4), (int_32 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($17 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $117(*($1), ($3 + [16]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy(($3 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy(($3 + [40]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = (int_64)0
	$3 = [0]
	*($2 + [8]) = [0]
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($6 == 0) ){ goto $label$6 }
	$3 = int_32($6 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$2 }
	$6 = CALL _Znwj($6)
	*(($2 + [8])) = ($6 + ($3 << [3]))
	*($2) = $6
	*($2 + [4]) = $6
	$7 = *(($1 + [16]))
	$3 = (*(($1 + [20])) - $7)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($6, $7, $3)
	$3 = ($6 + $3)
	*($2 + [4]) = $3
	goto $label$4 
	
.LABEL $label$6
	$6 = [0]
	$8 = [0]
	$9 = [0]
	goto $label$3 
	
.LABEL $label$5
	$3 = $6
	
.LABEL $label$4
	$8 = $6
	$9 = $6
	
.LABEL $label$3
	$10 = *($1 + [40])
	$11 = *($1 + [32])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$7 = (*($0) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($7) + $1))
	
.LABEL $label$7
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$0 = ($3 - $9)
	if ( ($0 == 0) ){ goto $label$8 }
	$9 = int_32($0 >> [3])
	if ( ((uint_32)$9 >= (uint_32)[536870912]) ){ goto $label$1 }
	$0 = CALL _Znwj($0)
	*(($2 + [24])) = ($0 + ($9 << [3]))
	*($2 + [16]) = $0
	*($2 + [20]) = $0
	$3 = ($3 - $8)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($0, $6, $3)
	*($2 + [20]) = ($0 + $3)
	
.LABEL $label$8
	CALL void $7((int_32 $5), (int_64 $4), (int_64 ($2 + [16])), (int_32 $11), (int_64 $10), (int_64 $1))
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$9 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$10 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $146($2)
	
.LABEL $label$1
	CALL $146(($2 + [16]))
	(unreachable)
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $76(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18753])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [18753])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [18753])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	CALL $99(*($1), *($0 + [32]))
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18753])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [88])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18753])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18758])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = ($6 - $7)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $100($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + $2)
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($5) != (int_32)$3), [18753])
	CALL memcpy($7, *($2), [1])
	$3 = (*($2) + [1])
	*($2) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $94 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [40]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18919])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4060986526864314368)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18865])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18865])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $92(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [18673])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	CALL $96(*($1), *($0 + [4]))
	CALL $96(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [18673])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18673])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18673])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $96(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [56])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [18673])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18758])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $41($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18753])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-4060986526864314368, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)$6 == (int_64)*($4)) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [36]) == (int_32)$7), [18679])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $92($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)-4060986526864314368, $6))
	CALL eosio_assert(((int_32)*($4 + [36]) == (int_32)$7), [18679])
	
.LABEL $label$2
	*(($4 + [44])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18730])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $169($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [4 align=4]) = (int_64)0
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [36]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [4])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [28])
	*($3 + [56]) = ($5 + [32])
	CALL $93(($3 + [40]), ($3 + [32]))
	*($5 + [44]) = [-1]
	*($5 + [40]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $19(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $173($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [18753])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	CALL $76(*($1), *($0 + [4]))
	CALL $76(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [18753])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $163(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $139 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $164([8242])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8242], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $147())
	*(CALL $147()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $161($4, ($3 + [12]), $2)
	$5 = CALL $147()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $140($3)
	
.LABEL $label$1
	CALL $141($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $132($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $135($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $135 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $135($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $162(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $128 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$1 = ($global$0 - [160])
	$global$0 = $1
	$2 = CALL $164([8385])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [18269])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [18314])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert([1], [18367])
	$5 = ((int_64)$3 & (int_64)72057594037927935)
	$6 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$5 = $3
	$4 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$5 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [18416])
	*($1 + [152]) = [8389]
	*($1 + [156]) = CALL $164([8389])
	*($1 + [72]) = *($1 + [152])
	$3 = *(CALL $7(($1 + [80]), ($1 + [72])))
	$2 = CALL $164([8385])
	if ( ($2 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [18269])
	goto $label$14 
	
.LABEL $label$15
	if ( ($2 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$5 = (int_64)0
	
.LOOP $label$16:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [18314])
	
.LABEL $label$17
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$13
	$5 = (int_64)0
	
.LABEL $label$12
	*($1 + [152]) = [8399]
	*($1 + [156]) = CALL $164([8399])
	*($1 + [64]) = *($1 + [152])
	$8 = *(CALL $7(($1 + [80]), ($1 + [64])))
	*(($1 + [112])) = [0]
	*($1 + [88]) = $3
	*($1 + [80]) = $8
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	$2 = CALL $2(($1 + [80]), ((int_64)$5 & (int_64)72057594037927935), [8333])
	$5 = *($2 + [8])
	$3 = *($2)
	$7 = *($1 + [104])
	if ( ($7 == 0) ){ goto $label$18 }
	$9 = ($1 + [108])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$22 }
	CALL _ZdlPv($4)
	
.LABEL $label$22
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$21 }
	$2 = *(($1 + [104]))
	goto $label$19 
	
.LABEL $label$20
	$2 = $7
	
.LABEL $label$19
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$18
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [18436])
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18479])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [18498])
	*($1 + [152]) = [8466]
	*($1 + [156]) = CALL $164([8466])
	*($1 + [56]) = *($1 + [152])
	$8 = *(CALL $7(($1 + [80]), ($1 + [56])))
	$2 = CALL $164([8385])
	if ( ($2 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [18269])
	goto $label$25 
	
.LABEL $label$26
	if ( ($2 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$5 = (int_64)0
	
.LOOP $label$27:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [18314])
	
.LABEL $label$28
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$27 }
	goto $label$23 
	
.LABEL $label$24
	$5 = (int_64)0
	
.LABEL $label$23
	*($1 + [152]) = [8399]
	*($1 + [156]) = CALL $164([8399])
	*($1 + [48]) = *($1 + [152])
	$10 = *(CALL $7(($1 + [80]), ($1 + [48])))
	*(($1 + [112])) = [0]
	*($1 + [88]) = $8
	*($1 + [80]) = $10
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	$2 = CALL $2(($1 + [80]), ((int_64)$5 & (int_64)72057594037927935), [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [104])
	if ( ($7 == 0) ){ goto $label$29 }
	$9 = ($1 + [108])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$31 }
	
.LOOP $label$32:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$33 }
	CALL _ZdlPv($4)
	
.LABEL $label$33
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$32 }
	$2 = *(($1 + [104]))
	goto $label$30 
	
.LABEL $label$31
	$2 = $7
	
.LABEL $label$30
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$29
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [18436])
	$3 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18479])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [18498])
	*($1 + [152]) = [8479]
	*($1 + [156]) = CALL $164([8479])
	*($1 + [40]) = *($1 + [152])
	$8 = *(CALL $7(($1 + [80]), ($1 + [40])))
	$2 = CALL $164([8385])
	if ( ($2 <= [8]) ){ goto $label$37 }
	CALL eosio_assert([0], [18269])
	goto $label$36 
	
.LABEL $label$37
	if ( ($2 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	$5 = (int_64)0
	
.LOOP $label$38:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$39 }
	CALL eosio_assert([0], [18314])
	
.LABEL $label$39
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$38 }
	goto $label$34 
	
.LABEL $label$35
	$5 = (int_64)0
	
.LABEL $label$34
	*($1 + [152]) = [8399]
	*($1 + [156]) = CALL $164([8399])
	*($1 + [32]) = *($1 + [152])
	$10 = *(CALL $7(($1 + [80]), ($1 + [32])))
	*(($1 + [112])) = [0]
	*($1 + [88]) = $8
	*($1 + [80]) = $10
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	$2 = CALL $2(($1 + [80]), ((int_64)$5 & (int_64)72057594037927935), [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [104])
	if ( ($7 == 0) ){ goto $label$40 }
	$9 = ($1 + [108])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$42 }
	
.LOOP $label$43:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$44 }
	CALL _ZdlPv($4)
	
.LABEL $label$44
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$43 }
	$2 = *(($1 + [104]))
	goto $label$41 
	
.LABEL $label$42
	$2 = $7
	
.LABEL $label$41
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$40
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [18436])
	$3 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18479])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [18498])
	*($1 + [152]) = [8424]
	*($1 + [156]) = CALL $164([8424])
	*($1 + [24]) = *($1 + [152])
	$8 = *(CALL $7(($1 + [80]), ($1 + [24])))
	$2 = CALL $164([8385])
	if ( ($2 <= [8]) ){ goto $label$48 }
	CALL eosio_assert([0], [18269])
	goto $label$47 
	
.LABEL $label$48
	if ( ($2 == 0) ){ goto $label$46 }
	
.LABEL $label$47
	$5 = (int_64)0
	
.LOOP $label$49:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$50 }
	CALL eosio_assert([0], [18314])
	
.LABEL $label$50
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$49 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$45 
	
.LABEL $label$46
	$5 = (int_64)0
	
.LABEL $label$45
	*($1 + [152]) = [8399]
	*($1 + [156]) = CALL $164([8399])
	*($1 + [16]) = *($1 + [152])
	$10 = *(CALL $7(($1 + [80]), ($1 + [16])))
	*(($1 + [112])) = [0]
	*($1 + [88]) = $8
	*($1 + [80]) = $10
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	$2 = CALL $2(($1 + [80]), $5, [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [104])
	if ( ($7 == 0) ){ goto $label$51 }
	$9 = ($1 + [108])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$53 }
	
.LOOP $label$54:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$55 }
	CALL _ZdlPv($4)
	
.LABEL $label$55
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$54 }
	$2 = *(($1 + [104]))
	goto $label$52 
	
.LABEL $label$53
	$2 = $7
	
.LABEL $label$52
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$51
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [18436])
	$3 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18479])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [18498])
	*($1 + [152]) = [8453]
	*($1 + [156]) = CALL $164([8453])
	*($1 + [8]) = *($1 + [152])
	$8 = *(CALL $7(($1 + [80]), ($1 + [8])))
	$2 = CALL $164([8385])
	if ( ($2 <= [8]) ){ goto $label$59 }
	CALL eosio_assert([0], [18269])
	goto $label$58 
	
.LABEL $label$59
	if ( ($2 == 0) ){ goto $label$57 }
	
.LABEL $label$58
	$5 = (int_64)0
	
.LOOP $label$60:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$61 }
	CALL eosio_assert([0], [18314])
	
.LABEL $label$61
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$60 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$56 
	
.LABEL $label$57
	$5 = (int_64)0
	
.LABEL $label$56
	*($1 + [152]) = [8399]
	*($1 + [156]) = CALL $164([8399])
	*($1) = *($1 + [152])
	$10 = *(CALL $7(($1 + [80]), $1))
	*(($9 = ($1 + [112]))) = [0]
	*($1 + [88]) = $8
	*($1 + [80]) = $10
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	$2 = CALL $2(($1 + [80]), $5, [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [104])
	if ( ($7 == 0) ){ goto $label$62 }
	$11 = ($1 + [108])
	$2 = *($11)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$64 }
	
.LOOP $label$65:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$66 }
	CALL _ZdlPv($4)
	
.LABEL $label$66
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$65 }
	$2 = *(($1 + [104]))
	goto $label$63 
	
.LABEL $label$64
	$2 = $7
	
.LABEL $label$63
	*($11) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$62
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [18436])
	$5 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [18479])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [18498])
	$2 = CALL tapos_block_prefix()
	$4 = CALL tapos_block_num()
	$3 = CALL current_time()
	*($9) = [0]
	*($1 + [88]) = (int_64)6138663577826885632
	*($1 + [80]) = (int_64)6138663577826885632
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	$6 = (CASTING int_64)(int_32 ($4 + $2))
	$2 = CALL $4(($1 + [80]), (int_64)4995142087184830980, [8366])
	$8 = *($2 + [40])
	$10 = *($2 + [16])
	$7 = *($1 + [104])
	if ( ($7 == 0) ){ goto $label$67 }
	$9 = ($1 + [108])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$69 }
	
.LOOP $label$70:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$71 }
	CALL _ZdlPv($4)
	
.LABEL $label$71
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$70 }
	$2 = *(($1 + [104]))
	goto $label$68 
	
.LABEL $label$69
	$2 = $7
	
.LABEL $label$68
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$67
	*($1 + [152]) = ((int_64)((int_64)((int_64)((int_64)((int_64)$5 + (int_64)(CASTING int_64)(int_32 $0)) + (int_64)$3) + (int_64)$6) + (int_64)$10) + (int_64)$8)
	CALL sha512(($1 + [152]), [4], ($1 + [80]))
	$5 = CALL $155(*((($1 + [80]) + (CASTING uint_32)(uint_64 ((int_64)CALL $155(*((($1 + [80]) + ((int_32)(((int_32)CALL $fimport$5() * (int_32)CALL $fimport$6()) + $0) % (int_32)[64])))) % (int_64)64)))))
	$global$0 = ($1 + [160])
	return (CASTING uint_32)(uint_64 $5)
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = CALL $137($1, $2, [0])
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$2 }
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	$4 = CALL $130($3, $1, $4, ($5 - $4), $1)
	$8 = *($7)
	if ( ((int_32)$8 != (int_32)*($6)) ){ goto $label$6 }
	CALL $10($0, $4)
	$4 = ($5 + [1])
	if ( (*($3) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $129($8, $4)
	*($7) = (*($7) + [12])
	$4 = ($5 + [1])
	if ( ((*($3) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$4
	$5 = CALL $137($1, $2, $4)
	if ( ((int_32)$5 != (int_32)[-1]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	$4 = CALL $130($3, $1, $4, ((int_32)$4 ^ (int_32)[-1]), $1)
	$1 = ($0 + [4])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [8]))) ){ goto $label$7 }
	*($5) = *($3)
	*(($5 + [8])) = *(($3 + [8]))
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	*($1) = (*($1) + [12])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	CALL $11($0, $4)
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $173($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $169($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8580])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $169($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $2 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [18679])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $3($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [18679])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $173($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $167(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8580])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $167(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $14 (int_32 $0)
{
	if ( ((*([0] + [8568]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8576]))
	
.LABEL $label$1
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [128])
	$global$0 = $5
	*($5 + [84]) = $4
	*($5 + [91]) = $3
	CALL require_auth(*($0))
	*(($5 + [72])) = [0]
	*($5 + [56]) = (int_64)-1
	*($5 + [64]) = (int_64)0
	*($5 + [76]) = [0]
	$6 = *($0)
	*($5 + [40]) = $6
	*($5 + [48]) = $6
	*($5 + [32]) = ($5 + [40])
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$5 }
	$7 = ($2 + [1])
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = *($2 + [8])
	$4 = *($2 + [4])
	if ( ($4 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [18269])
	goto $label$2 
	
.LABEL $label$3
	if ( $4 ){ goto $label$2 }
	$6 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	
.LOOP $label$6:
	$8 = (($7 + $4) + [-1])
	$3 = *($8)
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [18314])
	$3 = *($8)
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$6 }
	$6 = ((int_64)$6 << (int_64)8)
	$3 = *($5 + [91])
	
.LABEL $label$1
	*($5) = ((int_64)$6 | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) & (int_64)255))
	CALL $16(($5 + [24]), ($5 + [32]), $5)
	$6 = *($0)
	$4 = *($5 + [28])
	if ( ($4 == 0) ){ goto $label$10 }
	*($5 + [4]) = $2
	*($5) = $1
	*($5 + [8]) = ($5 + [91])
	*($5 + [12]) = ($5 + [84])
	CALL eosio_assert([1], [18967])
	CALL $17(*($5 + [32]), $4, $6, $5)
	$8 = *($5 + [64])
	if ( $8 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($5 + [4]) = $1
	*($5 + [8]) = $2
	*($5) = ($5 + [40])
	*($5 + [12]) = ($5 + [91])
	*($5 + [16]) = ($5 + [84])
	*($5 + [120]) = $6
	CALL eosio_assert(((int_64)*($5 + [40]) == (int_64)CALL $fimport$10()), [18762])
	*($5 + [100]) = $5
	*($5 + [96]) = ($5 + [40])
	*($5 + [104]) = ($5 + [120])
	*(($4 = CALL _Znwj([48])) + [4 align=4]) = (int_64)0
	*($4 + [12 align=4]) = (int_64)0
	*($4 + [20 align=4]) = (int_64)0
	*($4 + [36]) = ($5 + [40])
	CALL $18(($5 + [96]), $4)
	*($5 + [112]) = $4
	$6 = *($4)
	*($5 + [96]) = $6
	$8 = *($4 + [40])
	*($5 + [92]) = $8
	$7 = ($5 + [68])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($5 + [72]))) ){ goto $label$13 }
	*($3 + [8]) = $6
	*($3 + [16]) = $8
	*($5 + [112]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	$4 = *($5 + [112])
	*($5 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $19(($5 + [64]), ($5 + [112]), ($5 + [96]), ($5 + [92]))
	$4 = *($5 + [112])
	*($5 + [112]) = [0]
	if ( $4 ){ goto $label$11 }
	
.LABEL $label$12
	$8 = *($5 + [64])
	if ( ($8 == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$14
	if ( ((*($4 + [4]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [12])))
	
.LABEL $label$15
	CALL _ZdlPv($4)
	$8 = *($5 + [64])
	if ( ($8 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$7 = ($5 + [68])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$17 }
	
.LOOP $label$18:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$20
	if ( ((*($4 + [4]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($4 + [12])))
	
.LABEL $label$21
	CALL _ZdlPv($4)
	
.LABEL $label$19
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$18 }
	$4 = *(($5 + [64]))
	goto $label$16 
	
.LABEL $label$17
	$4 = $8
	
.LABEL $label$16
	*($7) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$8
	$global$0 = ($5 + [128])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $91(($3 + [8]), $1, $2)
	$4 = *($3 + [12])
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = *(($4 + [24]))
	$6 = *($2)
	$7 = ($2 & [1])
	$2 = *($4 + [16])
	$2 = ( *(($4 + [20])) ? uint_32($2 >> [1]) : $7 )
	if ( ($2 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [18269])
	goto $label$4 
	
.LABEL $label$6
	*($0 + [4]) = [0]
	*($0) = $1
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = ( $5 ? ($4 + [17]) : $7 )
	$9 = (int_64)0
	
.LOOP $label$7:
	$7 = (($8 + $2) + [-1])
	$5 = *($7)
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [18314])
	$5 = *($7)
	
.LABEL $label$8
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$9 << (int_64)8) | (int_64)*($4 + [28]))) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)$6 == (int_64)((int_64)0 | (int_64)*($4 + [28]))) ){ goto $label$1 }
	
.LABEL $label$2
	*($0 + [4]) = [0]
	*($0) = $1
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($0) = *($3 + [8])
	$global$0 = ($3 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [19002])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [19048])
	$6 = ($1 + [17])
	$7 = *(($1 + [24]))
	$8 = ($1 + [16])
	$10 = ($9 & [1])
	$9 = *($1 + [16])
	$9 = ( *(($1 + [20])) ? uint_32($9 >> [1]) : $10 )
	if ( ($9 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [18269])
	goto $label$3 
	
.LABEL $label$4
	if ( ($9 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$11 = ( $7 ? $6 : $10 )
	$12 = (int_64)0
	
.LOOP $label$5:
	$10 = (($11 + $9) + [-1])
	$7 = *($10)
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [18314])
	$7 = *($10)
	
.LABEL $label$6
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$5 }
	$12 = ((int_64)$12 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$12 = (int_64)0
	
.LABEL $label$1
	*($5 + [24]) = ((int_64)$12 | (int_64)*($1 + [28]))
	$7 = *($1)
	$10 = ($1 + [4])
	CALL $131($10, *($3))
	CALL $131($8, *($3 + [4]))
	*($1 + [28]) = *(*($3 + [8]))
	*($1 + [32]) = *(*($3 + [12]))
	CALL eosio_assert(((int_32)$7 == (int_32)*($1)), [19099])
	$9 = *($1 + [4])
	$11 = ( *(($1 + [8])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($11 + [7])
	$12 = (CASTING uint_64)(uint_32 $11)
	$11 = ($1 + [32])
	$3 = ($1 + [28])
	$13 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$7:
	$9 = ($9 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$7 }
	$7 = *(($1 + [16]))
	$7 = ( *(($1 + [20])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$9 = ($7 + $9)
	$12 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$8:
	$9 = ($9 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$8 }
	if ( ($9 <= [513]) ){ goto $label$10 }
	$7 = CALL $169($9)
	goto $label$9 
	
.LABEL $label$10
	$7 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$9
	*($5 + [12]) = $7
	*($5 + [8]) = $7
	*($5 + [16]) = ($7 + $9)
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $10
	*($5 + [48]) = $8
	*($5 + [52]) = $3
	*($5 + [56]) = $11
	*($5 + [40]) = $1
	CALL $95(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*(($1 + [40])), $2, $7, $9)
	if ( ($9 <= [513]) ){ goto $label$11 }
	CALL $173($7)
	
.LABEL $label$11
	if ( ((uint_64)*($0 + [16]) > (uint_64)$13) ){ goto $label$12 }
	*(($0 + [16])) = ((int_64)$13 + (int_64)1)
	
.LABEL $label$12
	$7 = *(($1 + [24]))
	$10 = ($9 & [1])
	$9 = *(($1 + [16]))
	$9 = ( *(($1 + [20])) ? uint_32($9 >> [1]) : $10 )
	if ( ($9 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [18269])
	goto $label$15 
	
.LABEL $label$16
	if ( ($9 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$11 = ( $7 ? $6 : $10 )
	$12 = (int_64)0
	
.LOOP $label$17:
	$10 = (($11 + $9) + [-1])
	$7 = *($10)
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [18314])
	$7 = *($10)
	
.LABEL $label$18
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$17 }
	$12 = ((int_64)$12 << (int_64)8)
	goto $label$13 
	
.LABEL $label$14
	$12 = (int_64)0
	
.LABEL $label$13
	*($5 + [40]) = ((int_64)$12 | (int_64)*($3))
	if ( (CALL $163(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$19 }
	$7 = ($1 + [44])
	$9 = *($7)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$20 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4060986526864314368, ($5 + [32]), $13)
	*($7) = $9
	
.LABEL $label$20
	CALL db_idx64_update($9, $2, ($5 + [40]))
	
.LABEL $label$19
	$global$0 = ($5 + [64])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $146($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $129(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $146($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $12 (int_32 $0)
{
	if ( ((*([0] + [8544]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8552]))
	
.LABEL $label$1
}

void .FUNC $13 (int_32 $0)
{
	if ( ((*([0] + [8556]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8564]))
	
.LABEL $label$1
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-4060986526864314368, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $92($6, $8)
	*($3 + [28]) = [0]
	*($3 + [24]) = $6
	$7 = ((int_64)*(*(CALL $94(($3 + [24])) + [4])) + (int_64)1)
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [18813])
	*($1) = *(($6 + [16]))
	$9 = ($1 + [4])
	CALL $131($9, *($5 + [4]))
	$8 = ($1 + [16])
	CALL $131($8, *($5 + [8]))
	*($1 + [28]) = *(*($5 + [12]))
	*($1 + [32]) = *(*($5 + [16]))
	$5 = *($1 + [4])
	$6 = ( *(($1 + [8])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [7])
	$7 = (CASTING uint_64)(uint_32 $6)
	$10 = ($1 + [32])
	$11 = ($1 + [28])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$6 = *(($1 + [16]))
	$6 = ( *(($1 + [20])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$5 = ($6 + $5)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $169($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $9
	*($3 + [24]) = $1
	*($3 + [32]) = $8
	*($3 + [36]) = $11
	*($3 + [40]) = $10
	CALL $95(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($4 + [8]), (int_64)-4060986526864314368, *(*($0 + [8])), $7, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL $173($6)
	
.LABEL $label$7
	if ( ((uint_64)*($4 + [16]) > (uint_64)$7) ){ goto $label$8 }
	*(($4 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$8
	$12 = *(($4 + [8]))
	$13 = *(*(($0 + [8])))
	$14 = *($1)
	$6 = *(($1 + [24]))
	$0 = ($5 & [1])
	$5 = *(($1 + [16]))
	$5 = ( *(($1 + [20])) ? uint_32($5 >> [1]) : $0 )
	if ( ($5 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [18269])
	goto $label$11 
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$4 = ( $6 ? ($8 + [1]) : $0 )
	$7 = (int_64)0
	
.LOOP $label$13:
	$0 = (($4 + $5) + [-1])
	$6 = *($0)
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [18314])
	$6 = *($0)
	
.LABEL $label$14
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$13 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$9 
	
.LABEL $label$10
	$7 = (int_64)0
	
.LABEL $label$9
	*($3 + [24]) = ((int_64)$7 | (int_64)*(($1 + [28])))
	*($1 + [44]) = CALL db_idx64_store($12, (int_64)-4060986526864314368, $13, $14, ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $146($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18753])
	CALL memcpy(($2 + [20]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18753])
	CALL memcpy(($3 + [21]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18753])
	CALL memcpy(($3 + [22]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy(($3 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [18753])
	CALL memcpy(($3 + [40]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18758])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $118($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [18753])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *($6 + [100])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4229865762275196928, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($7)
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *(($6 + [104]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4229865762275196929, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($7)
	
.LABEL $label$3
	$7 = *($0)
	$5 = *($7 + [4])
	$0 = *(($5 + [108]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($7)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865762275196930, ($4 + [8]), *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($0)
	
.LABEL $label$5
	$global$0 = ($4 + [16])
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18753])
	CALL memcpy(($3 + [16]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18753])
	CALL memcpy(($4 + [17]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18753])
	CALL memcpy(($4 + [18]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18753])
	CALL memcpy(($4 + [19]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($2 + [8]) = $4
	CALL $116(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $112 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [92]) == (int_32)$0), [18679])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4229865762275196928, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $51($0, $4)
	CALL eosio_assert(((int_32)*($5 + [92]) == (int_32)$0), [18679])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($1 + [4]), ($0 + [24]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $76(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[1]), [18753])
	CALL memcpy($3, *($4 + [4]), [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	CALL $76(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18753])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18753])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18753])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18753])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18753])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18753])
	CALL memcpy(($2 + [14]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [14]) != (int_32)[0])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18753])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $76(*($1), *($0 + [52]))
	$global$0 = ($2 + [16])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $146($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $41($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $42(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $146($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $119 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8544 align=4]) = (int_64)0
	*([0] + [8552]) = [0]
	$0 = CALL $164([17272])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$6 }
	*([0] + [8544]) = ($0 << [1])
	$1 = [8545]
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8544]) = ($2 | [1])
	*([0] + [8552]) = $1
	*([0] + [8548]) = $0
	
.LABEL $label$5
	CALL memcpy($1, [17272], $0)
	
.LABEL $label$4
	*(($1 + $0)) = [0]
	CALL $149([10], [0], [8192])
	*([0] + [8556 align=4]) = (int_64)0
	*([0] + [8564]) = [0]
	$0 = CALL $164([17395])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$9 }
	*([0] + [8556]) = ($0 << [1])
	$1 = [8557]
	if ( $0 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8556]) = ($2 | [1])
	*([0] + [8564]) = $1
	*([0] + [8560]) = $0
	
.LABEL $label$8
	CALL memcpy($1, [17395], $0)
	
.LABEL $label$7
	*(($1 + $0)) = [0]
	CALL $149([11], [0], [8192])
	*([0] + [8568 align=4]) = (int_64)0
	*([0] + [8576]) = [0]
	$0 = CALL $164([17516])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$12 }
	*([0] + [8568]) = ($0 << [1])
	$1 = [8569]
	if ( $0 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8568]) = ($2 | [1])
	*([0] + [8576]) = $1
	*([0] + [8572]) = $0
	
.LABEL $label$11
	CALL memcpy($1, [17516], $0)
	
.LABEL $label$10
	*(($1 + $0)) = [0]
	CALL $149([12], [0], [8192])
	return (unreachable)
	
.LABEL $label$3
	CALL $128([8544])
	
.LABEL $label$2
	CALL $128([8556])
	
.LABEL $label$1
	CALL $128([8568])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [128])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [18730])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $169($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [12]) = $7
	*($3 + [8]) = $7
	*($3 + [16]) = ($7 + $6)
	*(($9 = CALL _Znwj([128])) + [28]) = [0]
	*($9 + [20 align=4]) = (int_64)0
	*($9 + [44 align=4]) = (int_64)0
	*($9 + [52]) = [0]
	$5 = CALL _Znwj([100])
	*($9 + [44]) = $5
	*($9 + [48]) = $5
	*($9 + [52]) = ($5 + [100])
	$10 = ($9 + [44])
	$11 = ($9 + [20])
	$4 = [-100]
	$2 = ($9 + [48])
	
.LOOP $label$6:
	*($5) = [0]
	$5 = (*($2) + [1])
	*($2) = $5
	$4 = ($4 + [1])
	if ( $4 ){ goto $label$6 }
	*($9 + [108]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($9 + [8])
	*($3 + [32]) = $9
	*($3 + [40]) = ($9 + [16])
	*($3 + [44]) = $11
	*($3 + [48]) = ($9 + [32])
	*($3 + [52]) = ($9 + [36])
	*($3 + [56]) = ($9 + [40])
	*($3 + [60]) = ($9 + [42])
	*($3 + [64]) = $10
	*($3 + [68]) = ($9 + [56])
	*($3 + [72]) = ($9 + [64])
	*($3 + [76]) = ($9 + [72])
	*($3 + [80]) = ($9 + [80])
	*($3 + [84]) = ($9 + [88])
	*($3 + [88]) = ($9 + [96])
	*($3 + [92]) = ($9 + [97])
	*($3 + [96]) = ($9 + [98])
	*($3 + [100]) = ($9 + [99])
	*($3 + [104]) = ($9 + [100])
	*($3 + [112]) = ($9 + [102])
	*($3 + [108]) = ($9 + [101])
	*($3 + [116]) = ($9 + [103])
	*($3 + [120]) = ($9 + [104])
	CALL $98(($3 + [32]), ($3 + [24]))
	*($9 + [112]) = $1
	*($9 + [116 align=4]) = (int_64)-1
	*($3 + [24]) = $9
	$12 = *($9)
	*($3 + [32]) = $12
	*($3 + [4]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($5 + [8]) = $12
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $34($8, ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $173($7)
	
.LABEL $label$7
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	$4 = *($5 + [44])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($5 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($5 + [28])))
	
.LABEL $label$12
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$global$0 = ($3 + [128])
	return $9
}

void .FUNC $28 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [44]) = [0]
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-6147718988072747008, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $29(($2 + [8]), $5)
	CALL eosio_assert(((int_32)*($4 + [108]) == (int_32)($2 + [8])), [18679])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)[20]), [17714])
	$3 = *($0)
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [18967])
	CALL $30(($2 + [8]), $4, $3)
	$6 = *($2 + [32])
	if ( ($6 == 0) ){ goto $label$2 }
	$7 = (($2 + [8]) + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = *($4 + [44])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 + [48])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [28])))
	
.LABEL $label$8
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$5 }
	$4 = *(($2 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $6
	
.LABEL $label$3
	*($7) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18730])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $169($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [12]) = [0]
	*($5 + [4 align=4]) = (int_64)0
	*($5 + [52]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [4])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [17])
	*($3 + [48]) = ($5 + [18])
	*($3 + [52]) = ($5 + [19])
	*($3 + [56]) = ($5 + [20])
	*($3 + [60]) = ($5 + [21])
	*($3 + [64]) = ($5 + [22])
	*($3 + [68]) = ($5 + [23])
	*($3 + [72]) = ($5 + [24])
	*($3 + [76]) = ($5 + [25])
	*($3 + [80]) = ($5 + [32])
	*($3 + [84]) = ($5 + [40])
	*($3 + [88]) = ($5 + [48])
	CALL $89(($3 + [32]), ($3 + [24]))
	*($5 + [56]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $24(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $173($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_64 $12, int_64 $13, int_32 $14)
{
	int_32 $15
	$15 = ($global$0 - [176])
	$global$0 = $15
	*($15 + [137]) = $3
	*($15 + [138]) = $2
	*($15 + [136]) = $4
	*($15 + [135]) = $5
	*($15 + [134]) = $6
	*($15 + [133]) = $7
	*($15 + [132]) = $8
	*($15 + [131]) = $9
	*($15 + [130]) = $10
	*($15 + [129]) = $11
	*($15 + [120]) = $12
	*($15 + [112]) = $13
	*($15 + [108]) = $14
	CALL require_auth(*($0))
	*(($11 = ($15 + [96]))) = [0]
	*($15 + [80]) = (int_64)-1
	$13 = *($0)
	*($15 + [64]) = $13
	*($15 + [72]) = $13
	*($15 + [88]) = (int_64)0
	$14 = CALL db_lowerbound_i64($13, $13, (int_64)7235159541906337808, (int_64)0)
	if ( ((int_32)$14 <= (int_32)[-1]) ){ goto $label$9 }
	CALL $21(($15 + [64]), $14)
	$11 = *(($15 + [92]))
	$9 = *(($15 + [88]))
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$7 }
	
.LOOP $label$10:
	$14 = ($11 + [-24])
	$10 = *($14)
	if ( ((int_32)*($10) == (int_32)[1]) ){ goto $label$8 }
	$11 = $14
	if ( ((int_32)$9 != (int_32)$14) ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$9
	$12 = *($0)
	*($15 + [8]) = $1
	*($15 + [12]) = ($15 + [138])
	*($15 + [16]) = ($15 + [137])
	*($15 + [20]) = ($15 + [136])
	*($15 + [24]) = ($15 + [135])
	*($15 + [28]) = ($15 + [134])
	*($15 + [32]) = ($15 + [133])
	*($15 + [36]) = ($15 + [132])
	*($15 + [40]) = ($15 + [131])
	*($15 + [44]) = ($15 + [130])
	*($15 + [48]) = ($15 + [129])
	*($15 + [52]) = ($15 + [120])
	*($15 + [56]) = ($15 + [112])
	*($15 + [60]) = ($15 + [108])
	*($15 + [168]) = $12
	CALL eosio_assert(((int_64)$13 == (int_64)CALL $fimport$10()), [18762])
	*($15 + [148]) = ($15 + [8])
	*($15 + [144]) = ($15 + [64])
	*($15 + [152]) = ($15 + [168])
	*(($14 = CALL _Znwj([64])) + [12]) = [0]
	*($14 + [4 align=4]) = (int_64)0
	*($14 + [52]) = ($15 + [64])
	CALL $22(($15 + [144]), $14)
	*($15 + [160]) = $14
	$13 = *($14)
	*($15 + [144]) = $13
	$9 = *($14 + [56])
	*($15 + [140]) = $9
	$0 = ($15 + [92])
	$10 = *($0)
	if ( ((uint_32)$10 >= (uint_32)*($11)) ){ goto $label$5 }
	*($10 + [8]) = $13
	*($10 + [16]) = $9
	*($15 + [160]) = [0]
	*($10) = $14
	*($0) = ($10 + [24])
	$14 = *($15 + [160])
	*($15 + [160]) = [0]
	if ( ($14 == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$8
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($10 + [52]) == (int_32)($15 + [64])), [18679])
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	$14 = CALL db_find_i64(*($15 + [64]), *(($15 + [72])), (int_64)7235159541906337808, (int_64)1)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $21(($15 + [64]), $14)
	CALL eosio_assert(((int_32)*($10 + [52]) == (int_32)($15 + [64])), [18679])
	
.LABEL $label$6
	$13 = *($0)
	*($15 + [8]) = $1
	*($15 + [12]) = ($15 + [138])
	*($15 + [16]) = ($15 + [137])
	*($15 + [20]) = ($15 + [136])
	*($15 + [24]) = ($15 + [135])
	*($15 + [28]) = ($15 + [134])
	*($15 + [32]) = ($15 + [133])
	*($15 + [36]) = ($15 + [132])
	*($15 + [40]) = ($15 + [131])
	*($15 + [44]) = ($15 + [130])
	*($15 + [48]) = ($15 + [129])
	*($15 + [52]) = ($15 + [120])
	*($15 + [56]) = ($15 + [112])
	*($15 + [60]) = ($15 + [108])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [18967])
	CALL $23(($15 + [64]), $10, $13, ($15 + [8]))
	goto $label$4 
	
.LABEL $label$5
	CALL $24(($15 + [88]), ($15 + [160]), ($15 + [144]), ($15 + [140]))
	$14 = *($15 + [160])
	*($15 + [160]) = [0]
	if ( $14 ){ goto $label$3 }
	
.LABEL $label$4
	$10 = *($15 + [88])
	if ( ($10 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((*($14 + [4]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($14 + [12])))
	
.LABEL $label$11
	CALL _ZdlPv($14)
	$10 = *($15 + [88])
	if ( ($10 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$9 = ($15 + [92])
	$14 = *($9)
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$13 }
	
.LOOP $label$14:
	$14 = ($14 + [-24])
	$11 = *($14)
	*($14) = [0]
	if ( ($11 == 0) ){ goto $label$15 }
	if ( ((*($11 + [4]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($11 + [12])))
	
.LABEL $label$16
	CALL _ZdlPv($11)
	
.LABEL $label$15
	if ( ((int_32)$10 != (int_32)$14) ){ goto $label$14 }
	$14 = *(($15 + [88]))
	goto $label$12 
	
.LABEL $label$13
	$14 = $10
	
.LABEL $label$12
	*($9) = $10
	CALL _ZdlPv($14)
	
.LABEL $label$1
	$global$0 = ($15 + [176])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [96])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [19002])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [19048])
	$6 = *($1)
	$7 = ($1 + [4])
	CALL $131($7, *($3))
	*($1 + [16]) = *(*($3 + [4]))
	*($1 + [17]) = *(*($3 + [8]))
	*($1 + [18]) = *(*($3 + [12]))
	*($1 + [19]) = *(*($3 + [16]))
	*($1 + [20]) = *(*($3 + [20]))
	*($1 + [21]) = *(*($3 + [24]))
	*($1 + [22]) = *(*($3 + [28]))
	*($1 + [23]) = *(*($3 + [32]))
	*($1 + [24]) = *(*($3 + [36]))
	*($1 + [25]) = *(*($3 + [40]))
	*($1 + [32]) = *(*($3 + [44]))
	*($1 + [40]) = *(*($3 + [48]))
	*($1 + [48]) = *(*($3 + [52]))
	CALL eosio_assert(((int_32)$6 == (int_32)*($1)), [19099])
	$3 = *($1 + [4])
	$8 = ( *($1 + [8]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [31])
	$9 = (CASTING uint_64)(uint_32 $8)
	$10 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL $169($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	*($5 + [12]) = $6
	*($5 + [8]) = $6
	*($5 + [16]) = ($6 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $7
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [17])
	*($5 + [48]) = ($1 + [18])
	*($5 + [52]) = ($1 + [19])
	*($5 + [56]) = ($1 + [20])
	*($5 + [60]) = ($1 + [21])
	*($5 + [64]) = ($1 + [22])
	*($5 + [68]) = ($1 + [23])
	*($5 + [72]) = ($1 + [24])
	*($5 + [76]) = ($1 + [25])
	*($5 + [80]) = ($1 + [32])
	*($5 + [84]) = ($1 + [40])
	*($5 + [88]) = ($1 + [48])
	CALL $97(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [56]), $2, $6, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)$10) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $173($6)
	if ( ((uint_64)*($0 + [16]) > (uint_64)$10) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ((int_64)$10 + (int_64)1)
	$global$0 = ($5 + [96])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [96])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	*($1) = [1]
	$4 = *($0)
	$6 = *($0 + [4])
	$5 = ($1 + [4])
	CALL $131($5, *($6))
	*($1 + [16]) = *(*($6 + [4]))
	*($1 + [17]) = *(*($6 + [8]))
	*($1 + [18]) = *(*($6 + [12]))
	*($1 + [19]) = *(*($6 + [16]))
	*($1 + [20]) = *(*($6 + [20]))
	*($1 + [21]) = *(*($6 + [24]))
	*($1 + [22]) = *(*($6 + [28]))
	*($1 + [23]) = *(*($6 + [32]))
	*($1 + [24]) = *(*($6 + [36]))
	*($1 + [25]) = *(*($6 + [40]))
	*($1 + [32]) = *(*($6 + [44]))
	*($1 + [40]) = *(*($6 + [48]))
	*($1 + [48]) = *(*($6 + [52]))
	$6 = *($1 + [4])
	$7 = ( *($1 + [8]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [31])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$2 = CALL $169($6)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $5
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [17])
	*($3 + [48]) = ($1 + [18])
	*($3 + [52]) = ($1 + [19])
	*($3 + [56]) = ($1 + [20])
	*($3 + [60]) = ($1 + [21])
	*($3 + [64]) = ($1 + [22])
	*($3 + [68]) = ($1 + [23])
	*($3 + [72]) = ($1 + [24])
	*($3 + [76]) = ($1 + [25])
	*($3 + [80]) = ($1 + [32])
	*($3 + [84]) = ($1 + [40])
	*($3 + [88]) = ($1 + [48])
	CALL $97(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($4 + [8]), (int_64)7235159541906337808, *(*($0 + [8])), $8, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)$8) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $173($2)
	if ( ((uint_64)*($4 + [16]) > (uint_64)$8) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ((int_64)$8 + (int_64)1)
	$global$0 = ($3 + [96])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [96])
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$2 = *($0)
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	$3 = CALL $26(($1 + [8]), (int_64)1, [17630])
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($1 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((*($6 + [4]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($6 + [12])))
	
.LABEL $label$6
	CALL _ZdlPv($6)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($1 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($1 + [48])
	return $3
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $146($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	*($2 + [52]) = [0]
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	*($2 + [8]) = ($2 + [16])
	*($2) = *($1)
	CALL $16(($2 + [56]), ($2 + [8]), $2)
	CALL eosio_assert(((int_32)*($2 + [60]) != (int_32)[0]), [17681])
	$4 = *($2 + [60])
	$5 = *($2 + [40])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($2 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$6
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$4 }
	$1 = *(($2 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$1 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($2 + [64])
	return $4
}

int_32 .FUNC $26 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [52]) == (int_32)$0), [18679])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159541906337808, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $21($0, $4)
	CALL eosio_assert(((int_32)*($5 + [52]) == (int_32)$0), [18679])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $96(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [18673])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [18673])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [18673])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	CALL $102(*($1), *($0 + [32]))
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [18673])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [88])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $146($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_64 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($2 + [76]) = $1
	*(($2 + [64])) = [0]
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	$3 = *($0)
	*($2 + [32]) = $3
	*($2 + [40]) = $3
	$1 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)7235159541906337808, (int_64)1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $21(($2 + [32]), $4)
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)($2 + [32])), [18679])
	
.LABEL $label$1
	*($2 + [28]) = $1
	*($2 + [24]) = ($2 + [32])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [17630])
	$1 = *($2 + [28])
	$3 = *($0)
	*($2 + [4]) = ($2 + [16])
	*($2) = ($2 + [76])
	*($2 + [8]) = ($2 + [24])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18967])
	CALL $105(($2 + [32]), $1, $3, $2)
	$3 = *($2 + [16])
	$4 = *($2 + [56])
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ($2 + [60])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	if ( ((*($0 + [4]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($0 + [12])))
	
.LABEL $label$7
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$5 }
	$1 = *(($2 + [56]))
	goto $label$3 
	
.LABEL $label$4
	$1 = $4
	
.LABEL $label$3
	*($5) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$global$0 = ($2 + [80])
	return $3
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18673])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18673])
	CALL memcpy(*($7), $6, [1])
	$4 = (*($7) + [1])
	*($7) = $4
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [96])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [19002])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [19048])
	$6 = *($1)
	$7 = (CASTING uint_64)(uint_32 $6)
	$8 = *(*($3))
	if ( ((int_32)$8 == (int_32)[20]) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[10]) ){ goto $label$2 }
	$3 = *(*($3 + [8]) + [4])
	*(*($3 + [4])) = *($3 + [32])
	*($1 + [32]) = ((int_64)*($3 + [32]) + (int_64)1)
	$3 = $6
	goto $label$1 
	
.LABEL $label$3
	$3 = *(*($3 + [8]) + [4])
	*(*($3 + [4])) = *($3 + [40])
	*($1 + [40]) = ((int_64)*($3 + [40]) + (int_64)1)
	$3 = $6
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [19198])
	$3 = *($1)
	
.LABEL $label$1
	$9 = ((int_64)$7 & (int_64)255)
	CALL eosio_assert(((int_32)($6 & [255]) == (int_32)($3 & [255])), [19099])
	$3 = *($1 + [4])
	$6 = ( *($1 + [8]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [31])
	$7 = (CASTING uint_64)(uint_32 $6)
	$8 = ($1 + [4])
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$6 = CALL $169($3)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	*($5 + [12]) = $6
	*($5 + [8]) = $6
	*($5 + [16]) = ($6 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $8
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [17])
	*($5 + [48]) = ($1 + [18])
	*($5 + [52]) = ($1 + [19])
	*($5 + [56]) = ($1 + [20])
	*($5 + [60]) = ($1 + [21])
	*($5 + [64]) = ($1 + [22])
	*($5 + [68]) = ($1 + [23])
	*($5 + [72]) = ($1 + [24])
	*($5 + [76]) = ($1 + [25])
	*($5 + [80]) = ($1 + [32])
	*($5 + [84]) = ($1 + [40])
	*($5 + [88]) = ($1 + [48])
	CALL $97(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [56]), $2, $6, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)$9) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $173($6)
	if ( ((uint_64)*($0 + [16]) > (uint_64)$9) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ((int_64)$9 + (int_64)1)
	$global$0 = ($5 + [96])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [96])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $146($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $41(($6 + [28]), [16])
	$2 = *($6 + [28])
	$1 = (*(($6 + [32])) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [18673])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [18673])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($4 = ($2 + [-24]))) = (int_64)0
	*(($5 = ($2 + [-16]))) = [0]
	$3 = ($8 + [-24])
	*($4) = *($3)
	$4 = ($8 + [-16])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$5 = ($8 + [-12])
	*($4) = *($5)
	*($3) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($5) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [24])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [2])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$1 = ($1 + [26])
	*($2) = $1
	$3 = *($0)
	$0 = *($0 + [52])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $146($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $109 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [80]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [88])))
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [48])))
	if ( (*($1 + [24]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $96(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[1]), [18673])
	CALL memcpy(*($4 + [4]), $3, [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	CALL $96(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [18673])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [18673])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [18673])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [18673])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [14]) = *(*($0 + [44]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18673])
	CALL memcpy(*($4 + [4]), ($2 + [14]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18673])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $96(*($1), *($0 + [52]))
	$global$0 = ($2 + [16])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	*($1) = CALL $103(*($5), [10])
	$6 = *($5 + [4])
	*($1 + [8]) = *($6)
	*($1 + [16]) = *($6 + [8])
	$7 = *(*($5 + [8]))
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$4 }
	$8 = [0]
	$9 = *([0] + [19244])
	
.LOOP $label$6:
	*((($3 + [32]) + ($6 = $8))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$5 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$3 }
	*($3 + [16]) = ($8 << [1])
	$9 = (($3 + [16]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*((($3 + [16]) + [8])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [16]) = [0]
	$6 = (($3 + [16]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($3 + [16]) = ($10 | [1])
	*($3 + [24]) = $9
	*($3 + [20]) = $8
	
.LABEL $label$2
	$10 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$7:
	*(($9 + $6)) = *((($3 + [32]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$7 }
	$6 = ($9 + $8)
	
.LABEL $label$1
	*($6) = [0]
	$11 = ($1 + [24])
	if ( (*($1 + [24]) & [1]) ){ goto $label$9 }
	*($11) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*(($1 + [32]))) = [0]
	*(($1 + [28])) = [0]
	
.LABEL $label$8
	$8 = [0]
	CALL $133($11, [0])
	*(($11 + [8])) = *((($3 + [16]) + [8]))
	*($11) = *($3 + [16])
	$7 = *(*($5 + [16]) + [8])
	*($1 + [36]) = *(((*(*(($5 + [4])) + [44]) + *(*($5 + [12]))) + [-1]))
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( (int_64)($7) == 0) ){ goto $label$13 }
	
.LOOP $label$15:
	*((($3 + [16]) + ($6 = $8))) = $7
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[5]) ){ goto $label$14 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$15 }
	
.LABEL $label$14
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$12 }
	*($3 + [32]) = ($8 << [1])
	$9 = (($3 + [32]) | [1])
	goto $label$11 
	
.LABEL $label$13
	*((($3 + [32]) + [8])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [32]) = [0]
	$6 = (($3 + [32]) | [1])
	goto $label$10 
	
.LABEL $label$12
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($3 + [32]) = ($10 | [1])
	*($3 + [40]) = $9
	*($3 + [36]) = $8
	
.LABEL $label$11
	$10 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$16:
	*(($9 + $6)) = *((($3 + [16]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$16 }
	$6 = ($9 + $8)
	
.LABEL $label$10
	*($6) = [0]
	$6 = ($1 + [40])
	if ( (*($1 + [40]) & [1]) ){ goto $label$18 }
	*($6) = [0]
	goto $label$17 
	
.LABEL $label$18
	*(*(($1 + [48]))) = [0]
	*(($1 + [44])) = [0]
	
.LABEL $label$17
	$12 = ($1 + [36])
	CALL $133($6, [0])
	*(($6 + [8])) = *((($3 + [32]) + [8]))
	*($6) = *($3 + [32])
	*($1 + [72]) = CALL current_time()
	*($1 + [68]) = [0]
	$8 = ($1 + [80])
	CALL $1(($3 + [32]))
	if ( (*($1 + [80]) & [1]) ){ goto $label$20 }
	*($8) = [0]
	goto $label$19 
	
.LABEL $label$20
	*(*(($1 + [88]))) = [0]
	*(($1 + [84])) = [0]
	
.LABEL $label$19
	$13 = ($1 + [16])
	$14 = ($1 + [8])
	$15 = ($1 + [69])
	$16 = ($1 + [68])
	$17 = ($1 + [72])
	CALL $133($8, [0])
	*(($8 + [8])) = *((($3 + [32]) + [8]))
	*($8) = *($3 + [32])
	$9 = *($5 + [20])
	$10 = *($12)
	*($3 + [32]) = $10
	$5 = *($9 + [4])
	if ( ((uint_32)$5 >= (uint_32)*($9 + [8])) ){ goto $label$22 }
	*($5) = $10
	*(($9 = ($9 + [4]))) = (*($9) + [1])
	goto $label$21 
	
.LABEL $label$22
	CALL $106($9, ($3 + [32]))
	
.LABEL $label$21
	*($3 + [88]) = [0]
	*($3 + [16]) = ($3 + [88])
	*($3 + [36]) = $14
	*($3 + [40]) = $13
	*($3 + [44]) = $11
	*($3 + [48]) = $12
	*($3 + [52]) = $6
	*($3 + [72]) = $16
	*($3 + [76]) = $15
	*($3 + [80]) = $17
	*($3 + [84]) = $8
	*($3 + [32]) = $1
	$5 = ($1 + [52])
	*($3 + [56]) = $5
	$18 = ($1 + [56])
	*($3 + [60]) = $18
	$19 = ($1 + [60])
	*($3 + [64]) = $19
	$20 = ($1 + [64])
	*($3 + [68]) = $20
	CALL $107(($3 + [32]), ($3 + [16]))
	$10 = *($3 + [88])
	if ( ($10 <= [513]) ){ goto $label$24 }
	$9 = CALL $169($10)
	goto $label$23 
	
.LABEL $label$24
	$9 = ($2 - (($10 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$23
	*($3 + [20]) = $9
	*($3 + [16]) = $9
	*($3 + [24]) = ($9 + $10)
	*($3 + [88]) = ($3 + [16])
	*($3 + [36]) = $14
	*($3 + [32]) = $1
	*($3 + [40]) = $13
	*($3 + [44]) = $11
	*($3 + [48]) = $12
	*($3 + [52]) = $6
	*($3 + [56]) = $5
	*($3 + [60]) = $18
	*($3 + [64]) = $19
	*($3 + [68]) = $20
	*($3 + [72]) = $16
	*($3 + [76]) = $15
	*($3 + [80]) = $17
	*($3 + [84]) = $8
	CALL $108(($3 + [32]), ($3 + [88]))
	$7 = *($1)
	*($1 + [96]) = CALL db_store_i64(*($4 + [8]), (int_64)4229865762275196928, *(*($0 + [8])), $7, $9, $10)
	if ( ($10 <= [513]) ){ goto $label$25 }
	CALL $173($9)
	
.LABEL $label$25
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$26 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$26
	$6 = ($4 + [8])
	$7 = *($6)
	$8 = *(($0 + [8]))
	$21 = *($8)
	$22 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [100]) = CALL db_idx64_store($7, (int_64)4229865762275196928, $21, $22, ($3 + [32]))
	$7 = *($8)
	$21 = *($6)
	$22 = *($1)
	*($3 + [32]) = *(($1 + [16]))
	*(($1 + [104])) = CALL db_idx64_store($21, (int_64)4229865762275196929, $7, $22, ($3 + [32]))
	$7 = *($8)
	$21 = *($6)
	$22 = *($1)
	$6 = *(($1 + [24]))
	$8 = ($6 & [1])
	*($3 + [88]) = ( *(($1 + [32])) ? ($11 + [1]) : $8 )
	*($3 + [92]) = ( *(($1 + [28])) ? uint_32($6 >> [1]) : $8 )
	*($3 + [8]) = *($3 + [88])
	*($3 + [32]) = *(CALL $7(($3 + [32]), ($3 + [8])))
	*(($1 + [108])) = CALL db_idx64_store($21, (int_64)4229865762275196930, $7, $22, ($3 + [32]))
	$global$0 = ($3 + [96])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $146($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $109(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_64 $29
	int_64 $30
	$5 = ($global$0 - [544])
	$global$0 = $5
	*($5 + [456]) = [17896]
	*($5 + [460]) = CALL $164([17896])
	*($5 + [32]) = *($5 + [456])
	$6 = CALL $7(($5 + [208]), ($5 + [32]))
	$7 = *($1)
	if ( ((int_64)$7 == (int_64)*($6)) ){ goto $label$3 }
	if ( ((int_64)$7 == (int_64)*($0)) ){ goto $label$2 }
	CALL $35($0, $6, $2, $3)
	$6 = CALL $25($0)
	*($5 + [456]) = *($6)
	$8 = CALL $129((($5 + [456]) | [4]), ($6 + [4]))
	*((($5 + [456]) + [48])) = *(($6 + [48]))
	*((($5 + [456]) + [40])) = *(($6 + [40]))
	*((($5 + [456]) + [32])) = *(($6 + [32]))
	*((($5 + [456]) + [24])) = *(($6 + [24]))
	*($5 + [472]) = *($6 + [16])
	$9 = ($3 + [8])
	$6 = CALL $27($0, $9)
	*($5 + [416]) = *($6)
	$10 = CALL $129((($5 + [416]) | [4]), ($6 + [4]))
	$11 = CALL $129((($5 + [416]) + [16]), ($6 + [16]))
	*($5 + [444 align=4]) = *($6 + [28 align=4])
	CALL $9(($5 + [400]), $4, [124])
	CALL eosio_assert(((int_32)(*($5 + [404]) - *($5 + [400])) == (int_32)[24]), [17902])
	$12 = CALL $139(*($5 + [400]), [0], [10])
	$13 = CALL $139((*($5 + [400]) + [12]), [0], [10])
	*((($5 + [360]) + [32])) = [0]
	*(($5 + [398])) = [0]
	*($5 + [376]) = (int_64)-1
	*($5 + [384]) = (int_64)0
	*($5 + [396]) = [0]
	$7 = *($0)
	*($5 + [360]) = $7
	*($5 + [368]) = $7
	*((($5 + [320]) + [32])) = [0]
	*($5 + [328]) = $7
	*($5 + [320]) = $7
	*($5 + [336]) = (int_64)-1
	*($5 + [344]) = (int_64)0
	*($5 + [356]) = [0]
	$6 = CALL db_lowerbound_i64($7, $7, (int_64)-6147718988072747008, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$14 = CALL $29(($5 + [320]), $6)
	$6 = *($14 + [20])
	if ( (($6 & [1]) == 0) ){ goto $label$5 }
	$15 = [8]
	goto $label$1 
	
.LABEL $label$5
	$15 = [10]
	goto $label$1 
	
.LABEL $label$4
	$15 = [11]
	goto $label$1 
	
.LABEL $label$3
	$15 = [61]
	goto $label$1 
	
.LABEL $label$2
	$15 = [61]
	
.LABEL $label$1
	
.LOOP $label$6:
	goto $label$180 
	
.LABEL $label$192
	$16 = *(($14 + [28]))
	$6 = *(($14 + [24]))
	if ( ($6 <= [8]) ){ goto $label$81 }
	$15 = [9]
	goto $label$6 
	
.LABEL $label$191
	CALL eosio_assert([0], [18269])
	$15 = [1]
	goto $label$6 
	
.LABEL $label$190
	$7 = (int_64)0
	$15 = [2]
	goto $label$6 
	
.LABEL $label$189
	$4 = (($16 + $6) + [-1])
	$2 = *($4)
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$76 }
	$15 = [108]
	goto $label$6 
	
.LABEL $label$188
	CALL eosio_assert([0], [18314])
	$2 = *($4)
	$15 = [3]
	goto $label$6 
	
.LABEL $label$187
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$77 }
	$15 = [4]
	goto $label$6 
	
.LABEL $label$186
	$7 = ((int_64)$7 << (int_64)8)
	$15 = [5]
	goto $label$6 
	
.LABEL $label$185
	if ( ((int_64)((int_64)$7 | (int_64)*($14 + [32])) != (int_64)*($9)) ){ goto $label$75 }
	$15 = [106]
	goto $label$6 
	
.LABEL $label$184
	if ( ((int_32)*($14 + [16]) == (int_32)[10]) ){ goto $label$74 }
	$15 = [6]
	goto $label$6 
	
.LABEL $label$183
	CALL eosio_assert([1], [19158])
	$6 = CALL db_next_i64(*($14 + [112]), ($5 + [208]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$73 }
	$15 = [7]
	goto $label$6 
	
.LABEL $label$182
	$14 = CALL $29(($5 + [320]), $6)
	$6 = *($14 + [20])
	if ( ($6 & [1]) ){ goto $label$82 }
	$15 = [10]
	goto $label$6 
	
.LABEL $label$181
	$16 = (($14 + [20]) + [1])
	$6 = uint_32($6 >> [1])
	if ( ((uint_32)$6 >= (uint_32)[8]) ){ goto $label$78 }
	$15 = [0]
	goto $label$6 
	
.LABEL $label$180
	if ( $6 ){ goto $label$79 }
	$15 = [109]
	goto $label$6 
	
.LABEL $label$179
	$7 = (int_64)0
	goto $label$80 
	
.LABEL $label$178
	$14 = [0]
	$17 = [0]
	goto $label$72 
	
.LABEL $label$177
	$17 = [1]
	$15 = [12]
	goto $label$6 
	
.LABEL $label$176
	CALL eosio_assert($17, [17935])
	*((($5 + [208]) + [16])) = *(($14 + [16]))
	*((($5 + [208]) + [8])) = *(($14 + [8]))
	*($5 + [208]) = *($14)
	$18 = CALL $129((($5 + [208]) + [20]), ($14 + [20]))
	$6 = *(($14 + [40]))
	$7 = *($14 + [32])
	*((($5 + [208]) + [48])) = (int_64)0
	*((($5 + [208]) + [40])) = $6
	*($5 + [252]) = [0]
	*($5 + [240]) = $7
	$4 = ($5 + [252])
	$6 = (*(($14 + [48])) - *($14 + [44]))
	if ( ($6 == 0) ){ goto $label$71 }
	$15 = [13]
	goto $label$6 
	
.LABEL $label$175
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$70 }
	$15 = [14]
	goto $label$6 
	
.LABEL $label$174
	$2 = CALL _Znwj($6)
	*((($5 + [208]) + [44])) = $2
	*(($5 + [260])) = ($2 + $6)
	*(($6 = (($5 + [208]) + [48]))) = $2
	$19 = *(($14 + [44]))
	$16 = (*(($14 + [48])) - $19)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$69 }
	$15 = [104]
	goto $label$6 
	
.LABEL $label$173
	CALL memcpy($2, $19, $16)
	*($6) = (*($6) + $16)
	$15 = [15]
	goto $label$6 
	
.LABEL $label$172
	*((($5 + [208]) + [104])) = *(($14 + [104]))
	*((($5 + [208]) + [96])) = *(($14 + [96]))
	*((($5 + [208]) + [88])) = *(($14 + [88]))
	*((($5 + [208]) + [80])) = *(($14 + [80]))
	*((($5 + [208]) + [72])) = *(($14 + [72]))
	*((($5 + [208]) + [64])) = *(($14 + [64]))
	*($5 + [264]) = *($14 + [56])
	$6 = *($5 + [250])
	*($5 + [204]) = ( $12 ? $6 : ((int_32)$12 < (int_32)$6) )
	CALL eosio_assert(((int_64)((int_64)*($3) / (int_64)*($5 + [244])) == (int_64)(CASTING int_64)(int_32 $12)), [17962])
	CALL eosio_assert(((int_64)*($3) >= (int_64)(CASTING uint_64)(uint_32 ((int_32)*($5 + [244]) * (int_32)*($5 + [204])))), [17980])
	$6 = *($5 + [204])
	*($5 + [200]) = ((int_32)*($5 + [244]) * (int_32)$6)
	CALL $37(($5 + [184]), (CASTING int_64)(int_32 $13), $6, (*((($5 + [208]) + [48])) - *($4)), [1])
	$6 = [0]
	*($5 + [176]) = [0]
	*($5 + [168]) = (int_64)0
	$19 = *($5 + [188])
	$2 = *($5 + [184])
	if ( ((int_32)$2 == (int_32)$19) ){ goto $label$68 }
	$15 = [16]
	goto $label$6 
	
.LABEL $label$171
	$20 = (($5 + [360]) + [24])
	$21 = ($5 + [72])
	$22 = ($5 + [68])
	$23 = ($5 + [76])
	$24 = (($5 + [360]) + [32])
	$16 = ($5 + [388])
	goto $label$67 
	
.LABEL $label$170
	CALL _ZdlPv(*(($6 + [88])))
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$58 }
	$15 = [21]
	goto $label$6 
	
.LABEL $label$169
	CALL _ZdlPv(*(($6 + [48])))
	if ( (*($6 + [24]) & [1]) ){ goto $label$55 }
	goto $label$56 
	
.LABEL $label$168
	*($5 + [512]) = *($2)
	$7 = *($0)
	*((($5 + [56]) + [8])) = $1
	*($21) = $3
	*($5 + [56]) = $0
	*($22) = ($5 + [512])
	*($23) = ($5 + [168])
	*($5 + [60]) = ($5 + [208])
	*($5 + [528]) = $7
	CALL eosio_assert(((int_64)*($5 + [360]) == (int_64)CALL $fimport$10()), [18762])
	*((($5 + [120]) + [8])) = ($5 + [528])
	*($5 + [124]) = ($5 + [56])
	*($5 + [120]) = ($5 + [360])
	*(($6 = CALL _Znwj([112])) + [32]) = [0]
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [40 align=4]) = (int_64)0
	*($6 + [48]) = [0]
	*($6 + [80 align=4]) = (int_64)0
	*($6 + [88]) = [0]
	*($6 + [92]) = ($5 + [360])
	CALL $38(($5 + [120]), $6)
	*($5 + [40]) = $6
	$7 = *($6)
	*($5 + [120]) = $7
	$13 = *($6 + [96])
	*($5 + [520]) = $13
	$4 = *($16)
	if ( ((uint_32)$4 >= (uint_32)*($24)) ){ goto $label$63 }
	$15 = [102]
	goto $label$6 
	
.LABEL $label$167
	*($4 + [8]) = $7
	*($4 + [16]) = $13
	*($5 + [40]) = [0]
	*($4) = $6
	*($16) = ($4 + [24])
	$6 = *($5 + [40])
	*($5 + [40]) = [0]
	if ( ($6 == 0) ){ goto $label$61 }
	$15 = [19]
	goto $label$6 
	
.LABEL $label$166
	if ( (*($6 + [80]) & [1]) ){ goto $label$60 }
	$15 = [100]
	goto $label$6 
	
.LABEL $label$165
	if ( (*($6 + [40]) & [1]) ){ goto $label$59 }
	$15 = [99]
	goto $label$6 
	
.LABEL $label$164
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$57 }
	$15 = [22]
	goto $label$6 
	
.LABEL $label$163
	CALL _ZdlPv(*(($6 + [32])))
	$15 = [23]
	goto $label$6 
	
.LABEL $label$162
	CALL _ZdlPv($6)
	$2 = ($2 + [1])
	if ( ((int_32)$19 != (int_32)$2) ){ goto $label$64 }
	goto $label$65 
	
.LABEL $label$161
	CALL $39($20, ($5 + [40]), ($5 + [120]), ($5 + [520]))
	$6 = *($5 + [40])
	*($5 + [40]) = [0]
	if ( $6 ){ goto $label$62 }
	$15 = [101]
	goto $label$6 
	
.LABEL $label$160
	$2 = ($2 + [1])
	if ( ((int_32)$19 != (int_32)$2) ){ goto $label$66 }
	$15 = [24]
	goto $label$6 
	
.LABEL $label$159
	$6 = *($5 + [168])
	$2 = *($5 + [172])
	goto $label$54 
	
.LABEL $label$158
	$2 = [0]
	$15 = [25]
	goto $label$6 
	
.LABEL $label$157
	CALL eosio_assert(((int_32)($2 - $6) == (int_32)*($5 + [204])), [17999])
	*($5 + [167]) = [0]
	$7 = *($0)
	*($5 + [60]) = ($5 + [167])
	*($5 + [56]) = ($5 + [204])
	*($5 + [64]) = ($5 + [168])
	*($5 + [68]) = ($5 + [200])
	CALL eosio_assert($17, [18967])
	CALL $40(($5 + [320]), $14, $7, ($5 + [56]))
	if ( (*($5 + [167]) == 0) ){ goto $label$53 }
	$15 = [26]
	goto $label$6 
	
.LABEL $label$156
	$7 = *($14 + [8])
	CALL current_time()
	CALL $32($0, ((int_64)$7 + (int_64)1), $9, $7)
	$15 = [27]
	goto $label$6 
	
.LABEL $label$155
	if ( ((int_32)*($5 + [204]) >= (int_32)$12) ){ goto $label$52 }
	$15 = [69]
	goto $label$6 
	
.LABEL $label$154
	$25 = *($0)
	*($5 + [120]) = [18048]
	*($5 + [124]) = CALL $164([18048])
	*($5 + [24]) = *($5 + [120])
	$26 = *(CALL $7(($5 + [56]), ($5 + [24])))
	$6 = *($10)
	$2 = ($6 & [1])
	*($5 + [104]) = ( *(($5 + [428])) ? ($10 + [1]) : $2 )
	*($5 + [108]) = ( *(($5 + [424])) ? uint_32($6 >> [1]) : $2 )
	*($5 + [16]) = *($5 + [104])
	$16 = CALL $7(($5 + [112]), ($5 + [16]))
	*($5 + [120]) = [18055]
	*($5 + [124]) = CALL $164([18055])
	*($5 + [8]) = *($5 + [120])
	$27 = *(CALL $7(($5 + [56]), ($5 + [8])))
	$28 = *($3 + [8])
	$29 = (int_64)
	CALL eosio_assert((uint_64)(((int_64)$29(*($3) - *($5 + [200]))) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18367])
	$7 = (uint_64)$28 >> (uint_64)(int_64)8)
	$6 = [0]
	$15 = [70]
	goto $label$6 
	
.LABEL $label$153
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$15 = [93]
	goto $label$6 
	
.LABEL $label$152
	$30 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$15 = [94]
	goto $label$6 
	
.LABEL $label$151
	$7 = $30
	$2 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$150
	$7 = $30
	$15 = [96]
	goto $label$6 
	
.LABEL $label$149
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$15 = [97]
	goto $label$6 
	
.LABEL $label$148
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$2 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $2 ){ goto $label$7 }
	$15 = [98]
	goto $label$6 
	
.LABEL $label$147
	$2 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$146
	$2 = [0]
	$15 = [72]
	goto $label$6 
	
.LABEL $label$145
	CALL eosio_assert($2, [18416])
	*(($5 + [48])) = [0]
	*($5 + [40]) = (int_64)0
	$6 = CALL $164([18064])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$19 }
	$15 = [73]
	goto $label$6 
	
.LABEL $label$144
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$18 }
	$15 = [91]
	goto $label$6 
	
.LABEL $label$143
	*($5 + [40]) = ($6 << [1])
	$2 = (($5 + [40]) | [1])
	if ( $6 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$142
	$4 = (($6 + [16]) & [-16])
	$2 = CALL _Znwj($4)
	*($5 + [40]) = ($4 | [1])
	*($5 + [48]) = $2
	*($5 + [44]) = $6
	$15 = [75]
	goto $label$6 
	
.LABEL $label$141
	CALL memcpy($2, [18064], $6)
	$15 = [76]
	goto $label$6 
	
.LABEL $label$140
	*(($2 + $6)) = [0]
	*((($5 + [56]) + [24])) = $28
	*(($2 = (($5 + [120]) + [24]))) = [0]
	$6 = ($5 + [48])
	*(($5 + [96])) = *($6)
	*($6) = [0]
	*($5 + [72]) = $29
	*($5 + [128]) = $27
	*($5 + [136]) = (int_64)0
	*($5 + [56]) = *($0)
	*($5 + [64]) = *($1)
	*($5 + [88]) = *($5 + [40])
	*($5 + [40]) = (int_64)0
	*($5 + [120]) = *($16)
	*(($6 = CALL _Znwj([16]))) = $25
	*($6 + [8]) = $26
	*((($5 + [120]) + [36])) = [0]
	$4 = ($6 + [16])
	*($2) = $4
	*(($5 + [140])) = $4
	*($5 + [136]) = $6
	*($5 + [148 align=4]) = (int_64)0
	$6 = *($5 + [88])
	$2 = ( *((($5 + [56]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($2 + [32])
	$7 = (CASTING uint_64)(uint_32 $2)
	$2 = ($5 + [148])
	$15 = [77]
	goto $label$6 
	
.LABEL $label$139
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$15 }
	$15 = [78]
	goto $label$6 
	
.LABEL $label$138
	if ( ($6 == 0) ){ goto $label$14 }
	$15 = [79]
	goto $label$6 
	
.LABEL $label$137
	CALL $41($2, $6)
	$2 = *(($5 + [152]))
	$6 = *(($5 + [148]))
	goto $label$13 
	
.LABEL $label$136
	$2 = [0]
	$6 = [0]
	$15 = [80]
	goto $label$6 
	
.LABEL $label$135
	*($5 + [532]) = $6
	*($5 + [528]) = $6
	*($5 + [536]) = $2
	*($5 + [512]) = ($5 + [528])
	*($5 + [520]) = ($5 + [56])
	CALL $42(($5 + [520]), ($5 + [512]))
	CALL $43(($5 + [528]), ($5 + [120]))
	$6 = *($5 + [528])
	CALL send_inline($6, (*($5 + [532]) - $6))
	$6 = *($5 + [528])
	if ( ($6 == 0) ){ goto $label$12 }
	$15 = [81]
	goto $label$6 
	
.LABEL $label$134
	*($5 + [532]) = $6
	CALL _ZdlPv($6)
	$15 = [82]
	goto $label$6 
	
.LABEL $label$133
	$6 = *($5 + [148])
	if ( ($6 == 0) ){ goto $label$11 }
	$15 = [83]
	goto $label$6 
	
.LABEL $label$132
	*(($5 + [152])) = $6
	CALL _ZdlPv($6)
	$15 = [84]
	goto $label$6 
	
.LABEL $label$131
	$6 = *($5 + [136])
	if ( ($6 == 0) ){ goto $label$10 }
	$15 = [85]
	goto $label$6 
	
.LABEL $label$130
	*(($5 + [140])) = $6
	CALL _ZdlPv($6)
	$15 = [86]
	goto $label$6 
	
.LABEL $label$129
	if ( ((*(($5 + [88])) & [1]) == 0) ){ goto $label$9 }
	$15 = [87]
	goto $label$6 
	
.LABEL $label$128
	CALL _ZdlPv(*(($5 + [96])))
	$15 = [88]
	goto $label$6 
	
.LABEL $label$127
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$51 }
	$15 = [89]
	goto $label$6 
	
.LABEL $label$126
	CALL _ZdlPv(*(($5 + [48])))
	$15 = [28]
	goto $label$6 
	
.LABEL $label$125
	$7 = *($0 + [8])
	*($5 + [120]) = [8399]
	*($5 + [124]) = CALL $164([8399])
	*($5) = *($5 + [120])
	if ( ((int_64)$7 != (int_64)*(CALL $7(($5 + [56]), $5))) ){ goto $label$50 }
	$15 = [66]
	goto $label$6 
	
.LABEL $label$124
	$6 = *($11)
	$2 = CALL $164([8385])
	if ( ((int_32)$2 != (int_32)( *(($5 + [436])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$49 }
	$15 = [67]
	goto $label$6 
	
.LABEL $label$123
	if ( CALL $138($11, [0], [-1], [8385], $2) ){ goto $label$48 }
	$15 = [68]
	goto $label$6 
	
.LABEL $label$122
	CALL $44($0, $1, *($5 + [200]))
	$15 = [29]
	goto $label$6 
	
.LABEL $label$121
	$6 = *($5 + [168])
	if ( ($6 == 0) ){ goto $label$47 }
	$15 = [30]
	goto $label$6 
	
.LABEL $label$120
	*($5 + [172]) = $6
	CALL _ZdlPv($6)
	$15 = [31]
	goto $label$6 
	
.LABEL $label$119
	$6 = *($5 + [184])
	if ( ($6 == 0) ){ goto $label$46 }
	$15 = [32]
	goto $label$6 
	
.LABEL $label$118
	*($5 + [188]) = $6
	CALL _ZdlPv($6)
	$15 = [33]
	goto $label$6 
	
.LABEL $label$117
	$6 = *($5 + [252])
	if ( ($6 == 0) ){ goto $label$45 }
	$15 = [34]
	goto $label$6 
	
.LABEL $label$116
	*(($5 + [256])) = $6
	CALL _ZdlPv($6)
	$15 = [35]
	goto $label$6 
	
.LABEL $label$115
	if ( ((*($18) & [1]) == 0) ){ goto $label$44 }
	$15 = [36]
	goto $label$6 
	
.LABEL $label$114
	CALL _ZdlPv(*(($5 + [236])))
	$15 = [37]
	goto $label$6 
	
.LABEL $label$113
	$16 = *($5 + [344])
	if ( ($16 == 0) ){ goto $label$43 }
	$15 = [38]
	goto $label$6 
	
.LABEL $label$112
	$14 = (($5 + [320]) + [28])
	$2 = *($14)
	if ( ((int_32)$2 == (int_32)$16) ){ goto $label$42 }
	$15 = [39]
	goto $label$6 
	
.LABEL $label$111
	$15 = [40]
	goto $label$6 
	
.LABEL $label$110
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$40 }
	$15 = [41]
	goto $label$6 
	
.LABEL $label$109
	$4 = *($6 + [44])
	if ( ($4 == 0) ){ goto $label$39 }
	$15 = [42]
	goto $label$6 
	
.LABEL $label$108
	*(($6 + [48])) = $4
	CALL _ZdlPv($4)
	$15 = [43]
	goto $label$6 
	
.LABEL $label$107
	if ( ((*($6 + [20]) & [1]) == 0) ){ goto $label$38 }
	$15 = [44]
	goto $label$6 
	
.LABEL $label$106
	CALL _ZdlPv(*(($6 + [28])))
	$15 = [45]
	goto $label$6 
	
.LABEL $label$105
	CALL _ZdlPv($6)
	$15 = [46]
	goto $label$6 
	
.LABEL $label$104
	if ( ((int_32)$16 != (int_32)$2) ){ goto $label$41 }
	$15 = [47]
	goto $label$6 
	
.LABEL $label$103
	$6 = *(($5 + [344]))
	goto $label$37 
	
.LABEL $label$102
	$6 = $16
	$15 = [48]
	goto $label$6 
	
.LABEL $label$101
	*($14) = $16
	CALL _ZdlPv($6)
	$15 = [49]
	goto $label$6 
	
.LABEL $label$100
	CALL $45(($5 + [384]))
	$4 = *($5 + [400])
	if ( ($4 == 0) ){ goto $label$36 }
	$15 = [50]
	goto $label$6 
	
.LABEL $label$99
	$2 = *($5 + [404])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$35 }
	$15 = [51]
	goto $label$6 
	
.LABEL $label$98
	$15 = [52]
	goto $label$6 
	
.LABEL $label$97
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$33 }
	$15 = [53]
	goto $label$6 
	
.LABEL $label$96
	CALL _ZdlPv(*(($2 + [-4])))
	$15 = [54]
	goto $label$6 
	
.LABEL $label$95
	$2 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$34 }
	$15 = [55]
	goto $label$6 
	
.LABEL $label$94
	$6 = *($5 + [400])
	goto $label$32 
	
.LABEL $label$93
	$6 = $4
	$15 = [56]
	goto $label$6 
	
.LABEL $label$92
	*($5 + [404]) = $4
	CALL _ZdlPv($6)
	$15 = [57]
	goto $label$6 
	
.LABEL $label$91
	if ( (*($11) & [1]) ){ goto $label$31 }
	$15 = [63]
	goto $label$6 
	
.LABEL $label$90
	if ( (*($10) & [1]) ){ goto $label$30 }
	$15 = [62]
	goto $label$6 
	
.LABEL $label$89
	if ( ((*($8) & [1]) == 0) ){ goto $label$28 }
	$15 = [60]
	goto $label$6 
	
.LABEL $label$88
	CALL _ZdlPv(*(($5 + [468])))
	$15 = [61]
	goto $label$6 
	
.LABEL $label$87
	$global$0 = ($5 + [544])
	return (unreachable)
	
.LABEL $label$86
	CALL _ZdlPv(*(($5 + [440])))
	if ( ((*($10) & [1]) == 0) ){ goto $label$29 }
	$15 = [59]
	goto $label$6 
	
.LABEL $label$85
	CALL _ZdlPv(*(($5 + [428])))
	if ( (*($8) & [1]) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$84
	CALL $146($4)
	
.LABEL $label$83
	CALL $128(($5 + [40]))
	
.LABEL $label$82
	$15 = [8]
	goto $label$6 
	
.LABEL $label$81
	$15 = [0]
	goto $label$6 
	
.LABEL $label$80
	$15 = [5]
	goto $label$6 
	
.LABEL $label$79
	$15 = [1]
	goto $label$6 
	
.LABEL $label$78
	$15 = [9]
	goto $label$6 
	
.LABEL $label$77
	$15 = [2]
	goto $label$6 
	
.LABEL $label$76
	$15 = [3]
	goto $label$6 
	
.LABEL $label$75
	$15 = [6]
	goto $label$6 
	
.LABEL $label$74
	$15 = [107]
	goto $label$6 
	
.LABEL $label$73
	$15 = [11]
	goto $label$6 
	
.LABEL $label$72
	$15 = [12]
	goto $label$6 
	
.LABEL $label$71
	$15 = [15]
	goto $label$6 
	
.LABEL $label$70
	$15 = [105]
	goto $label$6 
	
.LABEL $label$69
	$15 = [15]
	goto $label$6 
	
.LABEL $label$68
	$15 = [103]
	goto $label$6 
	
.LABEL $label$67
	$15 = [17]
	goto $label$6 
	
.LABEL $label$66
	$15 = [17]
	goto $label$6 
	
.LABEL $label$65
	$15 = [24]
	goto $label$6 
	
.LABEL $label$64
	$15 = [17]
	goto $label$6 
	
.LABEL $label$63
	$15 = [18]
	goto $label$6 
	
.LABEL $label$62
	$15 = [19]
	goto $label$6 
	
.LABEL $label$61
	$15 = [101]
	goto $label$6 
	
.LABEL $label$60
	$15 = [20]
	goto $label$6 
	
.LABEL $label$59
	$15 = [21]
	goto $label$6 
	
.LABEL $label$58
	$15 = [99]
	goto $label$6 
	
.LABEL $label$57
	$15 = [23]
	goto $label$6 
	
.LABEL $label$56
	$15 = [23]
	goto $label$6 
	
.LABEL $label$55
	$15 = [22]
	goto $label$6 
	
.LABEL $label$54
	$15 = [25]
	goto $label$6 
	
.LABEL $label$53
	$15 = [27]
	goto $label$6 
	
.LABEL $label$52
	$15 = [28]
	goto $label$6 
	
.LABEL $label$51
	$15 = [28]
	goto $label$6 
	
.LABEL $label$50
	$15 = [29]
	goto $label$6 
	
.LABEL $label$49
	$15 = [29]
	goto $label$6 
	
.LABEL $label$48
	$15 = [29]
	goto $label$6 
	
.LABEL $label$47
	$15 = [31]
	goto $label$6 
	
.LABEL $label$46
	$15 = [33]
	goto $label$6 
	
.LABEL $label$45
	$15 = [35]
	goto $label$6 
	
.LABEL $label$44
	$15 = [37]
	goto $label$6 
	
.LABEL $label$43
	$15 = [49]
	goto $label$6 
	
.LABEL $label$42
	$15 = [65]
	goto $label$6 
	
.LABEL $label$41
	$15 = [40]
	goto $label$6 
	
.LABEL $label$40
	$15 = [46]
	goto $label$6 
	
.LABEL $label$39
	$15 = [43]
	goto $label$6 
	
.LABEL $label$38
	$15 = [45]
	goto $label$6 
	
.LABEL $label$37
	$15 = [48]
	goto $label$6 
	
.LABEL $label$36
	$15 = [57]
	goto $label$6 
	
.LABEL $label$35
	$15 = [64]
	goto $label$6 
	
.LABEL $label$34
	$15 = [52]
	goto $label$6 
	
.LABEL $label$33
	$15 = [54]
	goto $label$6 
	
.LABEL $label$32
	$15 = [56]
	goto $label$6 
	
.LABEL $label$31
	$15 = [58]
	goto $label$6 
	
.LABEL $label$30
	$15 = [59]
	goto $label$6 
	
.LABEL $label$29
	$15 = [62]
	goto $label$6 
	
.LABEL $label$28
	$15 = [61]
	goto $label$6 
	
.LABEL $label$27
	$15 = [61]
	goto $label$6 
	
.LABEL $label$26
	$15 = [60]
	goto $label$6 
	
.LABEL $label$25
	$15 = [70]
	goto $label$6 
	
.LABEL $label$24
	$15 = [72]
	goto $label$6 
	
.LABEL $label$23
	$15 = [70]
	goto $label$6 
	
.LABEL $label$22
	$15 = [72]
	goto $label$6 
	
.LABEL $label$21
	$15 = [71]
	goto $label$6 
	
.LABEL $label$20
	$15 = [71]
	goto $label$6 
	
.LABEL $label$19
	$15 = [92]
	goto $label$6 
	
.LABEL $label$18
	$15 = [74]
	goto $label$6 
	
.LABEL $label$17
	$15 = [76]
	goto $label$6 
	
.LABEL $label$16
	$15 = [75]
	goto $label$6 
	
.LABEL $label$15
	$15 = [77]
	goto $label$6 
	
.LABEL $label$14
	$15 = [90]
	goto $label$6 
	
.LABEL $label$13
	$15 = [80]
	goto $label$6 
	
.LABEL $label$12
	$15 = [82]
	goto $label$6 
	
.LABEL $label$11
	$15 = [84]
	goto $label$6 
	
.LABEL $label$10
	$15 = [86]
	goto $label$6 
	
.LABEL $label$9
	$15 = [88]
	goto $label$6 
	
.LABEL $label$8
	$15 = [95]
	goto $label$6 
	
.LABEL $label$7
	$15 = [96]
	goto $label$6 
	$15
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$5 = ($global$0 - [48])
	$global$0 = $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$6 = CALL current_time()
	*(($5 + [40])) = [0]
	*($5 + [16]) = (int_64)6138663577826885632
	*($5 + [8]) = (int_64)6138663577826885632
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$7 = CALL $4(($5 + [8]), (int_64)4995142087184830980, [8366])
	$8 = *($7 + [40])
	$9 = *($7 + [16])
	$10 = *($5 + [32])
	if ( ($10 == 0) ){ goto $label$5 }
	$11 = ($5 + [36])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$4 }
	
.LOOP $label$6:
	$7 = ($7 + [-24])
	$12 = *($7)
	*($7) = [0]
	if ( ($12 == 0) ){ goto $label$7 }
	CALL _ZdlPv($12)
	
.LABEL $label$7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$6 }
	$7 = *(($5 + [32]))
	goto $label$3 
	
.LABEL $label$5
	if ( (([0] - [0]) <= $2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $10
	
.LABEL $label$3
	*($11) = $10
	CALL _ZdlPv($7)
	if ( ((uint_32)(*(($0 + [4])) - *($0)) >= (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	$11 = (CASTING uint_32)(uint_64 $6)
	$13 = (CASTING uint_32)(uint_64 ((int_64)((int_64)$9 + (int_64)$1) + (int_64)$8))
	if ( ($3 == 0) ){ goto $label$8 }
	$14 = ($0 + [4])
	$15 = ($0 + [8])
	
.LOOP $label$9:
	$7 = ($11 + $13)
	if ( ($11 & [1]) ){ goto $label$15 }
	$16 = CALL $6($7)
	$10 = (((int_32)$16 % (int_32)$3) + [1])
	*($5 + [8]) = $10
	if ( $4 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$16 = CALL $8($7)
	$10 = (((int_32)$16 % (int_32)$3) + [1])
	*($5 + [8]) = $10
	if ( ($4 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$12 = *($14)
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$17 }
	
.LOOP $label$18:
	if ( ((int_32)*($7) == (int_32)($10 & [255])) ){ goto $label$17 }
	$7 = ($7 + [1])
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$7 != (int_32)$12) ){ goto $label$10 }
	
.LABEL $label$16
	if ( ((int_32)$12 == (int_32)*($15)) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$12 = *($14)
	if ( ((int_32)$12 == (int_32)*($15)) ){ goto $label$11 }
	
.LABEL $label$12
	*($12) = $10
	$12 = (*($14) + [1])
	*($14) = $12
	goto $label$10 
	
.LABEL $label$11
	CALL $46($0, ($5 + [8]))
	$12 = *($14)
	
.LABEL $label$10
	$11 = ($16 + $11)
	if ( (($12 - *($0)) <= $2) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$8
	$14 = ($0 + [4])
	$16 = ($0 + [8])
	
.LOOP $label$19:
	$7 = ($11 + $13)
	if ( ($11 & [1]) ){ goto $label$25 }
	$10 = CALL $6($7)
	*($5 + [8]) = $10
	if ( $4 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$10 = CALL $8($7)
	*($5 + [8]) = $10
	if ( ($4 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$12 = *($14)
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$27 }
	
.LOOP $label$28:
	if ( ((int_32)*($7) == (int_32)($10 & [255])) ){ goto $label$27 }
	$7 = ($7 + [1])
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	if ( ((int_32)$7 != (int_32)$12) ){ goto $label$20 }
	
.LABEL $label$26
	if ( ((int_32)$12 == (int_32)*($16)) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	$12 = *($14)
	if ( ((int_32)$12 == (int_32)*($16)) ){ goto $label$21 }
	
.LABEL $label$22
	*($12) = $10
	$12 = (*($14) + [1])
	*($14) = $12
	goto $label$20 
	
.LABEL $label$21
	CALL $46($0, ($5 + [8]))
	$12 = *($14)
	
.LABEL $label$20
	$11 = ($10 + $11)
	if ( (($12 - *($0)) <= $2) ){ goto $label$19 }
	
.LABEL $label$1
	$global$0 = ($5 + [48])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $146($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [44])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [48])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = CALL $25($0)
	*($4 + [88]) = *($5)
	$6 = CALL $129((($4 + [88]) | [4]), ($5 + [4]))
	*((($4 + [88]) + [48])) = *(($5 + [48]))
	*((($4 + [88]) + [40])) = *(($5 + [40]))
	*((($4 + [88]) + [32])) = *(($5 + [32]))
	*((($4 + [88]) + [24])) = *(($5 + [24]))
	*($4 + [104]) = *($5 + [16])
	$5 = CALL $27($0, ($3 + [8]))
	*($4 + [48]) = *($5)
	$7 = CALL $129((($4 + [48]) | [4]), ($5 + [4]))
	$8 = CALL $129((($4 + [48]) + [16]), ($5 + [16]))
	*($4 + [76 align=4]) = *($5 + [28 align=4])
	$9 = CALL current_receiver()
	$5 = *($6)
	$10 = ($5 & [1])
	*($4 + [32]) = ( *((($4 + [88]) + [12])) ? ($6 + [1]) : $10 )
	*($4 + [36]) = ( *((($4 + [88]) + [8])) ? uint_32($5 >> [1]) : $10 )
	*($4 + [16]) = *($4 + [32])
	CALL eosio_assert(((int_64)$9 == (int_64)*(CALL $7(($4 + [40]), ($4 + [16])))), [17816])
	$9 = *($0 + [8])
	$5 = *($7)
	$10 = ($5 & [1])
	*($4 + [24]) = ( *((($4 + [48]) + [12])) ? ($7 + [1]) : $10 )
	*($4 + [28]) = ( *((($4 + [48]) + [8])) ? uint_32($5 >> [1]) : $10 )
	*($4 + [8]) = *($4 + [24])
	CALL eosio_assert(((int_64)$9 == (int_64)*(CALL $7(($4 + [40]), ($4 + [8])))), [17836])
	CALL eosio_assert(((int_64)*($2) == (int_64)*($0)), [17858])
	$0 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$9 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $11
	$0 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $11
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$0 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $0 ){ goto $label$5 }
	$0 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [8492])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($3) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8509])
	if ( (*($8) & [1]) ){ goto $label$10 }
	$5 = [1]
	if ( (*($7) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($4 + [72])))
	$5 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [60])))
	if ( ((*($6) & $5) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($6) & $5) ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($4 + [144])
	return 
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [100])))
	$global$0 = ($4 + [144])
}

void .FUNC $32 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [208])
	$global$0 = $4
	*($4 + [160]) = $1
	*(($4 + [152])) = [0]
	*($4 + [136]) = (int_64)-1
	*($4 + [156]) = [0]
	$1 = *($0)
	*($4 + [120]) = $1
	*($4 + [128]) = $1
	*($4 + [144]) = (int_64)0
	$5 = CALL db_lowerbound_i64($1, $1, (int_64)-6147718988072747008, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $29(($4 + [120]), $5)
	$5 = *($6 + [20])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = [1]
	$11 = ($4 + [120])
	goto $label$2 
	
.LABEL $label$4
	$7 = [10]
	goto $label$1 
	
.LABEL $label$3
	$7 = [8]
	goto $label$1 
	
.LABEL $label$2
	$7 = [12]
	
.LABEL $label$1
	
.LOOP $label$6:
	goto $label$82 
	
.LABEL $label$84
	$6 = CALL $29(($4 + [120]), $5)
	$5 = *($6 + [20])
	if ( ($5 & [1]) ){ goto $label$38 }
	$7 = [10]
	goto $label$6 
	
.LABEL $label$83
	$8 = (($6 + [20]) + [1])
	$5 = uint_32($5 >> [1])
	if ( ((uint_32)$5 >= (uint_32)[8]) ){ goto $label$34 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$82
	if ( $5 ){ goto $label$35 }
	$7 = [45]
	goto $label$6 
	
.LABEL $label$81
	$1 = (int_64)0
	goto $label$36 
	
.LABEL $label$80
	$8 = *(($6 + [28]))
	$5 = *(($6 + [24]))
	if ( ($5 <= [8]) ){ goto $label$37 }
	$7 = [9]
	goto $label$6 
	
.LABEL $label$79
	CALL eosio_assert([0], [18269])
	$7 = [1]
	goto $label$6 
	
.LABEL $label$78
	$1 = (int_64)0
	$7 = [2]
	goto $label$6 
	
.LABEL $label$77
	$9 = (($8 + $5) + [-1])
	$10 = *($9)
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$32 }
	$7 = [44]
	goto $label$6 
	
.LABEL $label$76
	CALL eosio_assert([0], [18314])
	$10 = *($9)
	$7 = [3]
	goto $label$6 
	
.LABEL $label$75
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$33 }
	$7 = [4]
	goto $label$6 
	
.LABEL $label$74
	$1 = ((int_64)$1 << (int_64)8)
	$7 = [5]
	goto $label$6 
	
.LABEL $label$73
	if ( ((int_64)((int_64)$1 | (int_64)*($6 + [32])) != (int_64)*($2)) ){ goto $label$31 }
	$7 = [42]
	goto $label$6 
	
.LABEL $label$72
	if ( ((int_32)*($6 + [16]) == (int_32)[10]) ){ goto $label$30 }
	$7 = [6]
	goto $label$6 
	
.LABEL $label$71
	CALL eosio_assert([1], [19158])
	$5 = CALL db_next_i64(*($6 + [112]), ($4 + [64]))
	if ( ((int_32)$5 >= (int_32)[0]) ){ goto $label$29 }
	$7 = [11]
	goto $label$6 
	
.LABEL $label$70
	$5 = [1]
	$11 = ($4 + [120])
	goto $label$28 
	
.LABEL $label$69
	$5 = [0]
	$11 = ($4 + [120])
	$7 = [12]
	goto $label$6 
	
.LABEL $label$68
	CALL eosio_assert($5, [17755])
	$5 = CALL $25($0)
	*($4 + [64]) = *($5)
	$8 = CALL $129((($4 + [64]) | [4]), ($5 + [4]))
	*((($4 + [64]) + [48])) = *(($5 + [48]))
	*((($4 + [64]) + [40])) = *(($5 + [40]))
	*((($4 + [64]) + [32])) = *(($5 + [32]))
	*((($4 + [64]) + [24])) = *(($5 + [24]))
	*($4 + [80]) = *($5 + [16])
	$5 = CALL $27($0, $2)
	*($4 + [24]) = *($5)
	$6 = CALL $129((($4 + [24]) | [4]), ($5 + [4]))
	$12 = CALL $129((($4 + [24]) + [16]), ($5 + [16]))
	*($4 + [52 align=4]) = *($5 + [28 align=4])
	$1 = *($0)
	*($4) = $0
	*($4 + [8]) = $2
	*($4 + [4]) = ($4 + [160])
	*($4 + [12]) = ($4 + [24])
	*($4 + [16]) = ($4 + [64])
	*($4 + [200]) = $1
	CALL eosio_assert(((int_64)*($4 + [120]) == (int_64)CALL $fimport$10()), [18762])
	*($4 + [180]) = $4
	*($4 + [176]) = ($4 + [120])
	*($4 + [184]) = ($4 + [200])
	*(($9 = CALL _Znwj([128])) + [28]) = [0]
	*($9 + [20 align=4]) = (int_64)0
	$5 = CALL _Znwj([100])
	*($9 + [44]) = $5
	*($9 + [48]) = $5
	*($9 + [52]) = ($5 + [100])
	$10 = [-100]
	$7 = [13]
	goto $label$6 
	
.LABEL $label$67
	*($5) = [0]
	$5 = (*($5) + [1])
	*(($5 = ($9 + [48]))) = $5
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$27 }
	$7 = [14]
	goto $label$6 
	
.LABEL $label$66
	*($9 + [108]) = $11
	CALL $33(($4 + [176]), $9)
	*($4 + [192]) = $9
	$1 = *($9)
	*($4 + [176]) = $1
	$10 = *($9 + [112])
	*($4 + [172]) = $10
	$2 = ($4 + [148])
	$5 = *($2)
	if ( ((uint_32)$5 >= (uint_32)*(($4 + [152]))) ){ goto $label$26 }
	$7 = [41]
	goto $label$6 
	
.LABEL $label$65
	*($5 + [8]) = $1
	*($5 + [16]) = $10
	*($4 + [192]) = [0]
	*($5) = $9
	*($2) = ($5 + [24])
	$5 = *($4 + [192])
	*($4 + [192]) = [0]
	if ( ($5 == 0) ){ goto $label$24 }
	$7 = [16]
	goto $label$6 
	
.LABEL $label$64
	$10 = *($5 + [44])
	if ( ($10 == 0) ){ goto $label$23 }
	$7 = [17]
	goto $label$6 
	
.LABEL $label$63
	*(($5 + [48])) = $10
	CALL _ZdlPv($10)
	$7 = [18]
	goto $label$6 
	
.LABEL $label$62
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$22 }
	$7 = [19]
	goto $label$6 
	
.LABEL $label$61
	CALL _ZdlPv(*(($5 + [28])))
	$7 = [20]
	goto $label$6 
	
.LABEL $label$60
	CALL _ZdlPv($5)
	$5 = [1]
	if ( ((*($12) & [1]) == 0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$59
	CALL $34(($4 + [144]), ($4 + [192]), ($4 + [176]), ($4 + [172]))
	$5 = *($4 + [192])
	*($4 + [192]) = [0]
	if ( $5 ){ goto $label$25 }
	$7 = [40]
	goto $label$6 
	
.LABEL $label$58
	$5 = [1]
	if ( (*($12) & [1]) ){ goto $label$21 }
	$7 = [39]
	goto $label$6 
	
.LABEL $label$57
	if ( (*($6) & $5) ){ goto $label$18 }
	$7 = [38]
	goto $label$6 
	
.LABEL $label$56
	if ( (*($8) & [1]) ){ goto $label$16 }
	$7 = [37]
	goto $label$6 
	
.LABEL $label$55
	$8 = *($4 + [144])
	if ( $8 ){ goto $label$14 }
	$7 = [36]
	goto $label$6 
	
.LABEL $label$54
	$global$0 = ($4 + [208])
	return 
	
.LABEL $label$53
	CALL _ZdlPv(*(($4 + [48])))
	if ( ((*($6) & $5) == 0) ){ goto $label$17 }
	$7 = [22]
	goto $label$6 
	
.LABEL $label$52
	CALL _ZdlPv(*(($4 + [36])))
	if ( ((*($8) & [1]) == 0) ){ goto $label$15 }
	$7 = [23]
	goto $label$6 
	
.LABEL $label$51
	CALL _ZdlPv(*(($4 + [76])))
	$8 = *($4 + [144])
	if ( ($8 == 0) ){ goto $label$13 }
	$7 = [24]
	goto $label$6 
	
.LABEL $label$50
	$6 = (($4 + [120]) + [28])
	$10 = *($6)
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$12 }
	$7 = [25]
	goto $label$6 
	
.LABEL $label$49
	$7 = [26]
	goto $label$6 
	
.LABEL $label$48
	$10 = ($10 + [-24])
	$5 = *($10)
	*($10) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	$7 = [27]
	goto $label$6 
	
.LABEL $label$47
	$9 = *($5 + [44])
	if ( ($9 == 0) ){ goto $label$9 }
	$7 = [28]
	goto $label$6 
	
.LABEL $label$46
	*(($5 + [48])) = $9
	CALL _ZdlPv($9)
	$7 = [29]
	goto $label$6 
	
.LABEL $label$45
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$8 }
	$7 = [30]
	goto $label$6 
	
.LABEL $label$44
	CALL _ZdlPv(*(($5 + [28])))
	$7 = [31]
	goto $label$6 
	
.LABEL $label$43
	CALL _ZdlPv($5)
	$7 = [32]
	goto $label$6 
	
.LABEL $label$42
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$11 }
	$7 = [33]
	goto $label$6 
	
.LABEL $label$41
	$5 = *(($4 + [144]))
	goto $label$7 
	
.LABEL $label$40
	$5 = $8
	$7 = [34]
	goto $label$6 
	
.LABEL $label$39
	*($6) = $8
	CALL _ZdlPv($5)
	$global$0 = ($4 + [208])
	return 
	
.LABEL $label$38
	$7 = [8]
	goto $label$6 
	
.LABEL $label$37
	$7 = [0]
	goto $label$6 
	
.LABEL $label$36
	$7 = [5]
	goto $label$6 
	
.LABEL $label$35
	$7 = [1]
	goto $label$6 
	
.LABEL $label$34
	$7 = [9]
	goto $label$6 
	
.LABEL $label$33
	$7 = [2]
	goto $label$6 
	
.LABEL $label$32
	$7 = [3]
	goto $label$6 
	
.LABEL $label$31
	$7 = [6]
	goto $label$6 
	
.LABEL $label$30
	$7 = [43]
	goto $label$6 
	
.LABEL $label$29
	$7 = [7]
	goto $label$6 
	
.LABEL $label$28
	$7 = [12]
	goto $label$6 
	
.LABEL $label$27
	$7 = [13]
	goto $label$6 
	
.LABEL $label$26
	$7 = [15]
	goto $label$6 
	
.LABEL $label$25
	$7 = [16]
	goto $label$6 
	
.LABEL $label$24
	$7 = [40]
	goto $label$6 
	
.LABEL $label$23
	$7 = [18]
	goto $label$6 
	
.LABEL $label$22
	$7 = [20]
	goto $label$6 
	
.LABEL $label$21
	$7 = [21]
	goto $label$6 
	
.LABEL $label$20
	$7 = [39]
	goto $label$6 
	
.LABEL $label$19
	$7 = [21]
	goto $label$6 
	
.LABEL $label$18
	$7 = [22]
	goto $label$6 
	
.LABEL $label$17
	$7 = [38]
	goto $label$6 
	
.LABEL $label$16
	$7 = [23]
	goto $label$6 
	
.LABEL $label$15
	$7 = [37]
	goto $label$6 
	
.LABEL $label$14
	$7 = [24]
	goto $label$6 
	
.LABEL $label$13
	$7 = [36]
	goto $label$6 
	
.LABEL $label$12
	$7 = [35]
	goto $label$6 
	
.LABEL $label$11
	$7 = [26]
	goto $label$6 
	
.LABEL $label$10
	$7 = [32]
	goto $label$6 
	
.LABEL $label$9
	$7 = [29]
	goto $label$6 
	
.LABEL $label$8
	$7 = [31]
	goto $label$6 
	
.LABEL $label$7
	$7 = [34]
	goto $label$6 
	$7
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_64 $31
	int_64 $32
	int_64 $33
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	*($1) = CALL $103($6, [20])
	*($1 + [16]) = [10]
	*($1 + [8]) = *(*($5 + [4]))
	$7 = (uint_64)*(*($5 + [8])) >> (uint_64)(int_64)8
	if ( (int_64)($7) == 0) ){ goto $label$4 }
	$8 = [0]
	
.LOOP $label$6:
	*((($3 + [64]) + ($9 = $8))) = $7
	$8 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[5]) ){ goto $label$5 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($3 + [104])) = [0]
	*($3 + [96]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$3 }
	*($3 + [96]) = ($8 << [1])
	$10 = (($3 + [96]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*((($3 + [96]) + [8])) = [0]
	*($3 + [96]) = (int_64)0
	*($3 + [96]) = [0]
	$9 = (($3 + [96]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$11 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($3 + [96]) = ($11 | [1])
	*($3 + [104]) = $10
	*($3 + [100]) = $8
	
.LABEL $label$2
	$11 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$7:
	*(($10 + $9)) = *((($3 + [64]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$7 }
	$9 = ($10 + $8)
	
.LABEL $label$1
	*($9) = [0]
	$11 = ($1 + [20])
	if ( (*($1 + [20]) & [1]) ){ goto $label$9 }
	*($11) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*(($1 + [28]))) = [0]
	*(($1 + [24])) = [0]
	
.LABEL $label$8
	$9 = [0]
	CALL $133($11, [0])
	*(($11 + [8])) = *((($3 + [96]) + [8]))
	*($11) = *($3 + [96])
	*($1 + [32]) = *(*(($5 + [8])))
	$7 = CALL current_time()
	$8 = *($5 + [16])
	*($1 + [97 align=1]) = *($8 + [18])
	*($1 + [99 align=1]) = *($8 + [20])
	*($1 + [56]) = (int_64)0
	*($1 + [72]) = $7
	*($1 + [64]) = (int_64)0
	*($1 + [36]) = *(*($5 + [12]) + [32])
	$10 = *($8 + [16])
	*($1 + [40]) = $10
	*($1 + [42]) = $10
	*($1 + [96]) = *($8 + [17])
	*($1 + [101]) = *($8 + [22])
	*($1 + [102]) = *($8 + [23])
	*($1 + [103]) = *($8 + [24])
	*($1 + [104]) = *($8 + [25])
	*($1 + [80]) = *($8 + [48])
	$10 = *(($1 + [48]))
	$8 = *($1 + [44])
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$10 }
	$10 = ($10 - $8)
	
.LOOP $label$11:
	*(($8 + $9)) = $9
	$9 = ($9 + [1])
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$11 }
	
.LABEL $label$10
	$7 = CALL current_time()
	*(($3 + [124])) = (int_64)0
	*(($3 + [140])) = (int_64)0
	*(($3 + [148])) = (int_64)0
	*($3 + [108]) = [0]
	*($3 + [112]) = [0]
	*($3 + [116 align=4]) = (int_64)0
	*($3 + [132 align=4]) = (int_64)0
	*($3 + [96]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	$7 = *($6)
	*($3 + [32]) = [18048]
	*($3 + [36]) = CALL $164([18048])
	*($3 + [24]) = *($3 + [32])
	*($3 + [72]) = *(CALL $7(($3 + [64]), ($3 + [24])))
	*($3 + [64]) = $7
	$8 = (($3 + [96]) + [36])
	$9 = *(($5 + [16]))
	$10 = *($9 + [4])
	if ( ($10 & [1]) ){ goto $label$13 }
	$10 = uint_32($10 >> [1])
	$9 = (($9 + [4]) + [1])
	goto $label$12 
	
.LABEL $label$13
	$10 = *(($9 + [8]))
	$9 = *(($9 + [12]))
	
.LABEL $label$12
	*($3 + [52]) = $10
	*($3 + [48]) = $9
	*($3 + [16]) = *($3 + [48])
	$9 = CALL $7(($3 + [56]), ($3 + [16]))
	*($3 + [88]) = [19188]
	*($3 + [92]) = CALL $164([19188])
	*($3 + [8]) = *($3 + [88])
	*($3 + [88]) = *(CALL $7(($3 + [32]), ($3 + [8])))
	*($3 + [32]) = *($1)
	*($3 + [40]) = *($6)
	CALL $104($8, ($3 + [64]), $9, ($3 + [88]), ($3 + [32]))
	$7 = *($1)
	*((($3 + [96]) + [20])) = *(($1 + [80]))
	*($3 + [72]) = (int_64)0
	*($3 + [64]) = ((int_64)$7 + (int_64)10000)
	$7 = *($6)
	CALL $48(($3 + [32]), ($3 + [96]))
	$9 = *($3 + [32])
	CALL send_deferred(($3 + [64]), $7, $9, (*($3 + [36]) - $9), [1])
	$9 = *($3 + [32])
	if ( ($9 == 0) ){ goto $label$14 }
	*($3 + [36]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$10 = ($1 + [16])
	$5 = ($1 + [8])
	$6 = ($1 + [80])
	$12 = ($1 + [104])
	$13 = ($1 + [103])
	$14 = ($1 + [102])
	$15 = ($1 + [101])
	$16 = ($1 + [100])
	$17 = ($1 + [99])
	$18 = ($1 + [98])
	$19 = ($1 + [97])
	$20 = ($1 + [96])
	$21 = ($1 + [42])
	$22 = ($1 + [40])
	$23 = ($1 + [36])
	$24 = ($1 + [64])
	$25 = ($1 + [56])
	$26 = ($1 + [72])
	$27 = ($1 + [32])
	CALL $49(($3 + [96]))
	$9 = *(($1 + [20]))
	$8 = ( *(($1 + [24])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($8 + [26])
	$7 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$15:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$15 }
	$28 = ($1 + [44])
	$29 = *($1 + [44])
	$8 = *(($1 + [48]))
	$30 = ($8 - $29)
	$7 = (CASTING uint_64)(uint_32 $30)
	
.LOOP $label$16:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$16 }
	$8 = (( $9 ? ($30 + $9) : ((int_32)$29 == (int_32)$8) ) + [45])
	if ( ($8 <= [513]) ){ goto $label$18 }
	$9 = CALL $169($8)
	goto $label$17 
	
.LABEL $label$18
	$9 = ($2 - (($8 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$17
	*($3 + [68]) = $9
	*($3 + [64]) = $9
	*($3 + [72]) = ($9 + $8)
	*($3 + [32]) = ($3 + [64])
	*($3 + [100]) = $5
	*($3 + [96]) = $1
	*($3 + [104]) = $10
	*($3 + [108]) = $11
	*($3 + [112]) = $27
	*($3 + [116]) = $23
	*($3 + [120]) = $22
	*($3 + [124]) = $21
	*($3 + [128]) = $28
	*($3 + [132]) = $25
	*($3 + [136]) = $24
	*($3 + [140]) = $26
	*($3 + [144]) = $6
	*($3 + [148]) = ($1 + [88])
	*($3 + [152]) = $20
	*($3 + [156]) = $19
	*($3 + [160]) = $18
	*($3 + [164]) = $17
	*($3 + [168]) = $16
	*($3 + [176]) = $14
	*($3 + [172]) = $15
	*($3 + [180]) = $13
	*($3 + [184]) = $12
	CALL $101(($3 + [96]), ($3 + [32]))
	$7 = *($1)
	*($1 + [112]) = CALL db_store_i64(*($4 + [8]), (int_64)-6147718988072747008, *(*($0 + [8])), $7, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$19 }
	CALL $173($9)
	
.LABEL $label$19
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$20 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	$9 = ($4 + [8])
	$7 = *($9)
	$8 = *(($0 + [8]))
	$31 = *($8)
	$32 = *($1)
	*($3 + [96]) = *(($1 + [8]))
	*($1 + [116]) = CALL db_idx64_store($7, (int_64)-6147718988072747008, $31, $32, ($3 + [96]))
	$31 = *($8)
	$32 = *($9)
	$33 = *($1)
	$8 = *(($1 + [28]))
	$10 = ($9 & [1])
	$9 = *(($1 + [20]))
	$9 = ( *(($1 + [24])) ? uint_32($9 >> [1]) : $10 )
	if ( ($9 <= [8]) ){ goto $label$24 }
	CALL eosio_assert([0], [18269])
	goto $label$23 
	
.LABEL $label$24
	if ( ($9 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$11 = ( $8 ? ($11 + [1]) : $10 )
	$7 = (int_64)0
	
.LOOP $label$25:
	$10 = (($11 + $9) + [-1])
	$8 = *($10)
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$26 }
	CALL eosio_assert([0], [18314])
	$8 = *($10)
	
.LABEL $label$26
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$25 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$21 
	
.LABEL $label$22
	$7 = (int_64)0
	
.LABEL $label$21
	*($3 + [96]) = ((int_64)$7 | (int_64)*(($1 + [32])))
	*(($1 + [120])) = CALL db_idx64_store($32, (int_64)-6147718988072747007, $31, $33, ($3 + [96]))
	$global$0 = ($3 + [192])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [108])) == (int_32)$0), [19002])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [19048])
	$5 = ($1 + [20])
	$6 = ($1 + [8])
	$7 = *($6)
	$8 = *($1 + [20])
	if ( ($8 & [1]) ){ goto $label$5 }
	$9 = ($5 + [1])
	$8 = uint_32($8 >> [1])
	if ( ((uint_32)$8 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = *(($1 + [28]))
	$8 = *(($1 + [24]))
	if ( ($8 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [18269])
	goto $label$2 
	
.LABEL $label$3
	if ( $8 ){ goto $label$2 }
	$10 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$10 = (int_64)0
	
.LOOP $label$6:
	$11 = (($9 + $8) + [-1])
	$12 = *($11)
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [18314])
	$12 = *($11)
	
.LABEL $label$7
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$6 }
	$10 = ((int_64)$10 << (int_64)8)
	
.LABEL $label$1
	*($1 + [16]) = [30]
	*($4 + [24]) = $7
	*($4 + [32]) = ((int_64)$10 | (int_64)*($1 + [32]))
	$7 = *($1)
	CALL eosio_assert([1], [19099])
	$8 = *(($1 + [20]))
	$12 = ( *(($1 + [24])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($12 + [26])
	$10 = (CASTING uint_64)(uint_32 $12)
	$11 = ($1 + [16])
	$13 = ($1 + [32])
	$14 = ($4 + [32])
	
.LOOP $label$8:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$8 }
	$9 = ($1 + [44])
	$15 = *($1 + [44])
	$12 = *(($1 + [48]))
	$16 = ($12 - $15)
	$10 = (CASTING uint_64)(uint_32 $16)
	
.LOOP $label$9:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$9 }
	$12 = (( $8 ? ($16 + $8) : ((int_32)$15 == (int_32)$12) ) + [45])
	if ( ($12 <= [513]) ){ goto $label$11 }
	$8 = CALL $169($12)
	goto $label$10 
	
.LABEL $label$11
	$8 = ($3 - (($12 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$10
	*($4 + [12]) = $8
	*($4 + [8]) = $8
	*($4 + [16]) = ($8 + $12)
	*($4 + [40]) = ($4 + [8])
	*($4 + [52]) = $6
	*($4 + [56]) = $11
	*($4 + [60]) = $5
	*($4 + [64]) = $13
	*($4 + [80]) = $9
	*($4 + [48]) = $1
	*($4 + [68]) = ($1 + [36])
	*($4 + [72]) = ($1 + [40])
	*($4 + [76]) = ($1 + [42])
	*($4 + [84]) = ($1 + [56])
	*($4 + [88]) = ($1 + [64])
	*($4 + [92]) = ($1 + [72])
	*($4 + [96]) = ($1 + [80])
	*($4 + [100]) = ($1 + [88])
	*($4 + [104]) = ($1 + [96])
	*($4 + [108]) = ($1 + [97])
	*($4 + [112]) = ($1 + [98])
	*($4 + [116]) = ($1 + [99])
	*($4 + [120]) = ($1 + [100])
	*($4 + [128]) = ($1 + [102])
	*($4 + [124]) = ($1 + [101])
	*($4 + [132]) = ($1 + [103])
	*($4 + [136]) = ($1 + [104])
	CALL $101(($4 + [48]), ($4 + [40]))
	CALL db_update_i64(*($1 + [112]), $2, $8, $12)
	if ( ($12 <= [513]) ){ goto $label$12 }
	CALL $173($8)
	
.LABEL $label$12
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($4 + [48]) = *($6)
	if ( (CALL $163(($4 + [24]), ($4 + [48]), [8]) == 0) ){ goto $label$14 }
	$8 = *($1 + [116])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$15 }
	$8 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747008, ($4 + [40]), $7)
	*(($1 + [116])) = $8
	
.LABEL $label$15
	CALL db_idx64_update($8, $2, ($4 + [48]))
	
.LABEL $label$14
	$8 = *($5)
	if ( ($8 & [1]) ){ goto $label$20 }
	$9 = ($5 + [1])
	$8 = uint_32($8 >> [1])
	if ( ((uint_32)$8 >= (uint_32)[8]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$9 = *(($1 + [28]))
	$8 = *(($1 + [24]))
	if ( ($8 <= [8]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL eosio_assert([0], [18269])
	goto $label$17 
	
.LABEL $label$18
	if ( $8 ){ goto $label$17 }
	$10 = (int_64)0
	goto $label$16 
	
.LABEL $label$17
	$10 = (int_64)0
	
.LOOP $label$21:
	$11 = (($9 + $8) + [-1])
	$12 = *($11)
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [18314])
	$12 = *($11)
	
.LABEL $label$22
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$21 }
	$10 = ((int_64)$10 << (int_64)8)
	
.LABEL $label$16
	*($4 + [48]) = ((int_64)$10 | (int_64)*($13))
	if ( (CALL $163($14, ($4 + [48]), [8]) == 0) ){ goto $label$23 }
	$12 = ($1 + [120])
	$8 = *($12)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$24 }
	$8 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747007, ($4 + [40]), $7)
	*($12) = $8
	
.LABEL $label$24
	CALL db_idx64_update($8, $2, ($4 + [48]))
	
.LABEL $label$23
	$global$0 = ($4 + [144])
}

void .FUNC $31 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	CALL require_auth(*($0))
	CALL $32($0, $1, $2, $1)
}