(data (i32.const 8192) "onerror\00Assertion failed: %s (%s: %s: %d)\n\00-+   0X0x\00")
(data (i32.const 8245) "eosio\00(null)\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8344) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8408) "transfer\00-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 8436) "tuboshuismgr\00inf\00")
(data (i32.const 8453) "Invalid token transfer\00INF\00")
(data (i32.const 8480) "Quantity must be positive\00nan\00")
(data (i32.const 8510) "identifier and other command must be separated with colon\00NAN\00")
(data (i32.const 8572) "asset\00.\00")
(data (i32.const 8580) "mkwhitelists\00")
(data (i32.const 8593) "tokenlist\00")
(data (i32.const 8603) "only whitelisted token is allowed\00")
(data (i32.const 8637) "Length of main account name should be 12\00")
(data (i32.const 8678) "Length of sub account name should be 12\00")
(data (i32.const 8718) "from account manager to \00")
(data (i32.const 8743) "active\00")
(data (i32.const 8750) "tosubacct\00")
(data (i32.const 8760) "create\00")
(data (i32.const 8767) "eosio.token\00")
(data (i32.const 8779) "only accept authentic EOS token\00")
(data (i32.const 8811) "EOS\00")
(data (i32.const 8815) "Only accepts CORE for signup eos account\00")
(data (i32.const 8856) "createacct\00")
(data (i32.const 8867) "invalid memo identifier\00")
(data (i32.const 8891) "account name and other command must be separated with minuses\00")
(data (i32.const 8953) "\n\00")
(data (i32.const 8955) "Length of account name should be 12\00")
(data (i32.const 8991) "memo format mismatch\00")
(data (i32.const 9012) "At least one operation key is needed\00")
(data (i32.const 9049) "EOS1111111111111111111111111111111114T1Anm\00")
(data (i32.const 9092) "Length of public key should be 53 or blackhole\00")
(data (i32.const 9139) "Public key should be prefix with EOS\00")
(data (i32.const 9176) "Decode pubkey failed\00")
(data (i32.const 9197) "Invalid public key\00")
(data (i32.const 9216) "invalid public key\00")
(data (i32.const 9235) "insufficient keys\00")
(data (i32.const 9253) "already registered in accountmgr\00")
(data (i32.const 9286) "owner\00")
(data (i32.const 9292) "updateauth\00")
(data (i32.const 9304) "forwardout\00")
(data (i32.const 9315) "key added. \00")
(data (i32.const 9327) "mdfkeydata called. \00")
(data (i32.const 9347) "key modified. \00")
(data (i32.const 9362) "setbkpdata called.\00")
(data (i32.const 9381) "self-backup is not allowed\00")
(data (i32.const 9408) "same backup already exists\00")
(data (i32.const 9435) "backup added.\00")
(data (i32.const 9449) "backup modified.\00")
(data (i32.const 9466) "backup removed.\n\00")
(data (i32.const 9483) "defer data added.\n\00")
(data (i32.const 9502) "deferred removed.\n\00")
(data (i32.const 9521) "setbkpprop called.\n\00")
(data (i32.const 9541) "proposal removed.\n\00")
(data (i32.const 9560) "setapproval called.\n\00")
(data (i32.const 9581) "logicupdater\00")
(data (i32.const 9594) "setlogic\00")
(data (i32.const 9603) "deferred tx sent.\00")
(data (i32.const 9621) "deferred updating added.\n\00")
(data (i32.const 9647) "setlogic called.\00")
(data (i32.const 9664) "logic contract not exist\00")
(data (i32.const 9689) "new logic too early to activate\00")
(data (i32.const 9721) "sub_account not exist!\00")
(data (i32.const 9744) "subacct_table modify\00")
(data (i32.const 9765) "subassetsum_table emplace\00")
(data (i32.const 9791) "subassetsum_table modify\00")
(data (i32.const 9816) "unable to find key\00")
(data (i32.const 9835) "subaccount withdraw called!\00")
(data (i32.const 9863) "sub_account already exists!\00")
(data (i32.const 9891) "subacct_table emplace\00")
(data (i32.const 9913) "mdfsubkey called. \00")
(data (i32.const 9932) "sub key modified. \00")
(data (i32.const 9951) "addsubdapp called. \00")
(data (i32.const 9971) "sub account not exist.\00")
(data (i32.const 9994) "dapp already in whitelist.\00")
(data (i32.const 10021) "dapp not in whitelist.\00")
(data (i32.const 10044) "rmsubacct called. \00")
(data (i32.const 10064) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 10320) "carry == 0\00")
(data (i32.const 10331) "accountmgr.cpp\00")
(data (i32.const 10346) "DecodeBase58\00")
(data (i32.const 10359) "string is too long to be a valid name\00")
(data (i32.const 10397) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 10464) "character is not in allowed character set for names\00")
(data (i32.const 10520) "\b0)\00\00\00\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00\1b\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1c\00\00\00\1d\00\00\00\98/\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 10672) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 10705) "write\00")
(data (i32.const 10711) "string is too long to be a valid symbol_code\00")
(data (i32.const 10756) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 10809) "Not enough balance to buy ram\00")
(data (i32.const 10839) "EOS7XLjSxB7rcjymdPtwjUvDLmMDLt5m7ruiKtGJzHQweRBs7oyj2\00")
(data (i32.const 10893) "Length of public key should be 53\00")
(data (i32.const 10927) "newaccount\00")
(data (i32.const 10938) "buyram\00")
(data (i32.const 10945) "cannot create objects in table of another contract\00")
(data (i32.const 10996) "Can\'t call mgr contract!\00")
(data (i32.const 11021) "Can\'t call logic contract!\00")
(data (i32.const 11048) "blackactions\00")
(data (i32.const 11061) "blacklisted action is not allowed\00")
(data (i32.const 11095) "defertrans\00")
(data (i32.const 11106) "defersend\00")
(data (i32.const 11116) "read\00")
(data (i32.const 11121) "get\00")
(data (i32.const 11125) "logic removed.\n\00")
(data (i32.const 11141) "cannot increment end iterator\00")
(data (i32.const 11171) "error reading iterator\00")
(data (i32.const 11194) "object passed to erase is not in multi_index\00")
(data (i32.const 11239) "cannot erase objects in table of another contract\00")
(data (i32.const 11289) "attempt to remove object that was not in multi_index\00")
(data (i32.const 11342) "sub account doesn\'t record this asset!\00")
(data (i32.const 11381) "sub account doesn\'t have enough asset!\00")
(data (i32.const 11420) "type mismatch\00")
(data (i32.const 11434) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 11493) "object passed to modify is not in multi_index\00")
(data (i32.const 11539) "cannot modify objects in table of another contract\00")
(data (i32.const 11590) "updater cannot change primary key when modifying an object\00")
(data (i32.const 11649) "table modify\00")
(data (i32.const 11662) "attempt to subtract asset with different symbol\00")
(data (i32.const 11710) "subtraction underflow\00")
(data (i32.const 11732) "subtraction overflow\00")
(data (i32.const 11753) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 11804) "singleton does not exist\00")
(data (i32.const 11829) "cannot pass end iterator to modify\00")
(data (i32.const 11864) "next primary key in table is at autoincrement limit\00")
(data (i32.const 11916) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 11970) "cannot decrement iterator at beginning of table\00")
(data (i32.const 12018) "subacct_table add.\00")
(data (i32.const 12037) "attempt to add asset with different symbol\00")
(data (i32.const 12080) "addition underflow\00")
(data (i32.const 12099) "addition overflow\00")
(data (i32.const 12117) "add new dapp to sub account.\00")
(data (i32.const 20588) " )\00\00")
(data (i32.const 20592) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 20688) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 22496) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 22960) "0123456789ABCDEF")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$1 (param i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$4 (result i32)))
(import "env" "read_action_data" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "prints_l" (func $fimport$7 (param i32 i32)))
(import "env" "prints" (func $fimport$8 (param i32)))
(import "env" "ripemd160" (func $fimport$9 (param i32 i32 i32)))
(import "env" "current_time" (func $fimport$10 (result i64)))
(import "env" "cancel_deferred" (func $fimport$11 (param i32) (result i32)))
(import "env" "current_receiver" (func $fimport$12 (result i64)))
(import "env" "db_store_i64" (func $fimport$13 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$14 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$16 (param i32 i32)))
(import "env" "send_deferred" (func $fimport$17 (param i32 i64 i32 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$18 (param i32)))
(import "env" "memset" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$22 (param i32 i64 i32 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$23 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$24 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$25 (param i32 i64 i32)))
(import "env" "db_idx64_remove" (func $fimport$26 (param i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$27 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$28))
(import "env" "db_lowerbound_i64" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx128_store" (func $fimport$30 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$31 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$32 (param i64 i64 i64) (result i32)))
(import "env" "db_idx128_find_primary" (func $fimport$33 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_update" (func $fimport$34 (param i32 i64 i32)))
(import "env" "db_idx128_next" (func $fimport$35 (param i32 i32) (result i32)))
(import "env" "db_idx128_remove" (func $fimport$36 (param i32)))
(import "env" "__unordtf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$40 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$41 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$43 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$44 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$45 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$46 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$47 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$48 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$49 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$50 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$51 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$52 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$53 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$54 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$55 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $190))
(export "_Znwj" (func $188))
(export "_Znaj" (func $189))
(export "_ZdaPv" (func $191))
(export "_ZnwjSt11align_val_t" (func $192))
(export "_ZnajSt11align_val_t" (func $193))
(export "_ZdlPvSt11align_val_t" (func $194))
(export "_ZdaPvSt11align_val_t" (func $195))
(table $0 30 30 anyfunc)
(elem (i32.const 1) $5 $7 $9 $11 $13 $15 $17 $19 $21 $22 $24 $26 $27 $28 $30 $32 $33 $35 $37 $38 $39 $41 $43 $45 $46 $48 $217 $218 $219)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 22976))
(global $global$2 i32 (i32.const 22976))


int_32 .FUNC $220 (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $174 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$8 }
	if ( ($5 == 0) ){ goto $label$5 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$9:
	$4 = ($6 + [-12])
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$10 }
	*(($6 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	$4 = *($0)
	goto $label$6 
	
.LABEL $label$8
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[12])
	$4 = ($1 + ((int_32)$7 * (int_32)[12]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$13 }
	CALL $63($5, *($1), *(($1 + [4])))
	
.LABEL $label$13
	$5 = ($5 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$14 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$0 = ($0 + [4])
	$1 = *($0)
	
.LOOP $label$15:
	*($1) = (int_64)0
	*($1 + [8]) = [0]
	$7 = ($4 + [4])
	$5 = (*($7) - *($4))
	if ( ($5 == 0) ){ goto $label$16 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL _Znwj($5)
	*(($3 = ($1 + [4]))) = $6
	*(($1 + [8])) = ($6 + $5)
	*($1) = $6
	$5 = *($4)
	$1 = (*($7) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($6, $5, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$16
	$1 = (*($0) + [12])
	*($0) = $1
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$15 }
	goto $label$4 
	
.LABEL $label$14
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$1 = ($4 + [-12])
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$19 }
	*(($4 + [-8])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$18 }
	
.LABEL $label$17
	*($2) = $5
	return (unreachable)
	
.LABEL $label$7
	$4 = $5
	
.LABEL $label$6
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = [357913941]
	$4 = ((int_32)$4 / (int_32)[12])
	if ( ((uint_32)$4 > (uint_32)[178956969]) ){ goto $label$20 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$20
	$4 = ((int_32)$5 * (int_32)[12])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$21:
	*($5) = (int_64)0
	*($5 + [8]) = [0]
	$7 = ($1 + [4])
	$4 = (*($7) - *($1))
	if ( ($4 == 0) ){ goto $label$22 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL _Znwj($4)
	*(($3 = ($5 + [4]))) = $6
	*(($5 + [8])) = ($6 + $4)
	*($5) = $6
	$4 = *($1)
	$5 = (*($7) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$22 }
	CALL memcpy($6, $4, $5)
	*($3) = (*($3) + $5)
	
.LABEL $label$22
	$5 = (*($5) + [12])
	*(($5 = ($0 + [4]))) = $5
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$21 }
	
.LABEL $label$4
	return (unreachable)
	
.LABEL $label$3
	CALL $206($5)
	
.LABEL $label$2
	CALL $206($1)
	
.LABEL $label$1
	CALL $206($0)
	(unreachable)
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	$3 = $2
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11116])
	$3 = *($4 + [60])
	
.LABEL $label$4
	CALL memcpy(($4 + [72]), $3, [8])
	*($4 + [60]) = ($3 + [8])
	CALL $61(($4 + [56]), (($4 + [72]) + [8]))
	*(($3 = (($4 + [8]) + [8]))) = *((($4 + [56]) + [8]))
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	*($4 + [96]) = (int_64)0
	$3 = [0]
	*($4 + [104]) = [0]
	$0 = *($4 + [72])
	$8 = (*(($4 + [84])) - *($4 + [80]))
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL _Znwj($8)
	*((($4 + [96]) + [8])) = ($3 + $8)
	*($4 + [96]) = $3
	*($4 + [100]) = $3
	$9 = *((($4 + [72]) + [8]))
	$8 = (*(($4 + [84])) - $9)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($3, $9, $8)
	$3 = (*($4 + [100]) + $8)
	*($4 + [100]) = $3
	
.LABEL $label$7
	$8 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$8 }
	$6 = *((*($8) + $6))
	
.LABEL $label$8
	*($4 + [120]) = [0]
	*($4 + [112]) = (int_64)0
	$3 = ($3 - *($4 + [96]))
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL _Znwj($3)
	*(($4 + [120])) = ($5 + $3)
	*($4 + [112]) = $5
	*($4 + [116]) = $5
	$9 = *($4 + [96])
	$3 = (*($4 + [100]) - $9)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $9, $3)
	*($4 + [116]) = ($5 + $3)
	
.LABEL $label$9
	CALL void $8((int_32 $0), (int_64 ($4 + [112])), (int_32 $6))
	$3 = *($4 + [112])
	if ( ($3 == 0) ){ goto $label$10 }
	*($4 + [116]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$10
	$3 = *($4 + [96])
	if ( ($3 == 0) ){ goto $label$11 }
	*($4 + [100]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$11
	if ( ($7 <= [513]) ){ goto $label$12 }
	CALL $244($2)
	
.LABEL $label$12
	$2 = *(($4 + [80]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($4 + [84])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$global$0 = ($4 + [128])
	return [1]
	
.LABEL $label$6
	CALL $206(($4 + [96]))
	
.LABEL $label$5
	CALL $206(($4 + [112]))
	(unreachable)
	return (unreachable)
}

void .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[31]) ){ goto $label$6 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$6
	CALL memcpy($2, $4, [32])
	*(($3 = ($3 + [4]))) = (*($3) + [32])
	CALL $165(*($1), *($0 + [24]))
}

int_32 .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [11171])
	
.LABEL $label$5
	$4 = CALL $241($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL _Znwj([80])) + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	*($3 + [44]) = ($5 + [44])
	CALL $178(($3 + [32]), ($3 + [24]))
	*($5 + [64]) = [-1]
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $94(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $244($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$4 = *($1 + [44])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($1 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $170 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [10705])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10705])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [16])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10705])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$0 = ($3 + [52])
	$4 = ($3 + [40])
	$2 = ($3 + [28])
	$5 = ($3 + [24])
	$1 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $1) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [10705])
	$1 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($1, $5, [4])
	*(($1 = ($3 + [4]))) = (*($1) + [4])
	CALL $151($3, $2)
	CALL $152($3, $4)
	CALL $153($3, $0)
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_32 $46
	int_32 $47
	int_32 $48
	int_32 $49
	int_32 $50
	int_64 $51
	int_64 $52
	int_64 $53
	$5 = ($global$0 - [320])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = CALL $204($4, [45], [0])
	CALL eosio_assert(((int_32)$6 != (int_32)[-1]), [8891])
	$9 = *($5 + [304])
	$10 = ($9 & [1])
	$8 = ($7 + [1])
	$7 = CALL $198(($5 + [304]), $4, [0], $6, $4)
	CALL prints_l(( *($7 + [8]) ? $8 : $10 ), ( *($7 + [4]) ? uint_32($9 >> [1]) : $10 ))
	CALL prints([8953])
	$9 = *($5 + [304])
	CALL eosio_assert(((int_32)( *($7 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) ) == (int_32)[12]), [8955])
	$8 = ( *($7 + [8]) ? $8 : (*($5 + [304]) & [1]) )
	*($5 + [288]) = $8
	*($5 + [292]) = CALL $235($8)
	*($5 + [24]) = *($5 + [288])
	$11 = CALL $2(($5 + [296]), ($5 + [24]))
	$12 = CALL $198(($5 + [272]), $4, ($6 + [1]), [-1], $4)
	$4 = CALL $204($12, [45], [0])
	CALL eosio_assert(((int_32)$4 != (int_32)[-1]), [8891])
	$6 = *($5 + [256])
	$13 = CALL $198(($5 + [256]), $12, [0], $4, $12)
	$6 = ( *($13 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	CALL eosio_assert((((int_32)$6 == (int_32)[12]) | ((int_32)$6 == (int_32)[53])), [8991])
	*($5 + [248]) = [0]
	$14 = (int_64)0
	*($5 + [240]) = (int_64)0
	$8 = ($6 & [1])
	$6 = *($5 + [256])
	$6 = ( *($13 + [4]) ? uint_32($6 >> [1]) : $8 )
	if ( ((int_32)$6 == (int_32)[53]) ){ goto $label$4 }
	if ( ((int_32)$6 != (int_32)[12]) ){ goto $label$1 }
	$6 = ( *($13 + [8]) ? ($13 + [1]) : $8 )
	*($5 + [232]) = $6
	*($5 + [236]) = CALL $235($6)
	*($5 + [16]) = *($5 + [232])
	$14 = *(CALL $2(($5 + [112]), ($5 + [16])))
	CALL $198(($5 + [112]), $12, ($4 + [1]), [-1], $12)
	if ( (*($5 + [240]) & [1]) ){ goto $label$3 }
	*($5 + [240]) = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $199(($5 + [240]), $12)
	goto $label$1 
	
.LABEL $label$3
	*(*(($5 + [248]))) = [0]
	*($5 + [244]) = [0]
	
.LABEL $label$2
	CALL $201(($5 + [240]), [0])
	*((($5 + [240]) + [8])) = *((($5 + [112]) + [8]))
	*($5 + [240]) = *($5 + [112])
	
.LABEL $label$1
	$4 = CALL $197(($5 + [200]), ($5 + [240]))
	CALL $57(($5 + [216]), $5, $4, [45])
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$5
	CALL eosio_assert(((uint_32)((int_32)(*($5 + [220]) - *($5 + [216])) / (int_32)[12]) > (uint_32)[1]), [9012])
	*($5 + [192]) = [0]
	*($5 + [184]) = (int_64)0
	*(($5 + [176])) = [0]
	*($5 + [168]) = (int_64)0
	$4 = CALL $235([8811])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$14 }
	*($5 + [168]) = ($4 << [1])
	$6 = (($5 + [168]) | [1])
	if ( $4 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$8 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($5 + [168]) = ($8 | [1])
	*($5 + [176]) = $6
	*($5 + [172]) = $4
	
.LABEL $label$13
	CALL memcpy($6, [8811], $4)
	
.LABEL $label$12
	*(($6 + $4)) = [0]
	*($5 + [160]) = [0]
	*($5 + [152]) = (int_64)0
	$16 = *($5 + [220])
	$15 = *($5 + [216])
	if ( ((int_32)$15 == (int_32)$16) ){ goto $label$15 }
	$17 = (($5 + [80]) | [1])
	$18 = (($5 + [168]) | [1])
	$19 = (($5 + [96]) | [1])
	$20 = (($5 + [96]) + [8])
	$21 = ($5 + [121])
	$22 = ($5 + [122])
	$23 = ($5 + [123])
	$24 = (($5 + [112]) + [12])
	$25 = ($5 + [125])
	$26 = ($5 + [126])
	$27 = ($5 + [127])
	$28 = (($5 + [112]) + [16])
	$29 = ($5 + [129])
	$30 = ($5 + [130])
	$31 = ($5 + [131])
	$32 = ($5 + [132])
	$33 = ($5 + [133])
	$34 = ($5 + [134])
	$35 = ($5 + [135])
	$36 = (($5 + [112]) + [24])
	$37 = ($5 + [137])
	$38 = ($5 + [138])
	$39 = ($5 + [139])
	$40 = ($5 + [140])
	$41 = ($5 + [141])
	$42 = ($5 + [142])
	$43 = ($5 + [143])
	$44 = (($5 + [112]) + [32])
	
.LOOP $label$16:
	$45 = CALL $197(($5 + [96]), $15)
	$4 = *($5 + [96])
	$6 = ($4 & [1])
	CALL prints_l(( *($20) ? $19 : $6 ), ( *($5 + [100]) ? uint_32($4 >> [1]) : $6 ))
	CALL prints([8953])
	$4 = [1]
	$6 = *($5 + [96])
	if ( ((int_32)( *($5 + [100]) ? uint_32($6 >> [1]) : ($6 & [1]) ) == (int_32)[53]) ){ goto $label$17 }
	$4 = [0]
	$6 = *($5 + [96])
	$8 = CALL $235([9049])
	if ( ((int_32)$8 != (int_32)( *($5 + [100]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$17 }
	$4 = (CALL $205($45, [0], [-1], [9049], $8) == 0)
	
.LABEL $label$17
	CALL eosio_assert($4, [9092])
	$6 = ( *($5 + [172]) ? uint_32($6 >> [1]) : $8 )
	$6 = *($5 + [168])
	$8 = ($6 & [1])
	$4 = ( *((($5 + [168]) + [8])) ? $18 : $8 )
	$46 = ($4 + $6)
	if ( ($6 == 0) ){ goto $label$18 }
	$8 = ( *($20) ? $19 : (*($5 + [96]) & [1]) )
	if ( ((int_32)*($4) != (int_32)*($8)) ){ goto $label$18 }
	$8 = ($8 + [1])
	$6 = ($6 + [-1])
	
.LOOP $label$20:
	if ( ($6 == 0) ){ goto $label$19 }
	$6 = ($6 + [-1])
	$9 = ($4 + [1])
	$10 = *($8)
	$8 = ($8 + [1])
	$47 = ($4 + [1])
	$4 = $47
	if ( ((int_32)$10 == (int_32)*($9)) ){ goto $label$20 }
	$4 = $47
	goto $label$18 
	
.LABEL $label$19
	$4 = $46
	
.LABEL $label$18
	CALL eosio_assert(((int_32)$46 == (int_32)$4), [9139])
	$4 = *($5 + [168])
	CALL $198(($5 + [80]), $45, ( *($5 + [172]) ? uint_32($4 >> [1]) : ($4 & [1]) ), [-1], ($5 + [96]))
	$48 = (($5 + [80]) + [8])
	CALL eosio_assert(CALL $58(( *($48) ? $17 : (*($5 + [80]) & [1]) ), ($5 + [152])), [9176])
	CALL eosio_assert(((int_32)(*($5 + [156]) - *($5 + [152])) == (int_32)[37]), [9197])
	$4 = *($5 + [152])
	$6 = *($4 + [6])
	$8 = *($4 + [7])
	$9 = *($4 + [5])
	$10 = *($4 + [4])
	$47 = *($4 + [3])
	$45 = *($4 + [2])
	$46 = *($4 + [1])
	$49 = *($4)
	*(($50 = (($5 + [112]) + [8]))) = *($4 + [8])
	*($5 + [112]) = $49
	*($5 + [113]) = $46
	*($5 + [114]) = $45
	*($5 + [115]) = $47
	*($5 + [116]) = $10
	*($5 + [117]) = $9
	*($5 + [119]) = $8
	*($5 + [118]) = $6
	*($21) = *($4 + [9])
	*($22) = *($4 + [10])
	*($23) = *($4 + [11])
	*($24) = *($4 + [12])
	*($25) = *($4 + [13])
	*($26) = *($4 + [14])
	*($27) = *($4 + [15])
	*($28) = *($4 + [16])
	*($29) = *($4 + [17])
	*($30) = *($4 + [18])
	*($31) = *($4 + [19])
	*($32) = *($4 + [20])
	*($33) = *($4 + [21])
	*($34) = *($4 + [22])
	*($35) = *($4 + [23])
	*($36) = *($4 + [24])
	*($37) = *($4 + [25])
	*($38) = *($4 + [26])
	*($39) = *($4 + [27])
	*($40) = *($4 + [28])
	*($41) = *($4 + [29])
	*($42) = *($4 + [30])
	*($43) = *($4 + [31])
	*($44) = *($4 + [32])
	CALL ripemd160(($5 + [112]), [33], ($5 + [48]))
	CALL eosio_assert((CALL $234(($5 + [48]), (*($5 + [156]) + [-4]), [4]) == 0), [9216])
	$4 = *($5 + [188])
	if ( ((int_32)$4 != (int_32)*((($5 + [184]) + [8]))) ){ goto $label$23 }
	CALL $59(($5 + [184]), ($5 + [112]))
	if ( (*($5 + [80]) & [1]) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	*($4) = *($5 + [112])
	*(($4 + [32])) = *($44)
	*(($4 + [24])) = *($36)
	*(($4 + [16])) = *($28)
	*(($4 + [8])) = *($50)
	*($5 + [188]) = ($4 + [33])
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*($48))
	
.LABEL $label$21
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($20))
	$15 = ($15 + [12])
	if ( ((int_32)$15 != (int_32)$16) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$24
	$15 = ($15 + [12])
	if ( ((int_32)$15 != (int_32)$16) ){ goto $label$16 }
	
.LABEL $label$15
	$51 = *(($3 + [8]))
	*((($5 + [32]) + [8])) = $51
	$52 = *($11)
	$53 = *($3)
	*(($5 + [8])) = $51
	*($5 + [32]) = $53
	*($5) = $53
	CALL $60($0, $52, $14, ($5 + [184]), $5)
	$4 = *($5 + [152])
	if ( ($4 == 0) ){ goto $label$25 }
	*($5 + [156]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((*($5 + [168]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*($5 + [176]))
	
.LABEL $label$26
	$4 = *($5 + [184])
	if ( ($4 == 0) ){ goto $label$27 }
	*($5 + [188]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$27
	$8 = *($5 + [216])
	if ( ($8 == 0) ){ goto $label$28 }
	$6 = *($5 + [220])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$30 }
	
.LOOP $label$31:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$32
	$6 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$31 }
	$4 = *($5 + [216])
	goto $label$29 
	
.LABEL $label$30
	$4 = $8
	
.LABEL $label$29
	*($5 + [220]) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$28
	if ( (*($5 + [240]) & [1]) ){ goto $label$34 }
	if ( (*($5 + [256]) & [1]) ){ goto $label$33 }
	goto $label$10 
	
.LABEL $label$34
	CALL _ZdlPv(*(($5 + [248])))
	if ( ((*($5 + [256]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$33
	CALL _ZdlPv(*($13 + [8]))
	$4 = [1]
	if ( ((*($5 + [272]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	CALL $196(($5 + [168]))
	
.LABEL $label$10
	$4 = [1]
	if ( (*($5 + [272]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($5 + [304]) & $4) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($5 + [304]) & $4) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($7 + [8])))
	$global$0 = ($5 + [320])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [320])
	(unreachable)
}

void .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[15]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [16])
	*(($3 = ($3 + [4]))) = (*($3) + [16])
	CALL $179(*($1), *($0 + [8]))
	CALL $61(*($1), *($0 + [12]))
}

void .FUNC $4 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$2 = ($global$0 - [688])
	$global$0 = $2
	$3 = *(($0 + [24]))
	$4 = *($0 + [16])
	$5 = *($0 + [8])
	$6 = *($0)
	$7 = CALL $197(($2 + [640]), ($0 + [32]))
	*($2 + [632]) = [8436]
	*($2 + [636]) = CALL $235([8436])
	*($2 + [152]) = *($2 + [632])
	if ( ((int_64)$6 == (int_64)*(CALL $2(($2 + [312]), ($2 + [152])))) ){ goto $label$1 }
	*($2 + [624]) = [8436]
	*($2 + [628]) = CALL $235([8436])
	*($2 + [144]) = *($2 + [624])
	if ( ((int_64)$5 != (int_64)*(CALL $2(($2 + [552]), ($2 + [144])))) ){ goto $label$1 }
	$8 = [0]
	if ( ((uint_64)((int_64)$4 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$9 = (uint_64)$3 >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$9 = $10
	$8 = [1]
	$11 = $0
	$0 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$9 = $10
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$8 = ((int_32)$0 < (int_32)[6])
	$11 = ($0 + [1])
	$0 = $11
	if ( $8 ){ goto $label$6 }
	$8 = [1]
	$0 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	CALL eosio_assert($8, [8453])
	CALL eosio_assert(((int_64)$4 > (int_64)0), [8480])
	$0 = *($2 + [640])
	$13 = ($0 & [1])
	$12 = ($7 + [1])
	$11 = ( *($7 + [8]) ? $12 : $13 )
	$8 = ( *($7 + [4]) ? uint_32($0 >> [1]) : $13 )
	if ( ($8 == 0) ){ goto $label$8 }
	$13 = ($11 + $8)
	$0 = $11
	
.LOOP $label$10:
	if ( (CALL $207(*($0)) == 0) ){ goto $label$9 }
	$0 = ($0 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$10 }
	$0 = $13
	
.LABEL $label$9
	$13 = (*($2 + [640]) & [1])
	goto $label$7 
	
.LABEL $label$8
	$0 = $11
	
.LABEL $label$7
	CALL $203($7, ($11 - ( *($7 + [8]) ? $12 : $13 )), ($0 - $11))
	$0 = *($2 + [640])
	if ( ($0 & [1]) ){ goto $label$17 }
	$14 = $12
	$0 = (($7 + uint_32($0 >> [1])) + [1])
	if ( ((int_32)$0 != (int_32)$14) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$14 = *(($7 + [8]))
	$0 = ($14 + *($7 + [4]))
	if ( ((int_32)$0 == (int_32)$14) ){ goto $label$15 }
	
.LABEL $label$16
	if ( (CALL $207(*(($0 + [-1]))) == 0) ){ goto $label$15 }
	$11 = ($14 + [1])
	
.LOOP $label$18:
	if ( ((int_32)$11 == (int_32)$0) ){ goto $label$14 }
	$8 = ($0 + [-2])
	$13 = ($0 + [-1])
	$0 = $13
	if ( CALL $207(*($8)) ){ goto $label$18 }
	$0 = $13
	
.LABEL $label$15
	$8 = [1]
	$11 = *($2 + [640])
	if ( ($11 & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$0 = $14
	$8 = [1]
	$11 = *($2 + [640])
	if ( (($11 & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$12 = *(($7 + [8]))
	$8 = ($12 + *($7 + [4]))
	goto $label$11 
	
.LABEL $label$12
	$8 = (($7 + uint_32($11 >> $8)) + $8)
	
.LABEL $label$11
	CALL $203($7, ($0 - $12), ($8 - $0))
	$0 = CALL $204($7, [58], [0])
	CALL eosio_assert(((int_32)$0 != (int_32)[-1]), [8510])
	$11 = CALL $198(($2 + [608]), $7, [0], $0, $7)
	$14 = CALL $198(($2 + [592]), $7, ($0 + [1]), [-1], $7)
	$0 = *($2 + [608])
	$8 = CALL $235([8572])
	if ( ((int_32)$8 != (int_32)( *($11 + [4]) ? uint_32($0 >> [1]) : ($0 & [1]) )) ){ goto $label$40 }
	if ( (CALL $205($11, [0], [-1], [8572], $8) == 0) ){ goto $label$39 }
	
.LABEL $label$40
	$0 = *($2 + [608])
	$8 = CALL $235([8760])
	if ( ((int_32)$8 != (int_32)( *(($11 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )) ){ goto $label$41 }
	if ( (CALL $205($11, [0], [-1], [8760], $8) == 0) ){ goto $label$38 }
	
.LABEL $label$41
	CALL eosio_assert([0], [8867])
	goto $label$21 
	
.LABEL $label$39
	*($2 + [536]) = [8580]
	*($2 + [540]) = CALL $235([8580])
	*($2 + [96]) = *($2 + [536])
	$0 = CALL $2(($2 + [544]), ($2 + [96]))
	*($2 + [528]) = [8593]
	*($2 + [532]) = CALL $235([8593])
	*($2 + [88]) = *($2 + [528])
	CALL $2(($2 + [312]), ($2 + [88]))
	*(($2 + [584])) = [0]
	*($2 + [568]) = (int_64)-1
	*($2 + [576]) = (int_64)0
	$9 = *($0)
	*($2 + [552]) = $9
	*($2 + [560]) = (int_64)-3665743429468946432
	$0 = [0]
	$8 = CALL db_find_i64($9, (int_64)-3665743429468946432, (int_64)-7375584768194248704, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$42 }
	$0 = CALL $49(($2 + [552]), $8)
	if ( ((int_32)*($0 + [8]) == (int_32)($2 + [552])) ){ goto $label$42 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$42
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [8603])
	$8 = *($2 + [512])
	$0 = CALL $204($14, [45], [0])
	$15 = CALL $198(($2 + [512]), $14, [0], $0, $14)
	CALL eosio_assert(((int_32)( *($15 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) == (int_32)[12]), [8637])
	$8 = ( *($15 + [8]) ? ($15 + [1]) : (*($2 + [512]) & [1]) )
	*($2 + [496]) = $8
	*($2 + [500]) = CALL $235($8)
	*($2 + [80]) = *($2 + [496])
	$16 = CALL $2(($2 + [504]), ($2 + [80]))
	$0 = *($2 + [480])
	$17 = CALL $198(($2 + [480]), $14, ($0 + [1]), [-1], $14)
	CALL eosio_assert(((int_32)( *($17 + [4]) ? uint_32($0 >> [1]) : ($0 & [1]) ) == (int_32)[12]), [8678])
	$0 = ( *($17 + [8]) ? ($17 + [1]) : (*($2 + [480]) & [1]) )
	*($2 + [464]) = $0
	*($2 + [468]) = CALL $235($0)
	*($2 + [72]) = *($2 + [464])
	$18 = CALL $2(($2 + [472]), ($2 + [72]))
	*(($2 + [456])) = [0]
	*($2 + [448]) = (int_64)0
	$0 = CALL $235([8718])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$37 }
	*($2 + [448]) = ($0 << [1])
	$13 = (($2 + [448]) | [1])
	if ( $0 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	*($2 + [224]) = [8767]
	*($2 + [228]) = CALL $235([8767])
	*($2 + [136]) = *($2 + [224])
	CALL eosio_assert(((int_64)*(CALL $2(($2 + [312]), ($2 + [136]))) == (int_64)$1), [8779])
	$0 = CALL $235([8811])
	if ( ($0 <= [8]) ){ goto $label$34 }
	CALL eosio_assert([0], [10711])
	goto $label$33 
	
.LABEL $label$37
	$8 = (($0 + [16]) & [-16])
	$13 = CALL _Znwj($8)
	*($2 + [448]) = ($8 | [1])
	*($2 + [456]) = $13
	*($2 + [452]) = $0
	
.LABEL $label$36
	CALL memcpy($13, [8718], $0)
	
.LABEL $label$35
	$8 = [0]
	*(($13 + $0)) = [0]
	$9 = *($16)
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$32 }
	$13 = *([0] + [10520])
	
.LOOP $label$44:
	*((($2 + [312]) + ($0 = $8))) = *(($13 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$9 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$0 == (int_32)[12]) )))))
	$8 = ($0 + [1])
	if ( ((uint_32)$0 > (uint_32)[11]) ){ goto $label$43 }
	$9 = ((int_64)$9 << (int_64)5)
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$44 }
	
.LABEL $label$43
	*(($2 + [416])) = [0]
	*($2 + [408]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$31 }
	*($2 + [408]) = ($8 << [1])
	$13 = (($2 + [408]) | [1])
	goto $label$30 
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$28 }
	
.LABEL $label$33
	$9 = (int_64)0
	
.LOOP $label$45:
	$8 = *(($0 + [8810]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$46 }
	CALL eosio_assert([0], [10756])
	
.LABEL $label$46
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$45 }
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	goto $label$22 
	
.LABEL $label$32
	*(($2 + [416])) = [0]
	*($2 + [408]) = (int_64)0
	*($2 + [408]) = [0]
	$0 = (($2 + [408]) | [1])
	$8 = $0
	goto $label$29 
	
.LABEL $label$31
	$12 = (($8 + [16]) & [-16])
	$13 = CALL _Znwj($12)
	*($2 + [408]) = ($12 | [1])
	*($2 + [416]) = $13
	*($2 + [412]) = $8
	
.LABEL $label$30
	$12 = ($0 + [1])
	$0 = [0]
	
.LOOP $label$47:
	*(($13 + $0)) = *((($2 + [312]) + $0))
	$0 = ($0 + [1])
	if ( ((int_32)$12 != (int_32)$0) ){ goto $label$47 }
	$8 = ($13 + $8)
	$0 = (($2 + [408]) | [1])
	
.LABEL $label$29
	*($8) = [0]
	$8 = *($2 + [408])
	$13 = ($8 & [1])
	CALL $202(($2 + [448]), ( *($2 + [416]) ? $0 : $13 ), ( *($2 + [412]) ? uint_32($8 >> [1]) : $13 ))
	if ( ((*($2 + [408]) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*(($2 + [416])))
	
.LABEL $label$48
	*($2 + [392]) = [8436]
	*($2 + [396]) = CALL $235([8436])
	*($2 + [64]) = *($2 + [392])
	$0 = CALL $2(($2 + [400]), ($2 + [64]))
	*($2 + [376]) = [8743]
	*($2 + [380]) = CALL $235([8743])
	*($2 + [56]) = *($2 + [376])
	$9 = *(CALL $2(($2 + [384]), ($2 + [56])))
	$6 = *($0)
	*($2 + [360]) = [8408]
	*($2 + [364]) = CALL $235([8408])
	*($2 + [48]) = *($2 + [360])
	$0 = CALL $2(($2 + [368]), ($2 + [48]))
	*($2 + [296]) = [8436]
	*($2 + [300]) = CALL $235([8436])
	*($2 + [40]) = *($2 + [296])
	$8 = CALL $2(($2 + [304]), ($2 + [40]))
	*((($2 + [312]) + [24])) = $3
	*($2 + [328]) = $4
	*($2 + [312]) = *($8)
	*($2 + [320]) = *($16)
	$8 = CALL $197((($2 + [312]) + [32]), ($2 + [448]))
	*(($13 = (($2 + [408]) + [24]))) = [0]
	*($2 + [408]) = $1
	*($2 + [424]) = (int_64)0
	*($2 + [416]) = *($0)
	*(($0 = CALL _Znwj([16]))) = $6
	*($0 + [8]) = $9
	*((($2 + [408]) + [36])) = [0]
	$12 = ($0 + [16])
	*($13) = $12
	*(($2 + [428])) = $12
	*($2 + [424]) = $0
	*($2 + [436 align=4]) = (int_64)0
	$0 = *($8)
	$8 = ( *((($2 + [312]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($8 + [32])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($2 + [436])
	
.LOOP $label$49:
	$0 = ($0 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$49 }
	if ( ($0 == 0) ){ goto $label$51 }
	CALL $50($8, $0)
	$8 = *(($2 + [440]))
	$0 = *(($2 + [436]))
	goto $label$50 
	
.LABEL $label$51
	$8 = [0]
	$0 = [0]
	
.LABEL $label$50
	*($2 + [668]) = $0
	*($2 + [664]) = $0
	*($2 + [672]) = $8
	*($2 + [656]) = ($2 + [664])
	*($2 + [680]) = ($2 + [312])
	CALL $51(($2 + [680]), ($2 + [656]))
	CALL $52(($2 + [408]))
	$0 = *($2 + [436])
	if ( ($0 == 0) ){ goto $label$52 }
	*(($2 + [440])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$52
	$0 = *($2 + [424])
	if ( ($0 == 0) ){ goto $label$53 }
	*(($2 + [428])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$53
	if ( ((*($2 + [344]) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*(($2 + [352])))
	
.LABEL $label$54
	*($2 + [280]) = [8436]
	*($2 + [284]) = CALL $235([8436])
	*($2 + [32]) = *($2 + [280])
	$0 = CALL $2(($2 + [288]), ($2 + [32]))
	*($2 + [264]) = [8743]
	*($2 + [268]) = CALL $235([8743])
	*($2 + [24]) = *($2 + [264])
	$8 = CALL $2(($2 + [272]), ($2 + [24]))
	*($2 + [248]) = [8436]
	$9 = *($8)
	$6 = *($0)
	*($2 + [252]) = CALL $235([8436])
	*($2 + [16]) = *($2 + [248])
	$0 = CALL $2(($2 + [256]), ($2 + [16]))
	*($2 + [232]) = [8750]
	*($2 + [236]) = CALL $235([8750])
	*($2 + [8]) = *($2 + [232])
	$8 = CALL $2(($2 + [240]), ($2 + [8]))
	*((($2 + [408]) + [24])) = $3
	*((($2 + [408]) + [32])) = $1
	*($2 + [424]) = $4
	*($2 + [408]) = *($16)
	*($2 + [416]) = *($18)
	*($2 + [312]) = *($0)
	*($2 + [320]) = *($8)
	*(($0 = CALL _Znwj([16]))) = $6
	*($0 + [8]) = $9
	*(($2 + [348])) = [0]
	$8 = ($0 + [16])
	*((($2 + [312]) + [24])) = $8
	*(($2 + [332])) = $8
	*($2 + [328]) = $0
	*($2 + [340 align=4]) = (int_64)0
	CALL $50(($2 + [340]), [40])
	$13 = (($2 + [312]) + [32])
	$0 = *($13)
	$8 = *($2 + [340])
	*($2 + [668]) = $8
	*($2 + [664]) = $8
	*($2 + [672]) = $0
	*($2 + [680]) = ($2 + [664])
	*($2 + [304]) = ($2 + [408])
	CALL $53(($2 + [304]), ($2 + [680]))
	CALL $52(($2 + [312]))
	$0 = *($2 + [340])
	if ( ($0 == 0) ){ goto $label$55 }
	*($13) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$55
	$0 = *($2 + [328])
	if ( ($0 == 0) ){ goto $label$56 }
	*(($2 + [332])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$56
	if ( (*($2 + [448]) & [1]) ){ goto $label$58 }
	if ( (*($2 + [480]) & [1]) ){ goto $label$57 }
	goto $label$26 
	
.LABEL $label$58
	CALL _ZdlPv(*($2 + [456]))
	if ( ((*($2 + [480]) & [1]) == 0) ){ goto $label$26 }
	
.LABEL $label$57
	CALL _ZdlPv(*(($17 + [8])))
	if ( ((*($2 + [512]) & [1]) == 0) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$28
	$9 = (int_64)4
	goto $label$22 
	
.LABEL $label$27
	CALL $196(($2 + [448]))
	
.LABEL $label$26
	if ( (*($2 + [512]) & [1]) ){ goto $label$24 }
	
.LABEL $label$25
	$13 = *($2 + [576])
	if ( $13 ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	CALL _ZdlPv(*(($15 + [8])))
	$13 = *($2 + [576])
	if ( ($13 == 0) ){ goto $label$21 }
	
.LABEL $label$23
	$12 = ($2 + [580])
	$0 = *($12)
	if ( ((int_32)$0 == (int_32)$13) ){ goto $label$60 }
	
.LOOP $label$61:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$62 }
	CALL _ZdlPv($8)
	
.LABEL $label$62
	if ( ((int_32)$13 != (int_32)$0) ){ goto $label$61 }
	$0 = *(($2 + [576]))
	goto $label$59 
	
.LABEL $label$60
	$0 = $13
	
.LABEL $label$59
	*($12) = $13
	CALL _ZdlPv($0)
	$0 = [1]
	if ( (*($2 + [592]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	CALL eosio_assert(((int_64)$3 == (int_64)$9), [8815])
	*($2 + [208]) = [8436]
	*($2 + [212]) = CALL $235([8436])
	*($2 + [128]) = *($2 + [208])
	$0 = CALL $2(($2 + [216]), ($2 + [128]))
	*($2 + [192]) = [8743]
	*($2 + [196]) = CALL $235([8743])
	*($2 + [120]) = *($2 + [192])
	$8 = CALL $2(($2 + [200]), ($2 + [120]))
	*($2 + [176]) = [8436]
	$9 = *($8)
	$1 = *($0)
	*($2 + [180]) = CALL $235([8436])
	*($2 + [112]) = *($2 + [176])
	$0 = CALL $2(($2 + [184]), ($2 + [112]))
	*($2 + [160]) = [8856]
	*($2 + [164]) = CALL $235([8856])
	*($2 + [104]) = *($2 + [160])
	$8 = CALL $2(($2 + [168]), ($2 + [104]))
	*((($2 + [312]) + [24])) = $3
	*($2 + [320]) = $5
	*($2 + [312]) = $6
	*($2 + [328]) = $4
	$13 = CALL $197((($2 + [312]) + [32]), $14)
	*($2 + [552]) = *($0)
	*($2 + [560]) = *($8)
	*(($0 = CALL _Znwj([16]))) = $1
	*($0 + [8]) = $9
	*((($2 + [552]) + [36])) = [0]
	$8 = ($0 + [16])
	*((($2 + [552]) + [24])) = $8
	*(($2 + [572])) = $8
	*($2 + [568]) = $0
	*($2 + [580 align=4]) = (int_64)0
	$0 = *($13)
	$8 = ( *((($2 + [312]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($8 + [32])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($2 + [580])
	
.LOOP $label$63:
	$0 = ($0 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$63 }
	if ( ($0 == 0) ){ goto $label$65 }
	CALL $50($8, $0)
	$8 = *(($2 + [584]))
	$0 = *(($2 + [580]))
	goto $label$64 
	
.LABEL $label$65
	$8 = [0]
	$0 = [0]
	
.LABEL $label$64
	*($2 + [412]) = $0
	*($2 + [408]) = $0
	*($2 + [416]) = $8
	*($2 + [512]) = ($2 + [408])
	*($2 + [664]) = ($2 + [312])
	CALL $51(($2 + [664]), ($2 + [512]))
	CALL $52(($2 + [552]))
	$0 = *($2 + [580])
	if ( ($0 == 0) ){ goto $label$66 }
	*(($2 + [584])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$66
	$0 = *($2 + [568])
	if ( ($0 == 0) ){ goto $label$67 }
	*(($2 + [572])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$67
	if ( ((*($2 + [344]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [352])))
	$0 = [1]
	if ( (*($2 + [592]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$0 = [1]
	if ( ((*($2 + [592]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*($14 + [8]))
	
.LABEL $label$19
	if ( ((*($2 + [608]) & $0) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($11 + [8]))
	
.LABEL $label$1
	if ( ((*($2 + [640]) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$68
	$global$0 = ($2 + [688])
	(unreachable)
}

int_32 .FUNC $221 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *($2 + [20])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	if ( CALL $220($2) ){ goto $label$2 }
	$4 = *($2 + [20])
	if ( ((*(($2 + [16])) - $4) <= $1) ){ goto $label$1 }
	
.LABEL $label$3
	$6 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$5 }
	$6 = [0]
	$5 = $0
	$3 = [0]
	
.LOOP $label$6:
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$5 }
	$3 = ($3 + [1])
	$7 = ($5 + $1)
	$8 = ($5 + [-1])
	$5 = $8
	if ( ((int_32)*(($7 + [-1])) != (int_32)[10]) ){ goto $label$6 }
	$6 = (($1 - $3) + [1])
	$5 = CALL int_32 $2((int_32 $0), (int_32 $6), (int_32 *($2 + [36])))
	if ( ($5 <= $6) ){ goto $label$2 }
	$0 = (($8 + $1) + [1])
	$4 = *(($2 + [20]))
	$1 = ($3 + [-1])
	
.LABEL $label$5
	CALL memcpy($4, $0, $1)
	*(($3 = ($2 + [20]))) = (*($3) + $1)
	$5 = ($6 + $1)
	
.LABEL $label$2
	return $5
	return .LABEL $label$1
}

void .FUNC $5 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [112])
	$global$0 = $3
	*(($3 + [96])) = (int_64)0
	*((($3 + [72]) + [32])) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)0
	$4 = [0]
	*((($3 + [32]) + [32])) = [0]
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	*($3 + [32]) = *($0)
	*($3 + [72]) = CALL $62(($3 + [32]))
	$5 = *($3 + [56])
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = ($3 + [60])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	$7 = *(($3 + [56]))
	goto $label$2 
	
.LABEL $label$4
	$6 = ($3 + [88])
	goto $label$1 
	
.LABEL $label$3
	$7 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($7)
	$6 = ($3 + [88])
	$4 = *($3 + [88])
	
.LABEL $label$1
	*((($3 + [72]) + [8])) = $1
	$1 = *($0)
	*($3 + [16]) = [8743]
	*($3 + [20]) = CALL $235([8743])
	*($3 + [8]) = *($3 + [16])
	$7 = CALL $2(($3 + [24]), ($3 + [8]))
	*($3 + [32]) = $1
	*($3 + [40]) = *($7)
	*((($7 = CALL _Znwj([16])) + [8])) = *($3 + [40])
	*($7) = *($3 + [32])
	$5 = ($7 + [16])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($3 + [92])) = $4
	CALL _ZdlPv($4)
	*(($3 + [96])) = [0]
	*((($3 + [72]) + [16])) = (int_64)0
	
.LABEL $label$7
	*($6) = $7
	*(($3 + [92])) = $5
	*(($3 + [96])) = $5
	$7 = ($3 + [100])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	CALL $63($7, *($2), *($2 + [4]))
	
.LABEL $label$8
	CALL $52(($3 + [72]))
	$7 = *($7)
	if ( ($7 == 0) ){ goto $label$9 }
	*(($3 + [104])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *(($3 + [88]))
	if ( ($7 == 0) ){ goto $label$10 }
	*(($3 + [92])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($3 + [112])
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 + [8])) = (int_64)0
	*($0 + [4]) = [0]
	*($0) = *($1)
	$2 = (*(($1 + [8])) - *($1 + [4]))
	$3 = ((int_32)$2 / (int_32)[36])
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[119304648]) ){ goto $label$3 }
	$2 = CALL _Znwj($2)
	*(($0 + [4])) = $2
	*(($0 + [12])) = ($2 + ((int_32)$3 * (int_32)[36]))
	*(($3 = ($0 + [8]))) = $2
	$4 = *(($1 + [4]))
	$5 = (*(($1 + [8])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[36]) * (int_32)[36]))
	
.LABEL $label$4
	*($0 + [16 align=4]) = (int_64)0
	*(($0 + [24])) = [0]
	$2 = (*(($1 + [20])) - *($1 + [16]))
	$3 = ((int_32)$2 / (int_32)[24])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$2 }
	$2 = CALL _Znwj($2)
	*(($0 + [16])) = $2
	*(($0 + [24])) = ($2 + ((int_32)$3 * (int_32)[24]))
	*(($3 = ($0 + [20]))) = $2
	$4 = *(($1 + [16]))
	$5 = (*(($1 + [20])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$5
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$2 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = int_32($2 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$2 = CALL _Znwj($2)
	*(($0 + [28])) = $2
	*(($0 + [36])) = ($2 + ($3 << [3]))
	*(($3 = ($0 + [32]))) = $2
	$5 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $5, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$6
	return $0
	
.LABEL $label$3
	CALL $206(($0 + [4]))
	
.LABEL $label$2
	CALL $206(($0 + [16]))
	
.LABEL $label$1
	CALL $206(($0 + [28]))
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $241($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $54(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $241($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [12148])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $241($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [11171])
	
.LABEL $label$5
	$2 = CALL $241($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [11116])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = $7
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($8) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $170(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $244($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $48 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$5 = ($global$0 - [272])
	$global$0 = $5
	*(($5 + [176])) = [0]
	*($5 + [152]) = (int_64)0
	*($5 + [160]) = (int_64)-1
	*($5 + [168]) = (int_64)0
	*($5 + [144]) = *($0)
	CALL require_auth(CALL $62(($5 + [144])))
	$6 = *($5 + [168])
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = ($5 + [172])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$5 }
	CALL _ZdlPv($9)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	$8 = *(($5 + [168]))
	goto $label$2 
	
.LABEL $label$3
	$8 = $6
	
.LABEL $label$2
	*($7) = $6
	CALL _ZdlPv($8)
	
.LABEL $label$1
	CALL $66($0, $1, $2)
	*($5 + [232]) = [0]
	*($5 + [224]) = (int_64)0
	$8 = (*($4 + [4]) - *($4))
	if ( ($8 == 0) ){ goto $label$8 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$7 }
	$9 = CALL _Znwj($8)
	*(($5 + [232])) = ($9 + $8)
	*($5 + [224]) = $9
	*($5 + [228]) = $9
	$6 = *($4)
	$8 = (*(($4 + [4])) - $6)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($9, $6, $8)
	*($5 + [228]) = (*($5 + [228]) + $8)
	
.LABEL $label$8
	$9 = CALL $67($0, $1, $2, ($5 + [224]))
	$8 = *($5 + [224])
	if ( ($8 == 0) ){ goto $label$9 }
	*($5 + [228]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$9
	if ( ($9 == 0) ){ goto $label$10 }
	*(($5 + [180])) = [0]
	*($5 + [172 align=4]) = (int_64)0
	*($5 + [208]) = [8743]
	*($5 + [212]) = CALL $235([8743])
	*($5 + [8]) = *($5 + [208])
	$8 = CALL $2(($5 + [216]), ($5 + [8]))
	*($5 + [104]) = $3
	*($5 + [112]) = *($8)
	*((($8 = CALL _Znwj([16])) + [8])) = *($5 + [112])
	*($8) = *($5 + [104])
	$9 = ($8 + [16])
	*(($5 + [164])) = $9
	*(($5 + [168])) = $9
	*($5 + [160]) = $8
	*($5 + [152]) = $2
	*($5 + [144]) = $1
	$8 = ($5 + [172])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$11 }
	CALL $63($8, *($4), *(($4 + [4])))
	
.LABEL $label$11
	CALL $52(($5 + [144]))
	$8 = *($8)
	if ( ($8 == 0) ){ goto $label$12 }
	*(($5 + [176])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$12
	$8 = *(($5 + [160]))
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [164])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	$global$0 = ($5 + [272])
	return (unreachable)
	
.LABEL $label$10
	$10 = CALL current_time()
	*((($5 + [144]) + [28])) = (int_64)0
	*(($5 + [188])) = (int_64)0
	*(($5 + [196])) = (int_64)0
	*($5 + [156]) = [0]
	*($5 + [160]) = [0]
	*($5 + [164 align=4]) = (int_64)0
	*($5 + [180 align=4]) = (int_64)0
	*($5 + [144]) = ((CASTING uint_32)(uint_64 ((uint_64)$10 / (uint_64)(int_64)1000000)) + [60])
	$10 = *($0)
	*($5 + [88]) = [8743]
	*($5 + [92]) = CALL $235([8743])
	*($5 + [24]) = *($5 + [88])
	$8 = CALL $2(($5 + [96]), ($5 + [24]))
	$11 = *($0)
	$12 = *($8)
	*($5 + [72]) = [9304]
	*($5 + [76]) = CALL $235([9304])
	*($5 + [16]) = *($5 + [72])
	$6 = CALL $2(($5 + [80]), ($5 + [16]))
	*(($5 + [64])) = [0]
	*($5 + [40]) = $2
	*($5 + [32]) = $1
	*($5 + [48]) = $3
	*($5 + [56]) = (int_64)0
	$8 = (*(($4 + [4])) - *($4))
	if ( ($8 == 0) ){ goto $label$14 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$6 }
	$9 = CALL _Znwj($8)
	*(($5 + [56])) = $9
	*(($7 = ($5 + [60]))) = $9
	*(($5 + [64])) = ($9 + $8)
	$4 = *($4)
	$8 = (*(($4 + [4])) - $4)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$14 }
	CALL memcpy($9, $4, $8)
	*($7) = (*($7) + $8)
	
.LABEL $label$14
	*($5 + [104]) = $11
	*($5 + [112]) = *($6)
	*(($8 = CALL _Znwj([16]))) = $10
	*($8 + [8]) = $12
	*(($5 + [140])) = [0]
	$9 = ($8 + [16])
	*((($5 + [104]) + [24])) = $9
	*(($5 + [124])) = $9
	*($5 + [120]) = $8
	*($5 + [132 align=4]) = (int_64)0
	$6 = *($5 + [56])
	$9 = *((($5 + [32]) + [28]))
	$8 = (($9 + [24]) - $6)
	$10 = (CASTING uint_64)(uint_32 ($9 - $6))
	$9 = (($5 + [104]) + [28])
	
.LOOP $label$15:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$15 }
	if ( ($8 == 0) ){ goto $label$17 }
	CALL $50($9, $8)
	$9 = *(($5 + [136]))
	$8 = *(($5 + [132]))
	goto $label$16 
	
.LABEL $label$17
	$9 = [0]
	$8 = [0]
	
.LABEL $label$16
	*($5 + [244]) = $8
	*($5 + [240]) = $8
	*($5 + [248]) = $9
	*($5 + [256]) = ($5 + [240])
	*($5 + [264]) = ($5 + [32])
	CALL $68(($5 + [264]), ($5 + [256]))
	$8 = *($5 + [56])
	if ( ($8 == 0) ){ goto $label$18 }
	*(($5 + [60])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$18
	$8 = (($5 + [144]) + [40])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)*(($5 + [188]))) ){ goto $label$20 }
	CALL $69($9, ($5 + [104]))
	*($8) = (*($8) + [40])
	goto $label$19 
	
.LABEL $label$20
	CALL $70(($5 + [180]), ($5 + [104]))
	
.LABEL $label$19
	*(($5 + [164])) = [0]
	*($5 + [40]) = $3
	*($5 + [32]) = ((int_64)((int_64)$2 & (int_64)-4294967296) | (int_64)((int_64)$1 & (int_64)4294967295))
	CALL cancel_deferred(($5 + [32]))
	CALL $71(($5 + [144]), ($5 + [32]), *($0), [0])
	$8 = *($5 + [132])
	if ( ($8 == 0) ){ goto $label$21 }
	*(($5 + [136])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$21
	$8 = *($5 + [120])
	if ( ($8 == 0) ){ goto $label$22 }
	*(($5 + [124])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$22
	CALL $72(($5 + [144]))
	$global$0 = ($5 + [272])
	return (unreachable)
	
.LABEL $label$7
	CALL $206(($5 + [224]))
	
.LABEL $label$6
	CALL $206((($5 + [32]) + [24]))
}

void .FUNC memory ()
{
}

int_32 .FUNC $236 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL $233($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

void .FUNC $43 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL prints([9835])
	$5 = *(($3 + [16]))
	*((($4 + [24]) + [16])) = $5
	$6 = *(($3 + [8]))
	*((($4 + [24]) + [8])) = $6
	$7 = *($3)
	*(($4 + [8])) = $6
	*(($4 + [16])) = $5
	*($4) = $7
	*($4 + [24]) = $7
	CALL $114($0, $1, $2, $4)
	$global$0 = ($4 + [48])
}

int_32 .FUNC $42 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [128]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $77(($4 + [24]), ($4 + [128]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $78(($4 + [128]), ($4 + [72]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $244($2)
	
.LABEL $label$4
	$2 = *(($4 + [88]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [92])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [128])
	$global$0 = $4
	*((($4 + [88]) + [32])) = [0]
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	*($4 + [88]) = *($0)
	CALL require_auth(CALL $62(($4 + [88])))
	$5 = *($4 + [112])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($4 + [116])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$5 }
	CALL _ZdlPv($8)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	$7 = *(($4 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$7 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$1
	*(($4 + [124])) = [0]
	*($4 + [116 align=4]) = (int_64)0
	*($4 + [96]) = $2
	$2 = *($0)
	*($4 + [88]) = $2
	*($4 + [40]) = [8743]
	*($4 + [44]) = CALL $235([8743])
	*($4 + [16]) = *($4 + [40])
	$7 = CALL $2(($4 + [48]), ($4 + [16]))
	*($4 + [56]) = $2
	*($4 + [24]) = [8743]
	*($4 + [64]) = *($7)
	*($4 + [28]) = CALL $235([8743])
	*($4 + [8]) = *($4 + [24])
	*(($8 = (($4 + [56]) + [24]))) = *(CALL $2(($4 + [32]), ($4 + [8])))
	*($4 + [72]) = $1
	*((($7 = CALL _Znwj([32])) + [8])) = *($4 + [64])
	*($7) = *($4 + [56])
	*($7 + [16]) = *($4 + [72])
	*(($7 + [24])) = *($8)
	$8 = ($7 + [32])
	*(($4 + [108])) = $8
	*((($4 + [88]) + [24])) = $8
	*($4 + [104]) = $7
	$7 = ($4 + [116])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	CALL $63($7, *($3), *($3 + [4]))
	
.LABEL $label$6
	CALL $52(($4 + [88]))
	$7 = *($7)
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [120])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *(($4 + [104]))
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [108])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$global$0 = ($4 + [128])
}

int_32 .FUNC $40 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [128]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $125(($4 + [24]), ($4 + [128]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $126(($4 + [128]), ($4 + [72]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $244($2)
	
.LABEL $label$4
	$2 = *(($4 + [88]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [92])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return [1]
}

int_32 .FUNC $47 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [64]) + [24]))) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $97(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($9 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($9)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($8)
	$1 = *($4 + [80])
	$10 = *($4 + [96])
	$11 = *($4 + [64])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $11), (int_64 $1), (int_64 $0), (int_64 $10), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $244($2)
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $46 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [80])
	$global$0 = $5
	*($5 + [56]) = $3
	*($5 + [48]) = $2
	*($5 + [64]) = $4
	CALL require_auth(*($0))
	CALL prints([9560])
	*(($5 + [40])) = [0]
	*($5 + [16]) = $1
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	*($5 + [44]) = [0]
	*($5 + [8]) = *($0)
	*($5) = ($5 + [8])
	CALL $91(($5 + [72]), $5, ($5 + [48]))
	$6 = *($5 + [76])
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ((int_64)(((int_64)((int_64)*($5 + [48]) ^ (int_64)*($6 + [16])) | (int_64)((int_64)*($5 + [56]) ^ (int_64)*(($6 + [24])))) == 0) == 0) ){ goto $label$1 }
	$7 = *(($6 + [36]))
	$0 = *($6 + [32])
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((int_64)*($0) == (int_64)$4) ){ goto $label$3 }
	$0 = ($0 + [8])
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$1 }
	
.LABEL $label$2
	*($5 + [72]) = ($5 + [64])
	CALL $98(*($5), $6, $1, ($5 + [72]))
	
.LABEL $label$1
	$8 = *($5 + [32])
	if ( ($8 == 0) ){ goto $label$5 }
	$9 = ($5 + [36])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	$6 = *($0 + [44])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($0 + [48])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$10
	$6 = *($0 + [32])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($0 + [36])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	$0 = *(($5 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $8
	
.LABEL $label$6
	*($9) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$global$0 = ($5 + [80])
}

void .FUNC $45 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [144])
	$global$0 = $4
	*($4 + [96]) = $1
	CALL require_auth(*($0))
	*($4 + [88]) = $3
	*(($4 + [80])) = [0]
	*($4 + [56]) = $1
	*($4 + [64]) = (int_64)-1
	*($4 + [72]) = (int_64)0
	$5 = *($0)
	*($4 + [48]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $1, (int_64)-4139260905483403264, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $108(($4 + [48]), $7)
	if ( ((int_32)*($6 + [144]) == (int_32)($4 + [48])) ){ goto $label$1 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9721])
	CALL prints([9744])
	$1 = *($4 + [96])
	if ( $6 ){ goto $label$2 }
	CALL eosio_assert([0], [11829])
	
.LABEL $label$2
	CALL $109(($4 + [48]), $6, $1, ($4 + [88]))
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$1 = *($0)
	*($4 + [8]) = $1
	*($4 + [16]) = $1
	$6 = CALL db_find_i64($1, $1, (int_64)-4139251842133089280, *($4 + [96]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $110(($4 + [8]), $6)
	if ( ((int_32)*($6 + [20]) == (int_32)($4 + [8])) ){ goto $label$6 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$6
	CALL prints([9791])
	CALL $111(($4 + [8]), $6, *($4 + [96]), ($4 + [88]))
	$7 = *($4 + [32])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL prints([9765])
	$1 = *($4 + [96])
	*($4 + [4]) = $3
	*($4) = ($4 + [96])
	*($4 + [136]) = $1
	if ( ((int_64)*($4 + [8]) == (int_64)CALL current_receiver()) ){ goto $label$7 }
	CALL eosio_assert([0], [10945])
	
.LABEL $label$7
	*($4 + [116]) = $4
	*($4 + [112]) = ($4 + [8])
	*($4 + [120]) = ($4 + [136])
	*(($6 = CALL _Znwj([32]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16]) = [0]
	*($6 + [20]) = ($4 + [8])
	CALL $112(($4 + [112]), $6)
	*($4 + [128]) = $6
	$1 = *($6)
	*($4 + [112]) = $1
	$3 = *($6 + [24])
	*($4 + [108]) = $3
	$7 = ($4 + [36])
	$0 = *($7)
	if ( ((uint_32)$0 >= (uint_32)*((($4 + [8]) + [32]))) ){ goto $label$10 }
	*($0 + [8]) = $1
	*($0 + [16]) = $3
	*($4 + [128]) = [0]
	*($0) = $6
	*($7) = ($0 + [24])
	$6 = *($4 + [128])
	*($4 + [128]) = [0]
	if ( ($6 == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $113(($4 + [32]), ($4 + [128]), ($4 + [112]), ($4 + [108]))
	$6 = *($4 + [128])
	*($4 + [128]) = [0]
	if ( $6 ){ goto $label$8 }
	
.LABEL $label$9
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$8
	$0 = *($6 + [8])
	if ( ($0 == 0) ){ goto $label$11 }
	*(($6 + [12])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	CALL _ZdlPv($6)
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = ($4 + [36])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$13 }
	
.LOOP $label$14:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	$3 = *($0 + [8])
	if ( ($3 == 0) ){ goto $label$16 }
	*(($0 + [12])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$16
	CALL _ZdlPv($0)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$14 }
	$6 = *(($4 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$6 = $7
	
.LABEL $label$12
	*($8) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$3
	$7 = *($4 + [72])
	if ( ($7 == 0) ){ goto $label$17 }
	$8 = ($4 + [76])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$19 }
	
.LOOP $label$20:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$21 }
	$3 = *($6 + [132])
	if ( ($3 == 0) ){ goto $label$22 }
	*(($6 + [136])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$22
	$3 = *($6 + [120])
	if ( ($3 == 0) ){ goto $label$23 }
	*(($6 + [124])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$23
	CALL _ZdlPv($6)
	
.LABEL $label$21
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$20 }
	$6 = *(($4 + [72]))
	goto $label$18 
	
.LABEL $label$19
	$6 = $7
	
.LABEL $label$18
	*($8) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$17
	$global$0 = ($4 + [144])
}

int_32 .FUNC $44 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [96]) + [24]))) = (int_64)0
	*(($9 = ($4 + [128]))) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [84]) = $2
	*($4 + [80]) = $2
	*($4 + [88]) = ($2 + $7)
	*($4 + [184]) = ($4 + [80])
	*($4 + [48]) = ($4 + [96])
	CALL $107(($4 + [48]), ($4 + [184]))
	*(($10 = (($4 + [32]) + [8]))) = *($4 + [88])
	*($4 + [32]) = *($4 + [80])
	*(($3 = (($4 + [160]) + [8]))) = *($10)
	*($4 + [160]) = *($4 + [32])
	$10 = *($3)
	*((($4 + [184]) + [8])) = $10
	*((($4 + [48]) + [24])) = $10
	*($4 + [48]) = $0
	*($4 + [56]) = $1
	$0 = *($4 + [160])
	*($4 + [64]) = $0
	*($4 + [184]) = $0
	*(($10 = (($4 + [136]) + [8]))) = *($8)
	*(($8 = (($4 + [136]) + [16]))) = *($9)
	*($4 + [136]) = *($4 + [112])
	$0 = *($4 + [104])
	$1 = *($4 + [96])
	*((($4 + [160]) + [16])) = *($8)
	*($3) = *($10)
	*($4 + [160]) = *($4 + [136])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$11 = *((($4 + [160]) + [16]))
	*((($4 + [184]) + [16])) = $11
	$12 = *((($4 + [160]) + [8]))
	*((($4 + [184]) + [8])) = $12
	*((($4 + [8]) + [8])) = $12
	*((($4 + [8]) + [16])) = $11
	$11 = *($4 + [160])
	*($4 + [8]) = $11
	*($4 + [184]) = $11
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $244($2)
	
.LABEL $label$6
	$global$0 = ($4 + [208])
	return [1]
}

int_32 .FUNC $222 (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC $234 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $233 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $226 (int_32 $0, int_32 $1)
{
	return $0
}

int_32 .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*($1 + [8]) = *($2 + [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11116])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	*(($3 = ($0 + [4]))) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	$5 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$7 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	*(($4 = ($3 + [-12]))) = (int_64)0
	*(($3 = ($3 + [-4]))) = [0]
	$6 = ($1 + [-12])
	*($4) = *($6)
	$1 = ($1 + [-4])
	*($3) = *($1)
	*($1) = [0]
	*($6) = (int_64)0
	$3 = $4
	$1 = $6
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	$3 = $4
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $7
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	$3 = *($6)
	if ( ($3 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL _ZdlPv($1)
	
.LABEL $label$14
}

int_32 .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [11121])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$5 = *($1)
	$7 = *($1 + [4])
	$6 = ((int_32)($7 - $5) / (int_32)[12])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $166($1, ($2 - $6))
	$7 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($5 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($7 + [-12])
	$6 = *($2)
	if ( ($6 == 0) ){ goto $label$9 }
	*(($7 + [-8])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$7 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	*(($1 + [4])) = $5
	$7 = $5
	
.LABEL $label$6
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$10:
	CALL $61($0, $2)
	$2 = ($2 + [12])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$10 }
	
.LABEL $label$3
	return $0
}

void .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*($0) + [32])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [48])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[31]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [32])
	*(($3 = ($3 + [4]))) = (*($3) + [32])
	CALL $165(*($1), ($4 + [80]))
}

int_32 .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [11121])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	*($1) = $3
	$2 = ($1 + [4])
	$7 = ($0 + [8])
	if ( ((uint_32)(*($7) - $8) > (uint_32)[32]) ){ goto $label$3 }
	CALL eosio_assert([0], [11116])
	$8 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $8, [33])
	$2 = (*($2) + [33])
	*(($2 = ($0 + [4]))) = $2
	$8 = ($1 + [40])
	if ( ((int_32)*($7) != (int_32)$2) ){ goto $label$4 }
	CALL eosio_assert([0], [11116])
	$2 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($8, $2, [1])
	$7 = (*($2) + [1])
	*(($2 = ($0 + [4]))) = $7
	$8 = ($1 + [48])
	if ( ((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11116])
	$7 = *($2)
	
.LABEL $label$5
	CALL memcpy($8, $7, [8])
	*($2) = (*($2) + [8])
	return $0
}

int_32 .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10705])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$3 = (*($4) + [8])
	*(($4 = ($0 + [4]))) = $3
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *($1 + [8])) / (int_32)[24]))
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$7 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert([0], [10705])
	$3 = *($4)
	
.LABEL $label$3
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $7 ){ goto $label$2 }
	$4 = *(($1 + [12]))
	$3 = *(($1 + [8]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	CALL $161($0, $3)
	$3 = ($3 + [24])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$5 }
	
.LABEL $label$4
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10705])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *($1 + [8])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10705])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [8])
	*(($3 = ($0 + [4]))) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$3 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10705])
	$4 = *($7)
	
.LABEL $label$5
	CALL memcpy($4, $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $230 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$global$0 = $3
	*($3 + [284]) = $2
	*(($3 + [272])) = (int_64)0
	*(($3 + [264])) = (int_64)0
	*(($3 + [256])) = (int_64)0
	*($3 + [248]) = (int_64)0
	*($3 + [240]) = (int_64)0
	*($3 + [280]) = *($3 + [284])
	$4 = [0]
	$2 = [-1]
	if ( ((int_32)CALL $231([0], $1, ($3 + [280]), ($3 + [80]), ($3 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $211($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) <= (int_32)[0]) ){ goto $label$6 }
	$5 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	*($0) = ($2 & [-33])
	$5 = ($2 & [32])
	if ( *($0 + [48]) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($3 + [80])
	*($0 + [28]) = $3
	*($0 + [20]) = $3
	$7 = *($0 + [44])
	*($0 + [44]) = $3
	$2 = CALL $231($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	if ( ($7 == 0) ){ goto $label$3 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $7
	*($6) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$7 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $7 )
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $231($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	
.LABEL $label$3
	$1 = *($0)
	*($0) = ($1 | $5)
	$1 = ($1 & [32])
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $212($0)
	
.LABEL $label$7
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	$global$0 = ($3 + [288])
	return $2
}

void .FUNC $244 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [20576])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [20384]
	$3 = (((int_32)$1 * (int_32)[12]) + [20384])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$3 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3 + [4 align=4]) = (int_64)0
	*(($3 + [36])) = [0]
	*(($3 + [28])) = (int_64)0
	*(($3 + [20])) = (int_64)0
	*(($3 + [12])) = (int_64)0
	*($3) = [0]
	$3 = (*($0) + [40])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $206($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[40]))
	$5 = ($2 + ((int_32)$5 * (int_32)[40]))
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	*(($3 + [36])) = [0]
	*(($3 + [28])) = (int_64)0
	*(($3 + [20])) = (int_64)0
	*(($3 + [12])) = (int_64)0
	*(($3 + [4])) = (int_64)0
	$3 = ($3 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[40]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-40]) * (int_32)[40]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [11121])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$9 = *($1)
	$8 = *($1 + [4])
	$7 = ((int_32)($8 - $9) / (int_32)[40])
	if ( ((uint_32)$7 >= (uint_32)$2) ){ goto $label$5 }
	CALL $169($1, ($2 - $7))
	$8 = *(($1 + [4]))
	$9 = *($1)
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$7 <= (uint_32)$2) ){ goto $label$6 }
	$8 = ($9 + ((int_32)$2 * (int_32)[40]))
	*(($1 + [4])) = $8
	
.LABEL $label$6
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = ($0 + [4])
	$2 = *($4)
	$1 = ($0 + [8])
	
.LOOP $label$7:
	$3 = (int_64)0
	$5 = [0]
	
.LOOP $label$8:
	if ( ($2 <= *($1)) ){ goto $label$9 }
	CALL eosio_assert([0], [11121])
	$2 = *($4)
	
.LABEL $label$9
	$7 = *($2)
	$6 = ($2 + [1])
	*($4) = $6
	$2 = ($5 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$5 = ($2 + [7])
	$2 = $6
	if ( ($7 & [128]) ){ goto $label$8 }
	*($9) = $3
	$2 = ($9 + [4])
	if ( ((uint_32)(*($1) - $6) > (uint_32)[32]) ){ goto $label$10 }
	CALL eosio_assert([0], [11116])
	$6 = *($4)
	
.LABEL $label$10
	CALL memcpy($2, $6, [33])
	$2 = (*($4) + [33])
	*($4) = $2
	$9 = ($9 + [40])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

void .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10705])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10705])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10705])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10705])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[31]) ){ goto $label$6 }
	CALL eosio_assert([0], [10705])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, $3, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$6 = *($0 + [24])
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*($6 + [4]) - *($6)) / (int_32)[12]))
	$1 = *($1)
	$0 = *($1 + [4])
	$3 = ($1 + [8])
	
.LOOP $label$7:
	$4 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$5 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($5) << [7]) | ($4 & [127]))
	if ( ((int_32)(*($3) - $0) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [10705])
	$0 = *(($1 + [4]))
	
.LABEL $label$8
	CALL memcpy($0, ($2 + [15]), [1])
	$0 = (*($0) + [1])
	*(($0 = ($1 + [4]))) = $0
	if ( $5 ){ goto $label$7 }
	$4 = *(($6 + [4]))
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $148($1, $0)
	$0 = ($0 + [12])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$10 }
	
.LABEL $label$9
	$global$0 = ($2 + [16])
}

int_32 .FUNC $242 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $243($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [8258])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $243 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [12184]) == 0) ){ goto $label$2 }
	$2 = *([0] + [12188])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [12184]) = [1]
	$2 = ($2 << [16])
	*([0] + [12188]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [12188])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [12188]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [12184]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [12184]) = [1]
	$3 = ($3 << [16])
	*([0] + [12188]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [12188])
	
.LABEL $label$10
	*([0] + [12188]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL $207(int_32(($3 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$3 = *($0 + [1])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$4 }
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$3 = [0]
	
.LOOP $label$5:
	$4 = ($0 + $3)
	$5 = ($3 + [1])
	$3 = $5
	if ( ((int_32)*(($4 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$4 = ($0 + $5)
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$4 = $0
	
.LABEL $label$1
	$0 = ((uint_32)((int_32)CALL $235($4) * (int_32)[733]) / (uint_32)[1000])
	$6 = ($0 + [1])
	$7 = CALL _Znwj($6)
	$8 = ($7 + $0)
	$0 = [0]
	
.LOOP $label$6:
	*(($7 + $0)) = [0]
	$0 = ($0 + [1])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$17 }
	$3 = [0]
	
.LOOP $label$18:
	$9 = $3
	$10 = $4
	if ( CALL $207(int_32(($0 << [24]) >> [24])) ){ goto $label$16 }
	$0 = *($10)
	$11 = *(($0 + [10064]))
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$0 != (int_32)[49]) ){ goto $label$20 }
	$3 = [0]
	if ( ($9 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$3 = [0]
	$0 = $8
	
.LOOP $label$22:
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$21 }
	$4 = (((int_32)*($0) * (int_32)[58]) + $11)
	*($0) = $4
	$3 = ($3 + [1])
	$0 = ($0 + [-1])
	$11 = ((int_32)$4 / (int_32)[256])
	if ( ((uint_32)($4 + [255]) > (uint_32)[510]) ){ goto $label$22 }
	if ( ($3 <= $9) ){ goto $label$22 }
	goto $label$19 
	
.LABEL $label$21
	if ( $11 ){ goto $label$9 }
	
.LABEL $label$19
	$4 = ($10 + [1])
	$0 = *($10 + [1])
	if ( $0 ){ goto $label$18 }
	goto $label$15 
	
.LABEL $label$17
	$3 = [0]
	goto $label$15 
	
.LABEL $label$16
	$3 = $9
	$4 = $10
	
.LABEL $label$15
	$9 = ($7 + $6)
	$0 = ($4 + [-1])
	
.LOOP $label$23:
	$0 = ($0 + [1])
	if ( CALL $207(*($0)) ){ goto $label$23 }
	$4 = [0]
	if ( *($0) ){ goto $label$13 }
	$4 = ($7 + ($6 - $3))
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$12 }
	$0 = $4
	if ( *($4) ){ goto $label$10 }
	$6 = ([0] - $3)
	$0 = [-1]
	$11 = $8
	
.LOOP $label$24:
	$4 = $11
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$11 }
	$0 = ($0 + [-1])
	$11 = ($4 + [1])
	if ( (*((($4 + $6) + [2])) == 0) ){ goto $label$24 }
	$0 = (($4 - $3) + [2])
	$4 = (($11 - $3) + [1])
	goto $label$10 
	
.LABEL $label$14
	$4 = [0]
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$12
	$0 = $9
	goto $label$10 
	
.LABEL $label$11
	$0 = (($4 - $3) + [2])
	$4 = $0
	
.LABEL $label$10
	$3 = (($9 - $4) + $5)
	$11 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $11) >= (uint_32)$3) ){ goto $label$25 }
	$4 = *($1 + [4])
	$4 = *($1)
	$11 = (*($1 + [4]) - $4)
	$10 = CALL _Znwj($3)
	$12 = ($10 + ($4 - $11))
	$6 = ($12 - $11)
	$3 = ($10 + $3)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$26 }
	CALL memcpy($6, $4, $11)
	$4 = *($1)
	
.LABEL $label$26
	*($1) = $6
	*(($1 + [4])) = $12
	*(($1 + [8])) = $3
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	*($2 + [15]) = [0]
	CALL $145($1, $5, ($2 + [15]))
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$27 }
	$6 = ($8 + [1])
	$9 = ($1 + [8])
	$4 = ($1 + [4])
	
.LOOP $label$28:
	$3 = ($0 + [1])
	$11 = *($4)
	if ( ((int_32)$11 == (int_32)*($9)) ){ goto $label$29 }
	*($11) = *($0)
	*($4) = (*($4) + [1])
	$0 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL $146($1, $0)
	$0 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$28 }
	
.LABEL $label$27
	$4 = [1]
	if ( $7 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $209([10320], [10331], [997], [10346])
	
.LABEL $label$8
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($2 + [16])
	(unreachable)
	return $4
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[33])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[130150525]) ){ goto $label$2 }
	$6 = [130150524]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[33])
	if ( ((uint_32)$7 > (uint_32)[65075261]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[33]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	*(($4 = ($5 + ((int_32)$4 * (int_32)[33])))) = *($1)
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 + ((int_32)((int_32)$1 / (int_32)[-33]) * (int_32)[33]))
	$6 = ($5 + ((int_32)$6 * (int_32)[33]))
	$4 = ($4 + [33])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $240 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $241($1)
	
.LABEL $label$2
	*(CALL $208()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $241(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $244($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $206($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10705])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10705])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10705])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $171(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $50($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $131(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10705])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $161(*($1), ($4 + [16]))
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11116])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11116])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	CALL $156(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11116])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11116])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $156(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $197(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $197(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = CALL $204($2, $3, [0])
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$2 }
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	$8 = [0]
	
.LOOP $label$3:
	$9 = CALL $198($4, $2, $8, ($5 - $8), $2)
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$4 }
	*($8) = *($4)
	$8 = ($4 + [8])
	*(($8 + [8])) = *($8)
	*($8) = [0]
	*($7) = (*($7) + [12])
	*($4) = (int_64)0
	$8 = ($5 + [1])
	$5 = CALL $204($2, $3, $8)
	if ( ((int_32)$5 != (int_32)[-1]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	CALL $130($0, $9)
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$5
	$8 = ($5 + [1])
	$5 = CALL $204($2, $3, $8)
	if ( ((int_32)$5 != (int_32)[-1]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	$2 = CALL $198($4, $2, $8, [-1], $2)
	$8 = ($0 + [4])
	$5 = *($8)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [8]))) ){ goto $label$6 }
	*($5) = *($4)
	*(($5 + [8])) = *(($4 + [8]))
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	*($8) = (*($8) + [12])
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$6
	CALL $130($0, $2)
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$7
	$global$0 = ($4 + [16])
}

void .FUNC $173 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [31]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [31]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$6 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	*($2 + [8]) = $0
	*($2 + [16]) = $4
	*($2 + [20]) = ($4 + [16])
	CALL $154(($2 + [16]), ($2 + [8]))
	$4 = ($4 + [24])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($8) - $4) > (int_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [10705])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [4])
	$4 = (*($6) + [4])
	*($6) = $4
	if ( ((int_32)(*($8) - $4) > (int_32)[1]) ){ goto $label$6 }
	CALL eosio_assert([0], [10705])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [4]), [2])
	$4 = (*($6) + [2])
	*($6) = $4
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $150 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)0
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL memcpy($3, $0, [8])
	$4 = ($0 + [8])
	CALL memcpy(($3 | [8]), $4, [8])
	$5 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)4148111391159058432, *(*($2 + [8])), $5, $3, [16])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *(($1 + [8]))
	$6 = *(*(($2 + [8])))
	$7 = *($0)
	*($3 + [24]) = *($4)
	*($0 + [24]) = CALL db_idx64_store($5, (int_64)4148111391159058432, $6, $7, ($3 + [24]))
	$global$0 = ($3 + [32])
	return $0
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[36]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$9 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$3 }
	$1 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($1) - $4) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [10705])
	$4 = *($7)
	
.LABEL $label$5
	$10 = ($5 + [34])
	$6 = [1]
	CALL memcpy($4, $5, [1])
	$4 = (*($7) + [1])
	*($7) = $4
	
.LOOP $label$6:
	$8 = ($5 + $6)
	if ( ((int_32)(*($1) - $4) > (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert([0], [10705])
	$4 = *($7)
	
.LABEL $label$7
	CALL memcpy($4, $8, [1])
	$4 = (*($7) + [1])
	*($7) = $4
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[34]) ){ goto $label$6 }
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$8 }
	CALL eosio_assert([0], [10705])
	$4 = *($7)
	
.LABEL $label$8
	CALL memcpy($4, $10, [2])
	$4 = (*($7) + [2])
	*($7) = $4
	$5 = ($5 + [36])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $61($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $201($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $201($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $196($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [10705])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [4])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [2])
	$4 = (*($3) + [2])
	*($3) = $4
	$3 = ($1 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [10705])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [4])
	$3 = (*($4) + [4])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [12])
	$8 = ($0 + [8])
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [10705])
	$3 = *($4)
	
.LABEL $label$5
	CALL memcpy($3, ($2 + [14]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$4 }
	$4 = ($1 + [16])
	$8 = ($0 + [8])
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [10705])
	$3 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $4, [1])
	$3 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [20])
	
.LOOP $label$7:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [10705])
	$3 = *($4)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$7 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10705])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	$5 = (*($4) + [8])
	*(($4 = ($3 + [4]))) = $5
	$2 = ($2 + [8])
	if ( ((int_32)(*(($3 + [8])) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$5 = *($4)
	
.LABEL $label$2
	CALL memcpy($5, $2, [8])
	*($4) = (*($4) + [8])
	$5 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[1]) ){ goto $label$3 }
	CALL eosio_assert([0], [10705])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $5, [2])
	*(($3 = ($3 + [4]))) = (*($3) + [2])
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1)
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$6 = ($1 + [4])
	$7 = ($0 + [8])
	if ( ((int_32)(*($7) - $3) > (int_32)[32]) ){ goto $label$3 }
	CALL eosio_assert([0], [10705])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $6, [33])
	$3 = (*($3) + [33])
	*(($3 = ($0 + [4]))) = $3
	$6 = ($1 + [40])
	if ( ((int_32)(*($7) - $3) > (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert([0], [10705])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $6, [1])
	$6 = (*($3) + [1])
	*(($3 = ($0 + [4]))) = $6
	$7 = ($1 + [48])
	if ( ((int_32)(*(($0 + [8])) - $6) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10705])
	$6 = *($3)
	
.LABEL $label$5
	CALL memcpy($6, $7, [8])
	*($3) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$7 = ($0 + [4])
	$1 = ($0 + [8])
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$5 }
	$8 = [2]
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	goto $label$3 
	
.LABEL $label$4
	$8 = [3]
	
.LABEL $label$3
	
.LOOP $label$6:
	goto $label$10 
	
.LABEL $label$12
	$4 = *($7)
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$7 }
	$8 = [2]
	goto $label$6 
	
.LABEL $label$11
	CALL eosio_assert([0], [10705])
	$4 = *($7)
	$8 = [0]
	goto $label$6 
	
.LABEL $label$10
	CALL memcpy($4, $6, [2])
	*($7) = (*($7) + [2])
	CALL $148($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$8 = [3]
	goto $label$6 
	
.LABEL $label$9
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$8
	$8 = [1]
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	goto $label$6 
	return $8
}

void .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10705])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $155(*($1), *($0 + [4]))
	CALL $155(*($1), *($0 + [8]))
	CALL $160(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($3 + [4]) - *($3)) / (int_32)[24]))
	$1 = *($1)
	$0 = *($1 + [4])
	
.LOOP $label$2:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$5 = ((int_64)$6) != (int_64)0
	*($2 + [15]) = (($5) << [7]) | ($4 & [127]))
	if ( ((int_32)(*(($1 + [8])) - $0) > (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert([0], [10705])
	$0 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, ($2 + [15]), [1])
	$0 = (*($0) + [1])
	*(($0 = ($1 + [4]))) = $0
	if ( $5 ){ goto $label$2 }
	$4 = *(($3 + [4]))
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	CALL $161($1, $0)
	$0 = ($0 + [24])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$5 }
	
.LABEL $label$4
	$global$0 = ($2 + [16])
}

int_32 .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [11121])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$5 = *($1 + [4])
	$6 = int_32(($5 - $7) >> [3])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $180($1, ($2 - $6))
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $5
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($0 + [4])
	$2 = *($6)
	$4 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [11116])
	$2 = *($6)
	
.LABEL $label$8
	CALL memcpy($7, $2, [8])
	$2 = (*($6) + [8])
	*($6) = $2
	$7 = ($7 + [8])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $224 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL $208()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL $208()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC $183 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $206($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $206(($0 + [16]))
	
.LABEL $label$1
	CALL $206(($0 + [28]))
	(unreachable)
	return (unreachable)
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10705])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = ($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10705])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $148(*($1), ($0 + [24]))
}

int_32 .FUNC $225 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL $224($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = (int_64)0
	$3 = [0]
	*($2 + [8]) = [0]
	$4 = *($1 + [16])
	$5 = *($1 + [8])
	$6 = *($1)
	$7 = (*(($1 + [28])) - *($1 + [24]))
	if ( ($7 == 0) ){ goto $label$6 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL _Znwj($7)
	*(($2 + [8])) = ($8 + $7)
	*($2) = $8
	*($2 + [4]) = $8
	$3 = *(($1 + [24]))
	$1 = (*(($1 + [28])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($8, $3, $1)
	$3 = ($8 + $1)
	*($2 + [4]) = $3
	goto $label$4 
	
.LABEL $label$6
	$8 = [0]
	$7 = [0]
	goto $label$3 
	
.LABEL $label$5
	$3 = $8
	
.LABEL $label$4
	$7 = $8
	
.LABEL $label$3
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$9 = (*($0) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($9) + $1))
	
.LABEL $label$7
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$0 = ($3 - $7)
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$7 = CALL _Znwj($0)
	*(($2 + [24])) = ($7 + $0)
	*($2 + [16]) = $7
	*($2 + [20]) = $7
	$3 = ($3 - $8)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($7, $8, $3)
	*($2 + [20]) = ($7 + $3)
	
.LABEL $label$8
	CALL void $9((int_32 $6), (int_64 $5), (int_64 $4), (int_64 ($2 + [16])), (int_32 $1))
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$9 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$10 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $206($2)
	
.LABEL $label$1
	CALL $206(($2 + [16]))
	(unreachable)
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = ($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $61(*($1), ($0 + [24]))
}

int_32 .FUNC $67 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [208])
	$global$0 = $4
	*($4 + [176]) = [8408]
	*($4 + [180]) = CALL $235([8408])
	*($4 + [32]) = *($4 + [176])
	if ( ((int_64)*(CALL $2(($4 + [128]), ($4 + [32]))) != (int_64)$2) ){ goto $label$11 }
	*(($4 + [152])) = (int_64)0
	$5 = [0]
	*(($4 + [168])) = [0]
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = (int_64)0
	$6 = *($3 + [4])
	$3 = *($3)
	*($4 + [188]) = $3
	*($4 + [184]) = $3
	*($4 + [192]) = $6
	*($4 + [200]) = ($4 + [184])
	*($4 + [92]) = ($4 + [136])
	*($4 + [96]) = ($4 + [144])
	*($4 + [100]) = (($4 + [128]) + [32])
	*($4 + [88]) = ($4 + [128])
	CALL $54(($4 + [88]), ($4 + [200]))
	*($4 + [72]) = [8580]
	*($4 + [76]) = CALL $235([8580])
	*($4 + [8]) = *($4 + [72])
	$3 = CALL $2(($4 + [80]), ($4 + [8]))
	*($4 + [64]) = [11095]
	*($4 + [68]) = CALL $235([11095])
	*($4) = *($4 + [64])
	CALL $2(($4 + [184]), $4)
	*((($4 + [88]) + [32])) = [0]
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	$2 = *($3)
	*($4 + [88]) = $2
	*($4 + [96]) = (int_64)5374672213513207808
	$3 = CALL db_find_i64($2, (int_64)5374672213513207808, (int_64)-7375584768194248704, *($4 + [136]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$10 }
	if ( ((int_32)*(CALL $49(($4 + [88]), $3) + [8]) == (int_32)($4 + [88])) ){ goto $label$12 }
	$5 = [0]
	CALL eosio_assert([0], [11753])
	
.LABEL $label$12
	$7 = *($4 + [112])
	if ( $7 ){ goto $label$9 }
	goto $label$4 
	
.LABEL $label$11
	*($4 + [48]) = [8580]
	*($4 + [52]) = CALL $235([8580])
	*($4 + [24]) = *($4 + [48])
	$3 = CALL $2(($4 + [56]), ($4 + [24]))
	*($4 + [40]) = [11106]
	*($4 + [44]) = CALL $235([11106])
	*($4 + [16]) = *($4 + [40])
	CALL $2(($4 + [88]), ($4 + [16]))
	$5 = [0]
	*(($4 + [160])) = [0]
	*($4 + [144]) = (int_64)-1
	*($4 + [152]) = (int_64)0
	$8 = *($3)
	*($4 + [128]) = $8
	*($4 + [136]) = (int_64)5374672189566484480
	$3 = CALL db_find_i64($8, (int_64)5374672189566484480, (int_64)-7375584768194248704, ((int_64)$2 | (int_64)$1))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	if ( ((int_32)*(CALL $49(($4 + [128]), $3) + [8]) == (int_32)($4 + [128])) ){ goto $label$13 }
	$5 = [0]
	CALL eosio_assert([0], [11753])
	
.LABEL $label$13
	$7 = *($4 + [152])
	if ( $7 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$10
	$5 = [1]
	$7 = *($4 + [112])
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$9
	$9 = ($4 + [116])
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$15 }
	CALL _ZdlPv($6)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($4 + [112]))
	goto $label$5 
	
.LABEL $label$8
	$5 = [1]
	$7 = *($4 + [152])
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$7
	$9 = ($4 + [156])
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$16:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$17 }
	CALL _ZdlPv($6)
	
.LABEL $label$17
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$16 }
	$3 = *(($4 + [152]))
	goto $label$1 
	
.LABEL $label$6
	$3 = $7
	
.LABEL $label$5
	*($9) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$4
	if ( ((*(($4 + [160])) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($4 + [168])))
	
.LABEL $label$3
	$global$0 = ($4 + [208])
	return $5
	
.LABEL $label$2
	$3 = $7
	
.LABEL $label$1
	*($9) = $7
	CALL _ZdlPv($3)
	$global$0 = ($4 + [208])
	return $5
}

void .FUNC $66 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL eosio_assert(((int_64)*($0) != (int_64)$1), [10996])
	*(($3 + [104])) = [0]
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)-1
	*($3 + [96]) = (int_64)0
	*($3 + [72]) = *($0)
	CALL eosio_assert(((int_64)CALL $62(($3 + [72])) != (int_64)$1), [11021])
	$4 = *($3 + [96])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($3 + [100])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$5 }
	CALL _ZdlPv($6)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($3 + [96]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	*($3 + [64]) = [8245]
	*($3 + [68]) = CALL $235([8245])
	*($3 + [24]) = *($3 + [64])
	if ( ((int_64)*(CALL $2(($3 + [72]), ($3 + [24]))) != (int_64)$1) ){ goto $label$6 }
	*($3 + [48]) = [8580]
	*($3 + [52]) = CALL $235([8580])
	*($3 + [16]) = *($3 + [48])
	$0 = CALL $2(($3 + [56]), ($3 + [16]))
	*($3 + [32]) = [11048]
	*($3 + [36]) = CALL $235([11048])
	*($3 + [8]) = *($3 + [32])
	CALL $2(($3 + [40]), ($3 + [8]))
	$6 = [0]
	*(($3 + [104])) = [0]
	*($3 + [88]) = (int_64)-1
	*($3 + [96]) = (int_64)0
	$1 = *($0)
	*($3 + [72]) = $1
	*($3 + [80]) = (int_64)4344997381888354176
	$0 = CALL db_find_i64($1, (int_64)4344997381888354176, (int_64)-7375584768194248704, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	if ( ((int_32)*(CALL $49(($3 + [72]), $0) + [8]) == (int_32)($3 + [72])) ){ goto $label$9 }
	$6 = [0]
	CALL eosio_assert([0], [11753])
	
.LABEL $label$9
	CALL eosio_assert($6, [11061])
	$4 = *($3 + [96])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert([1], [11061])
	$4 = *($3 + [96])
	if ( ($4 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = ($3 + [100])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($6)
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($3 + [96]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $4
	
.LABEL $label$10
	*($5) = $4
	CALL _ZdlPv($0)
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [112])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [11121])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $50($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [11116])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $60 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	$5 = ($global$0 - [704])
	$global$0 = $5
	*($5 + [696]) = $2
	$6 = *($4 + [8])
	$7 = *($4)
	CALL eosio_assert(((int_64)$7 > (int_64)0), [10809])
	$2 = *($0)
	*(($5 + [688])) = [0]
	*($5 + [680]) = (int_64)0
	$4 = CALL $235([8811])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$8 }
	*($5 + [680]) = ($4 << [1])
	$8 = (($5 + [680]) | [1])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [680]) = ($9 | [1])
	*($5 + [688]) = $8
	*($5 + [684]) = $4
	
.LABEL $label$7
	CALL memcpy($8, [8811], $4)
	
.LABEL $label$6
	*(($8 + $4)) = [0]
	*($5 + [672]) = [0]
	*($5 + [664]) = (int_64)0
	*(($5 + [616])) = [0]
	*($5 + [608]) = (int_64)0
	$4 = CALL $235([10839])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$11 }
	*($5 + [608]) = ($4 << [1])
	$9 = (($5 + [608]) | [1])
	$8 = $9
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$9 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [608]) = ($9 | [1])
	*($5 + [616]) = $8
	*($5 + [612]) = $4
	$9 = (($5 + [608]) | [1])
	
.LABEL $label$10
	CALL memcpy($8, [10839], $4)
	
.LABEL $label$9
	$10 = [0]
	*(($8 + $4)) = [0]
	$4 = *($5 + [608])
	$8 = ($4 & [1])
	CALL prints_l(( *($5 + [616]) ? $9 : $8 ), ( *($5 + [612]) ? uint_32($4 >> [1]) : $8 ))
	CALL prints([8953])
	$4 = *($5 + [608])
	CALL eosio_assert(((int_32)( *($5 + [612]) ? uint_32($4 >> [1]) : ($4 & [1]) ) == (int_32)[53]), [10893])
	$8 = ( *($5 + [684]) ? uint_32($8 >> [1]) : $11 )
	$8 = *($5 + [680])
	$11 = ($8 & [1])
	$4 = ( *($5 + [688]) ? (($5 + [680]) | [1]) : $11 )
	$12 = ($4 + $8)
	if ( ($8 == 0) ){ goto $label$12 }
	$9 = ( *($5 + [616]) ? $9 : (*($5 + [608]) & [1]) )
	if ( ((int_32)*($4) != (int_32)*($9)) ){ goto $label$12 }
	$9 = ($9 + [1])
	$8 = ($8 + [-1])
	
.LOOP $label$14:
	if ( ($8 == 0) ){ goto $label$13 }
	$8 = ($8 + [-1])
	$11 = ($4 + [1])
	$13 = *($9)
	$9 = ($9 + [1])
	$14 = ($4 + [1])
	$4 = $14
	if ( ((int_32)$13 == (int_32)*($11)) ){ goto $label$14 }
	$4 = $14
	goto $label$12 
	
.LABEL $label$13
	$4 = $12
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$12 == (int_32)$4), [9139])
	$4 = *($5 + [680])
	$15 = CALL $198(($5 + [592]), ($5 + [608]), ( *($5 + [684]) ? uint_32($4 >> [1]) : ($4 & [1]) ), [-1], ($5 + [608]))
	CALL eosio_assert(CALL $58(( *($15 + [8]) ? ($15 + [1]) : (*($5 + [592]) & [1]) ), ($5 + [664])), [9176])
	CALL eosio_assert(((int_32)(*($5 + [668]) - *($5 + [664])) == (int_32)[37]), [9197])
	$4 = *($5 + [664])
	*($5 + [624]) = *($4)
	*($5 + [625]) = *($4 + [1])
	*($5 + [626]) = *($4 + [2])
	*($5 + [627]) = *($4 + [3])
	*($5 + [628]) = *($4 + [4])
	*($5 + [629]) = *($4 + [5])
	$8 = *($4 + [6])
	*($5 + [631]) = *($4 + [7])
	*($5 + [630]) = $8
	*($5 + [632]) = *($4 + [8])
	*($5 + [633]) = *($4 + [9])
	*($5 + [634]) = *($4 + [10])
	*($5 + [635]) = *($4 + [11])
	*($5 + [636]) = *($4 + [12])
	*($5 + [637]) = *($4 + [13])
	*($5 + [638]) = *($4 + [14])
	*($5 + [639]) = *($4 + [15])
	*($5 + [640]) = *($4 + [16])
	*($5 + [641]) = *($4 + [17])
	*($5 + [642]) = *($4 + [18])
	*($5 + [643]) = *($4 + [19])
	*($5 + [644]) = *($4 + [20])
	*($5 + [645]) = *($4 + [21])
	*($5 + [646]) = *($4 + [22])
	*($5 + [647]) = *($4 + [23])
	*($5 + [648]) = *($4 + [24])
	*($5 + [649]) = *($4 + [25])
	*($5 + [650]) = *($4 + [26])
	*($5 + [651]) = *($4 + [27])
	*($5 + [652]) = *($4 + [28])
	*($5 + [653]) = *($4 + [29])
	*($5 + [654]) = *($4 + [30])
	*($5 + [655]) = *($4 + [31])
	*($5 + [656]) = *($4 + [32])
	CALL ripemd160(($5 + [624]), [33], ($5 + [560]))
	CALL eosio_assert((CALL $234(($5 + [560]), (*($5 + [668]) + [-4]), [4]) == 0), [9216])
	*(($4 = (($5 + [520]) + [32]))) = *($5 + [656])
	*(($8 = (($5 + [520]) + [24]))) = *($5 + [648])
	*(($9 = (($5 + [520]) + [16]))) = *($5 + [640])
	*(($11 = (($5 + [520]) + [8]))) = *($5 + [632])
	*($5 + [520]) = *($5 + [624])
	*(($13 = (($5 + [480]) + [32]))) = *($4)
	*(($4 = (($5 + [480]) + [24]))) = *($8)
	*(($8 = (($5 + [480]) + [16]))) = *($9)
	*(($9 = (($5 + [480]) + [8]))) = *($11)
	*($5 + [480]) = *($5 + [520])
	*($5 + [440]) = [1]
	*(($11 = ($5 + [452]))) = [0]
	*(($5 + [313])) = *($9)
	*(($5 + [321])) = *($8)
	*(($5 + [329])) = *($4)
	*((($5 + [304]) + [33])) = *($13)
	*($5 + [304]) = [0]
	*($5 + [338]) = [1]
	*($5 + [444 align=4]) = (int_64)0
	*($5 + [305 align=1]) = *($5 + [480])
	$4 = CALL _Znwj([36])
	$9 = ($4 + [36])
	*($11) = $9
	*($4) = *($5 + [304])
	$8 = (($5 + [304]) + [8])
	*(($4 + [8])) = *($8)
	$11 = (($5 + [304]) + [16])
	*(($4 + [16])) = *($11)
	*(($4 + [24])) = *((($5 + [304]) + [24]))
	*(($4 + [32])) = *((($5 + [304]) + [32]))
	*((($5 + [440]) + [8])) = $9
	*($5 + [444]) = $4
	*(($9 = (($5 + [440]) + [24]))) = [0]
	*($5 + [120]) = (int_64)3617214756542218240
	*($5 + [112]) = $2
	*($5 + [128]) = [1]
	*($5 + [456]) = (int_64)0
	$4 = CALL _Znwj([24])
	*((($5 + [440]) + [36])) = [0]
	$13 = ($4 + [24])
	*($9) = $13
	*($4) = *($5 + [112])
	*(($4 + [8])) = *($5 + [120])
	*(($4 + [16])) = *($5 + [128])
	*((($5 + [440]) + [20])) = $13
	*($5 + [456]) = $4
	*($5 + [468 align=4]) = (int_64)0
	*((($5 + [400]) + [8])) = (int_64)0
	*($5 + [400]) = (int_64)1
	*(($9 = (($5 + [400]) + [24]))) = [0]
	*($5 + [312]) = (int_64)3617214756542218240
	*($5 + [304]) = $2
	*($5 + [320]) = [1]
	*($5 + [416]) = (int_64)0
	$4 = CALL _Znwj([24])
	*((($5 + [400]) + [36])) = [0]
	$13 = ($4 + [24])
	*($9) = $13
	*($4) = *($5 + [304])
	*(($4 + [8])) = *($5 + [312])
	*(($4 + [16])) = *($5 + [320])
	*((($5 + [400]) + [20])) = $13
	*($5 + [416]) = $4
	*($5 + [428 align=4]) = (int_64)0
	*($5 + [312]) = $1
	*($5 + [304]) = *($0)
	$9 = CALL $127($11, ($5 + [440]))
	$11 = CALL $127(($5 + [360]), ($5 + [400]))
	$2 = *($0)
	*($5 + [288]) = [8743]
	*($5 + [292]) = CALL $235([8743])
	*($5 + [48]) = *($5 + [288])
	$16 = *(CALL $2(($5 + [296]), ($5 + [48])))
	*($5 + [272]) = [8245]
	*($5 + [276]) = CALL $235([8245])
	*($5 + [40]) = *($5 + [272])
	$4 = CALL $2(($5 + [280]), ($5 + [40]))
	*($5 + [256]) = [10927]
	*($5 + [260]) = CALL $235([10927])
	*($5 + [32]) = *($5 + [256])
	$13 = CALL $2(($5 + [264]), ($5 + [32]))
	*(($14 = (($5 + [112]) + [24]))) = [0]
	*($5 + [128]) = (int_64)0
	*($5 + [112]) = *($4)
	*($5 + [120]) = *($13)
	*(($4 = CALL _Znwj([16]))) = $2
	*($4 + [8]) = $16
	*((($5 + [112]) + [36])) = [0]
	$13 = ($4 + [16])
	*($14) = $13
	*((($5 + [112]) + [20])) = $13
	*($5 + [128]) = $4
	*($5 + [140 align=4]) = (int_64)0
	*($5 + [64]) = [0]
	*($5 + [168]) = ($5 + [64])
	*($5 + [76]) = $8
	*($5 + [80]) = $9
	*($5 + [84]) = $11
	*($5 + [72]) = ($5 + [304])
	CALL $132(($5 + [72]), ($5 + [168]))
	$4 = *($5 + [64])
	if ( ($4 == 0) ){ goto $label$16 }
	$13 = ($5 + [140])
	CALL $50($13, $4)
	$10 = *((($5 + [112]) + [32]))
	$4 = *($13)
	goto $label$15 
	
.LABEL $label$16
	$4 = [0]
	
.LABEL $label$15
	*($5 + [172]) = $4
	*($5 + [168]) = $4
	*($5 + [176]) = $10
	*($5 + [64]) = ($5 + [168])
	*($5 + [76]) = $8
	*($5 + [80]) = $9
	*($5 + [84]) = $11
	*($5 + [72]) = ($5 + [304])
	CALL $133(($5 + [72]), ($5 + [64]))
	CALL $52(($5 + [112]))
	$4 = *($5 + [140])
	if ( ($4 == 0) ){ goto $label$17 }
	*(($5 + [144])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$4 = *($5 + [128])
	if ( ($4 == 0) ){ goto $label$18 }
	*(($5 + [132])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$18
	$2 = *($0)
	*($5 + [240]) = [8743]
	*($5 + [244]) = CALL $235([8743])
	*($5 + [24]) = *($5 + [240])
	$16 = *(CALL $2(($5 + [248]), ($5 + [24])))
	*($5 + [224]) = [8245]
	*($5 + [228]) = CALL $235([8245])
	*($5 + [16]) = *($5 + [224])
	$4 = CALL $2(($5 + [232]), ($5 + [16]))
	*($5 + [208]) = [10938]
	*($5 + [212]) = CALL $235([10938])
	*($5 + [8]) = *($5 + [208])
	$8 = CALL $2(($5 + [216]), ($5 + [8]))
	*((($5 + [72]) + [24])) = $6
	*(($9 = (($5 + [112]) + [24]))) = [0]
	*($5 + [80]) = $1
	*($5 + [88]) = $7
	*($5 + [128]) = (int_64)0
	*($5 + [72]) = *($0)
	*($5 + [112]) = *($4)
	*($5 + [120]) = *($8)
	*(($4 = CALL _Znwj([16]))) = $2
	*($4 + [8]) = $16
	*(($5 + [148])) = [0]
	$8 = ($4 + [16])
	*($9) = $8
	*(($5 + [132])) = $8
	*($5 + [128]) = $4
	*($5 + [140 align=4]) = (int_64)0
	CALL $50(($5 + [140]), [32])
	$9 = (($5 + [112]) + [32])
	$4 = *($9)
	$8 = *($5 + [140])
	*($5 + [172]) = $8
	*($5 + [168]) = $8
	*($5 + [176]) = $4
	*($5 + [56]) = ($5 + [168])
	*($5 + [64]) = ($5 + [72])
	CALL $134(($5 + [64]), ($5 + [56]))
	CALL $52(($5 + [112]))
	$4 = *($5 + [140])
	if ( ($4 == 0) ){ goto $label$19 }
	*($9) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$19
	$4 = *($5 + [128])
	if ( ($4 == 0) ){ goto $label$20 }
	*(($5 + [132])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$20
	*($5 + [207]) = [0]
	$10 = *($3 + [4])
	$11 = *($3)
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$21 }
	$13 = (($5 + [112]) | [4])
	$12 = ($5 + [152])
	$17 = ($5 + [160])
	$3 = ($5 + [100])
	
.LOOP $label$22:
	*(($4 = (($5 + [168]) + [32]))) = *(($11 + [32]))
	*(($8 = (($5 + [168]) + [24]))) = *(($11 + [24]))
	*(($9 = (($5 + [168]) + [16]))) = *(($11 + [16]))
	*(($14 = (($5 + [168]) + [8]))) = *(($11 + [8]))
	*($5 + [168]) = *($11)
	*($12) = [0]
	*($17) = (int_64)0
	*($13) = *($5 + [168])
	*(($13 + [8])) = *($14)
	*(($13 + [16])) = *($9)
	*(($13 + [24])) = *($8)
	*(($13 + [32])) = *($4)
	*($5 + [112]) = [0]
	*((($5 + [72]) + [8])) = $1
	*((($5 + [72]) + [16])) = (int_64)-1
	*(($14 = (($5 + [72]) + [24]))) = (int_64)0
	*((($5 + [72]) + [32])) = [0]
	$2 = *($0)
	*($5 + [72]) = $2
	*($5 + [68]) = ($5 + [112])
	*($5 + [64]) = ($5 + [207])
	CALL $135(($5 + [56]), ($5 + [72]), $2, ($5 + [64]))
	*($5 + [207]) = (*($5 + [207]) + [1])
	$9 = *($14)
	if ( ($9 == 0) ){ goto $label$23 }
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$25 }
	
.LOOP $label$26:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$27 }
	CALL _ZdlPv($8)
	
.LABEL $label$27
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$26 }
	$4 = *($14)
	goto $label$24 
	
.LABEL $label$25
	$4 = $9
	
.LABEL $label$24
	*($3) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$23
	$11 = ($11 + [33])
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$22 }
	
.LABEL $label$21
	*($5 + [207]) = [0]
	$2 = *($5 + [696])
	if ( (int_64)($2 == 0) ){ goto $label$28 }
	if ( ((int_64)$2 == (int_64)$1) ){ goto $label$28 }
	*(($5 + [144])) = [0]
	*($5 + [120]) = $1
	*($5 + [128]) = (int_64)-1
	*($5 + [136]) = (int_64)0
	*($5 + [148]) = [0]
	$2 = *($0)
	*($5 + [112]) = $2
	*($5 + [76]) = ($5 + [696])
	*($5 + [72]) = ($5 + [207])
	CALL $136(($5 + [168]), ($5 + [112]), $2, ($5 + [72]))
	$9 = *($5 + [136])
	if ( ($9 == 0) ){ goto $label$28 }
	$11 = ($5 + [140])
	$4 = *($11)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$30 }
	
.LOOP $label$31:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$32 }
	CALL _ZdlPv($8)
	
.LABEL $label$32
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$31 }
	$4 = *(($5 + [136]))
	goto $label$29 
	
.LABEL $label$30
	$4 = $9
	
.LABEL $label$29
	*($11) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$28
	$4 = *(($5 + [388]))
	if ( ($4 == 0) ){ goto $label$33 }
	*(($5 + [392])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$33
	$4 = *(($5 + [376]))
	if ( ($4 == 0) ){ goto $label$34 }
	*(($5 + [380])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$34
	$4 = *(($5 + [364]))
	if ( ($4 == 0) ){ goto $label$35 }
	*(($5 + [368])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$35
	$4 = *(($5 + [348]))
	if ( ($4 == 0) ){ goto $label$36 }
	*(($5 + [352])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$36
	$4 = *(($5 + [336]))
	if ( ($4 == 0) ){ goto $label$37 }
	*(($5 + [340])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$37
	$4 = *(($5 + [324]))
	if ( ($4 == 0) ){ goto $label$38 }
	*(($5 + [328])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$38
	$4 = *(($5 + [428]))
	if ( ($4 == 0) ){ goto $label$39 }
	*(($5 + [432])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$39
	$4 = *($5 + [416])
	if ( ($4 == 0) ){ goto $label$40 }
	*(($5 + [420])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$40
	$4 = *($5 + [404])
	if ( ($4 == 0) ){ goto $label$41 }
	*(($5 + [408])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$41
	$4 = *(($5 + [468]))
	if ( ($4 == 0) ){ goto $label$42 }
	*(($5 + [472])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$42
	$4 = *($5 + [456])
	if ( ($4 == 0) ){ goto $label$43 }
	*(($5 + [460])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$43
	$4 = *($5 + [444])
	if ( ($4 == 0) ){ goto $label$44 }
	*(($5 + [448])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$44
	if ( (*($5 + [592]) & [1]) ){ goto $label$46 }
	if ( (*($5 + [608]) & [1]) ){ goto $label$45 }
	goto $label$3 
	
.LABEL $label$46
	CALL _ZdlPv(*(($15 + [8])))
	if ( ((*($5 + [608]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$45
	CALL _ZdlPv(*(($5 + [616])))
	$4 = *($5 + [664])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $196(($5 + [680]))
	
.LABEL $label$4
	CALL $196(($5 + [608]))
	
.LABEL $label$3
	$4 = *($5 + [664])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($5 + [668]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	if ( ((*($5 + [680]) & [1]) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*(($5 + [688])))
	
.LABEL $label$47
	$global$0 = ($5 + [704])
	(unreachable)
	(unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $206($0)
}

int_64 .FUNC $62 (int_32 $0)
{
	int_32 $1
	$1 = *(($0 + [28]))
	if ( ((int_32)$1 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$1 = *(($1 + [-24]))
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$4
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-8279617226269523968, (int_64)-8279617226269523968)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $137($0, $1)
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$2
	return *($1)
	
.LABEL $label$1
	CALL eosio_assert([0], [11804])
	return (unreachable)
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [528])
	$global$0 = $3
	CALL memory()
	*($3 + [512]) = [8192]
	*($3 + [516]) = CALL $235([8192])
	*($3 + [232]) = *($3 + [512])
	CALL $2(($3 + [520]), ($3 + [232]))
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	*($3 + [504]) = [8245]
	*($3 + [508]) = CALL $235([8245])
	*($3 + [224]) = *($3 + [504])
	CALL $2(($3 + [520]), ($3 + [224]))
	CALL eosio_assert(((int_64)$1 == (int_64)6138663577826885632), [8344])
	
.LABEL $label$1
	*($3 + [496]) = [8408]
	*($3 + [500]) = CALL $235([8408])
	*($3 + [216]) = *($3 + [496])
	CALL $2(($3 + [520]), ($3 + [216]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$4 }
	CALL $3(($3 + [448]))
	CALL $4(($3 + [448]), $1)
	if ( ((*($3 + [480]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($3 + [488])))
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $210([0])
	$global$0 = ($3 + [528])
	return (unreachable)
	
.LABEL $label$2
	if ( ((int_64)$2 > (int_64)-4417304263340228609) ){ goto $label$30 }
	if ( ((int_64)$2 <= (int_64)-4997502822542475265) ){ goto $label$29 }
	if ( ((int_64)$2 <= (int_64)-4849915395346792449) ){ goto $label$27 }
	if ( ((int_64)$2 > (int_64)-4417350813033586177) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)-4849915395346792448) ){ goto $label$21 }
	if ( ((int_64)$2 != (int_64)-4420684204901875712) ){ goto $label$5 }
	*($3 + [436]) = [0]
	*($3 + [432]) = [1]
	*($3 + [16]) = *($3 + [432])
	CALL $6($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$30
	if ( ((int_64)$2 <= (int_64)3626248142863302655) ){ goto $label$28 }
	if ( ((int_64)$2 <= (int_64)4730614995172429823) ){ goto $label$26 }
	if ( ((int_64)$2 > (int_64)6714800374168944639) ){ goto $label$22 }
	if ( ((int_64)$2 == (int_64)4730614995172429824) ){ goto $label$20 }
	if ( ((int_64)$2 != (int_64)5031766155850039296) ){ goto $label$5 }
	*($3 + [444]) = [0]
	*($3 + [440]) = [2]
	*($3 + [8]) = *($3 + [440])
	CALL $8($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$29
	if ( ((int_64)$2 > (int_64)-7811085199889782897) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)-8966375686990200832) ){ goto $label$19 }
	if ( ((int_64)$2 == (int_64)-7901841003298324480) ){ goto $label$18 }
	if ( ((int_64)$2 != (int_64)-7901691861026209792) ){ goto $label$5 }
	*($3 + [284]) = [0]
	*($3 + [280]) = [3]
	*($3 + [168]) = *($3 + [280])
	CALL $10($1, $1, ($3 + [168]))
	CALL eosio_exit([0])
	
.LABEL $label$28
	if ( ((int_64)$2 > (int_64)-3664690617297518593) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)-4417304263340228608) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)-4417158008409161728) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)-4417085848986476032) ){ goto $label$5 }
	*($3 + [356]) = [0]
	*($3 + [352]) = [4]
	*($3 + [96]) = *($3 + [352])
	CALL $12($1, $1, ($3 + [96]))
	CALL eosio_exit([0])
	
.LABEL $label$27
	if ( ((int_64)$2 == (int_64)-4997502822542475264) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)-4997502815876857856) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)-4849915446028664832) ){ goto $label$5 }
	*($3 + [260]) = [0]
	*($3 + [256]) = [5]
	*($3 + [192]) = *($3 + [256])
	CALL $14($1, $1, ($3 + [192]))
	CALL eosio_exit([0])
	
.LABEL $label$26
	if ( ((int_64)$2 == (int_64)3626248142863302656) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)3626397281305837568) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)3626397285135417344) ){ goto $label$5 }
	*($3 + [292]) = [0]
	*($3 + [288]) = [6]
	*($3 + [160]) = *($3 + [288])
	CALL $16($1, $1, ($3 + [160]))
	CALL eosio_exit([0])
	
.LABEL $label$25
	if ( ((int_64)$2 == (int_64)-7811085199889782896) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-6219045423292301312) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-4997502823510310912) ){ goto $label$5 }
	*($3 + [316]) = [0]
	*($3 + [312]) = [7]
	*($3 + [136]) = *($3 + [312])
	CALL $18($1, $1, ($3 + [136]))
	CALL eosio_exit([0])
	
.LABEL $label$24
	if ( ((int_64)$2 == (int_64)-3664690617297518592) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-3660965144402853888) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-3075276117261447168) ){ goto $label$5 }
	*($3 + [420]) = [0]
	*($3 + [416]) = [8]
	*($3 + [32]) = *($3 + [416])
	CALL $20($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$23
	if ( ((int_64)$2 == (int_64)-4417350813033586176) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4417335977378742272) ){ goto $label$5 }
	*($3 + [380]) = [0]
	*($3 + [376]) = [9]
	*($3 + [72]) = *($3 + [376])
	CALL $18($1, $1, ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$22
	if ( ((int_64)$2 == (int_64)6714800374168944640) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)6714800374518530048) ){ goto $label$5 }
	*($3 + [252]) = [0]
	*($3 + [248]) = [10]
	*($3 + [200]) = *($3 + [248])
	CALL $23($1, $1, ($3 + [200]))
	CALL eosio_exit([0])
	
.LABEL $label$21
	*($3 + [268]) = [0]
	*($3 + [264]) = [11]
	*($3 + [184]) = *($3 + [264])
	CALL $25($1, $1, ($3 + [184]))
	CALL eosio_exit([0])
	
.LABEL $label$20
	*($3 + [404]) = [0]
	*($3 + [400]) = [12]
	*($3 + [48]) = *($3 + [400])
	CALL $20($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$19
	*($3 + [396]) = [0]
	*($3 + [392]) = [13]
	*($3 + [56]) = *($3 + [392])
	CALL $20($1, $1, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$18
	*($3 + [372]) = [0]
	*($3 + [368]) = [14]
	*($3 + [80]) = *($3 + [368])
	CALL $29($1, $1, ($3 + [80]))
	CALL eosio_exit([0])
	
.LABEL $label$17
	*($3 + [332]) = [0]
	*($3 + [328]) = [15]
	*($3 + [120]) = *($3 + [328])
	CALL $31($1, $1, ($3 + [120]))
	CALL eosio_exit([0])
	
.LABEL $label$16
	*($3 + [412]) = [0]
	*($3 + [408]) = [16]
	*($3 + [40]) = *($3 + [408])
	CALL $20($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$15
	*($3 + [324]) = [0]
	*($3 + [320]) = [17]
	*($3 + [128]) = *($3 + [320])
	CALL $34($1, $1, ($3 + [128]))
	CALL eosio_exit([0])
	
.LABEL $label$14
	*($3 + [348]) = [0]
	*($3 + [344]) = [18]
	*($3 + [104]) = *($3 + [344])
	CALL $36($1, $1, ($3 + [104]))
	CALL eosio_exit([0])
	
.LABEL $label$13
	*($3 + [364]) = [0]
	*($3 + [360]) = [19]
	*($3 + [88]) = *($3 + [360])
	CALL $29($1, $1, ($3 + [88]))
	CALL eosio_exit([0])
	
.LABEL $label$12
	*($3 + [276]) = [0]
	*($3 + [272]) = [20]
	*($3 + [176]) = *($3 + [272])
	CALL $25($1, $1, ($3 + [176]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	*($3 + [244]) = [0]
	*($3 + [240]) = [21]
	*($3 + [208]) = *($3 + [240])
	CALL $40($1, $1, ($3 + [208]))
	CALL eosio_exit([0])
	
.LABEL $label$10
	*($3 + [388]) = [0]
	*($3 + [384]) = [22]
	*($3 + [64]) = *($3 + [384])
	CALL $42($1, $1, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$9
	*($3 + [300]) = [0]
	*($3 + [296]) = [23]
	*($3 + [152]) = *($3 + [296])
	CALL $44($1, $1, ($3 + [152]))
	CALL eosio_exit([0])
	
.LABEL $label$8
	*($3 + [308]) = [0]
	*($3 + [304]) = [24]
	*($3 + [144]) = *($3 + [304])
	CALL $44($1, $1, ($3 + [144]))
	CALL eosio_exit([0])
	
.LABEL $label$7
	*($3 + [340]) = [0]
	*($3 + [336]) = [25]
	*($3 + [112]) = *($3 + [336])
	CALL $47($1, $1, ($3 + [112]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [428]) = [0]
	*($3 + [424]) = [26]
	*($3 + [24]) = *($3 + [424])
	CALL $23($1, $1, ($3 + [24]))
	
.LABEL $label$5
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $227 (int_32 $0, int_32 $1)
{
	return CALL $226($0, $1)
}

int_32 .FUNC $228 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL $227([20688], *([0] + [20]))
	$1 = [0]
	
.LOOP $label$4:
	if ( ((int_32)*(($1 + [20592])) == (int_32)$0) ){ goto $label$3 }
	$2 = [87]
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[87]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = [20688]
	
.LOOP $label$5:
	$0 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $0 ){ goto $label$5 }
	$1 = $3
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	return CALL $227($3, *([0] + [20]))
	return .LABEL $label$1
}

void .FUNC $229 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$6 = ($5) & [32767]
	if ( ((int_32)$6) == (int_32)[32767]) ){ goto $label$1 }
	if ( $6 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($4, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL $229(($4 + [16]), *($4), *(($4 + [8])), $3)
	$5 = (*($3) + [-120])
	$2 = *($4 + [24])
	$1 = *($4 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($5 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($5 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	*($3) = $5
	
.LABEL $label$1
	*($0) = $1
	*($0 + [8]) = $2
	$global$0 = ($4 + [32])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [16])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[15]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [16])
	*(($3 = ($3 + [4]))) = (*($3) + [16])
	CALL $61(*($1), ($4 + [32]))
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$4 = *($4 + [4])
	*(($1 + [56])) = *(($4 + [48]))
	*(($1 + [48])) = *(($4 + [40]))
	*(($1 + [40])) = *(($4 + [32]))
	*(($1 + [32])) = *(($4 + [24]))
	*(($1 + [24])) = *(($4 + [16]))
	*(($1 + [16])) = *(($4 + [8]))
	*($1 + [8]) = *($4)
	$6 = ($1 + [8])
	$7 = *($1 + [8])
	$4 = [50]
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	$8 = $2
	if ( ((int_32)$4 > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10705])
	$8 = *($3 + [4])
	
.LABEL $label$4
	CALL memcpy($8, $1, [8])
	*($3 + [4]) = ($8 + [8])
	CALL $155($3, $6)
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($5 + [8]), (int_64)-9026177492230078464, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $244($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11493])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11539])
	
.LABEL $label$2
	$3 = *($3)
	*($1 + [8]) = *($3)
	*(($1 + [16])) = *(($3 + [8]))
	*(($1 + [24])) = *(($3 + [16]))
	*(($1 + [32])) = *(($3 + [24]))
	*(($1 + [40])) = *(($3 + [32]))
	*(($1 + [48])) = *(($3 + [40]))
	*(($1 + [56])) = *(($3 + [48]))
	$6 = ($1 + [8])
	$7 = *($1)
	$8 = *($1 + [8])
	$3 = [50]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $241($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	$9 = $4
	if ( ((int_32)$3 > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10705])
	$9 = *($5 + [4])
	
.LABEL $label$6
	CALL memcpy($9, $1, [8])
	*($5 + [4]) = ($9 + [8])
	CALL $155($5, $6)
	CALL db_update_i64(*($1 + [68]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $244($4)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	$7 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [11171])
	
.LABEL $label$5
	$4 = CALL $241($6)
	$7 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $6)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $6)
	*(($5 = CALL _Znwj([80])) + [64]) = $0
	*($5 + [8]) = [0]
	$8 = ($5 + [8])
	$2 = $4
	if ( ((uint_32)$6 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [11116])
	$2 = *($3 + [36])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $163(($3 + [32]), $8)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($6 + [8]) = $9
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($2) = ($6 + [24])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $88(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $244($4)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $163(*($1), ($4 + [16]))
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11493])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11539])
	
.LABEL $label$2
	$6 = ($1 + [8])
	*($5 + [8]) = *($6)
	*($6) = *(*($3))
	$7 = *($1)
	$3 = $4
	$4 = ($3 + [-16])
	$global$0 = $4
	CALL memcpy($4, $1, [8])
	CALL memcpy(($3 + [-8]), $6, [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($5 + [24]) = *($6)
	if ( (CALL $234(($5 + [8]), ($5 + [24]), [8]) == 0) ){ goto $label$4 }
	$6 = ($1 + [24])
	$1 = *($6)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$5 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4148111391159058432, ($5 + [16]), $7)
	*($6) = $1
	
.LABEL $label$5
	CALL db_idx64_update($1, $2, ($5 + [24]))
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [11171])
	
.LABEL $label$5
	$2 = CALL $241($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5 + [8]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [11116])
	
.LABEL $label$7
	$7 = ($5 + [8])
	CALL memcpy($5, $2, [8])
	$8 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [11116])
	
.LABEL $label$8
	CALL memcpy($7, $8, [8])
	*($5 + [24]) = [-1]
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $83(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $244($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4148111391159058432, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [16]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [11753])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $81($7, CALL $fimport$2(*($7), *($7 + [8]), (int_64)4148111391159058432, $6))
	if ( ((int_32)*($4 + [16]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$2
	*(($4 + [24])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10705])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[15]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [16])
	*(($3 = ($3 + [4]))) = (*($3) + [16])
	CALL $160(*($1), *($0 + [8]))
	CALL $148(*($1), *($0 + [12]))
}

void .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$4 = *($4 + [4])
	*(($1 + [56])) = *(($4 + [48]))
	*(($1 + [48])) = *(($4 + [40]))
	*(($1 + [40])) = *(($4 + [32]))
	*(($1 + [32])) = *(($4 + [24]))
	*(($1 + [24])) = *(($4 + [16]))
	*(($1 + [16])) = *(($4 + [8]))
	*($1 + [8]) = *($4)
	$6 = ($1 + [8])
	$7 = *($1 + [8])
	$4 = [50]
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	$8 = $2
	if ( ((int_32)$4 > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10705])
	$8 = *($3 + [4])
	
.LABEL $label$4
	CALL memcpy($8, $1, [8])
	*($3 + [4]) = ($8 + [8])
	CALL $155($3, $6)
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($5 + [8]), (int_64)-9026177492230078464, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $244($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [10705])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $145 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL _ZdlPv($4)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($3 << [1])
	$5 = ( $1 ? $4 : ($4 <= $1) )
	
.LABEL $label$6
	$4 = CALL _Znwj($5)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $5)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = *($2)
	$4 = (*($0) + [1])
	*($0) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $4)
	$5 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($5 == 0) ){ goto $label$8 }
	CALL memset($4, *($2), $5)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$4 = ($0 + [4])
	$0 = *($4)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($4) + [1])
	*($4) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $206($0)
}

void .FUNC $144 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [20]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11493])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11539])
	
.LABEL $label$2
	$6 = *($1)
	CALL prints([11649])
	$7 = *(*($3 + [4]))
	$8 = ((int_32)($7 - *(*($3))) / (int_32)[24])
	$9 = *($3 + [8])
	if ( ((int_64)*($7 + [8]) == (int_64)*($9 + [8])) ){ goto $label$3 }
	CALL eosio_assert([0], [11434])
	
.LABEL $label$3
	if ( ((int_64)*($7) != (int_64)*($9)) ){ goto $label$6 }
	if ( ((int_64)*($7 + [16]) != (int_64)*($9 + [16])) ){ goto $label$6 }
	$3 = *(*(($3 + [4])))
	$10 = ($3 + [24])
	$9 = ($1 + [12])
	$7 = (*($9) - $10)
	$8 = ((int_32)$7 / (int_32)[24])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($3, $10, $7)
	
.LABEL $label$7
	*($9) = ($3 + ((int_32)$8 * (int_32)[24]))
	if ( ((int_64)$6 != (int_64)*($1)) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *(($3 + [8]))
	$7 = *(*(($3 + [4])))
	if ( ((int_64)*($7 + [16]) == (int_64)*($3 + [16])) ){ goto $label$8 }
	CALL eosio_assert([0], [11420])
	
.LABEL $label$8
	$11 = *($7)
	$12 = *($7 + [8])
	if ( ((int_64)*($3 + [8]) == (int_64)$12) ){ goto $label$9 }
	CALL eosio_assert([0], [11662])
	
.LABEL $label$9
	$11 = (int_64)
	if ( ((int_64)$11($11 - *($3))) <= (int_64)-4611686018427387904) ){ goto $label$11 }
	if ( ((int_64)$11 < (int_64)4611686018427387904) ){ goto $label$10 }
	CALL eosio_assert([0], [11732])
	goto $label$10 
	
.LABEL $label$11
	CALL eosio_assert([0], [11710])
	
.LABEL $label$10
	$13 = *(($7 + [16]))
	*(($3 = (*($1 + [8]) + ((int_32)$8 * (int_32)[24]))) + [8]) = $12
	*($3) = $11
	*($3 + [16]) = $13
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [11590])
	
.LABEL $label$4
	$9 = *($1 + [8])
	$7 = *(($1 + [12]))
	$8 = ($7 - $9)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[24]))
	$3 = [32]
	
.LOOP $label$12:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$16 }
	$7 = (((int_32)((uint_32)($8 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $3)
	if ( ($7 <= [513]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$7 = ($3 + [-24])
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$14 }
	
.LABEL $label$15
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	goto $label$13 
	
.LABEL $label$14
	$3 = CALL $241($7)
	
.LABEL $label$13
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	CALL $162($5, $1)
	CALL db_update_i64(*($1 + [24]), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$19 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL $244($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$17 }
	
.LABEL $label$18
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$17
	$global$0 = ($5 + [16])
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10705])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10705])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $141 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [10945])
	
.LABEL $label$1
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = (int_64)0
	*($5) = *(*($3))
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-8279617226269523968, $2, (int_64)-8279617226269523968, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-8279617226269523968) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)-8279617226269523967
	
.LABEL $label$2
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-8279617226269523968
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)-8279617226269523968
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $173(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $140 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11493])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11539])
	
.LABEL $label$2
	*($1) = *(*($3))
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $3, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-8279617226269523968) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)-8279617226269523967
	
.LABEL $label$3
	$global$0 = $5
}

void .FUNC $143 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [144]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11493])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11539])
	
.LABEL $label$2
	$6 = *($1)
	CALL prints([11649])
	$7 = *(*($3 + [4]))
	$8 = ((int_32)($7 - *(*($3))) / (int_32)[24])
	$9 = *($3 + [8])
	if ( ((int_64)*($7 + [8]) == (int_64)*($9 + [8])) ){ goto $label$3 }
	CALL eosio_assert([0], [11434])
	
.LABEL $label$3
	if ( ((int_64)*($7) != (int_64)*($9)) ){ goto $label$6 }
	if ( ((int_64)*($7 + [16]) != (int_64)*($9 + [16])) ){ goto $label$6 }
	$3 = *(*(($3 + [4])))
	$10 = ($3 + [24])
	$9 = ($1 + [136])
	$7 = (*($9) - $10)
	$8 = ((int_32)$7 / (int_32)[24])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($3, $10, $7)
	
.LABEL $label$7
	*($9) = ($3 + ((int_32)$8 * (int_32)[24]))
	if ( ((int_64)$6 != (int_64)*($1)) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *(($3 + [8]))
	$7 = *(*(($3 + [4])))
	if ( ((int_64)*($7 + [16]) == (int_64)*($3 + [16])) ){ goto $label$8 }
	CALL eosio_assert([0], [11420])
	
.LABEL $label$8
	$11 = *($7)
	$12 = *($7 + [8])
	if ( ((int_64)*($3 + [8]) == (int_64)$12) ){ goto $label$9 }
	CALL eosio_assert([0], [11662])
	
.LABEL $label$9
	$11 = (int_64)
	if ( ((int_64)$11($11 - *($3))) <= (int_64)-4611686018427387904) ){ goto $label$11 }
	if ( ((int_64)$11 < (int_64)4611686018427387904) ){ goto $label$10 }
	CALL eosio_assert([0], [11732])
	goto $label$10 
	
.LABEL $label$11
	CALL eosio_assert([0], [11710])
	
.LABEL $label$10
	$13 = *(($7 + [16]))
	*(($3 = (*($1 + [132]) + ((int_32)$8 * (int_32)[24]))) + [8]) = $12
	*($3) = $11
	*($3 + [16]) = $13
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [11590])
	
.LABEL $label$4
	$11 = *($1 + [8])
	$3 = [92]
	
.LOOP $label$12:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$12 }
	$11 = *($1 + [64])
	
.LOOP $label$13:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$13 }
	$9 = ($1 + [120])
	$8 = *($1 + [120])
	$7 = *(($1 + [124]))
	$10 = ($7 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	
.LOOP $label$14:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$14 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$15 }
	$3 = (($10 & [-8]) + $3)
	
.LABEL $label$15
	$8 = ($1 + [132])
	$10 = *($1 + [132])
	$7 = *(($1 + [136]))
	$14 = ($7 - $10)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$14 / (int_32)[24]))
	
.LOOP $label$16:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$17 }
	$3 = ((((int_32)((uint_32)($14 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $3) + [24])
	
.LABEL $label$17
	if ( ($3 <= [513]) ){ goto $label$19 }
	$7 = CALL $241($3)
	goto $label$18 
	
.LABEL $label$19
	$7 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$18
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = ($7 + $3)
	*($5 + [16]) = $5
	*($5 + [36]) = $9
	*($5 + [40]) = $8
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [32]) = ($1 + [64])
	CALL $159(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [148]), $2, $7, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$22 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL $244($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$20 }
	
.LABEL $label$21
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$20
	$global$0 = ($5 + [48])
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11194])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11239])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [11289])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [11171])
	
.LABEL $label$5
	$2 = CALL $241($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [11116])
	
.LABEL $label$7
	$7 = ($5 + [8])
	CALL memcpy($5, $2, [8])
	$8 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [11116])
	
.LABEL $label$8
	CALL memcpy($7, $8, [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $74(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $244($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	$6 = ($2 + ((int_32)$5 * (int_32)[40]))
	$7 = ($2 + ((int_32)$3 * (int_32)[40]))
	$2 = CALL $69($7, $1)
	$8 = ($2 + [40])
	$5 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$6 }
	$10 = ($5 - $9)
	$1 = [0]
	
.LOOP $label$7:
	$2 = ($9 + $1)
	*((($5 = ($7 + $1)) + [-32])) = *(($2 + [-32]))
	*(($5 + [-40])) = *(($2 + [-40]))
	*(($3 = ($5 + [-24]))) = (int_64)0
	*(($4 = ($5 + [-16]))) = [0]
	$11 = ($2 + [-24])
	*($3) = *($11)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($5 + [-12]))) = (int_64)0
	*(($5 = ($5 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($11) = (int_64)0
	$2 = ($2 + [-4])
	*($5) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$7 }
	$2 = ($7 + $1)
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($5 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($5 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($5 + [-40])
	$1 = *(($5 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = [0]
	CALL $138(($4 + [16]), $0)
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $50($4, $6)
	$5 = *($4 + [4])
	$6 = *($4)
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $6
	*($4 + [16]) = $6
	*($4 + [24]) = $5
	CALL $139(($4 + [16]), $0)
	$0 = *($4)
	CALL send_deferred($1, $2, $0, (*($4 + [4]) - $0), $3)
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$3 }
	*($4 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($4 + [32])
}

void .FUNC $76 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	$0 = CALL db_find_i64($3, $3, (int_64)-8279617068006899712, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $73($2, $0)
	if ( ((int_32)*($0 + [16]) == (int_32)$2) ){ goto $label$2 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$2
	$4 = CALL db_next_i64(*($0 + [20]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL $73($2, $4)
	
.LABEL $label$3
	CALL $142($2, $0)
	CALL prints([11125])
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $61(*($1), ($4 + [16]))
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-8279617226269523968, (int_64)-8279617226269523968)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $137($0, $4)
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$2
	*($3) = $1
	CALL $140($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $141($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = (int_64)0
	$3 = [0]
	*($2 + [8]) = [0]
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($6 == 0) ){ goto $label$6 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL _Znwj($6)
	*(($2 + [8])) = ($7 + $6)
	*($2) = $7
	*($2 + [4]) = $7
	$3 = *(($1 + [16]))
	$1 = (*(($1 + [20])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($7, $3, $1)
	$3 = ($7 + $1)
	*($2 + [4]) = $3
	goto $label$4 
	
.LABEL $label$6
	$7 = [0]
	$6 = [0]
	goto $label$3 
	
.LABEL $label$5
	$3 = $7
	
.LABEL $label$4
	$6 = $7
	
.LABEL $label$3
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$8 = (*($0) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($8) + $1))
	
.LABEL $label$7
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$0 = ($3 - $6)
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = CALL _Znwj($0)
	*(($2 + [24])) = ($6 + $0)
	*($2 + [16]) = $6
	*($2 + [20]) = $6
	$3 = ($3 - $7)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($6, $7, $3)
	*($2 + [20]) = ($6 + $3)
	
.LABEL $label$8
	CALL void $8((int_32 $5), (int_64 $4), (int_64 ($2 + [16])), (int_32 $1))
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$9 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$10 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $206($2)
	
.LABEL $label$1
	CALL $206(($2 + [16]))
	(unreachable)
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($4 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11116])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

int_32 .FUNC $241 (int_32 $0)
{
	return CALL $242([12192], $0)
}

int_32 .FUNC $223 (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [2] ? [3] : (int_64)(((int_64)$2 | (int_64)$0) == 0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11493])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11539])
	
.LABEL $label$2
	*($5 + [24]) = *(($1 + [24]))
	$6 = ($1 + [16])
	*($5 + [16]) = *($6)
	$7 = *($3)
	$8 = *($1)
	$9 = ($1 + [36])
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)*(($1 + [40]))) ){ goto $label$5 }
	*($9) = ($3 + [8])
	*($3) = *($7)
	if ( ((int_64)$8 == (int_64)*($1)) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	CALL $183(($1 + [32]), $7)
	if ( ((int_64)$8 == (int_64)*($1)) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [11590])
	
.LABEL $label$3
	$7 = ($1 + [32])
	$10 = *($1 + [32])
	$9 = *(($1 + [36]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	$3 = [24]
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$7 }
	$3 = (($11 & [-8]) + $3)
	
.LABEL $label$7
	$9 = ($1 + [44])
	$11 = *($1 + [44])
	$10 = *(($1 + [48]))
	$3 = (($3 + $10) - $11)
	$12 = (CASTING uint_64)(uint_32 ($10 - $11))
	
.LOOP $label$8:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$8 }
	if ( ($3 <= [513]) ){ goto $label$10 }
	$4 = CALL $241($3)
	goto $label$9 
	
.LABEL $label$10
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$9
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [32]) = $5
	*($5 + [52]) = $6
	*($5 + [56]) = $7
	*($5 + [60]) = $9
	*($5 + [48]) = $1
	CALL $182(($5 + [48]), ($5 + [32]))
	CALL db_update_i64(*(($1 + [60])), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$11 }
	CALL $244($4)
	
.LABEL $label$11
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*($5 + [48]) = *($6)
	*($5 + [56]) = *(($6 + [8]))
	if ( (CALL $234(($5 + [16]), ($5 + [48]), [16]) == 0) ){ goto $label$13 }
	$3 = *($1 + [64])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$14 }
	$3 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-5915103610240237568, ($5 + [32]), $8)
	*(($1 + [64])) = $3
	
.LABEL $label$14
	CALL db_idx128_update($3, $2, ($5 + [48]))
	
.LABEL $label$13
	$global$0 = ($5 + [64])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11116])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [24])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [11116])
	$5 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	*($2 + [8]) = $4
	CALL $164(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $239 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $208())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $240($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $238 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [44])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [48])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$2 = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [36])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $95 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [64])
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [11141])
	$2 = *(($0 + [4]))
	$3 = *($2 + [64])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = *(*($0))
	$3 = CALL db_idx128_find_primary(*($3), *($3 + [8]), (int_64)-5915103610240237568, $1, *($2))
	*(*(($0 + [4])) + [64]) = $3
	
.LABEL $label$1
	*($1) = (int_64)0
	$4 = [0]
	$5 = CALL db_idx128_next($3, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$6 = *($1)
	$2 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$8:
	$3 = ($2 + [-24])
	$4 = *($3)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$7 }
	$2 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)*($4 + [56]) == (int_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [11753])
	goto $label$5 
	
.LABEL $label$6
	$4 = [0]
	$3 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)-5915103610240237568, $6)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $177($7, $3)
	if ( ((int_32)*($4 + [56]) == (int_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$5
	*($4 + [64]) = $5
	
.LABEL $label$4
	*(($0 + [4])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11194])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11239])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [11289])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$3 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	$8 = *($6 + [44])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($6 + [48])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	$8 = *($6 + [32])
	if ( ($8 == 0) ){ goto $label$14 }
	*(($6 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$14
	CALL _ZdlPv($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$3 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$15:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$16 }
	$8 = *($9 + [44])
	if ( ($8 == 0) ){ goto $label$17 }
	*(($9 + [48])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$17
	$8 = *($9 + [32])
	if ( ($8 == 0) ){ goto $label$18 }
	*(($9 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$18
	CALL _ZdlPv($9)
	
.LABEL $label$16
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$15 }
	
.LABEL $label$3
	*(($0 + [28])) = $3
	CALL db_remove_i64(*(($1 + [60])))
	$9 = *($1 + [64])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$20 }
	$9 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-5915103610240237568, $2, *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL db_idx128_remove($9)
	
.LABEL $label$19
	$global$0 = ($2 + [16])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [16])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[15]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [16])
	*(($3 = ($3 + [4]))) = (*($3) + [16])
	$0 = ($4 + [32])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11116])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = (int_64)0
	$3 = [0]
	*($2 + [8]) = [0]
	$4 = *(($1 + [24]))
	$5 = *($1 + [16])
	$6 = *($1)
	$7 = (*(($1 + [36])) - *($1 + [32]))
	if ( ($7 == 0) ){ goto $label$6 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL _Znwj($7)
	*(($2 + [8])) = ($8 + $7)
	*($2) = $8
	*($2 + [4]) = $8
	$3 = *(($1 + [32]))
	$1 = (*(($1 + [36])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($8, $3, $1)
	$3 = ($8 + $1)
	*($2 + [4]) = $3
	goto $label$4 
	
.LABEL $label$6
	$8 = [0]
	$7 = [0]
	goto $label$3 
	
.LABEL $label$5
	$3 = $8
	
.LABEL $label$4
	$7 = $8
	
.LABEL $label$3
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$9 = (*($0) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($9) + $1))
	
.LABEL $label$7
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$0 = ($3 - $7)
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$7 = CALL _Znwj($0)
	*(($2 + [24])) = ($7 + $0)
	*($2 + [16]) = $7
	*($2 + [20]) = $7
	$3 = ($3 - $8)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($7, $8, $3)
	*($2 + [20]) = ($7 + $3)
	
.LABEL $label$8
	CALL void $9((int_32 $6), (int_64 $5), (int_64 $4), (int_64 ($2 + [16])), (int_32 $1))
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$9 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$10 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $206($2)
	
.LABEL $label$1
	CALL $206(($2 + [16]))
	(unreachable)
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)-5915103610240237568, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [56]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [11753])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $177($7, CALL $fimport$2(*($7), *($7 + [8]), (int_64)-5915103610240237568, $6))
	if ( ((int_32)*($4 + [56]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$2
	*($4 + [64]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11493])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11539])
	
.LABEL $label$2
	*($5 + [24]) = *(($1 + [24]))
	$6 = ($1 + [16])
	*($5 + [16]) = *($6)
	$7 = *($1)
	$8 = *($1 + [32])
	if ( ($8 == 0) ){ goto $label$4 }
	*(($1 + [36])) = $8
	CALL _ZdlPv($8)
	*(($8 = ($1 + [40]))) = [0]
	*($1 + [32 align=4]) = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$8 = ($1 + [40])
	
.LABEL $label$3
	*($8) = [0]
	*(($1 + [32])) = (int_64)0
	$8 = *($3)
	$9 = ($1 + [44])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$5 }
	CALL $63($9, *($8), *($8 + [4]))
	
.LABEL $label$5
	if ( ((int_64)$7 == (int_64)*($1)) ){ goto $label$6 }
	CALL eosio_assert([0], [11590])
	
.LABEL $label$6
	$3 = ($1 + [32])
	$11 = *($1 + [32])
	$10 = *(($1 + [36]))
	$12 = ($10 - $11)
	$13 = (CASTING uint_64)(uint_32 int_32($12 >> [3]))
	$8 = [24]
	
.LOOP $label$7:
	$8 = ($8 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$8 }
	$8 = (($12 & [-8]) + $8)
	
.LABEL $label$8
	$11 = *($1 + [44])
	$10 = *(($1 + [48]))
	$8 = (($8 + $10) - $11)
	$13 = (CASTING uint_64)(uint_32 ($10 - $11))
	
.LOOP $label$9:
	$8 = ($8 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$9 }
	if ( ($8 <= [513]) ){ goto $label$11 }
	$4 = CALL $241($8)
	goto $label$10 
	
.LABEL $label$11
	$4 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$10
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $8)
	*($5 + [32]) = $5
	*($5 + [52]) = $6
	*($5 + [56]) = $3
	*($5 + [60]) = $9
	*($5 + [48]) = $1
	CALL $182(($5 + [48]), ($5 + [32]))
	CALL db_update_i64(*(($1 + [60])), $2, $4, $8)
	if ( ($8 <= [513]) ){ goto $label$12 }
	CALL $244($4)
	
.LABEL $label$12
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($5 + [48]) = *($6)
	*($5 + [56]) = *(($6 + [8]))
	if ( (CALL $234(($5 + [16]), ($5 + [48]), [16]) == 0) ){ goto $label$14 }
	$8 = *($1 + [64])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$15 }
	$8 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-5915103610240237568, ($5 + [32]), $7)
	*(($1 + [64])) = $8
	
.LABEL $label$15
	CALL db_idx128_update($8, $2, ($5 + [48]))
	
.LABEL $label$14
	$global$0 = ($5 + [64])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$7 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-5915103610240237568, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $177($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $181(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	*(($6 + [16])) = $7
	if ( (uint_64)($7 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [11864])
	$7 = *(($6 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*(($6 + [16])) = (int_64)0
	
.LABEL $label$1
	*($1) = $7
	$6 = *($5 + [4])
	$7 = *($6)
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [16]) = $7
	$6 = *($1 + [32])
	if ( ($6 == 0) ){ goto $label$6 }
	*(($1 + [36])) = $6
	CALL _ZdlPv($6)
	*(($6 = ($1 + [40]))) = [0]
	*($1 + [32 align=4]) = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$6 = ($1 + [40])
	
.LABEL $label$5
	$8 = [0]
	*($6) = [0]
	*(($1 + [32])) = (int_64)0
	$9 = [0]
	$6 = *($5 + [8])
	$10 = ($1 + [44])
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$7 }
	CALL $63($10, *($6), *($6 + [4]))
	$9 = *(($1 + [36]))
	$8 = *($1 + [32])
	
.LABEL $label$7
	$5 = ($1 + [32])
	$11 = ($1 + [16])
	$12 = ($9 - $8)
	$7 = (CASTING uint_64)(uint_32 int_32($12 >> [3]))
	$6 = [24]
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$9 }
	$6 = (($12 & [-8]) + $6)
	
.LABEL $label$9
	$9 = *($1 + [44])
	$8 = *(($1 + [48]))
	$6 = (($6 + $8) - $9)
	$7 = (CASTING uint_64)(uint_32 ($8 - $9))
	
.LOOP $label$10:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$10 }
	if ( ($6 <= [513]) ){ goto $label$12 }
	$8 = CALL $241($6)
	goto $label$11 
	
.LABEL $label$12
	$8 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$11
	*($3 + [12]) = $8
	*($3 + [8]) = $8
	*($3 + [16]) = ($8 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $11
	*($3 + [32]) = $1
	*($3 + [40]) = $5
	*($3 + [44]) = $10
	CALL $182(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)-5915103610240237568, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$13 }
	CALL $244($8)
	
.LABEL $label$13
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$14 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$7 = *(($4 + [8]))
	$13 = *(*(($0 + [8])))
	$14 = *($1)
	*($3 + [40]) = *(($1 + [24]))
	*($3 + [32]) = *(($1 + [16]))
	*($1 + [64]) = CALL db_idx128_store($7, (int_64)-5915103610240237568, $13, $14, ($3 + [32]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $157($0, $1)
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [14]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *(($1 + [28]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $131($0, $6)
	$6 = ($6 + [40])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [40])) - *($1 + [36])) / (int_32)[40]))
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$5:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [10705])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$5 }
	$6 = *(($1 + [40]))
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $131($0, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = CALL $158($0, ($1 + [48]))
	$global$0 = ($2 + [16])
	return $4
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $148(CALL $147($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10705])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$1 = *($2)
	*(($2 = *($1))) = ($1 + [20])
	$1 = ($1 + [56])
	$5 = *($3 + [4])
	$3 = *($0 + [8])
	$4 = *(($3 + [8]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[36]))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	$1 = (((int_32)((uint_32)($6 + [-36]) / (uint_32)[36]) * (int_32)[36]) + $1)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($1 + [-36])
	
.LABEL $label$2
	*($2) = $1
	$5 = *($3 + [16])
	$4 = *(($3 + [20]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[24]))
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$5 }
	$1 = ((((int_32)((uint_32)($6 + [-24]) / (uint_32)[24]) * (int_32)[18]) + $1) + [18])
	
.LABEL $label$5
	*($2) = $1
	$3 = *($3 + [28])
	$4 = *(($3 + [32]))
	$5 = ($4 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$6:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$7 }
	$1 = ((((int_32)uint_32(($5 + [-8]) >> [3]) * (int_32)[6]) + $1) + [6])
	
.LABEL $label$7
	*($2) = ($1 + [4])
	$1 = ($1 + [40])
	$4 = *($3 + [4])
	$3 = *($0 + [12])
	$0 = *(($3 + [8]))
	$5 = ($0 - $4)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[36]))
	
.LOOP $label$8:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$10 }
	$1 = (((int_32)((uint_32)($5 + [-36]) / (uint_32)[36]) * (int_32)[36]) + $1)
	goto $label$9 
	
.LABEL $label$10
	$1 = ($1 + [-36])
	
.LABEL $label$9
	*($2) = $1
	$4 = *($3 + [16])
	$0 = *(($3 + [20]))
	$5 = ($0 - $4)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[24]))
	
.LOOP $label$11:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$12 }
	$1 = ((((int_32)((uint_32)($5 + [-24]) / (uint_32)[24]) * (int_32)[18]) + $1) + [18])
	
.LABEL $label$12
	*($2) = $1
	$3 = *($3 + [28])
	$0 = *(($3 + [32]))
	$4 = ($0 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	
.LOOP $label$13:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$13 }
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$14 }
	$1 = ((((int_32)uint_32(($4 + [-8]) >> [3]) * (int_32)[6]) + $1) + [6])
	
.LABEL $label$14
	*($2) = $1
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10705])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0 + [8])
	$5 = ($4 + [28])
	$6 = ($4 + [16])
	$7 = ($4 + [4])
	$2 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $2) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [10705])
	$2 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [4])
	*(($4 = ($3 + [4]))) = (*($4) + [4])
	CALL $151($3, $7)
	CALL $152($3, $6)
	CALL $153($3, $5)
	$0 = *($0 + [12])
	$4 = ($0 + [28])
	$2 = ($0 + [16])
	$5 = ($0 + [4])
	$1 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $1) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [10705])
	$1 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($1, $0, [4])
	*(($0 = ($3 + [4]))) = (*($0) + [4])
	CALL $151($3, $5)
	CALL $152($3, $2)
	CALL $153($3, $4)
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10705])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = ($5 + [16])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10705])
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $0, [8])
	$0 = (*($4) + [8])
	*(($4 = ($1 + [4]))) = $0
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($1 + [8])) - $0) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10705])
	$0 = *($4)
	
.LABEL $label$4
	CALL memcpy($0, ($2 + [8]), [8])
	*($4) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $135 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [10945])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([80])) + [64]) = $1
	*($3 + [8]) = [0]
	CALL $149(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [68])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $88(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $136 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [10945])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $150($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $83(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [11171])
	
.LABEL $label$5
	$2 = CALL $241($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [11116])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-8279617226269523968
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = (int_64)-8279617226269523968
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $173(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $244($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $213 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL $211($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$3 = *($0 + [8])
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	if ( (*([0] + [12160]) == 0) ){ goto $label$8 }
	$4 = CALL $213(*([0] + [12160]))
	
.LABEL $label$8
	$0 = *(CALL $215())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL $211($0)
	
.LABEL $label$11
	$3 = *($0 + [28])
	$2 = *($0 + [20])
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$12 }
	$5 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$5 = CALL $211($0)
	$3 = *(($0 + [28]))
	$2 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$2 = [-1]
	if ( $5 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$3 = *($0 + [8])
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($5 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $212($0)
	
.LABEL $label$14
	$4 = ($2 | $4)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL $212($0)
	
.LABEL $label$18
	$0 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL $216()
	return $4
	
.LABEL $label$3
	$2 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $212($0)
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $208 ()
{
	return [12152]
}

void .FUNC $209 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL $214(*([0] + [20588]), [8200], $4)
	CALL $213([0])
	CALL abort()
	(unreachable)
}

int_32 .FUNC $202 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $200($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $203 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $200 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $201 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $206 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $207 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $204 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $233(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $205 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $234(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $181 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [11970])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5915103610240237568)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [11916])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [11916])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $177(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$4 = *($4 + [4])
	*(($1 + [56])) = *(($4 + [48]))
	*(($1 + [48])) = *(($4 + [40]))
	*(($1 + [40])) = *(($4 + [32]))
	*(($1 + [32])) = *(($4 + [24]))
	*(($1 + [24])) = *(($4 + [16]))
	*(($1 + [16])) = *(($4 + [8]))
	*($1 + [8]) = *($4)
	$6 = ($1 + [8])
	$7 = *($1 + [8])
	$4 = [50]
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	$8 = $2
	if ( ((int_32)$4 > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10705])
	$8 = *($3 + [4])
	
.LABEL $label$4
	CALL memcpy($8, $1, [8])
	*($3 + [4]) = ($8 + [8])
	CALL $155($3, $6)
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($5 + [8]), (int_64)-9026177492230078464, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $244($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *(($1 + [28]))
	$3 = *(($1 + [32]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[36]))
	$7 = [64]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$3 }
	$7 = (((int_32)((uint_32)($5 + [-36]) / (uint_32)[36]) * (int_32)[36]) + $7)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 + [-36])
	
.LABEL $label$2
	$4 = *(($1 + [40]))
	$3 = *(($1 + [44]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[24]))
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	$7 = ((((int_32)((uint_32)($5 + [-24]) / (uint_32)[24]) * (int_32)[18]) + $7) + [18])
	
.LABEL $label$5
	$4 = *(($1 + [52]))
	$3 = *(($1 + [56]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$6:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$7 = ((((int_32)uint_32(($5 + [-8]) >> [3]) * (int_32)[6]) + $7) + [6])
	
.LABEL $label$7
	if ( ($7 == 0) ){ goto $label$9 }
	CALL $50($0, $7)
	$3 = *(($0 + [4]))
	$7 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$3 = [0]
	$7 = [0]
	
.LABEL $label$8
	*($2 + [4]) = $7
	*($2) = $7
	*($2 + [8]) = $3
	*($2 + [16]) = $2
	*($2 + [24]) = $1
	CALL $172(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $55(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $56(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $244($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [64])
	$global$0 = $5
	*($5 + [63]) = $4
	CALL require_auth(*($0))
	CALL prints([9913])
	*(($5 + [48])) = [0]
	*($5 + [24]) = $1
	*($5 + [32]) = (int_64)-1
	*($5 + [40]) = (int_64)0
	$6 = *($0)
	*($5 + [16]) = $6
	$0 = CALL db_find_i64($6, $1, (int_64)-4139260905483403264, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $108(($5 + [16]), $0)
	if ( ((int_32)*($0 + [144]) == (int_32)($5 + [16])) ){ goto $label$2 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$2
	*($5 + [12]) = $3
	*($5 + [8]) = ($5 + [63])
	CALL $119(($5 + [16]), $0, $1, ($5 + [8]))
	CALL prints([9932])
	$7 = *($5 + [40])
	if ( ($7 == 0) ){ goto $label$1 }
	$8 = ($5 + [44])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	$3 = *($0 + [132])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($0 + [136])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$3 = *($0 + [120])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($0 + [124])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$5 }
	$0 = *(($5 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $7
	
.LABEL $label$3
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($5 + [64])
}

int_32 .FUNC $123 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	if ( ((int_32)*($6 + [144]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11753])
	return $6
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4139260905483403264, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $108($0, $5)
	if ( ((int_32)*($6 + [144]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11753])
	return $6
	
.LABEL $label$5
	CALL eosio_assert([0], $2)
	
.LABEL $label$1
	return $6
}

void .FUNC $122 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [144]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11493])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11539])
	
.LABEL $label$2
	$3 = *(*($3))
	$7 = ($3 + [8])
	$6 = ($1 + [124])
	$8 = (*($6) - $7)
	$9 = int_32($8 >> [3])
	$10 = *($1)
	if ( ($8 == 0) ){ goto $label$4 }
	CALL memmove($3, $7, $8)
	*($6) = ($3 + ($9 << [3]))
	if ( ((int_64)$10 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [11590])
	goto $label$3 
	
.LABEL $label$4
	*($6) = ($3 + ($9 << [3]))
	
.LABEL $label$3
	$11 = *($1 + [8])
	$3 = [92]
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	$11 = *($1 + [64])
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	$6 = ($1 + [120])
	$9 = *($1 + [120])
	$8 = *(($1 + [124]))
	$7 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	
.LOOP $label$7:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$8 }
	$3 = (($7 & [-8]) + $3)
	
.LABEL $label$8
	$9 = ($1 + [132])
	$7 = *($1 + [132])
	$8 = *(($1 + [136]))
	$12 = ($8 - $7)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$12 / (int_32)[24]))
	
.LOOP $label$9:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$9 }
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$10 }
	$3 = ((((int_32)((uint_32)($12 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $3) + [24])
	
.LABEL $label$10
	if ( ($3 <= [513]) ){ goto $label$12 }
	$8 = CALL $241($3)
	goto $label$11 
	
.LABEL $label$12
	$8 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$11
	*($5 + [4]) = $8
	*($5) = $8
	*($5 + [8]) = ($8 + $3)
	*($5 + [16]) = $5
	*($5 + [36]) = $6
	*($5 + [40]) = $9
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [32]) = ($1 + [64])
	CALL $159(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [148]), $2, $8, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$15 }
	if ( ((uint_64)$10 >= (uint_64)*($0 + [16])) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $244($8)
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$13 }
	
.LABEL $label$14
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$13
	$global$0 = ($5 + [48])
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [144]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11493])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11539])
	
.LABEL $label$2
	$6 = *($3)
	$7 = *($1)
	$8 = ($1 + [124])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)*(($1 + [128]))) ){ goto $label$4 }
	*($8) = ($3 + [8])
	*($3) = *($6)
	goto $label$3 
	
.LABEL $label$4
	CALL $183(($1 + [120]), $6)
	
.LABEL $label$3
	CALL prints([12117])
	if ( ((int_64)$7 == (int_64)*($1)) ){ goto $label$5 }
	CALL eosio_assert([0], [11590])
	
.LABEL $label$5
	$9 = *($1 + [8])
	$3 = [92]
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$6 }
	$9 = *($1 + [64])
	
.LOOP $label$7:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$7 }
	$6 = ($1 + [120])
	$10 = *($1 + [120])
	$8 = *(($1 + [124]))
	$11 = ($8 - $10)
	$9 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	
.LOOP $label$8:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$9 }
	$3 = (($11 & [-8]) + $3)
	
.LABEL $label$9
	$8 = ($1 + [132])
	$11 = *($1 + [132])
	$10 = *(($1 + [136]))
	$12 = ($10 - $11)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$12 / (int_32)[24]))
	
.LOOP $label$10:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$10 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$11 }
	$3 = ((((int_32)((uint_32)($12 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $3) + [24])
	
.LABEL $label$11
	if ( ($3 <= [513]) ){ goto $label$13 }
	$4 = CALL $241($3)
	goto $label$12 
	
.LABEL $label$13
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$12
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [36]) = $6
	*($5 + [40]) = $8
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [32]) = ($1 + [64])
	CALL $159(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [148]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$16 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $244($4)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$14 }
	
.LABEL $label$15
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$14
	$global$0 = ($5 + [48])
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($4 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11116])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [10359])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [10464])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [10397])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [10464])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = (int_64)0
	*($2 + [8]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	$4 = ((int_32)$3 / (int_32)[40])
	$5 = *($1 + [8])
	$6 = *($1)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [8])) = ($3 + ((int_32)$4 * (int_32)[40]))
	*($2) = $3
	*($2 + [4]) = $3
	$4 = *(($1 + [16]))
	$1 = (*(($1 + [20])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($3, $4, $1)
	*($2 + [4]) = ($3 + ((int_32)((uint_32)$1 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$2
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $6), (int_64 $5), (int_64 $2), (int_32 $1))
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$4 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $206($2)
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $168(*($1), ($4 + [16]))
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [144]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11194])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11239])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [11289])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	$7 = *($5 + [132])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($5 + [136])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$13
	$7 = *($5 + [120])
	if ( ($7 == 0) ){ goto $label$14 }
	*(($5 + [124])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$14
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$2 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$15:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$16 }
	$7 = *($8 + [132])
	if ( ($7 == 0) ){ goto $label$17 }
	*(($8 + [136])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$17
	$7 = *($8 + [120])
	if ( ($7 == 0) ){ goto $label$18 }
	*(($8 + [124])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$18
	CALL _ZdlPv($8)
	
.LABEL $label$16
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$15 }
	
.LABEL $label$3
	*(($0 + [28])) = $2
	CALL db_remove_i64(*($1 + [148]))
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11116])
	
.LABEL $label$5
	$8 = ($2 + $7)
	CALL memcpy(($4 + [32]), $2, [8])
	$9 = ($2 + [8])
	$3 = (($4 + [32]) + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [11116])
	
.LABEL $label$6
	CALL memcpy($3, $9, [8])
	*(($4 + [24])) = $8
	*($4 + [16]) = $2
	*(($4 + [20])) = ($2 + [16])
	*($4 + [8]) = $1
	*($4) = $0
	$8 = ($4 + int_32($5 >> [1]))
	$0 = *($3)
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($8) + $6))
	
.LABEL $label$7
	CALL void $8((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $244($2)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$5 = ($global$0 - [112])
	$global$0 = $5
	*($5 + [64]) = $2
	CALL require_auth(*($0))
	$6 = [0]
	*(($5 + [56])) = [0]
	*($5 + [32]) = $1
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$7 = *($0)
	*($5 + [24]) = $7
	$0 = CALL db_find_i64($7, $1, (int_64)-4139260905483403264, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)*(CALL $108(($5 + [24]), $0) + [144]) == (int_32)($5 + [24])) ){ goto $label$1 }
	$6 = [0]
	CALL eosio_assert([0], [11753])
	goto $label$1 
	
.LABEL $label$2
	$6 = [1]
	
.LABEL $label$1
	CALL eosio_assert($6, [9863])
	CALL prints([9891])
	*($5 + [12]) = $3
	*($5 + [16]) = $4
	*($5 + [8]) = ($5 + [64])
	*($5 + [104]) = $1
	if ( ((int_64)*($5 + [24]) == (int_64)CALL current_receiver()) ){ goto $label$3 }
	CALL eosio_assert([0], [10945])
	
.LABEL $label$3
	*($5 + [84]) = ($5 + [8])
	*($5 + [80]) = ($5 + [24])
	*($5 + [88]) = ($5 + [104])
	*(($0 = CALL _Znwj([160])) + [8]) = [0]
	*($0) = (int_64)0
	*($0 + [64]) = [0]
	*($0 + [120 align=4]) = (int_64)0
	*($0 + [128 align=4]) = (int_64)0
	*($0 + [136 align=4]) = (int_64)0
	*($0 + [144]) = ($5 + [24])
	CALL $116(($5 + [80]), $0)
	*($5 + [96]) = $0
	$1 = *($0)
	*($5 + [80]) = $1
	$3 = *($0 + [148])
	*($5 + [76]) = $3
	$4 = ($5 + [52])
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*(($5 + [56]))) ){ goto $label$8 }
	*($6 + [8]) = $1
	*($6 + [16]) = $3
	*($5 + [96]) = [0]
	*($6) = $0
	*($4) = ($6 + [24])
	$0 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $117(($5 + [48]), ($5 + [96]), ($5 + [80]), ($5 + [76]))
	$0 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( $0 ){ goto $label$6 }
	
.LABEL $label$7
	$4 = *($5 + [48])
	if ( ($4 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [132])
	if ( ($6 == 0) ){ goto $label$9 }
	*(($0 + [136])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$6 = *($0 + [120])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($0 + [124])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$10
	CALL _ZdlPv($0)
	$4 = *($5 + [48])
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$8 = ($5 + [52])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$12 }
	
.LOOP $label$13:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	$3 = *($0 + [132])
	if ( ($3 == 0) ){ goto $label$15 }
	*(($0 + [136])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$15
	$3 = *($0 + [120])
	if ( ($3 == 0) ){ goto $label$16 }
	*(($0 + [124])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$16
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$13 }
	$0 = *(($5 + [48]))
	goto $label$11 
	
.LABEL $label$12
	$0 = $4
	
.LABEL $label$11
	*($8) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($5 + [112])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [480])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [188])) = (int_64)0
	*(($4 + [180])) = (int_64)0
	*(($4 + [172])) = (int_64)0
	*(($4 + [164])) = (int_64)0
	*(($4 + [236])) = [0]
	*(($4 + [228])) = (int_64)0
	*(($4 + [220])) = (int_64)0
	*(($4 + [212])) = (int_64)0
	*(($4 + [204])) = (int_64)0
	*(($4 + [196])) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = [0]
	*($4 + [132]) = $2
	*($4 + [128]) = $2
	*($4 + [136]) = ($2 + $7)
	*($4 + [400]) = ($4 + [128])
	*($4 + [440]) = ($4 + [144])
	CALL $115(($4 + [440]), ($4 + [400]))
	*(($3 = (($4 + [80]) + [8]))) = *($4 + [136])
	*($4 + [80]) = *($4 + [128])
	*(($8 = (($4 + [400]) + [8]))) = *($3)
	*($4 + [400]) = *($4 + [80])
	$3 = *($8)
	*((($4 + [440]) + [8])) = $3
	*((($4 + [96]) + [24])) = $3
	*($4 + [96]) = $0
	*($4 + [104]) = $1
	$0 = *($4 + [400])
	*($4 + [112]) = $0
	*($4 + [440]) = $0
	*(($3 = (($4 + [280]) + [8]))) = *((($4 + [144]) + [24]))
	*(($8 = (($4 + [280]) + [16]))) = *((($4 + [144]) + [32]))
	*(($9 = (($4 + [280]) + [24]))) = *(($4 + [184]))
	*(($10 = (($4 + [280]) + [32]))) = *(($4 + [192]))
	*(($11 = (($4 + [240]) + [8]))) = *(($4 + [208]))
	*(($12 = (($4 + [240]) + [16]))) = *(($4 + [216]))
	*(($13 = (($4 + [240]) + [24]))) = *(($4 + [224]))
	*(($14 = (($4 + [240]) + [32]))) = *(($4 + [232]))
	*($4 + [280]) = *($4 + [160])
	*($4 + [240]) = *($4 + [200])
	$0 = *($4 + [152])
	$1 = *($4 + [144])
	*((($4 + [360]) + [32])) = *($14)
	*((($4 + [360]) + [24])) = *($13)
	*((($4 + [360]) + [16])) = *($12)
	*((($4 + [360]) + [8])) = *($11)
	*((($4 + [320]) + [8])) = *($3)
	*((($4 + [320]) + [16])) = *($8)
	*((($4 + [320]) + [24])) = *($9)
	*((($4 + [320]) + [32])) = *($10)
	*($4 + [360]) = *($4 + [240])
	*($4 + [320]) = *($4 + [280])
	$3 = (($4 + [96]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	*(($5 = (($4 + [440]) + [32]))) = *((($4 + [320]) + [32]))
	*(($8 = (($4 + [440]) + [24]))) = *((($4 + [320]) + [24]))
	*(($9 = (($4 + [440]) + [16]))) = *((($4 + [320]) + [16]))
	*(($10 = (($4 + [440]) + [8]))) = *((($4 + [320]) + [8]))
	*(($11 = (($4 + [400]) + [8]))) = *((($4 + [360]) + [8]))
	*(($12 = (($4 + [400]) + [16]))) = *((($4 + [360]) + [16]))
	*(($13 = (($4 + [400]) + [24]))) = *((($4 + [360]) + [24]))
	*(($14 = (($4 + [400]) + [32]))) = *((($4 + [360]) + [32]))
	*($4 + [440]) = *($4 + [320])
	*($4 + [400]) = *($4 + [360])
	*((($4 + [40]) + [32])) = *($5)
	*((($4 + [40]) + [24])) = *($8)
	*((($4 + [40]) + [16])) = *($9)
	*((($4 + [40]) + [8])) = *($10)
	*(($4 + [8])) = *($11)
	*(($4 + [16])) = *($12)
	*(($4 + [24])) = *($13)
	*(($4 + [32])) = *($14)
	*($4 + [40]) = *($4 + [440])
	*($4) = *($4 + [400])
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [40])), (int_32 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $244($2)
	
.LABEL $label$5
	$global$0 = ($4 + [480])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL require_auth(*($0))
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	*($4 + [36]) = [0]
	$5 = *($0)
	*($4) = $5
	*($4 + [8]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)4148111391159058432, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $81($4, $0)
	if ( ((int_32)*($0 + [16]) == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$2
	$6 = CALL db_next_i64(*($0 + [20]), ($4 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	CALL $81($4, $6)
	
.LABEL $label$3
	CALL $106($4, $0)
	CALL prints([9466])
	$7 = *($4 + [24])
	if ( ($7 == 0) ){ goto $label$1 }
	$8 = ($4 + [28])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	CALL _ZdlPv($6)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $7
	
.LABEL $label$4
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	$3 = ($global$0 - [368])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [184]))) = (int_64)0
	*(($9 = ($4 + [176]))) = (int_64)0
	*(($10 = (($4 + [120]) + [48]))) = (int_64)0
	*(($11 = (($4 + [120]) + [40]))) = (int_64)0
	*(($12 = (($4 + [120]) + [32]))) = (int_64)0
	*(($13 = (($4 + [120]) + [24]))) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [192]) = [0]
	*($4 + [136]) = [0]
	*($4 + [108]) = $2
	*($4 + [104]) = $2
	*($4 + [112]) = ($2 + $7)
	*($4 + [256]) = ($4 + [104])
	*($4 + [312]) = ($4 + [120])
	CALL $118(($4 + [312]), ($4 + [256]))
	*(($14 = (($4 + [56]) + [8]))) = *($4 + [112])
	*($4 + [56]) = *($4 + [104])
	*(($3 = (($4 + [256]) + [8]))) = *($14)
	*($4 + [256]) = *($4 + [56])
	$14 = *($3)
	*((($4 + [312]) + [8])) = $14
	*((($4 + [72]) + [24])) = $14
	*($4 + [72]) = $0
	*($4 + [80]) = $1
	$0 = *($4 + [256])
	*($4 + [88]) = $0
	*($4 + [312]) = $0
	*(($14 = (($4 + [200]) + [8]))) = *($13)
	*(($13 = (($4 + [200]) + [16]))) = *($12)
	*(($12 = (($4 + [200]) + [24]))) = *($11)
	*(($11 = (($4 + [200]) + [32]))) = *($10)
	*(($10 = (($4 + [200]) + [40]))) = *($9)
	*(($9 = (($4 + [200]) + [48]))) = *($8)
	*($4 + [200]) = *($4 + [136])
	$0 = *($4 + [128])
	$1 = *($4 + [120])
	$8 = *($4 + [192])
	*((($4 + [256]) + [48])) = *($9)
	*((($4 + [256]) + [40])) = *($10)
	*((($4 + [256]) + [32])) = *($11)
	*((($4 + [256]) + [24])) = *($12)
	*((($4 + [256]) + [16])) = *($13)
	*($3) = *($14)
	*($4 + [256]) = *($4 + [200])
	$3 = (($4 + [72]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$15 = *((($4 + [256]) + [48]))
	*((($4 + [312]) + [48])) = $15
	$16 = *((($4 + [256]) + [40]))
	*((($4 + [312]) + [40])) = $16
	$17 = *((($4 + [256]) + [32]))
	*((($4 + [312]) + [32])) = $17
	$18 = *((($4 + [256]) + [24]))
	*((($4 + [312]) + [24])) = $18
	$19 = *((($4 + [256]) + [16]))
	*((($4 + [312]) + [16])) = $19
	$20 = *((($4 + [256]) + [8]))
	*((($4 + [312]) + [8])) = $20
	*(($4 + [8])) = $20
	*(($4 + [16])) = $19
	*(($4 + [24])) = $18
	*(($4 + [32])) = $17
	*(($4 + [40])) = $16
	*(($4 + [48])) = $15
	$15 = *($4 + [256])
	*($4) = $15
	*($4 + [312]) = $15
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $244($2)
	
.LABEL $label$5
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [128])
	$global$0 = $5
	*($5 + [72]) = $3
	*($5 + [64]) = $2
	CALL require_auth(*($0))
	CALL prints([9521])
	*(($5 + [56])) = [0]
	*($5 + [32]) = $1
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	*($5 + [60]) = [0]
	*($5 + [24]) = *($0)
	*($5 + [16]) = ($5 + [24])
	CALL $91(($5 + [96]), ($5 + [16]), ($5 + [64]))
	$0 = *($5 + [100])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((int_64)(((int_64)((int_64)*($5 + [64]) ^ (int_64)*($0 + [16])) | (int_64)((int_64)*($5 + [72]) ^ (int_64)*(($0 + [24])))) == 0) == 0) ){ goto $label$3 }
	*($5 + [96]) = $4
	CALL $92(*($5 + [16]), $0, $1, ($5 + [96]))
	$6 = *($5 + [48])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($5 + [8]) = $4
	*($5 + [4]) = ($5 + [64])
	*($5) = ($5 + [24])
	*($5 + [120]) = $1
	if ( ((int_64)*($5 + [24]) == (int_64)CALL current_receiver()) ){ goto $label$4 }
	CALL eosio_assert([0], [10945])
	
.LABEL $label$4
	*($5 + [100]) = $5
	*($5 + [96]) = ($5 + [24])
	*($5 + [104]) = ($5 + [120])
	*(($0 = CALL _Znwj([80])) + [32 align=4]) = (int_64)0
	*($0 + [40 align=4]) = (int_64)0
	*($0 + [48 align=4]) = (int_64)0
	*($0 + [56]) = ($5 + [24])
	CALL $93(($5 + [96]), $0)
	*($5 + [112]) = $0
	$1 = *($0)
	*($5 + [96]) = $1
	$7 = *($0 + [60])
	*($5 + [92]) = $7
	$6 = ($5 + [52])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($5 + [56]))) ){ goto $label$7 }
	*($4 + [8]) = $1
	*($4 + [16]) = $7
	*($5 + [112]) = [0]
	*($4) = $0
	*($6) = ($4 + [24])
	$0 = *($5 + [112])
	*($5 + [112]) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $94(($5 + [48]), ($5 + [112]), ($5 + [96]), ($5 + [92]))
	$0 = *($5 + [112])
	*($5 + [112]) = [0]
	if ( $0 ){ goto $label$5 }
	
.LABEL $label$6
	$6 = *($5 + [48])
	if ( ($6 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	$4 = *($0 + [44])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($0 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$8
	$4 = *($0 + [32])
	if ( ($4 == 0) ){ goto $label$9 }
	*(($0 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$9
	CALL _ZdlPv($0)
	$6 = *($5 + [48])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($5 + [52])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$13 }
	$7 = *($0 + [44])
	if ( ($7 == 0) ){ goto $label$14 }
	*(($0 + [48])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$14
	$7 = *($0 + [32])
	if ( ($7 == 0) ){ goto $label$15 }
	*(($0 + [36])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$15
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$12 }
	$0 = *(($5 + [48]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $6
	
.LABEL $label$10
	*($8) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($5 + [128])
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [64]) + [24])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $89(($4 + [16]), ($4 + [144]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4)
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [16])
	CALL $90(($4 + [144]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $244($2)
	
.LABEL $label$4
	$2 = *(($4 + [96]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [100])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL prints([10044])
	*(($3 + [104])) = [0]
	*($3 + [80]) = $1
	*($3 + [88]) = (int_64)-1
	*($3 + [96]) = (int_64)0
	*($3 + [72]) = *($0)
	$6 = *(($4 + [136]))
	$4 = CALL $123(($3 + [72]), $2, [9816])
	$5 = *($4 + [132])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$1 }
	
.LOOP $label$2:
	$7 = *(($5 + [16]))
	$8 = *($5)
	$10 = *(($5 + [8]))
	*(($9 = (($3 + [24]) + [8]))) = $10
	*(($11 = (($3 + [24]) + [16]))) = $7
	*((($3 + [48]) + [16])) = $7
	*((($3 + [48]) + [8])) = $10
	*(($3 + [8])) = *($9)
	*(($3 + [16])) = *($11)
	*($3 + [24]) = $8
	*($3 + [48]) = $8
	*($3) = *($3 + [24])
	CALL $114($0, $1, $2, $3)
	$5 = ($5 + [24])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$1
	CALL $124(($3 + [72]), $4)
	$0 = *($3 + [96])
	if ( ($0 == 0) ){ goto $label$3 }
	$6 = ($3 + [100])
	$9 = *($6)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	$11 = *($5 + [132])
	if ( ($11 == 0) ){ goto $label$8 }
	*(($5 + [136])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$8
	$11 = *($5 + [120])
	if ( ($11 == 0) ){ goto $label$9 }
	*(($5 + [124])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$9
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$6 }
	$5 = *(($3 + [96]))
	goto $label$4 
	
.LABEL $label$5
	$5 = $0
	
.LABEL $label$4
	*($6) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$global$0 = ($3 + [112])
}

int_32 .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [11121])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ((int_32)($7 - $2) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$5 }
	CALL $186($1, ($6 - $5))
	$7 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$6 }
	$7 = ($2 + ((int_32)$6 * (int_32)[24]))
	*(($1 + [4])) = $7
	
.LABEL $label$6
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	CALL $167($0, $2)
	$2 = ($2 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [112]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $79(($4 + [24]), ($4 + [112]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	$9 = *($4 + [72])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $244($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [272])
	$global$0 = $2
	*($2 + [224]) = [9581]
	*($2 + [228]) = CALL $235([9581])
	*($2 + [24]) = *($2 + [224])
	CALL require_auth(*(CALL $2(($2 + [232]), ($2 + [24]))))
	$3 = [0]
	*((($2 + [184]) + [32])) = [0]
	*($2 + [200]) = (int_64)-1
	*($2 + [208]) = (int_64)0
	$4 = *($0)
	*($2 + [184]) = $4
	*($2 + [192]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)-8279617068006899712, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	if ( ((int_32)*(CALL $73(($2 + [184]), $5) + [16]) == (int_32)($2 + [184])) ){ goto $label$4 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$4
	$3 = *($2 + [208])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL current_time()
	*((($2 + [120]) + [28])) = (int_64)0
	*(($6 = ($2 + [164]))) = (int_64)0
	*(($2 + [172])) = (int_64)0
	*($2 + [132]) = [0]
	*($2 + [136]) = [0]
	*($2 + [140 align=4]) = (int_64)0
	*($2 + [156 align=4]) = (int_64)0
	*($2 + [120]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	$4 = *($0)
	*($2 + [64]) = [8743]
	*($2 + [68]) = CALL $235([8743])
	*($2 + [16]) = *($2 + [64])
	$7 = *(CALL $2(($2 + [72]), ($2 + [16])))
	$8 = *($0)
	*($2 + [48]) = [9594]
	*($2 + [52]) = CALL $235([9594])
	*($2 + [8]) = *($2 + [48])
	$5 = CALL $2(($2 + [56]), ($2 + [8]))
	*($2 + [256]) = $1
	*($2 + [80]) = $8
	*($2 + [88]) = *($5)
	*(($5 = CALL _Znwj([16]))) = $4
	*($5 + [8]) = $7
	*(($2 + [116])) = [0]
	$9 = ($5 + [16])
	*(($2 + [104])) = $9
	*(($2 + [100])) = $9
	*($2 + [96]) = $5
	*($2 + [108 align=4]) = (int_64)0
	CALL $50((($2 + [80]) + [28]), [8])
	$5 = [0]
	$9 = *($2 + [108])
	if ( ((int_32)(*((($2 + [80]) + [32])) - $9) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10705])
	$3 = *($6)
	$5 = *(($2 + [160]))
	
.LABEL $label$5
	CALL memcpy($9, ($2 + [256]), [8])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	CALL $69($5, ($2 + [80]))
	*(($5 = (($2 + [120]) + [40]))) = (*($5) + [40])
	goto $label$6 
	
.LABEL $label$7
	CALL $70(($2 + [156]), ($2 + [80]))
	
.LABEL $label$6
	*(($2 + [140])) = [180]
	*($2 + [40]) = (int_64)0
	*($2 + [32]) = $1
	CALL $71(($2 + [120]), ($2 + [32]), *($0), [0])
	CALL prints([9603])
	$7 = *($0)
	if ( ((int_64)*($2 + [184]) == (int_64)CALL current_receiver()) ){ goto $label$8 }
	CALL eosio_assert([0], [10945])
	
.LABEL $label$8
	*(($0 = CALL _Znwj([32])) + [16]) = ($2 + [184])
	*($0) = $1
	*($0 + [8]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)180) & (int_64)4294967295)
	CALL memcpy(($2 + [256]), $0, [8])
	CALL memcpy((($2 + [256]) | [8]), ($0 + [8]), [8])
	$4 = *($0)
	$3 = CALL db_store_i64(*((($2 + [184]) + [8])), (int_64)-8279617068006899712, $7, $4, ($2 + [256]), [16])
	*($0 + [20]) = $3
	$5 = (($2 + [184]) + [16])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$9 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($2 + [248]) = $0
	$4 = *($0)
	*($2 + [256]) = $4
	*($2 + [244]) = $3
	$9 = ($2 + [212])
	$5 = *($9)
	if ( ((uint_32)$5 >= (uint_32)*((($2 + [184]) + [32]))) ){ goto $label$12 }
	*($5 + [8]) = $4
	*($5 + [16]) = $3
	*($2 + [248]) = [0]
	*($5) = $0
	*($9) = ($5 + [24])
	$0 = *($2 + [248])
	*($2 + [248]) = [0]
	if ( $0 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $74(($2 + [208]), ($2 + [248]), ($2 + [256]), ($2 + [244]))
	$0 = *($2 + [248])
	*($2 + [248]) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv($0)
	
.LABEL $label$10
	CALL prints([9621])
	$0 = *($2 + [108])
	if ( ($0 == 0) ){ goto $label$13 }
	*(($2 + [112])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$13
	$0 = *($2 + [96])
	if ( ($0 == 0) ){ goto $label$14 }
	*(($2 + [100])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$14
	CALL $72(($2 + [120]))
	$3 = *($2 + [208])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$9 = ($2 + [212])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$16 }
	
.LOOP $label$17:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$18 }
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$17 }
	$0 = *(($2 + [208]))
	goto $label$15 
	
.LABEL $label$16
	$0 = $3
	
.LABEL $label$15
	*($9) = $3
	CALL _ZdlPv($0)
	$global$0 = ($2 + [272])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [272])
}

int_32 .FUNC $184 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($0 + [64]) = [0]
	*($0 + [120 align=4]) = (int_64)0
	*($0 + [144]) = $1
	*(($0 + [128])) = (int_64)0
	*(($0 + [136])) = (int_64)0
	$3 = ($0 + [132])
	$4 = ($0 + [120])
	$5 = ($0 + [64])
	$6 = ($0 + [8])
	$7 = *($1 + [4])
	$1 = *($2 + [4])
	if ( ((uint_32)(*($1 + [8]) - $7) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$7 = *(($1 + [4]))
	
.LABEL $label$1
	CALL memcpy($0, $7, [8])
	*(($7 = ($1 + [4]))) = (*($7) + [8])
	CALL $163($1, $6)
	CALL $163($1, $5)
	CALL $179($1, $4)
	CALL $185($1, $3)
	*($0 + [148]) = *(*($2 + [8]))
	return $0
}

void .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[24]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	*(($4 = ($5 + ((int_32)$4 * (int_32)[24])))) = *($1)
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($5 + ((int_32)$6 * (int_32)[24]))
	$4 = ($4 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $218 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

void .FUNC $186 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[24])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[24]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[24]))
	$3 = ($2 + ((int_32)$3 * (int_32)[24]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[24]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 + ((int_32)((int_32)$2 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$8
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$9 }
	CALL _ZdlPv($6)
	
.LABEL $label$9
}

void .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $206($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$7 = *($3 + [4])
	*(($6 = ((($5 = $2) + [16]) + [29]))) = *(($7 + [29]))
	*(($8 = (($5 + [16]) + [24]))) = *(($7 + [24]))
	$10 = *(($7 + [16]))
	*(($9 = (($5 + [16]) + [16]))) = $10
	$12 = *(($7 + [8]))
	*(($11 = (($5 + [16]) + [8]))) = $12
	$13 = *($7)
	*($1 + [8]) = $13
	*(($1 + [16])) = $12
	*(($1 + [24])) = $10
	*(($1 + [48])) = [0]
	*(($1 + [32])) = *($8)
	$14 = (($5 + [16]) + [32])
	*(($1 + [40])) = *($14)
	*($5 + [16]) = $13
	$15 = ($5 + [4])
	*(($1 + [53])) = *($15)
	*($1 + [49 align=1]) = *($5)
	$16 = ($5 + [6])
	*(($1 + [55])) = *($16)
	*(($1 + [56])) = (int_64)0
	$7 = *($3 + [8])
	*($6) = *(($7 + [29]))
	*($8) = *(($7 + [24]))
	$10 = *(($7 + [16]))
	*($9) = $10
	$12 = *(($7 + [8]))
	*($11) = $12
	$13 = *($7)
	*($1 + [64]) = $13
	*(($1 + [72])) = $12
	*(($1 + [80])) = $10
	*(($1 + [104])) = [0]
	*(($1 + [88])) = *($8)
	*(($1 + [96])) = *($14)
	*($5 + [16]) = $13
	*(($1 + [109])) = *($15)
	*($1 + [105 align=1]) = *($5)
	*(($1 + [111])) = *($16)
	*(($1 + [112])) = (int_64)0
	$3 = ($1 + [64])
	$6 = ($1 + [8])
	$10 = *($1 + [8])
	$7 = [92]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	$10 = *($1 + [64])
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	$9 = ($1 + [120])
	$11 = *($1 + [120])
	$8 = *(($1 + [124]))
	$14 = ($8 - $11)
	$10 = (CASTING uint_64)(uint_32 int_32($14 >> [3]))
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$4 }
	$7 = (($14 & [-8]) + $7)
	
.LABEL $label$4
	$11 = ($1 + [132])
	$14 = *($1 + [132])
	$8 = *(($1 + [136]))
	$15 = ($8 - $14)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$15 / (int_32)[24]))
	
.LOOP $label$5:
	$7 = ($7 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$14 == (int_32)$8) ){ goto $label$6 }
	$7 = ((((int_32)((uint_32)($15 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $7) + [24])
	
.LABEL $label$6
	if ( ($7 <= [513]) ){ goto $label$8 }
	$8 = CALL $241($7)
	goto $label$7 
	
.LABEL $label$8
	$8 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$7
	*($5 + [4]) = $8
	*($5) = $8
	*($5 + [8]) = ($8 + $7)
	*($5 + [56]) = $5
	*($5 + [20]) = $6
	*($5 + [16]) = $1
	*($5 + [24]) = $3
	*($5 + [28]) = $9
	*($5 + [32]) = $11
	CALL $159(($5 + [16]), ($5 + [56]))
	$10 = *($1)
	*($1 + [148]) = CALL db_store_i64(*($4 + [8]), (int_64)-4139260905483403264, *(*($0 + [8])), $10, $8, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$10 >= (uint_64)*($4 + [16])) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $244($8)
	if ( (uint_64)($10 <= *($4 + [16])) ){ goto $label$9 }
	
.LABEL $label$10
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$9
	$global$0 = ($5 + [64])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [132])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [136])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$2 = *($1 + [120])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [124])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $114 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($4 + [80])) = [0]
	*($4 + [56]) = $1
	*($4 + [64]) = (int_64)-1
	*($4 + [72]) = (int_64)0
	*($4 + [48]) = *($0)
	$7 = *(($5 + [136]))
	$5 = CALL $123(($4 + [48]), $2, [9816])
	$6 = *($5 + [132])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$8 = ($3 + [16])
	$9 = *($8)
	$2 = *(($3 + [8]))
	
.LOOP $label$3:
	if ( ((int_64)*(($6 + [8])) != (int_64)$2) ){ goto $label$4 }
	if ( ((int_64)*(($6 + [16])) == (int_64)$9) ){ goto $label$1 }
	
.LABEL $label$4
	$6 = ($6 + [24])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	$6 = $7
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [16])
	
.LABEL $label$1
	*($4 + [88]) = $6
	CALL eosio_assert(((int_32)$6 != (int_32)$7), [11342])
	if ( ((int_64)*($6 + [16]) == (int_64)*($8)) ){ goto $label$5 }
	CALL eosio_assert([0], [11420])
	
.LABEL $label$5
	$7 = ($5 + [132])
	if ( ((int_64)*($6 + [8]) == (int_64)*(($3 + [8]))) ){ goto $label$6 }
	CALL eosio_assert([0], [11434])
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($6) >= (int_64)*($3)), [11381])
	*($4 + [8]) = $7
	*($4 + [16]) = $3
	*($4 + [12]) = ($4 + [88])
	CALL $143(($4 + [48]), $5, $1, ($4 + [8]))
	$5 = [0]
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$2 = *($0)
	*($4 + [8]) = $2
	*($4 + [16]) = $2
	$6 = CALL db_find_i64($2, $2, (int_64)-4139251842133089280, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$5 = CALL $110(($4 + [8]), $6)
	if ( ((int_32)*($5 + [20]) == (int_32)($4 + [8])) ){ goto $label$7 }
	CALL eosio_assert([0], [11753])
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [9816])
	
.LABEL $label$7
	$7 = *(($5 + [12]))
	$6 = *($5 + [8])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$9 }
	$9 = *(($3 + [16]))
	$2 = *(($3 + [8]))
	
.LOOP $label$10:
	if ( ((int_64)*(($6 + [8])) != (int_64)$2) ){ goto $label$11 }
	if ( ((int_64)*(($6 + [16])) == (int_64)$9) ){ goto $label$9 }
	
.LABEL $label$11
	$6 = ($6 + [24])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$10 }
	$6 = $7
	
.LABEL $label$9
	*($4 + [104]) = $6
	CALL eosio_assert(((int_32)$6 != (int_32)$7), [11342])
	if ( ((int_64)*($6 + [16]) == (int_64)*($8)) ){ goto $label$12 }
	CALL eosio_assert([0], [11420])
	
.LABEL $label$12
	$7 = ($5 + [8])
	if ( ((int_64)*($6 + [8]) == (int_64)*(($3 + [8]))) ){ goto $label$13 }
	CALL eosio_assert([0], [11434])
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*($6) >= (int_64)*($3)), [11381])
	*($4 + [88]) = $7
	*($4 + [96]) = $3
	*($4 + [92]) = ($4 + [104])
	CALL $144(($4 + [8]), $5, $1, ($4 + [88]))
	$5 = *($4 + [32])
	if ( ($5 == 0) ){ goto $label$14 }
	$0 = ($4 + [36])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	$3 = *($7 + [8])
	if ( ($3 == 0) ){ goto $label$19 }
	*(($7 + [12])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$19
	CALL _ZdlPv($7)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$17 }
	$6 = *(($4 + [32]))
	goto $label$15 
	
.LABEL $label$16
	$6 = $5
	
.LABEL $label$15
	*($0) = $5
	CALL _ZdlPv($6)
	
.LABEL $label$14
	$5 = *($4 + [72])
	if ( ($5 == 0) ){ goto $label$20 }
	$0 = ($4 + [76])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$22 }
	
.LOOP $label$23:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$24 }
	$3 = *($6 + [132])
	if ( ($3 == 0) ){ goto $label$25 }
	*(($6 + [136])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$25
	$3 = *($6 + [120])
	if ( ($3 == 0) ){ goto $label$26 }
	*(($6 + [124])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$26
	CALL _ZdlPv($6)
	
.LABEL $label$24
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$23 }
	$6 = *(($4 + [72]))
	goto $label$21 
	
.LABEL $label$22
	$6 = $5
	
.LABEL $label$21
	*($0) = $5
	CALL _ZdlPv($6)
	
.LABEL $label$20
	$global$0 = ($4 + [112])
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$5 = *($0)
	$4 = ($5 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($1)
	$3 = *($4 + [4])
	$6 = (int_64)0
	$7 = [0]
	
.LOOP $label$3:
	if ( ($3 <= *(($4 + [8]))) ){ goto $label$4 }
	CALL eosio_assert([0], [11121])
	$3 = *(($4 + [4]))
	
.LABEL $label$4
	$0 = *($3)
	$2 = ($3 + [1])
	*(($4 + [4])) = $2
	$3 = ($7 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $3)))
	$7 = ($3 + [7])
	$3 = $2
	if ( ($0 & [128]) ){ goto $label$3 }
	*($5 + [16]) = $6
	$3 = ($5 + [20])
	if ( ((uint_32)(*(($4 + [8])) - $2) > (uint_32)[32]) ){ goto $label$5 }
	CALL eosio_assert([0], [11116])
	$2 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $2, [33])
	*(($3 = ($4 + [4]))) = (*($3) + [33])
	$7 = *($1)
	$3 = *($7 + [4])
	$6 = (int_64)0
	$1 = ($7 + [8])
	$2 = [0]
	
.LOOP $label$6:
	if ( ($3 <= *($1)) ){ goto $label$7 }
	CALL eosio_assert([0], [11121])
	$3 = *(($7 + [4]))
	
.LABEL $label$7
	$0 = *($3)
	$4 = ($3 + [1])
	*(($7 + [4])) = $4
	$3 = ($2 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $3)))
	$2 = ($3 + [7])
	$3 = $4
	if ( ($0 & [128]) ){ goto $label$6 }
	*($5 + [56]) = $6
	$3 = ($5 + [60])
	if ( ((uint_32)(*(($7 + [8])) - $4) > (uint_32)[32]) ){ goto $label$8 }
	CALL eosio_assert([0], [11116])
	$4 = *(($7 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $4, [33])
	*(($3 = ($7 + [4]))) = (*($3) + [33])
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$4 = *($4 + [4])
	$6 = ($1 + [12])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($7) = *($4)
	*(($7 + [16])) = *(($4 + [16]))
	*(($7 + [8])) = *(($4 + [8]))
	$7 = (*($6) + [24])
	*($6) = $7
	$8 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [8])
	CALL $187($8, $4)
	$7 = *($6)
	
.LABEL $label$1
	$6 = *($8)
	$8 = ($7 - $6)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[24]))
	$4 = [32]
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$7 }
	$7 = (((int_32)((uint_32)($8 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $4)
	if ( ($7 <= [513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($4 + [-24])
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	
.LABEL $label$6
	$4 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $4
	goto $label$4 
	
.LABEL $label$5
	$4 = CALL $241($7)
	
.LABEL $label$4
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $7)
	CALL $162($3, $1)
	$9 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($5 + [8]), (int_64)-4139251842133089280, *(*($0 + [8])), $9, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$9 >= (uint_64)*($5 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $244($4)
	if ( (uint_64)($9 <= *($5 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [16])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	$7 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [11171])
	
.LABEL $label$5
	$4 = CALL $241($6)
	$7 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $6)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $6)
	*(($5 = CALL _Znwj([32]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [20]) = $0
	$8 = ($5 + [8])
	$2 = $4
	if ( ((uint_32)$6 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [11116])
	$2 = *($3 + [36])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $185(($3 + [32]), $8)
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($6 + [8]) = $9
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($2) = ($6 + [24])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $113(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $244($4)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $111 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [20]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11493])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11539])
	
.LABEL $label$2
	$6 = ($1 + [8])
	$7 = *($3)
	$8 = *($1)
	$10 = *(($1 + [12]))
	$9 = *($1 + [8])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$9 }
	$11 = *(($7 + [16]))
	$12 = *(($7 + [8]))
	
.LOOP $label$10:
	if ( ((int_64)*(($9 + [8])) != (int_64)$12) ){ goto $label$11 }
	if ( ((int_64)*(($9 + [16])) == (int_64)$11) ){ goto $label$9 }
	
.LABEL $label$11
	$9 = ($9 + [24])
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$8 }
	CALL prints([12018])
	$7 = ((int_32)($9 - *($6)) / (int_32)[24])
	$10 = *($3)
	if ( ((int_64)*($9 + [16]) == (int_64)*($10 + [16])) ){ goto $label$12 }
	CALL eosio_assert([0], [11420])
	
.LABEL $label$12
	$12 = *($9)
	$11 = *($9 + [8])
	if ( ((int_64)*($10 + [8]) == (int_64)$11) ){ goto $label$13 }
	CALL eosio_assert([0], [12037])
	
.LABEL $label$13
	$12 = ((int_64)*($10) + (int_64)$12)
	if ( ((int_64)$12 <= (int_64)-4611686018427387904) ){ goto $label$7 }
	if ( ((int_64)$12 < (int_64)4611686018427387904) ){ goto $label$6 }
	CALL eosio_assert([0], [12099])
	goto $label$6 
	
.LABEL $label$8
	if ( ((int_32)$10 == (int_32)*(($1 + [16]))) ){ goto $label$5 }
	*($10) = *($7)
	*(($10 + [16])) = *(($7 + [16]))
	*(($10 + [8])) = *(($7 + [8]))
	*(($9 = ($1 + [12]))) = (*($9) + [24])
	if ( ((int_64)$8 != (int_64)*($1)) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$7
	CALL eosio_assert([0], [12080])
	
.LABEL $label$6
	$13 = *(($9 + [16]))
	*(($9 = (*($6) + ((int_32)$7 * (int_32)[24]))) + [8]) = $11
	*($9) = $12
	*($9 + [16]) = $13
	if ( ((int_64)$8 == (int_64)*($1)) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	CALL $187($6, $7)
	if ( ((int_64)$8 == (int_64)*($1)) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [11590])
	
.LABEL $label$3
	$7 = *(($1 + [8]))
	$10 = *(($1 + [12]))
	$3 = ($10 - $7)
	$12 = (CASTING uint_64)(uint_32 ((int_32)$3 / (int_32)[24]))
	$9 = [32]
	
.LOOP $label$14:
	$9 = ($9 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$14 }
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$18 }
	$10 = (((int_32)((uint_32)($3 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $9)
	if ( ($10 <= [513]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$10 = ($9 + [-24])
	if ( ((uint_32)$10 >= (uint_32)[513]) ){ goto $label$16 }
	
.LABEL $label$17
	$9 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $9
	goto $label$15 
	
.LABEL $label$16
	$9 = CALL $241($10)
	
.LABEL $label$15
	*($5 + [4]) = $9
	*($5) = $9
	*($5 + [8]) = ($9 + $10)
	CALL $162($5, $1)
	CALL db_update_i64(*($1 + [24]), $2, $9, $10)
	if ( ((uint_32)$10 >= (uint_32)[513]) ){ goto $label$21 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL $244($9)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$19 }
	
.LABEL $label$20
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$19
	$global$0 = ($5 + [16])
}

void .FUNC $237 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($0)
	$3 = ($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $163(*($1), ($0 + [16]))
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)*($1 + [8]) != (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert([0], [11116])
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [15]), $4, [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
	*(($0 + [72])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [144]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11493])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11539])
	
.LABEL $label$2
	$6 = *(($3 + [4]))
	$7 = *($1)
	if ( (*(*($3)) == 0) ){ goto $label$4 }
	*($1 + [8]) = *($6)
	*(($1 + [56])) = *(($6 + [48]))
	*(($1 + [48])) = *(($6 + [40]))
	*(($1 + [40])) = *(($6 + [32]))
	*(($1 + [32])) = *(($6 + [24]))
	*(($1 + [24])) = *(($6 + [16]))
	*(($1 + [16])) = *(($6 + [8]))
	goto $label$3 
	
.LABEL $label$4
	*($1 + [64]) = *($6)
	*(($1 + [112])) = *(($6 + [48]))
	*(($1 + [104])) = *(($6 + [40]))
	*(($1 + [96])) = *(($6 + [32]))
	*(($1 + [88])) = *(($6 + [24]))
	*(($1 + [80])) = *(($6 + [16]))
	*(($1 + [72])) = *(($6 + [8]))
	
.LABEL $label$3
	$8 = *($1 + [8])
	$6 = [92]
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	$8 = *($1 + [64])
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	$9 = ($1 + [120])
	$10 = *($1 + [120])
	$3 = *(($1 + [124]))
	$11 = ($3 - $10)
	$8 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$8 }
	$6 = (($11 & [-8]) + $6)
	
.LABEL $label$8
	$10 = ($1 + [132])
	$11 = *($1 + [132])
	$3 = *(($1 + [136]))
	$12 = ($3 - $11)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$12 / (int_32)[24]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$10 }
	$6 = ((((int_32)((uint_32)($12 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $6) + [24])
	
.LABEL $label$10
	if ( ($6 <= [513]) ){ goto $label$12 }
	$3 = CALL $241($6)
	goto $label$11 
	
.LABEL $label$12
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$11
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	*($5 + [16]) = $5
	*($5 + [36]) = $9
	*($5 + [40]) = $10
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [32]) = ($1 + [64])
	CALL $159(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [148]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$15 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $244($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$13 }
	
.LABEL $label$14
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$13
	$global$0 = ($5 + [48])
}

int_32 .FUNC $29 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	$3 = ($global$0 - [368])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [192]))) = (int_64)0
	*(($9 = ($4 + [184]))) = (int_64)0
	*(($10 = (($4 + [128]) + [48]))) = (int_64)0
	*(($11 = (($4 + [128]) + [40]))) = (int_64)0
	*(($12 = (($4 + [128]) + [32]))) = (int_64)0
	*(($13 = (($4 + [128]) + [24]))) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [144]) = [0]
	*($4 + [116]) = $2
	*($4 + [112]) = $2
	*($4 + [120]) = ($2 + $7)
	*($4 + [256]) = ($4 + [112])
	*($4 + [312]) = ($4 + [128])
	CALL $84(($4 + [312]), ($4 + [256]))
	*(($14 = (($4 + [64]) + [8]))) = *($4 + [120])
	*($4 + [64]) = *($4 + [112])
	*(($3 = (($4 + [256]) + [8]))) = *($14)
	*($4 + [256]) = *($4 + [64])
	$14 = *($3)
	*((($4 + [312]) + [8])) = $14
	*((($4 + [80]) + [24])) = $14
	*($4 + [80]) = $0
	*($4 + [88]) = $1
	$0 = *($4 + [256])
	*($4 + [96]) = $0
	*($4 + [312]) = $0
	*(($14 = (($4 + [200]) + [8]))) = *($13)
	*(($13 = (($4 + [200]) + [16]))) = *($12)
	*(($12 = (($4 + [200]) + [24]))) = *($11)
	*(($11 = (($4 + [200]) + [32]))) = *($10)
	*(($10 = (($4 + [200]) + [40]))) = *($9)
	*(($9 = (($4 + [200]) + [48]))) = *($8)
	*($4 + [200]) = *($4 + [144])
	$0 = *($4 + [136])
	$1 = *($4 + [128])
	*((($4 + [256]) + [48])) = *($9)
	*((($4 + [256]) + [40])) = *($10)
	*((($4 + [256]) + [32])) = *($11)
	*((($4 + [256]) + [24])) = *($12)
	*((($4 + [256]) + [16])) = *($13)
	*($3) = *($14)
	*($4 + [256]) = *($4 + [200])
	$3 = (($4 + [80]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$15 = *((($4 + [256]) + [48]))
	*((($4 + [312]) + [48])) = $15
	$16 = *((($4 + [256]) + [40]))
	*((($4 + [312]) + [40])) = $16
	$17 = *((($4 + [256]) + [32]))
	*((($4 + [312]) + [32])) = $17
	$18 = *((($4 + [256]) + [24]))
	*((($4 + [312]) + [24])) = $18
	$19 = *((($4 + [256]) + [16]))
	*((($4 + [312]) + [16])) = $19
	$20 = *((($4 + [256]) + [8]))
	*((($4 + [312]) + [8])) = $20
	*((($4 + [8]) + [8])) = $20
	*((($4 + [8]) + [16])) = $19
	*((($4 + [8]) + [24])) = $18
	*((($4 + [8]) + [32])) = $17
	*((($4 + [8]) + [40])) = $16
	*((($4 + [8]) + [48])) = $15
	$15 = *($4 + [256])
	*($4 + [8]) = $15
	*($4 + [312]) = $15
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $244($2)
	
.LABEL $label$5
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL prints([9327])
	*(($4 + [40])) = [0]
	*($4 + [16]) = $1
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	$0 = CALL db_find_i64($5, $1, (int_64)-9026177492230078464, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $85(($4 + [8]), $0)
	if ( ((int_32)*($0 + [64]) == (int_32)($4 + [8])) ){ goto $label$2 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$2
	*($4) = $3
	CALL $86(($4 + [8]), $0, $1, $4)
	CALL prints([9347])
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = ($4 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($4 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $6
	
.LABEL $label$3
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

int_32 .FUNC $235 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [48]) = $3
	CALL require_auth(*($0))
	CALL prints([9362])
	if ( ((int_64)$3 != (int_64)$1) ){ goto $label$1 }
	CALL prints([9381])
	$global$0 = ($4 + [96])
	return 
	
.LABEL $label$1
	*(($4 + [40])) = [0]
	*($4 + [16]) = $1
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [44]) = [0]
	*($4 + [8]) = *($0)
	*($4) = ($4 + [8])
	CALL $80(($4 + [64]), $4, ($4 + [48]))
	$0 = *($4 + [68])
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ((int_64)*($4 + [48]) != (int_64)*($0 + [8])) ){ goto $label$4 }
	CALL prints([9408])
	$5 = *($4 + [32])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *(($4 + [36]))
	$6 = *(($4 + [32]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$9:
	$0 = ($7 + [-24])
	$5 = *($0)
	if ( ((int_64)*($5) == (int_64)$2) ){ goto $label$8 }
	$7 = $0
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$7 }
	if ( ((int_32)*($5 + [16]) == (int_32)($4 + [8])) ){ goto $label$6 }
	CALL eosio_assert([0], [11753])
	goto $label$6 
	
.LABEL $label$7
	$0 = CALL db_find_i64(*($4 + [8]), *(($4 + [16])), (int_64)4148111391159058432, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $81(($4 + [8]), $0)
	if ( ((int_32)*($5 + [16]) == (int_32)($4 + [8])) ){ goto $label$6 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$6
	*($4 + [64]) = ($4 + [48])
	CALL $82(($4 + [8]), $5, $1, ($4 + [64]))
	CALL prints([9449])
	$5 = *($4 + [32])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	if ( ((int_64)*($4 + [8]) == (int_64)CALL current_receiver()) ){ goto $label$10 }
	CALL eosio_assert([0], [10945])
	
.LABEL $label$10
	*(($0 = CALL _Znwj([32])) + [16]) = ($4 + [8])
	*($0) = $2
	*($0 + [8]) = *($4 + [48])
	CALL memcpy(($4 + [64]), $0, [8])
	$7 = ($0 + [8])
	CALL memcpy((($4 + [64]) | [8]), $7, [8])
	$2 = *($0)
	$5 = (($4 + [8]) + [8])
	*($0 + [20]) = CALL db_store_i64(*($5), (int_64)4148111391159058432, $1, $2, ($4 + [64]), [16])
	$6 = (($4 + [8]) + [16])
	if ( (uint_64)($2 <= *($6)) ){ goto $label$11 }
	*($6) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$2 = *($0)
	$3 = *($5)
	*($4 + [88]) = *($7)
	*($0 + [24]) = CALL db_idx64_store($3, (int_64)4148111391159058432, $1, $2, ($4 + [88]))
	*($4 + [88]) = $0
	$2 = *($0)
	*($4 + [64]) = $2
	$5 = *(($0 + [20]))
	*($4 + [60]) = $5
	$6 = ($4 + [36])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*((($4 + [8]) + [32]))) ){ goto $label$14 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [88]) = [0]
	*($7) = $0
	*($6) = ($7 + [24])
	$0 = *($4 + [88])
	*($4 + [88]) = [0]
	if ( $0 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $83(($4 + [32]), ($4 + [88]), ($4 + [64]), ($4 + [60]))
	$0 = *($4 + [88])
	*($4 + [88]) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv($0)
	
.LABEL $label$12
	CALL prints([9435])
	$5 = *($4 + [32])
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($4 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	CALL _ZdlPv($7)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$17 }
	$0 = *(($4 + [32]))
	goto $label$15 
	
.LABEL $label$16
	$0 = $5
	
.LABEL $label$15
	*($6) = $5
	CALL _ZdlPv($0)
	$global$0 = ($4 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($4 + [96])
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11116])
	
.LABEL $label$5
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = $3
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $244($2)
	
.LABEL $label$7
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [96])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $64(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $65(($4 + [128]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $244($2)
	
.LABEL $label$4
	$2 = *((($4 + [64]) + [24]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [92])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [80])
	$global$0 = $5
	CALL require_auth(*($0))
	*(($5 + [76])) = [0]
	*($5 + [68 align=4]) = (int_64)0
	*($5 + [8]) = [8743]
	*($5 + [12]) = CALL $235([8743])
	*($5) = *($5 + [8])
	$0 = CALL $2(($5 + [16]), $5)
	*($5 + [24]) = $3
	*($5 + [32]) = *($0)
	*((($0 = CALL _Znwj([16])) + [8])) = *($5 + [32])
	*($0) = *($5 + [24])
	$6 = ($0 + [16])
	*(($5 + [60])) = $6
	*(($5 + [64])) = $6
	*($5 + [56]) = $0
	*($5 + [48]) = $2
	*($5 + [40]) = $1
	$0 = ($5 + [68])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	CALL $63($0, *($4), *($4 + [4]))
	
.LABEL $label$1
	CALL $52(($5 + [40]))
	$0 = *($0)
	if ( ($0 == 0) ){ goto $label$2 }
	*(($5 + [72])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$0 = *(($5 + [56]))
	if ( ($0 == 0) ){ goto $label$3 }
	*(($5 + [60])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($5 + [80])
}

int_32 .FUNC $25 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [112]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $120(($4 + [24]), ($4 + [112]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	$9 = *($4 + [72])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $244($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL prints([9951])
	*(($4 + [56])) = [0]
	*($4 + [32]) = $1
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$5 = *($0)
	*($4 + [24]) = $5
	$6 = [0]
	$0 = CALL db_find_i64($5, $1, (int_64)-4139260905483403264, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $108(($4 + [24]), $0)
	if ( ((int_32)*($6 + [144]) == (int_32)($4 + [24])) ){ goto $label$1 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9971])
	$7 = *(($6 + [124]))
	$0 = *($6 + [120])
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$3) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$3 }
	$0 = $7
	
.LABEL $label$2
	*($4 + [16]) = $0
	CALL eosio_assert(((int_32)$0 != (int_32)$7), [10021])
	*($4 + [8]) = ($4 + [16])
	if ( $6 ){ goto $label$4 }
	CALL eosio_assert([0], [11829])
	
.LABEL $label$4
	CALL $122(($4 + [24]), $6, $1, ($4 + [8]))
	$8 = *($4 + [48])
	if ( ($8 == 0) ){ goto $label$5 }
	$9 = ($4 + [52])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	$6 = *($0 + [132])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($0 + [136])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$10
	$6 = *($0 + [120])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($0 + [124])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	$0 = *(($4 + [48]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $8
	
.LABEL $label$6
	*($9) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$global$0 = ($4 + [64])
}

void .FUNC $27 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [160])
	$global$0 = $2
	*((($2 + [120]) + [32])) = [0]
	*($2 + [136]) = (int_64)-1
	*($2 + [144]) = (int_64)0
	$3 = *($0)
	*($2 + [120]) = $3
	*($2 + [128]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-8279617068006899712, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $73(($2 + [120]), $5)
	if ( ((int_32)*($4 + [16]) == (int_32)($2 + [120])) ){ goto $label$1 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9664])
	$3 = CALL current_time()
	CALL eosio_assert((uint_64)(*($4 + [8]) <= ((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295)), [9689])
	*($2 + [104]) = (int_64)0
	*($2 + [96]) = $1
	CALL cancel_deferred(($2 + [96]))
	$3 = *($0)
	*($2 + [40]) = [8743]
	*($2 + [44]) = CALL $235([8743])
	*($2 + [8]) = *($2 + [40])
	$6 = *(CALL $2(($2 + [48]), ($2 + [8])))
	$7 = *($0)
	*($2 + [24]) = [9594]
	*($2 + [28]) = CALL $235([9594])
	*($2) = *($2 + [24])
	$0 = CALL $2(($2 + [32]), $2)
	*($2 + [16]) = $1
	*($2 + [56]) = $7
	*($2 + [64]) = *($0)
	*(($0 = CALL _Znwj([16]))) = $3
	*($0 + [8]) = $6
	*(($2 + [92])) = [0]
	$4 = ($0 + [16])
	*(($2 + [80])) = $4
	*(($2 + [76])) = $4
	*($2 + [72]) = $0
	*($2 + [84 align=4]) = (int_64)0
	CALL $50(($2 + [84]), [8])
	$0 = *($2 + [84])
	if ( ((int_32)(*((($2 + [56]) + [32])) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10705])
	
.LABEL $label$2
	CALL memcpy($0, ($2 + [16]), [8])
	CALL $52(($2 + [56]))
	$0 = *($2 + [84])
	if ( ($0 == 0) ){ goto $label$3 }
	*(($2 + [88])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$0 = *($2 + [72])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($2 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$5 = *($2 + [144])
	if ( ($5 == 0) ){ goto $label$5 }
	$8 = ($2 + [148])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($2 + [144]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $5
	
.LABEL $label$6
	*($8) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$global$0 = ($2 + [160])
}

void .FUNC $26 (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [32]) = [9581]
	*($2 + [36]) = CALL $235([9581])
	*($2 + [8]) = *($2 + [32])
	CALL require_auth(*(CALL $2(($2 + [40]), ($2 + [8]))))
	*($2 + [24]) = (int_64)0
	*($2 + [16]) = $1
	CALL cancel_deferred(($2 + [16]))
	CALL $76($0, $1)
	$global$0 = ($2 + [48])
}

void .FUNC $232 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	
.LABEL $label$18
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$16
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$15
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$8
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$2
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($3, *($1))
	*($0 + [8]) = *(($3 + [8]))
	*($0) = *($3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$4 = *($1)
	*($0 + [8]) = *($1 + [8])
	*($0) = $4
	$global$0 = ($3 + [16])
	$1
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [16]) = *(*($4 + [8]))
	$5 = *($0)
	$6 = CALL current_time()
	*($1 + [24]) = (CASTING uint_64)(uint_32 (*(*($4 + [12])) + (CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000))))
	*($1 + [32]) = *(*($4 + [16]))
	$7 = [72]
	$8 = *($4 + [20])
	*(($1 + [72])) = *(($8 + [24]))
	*(($1 + [64])) = *(($8 + [16]))
	*(($1 + [56])) = *(($8 + [8]))
	*($1 + [48]) = *($8)
	$4 = *($4 + [24])
	$9 = ($1 + [80])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$1 }
	CALL $174($9, *($4), *($4 + [4]))
	
.LABEL $label$1
	$10 = ($1 + [48])
	$11 = ($1 + [24])
	$12 = ($1 + [16])
	$4 = *($1 + [80])
	$13 = *(($1 + [84]))
	$6 = (CASTING uint_64)(uint_32 ((int_32)($13 - $4) / (int_32)[12]))
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$4 == (int_32)$13) ){ goto $label$3 }
	
.LOOP $label$4:
	$14 = *($4)
	$8 = *($4 + [4])
	$7 = (($7 + $8) - $14)
	$6 = (CASTING uint_64)(uint_32 ($8 - $14))
	
.LOOP $label$5:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$5 }
	$4 = ($4 + [12])
	if ( ((int_32)$4 != (int_32)$13) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($7 <= [513]) ){ goto $label$7 }
	$4 = CALL $241($7)
	goto $label$6 
	
.LABEL $label$7
	$4 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$6
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $7)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $12
	*($3 + [44]) = $11
	*($3 + [48]) = ($1 + [32])
	*($3 + [52]) = $10
	*($3 + [56]) = $9
	CALL $175(($3 + [32]), ($3 + [24]))
	$6 = *($1)
	*($1 + [96]) = CALL db_store_i64(*($5 + [8]), (int_64)5374645266240503808, *(*($0 + [8])), $6, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($5 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $244($4)
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [64])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	$2 = ($global$0 - [144])
	$global$0 = $2
	*(($3 = (($2 + [48]) + [16]))) = *(($1 + [64]))
	*(($4 = (($2 + [48]) + [24]))) = *(($1 + [72]))
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = [0]
	*($2 + [48]) = *($1 + [48])
	*($2 + [56]) = *(($1 + [56]))
	$5 = (*(($1 + [84])) - *($1 + [80]))
	$6 = ((int_32)$5 / (int_32)[12])
	$7 = *($1 + [32])
	$8 = *($1 + [24])
	$9 = *($1 + [16])
	$10 = *($1 + [8])
	$11 = *($1)
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$1 }
	$12 = CALL _Znwj($5)
	*((($2 + [32]) + [8])) = ($12 + ((int_32)$6 * (int_32)[12]))
	*($2 + [32]) = $12
	*($2 + [36]) = $12
	$1 = *(($1 + [84]))
	$13 = *(($1 + [80]))
	if ( ((int_32)$13 == (int_32)$1) ){ goto $label$3 }
	$14 = ($1 - $13)
	$5 = [0]
	
.LOOP $label$4:
	*(($1 = ($12 + $5))) = (int_64)0
	*(($15 = ($1 + [8]))) = [0]
	$16 = ($13 + $5)
	$17 = ($16 + [4])
	$6 = (*($17) - *($16))
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$18 = CALL _Znwj($6)
	*($1) = $18
	*($15) = ($18 + $6)
	*(($6 = ($1 + [4]))) = $18
	$15 = *($16)
	$16 = (*($17) - $15)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($18, $15, $16)
	*($6) = (*($6) + $16)
	
.LABEL $label$5
	*($2 + [36]) = ($1 + [12])
	$5 = ($5 + [12])
	if ( ((int_32)$14 != (int_32)$5) ){ goto $label$4 }
	
.LABEL $label$3
	*((($2 + [80]) + [24])) = *($4)
	*((($2 + [80]) + [16])) = *($3)
	*($2 + [88]) = *($2 + [56])
	*($2 + [80]) = *($2 + [48])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$5 = (*($0) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$6 }
	$1 = *((*($5) + $1))
	
.LABEL $label$6
	$19 = *((($2 + [80]) + [24]))
	*((($2 + [112]) + [24])) = $19
	$20 = *((($2 + [80]) + [16]))
	*((($2 + [112]) + [16])) = $20
	*(($2 + [16])) = $20
	*(($2 + [24])) = $19
	$19 = *($2 + [88])
	*($2 + [120]) = $19
	$20 = *($2 + [80])
	*($2) = $20
	*($2 + [112]) = $20
	*($2 + [8]) = $19
	CALL void $5((int_32 $11), (int_64 $10), (int_64 $9), (int_64 $8), (int_32 $7), (int_64 $2), (int_32 ($2 + [32])), (int_32 $1))
	$16 = *($2 + [32])
	if ( ($16 == 0) ){ goto $label$7 }
	$5 = *($2 + [36])
	if ( ((int_32)$5 == (int_32)$16) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($5 + [-12])
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$11 }
	*(($5 + [-8])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	$5 = $1
	if ( ((int_32)$16 != (int_32)$1) ){ goto $label$10 }
	$1 = *($2 + [32])
	goto $label$8 
	
.LABEL $label$9
	$1 = $16
	
.LABEL $label$8
	*($2 + [36]) = $16
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$2
	CALL $206($1)
	
.LABEL $label$1
	CALL $206(($2 + [32]))
	(unreachable)
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($4 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11116])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $206($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($5 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$6 = ($4 + ((int_32)$7 * (int_32)[24]))
	$8 = ($1 + [24])
	$3 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$1 = (($4 + $5) + [-24])
	
.LOOP $label$7:
	$4 = ($7 + [-24])
	$2 = *($4)
	*($4) = [0]
	*($1) = $2
	*(($1 + [16])) = *(($7 + [-8]))
	*(($1 + [8])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$3 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $3
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	$2 = *($0 + [80])
	if ( ($2 == 0) ){ goto $label$11 }
	$6 = ($0 + [84])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($7 + [-12])
	$4 = *($1)
	if ( ($4 == 0) ){ goto $label$15 }
	*(($7 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$7 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$14 }
	$1 = *(($0 + [80]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $2
	
.LABEL $label$12
	*($6) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$11
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$16 }
	CALL _ZdlPv($5)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	if ( ((int_32)*($1 + [92]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11194])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11239])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$7 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$8 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$9:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$7 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$6 }
	$10 = [-24]
	$11 = ($5 + [-24])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$5 = $2
	
.LABEL $label$6
	CALL eosio_assert([0], [11289])
	$10 = [-24]
	$11 = ($5 + [-24])
	$4 = *($3)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$10:
	$8 = *($5)
	*($5) = [0]
	$3 = *($11)
	*($11) = $8
	if ( ($3 == 0) ){ goto $label$11 }
	$2 = *($3 + [80])
	if ( ($2 == 0) ){ goto $label$12 }
	$12 = ($3 + [84])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$14 }
	
.LOOP $label$15:
	$8 = ($9 + [-12])
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$16 }
	*(($9 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$16
	$9 = $8
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$15 }
	$8 = *(($3 + [80]))
	goto $label$13 
	
.LABEL $label$14
	$8 = $2
	
.LABEL $label$13
	*($12) = $2
	CALL _ZdlPv($8)
	
.LABEL $label$12
	CALL _ZdlPv($3)
	
.LABEL $label$11
	*($11 + [8]) = *($5 + [8])
	*(($11 + [16])) = *(($5 + [16]))
	$11 = ($11 + [24])
	$5 = ($5 + [24])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$10 }
	$5 = *(($0 + [28]))
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$17:
	$5 = ($5 + $10)
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$18 }
	$2 = *($3 + [80])
	if ( ($2 == 0) ){ goto $label$19 }
	$4 = ($3 + [84])
	$9 = *($4)
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$21 }
	
.LOOP $label$22:
	$8 = ($9 + [-12])
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$23 }
	*(($9 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$23
	$9 = $8
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$22 }
	$8 = *(($3 + [80]))
	goto $label$20 
	
.LABEL $label$21
	$8 = $2
	
.LABEL $label$20
	*($4) = $2
	CALL _ZdlPv($8)
	
.LABEL $label$19
	CALL _ZdlPv($3)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$11) ){ goto $label$17 }
	
.LABEL $label$3
	*(($0 + [28])) = $11
	CALL db_remove_i64(*($1 + [96]))
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [11171])
	
.LABEL $label$5
	$5 = CALL $241($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $5, $4)
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $4)
	*(($2 = CALL _Znwj([112])) + [32]) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [80 align=4]) = (int_64)0
	*($2 + [88]) = [0]
	*($2 + [92]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($2 + [8])
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + [16])
	*($3 + [44]) = ($2 + [24])
	*($3 + [48]) = ($2 + [32])
	*($3 + [52]) = ($2 + [48])
	*($3 + [56]) = ($2 + [80])
	CALL $176(($3 + [32]), ($3 + [24]))
	*($2 + [96]) = $1
	*($3 + [24]) = $2
	$7 = *($2)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $7
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $2
	*($8) = ($4 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $102(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $244($5)
	
.LABEL $label$7
	$6 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$11 }
	$8 = ($6 + [84])
	$1 = *($8)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($1 + [-12])
	$4 = *($5)
	if ( ($4 == 0) ){ goto $label$15 }
	*(($1 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$1 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($6 + [80]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $0
	
.LABEL $label$12
	*($8) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$11
	CALL _ZdlPv($6)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $2
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11116])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11116])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $167(*($1), ($4 + [16]))
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11194])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11239])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [11289])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL _ZdlPv($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
	$9 = *(($1 + [24]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$16 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4148111391159058432, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($9)
	
.LABEL $label$15
	$global$0 = ($2 + [16])
}

void .FUNC $109 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [144]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11493])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [11539])
	
.LABEL $label$2
	$6 = ($1 + [132])
	$7 = *($3)
	$8 = *($1)
	$10 = *(($1 + [136]))
	$9 = *($1 + [132])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$9 }
	$11 = *(($7 + [16]))
	$12 = *(($7 + [8]))
	
.LOOP $label$10:
	if ( ((int_64)*(($9 + [8])) != (int_64)$12) ){ goto $label$11 }
	if ( ((int_64)*(($9 + [16])) == (int_64)$11) ){ goto $label$9 }
	
.LABEL $label$11
	$9 = ($9 + [24])
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$8 }
	CALL prints([12018])
	$7 = ((int_32)($9 - *($6)) / (int_32)[24])
	$10 = *($3)
	if ( ((int_64)*($9 + [16]) == (int_64)*($10 + [16])) ){ goto $label$12 }
	CALL eosio_assert([0], [11420])
	
.LABEL $label$12
	$12 = *($9)
	$11 = *($9 + [8])
	if ( ((int_64)*($10 + [8]) == (int_64)$11) ){ goto $label$13 }
	CALL eosio_assert([0], [12037])
	
.LABEL $label$13
	$12 = ((int_64)*($10) + (int_64)$12)
	if ( ((int_64)$12 <= (int_64)-4611686018427387904) ){ goto $label$7 }
	if ( ((int_64)$12 < (int_64)4611686018427387904) ){ goto $label$6 }
	CALL eosio_assert([0], [12099])
	goto $label$6 
	
.LABEL $label$8
	if ( ((int_32)$10 == (int_32)*(($1 + [140]))) ){ goto $label$5 }
	*($10) = *($7)
	*(($10 + [16])) = *(($7 + [16]))
	*(($10 + [8])) = *(($7 + [8]))
	*(($9 = ($1 + [136]))) = (*($9) + [24])
	if ( ((int_64)$8 != (int_64)*($1)) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$7
	CALL eosio_assert([0], [12080])
	
.LABEL $label$6
	$13 = *(($9 + [16]))
	*(($9 = (*($6) + ((int_32)$7 * (int_32)[24]))) + [8]) = $11
	*($9) = $12
	*($9 + [16]) = $13
	if ( ((int_64)$8 == (int_64)*($1)) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	CALL $187($6, $7)
	if ( ((int_64)$8 == (int_64)*($1)) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [11590])
	
.LABEL $label$3
	$12 = *($1 + [8])
	$9 = [92]
	
.LOOP $label$14:
	$9 = ($9 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$14 }
	$12 = *($1 + [64])
	
.LOOP $label$15:
	$9 = ($9 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$15 }
	$7 = ($1 + [120])
	$3 = *($1 + [120])
	$10 = *(($1 + [124]))
	$14 = ($10 - $3)
	$12 = (CASTING uint_64)(uint_32 int_32($14 >> [3]))
	
.LOOP $label$16:
	$9 = ($9 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$16 }
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$17 }
	$9 = (($14 & [-8]) + $9)
	
.LABEL $label$17
	$3 = *(($1 + [132]))
	$10 = *(($1 + [136]))
	$14 = ($10 - $3)
	$12 = (CASTING uint_64)(uint_32 ((int_32)$14 / (int_32)[24]))
	
.LOOP $label$18:
	$9 = ($9 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$18 }
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$19 }
	$9 = ((((int_32)((uint_32)($14 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $9) + [24])
	
.LABEL $label$19
	if ( ($9 <= [513]) ){ goto $label$21 }
	$10 = CALL $241($9)
	goto $label$20 
	
.LABEL $label$21
	$10 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$20
	*($5 + [4]) = $10
	*($5) = $10
	*($5 + [8]) = ($10 + $9)
	*($5 + [16]) = $5
	*($5 + [36]) = $7
	*($5 + [40]) = $6
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [32]) = ($1 + [64])
	CALL $159(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [148]), $2, $10, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$24 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL $244($10)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$22 }
	
.LABEL $label$23
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$22
	$global$0 = ($5 + [48])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	$2 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [11171])
	
.LABEL $label$5
	$5 = CALL $241($4)
	$2 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $5, $4)
	*($3 + [36]) = $5
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + $4)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([160])
	$6 = CALL $184($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [148])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$4 = *($9)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $7
	*($4 + [16]) = $8
	*($3 + [24]) = [0]
	*($4) = $1
	*($9) = ($4 + [24])
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $117(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($2 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $244($5)
	
.LABEL $label$7
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	$1 = *($5 + [132])
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [136])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$1 = *($5 + [120])
	if ( ($1 == 0) ){ goto $label$12 }
	*(($5 + [124])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $212 (int_32 $0)
{
}

int_32 .FUNC $231 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_64 $29
	int_64 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	$5 = ($global$0 - [8128])
	$global$0 = $5
	$6 = (($5 + [704]) | [8])
	$7 = (($5 + [704]) | [9])
	$8 = ([-2] - ($5 + [704]))
	$9 = ($5 + [7664])
	$10 = (($5 + [692]) + [12])
	$11 = (($5 + [352]) + [54])
	$12 = (($5 + [352]) + [55])
	$13 = [0]
	$14 = [0]
	$15 = [0]
	
.LOOP $label$4:
	if ( ($0 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$1 = *($17)
	if ( ($1 == 0) ){ goto $label$1 }
	$15 = $17
	$1 = ($1 & [255])
	if ( ($1 == 0) ){ goto $label$24 }
	
.LOOP $label$25:
	if ( ((int_32)$1 == (int_32)[37]) ){ goto $label$23 }
	$1 = *($15 + [1])
	$15 = ($15 + [1])
	$1 = ($1 & [255])
	if ( $1 ){ goto $label$25 }
	
.LABEL $label$24
	$1 = $15
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$22 }
	goto $label$3 
	
.LABEL $label$23
	$18 = $15
	
.LOOP $label$27:
	if ( ((int_32)*(($18 + [1])) != (int_32)[37]) ){ goto $label$26 }
	$15 = ($15 + [1])
	$19 = *($18 + [2])
	$1 = ($18 + [2])
	$18 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$27 }
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$22 
	
.LABEL $label$26
	$1 = $18
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	
.LABEL $label$22
	if ( (*($0) & [32]) ){ goto $label$28 }
	CALL $221($17, $15, $0)
	
.LABEL $label$28
	if ( $15 ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	
.LOOP $label$29:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$15 = *($17)
	if ( ($15 == 0) ){ goto $label$31 }
	$1 = $17
	$15 = ($15 & [255])
	if ( ($15 == 0) ){ goto $label$33 }
	
.LOOP $label$34:
	if ( ((int_32)$15 == (int_32)[37]) ){ goto $label$32 }
	$15 = *($1 + [1])
	$1 = ($1 + [1])
	$15 = ($15 & [255])
	if ( $15 ){ goto $label$34 }
	
.LABEL $label$33
	$18 = ([2147483647] - $14)
	$15 = ($1 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$32
	$18 = $1
	$15 = $1
	
.LOOP $label$36:
	if ( ((int_32)*(($15 + [1])) != (int_32)[37]) ){ goto $label$35 }
	$18 = ($18 + [1])
	$19 = *($15 + [2])
	$1 = ($15 + [2])
	$15 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$36 }
	$18 = ([2147483647] - $14)
	$15 = ($18 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$30 
	
.LABEL $label$35
	$1 = $15
	$18 = ([2147483647] - $14)
	$15 = ($18 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$31
	if ( $0 ){ goto $label$1 }
	if ( ($13 == 0) ){ goto $label$46 }
	$1 = [1]
	$15 = *($4 + [4])
	if ( ($15 == 0) ){ goto $label$37 }
	CALL $232(($3 + [16]), $15, $2)
	$15 = *($4 + [8])
	if ( ($15 == 0) ){ goto $label$45 }
	CALL $232(($3 + [32]), $15, $2)
	$15 = *($4 + [12])
	if ( ($15 == 0) ){ goto $label$44 }
	CALL $232(($3 + [48]), $15, $2)
	$15 = *($4 + [16])
	if ( ($15 == 0) ){ goto $label$43 }
	CALL $232(($3 + [64]), $15, $2)
	$15 = *($4 + [20])
	if ( ($15 == 0) ){ goto $label$42 }
	CALL $232(($3 + [80]), $15, $2)
	$15 = *($4 + [24])
	if ( ($15 == 0) ){ goto $label$41 }
	CALL $232(($3 + [96]), $15, $2)
	$15 = *($4 + [28])
	if ( ($15 == 0) ){ goto $label$40 }
	CALL $232(($3 + [112]), $15, $2)
	$15 = *($4 + [32])
	if ( ($15 == 0) ){ goto $label$39 }
	CALL $232(($3 + [128]), $15, $2)
	$15 = *($4 + [36])
	if ( ($15 == 0) ){ goto $label$38 }
	CALL $232(($3 + [144]), $15, $2)
	$global$0 = ($5 + [8128])
	return [1]
	
.LABEL $label$46
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$45
	$1 = [2]
	goto $label$37 
	
.LABEL $label$44
	$1 = [3]
	goto $label$37 
	
.LABEL $label$43
	$1 = [4]
	goto $label$37 
	
.LABEL $label$42
	$1 = [5]
	goto $label$37 
	
.LABEL $label$41
	$1 = [6]
	goto $label$37 
	
.LABEL $label$40
	$1 = [7]
	goto $label$37 
	
.LABEL $label$39
	$1 = [8]
	goto $label$37 
	
.LABEL $label$38
	$1 = [9]
	
.LABEL $label$37
	$15 = ($4 + ($1 << [2]))
	
.LOOP $label$47:
	if ( *($15) ){ goto $label$18 }
	$15 = ($15 + [4])
	$14 = [1]
	$1 = ($1 + [1])
	if ( ((uint_32)$1 <= (uint_32)[9]) ){ goto $label$47 }
	goto $label$1 
	
.LABEL $label$30
	if ( $15 ){ goto $label$29 }
	
.LABEL $label$19
	$15 = ($1 + [1])
	$16 = *($1 + [1])
	$20 = ($16 + [-48])
	if ( ((uint_32)$20 > (uint_32)[9]) ){ goto $label$50 }
	$19 = ((int_32)*($1 + [2]) == (int_32)[36])
	$15 = ( ($1 + [3]) ? $15 : $19 )
	$21 = ( $20 ? [-1] : $19 )
	$13 = ( [1] ? $13 : $19 )
	$22 = [0]
	$16 = *(($1 + ( [3] ? [1] : $19 )))
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	goto $label$49 
	
.LABEL $label$50
	$21 = [-1]
	$22 = [0]
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	
.LABEL $label$49
	$1 = ([1] << $1)
	if ( (($1 & [75913]) == 0) ){ goto $label$48 }
	$19 = ($15 + [1])
	$22 = [0]
	
.LOOP $label$51:
	$22 = ($1 | $22)
	$15 = $19
	$16 = *($15)
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 >= (uint_32)[32]) ){ goto $label$48 }
	$19 = ($15 + [1])
	$1 = ([1] << $1)
	if ( ($1 & [75913]) ){ goto $label$51 }
	
.LABEL $label$48
	if ( ((int_32)$16 != (int_32)[42]) ){ goto $label$57 }
	$1 = (*($15 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$56 }
	if ( ((int_32)*($15 + [2]) != (int_32)[36]) ){ goto $label$56 }
	*(($4 + ($1 << [2]))) = [10]
	$23 = ($15 + [3])
	$13 = [1]
	$20 = *((($3 + (*(($15 + [1])) << [4])) + [-768]))
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	goto $label$55 
	
.LABEL $label$57
	$20 = [0]
	$19 = ($16 + [-48])
	if ( ((uint_32)$19 > (uint_32)[9]) ){ goto $label$54 }
	$1 = [0]
	
.LOOP $label$58:
	$20 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$59 }
	$1 = ((int_32)$1 * (int_32)[10])
	$20 = ( [-1] ? ($1 + $19) : ((int_32)$19 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$59
	$19 = *($15 + [1])
	$23 = ($15 + [1])
	$15 = $23
	$1 = $20
	$19 = ($19 + [-48])
	if ( ($19 <= [10]) ){ goto $label$58 }
	if ( ((int_32)$20 >= (int_32)[0]) ){ goto $label$52 }
	goto $label$3 
	
.LABEL $label$56
	if ( $13 ){ goto $label$18 }
	$23 = ($15 + [1])
	if ( ($0 == 0) ){ goto $label$53 }
	$15 = *($2)
	*($2) = ($15 + [4])
	$13 = [0]
	$20 = *($15)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	
.LABEL $label$55
	$20 = ([0] - $20)
	$22 = ($22 | [8192])
	goto $label$52 
	
.LABEL $label$54
	$23 = $15
	goto $label$52 
	
.LABEL $label$53
	$13 = [0]
	$20 = [0]
	
.LABEL $label$52
	$15 = [0]
	$16 = [-1]
	if ( ((int_32)*($23) != (int_32)[46]) ){ goto $label$66 }
	$19 = *($23 + [1])
	if ( ((int_32)$19 != (int_32)[42]) ){ goto $label$65 }
	$1 = (*($23 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$64 }
	if ( ((int_32)*($23 + [3]) != (int_32)[36]) ){ goto $label$64 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($23 + [4])
	$16 = *((($3 + (*(($23 + [2])) << [4])) + [-768]))
	goto $label$61 
	
.LABEL $label$66
	$1 = $23
	$24 = [0]
	goto $label$60 
	
.LABEL $label$65
	$1 = ($23 + [1])
	$25 = ($19 + [-48])
	if ( ((uint_32)$25 > (uint_32)[9]) ){ goto $label$63 }
	$23 = [0]
	$19 = $1
	
.LOOP $label$67:
	$16 = [-1]
	if ( ((uint_32)$23 > (uint_32)[214748364]) ){ goto $label$68 }
	$1 = ((int_32)$23 * (int_32)[10])
	$16 = ( [-1] ? ($1 + $25) : ((int_32)$25 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$68
	$24 = [1]
	$25 = *($19 + [1])
	$1 = ($19 + [1])
	$19 = $1
	$23 = $16
	$25 = ($25 + [-48])
	if ( ($25 <= [10]) ){ goto $label$67 }
	goto $label$60 
	
.LABEL $label$64
	if ( $13 ){ goto $label$18 }
	$1 = ($23 + [2])
	if ( ($0 == 0) ){ goto $label$62 }
	$19 = *($2)
	*($2) = ($19 + [4])
	$16 = *($19)
	goto $label$61 
	
.LABEL $label$63
	$24 = [1]
	$16 = [0]
	goto $label$60 
	
.LABEL $label$62
	$16 = [0]
	
.LABEL $label$61
	$24 = ((int_32)uint_32($16 >> [31]) ^ (int_32)[1])
	
.LABEL $label$60
	
.LOOP $label$69:
	$19 = $15
	$15 = (*($1) + [-65])
	if ( ((uint_32)$15 > (uint_32)[57]) ){ goto $label$18 }
	$1 = ($1 + [1])
	$15 = *(((((int_32)$19 * (int_32)[58]) + $15) + [22496]))
	if ( (($15 + [-1]) <= [8]) ){ goto $label$69 }
	if ( ($15 == 0) ){ goto $label$18 }
	if ( ((int_32)$15 != (int_32)[27]) ){ goto $label$72 }
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$18 }
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$72
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$73 }
	*(($4 + ($21 << [2]))) = $15
	$15 = ($3 + ($21 << [4]))
	*($5 + [424]) = *(($15 + [8]))
	*($5 + [416]) = *($15)
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$73
	if ( ($0 == 0) ){ goto $label$70 }
	CALL $232(($5 + [416]), $15, $2)
	
.LABEL $label$71
	$23 = ($22 & [-65537])
	$21 = ( $23 ? $22 : ($22 & [8192]) )
	$26 = [0]
	$27 = [8235]
	$15 = *(($1 + [-1]))
	$28 = ( ( ($15 & [-33]) ? $15 : ((int_32)($15 & [15]) == (int_32)[3]) ) ? $15 : $19 )
	$15 = ($28 + [-65])
	if ( ((uint_32)$15 > (uint_32)[55]) ){ goto $label$9 }
	$22 = $12
	goto $label$101 
	
.LABEL $label$101
	if ( ((int_32)$16 > (int_32)[-1]) ){ goto $label$102 }
	if ( $24 ){ goto $label$3 }
	
.LABEL $label$102
	$29 = *($5 + [424])
	$30 = *($5 + [416])
	*($5 + [748]) = [0]
	if ( (CALL $222($30, $29) == 0) ){ goto $label$103 }
	$31 = [1]
	$32 = [8417]
	$29 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	if ( ((int_32)CALL $223($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$103
	if ( ($21 & [2048]) ){ goto $label$99 }
	$31 = ($21 & [1])
	$32 = ( [8423] ? [8418] : $31 )
	if ( ((int_32)CALL $223($30, $29) > (int_32)[1]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$100
	$29 = *($5 + [416])
	if ( ((int_64)$29 <= (int_64)-1) ){ goto $label$86 }
	if ( ($21 & [2048]) ){ goto $label$84 }
	$26 = ($21 & [1])
	$27 = ( [8237] ? [8235] : $26 )
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$99
	$31 = [1]
	$32 = [8420]
	if ( ((int_32)CALL $223($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$98
	*((($5 + [344]) + [4])) = [0]
	*($5 + [344]) = *($5 + [416])
	*($5 + [416]) = ($5 + [344])
	$16 = [-1]
	$17 = ($5 + [344])
	goto $label$96 
	
.LABEL $label$97
	$17 = *($5 + [416])
	if ( ($16 == 0) ){ goto $label$80 }
	
.LABEL $label$96
	$15 = [0]
	$18 = $17
	
.LOOP $label$104:
	$19 = *($18)
	if ( ($19 == 0) ){ goto $label$82 }
	$19 = CALL $225(($5 + [340]), $19)
	$22 = ((int_32)$19 < (int_32)[0])
	if ( $22 ){ goto $label$83 }
	if ( ((uint_32)$19 > (uint_32)($16 - $15)) ){ goto $label$83 }
	$18 = ($18 + [4])
	$15 = ($19 + $15)
	if ( ((uint_32)$16 > (uint_32)$15) ){ goto $label$104 }
	goto $label$82 
	
.LABEL $label$95
	*((($5 + [352]) + [54])) = *($5 + [416])
	$16 = [1]
	$17 = $11
	$22 = $12
	$21 = $23
	goto $label$8 
	
.LABEL $label$94
	$17 = CALL $228(*(CALL $208()))
	goto $label$88 
	
.LABEL $label$93
	$15 = [0]
	$18 = ($19 & [255])
	if ( ((uint_32)$18 > (uint_32)[7]) ){ goto $label$4 }
	goto $label$105 
	
.LABEL $label$105
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$92
	$17 = $12
	$29 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$106 }
	$17 = $12
	
.LOOP $label$107:
	*(($17 = ($17 + [-1]))) = (((CASTING uint_32)(uint_64 $29) & [7]) | [48])
	$29 = (uint_64)$29 >> (uint_64)(int_64)3
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$107 }
	
.LABEL $label$106
	if ( ($21 & [8]) ){ goto $label$81 }
	$26 = [0]
	$27 = [8235]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$91
	$16 = ( $16 ? [8] : ((uint_32)$16 > (uint_32)[8]) )
	$21 = ($21 | [8])
	$28 = [120]
	
.LABEL $label$90
	$26 = [0]
	$27 = [8235]
	$29 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$108 }
	$15 = ($28 & [32])
	$17 = $12
	
.LOOP $label$109:
	*(($17 = ($17 + [-1]))) = (*((((CASTING uint_32)(uint_64 $29) & [15]) + [22960])) | $15)
	$29 = (uint_64)$29 >> (uint_64)(int_64)4
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$109 }
	if ( (($21 & [8]) == 0) ){ goto $label$12 }
	if ( (int_64)(*($5 + [416]) == 0) ){ goto $label$12 }
	$27 = (int_32($28 >> [4]) + [8235])
	$26 = [2]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$108
	$17 = $12
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$89
	$15 = *($5 + [416])
	$17 = ( $15 ? [8251] : $15 )
	
.LABEL $label$88
	$26 = [0]
	$15 = CALL $236($17, ( [2147483647] ? $16 : ((int_32)$16 < (int_32)[0]) ))
	$22 = ($17 + $15)
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$85 }
	$21 = $23
	$16 = $15
	goto $label$8 
	
.LABEL $label$87
	$26 = [0]
	$27 = [8235]
	$29 = *($5 + [416])
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$86
	$29 = (int_64)
	*($5 + [416]) = $29((int_64)0 - $29))
	$26 = [1]
	$27 = [8235]
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$85
	$21 = $23
	$16 = $15
	if ( (*($22) == 0) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$84
	$26 = [1]
	$27 = [8236]
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$83
	if ( $22 ){ goto $label$2 }
	
.LABEL $label$82
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$3 }
	$23 = ($21 & [73728])
	if ( $23 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$81
	$15 = ($12 - $17)
	$27 = ( [8235] ? [8240] : ((int_32)$16 > (int_32)$15) )
	$26 = ((int_32)$16 <= (int_32)$15)
	goto $label$12 
	
.LABEL $label$80
	$15 = [0]
	$23 = ($21 & [73728])
	if ( ($23 == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$79
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$78
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$77
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$76
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$75
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$74
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$70
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$18
	*(CALL $208()) = [22]
	goto $label$2 
	
.LABEL $label$17
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$16 }
	$18 = ($25 <= [256])
	$25 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $25 ? [256] : $18 ))
	$16 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$111 }
	$18 = ($19 == 0)
	$19 = $25
	
.LOOP $label$112:
	if ( (($18 & [1]) == 0) ){ goto $label$113 }
	CALL $221(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$113
	$22 = ($16 & [32])
	$18 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$112 }
	if ( $22 ){ goto $label$16 }
	$25 = ($25 & [255])
	goto $label$110 
	
.LABEL $label$111
	if ( $19 ){ goto $label$16 }
	
.LABEL $label$110
	CALL $221(($5 + [432]), $25, $0)
	
.LABEL $label$16
	if ( ($15 == 0) ){ goto $label$114 }
	$18 = [0]
	
.LOOP $label$115:
	$19 = *($17)
	if ( ($19 == 0) ){ goto $label$114 }
	$19 = CALL $225(($5 + [340]), $19)
	$18 = ($19 + $18)
	if ( ((uint_32)$18 > (uint_32)$15) ){ goto $label$114 }
	if ( (*($0) & [32]) ){ goto $label$116 }
	CALL $221(($5 + [340]), $19, $0)
	
.LABEL $label$116
	$17 = ($17 + [4])
	if ( ($18 <= $15) ){ goto $label$115 }
	
.LABEL $label$114
	if ( ((int_32)$23 != (int_32)[8192]) ){ goto $label$117 }
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$117 }
	$18 = ($22 <= [256])
	$22 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$119 }
	$18 = ($19 == 0)
	$19 = $22
	
.LOOP $label$120:
	if ( (($18 & [1]) == 0) ){ goto $label$121 }
	CALL $221(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$121
	$16 = ($17 & [32])
	$18 = ($16 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$120 }
	if ( $16 ){ goto $label$117 }
	$22 = ($22 & [255])
	goto $label$118 
	
.LABEL $label$119
	if ( $19 ){ goto $label$117 }
	
.LABEL $label$118
	CALL $221(($5 + [432]), $22, $0)
	
.LABEL $label$117
	$15 = ( $20 ? $15 : ((int_32)$20 > (int_32)$15) )
	goto $label$4 
	
.LABEL $label$15
	$30 = $29
	$17 = $12
	goto $label$13 
	
.LABEL $label$14
	$17 = $12
	
.LOOP $label$122:
	$30 = ((uint_64)$29 / (uint_64)(int_64)10)
	*(($17 = ($17 + [-1]))) = ((CASTING uint_32)(uint_64 (int_64))($29 - ((int_64)$30 * (int_64)10))) | [48])
	$15 = ((uint_64)$29 > (uint_64)(int_64)42949672959)
	$29 = $30
	if ( $15 ){ goto $label$122 }
	
.LABEL $label$13
	$15 = (CASTING uint_32)(uint_64 $30)
	if ( ($15 == 0) ){ goto $label$12 }
	
.LOOP $label$123:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$123 }
	
.LABEL $label$12
	if ( ($24 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$10
	$21 = ( ($21 & [-65537]) ? $21 : ((int_32)$16 > (int_32)[-1]) )
	$29 = *($5 + [416])
	if ( $16 ){ goto $label$124 }
	if ( ((int_64)($29 == 0) == 0) ){ goto $label$124 }
	$17 = $12
	$22 = $12
	$16 = [0]
	goto $label$8 
	
.LABEL $label$124
	$15 = (($12 - $17) + (int_64)($29 == 0))
	$16 = ( $16 ? $15 : ((int_32)$16 > (int_32)$15) )
	
.LABEL $label$9
	$22 = $12
	
.LABEL $label$8
	$24 = ($22 - $17)
	$28 = ( $24 ? $16 : ((int_32)$16 < (int_32)$24) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$3 }
	$25 = ($26 + $28)
	$15 = ( $25 ? $20 : ((int_32)$20 < (int_32)$25) )
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$125 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$125 }
	$18 = ($36 <= [256])
	$36 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $36 ? [256] : $18 ))
	$22 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$127 }
	$18 = ($19 == 0)
	$19 = $36
	
.LOOP $label$128:
	if ( (($18 & [1]) == 0) ){ goto $label$129 }
	CALL $221(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$129
	$23 = ($22 & [32])
	$18 = ($23 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$128 }
	if ( $23 ){ goto $label$125 }
	$36 = ($36 & [255])
	goto $label$126 
	
.LABEL $label$127
	if ( $19 ){ goto $label$125 }
	
.LABEL $label$126
	CALL $221(($5 + [432]), $36, $0)
	
.LABEL $label$125
	if ( (*($0) & [32]) ){ goto $label$130 }
	CALL $221($27, $26, $0)
	
.LABEL $label$130
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$131 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$131 }
	$18 = ($26 <= [256])
	$26 = ($15 - $25)
	CALL memset(($5 + [432]), [48], ( $26 ? [256] : $18 ))
	$22 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$133 }
	$18 = ($19 == 0)
	$19 = $26
	
.LOOP $label$134:
	if ( (($18 & [1]) == 0) ){ goto $label$135 }
	CALL $221(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$135
	$23 = ($22 & [32])
	$18 = ($23 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$134 }
	if ( $23 ){ goto $label$131 }
	$26 = ($26 & [255])
	goto $label$132 
	
.LABEL $label$133
	if ( $19 ){ goto $label$131 }
	
.LABEL $label$132
	CALL $221(($5 + [432]), $26, $0)
	
.LABEL $label$131
	if ( ((int_32)$24 >= (int_32)$16) ){ goto $label$136 }
	$18 = ($23 <= [256])
	$23 = ($28 - $24)
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $18 ))
	$16 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$138 }
	$18 = ($19 == 0)
	$19 = $23
	
.LOOP $label$139:
	if ( (($18 & [1]) == 0) ){ goto $label$140 }
	CALL $221(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$140
	$22 = ($16 & [32])
	$18 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$139 }
	if ( $22 ){ goto $label$136 }
	$23 = ($23 & [255])
	goto $label$137 
	
.LABEL $label$138
	if ( $19 ){ goto $label$136 }
	
.LABEL $label$137
	CALL $221(($5 + [432]), $23, $0)
	
.LABEL $label$136
	if ( (*($0) & [32]) ){ goto $label$141 }
	CALL $221($17, $24, $0)
	
.LABEL $label$141
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$4 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$4 }
	$18 = ($16 <= [256])
	$16 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$143 }
	$18 = ($19 == 0)
	$19 = $16
	
.LOOP $label$144:
	if ( (($18 & [1]) == 0) ){ goto $label$145 }
	CALL $221(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$145
	$20 = ($17 & [32])
	$18 = ($20 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$144 }
	if ( $20 ){ goto $label$4 }
	$16 = ($16 & [255])
	goto $label$142 
	
.LABEL $label$143
	if ( $19 ){ goto $label$4 }
	
.LABEL $label$142
	CALL $221(($5 + [432]), $16, $0)
	goto $label$4 
	
.LABEL $label$7
	$23 = CALL __unordtf2($30, $29, $30, $29)
	$16 = ($31 + [3])
	if ( ($21 & [8192]) ){ goto $label$146 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$146 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$148 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$149:
	if ( (($15 & [1]) == 0) ){ goto $label$150 }
	CALL $221(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$150
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$149 }
	if ( $17 ){ goto $label$146 }
	$22 = ($22 & [255])
	goto $label$147 
	
.LABEL $label$148
	if ( $18 ){ goto $label$146 }
	
.LABEL $label$147
	CALL $221(($5 + [432]), $22, $0)
	
.LABEL $label$146
	$15 = *($0)
	if ( ($15 & [32]) ){ goto $label$155 }
	CALL $221($32, $31, $0)
	if ( ((*($0) & [32]) == 0) ){ goto $label$154 }
	goto $label$153 
	
.LABEL $label$155
	if ( ($15 & [32]) ){ goto $label$153 }
	
.LABEL $label$154
	$15 = uint_32(($28 & [32]) >> [5])
	CALL $221(( ( [8506] ? [8568] : $15 ) ? ( [8449] ? [8476] : $15 ) : $23 ), [3], $0)
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }
	goto $label$152 
	
.LABEL $label$153
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }
	
.LABEL $label$152
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$151 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$157 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$158:
	if ( (($15 & [1]) == 0) ){ goto $label$159 }
	CALL $221(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$159
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$158 }
	if ( $17 ){ goto $label$151 }
	$22 = ($22 & [255])
	goto $label$156 
	
.LABEL $label$157
	if ( $18 ){ goto $label$151 }
	
.LABEL $label$156
	CALL $221(($5 + [432]), $22, $0)
	
.LABEL $label$151
	$15 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	goto $label$5 
	
.LABEL $label$6
	CALL $229(($5 + [320]), $30, $29, ($5 + [748]))
	$30 = *($5 + [328])
	$29 = *($5 + [320])
	CALL __addtf3(($5 + [304]), $29, $30, $29, $30)
	$30 = *((($5 + [304]) + [8]))
	$29 = *($5 + [304])
	if ( (CALL __eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$160 }
	*($5 + [748]) = (*($5 + [748]) + [-1])
	
.LABEL $label$160
	$33 = ($28 | [32])
	if ( ((int_32)$33 != (int_32)[97]) ){ goto $label$173 }
	$22 = ($28 & [32])
	$26 = ( ($32 + [9]) ? $32 : $22 )
	if ( ((uint_32)$16 > (uint_32)[26]) ){ goto $label$171 }
	if ( (([27] - $16) == 0) ){ goto $label$171 }
	$15 = ($16 + [-27])
	$34 = (int_64)4612248968380809216
	$35 = (int_64)0
	
.LOOP $label$174:
	CALL __multf3(($5 + [208]), $35, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($5 + [208]) + [8]))
	$35 = *($5 + [208])
	$15 = ($15 + [1])
	if ( $15 ){ goto $label$174 }
	if ( ((int_32)*($26) != (int_32)[45]) ){ goto $label$172 }
	CALL __subtf3(($5 + [160]), $29, ((int_64)$30 ^ (int_64)-9223372036854775808), $35, $34)
	CALL __addtf3(($5 + [144]), $35, $34, *($5 + [160]), *((($5 + [160]) + [8])))
	$30 = ((int_64)*((($5 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$29 = *($5 + [144])
	goto $label$171 
	
.LABEL $label$173
	$15 = ((int_32)$16 < (int_32)[0])
	if ( (CALL __netf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$176 }
	CALL __multf3(($5 + [288]), $29, $30, (int_64)0, (int_64)4619285842798575616)
	$22 = (*($5 + [748]) + [-28])
	*($5 + [748]) = $22
	$30 = *((($5 + [288]) + [8]))
	$29 = *($5 + [288])
	goto $label$175 
	
.LABEL $label$176
	$22 = *($5 + [748])
	
.LABEL $label$175
	$27 = ( [6] ? $16 : $15 )
	$36 = ( ($5 + [752]) ? $9 : ((int_32)$22 < (int_32)[0]) )
	$19 = $36
	
.LOOP $label$177:
	$15 = CALL __fixunstfsi($29, $30)
	CALL __floatunsitf(($5 + [272]), $15)
	CALL __subtf3(($5 + [256]), $29, $30, *($5 + [272]), *((($5 + [272]) + [8])))
	CALL __multf3(($5 + [240]), *($5 + [256]), *((($5 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($19) = $15
	$19 = ($19 + [4])
	$30 = *((($5 + [240]) + [8]))
	$29 = *($5 + [240])
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$177 }
	if ( ((int_32)$22 < (int_32)[1]) ){ goto $label$180 }
	$18 = $36
	
.LOOP $label$181:
	$17 = ( $22 ? [29] : ((int_32)$22 < (int_32)[29]) )
	$15 = ($19 + [-4])
	if ( ($15 <= $18) ){ goto $label$182 }
	$30 = (CASTING uint_64)(uint_32 $17)
	$29 = (int_64)0
	
.LOOP $label$183:
	$29 = ((uint_64)$29 / (uint_64)(int_64)1000000000)
	$29 = ((int_64)((int_64)*($15) << (int_64)$30) + (int_64)((int_64)$29 & (int_64)4294967295))
	*($15) = (int_64))($29 - ((int_64)$29 * (int_64)1000000000))
	$15 = ($15 + [-4])
	if ( ((uint_32)$15 >= (uint_32)$18) ){ goto $label$183 }
	$15 = (CASTING uint_32)(uint_64 $29)
	if ( ($15 == 0) ){ goto $label$182 }
	*(($18 = ($18 + [-4]))) = $15
	
.LABEL $label$182
	
.LOOP $label$185:
	$15 = $19
	if ( ((uint_32)$15 <= (uint_32)$18) ){ goto $label$184 }
	$19 = ($15 + [-4])
	if ( (*($19) == 0) ){ goto $label$185 }
	
.LABEL $label$184
	$19 = $15
	$22 = ($22 - $17)
	if ( ((int_32)$22 > (int_32)[0]) ){ goto $label$181 }
	*($5 + [748]) = $22
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$178 }
	goto $label$179 
	
.LABEL $label$180
	$15 = $19
	$18 = $36
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$178 }
	
.LABEL $label$179
	$26 = (((uint_32)($27 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$33 != (int_32)[102]) ){ goto $label$187 }
	$37 = ($36 + ($26 << [2]))
	
.LOOP $label$188:
	$19 = ([0] - $22)
	$23 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$190 }
	$25 = uint_32([1000000000] >> $23)
	$24 = ((int_32)([-1] << $23) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$191:
	$16 = *($19)
	*($19) = (uint_32($16 >> $23) + $17)
	$17 = ((int_32)($16 & $24) * (int_32)$25)
	$19 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$191 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$189 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$189 
	
.LABEL $label$190
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$189
	$15 = ( $37 ? $15 : ((int_32)int_32(($15 - $36) >> [2]) > (int_32)$26) )
	$22 = ($23 + $22)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$188 }
	goto $label$186 
	
.LABEL $label$187
	
.LOOP $label$192:
	$19 = ([0] - $22)
	$23 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$194 }
	$25 = uint_32([1000000000] >> $23)
	$24 = ((int_32)([-1] << $23) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$195:
	$16 = *($19)
	*($19) = (uint_32($16 >> $23) + $17)
	$17 = ((int_32)($16 & $24) * (int_32)$25)
	$19 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$195 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$193 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$193 
	
.LABEL $label$194
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$193
	$15 = ( ($18 + ($26 << [2])) ? $15 : ((int_32)int_32(($15 - $18) >> [2]) > (int_32)$26) )
	$22 = ($23 + $22)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$192 }
	
.LABEL $label$186
	*($5 + [748]) = $22
	
.LABEL $label$178
	$19 = [0]
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$196 }
	$19 = ((int_32)int_32(($36 - $18) >> [2]) * (int_32)[9])
	$16 = *($18)
	if ( ($16 <= [10]) ){ goto $label$196 }
	$17 = [10]
	
.LOOP $label$197:
	$19 = ($19 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$197 }
	
.LABEL $label$196
	$23 = ((int_32)$33 == (int_32)[103])
	$25 = (((int_32)$27 != (int_32)[0]) & $23)
	$16 = ( [0] ? $19 : ((int_32)$33 == (int_32)[102]) )
	$17 = (($27 - $16) - $25)
	if ( ((int_32)$17 >= (int_32)(((int_32)int_32(($15 - $36) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$198 }
	$24 = ($17 + [147456])
	$26 = ((int_32)$24 / (int_32)[9])
	$37 = ($36 + ($26 << [2]))
	$22 = ($37 + [-65532])
	$17 = [10]
	$26 = ((int_32)$26 * (int_32)[9])
	if ( ((int_32)($24 - $26) > (int_32)[7]) ){ goto $label$199 }
	$16 = (((($27 + ([0] - $25)) + [147455]) - $16) - $26)
	$17 = [10]
	
.LOOP $label$200:
	$17 = ((int_32)$17 * (int_32)[10])
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$200 }
	
.LABEL $label$199
	$24 = ((uint_32)$25 / (uint_32)$17)
	$25 = *($22)
	$16 = ($25 - ((int_32)$24 * (int_32)$17))
	$26 = ($22 + [4])
	if ( ((int_32)$26 != (int_32)$15) ){ goto $label$202 }
	if ( ($16 == 0) ){ goto $label$201 }
	
.LABEL $label$202
	if ( ($24 & [1]) ){ goto $label$204 }
	$29 = (int_64)4643211215818981376
	$30 = (int_64)0
	if ( ((uint_32)$22 <= (uint_32)$18) ){ goto $label$203 }
	if ( ((int_32)$17 != (int_32)[1000000000]) ){ goto $label$203 }
	if ( ((*(($22 + [-4])) & [1]) == 0) ){ goto $label$203 }
	
.LABEL $label$204
	$29 = (int_64)4643211215818981376
	$30 = (int_64)1
	
.LABEL $label$203
	$34 = (int_64)4611123068473966592
	$24 = uint_32($17 >> [1])
	if ( ($16 <= $24) ){ goto $label$205 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$16 == (int_32)$24) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$15) )
	
.LABEL $label$205
	if ( ($31 == 0) ){ goto $label$206 }
	if ( ((int_32)*($32) != (int_32)[45]) ){ goto $label$206 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$29 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	
.LABEL $label$206
	CALL __addtf3(($5 + [224]), $30, $29, (int_64)0, $34)
	$16 = ($25 - $16)
	*($22) = $16
	if ( (CALL __eqtf2(*($5 + [224]), *((($5 + [224]) + [8])), $30, $29) == 0) ){ goto $label$201 }
	$19 = ($16 + $17)
	*($22) = $19
	if ( ($19 <= [1000000000]) ){ goto $label$207 }
	$19 = ($37 + [-65536])
	
.LOOP $label$208:
	*(($19 + [4])) = [0]
	if ( ((uint_32)$19 >= (uint_32)$18) ){ goto $label$209 }
	*(($18 = ($18 + [-4]))) = [0]
	
.LABEL $label$209
	$17 = (*($19) + [1])
	*($19) = $17
	$19 = ($19 + [-4])
	if ( ((uint_32)$17 > (uint_32)[999999999]) ){ goto $label$208 }
	$22 = ($19 + [4])
	
.LABEL $label$207
	$19 = ((int_32)int_32(($36 - $18) >> [2]) * (int_32)[9])
	$16 = *($18)
	if ( ($16 <= [10]) ){ goto $label$201 }
	$17 = [10]
	
.LOOP $label$210:
	$19 = ($19 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$210 }
	
.LABEL $label$201
	$17 = ($22 + [4])
	$15 = ( $17 ? $15 : ((uint_32)$15 > (uint_32)$17) )
	
.LABEL $label$198
	$22 = ([0] - $19)
	
.LOOP $label$213:
	$16 = $15
	if ( ((uint_32)$16 <= (uint_32)$18) ){ goto $label$212 }
	$15 = ($16 + [-4])
	if ( (*($15) == 0) ){ goto $label$213 }
	$24 = [1]
	if ( $23 ){ goto $label$211 }
	goto $label$162 
	
.LABEL $label$212
	$24 = [0]
	if ( ($23 == 0) ){ goto $label$162 }
	
.LABEL $label$211
	$15 = ($27 + ($27 == 0))
	if ( ((int_32)$15 <= (int_32)$19) ){ goto $label$170 }
	if ( ((int_32)$19 < (int_32)[-4]) ){ goto $label$170 }
	$28 = ($28 + [-1])
	$27 = (($15 + [-1]) - $19)
	$23 = ($21 & [8])
	if ( ($23 == 0) ){ goto $label$169 }
	goto $label$161 
	
.LABEL $label$172
	CALL __addtf3(($5 + [192]), $29, $30, $35, $34)
	CALL __subtf3(($5 + [176]), *($5 + [192]), *((($5 + [192]) + [8])), $35, $34)
	$30 = *((($5 + [176]) + [8]))
	$29 = *($5 + [176])
	
.LABEL $label$171
	$19 = $10
	$15 = int_32($23 >> [31])
	$23 = *($5 + [748])
	$15 = ((int_32)($23 + $15) ^ (int_32)$15)
	if ( ($15 == 0) ){ goto $label$215 }
	$18 = [0]
	
.LOOP $label$216:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [692]) + $18) + [11])) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$216 }
	$19 = ((($5 + [692]) + $18) + [12])
	if ( $18 ){ goto $label$214 }
	
.LABEL $label$215
	*(($19 = ($19 + [-1]))) = [48]
	
.LABEL $label$214
	$25 = ($31 | [2])
	*(($24 = ($19 + [-2]))) = ($28 + [15])
	*(($19 + [-1])) = ( [45] ? [43] : ((int_32)$23 < (int_32)[0]) )
	if ( ($21 & [8]) ){ goto $label$217 }
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$168 }
	$15 = ($5 + [704])
	
.LOOP $label$218:
	$18 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [80]), $18)
	CALL __subtf3(($5 + [64]), $29, $30, *($5 + [80]), *((($5 + [80]) + [8])))
	CALL __multf3(($5 + [48]), *($5 + [64]), *((($5 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [22960])) | $22)
	$30 = *((($5 + [48]) + [8]))
	$29 = *($5 + [48])
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$219 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$219
	$15 = $18
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$218 }
	goto $label$167 
	
.LABEL $label$217
	$15 = ($5 + [704])
	
.LOOP $label$220:
	$18 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [128]), $18)
	CALL __subtf3(($5 + [112]), $29, $30, *($5 + [128]), *((($5 + [128]) + [8])))
	CALL __multf3(($5 + [96]), *($5 + [112]), *((($5 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [22960])) | $22)
	$30 = *((($5 + [96]) + [8]))
	$29 = *($5 + [96])
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$221 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$221
	$15 = $18
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$220 }
	goto $label$167 
	
.LABEL $label$170
	$27 = ($15 + [-1])
	$28 = ($28 + [-2])
	$23 = ($21 & [8])
	if ( $23 ){ goto $label$161 }
	
.LABEL $label$169
	$15 = [9]
	if ( ($24 == 0) ){ goto $label$222 }
	$23 = *(($16 + [-4]))
	if ( ($23 == 0) ){ goto $label$222 }
	$15 = [0]
	if ( ((uint_32)$23 % (uint_32)[10]) ){ goto $label$222 }
	$17 = [10]
	$15 = [0]
	
.LOOP $label$223:
	$15 = ($15 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( (((uint_32)$23 % (uint_32)$17) == 0) ){ goto $label$223 }
	
.LABEL $label$222
	$17 = (((int_32)int_32(($16 - $36) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($28 | [32]) != (int_32)[102]) ){ goto $label$166 }
	$23 = [0]
	$15 = ($17 - $15)
	$15 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$27 = ( $27 ? $15 : ((int_32)$27 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$168
	$18 = ($5 + [704])
	
.LOOP $label$224:
	$19 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [32]), $19)
	CALL __subtf3(($5 + [16]), $29, $30, *($5 + [32]), *((($5 + [32]) + [8])))
	CALL __multf3($5, *($5 + [16]), *((($5 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($15 = $18)) = (*(($19 + [22960])) | $22)
	$30 = *(($5 + [8]))
	$29 = *($5)
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$225 }
	if ( (CALL __eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$225 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$225
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$224 }
	
.LABEL $label$167
	$15 = [-1]
	$22 = ($10 - $24)
	if ( ((int_32)(([2147483645] - $25) - $22) < (int_32)$16) ){ goto $label$5 }
	$23 = ($18 - ($5 + [704]))
	$28 = ( ( ($16 + [2]) ? $23 : ((int_32)($8 + $18) < (int_32)$16) ) ? $23 : $16 )
	$16 = (($22 + $25) + $28)
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$163 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$163 }
	$15 = ($27 <= [256])
	$27 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $27 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$165 }
	$15 = ($18 == 0)
	$18 = $27
	
.LOOP $label$226:
	if ( (($15 & [1]) == 0) ){ goto $label$227 }
	CALL $221(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$227
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$226 }
	if ( $17 ){ goto $label$163 }
	$27 = ($27 & [255])
	goto $label$164 
	
.LABEL $label$166
	$23 = [0]
	$15 = (($17 + $19) - $15)
	$15 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$27 = ( $27 ? $15 : ((int_32)$27 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$165
	if ( $18 ){ goto $label$163 }
	
.LABEL $label$164
	CALL $221(($5 + [432]), $27, $0)
	
.LABEL $label$163
	if ( (*($0) & [32]) ){ goto $label$228 }
	CALL $221($26, $25, $0)
	
.LABEL $label$228
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$229 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$229 }
	$15 = ($25 <= [256])
	$25 = ($20 - $16)
	CALL memset(($5 + [432]), [48], ( $25 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$231 }
	$15 = ($18 == 0)
	$18 = $25
	
.LOOP $label$232:
	if ( (($15 & [1]) == 0) ){ goto $label$233 }
	CALL $221(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$233
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$232 }
	if ( $17 ){ goto $label$229 }
	$25 = ($25 & [255])
	goto $label$230 
	
.LABEL $label$231
	if ( $18 ){ goto $label$229 }
	
.LABEL $label$230
	CALL $221(($5 + [432]), $25, $0)
	
.LABEL $label$229
	if ( (*($0) & [32]) ){ goto $label$234 }
	CALL $221(($5 + [704]), $23, $0)
	
.LABEL $label$234
	$23 = ($28 - $23)
	if ( ((int_32)$23 < (int_32)[1]) ){ goto $label$235 }
	$15 = ($23 <= [256])
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$237 }
	$15 = ($18 == 0)
	$18 = $23
	
.LOOP $label$238:
	if ( (($15 & [1]) == 0) ){ goto $label$239 }
	CALL $221(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$239
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$238 }
	if ( $17 ){ goto $label$235 }
	$23 = ($23 & [255])
	goto $label$236 
	
.LABEL $label$237
	if ( $18 ){ goto $label$235 }
	
.LABEL $label$236
	CALL $221(($5 + [432]), $23, $0)
	
.LABEL $label$235
	if ( (*($0) & [32]) ){ goto $label$240 }
	CALL $221($24, $22, $0)
	
.LABEL $label$240
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$241 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$241 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$243 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$244:
	if ( (($15 & [1]) == 0) ){ goto $label$245 }
	CALL $221(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$245
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$244 }
	if ( $17 ){ goto $label$241 }
	$22 = ($22 & [255])
	goto $label$242 
	
.LABEL $label$243
	if ( $18 ){ goto $label$241 }
	
.LABEL $label$242
	CALL $221(($5 + [432]), $22, $0)
	
.LABEL $label$241
	$15 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$162
	$23 = ($21 & [8])
	
.LABEL $label$161
	$15 = [-1]
	$25 = ($27 | $23)
	if ( ((int_32)$27 > (int_32)( [2147483645] ? [2147483646] : $25 )) ){ goto $label$5 }
	$26 = (($27 + ((int_32)$25 != (int_32)[0])) + [1])
	$33 = ((int_32)($28 | [32]) != (int_32)[102])
	if ( $33 ){ goto $label$247 }
	if ( ((int_32)$19 > (int_32)([2147483647] - $26)) ){ goto $label$5 }
	$19 = ( $19 ? [0] : ((int_32)$19 > (int_32)[0]) )
	goto $label$246 
	
.LABEL $label$247
	$17 = $10
	$38 = ((int_32)$19 < (int_32)[0])
	$15 = ( $22 ? $19 : $38 )
	if ( ($15 == 0) ){ goto $label$248 }
	
.LOOP $label$249:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$249 }
	
.LABEL $label$248
	if ( ((int_32)($10 - $17) > (int_32)[1]) ){ goto $label$250 }
	$15 = ($17 + [-1])
	
.LOOP $label$251:
	*($15) = [48]
	$19 = ($10 - $15)
	$17 = ($15 + [-1])
	$15 = $17
	if ( ((int_32)$19 < (int_32)[2]) ){ goto $label$251 }
	$17 = ($17 + [1])
	
.LABEL $label$250
	*(($37 = ($17 + [-2]))) = $28
	$15 = [-1]
	*(($17 + [-1])) = ( [45] ? [43] : $38 )
	$19 = ($10 - $37)
	if ( ((int_32)$19 > (int_32)([2147483647] - $26)) ){ goto $label$5 }
	
.LABEL $label$246
	$15 = [-1]
	$19 = ($19 + $26)
	if ( ((int_32)$19 > (int_32)((int_32)$31 ^ (int_32)[2147483647])) ){ goto $label$5 }
	$26 = ($19 + $31)
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$252 }
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$252 }
	$15 = ($28 <= [256])
	$28 = ($20 - $26)
	CALL memset(($5 + [432]), [32], ( $28 ? [256] : $15 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$254 }
	$15 = ($19 == 0)
	$19 = $28
	
.LOOP $label$255:
	if ( (($15 & [1]) == 0) ){ goto $label$256 }
	CALL $221(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$256
	$22 = ($17 & [32])
	$15 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$255 }
	if ( $22 ){ goto $label$252 }
	$28 = ($28 & [255])
	goto $label$253 
	
.LABEL $label$254
	if ( $19 ){ goto $label$252 }
	
.LABEL $label$253
	CALL $221(($5 + [432]), $28, $0)
	
.LABEL $label$252
	if ( (*($0) & [32]) ){ goto $label$257 }
	CALL $221($32, $31, $0)
	
.LABEL $label$257
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$258 }
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$258 }
	$15 = ($28 <= [256])
	$28 = ($20 - $26)
	CALL memset(($5 + [432]), [48], ( $28 ? [256] : $15 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$260 }
	$15 = ($19 == 0)
	$19 = $28
	
.LOOP $label$261:
	if ( (($15 & [1]) == 0) ){ goto $label$262 }
	CALL $221(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$262
	$22 = ($17 & [32])
	$15 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$261 }
	if ( $22 ){ goto $label$258 }
	$28 = ($28 & [255])
	goto $label$259 
	
.LABEL $label$260
	if ( $19 ){ goto $label$258 }
	
.LABEL $label$259
	CALL $221(($5 + [432]), $28, $0)
	
.LABEL $label$258
	if ( $33 ){ goto $label$273 }
	$23 = ( $36 ? $18 : ((uint_32)$18 > (uint_32)$36) )
	$22 = $23
	
.LOOP $label$274:
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$276 }
	$18 = [0]
	
.LOOP $label$277:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($6 + $18)) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$277 }
	goto $label$275 
	
.LABEL $label$276
	$18 = [0]
	
.LABEL $label$275
	$15 = ($7 + $18)
	if ( ((int_32)$22 == (int_32)$23) ){ goto $label$281 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$280 }
	
.LOOP $label$282:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$282 }
	$15 = ($5 + [704])
	if ( ((*($0) & [32]) == 0) ){ goto $label$279 }
	goto $label$278 
	
.LABEL $label$281
	if ( $18 ){ goto $label$280 }
	*(($15 = ($15 + [-1]))) = [48]
	
.LABEL $label$280
	if ( (*($0) & [32]) ){ goto $label$278 }
	
.LABEL $label$279
	CALL $221($15, ($7 - $15), $0)
	
.LABEL $label$278
	$22 = ($22 + [4])
	if ( ((uint_32)$22 <= (uint_32)$36) ){ goto $label$274 }
	if ( ($25 == 0) ){ goto $label$283 }
	if ( (*($0) & [32]) ){ goto $label$283 }
	CALL $221([8578], [1], $0)
	
.LABEL $label$283
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$272 }
	if ( ((uint_32)$22 >= (uint_32)$16) ){ goto $label$271 }
	
.LOOP $label$284:
	$15 = $7
	$18 = *($22)
	if ( ($18 == 0) ){ goto $label$286 }
	$15 = $7
	
.LOOP $label$287:
	$19 = ((uint_32)$18 / (uint_32)[10])
	*(($15 = ($15 + [-1]))) = (($18 - ((int_32)$19 * (int_32)[10])) | [48])
	$17 = ((uint_32)$18 > (uint_32)[9])
	$18 = $19
	if ( $17 ){ goto $label$287 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$285 }
	
.LABEL $label$286
	
.LOOP $label$288:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$288 }
	
.LABEL $label$285
	if ( (*($0) & [32]) ){ goto $label$289 }
	CALL $221($15, ( $27 ? [9] : ((int_32)$27 < (int_32)[9]) ), $0)
	
.LABEL $label$289
	$15 = ($27 + [-9])
	if ( ((int_32)$27 < (int_32)[10]) ){ goto $label$270 }
	$27 = $15
	$22 = ($22 + [4])
	if ( ($22 <= $16) ){ goto $label$284 }
	goto $label$270 
	
.LABEL $label$273
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$266 }
	$25 = ( $16 ? ($18 + [4]) : $24 )
	if ( ($23 == 0) ){ goto $label$268 }
	$22 = $18
	
.LOOP $label$290:
	$17 = $7
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$292 }
	$19 = [0]
	
.LOOP $label$293:
	$17 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$293 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$291 }
	
.LABEL $label$292
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$291
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$295 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$294 }
	
.LOOP $label$296:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$296 }
	goto $label$294 
	
.LABEL $label$295
	$15 = *($0)
	if ( ($15 & [32]) ){ goto $label$297 }
	CALL $221($17, [1], $0)
	$15 = *($0)
	
.LABEL $label$297
	$17 = ($17 + [1])
	if ( ($15 & [32]) ){ goto $label$294 }
	CALL $221([8578], [1], $0)
	
.LABEL $label$294
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$298 }
	CALL $221($17, ( $15 ? $27 : ((int_32)$27 > (int_32)$15) ), $0)
	
.LABEL $label$298
	$27 = ($27 - $15)
	$22 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$267 }
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$290 }
	goto $label$267 
	
.LABEL $label$272
	$15 = $27
	if ( ((int_32)$15 >= (int_32)[1]) ){ goto $label$269 }
	goto $label$265 
	
.LABEL $label$271
	$15 = $27
	
.LABEL $label$270
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$265 }
	
.LABEL $label$269
	$18 = ($15 <= [256])
	CALL memset(($5 + [432]), [48], ( $15 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$300 }
	$18 = ($19 == 0)
	$19 = $15
	
.LOOP $label$301:
	if ( (($18 & [1]) == 0) ){ goto $label$302 }
	CALL $221(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$302
	$16 = ($17 & [32])
	$18 = ($16 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$301 }
	if ( $16 ){ goto $label$265 }
	$15 = ($15 & [255])
	goto $label$299 
	
.LABEL $label$300
	if ( $19 ){ goto $label$265 }
	
.LABEL $label$299
	CALL $221(($5 + [432]), $15, $0)
	if ( ((int_32)$21 == (int_32)[8192]) ){ goto $label$264 }
	goto $label$263 
	
.LABEL $label$268
	$22 = $18
	
.LOOP $label$303:
	$17 = $7
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$305 }
	$19 = [0]
	
.LOOP $label$306:
	$17 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$306 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$304 }
	
.LABEL $label$305
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$304
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$308 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$307 }
	
.LOOP $label$309:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$309 }
	goto $label$307 
	
.LABEL $label$308
	if ( (*($0) & [32]) ){ goto $label$310 }
	CALL $221($17, [1], $0)
	
.LABEL $label$310
	$17 = ($17 + [1])
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$307 }
	if ( (*($0) & [32]) ){ goto $label$307 }
	CALL $221([8578], [1], $0)
	
.LABEL $label$307
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$311 }
	CALL $221($17, ( $15 ? $27 : ((int_32)$27 > (int_32)$15) ), $0)
	
.LABEL $label$311
	$27 = ($27 - $15)
	$22 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$267 }
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$303 }
	
.LABEL $label$267
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$266 }
	$18 = ($27 <= [256])
	CALL memset(($5 + [432]), [48], ( $27 ? [256] : $18 ))
	$19 = *($0)
	$15 = ($19 & [32])
	if ( $18 ){ goto $label$313 }
	$15 = ($15 == 0)
	$18 = $27
	
.LOOP $label$314:
	if ( (($15 & [1]) == 0) ){ goto $label$315 }
	CALL $221(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$315
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$314 }
	if ( $17 ){ goto $label$266 }
	$27 = ($27 & [255])
	goto $label$312 
	
.LABEL $label$313
	if ( $15 ){ goto $label$266 }
	
.LABEL $label$312
	CALL $221(($5 + [432]), $27, $0)
	
.LABEL $label$266
	if ( (*($0) & [32]) ){ goto $label$265 }
	CALL $221($37, ($10 - $37), $0)
	
.LABEL $label$265
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$263 }
	
.LABEL $label$264
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$263 }
	$15 = ($16 <= [256])
	$16 = ($20 - $26)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$317 }
	$15 = ($18 == 0)
	$18 = $16
	
.LOOP $label$318:
	if ( (($15 & [1]) == 0) ){ goto $label$319 }
	CALL $221(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$319
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$318 }
	if ( $17 ){ goto $label$263 }
	$16 = ($16 & [255])
	goto $label$316 
	
.LABEL $label$317
	if ( $18 ){ goto $label$263 }
	
.LABEL $label$316
	CALL $221(($5 + [432]), $16, $0)
	
.LABEL $label$263
	$15 = ( $20 ? $26 : ((int_32)$20 > (int_32)$26) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	
.LABEL $label$3
	*(CALL $208()) = [75]
	
.LABEL $label$2
	$14 = [-1]
	
.LABEL $label$1
	$global$0 = ($5 + [8128])
	$15
	$18
	return $14
}

int_64 .FUNC $219 (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

void .FUNC $38 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [56]) = $3
	CALL require_auth(*($0))
	CALL prints([9951])
	*(($4 + [48])) = [0]
	*($4 + [24]) = $1
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	$3 = *($0)
	*($4 + [16]) = $3
	$5 = [0]
	$0 = CALL db_find_i64($3, $1, (int_64)-4139260905483403264, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $108(($4 + [16]), $0)
	if ( ((int_32)*($5 + [144]) == (int_32)($4 + [16])) ){ goto $label$1 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9971])
	$6 = *(($5 + [124]))
	$0 = *($5 + [120])
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$2 }
	$2 = *($4 + [56])
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$2) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$3 }
	$0 = $6
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 == (int_32)$6), [9994])
	*($4 + [8]) = ($4 + [56])
	if ( $5 ){ goto $label$4 }
	CALL eosio_assert([0], [11829])
	
.LABEL $label$4
	CALL $121(($4 + [16]), $5, $1, ($4 + [8]))
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$5 }
	$8 = ($4 + [44])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	$5 = *($0 + [132])
	if ( ($5 == 0) ){ goto $label$10 }
	*(($0 + [136])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$5 = *($0 + [120])
	if ( ($5 == 0) ){ goto $label$11 }
	*(($0 + [124])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$8 }
	$0 = *(($4 + [40]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $7
	
.LABEL $label$6
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$global$0 = ($4 + [64])
}

void .FUNC $39 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [496])
	$global$0 = $4
	CALL require_auth($1)
	CALL eosio_assert(((uint_32)((int_32)(*($3 + [4]) - *($3)) / (int_32)[40]) > (uint_32)[3]), [9235])
	*(($4 + [448])) = [0]
	*($4 + [424]) = $1
	*($4 + [432]) = (int_64)-1
	$5 = *($0)
	*($4 + [416]) = $5
	*($4 + [440]) = (int_64)0
	$6 = [0]
	$7 = CALL db_find_i64($5, $1, (int_64)-9026177492230078464, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $85(($4 + [416]), $7)
	if ( ((int_32)*($6 + [64]) == (int_32)($4 + [416])) ){ goto $label$1 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$1
	CALL eosio_assert(($6 == 0), [9253])
	$5 = *($0)
	*((($4 + [376]) + [8])) = (int_64)0
	*($4 + [376]) = (int_64)1
	*(($7 = (($4 + [376]) + [24]))) = [0]
	*($4 + [184]) = (int_64)3617214756542218240
	*($4 + [176]) = $5
	*($4 + [192]) = [1]
	*($4 + [392]) = (int_64)0
	$6 = CALL _Znwj([24])
	*((($4 + [376]) + [36])) = [0]
	$8 = ($6 + [24])
	*($7) = $8
	*($6) = *($4 + [176])
	*(($6 + [8])) = *($4 + [184])
	*(($6 + [16])) = *($4 + [192])
	*((($4 + [376]) + [20])) = $8
	*($4 + [392]) = $6
	*($4 + [404 align=4]) = (int_64)0
	*((($4 + [336]) + [8])) = (int_64)0
	*($4 + [336]) = (int_64)1
	*(($7 = (($4 + [336]) + [24]))) = [0]
	*($4 + [184]) = (int_64)3617214756542218240
	*($4 + [176]) = $5
	*($4 + [192]) = [1]
	*($4 + [352]) = (int_64)0
	$6 = CALL _Znwj([24])
	*((($4 + [336]) + [36])) = [0]
	$8 = ($6 + [24])
	*($7) = $8
	*($6) = *($4 + [176])
	*(($6 + [8])) = *($4 + [184])
	*(($6 + [16])) = *($4 + [192])
	*((($4 + [336]) + [20])) = $8
	*($4 + [352]) = $6
	*($4 + [364 align=4]) = (int_64)0
	*($4 + [272]) = [9286]
	*($4 + [276]) = CALL $235([9286])
	*($4 + [72]) = *($4 + [272])
	$5 = *(CALL $2(($4 + [280]), ($4 + [72])))
	*($4 + [256]) = [8245]
	*($4 + [260]) = CALL $235([8245])
	*($4 + [64]) = *($4 + [256])
	$6 = CALL $2(($4 + [264]), ($4 + [64]))
	*($4 + [240]) = [9292]
	*($4 + [244]) = CALL $235([9292])
	*($4 + [56]) = *($4 + [240])
	$7 = CALL $2(($4 + [248]), ($4 + [56]))
	*($4 + [168]) = [8743]
	*($4 + [172]) = CALL $235([8743])
	*($4 + [48]) = *($4 + [168])
	$8 = CALL $2(($4 + [464]), ($4 + [48]))
	*($4 + [160]) = [9286]
	*($4 + [164]) = CALL $235([9286])
	*($4 + [40]) = *($4 + [160])
	$9 = CALL $2(($4 + [488]), ($4 + [40]))
	*($4 + [176]) = $1
	*($4 + [184]) = *($8)
	*($4 + [192]) = *($9)
	CALL $127((($4 + [176]) + [24]), ($4 + [336]))
	*(($8 = (($4 + [288]) + [24]))) = [0]
	*($4 + [304]) = (int_64)0
	*($4 + [288]) = *($6)
	*($4 + [296]) = *($7)
	*(($6 = CALL _Znwj([16]))) = $1
	*($6 + [8]) = $5
	$7 = ($6 + [16])
	*($8) = $7
	*((($4 + [288]) + [20])) = $7
	*($4 + [304]) = $6
	CALL $128(($4 + [316]), ($4 + [176]))
	CALL $52(($4 + [288]))
	$6 = *($4 + [316])
	if ( ($6 == 0) ){ goto $label$2 }
	*(($4 + [320])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$2
	$6 = *($4 + [304])
	if ( ($6 == 0) ){ goto $label$3 }
	*(($4 + [308])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$3
	$6 = *(($4 + [228]))
	if ( ($6 == 0) ){ goto $label$4 }
	*(($4 + [232])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$4
	$6 = *(($4 + [216]))
	if ( ($6 == 0) ){ goto $label$5 }
	*(($4 + [220])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$6 = *((($4 + [176]) + [28]))
	if ( ($6 == 0) ){ goto $label$6 }
	*(($4 + [208])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	*($4 + [144]) = [9286]
	*($4 + [148]) = CALL $235([9286])
	*($4 + [32]) = *($4 + [144])
	$5 = *(CALL $2(($4 + [152]), ($4 + [32])))
	*($4 + [128]) = [8245]
	*($4 + [132]) = CALL $235([8245])
	*($4 + [24]) = *($4 + [128])
	$6 = CALL $2(($4 + [136]), ($4 + [24]))
	*($4 + [112]) = [9292]
	*($4 + [116]) = CALL $235([9292])
	*($4 + [16]) = *($4 + [112])
	$7 = CALL $2(($4 + [120]), ($4 + [16]))
	*($4 + [104]) = [9286]
	*($4 + [108]) = CALL $235([9286])
	*($4 + [8]) = *($4 + [104])
	$8 = CALL $2(($4 + [464]), ($4 + [8]))
	*($4 + [96]) = [9303]
	*($4 + [100]) = CALL $235([9303])
	*($4) = *($4 + [96])
	$9 = CALL $2(($4 + [488]), $4)
	*($4 + [176]) = $1
	*($4 + [184]) = *($8)
	*($4 + [192]) = *($9)
	CALL $127((($4 + [176]) + [24]), ($4 + [376]))
	*(($8 = (($4 + [288]) + [24]))) = [0]
	*($4 + [304]) = (int_64)0
	*($4 + [288]) = *($6)
	*($4 + [296]) = *($7)
	*(($6 = CALL _Znwj([16]))) = $1
	*($6 + [8]) = $5
	$7 = ($6 + [16])
	*($8) = $7
	*(($4 + [308])) = $7
	*($4 + [304]) = $6
	CALL $128((($4 + [288]) + [28]), ($4 + [176]))
	CALL $52(($4 + [288]))
	$6 = *($4 + [316])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [320])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$6 = *($4 + [304])
	if ( ($6 == 0) ){ goto $label$8 }
	*(($4 + [308])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$8
	$6 = *(($4 + [228]))
	if ( ($6 == 0) ){ goto $label$9 }
	*(($4 + [232])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$6 = *(($4 + [216]))
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [220])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$10
	$6 = *(($4 + [204]))
	if ( ($6 == 0) ){ goto $label$11 }
	*(($4 + [208])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	*($4 + [95]) = [0]
	$10 = *(($3 + [4]))
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$12 }
	$11 = (($4 + [416]) + [24])
	$7 = (($4 + [288]) | [4])
	$8 = (($4 + [176]) | [4])
	$12 = (($4 + [176]) + [40])
	$13 = ($4 + [224])
	$14 = ($4 + [444])
	
.LOOP $label$13:
	*((($4 + [288]) + [32])) = *(($6 + [32]))
	*((($4 + [288]) + [24])) = *(($6 + [24]))
	*((($4 + [288]) + [16])) = *(($6 + [16]))
	*((($4 + [288]) + [8])) = *(($6 + [8]))
	*($4 + [288]) = *($6)
	*($12) = [0]
	*($13) = (int_64)0
	*($8) = *($7)
	*(($8 + [8])) = *(($7 + [8]))
	*(($8 + [16])) = *(($7 + [16]))
	*(($8 + [24])) = *(($7 + [24]))
	*(($8 + [32])) = *(($7 + [32]))
	*($4 + [176]) = [0]
	$5 = *($0)
	*($4 + [84]) = ($4 + [176])
	*($4 + [80]) = ($4 + [95])
	*($4 + [488]) = $5
	if ( ((int_64)*($4 + [416]) == (int_64)CALL current_receiver()) ){ goto $label$14 }
	CALL eosio_assert([0], [10945])
	
.LABEL $label$14
	*((($4 + [464]) + [8])) = ($4 + [488])
	*($4 + [468]) = ($4 + [80])
	*($4 + [464]) = ($4 + [416])
	*(($3 = CALL _Znwj([80])) + [8]) = [0]
	*($3 + [64]) = ($4 + [416])
	CALL $129(($4 + [464]), $3)
	*($4 + [480]) = $3
	$5 = *($3)
	*($4 + [464]) = $5
	$15 = *($3 + [68])
	*($4 + [460]) = $15
	$9 = *($14)
	if ( ((uint_32)$9 >= (uint_32)*((($4 + [416]) + [32]))) ){ goto $label$17 }
	*($9 + [8]) = $5
	*($9 + [16]) = $15
	*($4 + [480]) = [0]
	*($9) = $3
	*($14) = ($9 + [24])
	$3 = *($4 + [480])
	*($4 + [480]) = [0]
	if ( $3 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $88($11, ($4 + [480]), ($4 + [464]), ($4 + [460]))
	$3 = *($4 + [480])
	*($4 + [480]) = [0]
	if ( ($3 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv($3)
	
.LABEL $label$15
	*($4 + [95]) = (*($4 + [95]) + [1])
	$6 = ($6 + [40])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$12
	*($4 + [95]) = [0]
	if ( (int_64)($2 == 0) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)$1) ){ goto $label$18 }
	*((($4 + [176]) + [32])) = [0]
	*($4 + [184]) = $1
	*($4 + [192]) = (int_64)-1
	*($4 + [200]) = (int_64)0
	*($4 + [212]) = [0]
	$5 = *($0)
	*($4 + [176]) = $5
	if ( ((int_64)$5 == (int_64)CALL current_receiver()) ){ goto $label$19 }
	CALL eosio_assert([0], [10945])
	
.LABEL $label$19
	*(($6 = CALL _Znwj([32])) + [16]) = ($4 + [176])
	*($6 + [8]) = $2
	*($6) = *($4 + [95])
	CALL memcpy(($4 + [288]), $6, [8])
	$3 = ($6 + [8])
	CALL memcpy((($4 + [288]) | [8]), $3, [8])
	$1 = *($6)
	$7 = (($4 + [176]) + [8])
	*($6 + [20]) = CALL db_store_i64(*($7), (int_64)4148111391159058432, $5, $1, ($4 + [288]), [16])
	$8 = (($4 + [176]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$20 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	$1 = *($6)
	$2 = *($7)
	*($4 + [464]) = *($3)
	*($6 + [24]) = CALL db_idx64_store($2, (int_64)4148111391159058432, $5, $1, ($4 + [464]))
	*($4 + [464]) = $6
	$5 = *($6)
	*($4 + [288]) = $5
	$7 = *(($6 + [20]))
	*($4 + [488]) = $7
	$8 = ($4 + [204])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($4 + [208]))) ){ goto $label$23 }
	*($3 + [8]) = $5
	*($3 + [16]) = $7
	*($4 + [464]) = [0]
	*($3) = $6
	*($8) = ($3 + [24])
	$6 = *($4 + [464])
	*($4 + [464]) = [0]
	if ( $6 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL $83(($4 + [200]), ($4 + [464]), ($4 + [288]), ($4 + [488]))
	$6 = *($4 + [464])
	*($4 + [464]) = [0]
	if ( ($6 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv($6)
	
.LABEL $label$21
	$7 = *($4 + [200])
	if ( ($7 == 0) ){ goto $label$18 }
	$8 = ($4 + [204])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$25 }
	
.LOOP $label$26:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$27 }
	CALL _ZdlPv($3)
	
.LABEL $label$27
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$26 }
	$6 = *(($4 + [200]))
	goto $label$24 
	
.LABEL $label$25
	$6 = $7
	
.LABEL $label$24
	*($8) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$18
	$6 = *(($4 + [364]))
	if ( ($6 == 0) ){ goto $label$28 }
	*(($4 + [368])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$28
	$6 = *($4 + [352])
	if ( ($6 == 0) ){ goto $label$29 }
	*(($4 + [356])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$29
	$6 = *($4 + [340])
	if ( ($6 == 0) ){ goto $label$30 }
	*(($4 + [344])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$30
	$6 = *(($4 + [404]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($4 + [408])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$31
	$6 = *($4 + [392])
	if ( ($6 == 0) ){ goto $label$32 }
	*(($4 + [396])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$32
	$6 = *($4 + [380])
	if ( ($6 == 0) ){ goto $label$33 }
	*(($4 + [384])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$33
	$7 = *($4 + [440])
	if ( ($7 == 0) ){ goto $label$34 }
	$8 = ($4 + [444])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$36 }
	
.LOOP $label$37:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$38 }
	CALL _ZdlPv($3)
	
.LABEL $label$38
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$37 }
	$6 = *(($4 + [440]))
	goto $label$35 
	
.LABEL $label$36
	$6 = $7
	
.LABEL $label$35
	*($8) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$34
	$global$0 = ($4 + [496])
}

int_32 .FUNC $36 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [56])) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [32]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11116])
	
.LABEL $label$5
	$3 = ($2 + $7)
	$8 = ($4 + [48])
	CALL memcpy(($4 + [32]), $2, [8])
	$9 = ($2 + [8])
	if ( ((uint_32)($7 + [-8]) > (uint_32)[15]) ){ goto $label$6 }
	CALL eosio_assert([0], [11116])
	
.LABEL $label$6
	CALL memcpy($8, $9, [16])
	*(($4 + [24])) = $3
	*($4 + [16]) = $2
	*(($4 + [20])) = ($2 + [24])
	*($4 + [8]) = $1
	*($4) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *((($4 + [32]) + [24]))
	$1 = *((($4 + [32]) + [16]))
	$10 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	CALL void $3((int_32 $10), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $244($2)
	
.LABEL $label$8
	$global$0 = ($4 + [64])
	return [1]
}

void .FUNC $37 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [48]) = $2
	CALL require_auth(*($0))
	*(($4 + [40])) = [0]
	*($4 + [16]) = $1
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	$0 = CALL db_find_i64($5, $1, (int_64)-9026177492230078464, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	if ( ((int_32)*(CALL $85(($4 + [8]), $0) + [64]) == (int_32)($4 + [8])) ){ goto $label$4 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$4
	$6 = *($4 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [4]) = $3
	*($4) = ($4 + [48])
	*($4 + [88]) = $1
	if ( ((int_64)$5 == (int_64)CALL current_receiver()) ){ goto $label$5 }
	CALL eosio_assert([0], [10945])
	
.LABEL $label$5
	*($4 + [68]) = $4
	*($4 + [64]) = ($4 + [8])
	*($4 + [72]) = ($4 + [88])
	*(($0 = CALL _Znwj([80])) + [8]) = [0]
	*($0 + [64]) = ($4 + [8])
	CALL $87(($4 + [64]), $0)
	*($4 + [80]) = $0
	$1 = *($0)
	*($4 + [64]) = $1
	$6 = *($0 + [68])
	*($4 + [60]) = $6
	$7 = ($4 + [36])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($4 + [40]))) ){ goto $label$8 }
	*($3 + [8]) = $1
	*($3 + [16]) = $6
	*($4 + [80]) = [0]
	*($3) = $0
	*($7) = ($3 + [24])
	$0 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( $0 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $88(($4 + [32]), ($4 + [80]), ($4 + [64]), ($4 + [60]))
	$0 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($0)
	
.LABEL $label$6
	CALL prints([9315])
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($4 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($4 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $6
	
.LABEL $label$9
	*($7) = $6
	CALL _ZdlPv($0)
	$global$0 = ($4 + [96])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

int_32 .FUNC $34 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [112]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $103(($4 + [24]), ($4 + [112]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	$9 = *($4 + [72])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $244($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $35 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [56]) = $3
	*($4 + [48]) = $2
	*(($5 = ($4 + [40]))) = [0]
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [8]) = *($0)
	CALL require_auth(CALL $62(($4 + [8])))
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = ($4 + [36])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$5 }
	CALL _ZdlPv($9)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	$8 = *(($4 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$8 = $6
	
.LABEL $label$2
	*($7) = $6
	CALL _ZdlPv($8)
	
.LABEL $label$1
	*($5) = [0]
	*($4 + [16]) = $1
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [44]) = [0]
	*($4 + [8]) = *($0)
	*($4) = ($4 + [8])
	CALL $91(($4 + [72]), $4, ($4 + [48]))
	$8 = *($4 + [76])
	if ( ($8 == 0) ){ goto $label$6 }
	if ( ((int_64)(((int_64)((int_64)*($4 + [48]) ^ (int_64)*($8 + [16])) | (int_64)((int_64)*($4 + [56]) ^ (int_64)*(($8 + [24])))) == 0) == 0) ){ goto $label$6 }
	*($4 + [72]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)*($4 + [72]))
	CALL $95(($4 + [72]))
	CALL $96(*($4), $8)
	CALL prints([9541])
	
.LABEL $label$6
	$0 = *($4 + [32])
	if ( ($0 == 0) ){ goto $label$7 }
	$5 = ($4 + [36])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$11 }
	$6 = *($8 + [44])
	if ( ($6 == 0) ){ goto $label$12 }
	*(($8 + [48])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$6 = *($8 + [32])
	if ( ($6 == 0) ){ goto $label$13 }
	*(($8 + [36])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$13
	CALL _ZdlPv($8)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$10 }
	$8 = *(($4 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$8 = $0
	
.LABEL $label$8
	*($5) = $0
	CALL _ZdlPv($8)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
}

void .FUNC $32 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [40]) = $1
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$1 = *($0)
	*($2) = $1
	CALL $75($2, ($2 + [40]), $1)
	$3 = *($2 + [24])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($2 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$5 }
	CALL _ZdlPv($6)
	
.LABEL $label$5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	$5 = *(($2 + [24]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $3
	
.LABEL $label$2
	*($4) = $3
	CALL _ZdlPv($5)
	
.LABEL $label$1
	CALL prints([9647])
	CALL $76($0, *($2 + [40]))
	$global$0 = ($2 + [48])
}

void .FUNC $33 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($5 = ($4 + [32]))) = [0]
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	*($4) = *($0)
	CALL require_auth(CALL $62($4))
	$6 = *($4 + [24])
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = ($4 + [28])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$5 }
	CALL _ZdlPv($9)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	$8 = *(($4 + [24]))
	goto $label$2 
	
.LABEL $label$3
	$8 = $6
	
.LABEL $label$2
	*($7) = $6
	CALL _ZdlPv($8)
	
.LABEL $label$1
	*($5) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$10 = *($0)
	*($4) = $10
	*($4 + [8]) = $1
	$8 = CALL db_find_i64($10, $1, (int_64)5374645266240503808, ((int_64)((int_64)$3 & (int_64)4294967295) | (int_64)((int_64)$2 & (int_64)-4294967296)))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$8 = CALL $104($4, $8)
	if ( ((int_32)*($8 + [92]) == (int_32)$4) ){ goto $label$7 }
	CALL eosio_assert([0], [11753])
	
.LABEL $label$7
	$9 = CALL db_next_i64(*($8 + [96]), ($4 + [40]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$8 }
	CALL $104($4, $9)
	
.LABEL $label$8
	CALL $105($4, $8)
	CALL prints([9502])
	$11 = *($4 + [24])
	if ( ($11 == 0) ){ goto $label$6 }
	$12 = ($4 + [28])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$10 }
	
.LOOP $label$11:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	$0 = *($7 + [80])
	if ( ($0 == 0) ){ goto $label$13 }
	$13 = ($7 + [84])
	$9 = *($13)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$15 }
	
.LOOP $label$16:
	$8 = ($9 + [-12])
	$6 = *($8)
	if ( ($6 == 0) ){ goto $label$17 }
	*(($9 + [-8])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$17
	$9 = $8
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$16 }
	$8 = *(($7 + [80]))
	goto $label$14 
	
.LABEL $label$15
	$8 = $0
	
.LABEL $label$14
	*($13) = $0
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$11) ){ goto $label$11 }
	$8 = *(($4 + [24]))
	goto $label$9 
	
.LABEL $label$10
	$8 = $11
	
.LABEL $label$9
	*($12) = $11
	CALL _ZdlPv($8)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_64 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$8 = ($global$0 - [160])
	$global$0 = $8
	*($8 + [104]) = $5
	*($8 + [92]) = $4
	*($8 + [96]) = $3
	*($8 + [112]) = $2
	CALL require_auth(*($0))
	*($8 + [80]) = ((int_64)((int_64)$3 & (int_64)4294967295) | (int_64)((int_64)$2 & (int_64)-4294967296))
	*(($4 = ($8 + [72]))) = [0]
	*($8 + [48]) = $1
	*($8 + [56]) = (int_64)-1
	*($8 + [64]) = (int_64)0
	$2 = *($0)
	*($8 + [40]) = $2
	*($8 + [28]) = $6
	*($8 + [32]) = $7
	*($8 + [12]) = ($8 + [112])
	*($8 + [8]) = ($8 + [80])
	*($8 + [16]) = ($8 + [96])
	*($8 + [20]) = ($8 + [92])
	*($8 + [24]) = ($8 + [104])
	*($8 + [152]) = $1
	if ( ((int_64)$2 == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [10945])
	
.LABEL $label$1
	*($8 + [132]) = ($8 + [8])
	*($8 + [128]) = ($8 + [40])
	*($8 + [136]) = ($8 + [152])
	*(($0 = CALL _Znwj([112])) + [32]) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [80 align=4]) = (int_64)0
	*($0 + [88]) = [0]
	*($0 + [92]) = ($8 + [40])
	CALL $101(($8 + [128]), $0)
	*($8 + [144]) = $0
	$1 = *($0)
	*($8 + [128]) = $1
	$6 = *($0 + [96])
	*($8 + [124]) = $6
	$9 = ($8 + [68])
	$7 = *($9)
	if ( ((uint_32)$7 >= (uint_32)*($4)) ){ goto $label$4 }
	*($7 + [8]) = $1
	*($7 + [16]) = $6
	*($8 + [144]) = [0]
	*($7) = $0
	*($9) = ($7 + [24])
	$9 = *($8 + [144])
	*($8 + [144]) = [0]
	if ( ($9 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	CALL $102(($8 + [64]), ($8 + [144]), ($8 + [128]), ($8 + [124]))
	$9 = *($8 + [144])
	*($8 + [144]) = [0]
	if ( ($9 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($9 + [80])
	if ( ($4 == 0) ){ goto $label$5 }
	$10 = ($9 + [84])
	$7 = *($10)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($7 + [-12])
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$9 }
	*(($7 + [-8])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$7 = $0
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($9 + [80]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $4
	
.LABEL $label$6
	*($10) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$5
	CALL _ZdlPv($9)
	
.LABEL $label$2
	CALL prints([9483])
	$11 = *($8 + [64])
	if ( ($11 == 0) ){ goto $label$10 }
	$12 = ($8 + [68])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$12 }
	
.LOOP $label$13:
	$9 = ($9 + [-24])
	$10 = *($9)
	*($9) = [0]
	if ( ($10 == 0) ){ goto $label$14 }
	$4 = *($10 + [80])
	if ( ($4 == 0) ){ goto $label$15 }
	$13 = ($10 + [84])
	$7 = *($13)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$17 }
	
.LOOP $label$18:
	$0 = ($7 + [-12])
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$19 }
	*(($7 + [-8])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$7 = $0
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$18 }
	$0 = *(($10 + [80]))
	goto $label$16 
	
.LABEL $label$17
	$0 = $4
	
.LABEL $label$16
	*($13) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$15
	CALL _ZdlPv($10)
	
.LABEL $label$14
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$13 }
	$0 = *(($8 + [64]))
	goto $label$11 
	
.LABEL $label$12
	$0 = $11
	
.LABEL $label$11
	*($12) = $11
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$global$0 = ($8 + [160])
}

int_32 .FUNC $31 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [168]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $241($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [136])) = (int_64)0
	*(($4 + [128])) = (int_64)0
	*(($4 + [120])) = (int_64)0
	*(($4 + [152])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = [0]
	*($4 + [96]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [192]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $99(($4 + [16]), ($4 + [192]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [176]) + [8]))) = *($3)
	*($4 + [176]) = *($4)
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [176])
	*($4 + [32]) = $0
	*($4 + [192]) = $0
	*($4 + [196]) = ($4 + [168])
	*($4 + [192]) = ($4 + [16])
	CALL $100(($4 + [192]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $244($2)
	
.LABEL $label$4
	$6 = *($4 + [144])
	if ( ($6 == 0) ){ goto $label$5 }
	$7 = ($4 + [148])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($5 + [-12])
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$9 }
	*(($5 + [-8])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$5 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [144]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $6
	
.LABEL $label$6
	*($7) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [208])
	return [1]
}

int_32 .FUNC $215 ()
{
	CALL $237([12164])
	return [12172]
}

int_32 .FUNC $214 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $230($0, $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $217 (int_32 $0)
{
	return [0]
}

void .FUNC $216 ()
{
	CALL $238([12164])
}

int_32 .FUNC $211 (int_32 $0)
{
	int_32 $1
	return $1
}

void .FUNC $210 (int_32 $0)
{
}

int_32 .FUNC $198 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $199 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $200($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $196 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $197 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $244($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $239(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [12148])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $239(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $244($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}