(data (i32.const 4) "0j\00\00")
(data (i32.const 16) "0123456789abcdef\00")
(data (i32.const 48) "onerror\00")
(data (i32.const 64) "eosio\00")
(data (i32.const 80) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 144) "transfer\00")
(data (i32.const 160) "eosio.token\00")
(data (i32.const 176) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 240) "invalid symbol name\00")
(data (i32.const 272) "read\00")
(data (i32.const 288) "eoswinnerio1\00")
(data (i32.const 304) "withdraw Dice Contract Fee\00")
(data (i32.const 336) "active\00")
(data (i32.const 352) "write\00")
(data (i32.const 368) "cannot pass end iterator to erase\00")
(data (i32.const 416) "cannot increment end iterator\00")
(data (i32.const 448) "object passed to erase is not in multi_index\00")
(data (i32.const 496) "cannot erase objects in table of another contract\00")
(data (i32.const 560) "attempt to remove object that was not in multi_index\00")
(data (i32.const 624) "error reading iterator\00")
(data (i32.const 656) "get\00")
(data (i32.const 672) "Contract is init\00")
(data (i32.const 704) "cannot create objects in table of another contract\00")
(data (i32.const 768) "the dice range should less then 97 and greater then 1\00")
(data (i32.const 832) "the amount for bet should be no less then 0.1, and no greater then 2048\00")
(data (i32.const 912) "Bet amount should less than max\00")
(data (i32.const 944) "Winner! Play: dice.eoswinner.io\00")
(data (i32.const 976) "Nice! Gotten Referral Reward.\00")
(data (i32.const 1008) "Congratulations! You got KEY airdrops!\00")
(data (i32.const 1056) "eoskeybanker\00")
(data (i32.const 1072) "payfordapp2\00")
(data (i32.const 1088) "eoskeydicelg\00")
(data (i32.const 1104) "result\00")
(data (i32.const 1120) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 1184) "pay_player no resource row\00")
(data (i32.const 1216) "unable to find key\00")
(data (i32.const 1248) "attempt to subtract asset with different symbol\00")
(data (i32.const 1296) "subtraction underflow\00")
(data (i32.const 1328) "subtraction overflow\00")
(data (i32.const 1360) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1424) "dice contract bought key\00")
(data (i32.const 1456) "cannot pass end iterator to modify\00")
(data (i32.const 1504) "object passed to modify is not in multi_index\00")
(data (i32.const 1552) "cannot modify objects in table of another contract\00")
(data (i32.const 1616) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1680) "hash len to resolve is 0\00")
(data (i32.const 1712) "KjQ6WyRDRVQW5kw/11F0Bsxt67CnKzde+iPJD6ItV4pjMCuwu3WsGvO/OJnvYtZv+ehV7y92nZn3TBLcNgGWfc8gpixxeYrL+fWQ2DlcabCIIzRpddywq/Ll/qC56zyYp7GePHbBGmh0nFiisMUII+h3ZxJOKknQOBLLJIEJJvskp2p0TOMFG6f2osENN/TqVWzrDHJtWRhRMJtqi1X2v5oSpEHPVjc94w56KV7kJz2Yos7ZEyU+n4NgWBelKhN0xlPHu44QuRF6Srx5HOKXJxnSvJwo1Co9vymI2EvFNlbmJvKvGLTC+MJs+BuuqK49y+yDXgIaD3UScKO/5dmDI1lvybBfhM1frXa1Nr5WBkzkZz8x4uicyrxVY2TzjMLgD71kLReWOivwwhyOALRoP8WQ3KSjHbNu3Xu8givjAG2DkQxs6j+9lDLbaH1Ciu+jbHxdgyNd0Gkyft37wZQtmVmqg+ZPHdZUz7SDIh3pSOvIS+xkVQexKHk70UrrWXDOKyrogVgyhNUV8nYXEJ5c51MAU8kZN8WSKII45m8w1i5vbSwzfV5gwc7kfeMuif0eSPkzh4Umoek\00")
(data (i32.const 10704) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "is_account" (func $fimport$12 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$16 (param i64)))
(import "env" "require_auth2" (func $fimport$17 (param i64 i64)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(import "env" "sha256" (func $fimport$19 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$20 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$21 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$22 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN4comm6to_hexEPKcm" (func $5))
(export "_ZN4comm7to_hex2EPKcm" (func $6))
(export "apply" (func $7))
(export "malloc" (func $72))
(export "free" (func $75))
(export "atoi" (func $89))
(export "memchr" (func $90))
(export "memcmp" (func $91))
(export "strlen" (func $92))
(table $0 5 5 anyfunc)
(elem (i32.const 0) $93 $9 $11 $13 $14)



int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $93 ()
{
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)5
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [352])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [352])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [160])
	*([0] + [4]) = $8
	$4 = ($0 + [96])
	$5 = CALL $65($4, (int_64)1, [1216])
	*($8 + [136]) = *($5)
	$6 = (($8 + [136]) + [8])
	CALL $87($6, ($5 + [8]))
	CALL $87(($8 + [120]), $6)
	CALL $66(($8 + [32]), $1, ($8 + [120]))
	$1 = *($2)
	$5 = ($1 & [1])
	$2 = CALL $82(($8 + [32]), ( *($2 + [8]) ? ($2 + [1]) : $5 ), ( *($2 + [4]) ? uint_32($1 >> [1]) : $5 ))
	$5 = ($2 + [8])
	*((($8 + [104]) + [8])) = *($5)
	*($8 + [104]) = *($2)
	$1 = [0]
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($5) = [0]
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL $77(*($8 + [40]))
	
.LABEL $label$1
	$2 = *($8 + [104])
	$5 = ($2 & [1])
	CALL sha512(( *($8 + [112]) ? (($8 + [104]) | [1]) : $5 ), ( *($8 + [108]) ? uint_32($2 >> [1]) : $5 ), ($8 + [32]))
	CALL _ZN4comm7to_hex2EPKcm(($8 + [16]), ($8 + [32]), [64])
	$2 = CALL db_lowerbound_i64(*($4), *(($0 + [104])), (int_64)-5069194696530591744, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$1 = CALL $24($4, $2)
	
.LABEL $label$2
	$7 = *($0)
	*($8 + [8]) = ($8 + [16])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1456])
	CALL $67($4, $1, $7, ($8 + [8]))
	CALL memcpy($3, (($8 + [32]) + [32]), [32])
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $77(*($8 + [24]))
	
.LABEL $label$3
	if ( ((*($8 + [104]) & [1]) == 0) ){ goto $label$4 }
	CALL $77(*(($8 + [112])))
	
.LABEL $label$4
	if ( ((*($8 + [120]) & [1]) == 0) ){ goto $label$5 }
	CALL $77(*($8 + [128]))
	
.LABEL $label$5
	if ( ((*(($8 + [144])) & [1]) == 0) ){ goto $label$6 }
	CALL $77(*(($8 + [152])))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [160])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	*(($11 = $12) + [78]) = CALL tapos_block_num()
	*($11 + [76]) = CALL tapos_block_prefix()
	$1 = ($1 + [40])
	$5 = *(CALL $57($1, (int_64)1, [1216]) + [8])
	$6 = *(CALL $57($1, (int_64)2, [1216]) + [8])
	$7 = *(CALL $57($1, (int_64)3, [1216]) + [8])
	$8 = *(CALL $57($1, (int_64)4, [1216]) + [8])
	$9 = *(CALL $57($1, (int_64)5, [1216]) + [8])
	$1 = *($4)
	if ( ($1 & [1]) ){ goto $label$2 }
	$1 = uint_32($1 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($4 + [4])
	
.LABEL $label$1
	$10 = ($12 - (($1 + [47]) & [-16]))
	*([0] + [4]) = $10
	*($11 + [68]) = $10
	*($11 + [64]) = $10
	*($11 + [72]) = (($10 + $1) + [32])
	$1 = CALL $21(($11 + [64]), $4)
	*($11) = *($3)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[1]), [352])
	CALL memcpy(*($1 + [4]), $11, [2])
	$4 = (*($1 + [4]) + [2])
	*($1 + [4]) = $4
	*($11 + [62]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($1 + [8]) - $4) > (int_32)[1]), [352])
	CALL memcpy(*($1 + [4]), ($11 + [62]), [2])
	$4 = (*($1 + [4]) + [2])
	*($1 + [4]) = $4
	CALL eosio_assert(((int_32)(*($1 + [8]) - $4) > (int_32)[1]), [352])
	CALL memcpy(*($1 + [4]), ($11 + [78]), [2])
	$4 = (*($1 + [4]) + [2])
	*($1 + [4]) = $4
	CALL eosio_assert(((int_32)(*($1 + [8]) - $4) > (int_32)[1]), [352])
	CALL memcpy(*($1 + [4]), ($11 + [76]), [2])
	*($1 + [4]) = (*($1 + [4]) + [2])
	*($11 + [60]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[1]), [352])
	CALL memcpy(*($1 + [4]), ($11 + [60]), [2])
	$4 = (*($1 + [4]) + [2])
	*($1 + [4]) = $4
	*($11 + [58]) = (CASTING int_32)(float_64 ((float_64)*($2) * (float_64)(float_64)10))
	CALL eosio_assert(((int_32)(*($1 + [8]) - $4) > (int_32)[1]), [352])
	CALL memcpy(*($1 + [4]), ($11 + [58]), [2])
	$4 = (*($1 + [4]) + [2])
	*($1 + [4]) = $4
	*($11 + [56]) = (CASTING int_32)(float_64 ((float_64)*($2 + [8]) * (float_64)(float_64)10))
	CALL eosio_assert(((int_32)(*($1 + [8]) - $4) > (int_32)[1]), [352])
	CALL memcpy(*($1 + [4]), ($11 + [56]), [2])
	$4 = (*($1 + [4]) + [2])
	*($1 + [4]) = $4
	*($11 + [54]) = (CASTING int_32)(float_64 ((float_64)*($2 + [16]) * (float_64)(float_64)10))
	CALL eosio_assert(((int_32)(*($1 + [8]) - $4) > (int_32)[1]), [352])
	CALL memcpy(*($1 + [4]), ($11 + [54]), [2])
	$4 = (*($1 + [4]) + [2])
	*($1 + [4]) = $4
	*($11 + [52]) = (CASTING int_32)(float_64 ((float_64)*($2 + [24]) * (float_64)(float_64)10))
	CALL eosio_assert(((int_32)(*($1 + [8]) - $4) > (int_32)[1]), [352])
	CALL memcpy(*($1 + [4]), ($11 + [52]), [2])
	$2 = (*($1 + [4]) + [2])
	*($1 + [4]) = $2
	*($11 + [50]) = ((uint_64)$5 / (uint_64)(int_64)1000)
	CALL eosio_assert(((int_32)(*($1 + [8]) - $2) > (int_32)[1]), [352])
	CALL memcpy(*($1 + [4]), ($11 + [50]), [2])
	$2 = (*($1 + [4]) + [2])
	*($1 + [4]) = $2
	*($11 + [48]) = ((uint_64)$6 / (uint_64)(int_64)1000)
	CALL eosio_assert(((int_32)(*($1 + [8]) - $2) > (int_32)[1]), [352])
	CALL memcpy(*($1 + [4]), ($11 + [48]), [2])
	$2 = (*($1 + [4]) + [2])
	*($1 + [4]) = $2
	*($11 + [46]) = ((uint_64)$7 / (uint_64)(int_64)1000)
	CALL eosio_assert(((int_32)(*($1 + [8]) - $2) > (int_32)[1]), [352])
	CALL memcpy(*($1 + [4]), ($11 + [46]), [2])
	$2 = (*($1 + [4]) + [2])
	*($1 + [4]) = $2
	*($11 + [44]) = $8
	CALL eosio_assert(((int_32)(*($1 + [8]) - $2) > (int_32)[1]), [352])
	CALL memcpy(*($1 + [4]), ($11 + [44]), [2])
	$2 = (*($1 + [4]) + [2])
	*($1 + [4]) = $2
	*($11 + [42]) = $9
	CALL eosio_assert(((int_32)(*($1 + [8]) - $2) > (int_32)[1]), [352])
	CALL memcpy(*($1 + [4]), ($11 + [42]), [2])
	*($1 + [4]) = (*($1 + [4]) + [2])
	CALL sha256($10, (*($11 + [68]) - *($11 + [64])), $11)
	CALL _ZN4comm7to_hex2EPKcm($0, $11, [32])
	$12
	*([0] + [4]) = ($11 + [80])
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $26(*($1), ($0 + [32]))
}

int_32 .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)1
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [352])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [352])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)2
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [352])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [352])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)3
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [352])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [352])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $47 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*($7 + [8]) = $1
	$2 = *(($0 + [64]))
	$6 = *(($0 + [68]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)5) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [40])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [1120])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [40])), *(($0 + [48])), (int_64)7235159551874301952, (int_64)5)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $22($4, $6)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [1120])
	
.LABEL $label$3
	$1 = *($0)
	*($7) = ($7 + [8])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1456])
	CALL $68($4, $5, $1, $7)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1056]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$9 = [0]
	*(($10 + [72])) = [0]
	*($10 + [48]) = $7
	*($10 + [40]) = $7
	*($10 + [56]) = (int_64)-1
	*($10 + [64]) = (int_64)0
	$4 = CALL db_find_i64($7, $7, (int_64)-7949128876922874880, (int_64)-7949128876922874880)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	$4 = CALL $69(($10 + [40]), $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($10 + [40])), [1120])
	$9 = *($10 + [64])
	goto $label$5 
	
.LABEL $label$6
	$4 = ($0 + [8])
	
.LABEL $label$5
	*(($2 = (($10 + [8]) + [24]))) = *(($4 + [24]))
	*(($0 = (($10 + [8]) + [16]))) = *(($4 + [16]))
	*(($3 = (($10 + [8]) + [8]))) = *(($4 + [8]))
	*($10 + [8]) = *($4)
	*(($1 + [24])) = *($2)
	*(($1 + [16])) = *($0)
	*(($1 + [8])) = *($3)
	*($1) = *($10 + [8])
	if ( ($9 == 0) ){ goto $label$7 }
	$2 = $9
	$1 = ($10 + [68])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $77($2)
	
.LABEL $label$10
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$9 }
	$2 = *(($10 + [64]))
	
.LABEL $label$8
	*($1) = $9
	CALL $77($2)
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [80])
}

void .FUNC $45 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [32])
	*([0] + [4]) = $14
	if ( (*($1) & [1]) ){ goto $label$2 }
	$9 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$9 = *($1 + [8])
	
.LABEL $label$1
	$9 = CALL atoi($9)
	*($2) = $0
	*($2 + [28]) = $9
	$8 = [-1]
	$3 = CALL $85($1, [45], [0])
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$3 }
	$4 = CALL $85($1, [45], $9)
	$9 = ($3 + [1])
	CALL $88(($14 + [16]), $1, $9, ($4 - $3), $1)
	$9 = ( *($14 + [24]) ? (($14 + [16]) | [1]) : (*($14 + [16]) & [1]) )
	
.LOOP $label$4:
	$7 = ($9 + $8)
	$5 = ($8 + [1])
	$8 = $5
	if ( *(($7 + [1])) ){ goto $label$4 }
	$6 = (CASTING uint_64)(uint_32 $5)
	$11 = (int_64)0
	$10 = (int_64)59
	$12 = (int_64)0
	
.LOOP $label$5:
	$13 = (int_64)0
	if ( ((uint_64)$11 >= (uint_64)$6) ){ goto $label$6 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$8 = ($8 + [165])
	goto $label$7 
	
.LABEL $label$8
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$10 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$9 
	
.LABEL $label$10
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$9
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$5 }
	if ( (CALL is_account($0) == 0) ){ goto $label$14 }
	*($2 + [8]) = $12
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$11 }
	CALL $88($14, $1, ($4 + [1]), [-1], $1)
	$9 = ($2 + [16])
	if ( (*($2 + [16]) & [1]) ){ goto $label$13 }
	*($9) = [0]
	goto $label$12 
	
.LABEL $label$14
	CALL $88($14, $1, $3, [-1], $1)
	$9 = ($2 + [16])
	if ( (*($2 + [16]) & [1]) ){ goto $label$16 }
	*($9) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*(($2 + [24]))) = [0]
	*(($2 + [20])) = [0]
	
.LABEL $label$15
	CALL $81($9, [0])
	*(($9 + [8])) = *(($14 + [8]))
	*($9) = *($14)
	goto $label$11 
	
.LABEL $label$13
	*(*(($2 + [24]))) = [0]
	*(($2 + [20])) = [0]
	
.LABEL $label$12
	CALL $81($9, [0])
	*(($9 + [8])) = *(($14 + [8]))
	*($9) = *($14)
	
.LABEL $label$11
	if ( ((*($14 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $77(*(($14 + [24])))
	
.LABEL $label$3
	*([0] + [4]) = ($14 + [32])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $87(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $87(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $77(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $77(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $8 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0 + [8]) = (int_64)4721979696256909312
	*($0) = $1
	*($0 + [40]) = $1
	*(($0 + [16])) = (int_64)4672601161629433856
	*(($0 + [24])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [48])) = $1
	*(($0 + [56])) = (int_64)-1
	*(($0 + [64])) = [0]
	*(($0 + [68])) = [0]
	*(($0 + [72])) = [0]
	*(($0 + [88])) = [0]
	*($0 + [80 align=4]) = (int_64)0
	$4 = ($0 + [80])
	$2 = CALL strlen([1712])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $76($3)
	*(($0 + [80])) = ($3 | [1])
	*(($0 + [88])) = $4
	*(($0 + [84])) = $2
	
.LABEL $label$3
	CALL memcpy($4, [1712], $2)
	
.LABEL $label$2
	*(($4 + $2)) = [0]
	*(($0 + [112])) = (int_64)-1
	*(($0 + [120])) = (int_64)0
	*(($0 + [128])) = [0]
	$1 = *($0)
	*($0 + [96]) = $1
	*(($0 + [104])) = $1
	return $0
	
.LABEL $label$1
	CALL $78($4)
	return (unreachable)
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_32 $23
	$23 = (*([0] + [4]) - [448])
	*([0] + [4]) = $23
	$19 = (int_64)0
	$18 = (int_64)59
	$17 = [288]
	$20 = (int_64)0
	
.LOOP $label$1:
	$21 = (int_64)0
	if ( ((uint_64)$19 > (uint_64)(int_64)11) ){ goto $label$2 }
	$5 = *($17)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$5 = ($5 + [165])
	goto $label$3 
	
.LABEL $label$4
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$2
	$17 = ($17 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$20 == (int_64)$1) ){ goto $label$9 }
	$19 = *($0)
	if ( ((int_64)$19 == (int_64)$1) ){ goto $label$9 }
	if ( ((int_64)$19 != (int_64)$2) ){ goto $label$9 }
	$16 = *($3 + [8])
	if ( ((int_64)$16 != (int_64)1397703940) ){ goto $label$9 }
	*(($23 + [376])) = [0]
	$19 = (int_64)0
	*($23 + [360]) = (int_64)0
	*($23 + [352]) = (int_64)0
	*($23 + [368]) = (int_64)0
	*($23 + [380]) = [0]
	CALL $87(($23 + [336]), $4)
	CALL $45($1, ($23 + [336]), ($23 + [352]))
	if ( ((*($23 + [336]) & [1]) == 0) ){ goto $label$10 }
	CALL $77(*($23 + [344]))
	
.LABEL $label$10
	$13 = *(($23 + [380]))
	CALL eosio_assert(((($13 + [-2]) & [255]) <= [95]), [768])
	$7 = *($3)
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)-100) <= (int_64)20479901), [832])
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	CALL $46($0, ($23 + [304]))
	$18 = (int_64)200
	$20 = *($0)
	$21 = *((($23 + [352]) + [8]))
	if ( ((int_64)$21 == (int_64)$20) ){ goto $label$11 }
	if ( ((int_64)$21 == (int_64)$1) ){ goto $label$11 }
	$17 = CALL is_account($21)
	$20 = ( $21 ? $20 : $17 )
	$18 = ( (int_64)148 ? (int_64)200 : $17 )
	$19 = ( (int_64)58 ? (int_64)0 : $17 )
	
.LABEL $label$11
	$6 = ($23 + [368])
	CALL $47($0, ((uint_64)((int_64)((int_64)$7 * (int_64))($18 - $19)) * (int_64)50) / (uint_64)(int_64)1000000))
	$9 = ((uint_64)((int_64)((uint_64)((int_64))((int_64)10000 - $18) * (int_64)100) / (uint_64)((int_64)$2 + (int_64)-1)) * (int_64)$7) / (uint_64)(int_64)10000
	$10 = (int_64)
	CALL eosio_assert(((uint_64)$10($9) - $7)) <= (uint_64)((uint_64)(Rounds 0)(((float_64)*($23 + [328]) * (float_64)(float_64)1e4)) / (uint_64)(int_64)25)), [912])
	*(($17 = (($23 + [272]) + [8]))) = *(($3 + [8]))
	*($23 + [272]) = *($3)
	CALL $87(($23 + [256]), $4)
	*((($23 + [8]) + [8])) = *($17)
	*($23 + [8]) = *($23 + [272])
	CALL $48(($23 + [288]), $0, ($23 + [304]), ($23 + [8]), ($23 + [256]))
	$21 = ((int_64)$19 * (int_64)$7)
	$8 = ((uint_64)$21 / (uint_64)(int_64)10000)
	if ( ((*($23 + [256]) & [1]) == 0) ){ goto $label$12 }
	CALL $77(*($23 + [264]))
	
.LABEL $label$12
	CALL $87(($23 + [208]), $6)
	CALL $87(($23 + [192]), ($23 + [288]))
	CALL $49($0, ($23 + [208]), ($23 + [192]), ($23 + [224]))
	if ( ((*($23 + [192]) & [1]) == 0) ){ goto $label$13 }
	CALL $77(*($23 + [200]))
	
.LABEL $label$13
	if ( ((*($23 + [208]) & [1]) == 0) ){ goto $label$14 }
	CALL $77(*($23 + [216]))
	
.LABEL $label$14
	$11 = CALL $50($0, ($23 + [224]), [32])
	CALL eosio_assert([1], [176])
	$17 = [0]
	$19 = (uint_64)$16 >> (uint_64)(int_64)8
	$18 = $19)
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$5 = [1]
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$5 = [0]
	
.LABEL $label$15
	CALL eosio_assert($5, [240])
	CALL eosio_assert([1], [176])
	$17 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	
.LOOP $label$24:
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$24 }
	
.LABEL $label$23
	$5 = [1]
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$5 = [0]
	
.LABEL $label$20
	CALL eosio_assert($5, [240])
	CALL eosio_assert([1], [176])
	$19 = (int_64)5462355
	$17 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	
.LOOP $label$29:
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$29 }
	
.LABEL $label$28
	$5 = [1]
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	CALL eosio_assert($5, [240])
	if ( ((int_32)$11 >= (int_32)$13) ){ goto $label$38 }
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [176])
	$19 = (int_64)5850443
	$15 = (int_64)1497713412
	$17 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$40 }
	
.LOOP $label$41:
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$41 }
	
.LABEL $label$40
	$5 = [1]
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$39 }
	goto $label$36 
	
.LABEL $label$38
	CALL eosio_assert([1], [176])
	$19 = (int_64)5850443
	$15 = (int_64)1497713412
	$17 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$35 }
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$43 }
	
.LOOP $label$44:
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$35 }
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$44 }
	
.LABEL $label$43
	$5 = [1]
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$42 }
	goto $label$34 
	
.LABEL $label$37
	$5 = [0]
	
.LABEL $label$36
	CALL eosio_assert($5, [240])
	CALL eosio_assert([1], [176])
	CALL eosio_assert([1], [176])
	*($23 + [392]) = [0]
	*($23 + [384]) = (int_64)0
	*(($23 + [80])) = $16
	*(($23 + [92])) = (int_64)0
	*($23 + [72]) = $9
	*($23 + [64]) = $1
	*($23 + [88]) = [0]
	$4 = ($23 + [88])
	$17 = CALL strlen([944])
	if ( ((uint_32)$17 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$17 >= (uint_32)[11]) ){ goto $label$33 }
	*(($23 + [88])) = ($17 << [1])
	$5 = ($4 + [1])
	if ( $17 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$35
	$5 = [0]
	
.LABEL $label$34
	CALL eosio_assert($5, [240])
	$19 = (int_64)0
	CALL $53($0, $7, (int_64)0, (int_64)0, (int_64)0)
	CALL $54($0)
	$9 = (int_64)0
	goto $label$30 
	
.LABEL $label$33
	$13 = (($17 + [16]) & [-16])
	$5 = CALL $76($13)
	*(($23 + [88])) = ($13 | [1])
	*(($23 + [96])) = $5
	*(($23 + [92])) = $17
	
.LABEL $label$32
	CALL memcpy($5, [944], $17)
	
.LABEL $label$31
	*(($5 + $17)) = [0]
	$17 = *($23 + [388])
	if ( ((uint_32)$17 >= (uint_32)*((($23 + [384]) + [8]))) ){ goto $label$46 }
	*($17) = *($23 + [64])
	*(($17 + [16])) = *((($23 + [64]) + [16]))
	*(($17 + [8])) = *((($23 + [64]) + [8]))
	*(($17 + [32])) = *(($4 + [8]))
	*($17 + [24 align=4]) = *($4)
	*(($23 + [88])) = [0]
	*(($23 + [92])) = [0]
	*((($23 + [64]) + [32])) = [0]
	*($23 + [388]) = ($17 + [40])
	goto $label$45 
	
.LABEL $label$46
	CALL $51(($23 + [384]), ($23 + [64]))
	if ( ((*(($23 + [88])) & [1]) == 0) ){ goto $label$45 }
	CALL $77(*(($23 + [96])))
	
.LABEL $label$45
	if ( (uint_64)($21 <= (int_64)10000) ){ goto $label$47 }
	*(($23 + [80])) = $16
	*(($23 + [92])) = (int_64)0
	*($23 + [72]) = $8
	*($23 + [64]) = $20
	*($23 + [88]) = [0]
	$4 = ($23 + [88])
	$17 = CALL strlen([976])
	if ( ((uint_32)$17 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$17 >= (uint_32)[11]) ){ goto $label$50 }
	*(($23 + [88])) = ($17 << [1])
	$5 = ($4 + [1])
	if ( $17 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$13 = (($17 + [16]) & [-16])
	$5 = CALL $76($13)
	*(($23 + [88])) = ($13 | [1])
	*(($23 + [96])) = $5
	*(($23 + [92])) = $17
	
.LABEL $label$49
	CALL memcpy($5, [976], $17)
	
.LABEL $label$48
	*(($5 + $17)) = [0]
	$17 = *($23 + [388])
	if ( ((uint_32)$17 >= (uint_32)*((($23 + [384]) + [8]))) ){ goto $label$51 }
	*($17) = *($23 + [64])
	*(($17 + [16])) = *((($23 + [64]) + [16]))
	*(($17 + [8])) = *((($23 + [64]) + [8]))
	*(($17 + [32])) = *(($4 + [8]))
	*($17 + [24 align=4]) = *($4)
	*(($23 + [88])) = [0]
	*(($23 + [92])) = [0]
	*((($23 + [64]) + [32])) = [0]
	*($23 + [388]) = ($17 + [40])
	goto $label$47 
	
.LABEL $label$51
	CALL $51(($23 + [384]), ($23 + [64]))
	if ( ((*(($23 + [88])) & [1]) == 0) ){ goto $label$47 }
	CALL $77(*(($23 + [96])))
	
.LABEL $label$47
	*(($23 + [80])) = (int_64)1497713412
	*(($23 + [92])) = (int_64)0
	*($23 + [72]) = $7
	*($23 + [64]) = $1
	*($23 + [88]) = [0]
	$4 = ($23 + [88])
	$17 = CALL strlen([1008])
	if ( ((uint_32)$17 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$17 >= (uint_32)[11]) ){ goto $label$54 }
	*(($23 + [88])) = ($17 << [1])
	$5 = ($4 + [1])
	if ( $17 ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$13 = (($17 + [16]) & [-16])
	$5 = CALL $76($13)
	*(($23 + [88])) = ($13 | [1])
	*(($23 + [96])) = $5
	*(($23 + [92])) = $17
	
.LABEL $label$53
	CALL memcpy($5, [1008], $17)
	
.LABEL $label$52
	*(($5 + $17)) = [0]
	$17 = *($23 + [388])
	if ( ((uint_32)$17 >= (uint_32)*((($23 + [384]) + [8]))) ){ goto $label$56 }
	*($17) = *($23 + [64])
	*(($17 + [16])) = *((($23 + [64]) + [16]))
	*(($17 + [8])) = *((($23 + [64]) + [8]))
	*(($17 + [32])) = *(($4 + [8]))
	*($17 + [24 align=4]) = *($4)
	*(($23 + [88])) = [0]
	*(($23 + [92])) = [0]
	*((($23 + [64]) + [32])) = [0]
	*($23 + [388]) = ($17 + [40])
	goto $label$55 
	
.LABEL $label$56
	CALL $51(($23 + [384]), ($23 + [64]))
	if ( ((*(($23 + [88])) & [1]) == 0) ){ goto $label$55 }
	CALL $77(*(($23 + [96])))
	
.LABEL $label$55
	$12 = *($0)
	$19 = (int_64)0
	$21 = (int_64)59
	$17 = [336]
	$20 = (int_64)0
	
.LOOP $label$57:
	if ( ((uint_64)$19 > (uint_64)(int_64)5) ){ goto $label$62 }
	$5 = *($17)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$61 }
	$5 = ($5 + [165])
	goto $label$60 
	
.LABEL $label$62
	$18 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$61
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$60
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$59
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$58
	$17 = ($17 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$20 = ((int_64)$18 | (int_64)$20)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$57 }
	$19 = (int_64)0
	$18 = (int_64)59
	$17 = [1056]
	$2 = (int_64)0
	
.LOOP $label$63:
	$21 = (int_64)0
	if ( ((uint_64)$19 > (uint_64)(int_64)11) ){ goto $label$64 }
	$5 = *($17)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$5 = ($5 + [165])
	goto $label$65 
	
.LABEL $label$66
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$64
	$17 = ($17 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$2 = ((int_64)$21 | (int_64)$2)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$63 }
	$19 = (int_64)0
	$21 = (int_64)59
	$17 = [1072]
	$22 = (int_64)0
	
.LOOP $label$67:
	if ( ((uint_64)$19 > (uint_64)(int_64)10) ){ goto $label$72 }
	$5 = *($17)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$71 }
	$5 = ($5 + [165])
	goto $label$70 
	
.LABEL $label$72
	$18 = (int_64)0
	if ( ((int_64)$19 == (int_64)11) ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$71
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$70
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$69
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$68
	$17 = ($17 + [1])
	$21 = ((int_64)$21 + (int_64)-5)
	$22 = ((int_64)$18 | (int_64)$22)
	$19 = ((int_64)$19 + (int_64)1)
	if ( ((int_64)$19 != (int_64)13) ){ goto $label$67 }
	*((($23 + [24]) + [16])) = [0]
	*($23 + [24]) = $12
	*($23 + [32]) = (int_64)0
	$17 = (*($23 + [388]) - *($23 + [384]))
	$13 = ((int_32)$17 / (int_32)[40])
	if ( ($17 == 0) ){ goto $label$73 }
	if ( ((uint_32)$13 >= (uint_32)[107374183]) ){ goto $label$6 }
	$5 = CALL $76($17)
	*((($23 + [24]) + [8])) = $5
	*(($4 = ($23 + [36]))) = $5
	*((($23 + [24]) + [16])) = ($5 + ((int_32)$13 * (int_32)[40]))
	$13 = *($23 + [388])
	$17 = *($23 + [384])
	if ( ((int_32)$17 == (int_32)$13) ){ goto $label$73 }
	
.LOOP $label$74:
	*($5) = *($17)
	*(($5 + [16])) = *(($17 + [16]))
	*(($5 + [8])) = *(($17 + [8]))
	CALL $87(($5 + [24]), ($17 + [24]))
	$5 = (*($4) + [40])
	*($4) = $5
	$17 = ($17 + [40])
	if ( ((int_32)$17 != (int_32)$13) ){ goto $label$74 }
	
.LABEL $label$73
	*(($5 = ($23 + [88]))) = [0]
	*($23 + [72]) = $22
	*($23 + [64]) = $2
	*($23 + [80]) = (int_64)0
	*(($17 = CALL $76([16]))) = $12
	*($17 + [8]) = $20
	$4 = ($17 + [16])
	*($5) = $4
	*(($23 + [84])) = $4
	*($23 + [80]) = $17
	CALL $52(($23 + [92]), ($23 + [24]))
	CALL $18(($23 + [408]), ($23 + [64]))
	$17 = *($23 + [408])
	CALL send_inline($17, (*($23 + [412]) - $17))
	$17 = *($23 + [408])
	if ( ($17 == 0) ){ goto $label$75 }
	*($23 + [412]) = $17
	CALL $77($17)
	
.LABEL $label$75
	$17 = *($23 + [92])
	if ( ($17 == 0) ){ goto $label$76 }
	*(($23 + [96])) = $17
	CALL $77($17)
	
.LABEL $label$76
	$17 = *($23 + [80])
	if ( ($17 == 0) ){ goto $label$77 }
	*(($23 + [84])) = $17
	CALL $77($17)
	
.LABEL $label$77
	$4 = *(($23 + [32]))
	if ( ($4 == 0) ){ goto $label$78 }
	$13 = ($23 + [36])
	$17 = *($13)
	if ( ((int_32)$17 == (int_32)$4) ){ goto $label$80 }
	$5 = ([0] - $4)
	$17 = ($17 + [-16])
	
.LOOP $label$81:
	if ( ((*($17) & [1]) == 0) ){ goto $label$82 }
	CALL $77(*(($17 + [8])))
	
.LABEL $label$82
	$17 = ($17 + [-40])
	if ( ((int_32)($17 + $5) != (int_32)[-16]) ){ goto $label$81 }
	$17 = *(($23 + [32]))
	goto $label$79 
	
.LABEL $label$80
	$17 = $4
	
.LABEL $label$79
	*($13) = $4
	CALL $77($17)
	
.LABEL $label$78
	CALL $53($0, $7, $10, $8, $7)
	$4 = *($23 + [384])
	if ( ($4 == 0) ){ goto $label$83 }
	$17 = *($23 + [388])
	if ( ((int_32)$17 == (int_32)$4) ){ goto $label$85 }
	$5 = ([0] - $4)
	$17 = ($17 + [-16])
	
.LOOP $label$86:
	if ( ((*($17) & [1]) == 0) ){ goto $label$87 }
	CALL $77(*(($17 + [8])))
	
.LABEL $label$87
	$17 = ($17 + [-40])
	if ( ((int_32)($17 + $5) != (int_32)[-16]) ){ goto $label$86 }
	$17 = *($23 + [384])
	goto $label$84 
	
.LABEL $label$85
	$17 = $4
	
.LABEL $label$84
	*($23 + [388]) = $4
	CALL $77($17)
	
.LABEL $label$83
	$19 = $7
	
.LABEL $label$30
	*((($23 + [64]) + [28])) = *(($3 + [12]))
	*((($23 + [64]) + [24])) = *(($3 + [8]))
	*(($23 + [84])) = *(($3 + [4]))
	*($23 + [64]) = $1
	*($23 + [80]) = *($3)
	*($23 + [72]) = *((($23 + [352]) + [8]))
	*($23 + [96]) = *((($23 + [352]) + [28]))
	*($23 + [97]) = $11
	*(($23 + [136])) = *((($23 + [224]) + [24]))
	*(($23 + [128])) = *((($23 + [224]) + [16]))
	*(($23 + [120])) = *($23 + [232])
	*($23 + [112]) = *($23 + [224])
	$3 = ($23 + [144])
	CALL $87($3, $6)
	*(($23 + [168])) = $16
	*(($23 + [184])) = $15
	*($23 + [160]) = $9
	*($23 + [176]) = $19
	$4 = ($23 + [112])
	$13 = ($23 + [97])
	$6 = ($23 + [96])
	$11 = (($23 + [64]) + [16])
	$14 = (($23 + [64]) | [8])
	$1 = *($0)
	$19 = (int_64)0
	$21 = (int_64)59
	$17 = [336]
	$20 = (int_64)0
	
.LOOP $label$88:
	if ( ((uint_64)$19 > (uint_64)(int_64)5) ){ goto $label$93 }
	$5 = *($17)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$92 }
	$5 = ($5 + [165])
	goto $label$91 
	
.LABEL $label$93
	$18 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$92
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$91
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$90
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$89
	$17 = ($17 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$20 = ((int_64)$18 | (int_64)$20)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$88 }
	$19 = (int_64)0
	$18 = (int_64)59
	$17 = [1088]
	$2 = (int_64)0
	
.LOOP $label$94:
	$21 = (int_64)0
	if ( ((uint_64)$19 > (uint_64)(int_64)11) ){ goto $label$95 }
	$5 = *($17)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$97 }
	$5 = ($5 + [165])
	goto $label$96 
	
.LABEL $label$97
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$96
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$95
	$17 = ($17 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$2 = ((int_64)$21 | (int_64)$2)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$94 }
	$19 = (int_64)0
	$21 = (int_64)59
	$17 = [1104]
	$22 = (int_64)0
	
.LOOP $label$98:
	if ( ((uint_64)$19 > (uint_64)(int_64)5) ){ goto $label$103 }
	$5 = *($17)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$102 }
	$5 = ($5 + [165])
	goto $label$101 
	
.LABEL $label$103
	$18 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$100 }
	goto $label$99 
	
.LABEL $label$102
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$101
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$100
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$99
	$17 = ($17 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$22 = ((int_64)$18 | (int_64)$22)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$98 }
	*($23 + [32]) = $22
	*($23 + [24]) = $2
	*(($17 = CALL $76([16]))) = $1
	*($17 + [8]) = $20
	*(($23 + [56])) = [0]
	$5 = ($17 + [16])
	*(($23 + [48])) = $5
	*(($23 + [44])) = $5
	*($23 + [40]) = $17
	*($23 + [52]) = [0]
	*(($23 + [60])) = [0]
	$17 = *(($23 + [144]))
	$5 = ( *(($23 + [148])) ? uint_32($17 >> [1]) : ($17 & [1]) )
	$17 = ($5 + [98])
	$19 = (CASTING uint_64)(uint_32 $5)
	$5 = ($23 + [52])
	
.LOOP $label$104:
	$17 = ($17 + [1])
	$19 = (uint_64)$19 >> (uint_64)(int_64)7
	if ( ((int_64)$19) != (int_64)0) ){ goto $label$104 }
	if ( ($17 == 0) ){ goto $label$106 }
	CALL $16($5, $17)
	$5 = *(($23 + [56]))
	$17 = *(($23 + [52]))
	goto $label$105 
	
.LABEL $label$106
	$5 = [0]
	$17 = [0]
	
.LABEL $label$105
	*($23 + [388]) = $17
	*($23 + [384]) = $17
	*($23 + [392]) = $5
	*($23 + [400]) = ($23 + [384])
	*($23 + [412]) = $14
	*($23 + [416]) = $11
	*($23 + [420]) = $6
	*($23 + [424]) = $13
	*($23 + [428]) = $4
	*($23 + [432]) = $3
	*($23 + [408]) = ($23 + [64])
	*($23 + [436]) = ($23 + [160])
	*($23 + [440]) = ($23 + [176])
	CALL $55(($23 + [408]), ($23 + [400]))
	CALL $18(($23 + [408]), ($23 + [24]))
	$17 = *($23 + [408])
	CALL send_inline($17, (*($23 + [412]) - $17))
	$17 = *($23 + [408])
	if ( ($17 == 0) ){ goto $label$107 }
	*($23 + [412]) = $17
	CALL $77($17)
	
.LABEL $label$107
	$17 = *($23 + [52])
	if ( ($17 == 0) ){ goto $label$108 }
	*(($23 + [56])) = $17
	CALL $77($17)
	
.LABEL $label$108
	$17 = *($23 + [40])
	if ( ($17 == 0) ){ goto $label$109 }
	*(($23 + [44])) = $17
	CALL $77($17)
	
.LABEL $label$109
	if ( ((*(($23 + [144])) & [1]) == 0) ){ goto $label$110 }
	CALL $77(*(($23 + [152])))
	
.LABEL $label$110
	if ( ((*($23 + [288]) & [1]) == 0) ){ goto $label$111 }
	CALL $77(*($23 + [296]))
	
.LABEL $label$111
	if ( ((*(($23 + [368])) & [1]) == 0) ){ goto $label$9 }
	CALL $77(*(($23 + [376])))
	
.LABEL $label$9
	*([0] + [4]) = ($23 + [448])
	return (unreachable)
	
.LABEL $label$8
	CALL $78($4)
	
.LABEL $label$7
	CALL $78($4)
	
.LABEL $label$6
	CALL $86(($23 + [32]))
	
.LABEL $label$5
	CALL $78($4)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC _ZN4comm7to_hex2EPKcm (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *([0] + [4])
	$7 = $6
	$3 = ($2 << [1])
	$4 = ($6 - ((($3 | [1]) + [15]) & [-16]))
	*([0] + [4]) = $4
	if ( ($2 == 0) ){ goto $label$1 }
	$6 = $4
	
.LOOP $label$2:
	$5 = *($1)
	*($6) = *((uint_32($5 >> [4]) + [16]))
	*(($6 + [1])) = *((($5 & [15]) + [16]))
	$6 = ($6 + [2])
	$1 = ($1 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	*($0) = [0]
	*(($0 + [4])) = (int_64)0
	*(($4 + $3)) = [0]
	$6 = CALL strlen($4)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$6 }
	*($0) = ($6 << [1])
	$1 = ($0 + [1])
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$2 = (($6 + [16]) & [-16])
	$1 = CALL $76($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $6
	
.LABEL $label$5
	CALL memcpy($1, $4, $6)
	
.LABEL $label$4
	*(($1 + $6)) = [0]
	*([0] + [4]) = $7
	return (unreachable)
	
.LABEL $label$3
	CALL $78($0)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [208])
	*([0] + [4]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [48]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$7 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [64]
	$10 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$9 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$10 == (int_64)$1), [80])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [144]
	$10 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$18
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [160]
	$10 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$28 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$24
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$23 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$15 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [48]
	$10 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$34 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$30
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	$4 = CALL $8(($12 + [72]), $0)
	if ( ((int_64)$2 > (int_64)-2039333636190596097) ){ goto $label$38 }
	if ( ((int_64)$2 == (int_64)-4994302105373531264) ){ goto $label$37 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$35 }
	*($12 + [68]) = [0]
	*($12 + [64]) = [1]
	*($12 + [8 align=4]) = *($12 + [64])
	CALL $10($4, ($12 + [8]))
	goto $label$35 
	
.LABEL $label$38
	if ( ((int_64)$2 == (int_64)-2039333636190596096) ){ goto $label$36 }
	if ( ((int_64)$2 != (int_64)8421049960203129232) ){ goto $label$35 }
	*($12 + [60]) = [0]
	*($12 + [56]) = [2]
	*($12 + [16 align=4]) = *($12 + [56])
	CALL $12($4, ($12 + [16]))
	goto $label$35 
	
.LABEL $label$37
	*($12 + [52]) = [0]
	*($12 + [48]) = [3]
	*($12 + [24 align=4]) = *($12 + [48])
	CALL $12($4, ($12 + [24]))
	goto $label$35 
	
.LABEL $label$36
	*($12 + [44]) = [0]
	*($12 + [40]) = [4]
	*($12 + [32 align=4]) = *($12 + [40])
	CALL $15($4, ($12 + [32]))
	
.LABEL $label$35
	$5 = *(($4 + [120]))
	if ( ($5 == 0) ){ goto $label$39 }
	$6 = ($4 + [124])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$41 }
	
.LOOP $label$42:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$43 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$44 }
	CALL $77(*(($3 + [16])))
	
.LABEL $label$44
	CALL $77($3)
	
.LABEL $label$43
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$42 }
	$7 = *(($4 + [120]))
	goto $label$40 
	
.LABEL $label$41
	$7 = $5
	
.LABEL $label$40
	*($6) = $5
	CALL $77($7)
	
.LABEL $label$39
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$45 }
	CALL $77(*(($4 + [88])))
	
.LABEL $label$45
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$14 }
	$6 = ($4 + [68])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$47 }
	
.LOOP $label$48:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$49 }
	CALL $77($3)
	
.LABEL $label$49
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$48 }
	$7 = *(($4 + [64]))
	goto $label$46 
	
.LABEL $label$47
	$7 = $5
	
.LABEL $label$46
	*($6) = $5
	CALL $77($7)
	
.LABEL $label$14
	*([0] + [4]) = ($12 + [208])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN4comm6to_hexEPKcm (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	$3 = *($1)
	CALL $83($0, *((uint_32($3 >> [4]) + [16])))
	CALL $83($0, *((($3 & [15]) + [16])))
	$1 = ($1 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [144])
	*([0] + [4]) = $13
	$9 = (int_64)0
	$10 = (int_64)59
	$6 = [288]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	*(($13 + [104])) = [0]
	*($13 + [96]) = (int_64)0
	$6 = CALL strlen([304])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$8 }
	*($13 + [96]) = ($6 << [1])
	$3 = (($13 + [96]) | [1])
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = (($6 + [16]) & [-16])
	$3 = CALL $76($5)
	*($13 + [96]) = ($5 | [1])
	*($13 + [104]) = $3
	*($13 + [100]) = $6
	
.LABEL $label$7
	CALL memcpy($3, [304], $6)
	
.LABEL $label$6
	*(($3 + $6)) = [0]
	$4 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$6 = [336]
	$7 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$14 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$10 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$10
	$6 = ($6 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$7 = ((int_64)$10 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$9 }
	$9 = (int_64)0
	$8 = (int_64)59
	$6 = [160]
	$11 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$20 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$3 = ($3 + [165])
	goto $label$18 
	
.LABEL $label$20
	$10 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$16
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$11 = ((int_64)$10 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$15 }
	$9 = (int_64)0
	$8 = (int_64)59
	$6 = [144]
	$12 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$26 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$3 = ($3 + [165])
	goto $label$24 
	
.LABEL $label$26
	$10 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$22
	$6 = ($6 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$21 }
	*((($13 + [8]) + [28])) = *(($2 + [12]))
	*((($13 + [8]) + [24])) = *(($2 + [8]))
	*((($13 + [8]) + [20])) = *(($2 + [4]))
	*($13 + [16]) = $1
	*($13 + [8]) = $4
	*($13 + [24]) = *($2)
	CALL $87((($13 + [8]) + [32]), ($13 + [96]))
	*($13 + [64]) = $12
	*($13 + [56]) = $11
	*(($6 = CALL $76([16]))) = $4
	*($6 + [8]) = $7
	*((($13 + [56]) + [32])) = [0]
	$3 = ($6 + [16])
	*((($13 + [56]) + [24])) = $3
	*((($13 + [56]) + [20])) = $3
	*($13 + [72]) = $6
	*($13 + [84]) = [0]
	*((($13 + [56]) + [36])) = [0]
	$6 = *($13 + [40])
	$3 = ( *((($13 + [8]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($3 + [32])
	$9 = (CASTING uint_64)(uint_32 $3)
	$3 = (($13 + [56]) + [28])
	
.LOOP $label$27:
	$6 = ($6 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$27 }
	if ( ($6 == 0) ){ goto $label$29 }
	CALL $16($3, $6)
	$3 = *(($13 + [88]))
	$6 = *(($13 + [84]))
	goto $label$28 
	
.LABEL $label$29
	$3 = [0]
	$6 = [0]
	
.LABEL $label$28
	*($13 + [132]) = $6
	*($13 + [128]) = $6
	*($13 + [136]) = $3
	*($13 + [112]) = ($13 + [128])
	*($13 + [120]) = ($13 + [8])
	CALL $17(($13 + [120]), ($13 + [112]))
	CALL $18(($13 + [128]), ($13 + [56]))
	$6 = *($13 + [128])
	CALL send_inline($6, (*($13 + [132]) - $6))
	$6 = *($13 + [128])
	if ( ($6 == 0) ){ goto $label$30 }
	*($13 + [132]) = $6
	CALL $77($6)
	
.LABEL $label$30
	$6 = *($13 + [84])
	if ( ($6 == 0) ){ goto $label$31 }
	*(($13 + [88])) = $6
	CALL $77($6)
	
.LABEL $label$31
	$6 = *($13 + [72])
	if ( ($6 == 0) ){ goto $label$32 }
	*(($13 + [76])) = $6
	CALL $77($6)
	
.LABEL $label$32
	if ( ((*($13 + [40]) & [1]) == 0) ){ goto $label$33 }
	CALL $77(*(($13 + [48])))
	
.LABEL $label$33
	if ( ((*($13 + [96]) & [1]) == 0) ){ goto $label$34 }
	CALL $77(*($13 + [104]))
	
.LABEL $label$34
	*([0] + [4]) = ($13 + [144])
	return (unreachable)
	
.LABEL $label$5
	CALL $78(($13 + [96]))
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [176])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [240])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [272])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [272])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [272])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $76($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $86($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $77($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $21(*($1), ($0 + [32]))
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [176])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [240])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $43(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $44(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $77(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [288]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($3)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	$3 = ($0 + [40])
	$1 = [0]
	$8 = CALL db_lowerbound_i64(*($0 + [40]), *(($0 + [48])), (int_64)7235159551874301952, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	CALL $22($3, $8)
	$8 = [0]
	goto $label$5 
	
.LABEL $label$6
	$8 = [1]
	
.LABEL $label$5
	CALL eosio_assert($8, [672])
	CALL $30(($9 + [8]), $3, *($0), ($9 + [24]))
	CALL $31(($9 + [8]), $3, *($0), ($9 + [24]))
	CALL $32(($9 + [8]), $3, *($0), ($9 + [24]))
	CALL $33(($9 + [8]), $3, *($0), ($9 + [24]))
	CALL $34(($9 + [8]), $3, *($0), ($9 + [24]))
	$3 = ($0 + [96])
	$8 = CALL db_lowerbound_i64(*($0 + [96]), *(($0 + [104])), (int_64)-5069194696530591744, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$1 = CALL $24($3, $8)
	
.LABEL $label$7
	CALL $87(($9 + [8]), ($0 + [80]))
	if ( ($1 == 0) ){ goto $label$8 }
	$8 = *($1 + [8])
	$2 = ($8 & [1])
	CALL $82(($9 + [8]), ( *(($1 + [16])) ? ($1 + [9]) : $2 ), ( *(($1 + [12])) ? uint_32($8 >> [1]) : $2 ))
	CALL eosio_assert([1], [368])
	CALL eosio_assert([1], [416])
	$8 = CALL db_next_i64(*($1 + [24]), ($9 + [24]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$9 }
	CALL $24($3, $8)
	
.LABEL $label$9
	CALL $25($3, $1)
	
.LABEL $label$8
	$5 = *($0)
	*($9) = ($9 + [8])
	CALL $35(($9 + [24]), $3, $5, $9)
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $77(*($9 + [16]))
	
.LABEL $label$10
	*([0] + [4]) = ($9 + [32])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [288]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($3)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [165])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	$3 = CALL db_lowerbound_i64(*($0 + [40]), *(($0 + [48])), (int_64)7235159551874301952, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$1 = ($0 + [40])
	$8 = CALL $22($1, $3)
	
.LOOP $label$6:
	CALL eosio_assert([1], [368])
	CALL eosio_assert([1], [416])
	$3 = [0]
	$2 = CALL db_next_i64(*($8 + [20]), ($9 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $22($1, $2)
	
.LABEL $label$7
	CALL $23($1, $8)
	$8 = $3
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$5
	$3 = CALL db_lowerbound_i64(*($0 + [96]), *(($0 + [104])), (int_64)-5069194696530591744, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$8 = ($0 + [96])
	$3 = CALL $24($8, $3)
	CALL eosio_assert([1], [368])
	CALL eosio_assert([1], [416])
	$1 = CALL db_next_i64(*($3 + [24]), ($9 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$9 }
	CALL $24($8, $1)
	
.LABEL $label$9
	CALL $25($8, $3)
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [16])
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10684])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10492]
	$1 = (((int_32)$2 * (int_32)[12]) + [10492])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $16($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [352])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [352])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $20(CALL $19($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [352])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [352])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [352])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [176])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [240])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $76(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $77($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $77($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL _ZN4comm7to_hex2EPKcm($7, $1, $2)
	CALL eosio_assert(((uint_32)$2 > (uint_32)[1]), [1680])
	$2 = *($7)
	$1 = ($2 & [1])
	$6 = ( *($7 + [8]) ? ($7 | [1]) : $1 )
	$4 = ( *($7 + [4]) ? uint_32($2 >> [1]) : $1 )
	if ( ($4 <= [4]) ){ goto $label$4 }
	$3 = ($4 + [-4])
	$2 = $6
	$1 = $4
	
.LOOP $label$5:
	CALL memcpy(($7 + [12]), $2, [4])
	$5 = ((int_32)*($7 + [12]) * (int_32)[1540483477])
	$1 = ((int_32)((int_32)((int_32)uint_32($5 >> [24]) ^ (int_32)$5) * (int_32)[1540483477]) ^ (int_32)((int_32)$1 * (int_32)[1540483477]))
	$2 = ($2 + [4])
	$4 = ($4 + [-4])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$5 }
	$2 = ($3 & [-4])
	$6 = (($6 + $2) + [4])
	$4 = ($3 - $2)
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$1 = $4
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[3]) ){ goto $label$1 }
	$1 = ((int_32)(*($6 + [2]) << [16]) ^ (int_32)$1)
	
.LABEL $label$6
	$1 = ((int_32)(*($6 + [1]) << [8]) ^ (int_32)$1)
	
.LABEL $label$2
	$1 = ((int_32)((int_32)*($6) ^ (int_32)$1) * (int_32)[1540483477])
	
.LABEL $label$1
	$2 = ((int_32)((int_32)uint_32($1 >> [13]) ^ (int_32)$1) * (int_32)[1540483477])
	$2 = (((uint_32)((int_32)uint_32($2 >> [15]) ^ (int_32)$2) % (uint_32)[100]) + [1])
	if ( ((*($7) & [1]) == 0) ){ goto $label$7 }
	CALL $77(*(($7 + [8])))
	
.LABEL $label$7
	*([0] + [4]) = ($7 + [16])
	return int_32(($2 << [24]) >> [24])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0)
	$4 = *($0 + [4])
	$7 = ((int_32)($4 - $2) / (int_32)[40])
	$6 = ($7 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$3 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$3 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $76(((int_32)$5 * (int_32)[40]))
	$4 = *(($0 + [4]))
	$2 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($1)
	*(($7 + [16])) = *(($1 + [16]))
	*(($7 + [8])) = *(($1 + [8]))
	$3 = ($1 + [32])
	*(($7 + [32])) = *($3)
	*($7 + [24 align=4]) = *($1 + [24 align=4])
	*($1 + [24]) = [0]
	*(($1 + [28])) = [0]
	*($3) = [0]
	$5 = ($6 + ((int_32)$5 * (int_32)[40]))
	$6 = ($7 + [40])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	$2 = ([0] - $2)
	$1 = ($4 + [-16])
	
.LOOP $label$7:
	*(($7 + [-24])) = *(($1 + [-8]))
	*(($7 + [-32])) = *(($1 + [-16]))
	*(($7 + [-40])) = *(($1 + [-24]))
	$4 = ($1 + [8])
	*(($7 + [-8])) = *($4)
	*(($7 + [-16])) = *($1)
	*($1) = [0]
	*(($1 + [4])) = [0]
	*($4) = [0]
	$7 = ($7 + [-40])
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $2) != (int_32)[-16]) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $4
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$8 }
	$7 = ([0] - $2)
	$1 = ($4 + [-16])
	
.LOOP $label$9:
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL $77(*(($1 + [8])))
	
.LABEL $label$10
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $7) != (int_32)[-16]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $77($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [8]
	$2 = ($1 + [8])
	$6 = *($1 + [8])
	$3 = *(($1 + [12]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($3 - $6) / (int_32)[40]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = *($6 + [24])
	$4 = ( *(($6 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = (([-24] - $4) - $5)
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$6:
	$7 = ($7 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	$5 = ([0] - $7)
	$6 = ($6 + [40])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$5 }
	$5 = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	$5 = ([0] - $7)
	
.LABEL $label$4
	CALL $16($0, $5)
	$5 = *(($0 + [4]))
	$7 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	*($9) = $7
	*($9 + [8]) = $5
	CALL eosio_assert(((int_32)($5 - $7) > (int_32)[7]), [352])
	CALL memcpy($7, $1, [8])
	*($9 + [4]) = ($7 + [8])
	CALL $64($9, $2)
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $53 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	*($11 + [40]) = $1
	*($11 + [32]) = $2
	*($11 + [24]) = $3
	*($11 + [16]) = $4
	$8 = *(($0 + [64]))
	$10 = *(($0 + [68]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$1 }
	$9 = ($10 + [-24])
	$5 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)1) ){ goto $label$1 }
	$10 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [40])
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$4 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [1120])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$6 = CALL db_find_i64(*(($0 + [40])), *(($0 + [48])), (int_64)7235159551874301952, (int_64)1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $22($5, $6)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [1120])
	
.LABEL $label$3
	$4 = *($0)
	*($11 + [8]) = ($11 + [40])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [1456])
	CALL $60($5, $9, $4, ($11 + [8]))
	if ( (int_64)($2 == 0) ){ goto $label$5 }
	$7 = *(($0 + [64]))
	$10 = *(($0 + [68]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$6 }
	$9 = ($10 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$7:
	if ( ((int_64)*(*($9)) == (int_64)2) ){ goto $label$6 }
	$10 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$9 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [1120])
	goto $label$8 
	
.LABEL $label$9
	$9 = [0]
	$6 = CALL db_find_i64(*(($0 + [40])), *(($0 + [48])), (int_64)7235159551874301952, (int_64)2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$9 = CALL $22($5, $6)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [1120])
	
.LABEL $label$8
	$3 = *($0)
	*($11 + [8]) = ($11 + [32])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [1456])
	CALL $61($5, $9, $3, ($11 + [8]))
	$3 = *($11 + [24])
	
.LABEL $label$5
	if ( (int_64)($3 == 0) ){ goto $label$10 }
	$7 = *(($0 + [64]))
	$10 = *(($0 + [68]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$11 }
	$9 = ($10 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$12:
	if ( ((int_64)*(*($9)) == (int_64)3) ){ goto $label$11 }
	$10 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$14 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [1120])
	goto $label$13 
	
.LABEL $label$14
	$9 = [0]
	$6 = CALL db_find_i64(*(($0 + [40])), *(($0 + [48])), (int_64)7235159551874301952, (int_64)3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$9 = CALL $22($5, $6)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [1120])
	
.LABEL $label$13
	$3 = *($0)
	*($11 + [8]) = ($11 + [24])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [1456])
	CALL $62($5, $9, $3, ($11 + [8]))
	
.LABEL $label$10
	if ( (int_64)(*($11 + [16]) == 0) ){ goto $label$15 }
	$7 = *(($0 + [64]))
	$10 = *(($0 + [68]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$16 }
	$9 = ($10 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$17:
	if ( ((int_64)*(*($9)) == (int_64)4) ){ goto $label$16 }
	$10 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$17 }
	
.LABEL $label$16
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$19 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [1120])
	goto $label$18 
	
.LABEL $label$19
	$9 = [0]
	$6 = CALL db_find_i64(*(($0 + [40])), *(($0 + [48])), (int_64)7235159551874301952, (int_64)4)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	$9 = CALL $22($5, $6)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [1120])
	
.LABEL $label$18
	$3 = *($0)
	*($11 + [8]) = ($11 + [16])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [1456])
	CALL $63($5, $9, $3, ($11 + [8]))
	
.LABEL $label$15
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [176])
	*([0] + [4]) = $14
	CALL eosio_assert([1], [176])
	$6 = [0]
	$8 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	CALL eosio_assert($1, [240])
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [160]
	$9 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$11 }
	$1 = *($6)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$1 = ($1 + [165])
	goto $label$9 
	
.LABEL $label$11
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$7
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$6 }
	$6 = [0]
	*(($14 + [136])) = [0]
	*($14 + [120]) = (int_64)-1
	*($14 + [128]) = (int_64)0
	$8 = *($0)
	*($14 + [112]) = $8
	*($14 + [104]) = $9
	$5 = [0]
	$1 = CALL db_find_i64($9, $8, (int_64)3607749779137757184, (int_64)5459781)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$12 }
	$5 = CALL $56(($14 + [104]), $1)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($14 + [104])), [1120])
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1184])
	$10 = *(CALL $57(($0 + [40]), (int_64)5, [1216]) + [8])
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [176])
	$8 = (int_64)5459781
	
.LOOP $label$14:
	$1 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$1 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	CALL eosio_assert($1, [240])
	$8 = *($5)
	$2 = *($5 + [8])
	CALL eosio_assert(((int_64)1397703940 == (int_64)$2), [1248])
	$3 = (int_64)
	CALL eosio_assert(((int_64)$3($8 - $10)) > (int_64)-4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [1328])
	CALL eosio_assert(((int_64)$2 == (int_64)1397703940), [1360])
	if ( ((int_64)$3 < (int_64)1000001) ){ goto $label$18 }
	*(($14 + [96])) = [0]
	*($14 + [88]) = (int_64)0
	$6 = CALL strlen([1424])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$21 }
	*($14 + [88]) = ($6 << [1])
	$1 = (($14 + [88]) | [1])
	if ( $6 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$5 = (($6 + [16]) & [-16])
	$1 = CALL $76($5)
	*($14 + [88]) = ($5 | [1])
	*($14 + [96]) = $1
	*($14 + [92]) = $6
	
.LABEL $label$20
	CALL memcpy($1, [1424], $6)
	
.LABEL $label$19
	*(($1 + $6)) = [0]
	$4 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [336]
	$9 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$27 }
	$1 = *($6)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$1 = ($1 + [165])
	goto $label$25 
	
.LABEL $label$27
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$23
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$22 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [160]
	$11 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$33 }
	$1 = *($6)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$1 = ($1 + [165])
	goto $label$31 
	
.LABEL $label$33
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$29
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$11 = ((int_64)$10 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$28 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [144]
	$12 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$39 }
	$1 = *($6)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$1 = ($1 + [165])
	goto $label$37 
	
.LABEL $label$39
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$35
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$34 }
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [1056]
	$13 = (int_64)0
	
.LOOP $label$40:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$41 }
	$1 = *($6)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$1 = ($1 + [165])
	goto $label$42 
	
.LABEL $label$43
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$41
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$13 = ((int_64)$7 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$40 }
	*(($14 + [24])) = $2
	*($14 + [8]) = $13
	*($14) = $4
	*($14 + [16]) = $3
	CALL $87(($14 + [32]), ($14 + [88]))
	*($14 + [56]) = $12
	*($14 + [48]) = $11
	*(($6 = CALL $76([16]))) = $4
	*($6 + [8]) = $9
	*((($14 + [48]) + [32])) = [0]
	$1 = ($6 + [16])
	*((($14 + [48]) + [24])) = $1
	*(($14 + [68])) = $1
	*($14 + [64]) = $6
	*($14 + [76]) = [0]
	*((($14 + [48]) + [36])) = [0]
	$6 = *($14 + [32])
	$1 = ( *(($14 + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($1 + [32])
	$8 = (CASTING uint_64)(uint_32 $1)
	$1 = ($14 + [76])
	
.LOOP $label$44:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$44 }
	if ( ($6 == 0) ){ goto $label$46 }
	CALL $16($1, $6)
	$1 = *(($14 + [80]))
	$6 = *(($14 + [76]))
	goto $label$45 
	
.LABEL $label$46
	$1 = [0]
	$6 = [0]
	
.LABEL $label$45
	*($14 + [164]) = $6
	*($14 + [160]) = $6
	*($14 + [168]) = $1
	*($14 + [144]) = ($14 + [160])
	*($14 + [152]) = $14
	CALL $17(($14 + [152]), ($14 + [144]))
	CALL $18(($14 + [160]), ($14 + [48]))
	$6 = *($14 + [160])
	CALL send_inline($6, (*($14 + [164]) - $6))
	$6 = *($14 + [160])
	if ( ($6 == 0) ){ goto $label$47 }
	*($14 + [164]) = $6
	CALL $77($6)
	
.LABEL $label$47
	$6 = *($14 + [76])
	if ( ($6 == 0) ){ goto $label$48 }
	*(($14 + [80])) = $6
	CALL $77($6)
	
.LABEL $label$48
	$6 = *($14 + [64])
	if ( ($6 == 0) ){ goto $label$49 }
	*(($14 + [68])) = $6
	CALL $77($6)
	
.LABEL $label$49
	if ( ((*($14 + [32]) & [1]) == 0) ){ goto $label$50 }
	CALL $77(*(($14 + [40])))
	
.LABEL $label$50
	if ( ((*($14 + [88]) & [1]) == 0) ){ goto $label$18 }
	CALL $77(*($14 + [96]))
	
.LABEL $label$18
	$5 = *($14 + [128])
	if ( ($5 == 0) ){ goto $label$51 }
	$0 = ($14 + [132])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$53 }
	
.LOOP $label$54:
	$6 = ($6 + [-24])
	$1 = *($6)
	*($6) = [0]
	if ( ($1 == 0) ){ goto $label$55 }
	CALL $77($1)
	
.LABEL $label$55
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$54 }
	$6 = *(($14 + [128]))
	goto $label$52 
	
.LABEL $label$53
	$6 = $5
	
.LABEL $label$52
	*($0) = $5
	CALL $77($6)
	
.LABEL $label$51
	*([0] + [4]) = ($14 + [176])
	return (unreachable)
	
.LABEL $label$17
	CALL $78(($14 + [88]))
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [704])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $76([32])
	CALL $38($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $29(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $77($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [624])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $76([32])
	$6 = CALL $58($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $59(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $77($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $57 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [1120])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159551874301952, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $22($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [1120])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [704])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $76([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $36(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $27(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL $77(*(($3 + [16])))
	
.LABEL $label$4
	CALL $77($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $76(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $77($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $77($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [656])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $16($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [272])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [352])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[31]), [352])
	CALL memcpy(*($2 + [4]), $3, [32])
	*($2 + [4]) = (*($2 + [4]) + [32])
	CALL $21(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [352])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), $2, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [352])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [352])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [352])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [352])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [560])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $77($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $77($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [624])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $76([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [272])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [272])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $29(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $77($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [560])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $77(*(($4 + [16])))
	
.LABEL $label$7
	CALL $77($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $77(*(($4 + [16])))
	
.LABEL $label$10
	CALL $77($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [624])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $76([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [272])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $26(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $27(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $77(*(($4 + [16])))
	
.LABEL $label$10
	CALL $77($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $76(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $77(*(($1 + [16])))
	
.LABEL $label$11
	CALL $77($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $77($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $28($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $81($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $76($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $81($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $77($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $78($7)
	return (unreachable)
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [624])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [36]) = $4
	*($7 + [32]) = $4
	*($7 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $76([48])) + [32]) = $0
	CALL $70(($7 + [32]), $5)
	*($5 + [36]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)-7949128876922874880
	$6 = *($5 + [36])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)-7949128876922874880
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $71(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $77($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $5
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1504])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1552])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1616])
	CALL eosio_assert([1], [352])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [352])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $65 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$0), [1120])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5069194696530591744, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $24($0, $5)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$0), [1120])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [352])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [352])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [352])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [352])
	CALL memcpy(*($4), ($7 + [16]), [8])
	*($4) = (*($4) + [8])
	CALL $21($0, ($7 + [24]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1504])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1552])
	$4 = *($1)
	$5 = ($1 + [8])
	CALL $79($5, *($3))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1616])
	$3 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [8])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = ($8 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [352])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $21($9, $5)
	CALL db_update_i64(*($1 + [24]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($4 + $3)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $76($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : $5 ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $82($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $78($0)
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1504])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1552])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1616])
	CALL eosio_assert([1], [352])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [352])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1504])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1552])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1616])
	CALL eosio_assert([1], [352])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [352])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1504])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1552])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1616])
	CALL eosio_assert([1], [352])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [352])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1504])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1552])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1616])
	CALL eosio_assert([1], [352])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [352])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC atoi (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$1 = [1]
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$1 = [0]
	
.LABEL $label$2
	$2 = [0]
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $3)
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $1 )
}

int_32 .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $76($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $76($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $86 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $76($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $77($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $84($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $80($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $76(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $77($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $76($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $77($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $73([2300], $0)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $74($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10704])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $76(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $77($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $77($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10796])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $77 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $74 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10790]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10792])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10790]) = [1]
	$7 = ($7 << [16])
	*([0] + [10792]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10792])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10792]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10790]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10790]) = [1]
	$3 = ($3 << [16])
	*([0] + [10792]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10792])
	
.LABEL $label$8
	*([0] + [10792]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)4
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [352])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [352])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$2 = *($0)
	CALL $37(*($0 + [4]), $1)
	$4 = *($1 + [8])
	$3 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($3 + [8])
	$5 = (CASTING uint_64)(uint_32 $3)
	$3 = ($1 + [8])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($4)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($6 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	*($7) = $6
	*($7 + [8]) = ($6 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [352])
	CALL memcpy($6, $1, [8])
	*($7 + [4]) = ($6 + [8])
	CALL $21($7, $3)
	$5 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-5069194696530591744, *(*($0 + [8])), $5, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = (*([0] + [4]) - [32])
	$5 = $3
	*([0] + [4]) = $3
	$2 = *($0)
	$0 = *($2)
	if ( ($0 & [1]) ){ goto $label$2 }
	$4 = uint_32($0 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($2 + [4])
	
.LABEL $label$1
	$0 = ($3 - (($4 + [31]) & [-16]))
	*([0] + [4]) = $0
	*($5 + [20]) = $0
	*($5 + [16]) = $0
	*($5 + [24]) = (($0 + $4) + [16])
	$3 = CALL $21(($5 + [16]), $2)
	*($5) = $0
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [352])
	CALL memcpy(*($3 + [4]), $5, [4])
	$4 = (*($3 + [4]) + [4])
	*($3 + [4]) = $4
	*($5 + [15]) = [7]
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[0]), [352])
	CALL memcpy(*($3 + [4]), ($5 + [15]), [1])
	$4 = (*($3 + [4]) + [1])
	*($3 + [4]) = $4
	*($5 + [14]) = [0]
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[0]), [352])
	CALL memcpy(*($3 + [4]), ($5 + [14]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*(($5 + [8])) = [0]
	*($5 + [4]) = [0]
	$3 = *($5 + [16])
	*($5) = [0]
	$3 = (*($5 + [20]) - $3)
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($5) = ($3 << [1])
	$4 = ($5 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$2 = (($3 + [16]) & [-16])
	$4 = CALL $76($2)
	*($5) = ($2 | [1])
	*($5 + [8]) = $4
	*($5 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($4, $0, $3)
	
.LABEL $label$4
	*(($4 + $3)) = [0]
	*($1) = (int_64)1
	CALL $79(($1 + [8]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$7 }
	CALL $77(*($5 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($5 + [32])
	return (unreachable)
	
.LABEL $label$3
	CALL $78($5)
}

void .FUNC $78 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $80($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [704])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $76([32])
	CALL $40($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $29(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $77($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [704])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $76([32])
	CALL $39($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $29(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $77($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [704])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $76([32])
	CALL $42($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $29(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $77($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [704])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $76([32])
	CALL $41($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $29(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $77($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}