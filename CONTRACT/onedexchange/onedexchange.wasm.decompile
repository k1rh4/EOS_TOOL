(data (i32.const 4) "pP\00\00")
(data (i32.const 16) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 80) "invalid symbol name\00")
(data (i32.const 112) "add order, maker: \00")
(data (i32.const 144) " quantity: \00")
(data (i32.const 160) " price: \00")
(data (i32.const 176) "\n\00")
(data (i32.const 192) "cannot create objects in table of another contract\00")
(data (i32.const 256) "next primary key in table is at autoincrement limit\00")
(data (i32.const 320) "write\00")
(data (i32.const 336) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 400) "cannot decrement iterator at beginning of table\00")
(data (i32.const 448) "error reading iterator\00")
(data (i32.const 480) "read\00")
(data (i32.const 496) ".\00")
(data (i32.const 512) " \00")
(data (i32.const 528) ",\00")
(data (i32.const 544) "no order object found\00")
(data (i32.const 576) "object passed to erase is not in multi_index\00")
(data (i32.const 624) "cannot erase objects in table of another contract\00")
(data (i32.const 688) "attempt to remove object that was not in multi_index\00")
(data (i32.const 752) " withdraw \00")
(data (i32.const 768) "amoutn equals to 0 abord\n\00")
(data (i32.const 800) "active\00")
(data (i32.const 816) "transfer\00")
(data (i32.const 832) "withdraw\00")
(data (i32.const 848) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 912) " deposit \00")
(data (i32.const 928) "deposit\00")
(data (i32.const 944) " transfer \00")
(data (i32.const 960) " to \00")
(data (i32.const 976) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1040) "bid\00")
(data (i32.const 1056) "bid order id: \00")
(data (i32.const 1072) "attempt to add asset with different symbol\00")
(data (i32.const 1120) "addition underflow\00")
(data (i32.const 1152) "addition overflow\00")
(data (i32.const 1184) "attempt to subtract asset with different symbol\00")
(data (i32.const 1232) "subtraction underflow\00")
(data (i32.const 1264) "subtraction overflow\00")
(data (i32.const 1296) "cannot pass end iterator to erase\00")
(data (i32.const 1344) "cannot pass end iterator to modify\00")
(data (i32.const 1392) "object passed to modify is not in multi_index\00")
(data (i32.const 1440) "cannot modify objects in table of another contract\00")
(data (i32.const 1504) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1568) "ask\00")
(data (i32.const 1584) "cannot increment end iterator\00")
(data (i32.const 1616) "cannot decrement end iterator when the index is empty\00")
(data (i32.const 1680) "cannot decrement iterator at beginning of index\00")
(data (i32.const 1728) "ask order id: \00")
(data (i32.const 1744) "onerror\00")
(data (i32.const 1760) "eosio\00")
(data (i32.const 1776) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 1840) "eosio.token\00")
(data (i32.const 10256) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_end" (func $fimport$7 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$8 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$9 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_idx64_previous" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$12 (param i32)))
(import "env" "db_idx64_store" (func $fimport$13 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$14 (param i32 i64 i32)))
(import "env" "db_idx64_upperbound" (func $fimport$15 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$18 (param i32)))
(import "env" "db_store_i64" (func $fimport$19 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$20 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$21 (param i32 i32)))
(import "env" "memcpy" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$23 (param i64)))
(import "env" "printn" (func $fimport$24 (param i64)))
(import "env" "prints" (func $fimport$25 (param i32)))
(import "env" "prints_l" (func $fimport$26 (param i32 i32)))
(import "env" "printui" (func $fimport$27 (param i64)))
(import "env" "read_action_data" (func $fimport$28 (param i32 i32) (result i32)))
(import "env" "require_auth2" (func $fimport$29 (param i64 i64)))
(import "env" "send_inline" (func $fimport$30 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN8exchange9add_orderEyyN5eosio5assetEyy" (func $5))
(export "_ZN8exchange11cancelorderEyy" (func $14))
(export "_ZN8exchange8withdrawEyyN5eosio5assetE" (func $16))
(export "_ZN8exchange7depositEyyN5eosio5assetE" (func $25))
(export "_ZN8exchange8transferEyyyN5eosio5assetE" (func $26))
(export "_ZN8exchange19to_settlement_tokenEN5eosio5assetEyb" (func $27))
(export "_ZN8exchange9asset_minEN5eosio5assetES1_" (func $28))
(export "_ZN8exchange3askEyN5eosio5assetEyy" (func $29))
(export "_ZN8exchange3bidEyN5eosio5assetEyNS0_11symbol_typeEy" (func $33))
(export "apply" (func $35))
(export "memcmp" (func $41))
(export "strlen" (func $42))
(export "malloc" (func $47))
(export "free" (func $50))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $51 $14 $29 $33)



int_32 .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $43([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $20($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $23(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $20($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [320])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [320])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $22(CALL $21($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [480])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [480])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [480])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [480])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [480])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC _ZN8exchange3askEyN5eosio5assetEyy (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [304])
	*([0] + [4]) = $18
	*($18 + [200]) = $3
	$16 = *($0)
	$3 = (int_64)0
	$17 = (int_64)59
	$13 = [1040]
	$11 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$3 > (uint_64)(int_64)2) ){ goto $label$6 }
	$14 = *($13)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$14 = ($14 + [165])
	goto $label$4 
	
.LABEL $label$6
	$12 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$2
	$13 = ($13 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$1 }
	*(($18 + [192])) = [0]
	*($18 + [168]) = $11
	*($18 + [160]) = $16
	*($18 + [176]) = (int_64)-1
	*($18 + [184]) = (int_64)0
	*($18 + [196]) = [0]
	*($18 + [152]) = ($18 + [160])
	*($18 + [148]) = [0]
	*($18 + [144]) = ($18 + [152])
	CALL $30(($18 + [136]), ($18 + [152]), ($18 + [200]))
	$5 = *($2 + [8])
	$16 = *($2)
	$6 = *($0 + [16])
	CALL eosio_assert([1], [16])
	$3 = (uint_64)$6 >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$14 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$14 = [0]
	
.LABEL $label$7
	CALL eosio_assert($14, [80])
	$17 = (int_64)0
	if ( ((int_64)$16 < (int_64)1) ){ goto $label$13 }
	$7 = (($18 + [208]) + [48])
	$2 = ($0 + [16])
	$15 = (int_64)0
	
.LOOP $label$14:
	if ( ((int_32)*($18 + [148]) == (int_32)*($18 + [140])) ){ goto $label$12 }
	CALL $31(($18 + [144]))
	$13 = *($18 + [148])
	CALL prints([1056])
	CALL printui(*($13))
	CALL prints([160])
	CALL printui(*($13 + [8]))
	CALL prints([176])
	$13 = *($18 + [148])
	$3 = *($13 + [16])
	$12 = *(($13 + [24]))
	CALL eosio_assert(((int_64)$12 == (int_64)$5), [976])
	$13 = ((int_64)$3 > (int_64)$16)
	$11 = ( $16 ? $3 : $13 )
	$9 = ((int_64)*($18 + [200]) * (int_64)$11)
	$3 = (int_64)1
	$8 = ( $5 ? $12 : $13 )
	$12 = ((int_64)$8 & (int_64)255)
	if ( (int_64)($12 == 0) ){ goto $label$15 }
	$12 = ((int_64)$12 + (int_64)1)
	
.LOOP $label$16:
	$3 = ((int_64)$3 * (int_64)10)
	$12 = ((int_64)$12 + (int_64)-1)
	if ( ((int_64)$12 > (int_64)1) ){ goto $label$16 }
	
.LABEL $label$15
	$12 = *($2)
	$9 = ((uint_64)$9 / (uint_64)$3)
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [16])
	$3 = (uint_64)$12 >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	
.LOOP $label$21:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$21 }
	
.LABEL $label$20
	$14 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$14 = [0]
	
.LABEL $label$17
	CALL eosio_assert($14, [80])
	CALL eosio_assert(((int_64)$12 == (int_64)$6), [1072])
	$15 = ((int_64)$9 + (int_64)$15)
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [1120])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [1152])
	*((($18 + [120]) + [8])) = $8
	$3 = *(*($18 + [148]) + [32])
	*((($18 + [56]) + [8])) = $8
	*($18 + [120]) = $11
	*($18 + [56]) = $11
	CALL _ZN8exchange8transferEyyyN5eosio5assetE($13, $4, $1, $3, ($18 + [56]))
	CALL eosio_assert(((int_64)$8 == (int_64)$5), [1184])
	$16 = (int_64)
	CALL eosio_assert(((int_64)$16($16 - $11)) > (int_64)-4611686018427387904), [1232])
	CALL eosio_assert(((int_64)$16 < (int_64)4611686018427387904), [1264])
	$13 = *($18 + [148])
	CALL eosio_assert(((int_64)*(($13 + [24])) == (int_64)$8), [976])
	if ( ((int_64)*($13 + [16]) != (int_64)$11) ){ goto $label$22 }
	$3 = *($18 + [144])
	*($18 + [208]) = $3
	$13 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$13) != (int_32)[0]), [1296])
	CALL $32(($18 + [208]))
	CALL $17(*($18 + [152]), $13)
	*($18 + [144]) = *($18 + [208])
	if ( ((int_64)$16 > (int_64)0) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$22
	$13 = *($18 + [148])
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [1344])
	$14 = *($18 + [152])
	CALL eosio_assert(((int_32)*($13 + [48]) == (int_32)$14), [1392])
	CALL eosio_assert(((int_64)*($14) == (int_64)CALL $fimport$2()), [1440])
	$10 = ($13 + [8])
	*($18 + [280]) = *($10)
	$3 = *($13)
	CALL eosio_assert(((int_64)$8 == (int_64)*(($13 + [24]))), [1184])
	$12 = (int_64)
	*($13 + [16]) = $12(*($13 + [16]) - $11))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [1232])
	CALL eosio_assert(((int_64)*($13 + [16]) < (int_64)4611686018427387904), [1264])
	CALL eosio_assert(((int_64)$3 == (int_64)*($13)), [1504])
	*((($18 + [264]) + [8])) = $7
	*($18 + [268]) = ($18 + [208])
	*($18 + [264]) = ($18 + [208])
	CALL $11(($18 + [264]), $13)
	CALL db_update_i64(*($13 + [52]), $1, ($18 + [208]), [48])
	if ( (uint_64)($3 <= *($14 + [16])) ){ goto $label$23 }
	*(($14 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	*($18 + [296]) = *($10)
	if ( (CALL memcmp(($18 + [280]), ($18 + [296]), [8]) == 0) ){ goto $label$24 }
	$10 = ($13 + [56])
	$13 = *($10)
	if ( ((int_32)$13 > (int_32)[-1]) ){ goto $label$25 }
	$13 = CALL db_idx64_find_primary(*($14), *($14 + [8]), (int_64)-6497942333781180416, ($18 + [288]), $3)
	*($10) = $13
	
.LABEL $label$25
	CALL db_idx64_update($13, $1, ($18 + [296]))
	
.LABEL $label$24
	if ( ((int_64)$16 > (int_64)0) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$15 = (int_64)0
	
.LABEL $label$12
	*($18 + [112]) = $5
	*(($18 + [48])) = $5
	*($18 + [104]) = $16
	*($18 + [40]) = $16
	CALL _ZN8exchange7depositEyyN5eosio5assetE($0, $4, $1, ($18 + [40]))
	$12 = (int_64)59
	$13 = [1568]
	$11 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$17 > (uint_64)(int_64)2) ){ goto $label$31 }
	$14 = *($13)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$14 = ($14 + [165])
	goto $label$29 
	
.LABEL $label$31
	$3 = (int_64)0
	if ( ((uint_64)$17 <= (uint_64)(int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$27
	$13 = ($13 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$11 = ((int_64)$3 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$26 }
	*($18 + [96]) = $5
	*((($18 + [24]) + [8])) = $5
	*($18 + [88]) = $16
	$3 = *($18 + [200])
	*($18 + [24]) = $16
	CALL _ZN8exchange9add_orderEyyN5eosio5assetEyy($0, $11, $1, ($18 + [24]), $3, $4)
	*($18 + [80]) = $6
	$3 = *($0 + [8])
	*((($18 + [8]) + [8])) = $6
	*($18 + [72]) = $15
	*($18 + [8]) = $15
	CALL _ZN8exchange8withdrawEyyN5eosio5assetE($0, $3, $1, ($18 + [8]))
	$2 = *($18 + [184])
	if ( ($2 == 0) ){ goto $label$32 }
	$10 = ($18 + [188])
	$13 = *($10)
	if ( ((int_32)$13 == (int_32)$2) ){ goto $label$34 }
	
.LOOP $label$35:
	$13 = ($13 + [-24])
	$14 = *($13)
	*($13) = [0]
	if ( ($14 == 0) ){ goto $label$36 }
	CALL $44($14)
	
.LABEL $label$36
	if ( ((int_32)$2 != (int_32)$13) ){ goto $label$35 }
	$13 = *(($18 + [184]))
	goto $label$33 
	
.LABEL $label$34
	$13 = $2
	
.LABEL $label$33
	*($10) = $2
	CALL $44($13)
	
.LABEL $label$32
	*([0] + [4]) = ($18 + [304])
}

void .FUNC _ZN8exchange9asset_minEN5eosio5assetES1_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($3 + [8])), [976])
	if ( ((int_64)*($2) <= (int_64)*($3)) ){ goto $label$1 }
	*($0) = *($3)
	*(($0 + [8])) = *(($3 + [8]))
	return 
	
.LABEL $label$1
	*($0) = *($2)
	*(($0 + [8])) = *(($2 + [8]))
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [320])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [320])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [320])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $43($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $46($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $44($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [320])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [320])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [320])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [320])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $24(*($1), ($0 + [32]))
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [320])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [320])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC _ZN8exchange7depositEyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [144])
	*([0] + [4]) = $11
	CALL printn($2)
	CALL prints([912])
	CALL $6($3)
	CALL prints([176])
	$8 = (int_64)0
	if ( ((int_64)*($3) == (int_64)0) ){ goto $label$6 }
	$7 = (int_64)59
	$6 = [800]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$12 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [165])
	goto $label$10 
	
.LABEL $label$12
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$7 }
	*($11 + [80]) = $9
	*($11 + [72]) = $2
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [816]
	$9 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$18 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$4 = ($4 + [165])
	goto $label$16 
	
.LABEL $label$18
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$13 }
	*(($11 + [16])) = [0]
	*($11 + [8]) = (int_64)0
	$6 = CALL strlen([928])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$5 }
	*($11 + [8]) = ($6 << [1])
	$4 = (($11 + [8]) | [1])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	CALL prints([768])
	goto $label$2 
	
.LABEL $label$5
	$5 = (($6 + [16]) & [-16])
	$4 = CALL $43($5)
	*($11 + [8]) = ($5 | [1])
	*($11 + [16]) = $4
	*($11 + [12]) = $6
	
.LABEL $label$4
	CALL memcpy($4, [928], $6)
	
.LABEL $label$3
	*(($4 + $6)) = [0]
	*(($11 + [52])) = *(($3 + [12]))
	*(($11 + [48])) = *(($3 + [8]))
	*(($11 + [44])) = *(($3 + [4]))
	*($11 + [24]) = $2
	*($11 + [32]) = *($0)
	*($11 + [40]) = *($3)
	$6 = (($11 + [8]) + [8])
	*(($11 + [64])) = *($6)
	*($11 + [56]) = *($11 + [8])
	*($11 + [8]) = [0]
	*($11 + [12]) = [0]
	*($6) = [0]
	$6 = CALL $18(($11 + [88]), ($11 + [72]), $1, $9, ($11 + [24]))
	CALL $19(($11 + [128]), $6)
	$4 = *($11 + [128])
	CALL send_inline($4, (*($11 + [132]) - $4))
	$4 = *($11 + [128])
	if ( ($4 == 0) ){ goto $label$19 }
	*($11 + [132]) = $4
	CALL $44($4)
	
.LABEL $label$19
	$4 = *($6 + [28])
	if ( ($4 == 0) ){ goto $label$20 }
	*(($6 + [32])) = $4
	CALL $44($4)
	
.LABEL $label$20
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$21 }
	*(($6 + [20])) = $4
	CALL $44($4)
	
.LABEL $label$21
	if ( ((*(($11 + [56])) & [1]) == 0) ){ goto $label$22 }
	CALL $44(*(($11 + [64])))
	
.LABEL $label$22
	if ( ((*($11 + [8]) & [1]) == 0) ){ goto $label$2 }
	CALL $44(*(($11 + [16])))
	
.LABEL $label$2
	*([0] + [4]) = ($11 + [144])
	return (unreachable)
	
.LABEL $label$1
	CALL $45(($11 + [8]))
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [320])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [320])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC _ZN8exchange19to_settlement_tokenEN5eosio5assetEyb (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_64 $7
	$5 = ((int_64)*($2) * (int_64)$3)
	$3 = *($2 + [8])
	if ( (int_64)($3 == 0) ){ goto $label$2 }
	$7 = ((int_64)$3 + (int_64)1)
	$3 = (int_64)1
	
.LOOP $label$3:
	$3 = ((int_64)$3 * (int_64)10)
	$7 = ((int_64)$7 + (int_64)-1)
	if ( ((int_64)$7 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)1
	
.LABEL $label$1
	$7 = *($1 + [16])
	*($0 + [8]) = $7
	$6 = ((uint_64)$5 / (uint_64)$3)
	$3 = ((int_64)(CASTING uint_64)(uint_32 (((int_64)((int_64)$6 * (int_64)$3) != (int_64)$5) & ((int_32)$4 ^ (int_32)[1]))) + (int_64)$6)
	*($0) = $3
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [16])
	$3 = (uint_64)$7 >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$2 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [80])
}

void .FUNC _ZN8exchange8transferEyyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [144])
	*([0] + [4]) = $12
	CALL printn($2)
	CALL prints([944])
	CALL $6($4)
	CALL prints([960])
	CALL printn($3)
	CALL prints([176])
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [800]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	*($12 + [80]) = $10
	*($12 + [72]) = $2
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [816]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$12 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	*(($12 + [16])) = [0]
	*($12 + [8]) = (int_64)0
	$7 = CALL strlen([816])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$16 }
	*($12 + [8]) = ($7 << [1])
	$5 = (($12 + [8]) | [1])
	if ( $7 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$6 = (($7 + [16]) & [-16])
	$5 = CALL $43($6)
	*($12 + [8]) = ($6 | [1])
	*($12 + [16]) = $5
	*($12 + [12]) = $7
	
.LABEL $label$15
	CALL memcpy($5, [816], $7)
	
.LABEL $label$14
	*(($5 + $7)) = [0]
	*(($12 + [52])) = *(($4 + [12]))
	*(($12 + [48])) = *(($4 + [8]))
	*(($12 + [44])) = *(($4 + [4]))
	*($12 + [32]) = $3
	*($12 + [24]) = $2
	*($12 + [40]) = *($4)
	$7 = (($12 + [8]) + [8])
	*(($12 + [64])) = *($7)
	*($12 + [56]) = *($12 + [8])
	*($12 + [8]) = [0]
	*($12 + [12]) = [0]
	*($7) = [0]
	$7 = CALL $18(($12 + [88]), ($12 + [72]), $1, $10, ($12 + [24]))
	CALL $19(($12 + [128]), $7)
	$5 = *($12 + [128])
	CALL send_inline($5, (*($12 + [132]) - $5))
	$5 = *($12 + [128])
	if ( ($5 == 0) ){ goto $label$17 }
	*($12 + [132]) = $5
	CALL $44($5)
	
.LABEL $label$17
	$5 = *($7 + [28])
	if ( ($5 == 0) ){ goto $label$18 }
	*(($7 + [32])) = $5
	CALL $44($5)
	
.LABEL $label$18
	$5 = *($7 + [16])
	if ( ($5 == 0) ){ goto $label$19 }
	*(($7 + [20])) = $5
	CALL $44($5)
	
.LABEL $label$19
	if ( ((*(($12 + [56])) & [1]) == 0) ){ goto $label$20 }
	CALL $44(*(($12 + [64])))
	
.LABEL $label$20
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$21 }
	CALL $44(*(($12 + [16])))
	
.LABEL $label$21
	*([0] + [4]) = ($12 + [144])
	return (unreachable)
	
.LABEL $label$13
	CALL $45(($12 + [8]))
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10342]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10344])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10342]) = [1]
	$7 = ($7 << [16])
	*([0] + [10344]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10344])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10344]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10342]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10342]) = [1]
	$3 = ($3 << [16])
	*([0] + [10344]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10344])
	
.LABEL $label$8
	*([0] + [10344]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $49($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10256])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $43 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [1852])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [480])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [480])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [480])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [480])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [480])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [480])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $48([1856], $0)
}

void .FUNC $46 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $45 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $44 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $51 ()
{
	(unreachable)
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $43(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $46($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $44($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $44($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [448])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $43([64])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [16])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [80])
	*($4 + [48]) = $0
	CALL $12(($8 + [32]), $4)
	*($4 + [56]) = [-1]
	*($4 + [52]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [52])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $8($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $44($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([496])
	CALL prints_l($2, $3)
	CALL prints([512])
	CALL $13($1, [0])
	*([0] + [4]) = $10
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$6 = *($4 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4), *($4 + [8]), (int_64)-6497942333781180416, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $9($4, $5)
	*($9 + [12]) = [0]
	*($9 + [8]) = $4
	$6 = *(*(CALL $10(($9 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [256])
	*($1) = *(($4 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	$4 = *($3 + [8])
	*($1 + [16]) = *($4)
	*(($1 + [24])) = *(($4 + [8]))
	*($1 + [32]) = *(*($3 + [12]))
	*($1 + [40]) = *(*($3 + [16]))
	$4 = $10
	$3 = ($4 + [-48])
	*([0] + [4]) = $3
	*($9 + [12]) = $3
	*($9 + [8]) = $3
	*($9 + [16]) = $4
	CALL $11(($9 + [8]), $1)
	$6 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-6497942333781180416, *(*($0 + [8])), $6, $3, [48])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$6 = *(($2 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	*($9 + [24]) = *(($1 + [8]))
	*($1 + [56]) = CALL db_idx64_store($6, (int_64)-6497942333781180416, $7, $8, ($9 + [24]))
	*([0] + [4]) = ($9 + [32])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN8exchange9add_orderEyyN5eosio5assetEyy (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_64 _ZN8exchange9add_orderEyyN5eosio5assetEyy)
{
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [128])
	*([0] + [4]) = $8
	*($8 + [80]) = $2
	*($8 + [72]) = $4
	*($8 + [64]) = $5
	$7 = [0]
	*(($8 + [56])) = [0]
	*($8 + [32]) = $1
	*($8 + [40]) = (int_64)-1
	*($8 + [48]) = (int_64)0
	$5 = *($0)
	*($8 + [24]) = $5
	*($8 + [60]) = [0]
	*($8) = $4
	$1 = *($0 + [16])
	*($8 + [8]) = $1
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [16])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$0 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [80])
	CALL prints([112])
	CALL printn($2)
	CALL prints([144])
	CALL $6($3)
	CALL prints([160])
	CALL $6($8)
	CALL prints([176])
	if ( ((int_64)*($3) < (int_64)1) ){ goto $label$6 }
	*($8 + [8]) = $3
	*($8 + [4]) = ($8 + [72])
	*($8) = ($8 + [24])
	*($8 + [12]) = ($8 + [80])
	*($8 + [16]) = ($8 + [64])
	*($8 + [120]) = $2
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$2()), [192])
	*($8 + [100]) = $8
	*($8 + [96]) = ($8 + [24])
	*($8 + [104]) = ($8 + [120])
	*(($0 = CALL $43([64])) + [24]) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [16])
	$4 = (int_64)5462355
	$7 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$3 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	
.LABEL $label$7
	CALL eosio_assert($3, [80])
	*($0 + [48]) = ($8 + [24])
	CALL $7(($8 + [96]), $0)
	*($8 + [112]) = $0
	$4 = *($0)
	*($8 + [96]) = $4
	$3 = *($0 + [52])
	*($8 + [92]) = $3
	$6 = ($8 + [52])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($8 + [56]))) ){ goto $label$13 }
	*($7 + [8]) = $4
	*($7 + [16]) = $3
	*($8 + [112]) = [0]
	*($7) = $0
	*($6) = ($7 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $8(($8 + [48]), ($8 + [112]), ($8 + [96]), ($8 + [92]))
	
.LABEL $label$12
	$7 = *($8 + [112])
	*($8 + [112]) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL $44($7)
	
.LABEL $label$14
	$3 = *($8 + [48])
	if ( ($3 == 0) ){ goto $label$6 }
	$6 = ($8 + [52])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$18 }
	CALL $44($0)
	
.LABEL $label$18
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$17 }
	$7 = *(($8 + [48]))
	goto $label$15 
	
.LABEL $label$16
	$7 = $3
	
.LABEL $label$15
	*($6) = $3
	CALL $44($7)
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [128])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN8exchange11cancelorderEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	*(($5 + [72])) = [0]
	*($5 + [48]) = $1
	*($5 + [56]) = (int_64)-1
	*($5 + [64]) = (int_64)0
	*($5 + [40]) = *($0)
	*($5 + [76]) = [0]
	$4 = CALL $15(($5 + [40]), $2, [544])
	*(($5 + [36])) = *(($4 + [28]))
	*(($3 = (($5 + [24]) + [8]))) = *(($4 + [24]))
	*($5 + [24]) = *($4 + [16])
	*($5 + [28]) = *(($4 + [20]))
	$2 = *($4 + [32])
	$1 = *($4 + [40])
	*((($5 + [8]) + [8])) = *($3)
	*($5 + [8]) = *($5 + [24])
	CALL _ZN8exchange8withdrawEyyN5eosio5assetE($0, $1, $2, ($5 + [8]))
	CALL $17(($5 + [40]), $4)
	$3 = *($5 + [64])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = *((($5 + [40]) + [28]))
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	CALL $44($0)
	
.LABEL $label$5
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($5 + [64]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$2
	*(($5 + [68])) = $3
	CALL $44($4)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

int_32 .FUNC $15 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$0), [848])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6497942333781180416, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $9($0, $5)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$0), [848])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC _ZN8exchange8withdrawEyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [144])
	*([0] + [4]) = $12
	CALL printn($2)
	CALL prints([752])
	CALL $6($3)
	CALL prints([176])
	$9 = (int_64)0
	if ( ((int_64)*($3) == (int_64)0) ){ goto $label$6 }
	$4 = *($0)
	$8 = (int_64)59
	$7 = [800]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$12 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	*($12 + [80]) = $10
	*($12 + [72]) = $4
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [816]
	$10 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$18 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$5 = ($5 + [165])
	goto $label$16 
	
.LABEL $label$18
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$14
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$13 }
	*(($12 + [16])) = [0]
	*($12 + [8]) = (int_64)0
	$7 = CALL strlen([832])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$5 }
	*($12 + [8]) = ($7 << [1])
	$5 = (($12 + [8]) | [1])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	CALL prints([768])
	goto $label$2 
	
.LABEL $label$5
	$6 = (($7 + [16]) & [-16])
	$5 = CALL $43($6)
	*($12 + [8]) = ($6 | [1])
	*($12 + [16]) = $5
	*($12 + [12]) = $7
	
.LABEL $label$4
	CALL memcpy($5, [832], $7)
	
.LABEL $label$3
	*(($5 + $7)) = [0]
	*(($12 + [52])) = *(($3 + [12]))
	*(($12 + [48])) = *(($3 + [8]))
	*(($12 + [44])) = *(($3 + [4]))
	*($12 + [32]) = $2
	*($12 + [24]) = *($0)
	*($12 + [40]) = *($3)
	$7 = (($12 + [8]) + [8])
	*(($12 + [64])) = *($7)
	*($12 + [56]) = *($12 + [8])
	*($12 + [8]) = [0]
	*($12 + [12]) = [0]
	*($7) = [0]
	$7 = CALL $18(($12 + [88]), ($12 + [72]), $1, $10, ($12 + [24]))
	CALL $19(($12 + [128]), $7)
	$5 = *($12 + [128])
	CALL send_inline($5, (*($12 + [132]) - $5))
	$5 = *($12 + [128])
	if ( ($5 == 0) ){ goto $label$19 }
	*($12 + [132]) = $5
	CALL $44($5)
	
.LABEL $label$19
	$5 = *($7 + [28])
	if ( ($5 == 0) ){ goto $label$20 }
	*(($7 + [32])) = $5
	CALL $44($5)
	
.LABEL $label$20
	$5 = *($7 + [16])
	if ( ($5 == 0) ){ goto $label$21 }
	*(($7 + [20])) = $5
	CALL $44($5)
	
.LABEL $label$21
	if ( ((*(($12 + [56])) & [1]) == 0) ){ goto $label$22 }
	CALL $44(*(($12 + [64])))
	
.LABEL $label$22
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$2 }
	CALL $44(*(($12 + [16])))
	
.LABEL $label$2
	*([0] + [4]) = ($12 + [144])
	return (unreachable)
	
.LABEL $label$1
	CALL $45(($12 + [8]))
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [576])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [624])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [688])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $44($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $44($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
	$7 = *(($1 + [56]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6497942333781180416, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [52]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [400])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6497942333781180416)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [336])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [336])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $9(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [320])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [320])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [320])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [320])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [320])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [320])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [480])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [480])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [480])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [480])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [480])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [480])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([528])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$10 = (*([0] + [4]) - [112])
	$12 = $10
	*([0] + [4]) = $10
	$2 = *($1 + [4])
	$11 = *($1)
	$1 = [0]
	$8 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $3)
	
.LABEL $label$1
	*(($12 + [32])) = (int_64)1398362884
	*($12 + [24]) = (int_64)0
	*($12 + [16]) = (int_64)0
	CALL eosio_assert([1], [16])
	$9 = (int_64)5462355
	
.LOOP $label$5:
	$10 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$10 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($10, [80])
	*($12 + [56]) = (int_64)0
	*($12 + [40]) = (int_64)0
	*($12 + [100]) = $8
	*($12 + [96]) = $8
	*($12 + [104]) = ($8 + $3)
	*($12 + [64]) = ($12 + [96])
	*($12 + [80]) = ($12 + [16])
	CALL $40(($12 + [80]), ($12 + [64]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	*(($1 = (($12 + [64]) + [8]))) = *(($12 + [32]))
	$9 = *($12 + [16])
	*($12 + [64]) = *($12 + [24])
	$6 = *(($12 + [56]))
	$4 = *(($12 + [40]))
	$5 = *($12 + [48])
	*((($12 + [80]) + [8])) = *($1)
	*($12 + [80]) = *($12 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$11 = *((*($1) + $11))
	
.LABEL $label$9
	$7 = *((($12 + [80]) + [8]))
	*((($12 + [96]) + [8])) = $7
	*(($12 + [8])) = $7
	$7 = *($12 + [80])
	*($12 + [96]) = $7
	*($12) = $7
	CALL void $1((int_32 $9), (int_64 $12), (int_32 $4), (int_64 $5), (int_64 $6), (int_64 $11))
	*([0] + [4]) = ($12 + [112])
	return [1]
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$9 = (*([0] + [4]) - [112])
	$11 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$10 = *($1)
	$1 = [0]
	$7 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $3)
	
.LABEL $label$1
	*(($11 + [40])) = (int_64)1398362884
	*($11 + [32]) = (int_64)0
	*($11 + [24]) = (int_64)0
	CALL eosio_assert([1], [16])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [80])
	*($11 + [56]) = (int_64)0
	*($11 + [48]) = (int_64)0
	*($11 + [100]) = $7
	*($11 + [96]) = $7
	*($11 + [104]) = ($7 + $3)
	*($11 + [64]) = ($11 + [96])
	*($11 + [80]) = ($11 + [24])
	CALL $39(($11 + [80]), ($11 + [64]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($7)
	
.LABEL $label$8
	*(($1 = (($11 + [64]) + [8]))) = *(($11 + [40]))
	$8 = *($11 + [24])
	*($11 + [64]) = *($11 + [32])
	$5 = *(($11 + [56]))
	$4 = *(($11 + [48]))
	*((($11 + [80]) + [8])) = *($1)
	*($11 + [80]) = *($11 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$10 = *((*($1) + $10))
	
.LABEL $label$9
	$6 = *((($11 + [80]) + [8]))
	*((($11 + [96]) + [8])) = $6
	*((($11 + [8]) + [8])) = $6
	$6 = *($11 + [80])
	*($11 + [96]) = $6
	*($11 + [8]) = $6
	CALL void $1((int_32 $8), (int_64 ($11 + [8])), (int_32 $4), (int_64 $5), (int_64 $10))
	*([0] + [4]) = ($11 + [112])
	return [1]
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_upperbound(*($8), *($8 + [8]), (int_64)-6497942333781180416, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [848])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $9($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)-6497942333781180416, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [848])
	
.LABEL $label$4
	*(($2 + [56])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1744]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1760]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [1776])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1744]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*($9 + [56]) = $0
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1840]
	$7 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$27 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$27
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$23
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$22 }
	*($9 + [72]) = (int_64)1397703940
	*($9 + [64]) = $7
	if ( ((int_64)$2 == (int_64)3900117277302849536) ){ goto $label$29 }
	if ( ((int_64)$2 == (int_64)4292493394837504000) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)4730614996831743488) ){ goto $label$14 }
	*($9 + [36]) = [0]
	*($9 + [32]) = [1]
	*($9 + [24 align=4]) = *($9 + [32])
	CALL $38(($9 + [56]), ($9 + [24]))
	goto $label$14 
	
.LABEL $label$29
	*($9 + [44]) = [0]
	*($9 + [40]) = [2]
	*($9 + [16 align=4]) = *($9 + [40])
	CALL $37(($9 + [56]), ($9 + [16]))
	goto $label$14 
	
.LABEL $label$28
	*($9 + [52]) = [0]
	*($9 + [48]) = [3]
	*($9 + [8 align=4]) = *($9 + [48])
	CALL $36(($9 + [56]), ($9 + [8]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [80])
}

int_32 .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1584])
	$6 = *($0 + [4])
	$7 = *($6 + [56])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-6497942333781180416, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [56]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [848])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $9($2, CALL $fimport$5(*($2), *($2 + [8]), (int_64)-6497942333781180416, $3))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [848])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [56])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC _ZN8exchange3bidEyN5eosio5assetEyNS0_11symbol_typeEy (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	$19 = (*([0] + [4]) - [304])
	*([0] + [4]) = $19
	*($19 + [200]) = $3
	$14 = *($0)
	$3 = (int_64)0
	$12 = (int_64)59
	$16 = [1568]
	$13 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$3 > (uint_64)(int_64)2) ){ goto $label$6 }
	$17 = *($16)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$17 = ($17 + [165])
	goto $label$4 
	
.LABEL $label$6
	$15 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$2
	$16 = ($16 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$13 = ((int_64)$15 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$1 }
	*(($19 + [192])) = [0]
	*($19 + [168]) = $13
	*($19 + [160]) = $14
	*($19 + [176]) = (int_64)-1
	*($19 + [184]) = (int_64)0
	*($19 + [196]) = [0]
	*($19 + [152]) = ($19 + [160])
	*($19 + [208]) = (int_64)0
	CALL $30(($19 + [144]), ($19 + [152]), ($19 + [208]))
	CALL $34(($19 + [136]), ($19 + [152]), ($19 + [200]))
	$6 = *($2 + [8])
	$14 = *($2)
	CALL eosio_assert([1], [16])
	$3 = (uint_64)$4 >> (uint_64)(int_64)8)
	$16 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$17 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$17 = [0]
	
.LABEL $label$7
	CALL eosio_assert($17, [80])
	$18 = (int_64)0
	if ( ((int_64)$14 <= (int_64)0) ){ goto $label$13 }
	$2 = ($0 + [8])
	$7 = (($19 + [208]) + [48])
	$10 = ($0 + [16])
	$18 = (int_64)0
	
.LOOP $label$14:
	$16 = *($19 + [148])
	if ( ((int_32)$16 == (int_32)*($19 + [140])) ){ goto $label$12 }
	CALL prints([1728])
	CALL printui(*($16))
	CALL prints([160])
	CALL printui(*($16 + [8]))
	CALL prints([176])
	$16 = *($19 + [148])
	$3 = *($16 + [16])
	$15 = *(($16 + [24]))
	CALL eosio_assert(((int_64)$15 == (int_64)$6), [976])
	$16 = ((int_64)$3 > (int_64)$14)
	$12 = ( $14 ? $3 : $16 )
	$8 = ((int_64)*(*($19 + [148]) + [8]) * (int_64)$12)
	$3 = (int_64)1
	$13 = ( $6 ? $15 : $16 )
	$15 = ((int_64)$13 & (int_64)255)
	if ( (int_64)($15 == 0) ){ goto $label$15 }
	$15 = ((int_64)$15 + (int_64)1)
	
.LOOP $label$16:
	$3 = ((int_64)$3 * (int_64)10)
	$15 = ((int_64)$15 + (int_64)-1)
	if ( ((int_64)$15 > (int_64)1) ){ goto $label$16 }
	
.LABEL $label$15
	$15 = *($10)
	$9 = ((uint_64)$8 / (uint_64)$3)
	$8 = ((int_64)(CASTING uint_64)(uint_32 ((int_64)((int_64)$9 * (int_64)$3) != (int_64)$8)) + (int_64)$9)
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [16])
	$3 = (uint_64)$15 >> (uint_64)(int_64)8)
	$16 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	
.LOOP $label$21:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$21 }
	
.LABEL $label$20
	$17 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$17 = [0]
	
.LABEL $label$17
	CALL eosio_assert($17, [80])
	CALL eosio_assert(((int_64)$13 == (int_64)$4), [1072])
	$18 = ((int_64)$12 + (int_64)$18)
	CALL eosio_assert(((int_64)$18 > (int_64)-4611686018427387904), [1120])
	CALL eosio_assert(((int_64)$18 < (int_64)4611686018427387904), [1152])
	*((($19 + [120]) + [8])) = $15
	$3 = *($2)
	$9 = *(*($19 + [148]) + [32])
	*((($19 + [56]) + [8])) = $15
	*($19 + [120]) = $8
	*($19 + [56]) = $8
	CALL _ZN8exchange8transferEyyyN5eosio5assetE($16, $3, $1, $9, ($19 + [56]))
	CALL eosio_assert(((int_64)$13 == (int_64)$6), [1184])
	$14 = (int_64)
	CALL eosio_assert(((int_64)$14($14 - $12)) > (int_64)-4611686018427387904), [1232])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1264])
	$16 = *($19 + [148])
	CALL eosio_assert(((int_64)*(($16 + [24])) == (int_64)$13), [976])
	if ( ((int_64)*($16 + [16]) != (int_64)$12) ){ goto $label$22 }
	$3 = *($19 + [144])
	*($19 + [208]) = $3
	$16 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$16) != (int_32)[0]), [1296])
	CALL $32(($19 + [208]))
	CALL $17(*($19 + [152]), $16)
	*($19 + [144]) = *($19 + [208])
	if ( ((int_64)$14 > (int_64)0) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$22
	$16 = *($19 + [148])
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [1344])
	$17 = *($19 + [152])
	CALL eosio_assert(((int_32)*($16 + [48]) == (int_32)$17), [1392])
	CALL eosio_assert(((int_64)*($17) == (int_64)CALL $fimport$2()), [1440])
	$11 = ($16 + [8])
	*($19 + [280]) = *($11)
	$3 = *($16)
	CALL eosio_assert(((int_64)$13 == (int_64)*(($16 + [24]))), [1184])
	$15 = (int_64)
	*($16 + [16]) = $15(*($16 + [16]) - $12))
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [1232])
	CALL eosio_assert(((int_64)*($16 + [16]) < (int_64)4611686018427387904), [1264])
	CALL eosio_assert(((int_64)$3 == (int_64)*($16)), [1504])
	*((($19 + [264]) + [8])) = $7
	*($19 + [268]) = ($19 + [208])
	*($19 + [264]) = ($19 + [208])
	CALL $11(($19 + [264]), $16)
	CALL db_update_i64(*($16 + [52]), $1, ($19 + [208]), [48])
	if ( (uint_64)($3 <= *($17 + [16])) ){ goto $label$23 }
	*(($17 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	*($19 + [296]) = *($11)
	if ( (CALL memcmp(($19 + [280]), ($19 + [296]), [8]) == 0) ){ goto $label$24 }
	$11 = ($16 + [56])
	$16 = *($11)
	if ( ((int_32)$16 > (int_32)[-1]) ){ goto $label$25 }
	$16 = CALL db_idx64_find_primary(*($17), *($17 + [8]), (int_64)-6497942333781180416, ($19 + [288]), $3)
	*($11) = $16
	
.LABEL $label$25
	CALL db_idx64_update($16, $1, ($19 + [296]))
	
.LABEL $label$24
	CALL $32(($19 + [144]))
	if ( ((int_64)$14 > (int_64)0) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$2 = ($0 + [8])
	
.LABEL $label$12
	$12 = ((int_64)*($19 + [200]) * (int_64)$14)
	$13 = *($2)
	$3 = ((int_64)$6 & (int_64)255)
	if ( (int_64)($3 == 0) ){ goto $label$27 }
	$15 = ((int_64)$3 + (int_64)1)
	$3 = (int_64)1
	
.LOOP $label$28:
	$3 = ((int_64)$3 * (int_64)10)
	$15 = ((int_64)$15 + (int_64)-1)
	if ( ((int_64)$15 > (int_64)1) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$3 = (int_64)1
	
.LABEL $label$26
	$15 = *($0 + [16])
	*($19 + [112]) = $15
	$8 = ((uint_64)$12 / (uint_64)$3)
	$3 = ((int_64)(CASTING uint_64)(uint_32 ((int_64)((int_64)$8 * (int_64)$3) != (int_64)$12)) + (int_64)$8)
	*($19 + [104]) = $3
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [16])
	$3 = (uint_64)$15 >> (uint_64)(int_64)8)
	$16 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	
.LOOP $label$33:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$33 }
	
.LABEL $label$32
	$17 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$17 = [0]
	
.LABEL $label$29
	CALL eosio_assert($17, [80])
	*((($19 + [40]) + [8])) = *((($19 + [104]) + [8]))
	*($19 + [40]) = *($19 + [104])
	CALL _ZN8exchange7depositEyyN5eosio5assetE($0, $13, $1, ($19 + [40]))
	$3 = (int_64)0
	$12 = (int_64)59
	$16 = [1040]
	$13 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$3 > (uint_64)(int_64)2) ){ goto $label$39 }
	$17 = *($16)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$17 = ($17 + [165])
	goto $label$37 
	
.LABEL $label$39
	$15 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$35
	$16 = ($16 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$13 = ((int_64)$15 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$34 }
	*($19 + [96]) = $6
	$3 = *($2)
	*((($19 + [24]) + [12])) = *((($19 + [88]) + [12]))
	*((($19 + [24]) + [8])) = *($19 + [96])
	*($19 + [88]) = $14
	$15 = *($19 + [200])
	*($19 + [24]) = $14
	CALL _ZN8exchange9add_orderEyyN5eosio5assetEyy($0, $13, $1, ($19 + [24]), $15, $3)
	*($19 + [80]) = $4
	*((($19 + [8]) + [8])) = $4
	*($19 + [72]) = $18
	*($19 + [8]) = $18
	CALL _ZN8exchange8withdrawEyyN5eosio5assetE($0, $5, $1, ($19 + [8]))
	$2 = *($19 + [184])
	if ( ($2 == 0) ){ goto $label$40 }
	$10 = ($19 + [188])
	$16 = *($10)
	if ( ((int_32)$16 == (int_32)$2) ){ goto $label$42 }
	
.LOOP $label$43:
	$16 = ($16 + [-24])
	$17 = *($16)
	*($16) = [0]
	if ( ($17 == 0) ){ goto $label$44 }
	CALL $44($17)
	
.LABEL $label$44
	if ( ((int_32)$2 != (int_32)$16) ){ goto $label$43 }
	$16 = *(($19 + [184]))
	goto $label$41 
	
.LABEL $label$42
	$16 = $2
	
.LABEL $label$41
	*($10) = $2
	CALL $44($16)
	
.LABEL $label$40
	*([0] + [4]) = ($19 + [304])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-6497942333781180416, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [848])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $9($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)-6497942333781180416, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [848])
	
.LABEL $label$4
	*(($2 + [56])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($9 + [8]) = (int_64)0
	$7 = *($0 + [4])
	if ( ($7 == 0) ){ goto $label$2 }
	$5 = *($7 + [56])
	if ( ((int_32)$5 != (int_32)[-1]) ){ goto $label$3 }
	$5 = *(*($0))
	$5 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-6497942333781180416, $9, *($7))
	*(*(($0 + [4])) + [56]) = $5
	
.LABEL $label$3
	$6 = CALL db_idx64_previous($5, ($9 + [8]))
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1680])
	goto $label$1 
	
.LABEL $label$2
	$7 = *(*($0))
	$7 = CALL db_idx64_end(*($7), *($7 + [8]), (int_64)-6497942333781180416)
	CALL eosio_assert(((int_32)$7 != (int_32)[-1]), [1616])
	$6 = CALL db_idx64_previous($7, ($9 + [8]))
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1616])
	
.LABEL $label$1
	$2 = *($9 + [8])
	$3 = *($1 + [24])
	$1 = *(*($0))
	$8 = *(($1 + [28]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	$7 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$5:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$4 }
	$8 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$7 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$1), [848])
	goto $label$6 
	
.LABEL $label$7
	$7 = CALL $9($1, CALL $fimport$5(*($1), *($1 + [8]), (int_64)-6497942333781180416, $2))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$1), [848])
	
.LABEL $label$6
	*(($0 + [4])) = $7
	*(($7 + [56])) = $6
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10240])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10048]
	$1 = (((int_32)$2 * (int_32)[12]) + [10048])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [480])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [480])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}