(data (i32.const 4) "\a0j\00\00")
(data (i32.const 16) "already withdraw\00")
(data (i32.const 48) "Balance too small for withdrawal\00")
(data (i32.const 96) "Contract withdrawal quota exceeded\00")
(data (i32.const 144) "pretect.bank\00")
(data (i32.const 160) "no land canvas exists\00")
(data (i32.const 192) "no ocean canvas exists\00")
(data (i32.const 224) "cannot pass end iterator to erase\00")
(data (i32.const 272) "cannot increment end iterator\00")
(data (i32.const 304) "object passed to erase is not in multi_index\00")
(data (i32.const 352) "cannot erase objects in table of another contract\00")
(data (i32.const 416) "attempt to remove object that was not in multi_index\00")
(data (i32.const 480) "error reading iterator\00")
(data (i32.const 512) "read\00")
(data (i32.const 528) "get\00")
(data (i32.const 544) "cannot create objects in table of another contract\00")
(data (i32.const 608) "write\00")
(data (i32.const 624) "cannot pass end iterator to modify\00")
(data (i32.const 672) "object passed to modify is not in multi_index\00")
(data (i32.const 720) "cannot modify objects in table of another contract\00")
(data (i32.const 784) "updater cannot change primary key when modifying an object\00")
(data (i32.const 848) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 912) "price counter overflow\00")
(data (i32.const 944) "price for pixel is too high\00")
(data (i32.const 976) "insufficient fund to buy pixel\00")
(data (i32.const 1008) "guards ont found , game not started\00")
(data (i32.const 1056) "game  pause\00")
(data (i32.const 1072) "land ont found ,game not started\00")
(data (i32.const 1120) "ocean ont found , game not started\00")
(data (i32.const 1168) "account not registered to the game\00")
(data (i32.const 1216) "Too many pixels did not paint.\00")
(data (i32.const 1248) "canvas potScaled overflow\00")
(data (i32.const 1280) "canvas teamScaled overflow\00")
(data (i32.const 1312) "canvas patronBonus overflow\00")
(data (i32.const 1344) "canvas total_p overflow\00")
(data (i32.const 1376) "player p overflow\00")
(data (i32.const 1408) "ppppp.e\00")
(data (i32.const 1424) "active\00")
(data (i32.const 1440) "transfer\00")
(data (i32.const 1456) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1520) "invalid symbol name\00")
(data (i32.const 1552) "Enjoy airdrop! Play: eosworldmap.com\00")
(data (i32.const 1600) "terrain invalid\00")
(data (i32.const 1616) "invalid land coordinate\00")
(data (i32.const 1648) "invalid ocean color\00")
(data (i32.const 1680) "invalid ocean coordinate\00")
(data (i32.const 1712) "team invalid\00")
(data (i32.const 1728) "acc_team invalid\00")
(data (i32.const 1760) "account already exist\00")
(data (i32.const 1792) "already initialized, land exists\00")
(data (i32.const 1840) "already initialized,, ocean exists\00")
(data (i32.const 1888) "unknown account\00")
(data (i32.const 1904) "no withdraw guard exists\00")
(data (i32.const 1936) "eosio.token\00")
(data (i32.const 1952) "Withdraw from EOS Pixels\00")
(data (i32.const 1984) "must pay with EOS token\00")
(data (i32.const 10416) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10512) "stoull\00")
(data (i32.const 10528) ": no conversion\00")
(data (i32.const 10544) ": out of range\00")
(data (i32.const 10576) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 10592) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 10608) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 10624) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 10896) "\00\01\02\04\07\03\06\05\00")
(import "env" "__fixunsdfti" (func $fimport$0 (param i32 f64)))
(import "env" "__floatuntidf" (func $fimport$1 (param i64 i64) (result f64)))
(import "env" "__multi3" (func $fimport$2 (param i32 i64 i64 i64 i64)))
(import "env" "__udivti3" (func $fimport$3 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$4))
(import "env" "action_data_size" (func $fimport$5 (result i32)))
(import "env" "current_receiver" (func $fimport$6 (result i64)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "db_find_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$12 (param i32)))
(import "env" "db_store_i64" (func $fimport$13 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$14 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$15 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$16 (param i32)))
(import "env" "memcpy" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$21 (param i64)))
(import "env" "require_auth2" (func $fimport$22 (param i64 i64)))
(import "env" "send_inline" (func $fimport$23 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z28calculateWithdrawalAndUpdateRK10landcanvasRK11oceancanvasR7accountR5guard" (func $5))
(export "_Z9splitMemoRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEERKS6_c" (func $6))
(export "_ZN11eosworldmap11clearpixelsEtt" (func $8))
(export "_ZN11eosworldmap10clearacctsEtt" (func $26))
(export "_ZN11eosworldmap11clearcanvasEtt" (func $32))
(export "_ZN11eosworldmap10clearguardEv" (func $37))
(export "_ZN11eosworldmap11pauseswitchEv" (func $40))
(export "_ZN11eosworldmap10resetquotaEv" (func $41))
(export "_ZN11eosworldmap13drawLandPixelERN5eosio11multi_indexILy9918785360141090816E11l_pixel_rowJEEERK13st_pixelOrderR18st_transferContext" (func $42))
(export "_ZN11eosworldmap7depositEyo" (func $46))
(export "_ZN11eosworldmap14drawOceanPixelERN5eosio11multi_indexILy11679076100940787712E11o_pixel_rowJEEERK13st_pixelOrderR18st_transferContext" (func $51))
(export "_ZN11eosworldmap15isValidReferrerEy" (func $57))
(export "_ZN11eosworldmap10onTransferERKN5eosio8currency8transferE" (func $58))
(export "_ZN11eosworldmap14airdrop_tokensEyy" (func $62))
(export "_ZNK11eosworldmap17get_token_balanceEyRKN5eosio11symbol_typeE" (func $63))
(export "_ZN11eosworldmap10createacctEyh" (func $74))
(export "_ZN11eosworldmap4initEv" (func $75))
(export "_ZN11eosworldmap8withdrawEy" (func $76))
(export "_ZN11eosworldmap5applyEyy" (func $77))
(export "apply" (func $86))
(export "malloc" (func $87))
(export "free" (func $90))
(export "_ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $95))
(export "__errno_location" (func $102))
(export "pow" (func $103))
(export "sqrt" (func $104))
(export "fabs" (func $105))
(export "scalbn" (func $106))
(export "strtoull" (func $107))
(export "__shlim" (func $108))
(export "__intscan" (func $109))
(export "__shgetc" (func $110))
(export "__uflow" (func $111))
(export "__toread" (func $112))
(export "memcmp" (func $113))
(export "strlen" (func $114))
(table $0 10 10 anyfunc)
(elem (i32.const 0) $115 $75 $41 $37 $26 $8 $74 $40 $32 $76)



void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $91($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $99($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $100($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $91(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $92($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_64 .FUNC _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$3 = CALL strlen([10512])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($3 << [1])
	$6 = ($7 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($3 + [16]) & [-16])
	$6 = CALL $91($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($6, [10512], $3)
	
.LABEL $label$4
	*(($6 + $3)) = [0]
	*($7 + [12]) = [0]
	$3 = *($0 + [8])
	$6 = *($0)
	$5 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($6 & [1]) )
	$4 = CALL strtoull($3, ($7 + [12]), $2)
	$0 = CALL __errno_location()
	$6 = *($0)
	*($0) = $5
	if ( ((int_32)$6 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($7 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $92(*($7 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [16])
	return $4
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $96($7)
	
.LABEL $label$1
	CALL $97($7)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $96 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $98($1, $0, [10544])
	CALL abort()
	(unreachable)
}

void .FUNC $97 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $98($1, $0, [10528])
	CALL abort()
	(unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10392])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10200]
	$1 = (((int_32)$2 * (int_32)[12]) + [10200])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10508])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $92 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $93 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $115 ()
{
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $91(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $92($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $92($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*(($1 = CALL $91([800]))) = (int_64)0
	*(($1 + [8])) = (int_64)0
	*(($1 + [24])) = (int_64)0
	*($1 + [16]) = (int_64)0
	*($3) = $1
	*($3 + [4]) = $1
	$2 = ($1 + [800])
	*($3 + [8]) = $2
	*(($1 + [40])) = (int_64)0
	*($1 + [32]) = (int_64)0
	*(($1 + [56])) = (int_64)0
	*($1 + [48]) = (int_64)0
	*(($1 + [72])) = (int_64)0
	*($1 + [64]) = (int_64)0
	*(($1 + [88])) = (int_64)0
	*($1 + [80]) = (int_64)0
	*(($1 + [104])) = (int_64)0
	*($1 + [96]) = (int_64)0
	*(($1 + [120])) = (int_64)0
	*($1 + [112]) = (int_64)0
	*(($1 + [136])) = (int_64)0
	*($1 + [128]) = (int_64)0
	*(($1 + [152])) = (int_64)0
	*($1 + [144]) = (int_64)0
	*(($1 + [168])) = (int_64)0
	*($1 + [160]) = (int_64)0
	*(($1 + [184])) = (int_64)0
	*($1 + [176]) = (int_64)0
	*(($1 + [200])) = (int_64)0
	*($1 + [192]) = (int_64)0
	*(($1 + [216])) = (int_64)0
	*($1 + [208]) = (int_64)0
	*(($1 + [232])) = (int_64)0
	*($1 + [224]) = (int_64)0
	*(($1 + [248])) = (int_64)0
	*($1 + [240]) = (int_64)0
	*(($1 + [264])) = (int_64)0
	*($1 + [256]) = (int_64)0
	*(($1 + [280])) = (int_64)0
	*($1 + [272]) = (int_64)0
	*(($1 + [296])) = (int_64)0
	*($1 + [288]) = (int_64)0
	*(($1 + [312])) = (int_64)0
	*($1 + [304]) = (int_64)0
	*(($1 + [328])) = (int_64)0
	*($1 + [320]) = (int_64)0
	*(($1 + [344])) = (int_64)0
	*($1 + [336]) = (int_64)0
	*(($1 + [360])) = (int_64)0
	*($1 + [352]) = (int_64)0
	*(($1 + [376])) = (int_64)0
	*($1 + [368]) = (int_64)0
	*(($1 + [392])) = (int_64)0
	*($1 + [384]) = (int_64)0
	*(($1 + [408])) = (int_64)0
	*($1 + [400]) = (int_64)0
	*(($1 + [424])) = (int_64)0
	*($1 + [416]) = (int_64)0
	*(($1 + [440])) = (int_64)0
	*($1 + [432]) = (int_64)0
	*(($1 + [456])) = (int_64)0
	*($1 + [448]) = (int_64)0
	*(($1 + [472])) = (int_64)0
	*($1 + [464]) = (int_64)0
	*(($1 + [488])) = (int_64)0
	*($1 + [480]) = (int_64)0
	*(($1 + [504])) = (int_64)0
	*($1 + [496]) = (int_64)0
	*(($1 + [520])) = (int_64)0
	*($1 + [512]) = (int_64)0
	*(($1 + [536])) = (int_64)0
	*($1 + [528]) = (int_64)0
	*(($1 + [552])) = (int_64)0
	*($1 + [544]) = (int_64)0
	*(($1 + [568])) = (int_64)0
	*($1 + [560]) = (int_64)0
	*(($1 + [584])) = (int_64)0
	*($1 + [576]) = (int_64)0
	*(($1 + [600])) = (int_64)0
	*($1 + [592]) = (int_64)0
	*(($1 + [616])) = (int_64)0
	*($1 + [608]) = (int_64)0
	*(($1 + [632])) = (int_64)0
	*($1 + [624]) = (int_64)0
	*(($1 + [648])) = (int_64)0
	*($1 + [640]) = (int_64)0
	*(($1 + [664])) = (int_64)0
	*($1 + [656]) = (int_64)0
	*(($1 + [680])) = (int_64)0
	*($1 + [672]) = (int_64)0
	*(($1 + [696])) = (int_64)0
	*($1 + [688]) = (int_64)0
	*(($1 + [712])) = (int_64)0
	*($1 + [704]) = (int_64)0
	*(($1 + [728])) = (int_64)0
	*($1 + [720]) = (int_64)0
	*(($1 + [744])) = (int_64)0
	*($1 + [736]) = (int_64)0
	*(($1 + [760])) = (int_64)0
	*($1 + [752]) = (int_64)0
	*(($1 + [776])) = (int_64)0
	*($1 + [768]) = (int_64)0
	*(($1 + [792])) = (int_64)0
	*($1 + [784]) = (int_64)0
	*($3 + [4]) = $2
	$1 = *($3)
	CALL $50(($0 + [8]), $1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($3 + [4]) = $1
	CALL $92($1)
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [608])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[3]), [608])
	$3 = ($0 + [4])
	CALL memcpy(*($3), $6, [4])
	$5 = (*($3) + [4])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [608])
	CALL memcpy(*($3), ($6 + [4]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [608])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	*($1) = *(*(*($0 + [4])))
	$2 = *($0)
	CALL $49($1)
	$3 = ($1 + [8])
	$5 = *($1 + [8])
	$4 = *(($1 + [12]))
	$6 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	$7 = [21]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	$7 = (((int_32)uint_32(($6 + [-16]) >> [4]) * (int_32)[13]) + $7)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 + [-13])
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [608])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	CALL $48($10, $3)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-8527958713568460800, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN11eosworldmap13drawLandPixelERN5eosio11multi_indexILy9918785360141090816E11l_pixel_rowJEEERK13st_pixelOrderR18st_transferContext (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	$8 = *($2)
	*($10 + [106]) = ((uint_32)$8 % (uint_32)[50])
	$9 = *(($1 + [28]))
	$5 = *($1 + [24])
	$8 = ((uint_32)$8 / (uint_32)[50])
	*($10 + [104]) = $8
	$4 = (CASTING uint_64)(uint_32 ($8 & [65535]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$4) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$5 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$1), [848])
	if ( $8 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$8 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-8527958713568460800, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $18($1, $8)
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$1), [848])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0)
	*($10 + [96]) = ($10 + [104])
	*($10 + [64]) = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [544])
	*($10 + [16]) = $1
	*($10 + [20]) = ($10 + [96])
	*($10 + [24]) = ($10 + [64])
	*(($8 = CALL $91([32])) + [16]) = [0]
	*($8 + [8 align=4]) = (int_64)0
	*($8 + [20]) = $1
	CALL $43(($10 + [16]), $8)
	*($10) = $8
	$4 = *($8)
	*($10 + [16]) = $4
	$9 = *($8 + [24])
	*($10 + [80]) = $9
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($7 + [8]) = $4
	*($7 + [16]) = $9
	*($10) = [0]
	*($7) = $8
	*($6) = ($7 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $21(($1 + [24]), $10, ($10 + [16]), ($10 + [80]))
	
.LABEL $label$6
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	$9 = *($7 + [8])
	if ( ($9 == 0) ){ goto $label$8 }
	*(($7 + [12])) = $9
	CALL $92($9)
	
.LABEL $label$8
	CALL $92($7)
	
.LABEL $label$3
	$7 = [0]
	*($10 + [88]) = [0]
	*($10 + [80]) = (int_64)0
	$6 = (*(($8 + [12])) - *($8 + [8]))
	$9 = int_32($6 >> [4])
	if ( ($9 == 0) ){ goto $label$10 }
	if ( ((uint_32)$9 >= (uint_32)[268435456]) ){ goto $label$9 }
	$7 = CALL $91($6)
	*((($10 + [80]) + [8])) = ($7 + ($9 << [4]))
	*($10 + [80]) = $7
	*($10 + [84]) = $7
	$6 = *(($8 + [8]))
	$9 = (*(($8 + [12])) - $6)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($7, $6, $9)
	*($10 + [84]) = (*($10 + [84]) + $9)
	$7 = *($10 + [80])
	
.LABEL $label$10
	$7 = ($7 + (*($10 + [106]) << [4]))
	*((($10 + [64]) + [12])) = *(($7 + [12]))
	*((($10 + [64]) + [8])) = *(($7 + [8]))
	*($10 + [64]) = *($7)
	*($10 + [68]) = *(($7 + [4]))
	CALL $44(($10 + [16]), $3, ($10 + [64]), $2)
	if ( *($10 + [16]) ){ goto $label$11 }
	*($10 + [4]) = $2
	*($10 + [12]) = $3
	*($10) = ($10 + [104])
	*($10 + [8]) = ($10 + [64])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [624])
	CALL $45($1, $8, $10)
	if ( *($10 + [17]) ){ goto $label$11 }
	CALL _ZN11eosworldmap7depositEyo($0, *($10 + [72]), *($10 + [48]), *(($10 + [56])))
	
.LABEL $label$11
	$8 = *($10 + [80])
	if ( ($8 == 0) ){ goto $label$12 }
	*($10 + [84]) = $8
	CALL $92($8)
	
.LABEL $label$12
	*([0] + [4]) = ($10 + [112])
	return (unreachable)
	
.LABEL $label$9
	CALL $101(($10 + [80]))
}

void .FUNC _ZN11eosworldmap10resetquotaEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	$1 = ($0 + [128])
	$2 = ($0 + [136])
	$4 = CALL db_lowerbound_i64(*($0 + [128]), *($2), (int_64)7389690656689487872, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$4 = CALL $39($1, $4)
	CALL eosio_assert([1], [624])
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [672])
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [720])
	*($4 + [8]) = ((int_64)*($4 + [8]) + (int_64)10000000)
	$6 = *($4)
	CALL eosio_assert([1], [784])
	CALL eosio_assert([1], [608])
	CALL memcpy($9, $4, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy(($9 | [8]), ($4 + [8]), [8])
	*($9 + [24]) = *($4 + [16])
	CALL eosio_assert([1], [608])
	CALL memcpy(($9 + [16]), ($9 + [24]), [1])
	CALL db_update_i64(*($4 + [28]), (int_64)0, $9, [17])
	$4 = ($0 + [144])
	if ( (uint_64)($6 <= *($4)) ){ goto $label$5 }
	*($4) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0)
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [544])
	*(($4 = CALL $91([40])) + [24]) = $1
	*($4 + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = [0]
	CALL eosio_assert([1], [608])
	CALL memcpy($9, $4, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy(($9 | [8]), ($4 + [8]), [8])
	*($9 + [24]) = *($4 + [16])
	CALL eosio_assert([1], [608])
	CALL memcpy(($9 + [16]), ($9 + [24]), [1])
	$6 = *($4)
	$2 = CALL db_store_i64(*($2), (int_64)7389690656689487872, $5, $6, $9, [17])
	*($4 + [28]) = $2
	$1 = ($0 + [144])
	if ( (uint_64)($6 <= *($1)) ){ goto $label$7 }
	*($1) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($9 + [24]) = $4
	$6 = *($4)
	*($9) = $6
	*($9 + [20]) = $2
	$3 = ($0 + [156])
	$1 = *($3)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [160]))) ){ goto $label$9 }
	*($1 + [8]) = $6
	*($1 + [16]) = $2
	*($9 + [24]) = [0]
	*($1) = $4
	*($3) = ($1 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $38(($0 + [152]), ($9 + [24]), $9, ($9 + [20]))
	
.LABEL $label$8
	$4 = *($9 + [24])
	*($9 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL $92($4)
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [32])
}

void .FUNC _ZN11eosworldmap11pauseswitchEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	$1 = ($0 + [128])
	$2 = ($0 + [136])
	$4 = CALL db_lowerbound_i64(*($0 + [128]), *($2), (int_64)7389690656689487872, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$4 = CALL $39($1, $4)
	CALL eosio_assert([1], [624])
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [672])
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [720])
	*($4 + [16]) = ((int_32)*($4 + [16]) ^ (int_32)[1])
	$6 = *($4)
	CALL eosio_assert([1], [784])
	CALL eosio_assert([1], [608])
	CALL memcpy($9, $4, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy(($9 | [8]), ($4 + [8]), [8])
	*($9 + [24]) = *($4 + [16])
	CALL eosio_assert([1], [608])
	CALL memcpy(($9 + [16]), ($9 + [24]), [1])
	CALL db_update_i64(*($4 + [28]), (int_64)0, $9, [17])
	$4 = ($0 + [144])
	if ( (uint_64)($6 <= *($4)) ){ goto $label$5 }
	*($4) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0)
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [544])
	*(($4 = CALL $91([40])) + [24]) = $1
	*($4 + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = [0]
	CALL eosio_assert([1], [608])
	CALL memcpy($9, $4, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy(($9 | [8]), ($4 + [8]), [8])
	*($9 + [24]) = *($4 + [16])
	CALL eosio_assert([1], [608])
	CALL memcpy(($9 + [16]), ($9 + [24]), [1])
	$6 = *($4)
	$2 = CALL db_store_i64(*($2), (int_64)7389690656689487872, $5, $6, $9, [17])
	*($4 + [28]) = $2
	$1 = ($0 + [144])
	if ( (uint_64)($6 <= *($1)) ){ goto $label$7 }
	*($1) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($9 + [24]) = $4
	$6 = *($4)
	*($9) = $6
	*($9 + [20]) = $2
	$3 = ($0 + [156])
	$1 = *($3)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [160]))) ){ goto $label$9 }
	*($1 + [8]) = $6
	*($1 + [16]) = $2
	*($9 + [24]) = [0]
	*($1) = $4
	*($3) = ($1 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $38(($0 + [152]), ($9 + [24]), $9, ($9 + [20]))
	
.LABEL $label$8
	$4 = *($9 + [24])
	*($9 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL $92($4)
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [32])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [608])
	CALL memcpy(*($0 + [4]), $1, [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [48])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [608])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC _ZN11eosworldmap7depositEyo (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	$4 = *(($0 + [112]))
	$9 = *(($0 + [116]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8) + [8]) == (int_64)$1) ){ goto $label$1 }
	$9 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [88])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$4 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [848])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)3607749778735104000, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $28($6, $9)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [848])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [624])
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [672])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$6()), [720])
	$7 = *($8 + [16])
	$1 = ((int_64)$7 + (int_64)$2)
	*($8 + [16]) = $1
	*(($6 = ($8 + [24]))) = ((int_64)((int_64)*($6) + (int_64)$3) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($1 <= $7)) : (uint_64)($1 <= $2) ))
	$1 = *($8 + [8])
	CALL eosio_assert([1], [784])
	*($10 + [56]) = ($10 + [42])
	*($10 + [52]) = $10
	*($10 + [48]) = $10
	CALL $47(($10 + [48]), $8)
	CALL db_update_i64(*($8 + [68]), (int_64)0, $10, [42])
	$8 = ($0 + [104])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$5 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [720])
	$3 = *($1)
	$4 = *(*($2 + [4]) + [4])
	$7 = *($2 + [8])
	if ( (int_64)(*($7 + [8]) == 0) ){ goto $label$2 }
	$7 = *($7 + [4])
	CALL eosio_assert([1], [912])
	$7 = ($7 + [1])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	$8 = *(*($2 + [12]))
	*(($2 = (*($1 + [8]) + (*(*($2) + [2]) << [4]))) + [4]) = $7
	*($2) = $4
	*(($2 + [7])) = *(($10 + [15]))
	*($2 + [5 align=1]) = *($10 + [13 align=1])
	*($2 + [8]) = $8
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [784])
	$4 = ($1 + [8])
	$5 = *($1 + [8])
	$7 = *(($1 + [12]))
	$6 = ($7 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	$2 = [21]
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$5 }
	$2 = (((int_32)uint_32(($6 + [-16]) >> [4]) * (int_32)[13]) + $2)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 + [-13])
	
.LABEL $label$4
	if ( ($2 <= [513]) ){ goto $label$7 }
	$9 = CALL malloc($2)
	goto $label$6 
	
.LABEL $label$7
	$9 = ($9 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$6
	*($10) = $9
	*($10 + [8]) = ($9 + $2)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [608])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	CALL $48($10, $4)
	CALL db_update_i64(*($1 + [24]), (int_64)0, $9, $2)
	if ( ($2 <= [513]) ){ goto $label$8 }
	CALL free($9)
	
.LABEL $label$8
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [80])
	*([0] + [4]) = $11
	$9 = *($2 + [8])
	$4 = (int_64)($9 == 0)
	*(($0 = CALL memset($0, [0], [48])) + [1]) = $4
	$8 = (int_64)100
	if ( $4 ){ goto $label$2 }
	$4 = *($3 + [10])
	$5 = *($2 + [4])
	CALL eosio_assert([1], [912])
	if ( ((uint_32)$4 >= (uint_32)(($5 + [1]) & [255])) ){ goto $label$3 }
	*($0) = [1]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($2 + [8])
	if ( (int_64)(*($4) == 0) ){ goto $label$2 }
	CALL eosio_assert((*($2 + [4]) <= [43]), [944])
	if ( (int_64)(*($4) == 0) ){ goto $label$4 }
	$8 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 (Rounds 0)(((float_64)CALL pow((float_64)1.35, (CASTING float_64)(uint_32 *(($2 + [4])))) * (float_64)(float_64)100))) * (float_64)(float_64)1.35))
	goto $label$2 
	
.LABEL $label$4
	$8 = (int_64)0
	
.LABEL $label$2
	CALL eosio_assert(((uint_64)*($1 + [16]) >= (uint_64)$8), [976])
	*($1 + [72]) = ((int_64)*($1 + [72]) + (int_64)1)
	$7 = (int_64)0
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$6 }
	if ( (int_64)(*(($2 + [8])) == 0) ){ goto $label$7 }
	$7 = (Rounds 0)(((float_64)CALL pow((float_64)1.35, (CASTING float_64)(uint_32 *($2 + [4]))) * (float_64)(float_64)100))
	
.LABEL $label$7
	CALL __fixunsdfti(($11 + [64]), ((float_64)(CASTING float_64)(uint_64 (int_64))($8 - $7)) * (float_64)(float_64)1e16))
	CALL __multi3(($11 + [48]), *($11 + [64]), *((($11 + [64]) + [8])), (int_64)100, (int_64)0)
	CALL __udivti3(($11 + [32]), *($11 + [48]), *((($11 + [48]) + [8])), (int_64)100, (int_64)0)
	$10 = *((($11 + [32]) + [8]))
	*(($0 + [24])) = $10
	$9 = *($11 + [32])
	*($0 + [16]) = $9
	CALL __fixunsdfti(($11 + [16]), (float_64))(((float_64)(CASTING float_64)(uint_64 $8) * (float_64)(float_64)1e16) - CALL $fimport$1($9, $10)))
	*(($0 + [40])) = *((($11 + [16]) + [8]))
	*($0 + [32]) = *($11 + [16])
	goto $label$5 
	
.LABEL $label$6
	CALL __fixunsdfti($11, ((float_64)(CASTING float_64)(uint_64 $8) * (float_64)(float_64)1e16))
	$10 = *(($11 + [8]))
	*(($0 + [24])) = $10
	$9 = *($11)
	*($0 + [16]) = $9
	$2 = *($3 + [9])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$9 }
	if ( $2 ){ goto $label$8 }
	*($1 + [80]) = ((int_64)*($1 + [80]) + (int_64)1)
	goto $label$5 
	
.LABEL $label$9
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)1)
	goto $label$5 
	
.LABEL $label$8
	*($1 + [96]) = ((int_64)*($1 + [96]) + (int_64)1)
	
.LABEL $label$5
	$6 = *($1 + [48])
	$7 = ((int_64)$6 + (int_64)$8)
	*($1 + [48]) = $7
	*(($2 = ($1 + [16]))) = (int_64))(*($2) - $8)
	*(($2 = ($1 + [56]))) = ((int_64)*($2) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($7 <= $6)) : (uint_64)($7 <= $8) ))
	$7 = *($1 + [32])
	$8 = ((int_64)$7 + (int_64)$9)
	*(($2 = ($1 + [40]))) = ((int_64)((int_64)*($2) + (int_64)$10) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($8 <= $7)) : (uint_64)($8 <= $9) ))
	*($1 + [32]) = $8
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [80])
}

void .FUNC _ZN11eosworldmap11clearpixelsEtt (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [144]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	$5 = [0]
	$4 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-8527966002922258432, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $9(($0 + [8]), $3)
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [160])
	$3 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)-6767668200561070080, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $10(($0 + [48]), $3)
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [192])
	*($10 + [56]) = (int_64)-1
	*($10 + [64]) = [0]
	*($10 + [40]) = *($0)
	*($10 + [48]) = *($4)
	*((($10 + [40]) + [28])) = [0]
	*((($10 + [40]) + [32])) = [0]
	CALL $11(($10 + [40]), $1)
	*($10 + [16]) = (int_64)-1
	*($10 + [24]) = [0]
	*($10) = *($0)
	*($10 + [8]) = *($5)
	*(($5 = ($10 + [28]))) = [0]
	*(($10 + [32])) = [0]
	CALL $12($10, $1)
	$1 = *($10 + [24])
	if ( ($1 == 0) ){ goto $label$7 }
	$5 = *($5)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	$0 = *($4 + [8])
	if ( ($0 == 0) ){ goto $label$12 }
	*(($4 + [12])) = $0
	CALL $92($0)
	
.LABEL $label$12
	CALL $92($4)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($10 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $1
	
.LABEL $label$8
	*(($10 + [28])) = $1
	CALL $92($5)
	
.LABEL $label$7
	$1 = *($10 + [64])
	if ( ($1 == 0) ){ goto $label$13 }
	$3 = ($10 + [68])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$15 }
	
.LOOP $label$16:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	$0 = *($4 + [8])
	if ( ($0 == 0) ){ goto $label$18 }
	*(($4 + [12])) = $0
	CALL $92($0)
	
.LABEL $label$18
	CALL $92($4)
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$16 }
	$5 = *(($10 + [64]))
	goto $label$14 
	
.LABEL $label$15
	$5 = $1
	
.LABEL $label$14
	*($3) = $1
	CALL $92($5)
	
.LABEL $label$13
	*([0] + [4]) = ($10 + [80])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [480])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $91([128])) + [112]) = $0
	CALL $24(($8 + [32]), $6)
	*($6 + [116]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [116])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $25(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $92($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _Z9splitMemoRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEERKS6_c (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($1)
	$8 = ($9 & [1])
	$3 = ( *($1 + [8]) ? ($1 + [1]) : $8 )
	*($10 + [24]) = $3
	$1 = ( *($1 + [4]) ? uint_32($9 >> [1]) : $8 )
	$9 = ($3 + $1)
	*($10 + [16]) = $9
	*($10 + [8]) = $3
	if ( ($1 == 0) ){ goto $label$3 }
	$2 = ($2 & [255])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	$1 = $3
	
.LOOP $label$4:
	if ( ((int_32)*($3) != (int_32)$2) ){ goto $label$5 }
	$9 = *($6)
	if ( ((uint_32)$9 >= (uint_32)*($5)) ){ goto $label$10 }
	*($9) = (int_64)0
	*(($9 + [8])) = [0]
	$4 = ($3 - $1)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$9 }
	*($9) = ($4 << [1])
	$8 = ($9 + [1])
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	CALL $7($0, ($10 + [24]), ($10 + [8]))
	goto $label$6 
	
.LABEL $label$9
	$7 = (($4 + [16]) & [-16])
	$8 = CALL $91($7)
	*($9) = ($7 | [1])
	*($9 + [8]) = $8
	*($9 + [4]) = $4
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$7 }
	
.LABEL $label$8
	$9 = $8
	
.LOOP $label$11:
	*($9) = *($1)
	$9 = ($9 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$11 }
	$8 = ($8 + $4)
	
.LABEL $label$7
	*($8) = [0]
	*($6) = (*($6) + [12])
	
.LABEL $label$6
	$3 = *($10 + [8])
	$1 = ($3 + [1])
	*($10 + [24]) = $1
	$9 = *($10 + [16])
	
.LABEL $label$5
	$3 = ($3 + [1])
	*($10 + [8]) = $3
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$3 }
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)*($0 + [8])) ){ goto $label$14 }
	*($3) = (int_64)0
	*(($3 + [8])) = [0]
	$8 = ($9 - $1)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$13 }
	*($3) = ($8 << [1])
	$2 = ($3 + [1])
	goto $label$12 
	
.LABEL $label$14
	CALL $7($0, ($10 + [24]), ($10 + [16]))
	goto $label$3 
	
.LABEL $label$13
	$6 = (($8 + [16]) & [-16])
	$2 = CALL $91($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $2
	*($3 + [4]) = $8
	
.LABEL $label$12
	$3 = $2
	
.LOOP $label$15:
	*($3) = *($1)
	$3 = ($3 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$15 }
	*(($2 + $8)) = [0]
	*(($1 = ($0 + [4]))) = (*($1) + [12])
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $93($9)
	
.LABEL $label$1
	CALL $93($3)
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $9) / (int_32)[12])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[357913942]) ){ goto $label$2 }
	$8 = [357913941]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[12])
	if ( ((uint_32)$9 > (uint_32)[178956969]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$8 = ( $7 ? $9 : ($9 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $91(((int_32)$8 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$3 * (int_32)[12])))) = [0]
	*(($9 + [4])) = (int_64)0
	$1 = *($1)
	$2 = *($2)
	$4 = ($2 - $1)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($9) = ($4 << [1])
	$7 = ($9 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = (($4 + [16]) & [-16])
	$7 = CALL $91($5)
	*($9) = ($5 | [1])
	*(($3 = ($6 + ((int_32)$3 * (int_32)[12]))) + [8]) = $7
	*($3 + [4]) = $4
	
.LABEL $label$6
	$3 = ((int_32)$8 * (int_32)[12])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	$8 = $7
	
.LOOP $label$9:
	*($8) = *($1)
	$8 = ($8 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	$7 = ($7 + $4)
	
.LABEL $label$8
	$4 = ($6 + $3)
	*($7) = [0]
	$7 = ($9 + [12])
	$1 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$11 }
	$2 = ([0] - $1)
	$1 = ($8 + [-12])
	
.LOOP $label$12:
	*(($9 + [-12])) = *($1)
	$8 = ($1 + [8])
	*(($9 + [-4])) = *($8)
	*($1) = [0]
	*(($1 + [4])) = [0]
	*($8) = [0]
	$9 = ($9 + [-12])
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $2) != (int_32)[-12]) ){ goto $label$12 }
	$1 = *(($0 + [4]))
	$8 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$8 = $1
	
.LABEL $label$10
	*($0) = $9
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$13 }
	$9 = ([0] - $8)
	$1 = ($1 + [-12])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $92(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $9) != (int_32)[-12]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($8 == 0) ){ goto $label$16 }
	CALL $92($8)
	
.LABEL $label$16
	return (unreachable)
	
.LABEL $label$5
	CALL $93($9)
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_64 .FUNC _Z28calculateWithdrawalAndUpdateRK10landcanvasRK11oceancanvasR7accountR5guard (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	float_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($2 + [48]) ^ (int_32)[1]), [16])
	$9 = *($0 + [16])
	$8 = *($1 + [16])
	$5 = ((int_64)$8 + (int_64)$9)
	$4 = CALL __floatuntidf($5, ((int_64)((int_64)*(($1 + [24])) + (int_64)*(($0 + [24]))) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($5 <= $8)) : (uint_64)($5 <= $9) )))
	$0 = ($2 + [24])
	$8 = (Rounds 0)(((float_64)CALL __floatuntidf(*($2 + [16]), *($0)) / (float_64)(float_64)1e16))
	$5 = ((int_64)(Rounds 0)(((float_64)((float_64)CALL __floatuntidf(*($2 + [32]), *(($2 + [40]))) * (float_64)((float_64)CALL __floatuntidf(*($0 + [64]), *(($0 + [72]))) / (float_64)(float_64)1e16)) / (float_64)$4)) + (int_64)$8)
	CALL eosio_assert(((int_64)$5 > (int_64)0), [48])
	CALL eosio_assert(((uint_64)*($3 + [8]) >= (uint_64)$5), [96])
	*($3 + [8]) = (int_64))(*($3 + [8]) - $5)
	CALL __fixunsdfti($10, ((float_64)(CASTING float_64)(int_64 $8) * (float_64)(float_64)1e16))
	$7 = *(($10 + [8]))
	$6 = *($0)
	$3 = ( ((uint_64)$8 > (uint_64)$9) ? ((uint_64)$6 > (uint_64)$7) : ((int_64)$6 == (int_64)$7) )
	$9 = *($10)
	$8 = *($2 + [16])
	*($2 + [16]) = ( (int_64))($8 - $9) ? (int_64)0 : $3 )
	*($0) = ( (int_64))((int_64))($6 - $7) - (CASTING uint_64)(uint_32 (uint_64)($8 <= $9))) ? (int_64)0 : $3 )
	*([0] + [4]) = ($10 + [16])
	return $5
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [304])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [352])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [416])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [12])) = $6
	CALL $92($6)
	
.LABEL $label$7
	CALL $92($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $6
	CALL $92($6)
	
.LABEL $label$10
	CALL $92($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [528])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $17($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[3]), [512])
	CALL memcpy($7, *($4), [4])
	$3 = (*($4) + [4])
	*($4) = $3
	CALL eosio_assert(((int_32)*($6) != (int_32)$3), [512])
	CALL memcpy(($7 + [4]), *($4), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [512])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $91(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $92($6)
	
.LABEL $label$11
	CALL $92($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $92($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($2 >> [3])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $91(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [16])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $101($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [4]))
	$5 = ($2 + ($3 << [4]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $92($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [480])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $91([64])) + [40]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [512])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[15]), [512])
	CALL memcpy(($6 + [16]), ($7 + [8]), [16])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[24]), [512])
	CALL memcpy(($6 + [32]), ($7 + [24]), [8])
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $23(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $92($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$4 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-8527958713568460800, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $18($0, $4)
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [0]
	
.LOOP $label$2:
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [224])
	CALL eosio_assert($5, [272])
	$5 = [0]
	$2 = CALL db_next_i64(*($4 + [24]), ($6 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $18($0, $2)
	
.LABEL $label$3
	CALL $19($0, $4)
	if ( ($5 == 0) ){ goto $label$1 }
	$4 = $5
	$3 = ($3 + [1])
	if ( (($3 & [65535]) <= $1) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$4 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-6767667972768763904, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $13($0, $4)
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [0]
	
.LOOP $label$2:
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [224])
	CALL eosio_assert($5, [272])
	$5 = [0]
	$2 = CALL db_next_i64(*($4 + [24]), ($6 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $13($0, $2)
	
.LABEL $label$3
	CALL $14($0, $4)
	if ( ($5 == 0) ){ goto $label$1 }
	$4 = $5
	$3 = ($3 + [1])
	if ( (($3 & [65535]) <= $1) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [480])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $91([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [512])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $15(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $16(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $92($7)
	
.LABEL $label$10
	CALL $92($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN11eosworldmap4initEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [128])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	$1 = ($0 + [8])
	$4 = [1]
	$9 = [1]
	$2 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-8527966002922258432, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	CALL $9($1, $2)
	$9 = [0]
	
.LABEL $label$5
	CALL eosio_assert($9, [1792])
	$9 = ($0 + [48])
	$2 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)-6767668200561070080, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	CALL $10($9, $2)
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [1840])
	$5 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$6()), [544])
	*(($4 = CALL $91([128])) + [112]) = $1
	*($4) = (int_64)0
	*($10 + [120]) = (($10 + [16]) + [96])
	*($10 + [116]) = ($10 + [16])
	*($10 + [112]) = ($10 + [16])
	CALL $60(($10 + [112]), $4)
	$6 = *($4)
	$2 = CALL db_store_i64(*(($0 + [16])), (int_64)-8527966002922258432, $5, $6, ($10 + [16]), [96])
	*($4 + [116]) = $2
	$1 = ($0 + [24])
	if ( (uint_64)($6 <= *($1)) ){ goto $label$7 }
	*($1) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($10 + [112]) = $4
	$6 = *($4)
	*($10 + [16]) = $6
	*($10 + [12]) = $2
	$3 = ($0 + [36])
	$1 = *($3)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [40]))) ){ goto $label$9 }
	*($1 + [8]) = $6
	*($1 + [16]) = $2
	*($10 + [112]) = [0]
	*($1) = $4
	*($3) = ($1 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $25(($0 + [32]), ($10 + [112]), ($10 + [16]), ($10 + [12]))
	
.LABEL $label$8
	$4 = *($10 + [112])
	*($10 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL $92($4)
	
.LABEL $label$10
	$5 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$6()), [544])
	*(($4 = CALL $91([64])) + [40]) = $9
	*($4) = (int_64)0
	CALL eosio_assert([1], [608])
	CALL memcpy(($10 + [16]), $4, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($10 + [16]) | [8]), ($4 + [16]), [16])
	CALL eosio_assert([1], [608])
	CALL memcpy(($10 + [40]), ($4 + [32]), [8])
	$6 = *($4)
	$9 = CALL db_store_i64(*(($0 + [56])), (int_64)-6767668200561070080, $5, $6, ($10 + [16]), [32])
	*($4 + [44]) = $9
	$1 = ($0 + [64])
	if ( (uint_64)($6 <= *($1)) ){ goto $label$11 }
	*($1) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($10 + [112]) = $4
	$6 = *($4)
	*($10 + [16]) = $6
	*($10 + [12]) = $9
	$2 = ($0 + [76])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [80]))) ){ goto $label$13 }
	*($1 + [8]) = $6
	*($1 + [16]) = $9
	*($10 + [112]) = [0]
	*($1) = $4
	*($2) = ($1 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $23(($0 + [72]), ($10 + [112]), ($10 + [16]), ($10 + [12]))
	
.LABEL $label$12
	$4 = *($10 + [112])
	*($10 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL $92($4)
	
.LABEL $label$14
	*([0] + [4]) = ($10 + [128])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [480])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $91([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [512])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $20(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $21(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $92($7)
	
.LABEL $label$10
	CALL $92($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [304])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [352])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [416])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [12])) = $6
	CALL $92($6)
	
.LABEL $label$7
	CALL $92($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $6
	CALL $92($6)
	
.LABEL $label$10
	CALL $92($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC _ZN11eosworldmap10onTransferERKN5eosio8currency8transferE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	float_64 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	$25 = (*([0] + [4]) - [512])
	*([0] + [4]) = $25
	$3 = *($0)
	$2 = *($1)
	if ( ((int_64)$2 == (int_64)$3) ){ goto $label$1 }
	$19 = (int_64)0
	$18 = (int_64)59
	$17 = [144]
	$20 = (int_64)0
	
.LOOP $label$2:
	$21 = (int_64)0
	if ( ((uint_64)$19 > (uint_64)(int_64)11) ){ goto $label$3 }
	$4 = *($17)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$3
	$17 = ($17 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$2 }
	if ( ((int_64)$2 == (int_64)$20) ){ goto $label$1 }
	if ( ((int_64)*($1 + [8]) != (int_64)$3) ){ goto $label$1 }
	$4 = [0]
	$17 = [0]
	$24 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)7389690656689487872, (int_64)0)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$6 }
	$17 = CALL $39(($0 + [128]), $24)
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$17 != (int_32)[0]), [1008])
	CALL eosio_assert(((int_32)*($17 + [16]) ^ (int_32)[1]), [1056])
	$5 = ($0 + [8])
	$17 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-8527966002922258432, (int_64)0)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $9($5, $17)
	
.LABEL $label$7
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [1072])
	$7 = ($0 + [48])
	$18 = *($4)
	$22 = [0]
	$17 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)-6767668200561070080, (int_64)0)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$8 }
	$22 = CALL $10($7, $17)
	
.LABEL $label$8
	$8 = ((int_32)$22 != (int_32)[0])
	CALL eosio_assert($8, [1120])
	$19 = *($1)
	$21 = *($22)
	$9 = *(($0 + [112]))
	$23 = *(($0 + [116]))
	if ( ((int_32)$23 == (int_32)$9) ){ goto $label$9 }
	$17 = ($23 + [-24])
	$10 = ([0] - $9)
	
.LOOP $label$10:
	if ( ((int_64)*(*($17) + [8]) == (int_64)$19) ){ goto $label$9 }
	$23 = $17
	$24 = ($17 + [-24])
	$17 = $24
	if ( ((int_32)($24 + $10) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	$10 = ($0 + [88])
	if ( ((int_32)$23 == (int_32)$9) ){ goto $label$12 }
	$24 = *(($23 + [-24]))
	CALL eosio_assert(((int_32)*($24 + [64]) == (int_32)$10), [848])
	goto $label$11 
	
.LABEL $label$12
	$24 = [0]
	$17 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)3607749778735104000, $19)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$11 }
	$24 = CALL $28($10, $17)
	CALL eosio_assert(((int_32)*($24 + [64]) == (int_32)$10), [848])
	
.LABEL $label$11
	$23 = ((int_32)$24 != (int_32)[0])
	CALL eosio_assert($23, [1168])
	*((($25 + [360]) + [32])) = [0]
	*($25 + [368]) = $18
	*($25 + [376]) = (int_64)-1
	*($25 + [384]) = (int_64)0
	$18 = *($0)
	*($25 + [360]) = $18
	*((($25 + [320]) + [32])) = [0]
	*($25 + [328]) = $21
	*($25 + [320]) = $18
	*($25 + [336]) = (int_64)-1
	*($25 + [344]) = (int_64)0
	*(($17 = ($25 + [312]))) = (int_64)0
	*(($25 + [304])) = (int_64)0
	*($25 + [296]) = (int_64)0
	CALL $59(($25 + [296]), ($1 + [32]))
	CALL memset(($25 + [112]), [0], [176])
	*($25 + [128]) = *($1 + [16])
	*($25 + [112]) = *($1)
	$18 = *($17)
	*($25 + [120]) = $18
	if ( (int_64)($18 == 0) ){ goto $label$13 }
	if ( ((int_64)$18 == (int_64)$19) ){ goto $label$14 }
	if ( CALL _ZN11eosworldmap15isValidReferrerEy($0, $18) ){ goto $label$13 }
	
.LABEL $label$14
	*($25 + [120]) = (int_64)0
	
.LABEL $label$13
	$1 = *($25 + [300])
	$17 = *($25 + [296])
	if ( ((int_32)$17 == (int_32)$1) ){ goto $label$15 }
	
.LOOP $label$16:
	if ( ((int_32)*($24) != (int_32)*(($17 + [9]))) ){ goto $label$17 }
	if ( (*(($17 + [8])) == 0) ){ goto $label$18 }
	CALL _ZN11eosworldmap14drawOceanPixelERN5eosio11multi_indexILy11679076100940787712E11o_pixel_rowJEEERK13st_pixelOrderR18st_transferContext($0, ($25 + [320]), $17, ($25 + [112]))
	goto $label$17 
	
.LABEL $label$18
	CALL _ZN11eosworldmap13drawLandPixelERN5eosio11multi_indexILy9918785360141090816E11l_pixel_rowJEEERK13st_pixelOrderR18st_transferContext($0, ($25 + [360]), $17, ($25 + [112]))
	
.LABEL $label$17
	$17 = ($17 + [12])
	if ( ((int_32)$1 != (int_32)$17) ){ goto $label$16 }
	$17 = *($25 + [296])
	$1 = *($25 + [300])
	
.LABEL $label$15
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)((int_64)*($25 + [184]) * (int_64)100) / (uint_64)(CASTING uint_64)(uint_32 ((int_32)($1 - $17) / (int_32)[12])))) > (uint_32)[79]), [1216])
	$21 = *(($25 + [152]))
	$19 = *($25 + [144])
	CALL __multi3(($25 + [96]), $19, $21, (int_64)45, (int_64)0)
	CALL __multi3(($25 + [64]), $19, $21, (int_64)20, (int_64)0)
	CALL __multi3(($25 + [32]), $19, $21, (int_64)5, (int_64)0)
	CALL __udivti3(($25 + [80]), *($25 + [96]), *((($25 + [96]) + [8])), (int_64)100, (int_64)0)
	CALL __udivti3(($25 + [48]), *($25 + [64]), *((($25 + [64]) + [8])), (int_64)100, (int_64)0)
	CALL __udivti3(($25 + [16]), *($25 + [32]), *((($25 + [32]) + [8])), (int_64)100, (int_64)0)
	$11 = *((($25 + [80]) + [8]))
	*(($17 = ($25 + [232]))) = $11
	$12 = *((($25 + [48]) + [8]))
	*(($1 = ($25 + [248]))) = $12
	$3 = *((($25 + [16]) + [8]))
	*(($9 = ($25 + [280]))) = $3
	$20 = *($25 + [80])
	*($25 + [224]) = $20
	$2 = *($25 + [48])
	*($25 + [240]) = $2
	$18 = *($25 + [16])
	*($25 + [272]) = $18
	if ( ((int_64)*($25 + [120]) != (int_64)0) ){ goto $label$19 }
	*($9) = (int_64)0
	*(($25 + [272])) = (int_64)0
	$14 = *($9)
	$13 = ((int_64)$14 + (int_64)$18)
	*(($9 = ($25 + [256]))) = $13
	*(($9 = ($25 + [264]))) = ((int_64)((int_64)*($9) + (int_64)$3) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($13 <= $14)) : (uint_64)($13 <= $18) ))
	$18 = (int_64)0
	$3 = (int_64)0
	
.LABEL $label$19
	$13 = (int_64)
	$14 = (int_64)
	*(($9 = ($25 + [256]))) = (int_64))($14($13($19 - $20)) - $2)) - $18)
	*(($15 = ($25 + [264]))) = (int_64))((int_64))((int_64))((int_64))((int_64))((int_64))($21 - $11) - (CASTING uint_64)(uint_32 (uint_64)($19 <= $20))) - $12) - (CASTING uint_64)(uint_32 (uint_64)($13 <= $2))) - $3) - (CASTING uint_64)(uint_32 (uint_64)($14 <= $18)))
	CALL eosio_assert($6, [624])
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$5), [672])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$6()), [720])
	$21 = *(($25 + [240]))
	$18 = *($4 + [80])
	$19 = ((int_64)$18 + (int_64)$21)
	*($4 + [80]) = $19
	$20 = *($1)
	$2 = ((int_64)((int_64)*($5) + (int_64)$20) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($19 <= $18)) : (uint_64)($19 <= $21) ))
	*(($5 = ($4 + [88]))) = $2
	$18 = *($4)
	CALL eosio_assert(( ((uint_64)$19 >= (uint_64)$21) ? ((uint_64)$2 >= (uint_64)$20) : ((int_64)$2 == (int_64)$20) ), [1248])
	$21 = *($9)
	$2 = *($4 + [96])
	$19 = ((int_64)$2 + (int_64)$21)
	*($4 + [96]) = $19
	$20 = *($15)
	$2 = ((int_64)((int_64)*($1) + (int_64)$20) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($19 <= $2)) : (uint_64)($19 <= $21) ))
	*(($1 = ($4 + [104]))) = $2
	CALL eosio_assert(( ((uint_64)$19 >= (uint_64)$21) ? ((uint_64)$2 >= (uint_64)$20) : ((int_64)$2 == (int_64)$20) ), [1280])
	$21 = *(($25 + [224]))
	$2 = *($4 + [64])
	$19 = ((int_64)$2 + (int_64)$21)
	*($4 + [64]) = $19
	$20 = *($17)
	$2 = ((int_64)((int_64)*($1) + (int_64)$20) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($19 <= $2)) : (uint_64)($19 <= $21) ))
	*(($1 = ($4 + [72]))) = $2
	CALL eosio_assert(( ((uint_64)$19 >= (uint_64)$21) ? ((uint_64)$2 >= (uint_64)$20) : ((int_64)$2 == (int_64)$20) ), [1312])
	*($4 + [32]) = ((int_64)*($4 + [32]) + (int_64)*($25 + [192]))
	*($4 + [40]) = ((int_64)*($4 + [40]) + (int_64)*($25 + [200]))
	*($4 + [48]) = ((int_64)*($4 + [48]) + (int_64)*($25 + [208]))
	$16 = ((float_64)CALL __floatuntidf(*($25 + [160]), *(($25 + [168]))) * (float_64)(float_64)1e16)
	$17 = ($4 + [24])
	CALL __fixunsdfti($25, ((float_64)CALL $fimport$1(*($4 + [16]), *($17)) + (float_64)$16))
	$19 = *(($25 + [8]))
	*($17) = $19
	$21 = *($25)
	*($4 + [16]) = $21
	CALL eosio_assert(((float_64)CALL $fimport$1($21, $19) >= (float_64)$16), [1344])
	CALL eosio_assert(((int_64)$18 == (int_64)*($4)), [784])
	*($25 + [504]) = (($25 + [400]) + [96])
	*($25 + [500]) = ($25 + [400])
	*($25 + [496]) = ($25 + [400])
	CALL $60(($25 + [496]), $4)
	CALL db_update_i64(*($4 + [116]), (int_64)0, ($25 + [400]), [96])
	$17 = ($0 + [24])
	if ( (uint_64)($18 <= *($17)) ){ goto $label$20 }
	*($17) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	CALL eosio_assert($8, [624])
	CALL eosio_assert(((int_32)*($22 + [40]) == (int_32)$7), [672])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$6()), [720])
	$21 = *($25 + [176])
	$18 = *($22 + [16])
	$19 = ((int_64)$18 + (int_64)$21)
	*($22 + [16]) = $19
	*($22 + [32]) = ((int_64)*($22 + [32]) + (int_64)*($25 + [216]))
	$20 = ((int_64)*($17) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($19 <= $18)) : (uint_64)($19 <= $21) ))
	*(($17 = ($22 + [24]))) = $20
	$18 = *($22)
	CALL eosio_assert(( ((uint_64)$19 >= (uint_64)$21) ? [1] : (int_64)($20 == 0) ), [1344])
	CALL eosio_assert(((int_64)$18 == (int_64)*($22)), [784])
	CALL eosio_assert([1], [608])
	CALL memcpy(($25 + [400]), $22, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($25 + [400]) | [8]), ($22 + [16]), [16])
	CALL eosio_assert([1], [608])
	CALL memcpy((($25 + [400]) + [24]), ($22 + [32]), [8])
	CALL db_update_i64(*($22 + [44]), (int_64)0, ($25 + [400]), [32])
	$17 = ($0 + [64])
	if ( (uint_64)($18 <= *($17)) ){ goto $label$21 }
	*($17) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	*($25 + [404]) = $0
	*($25 + [400]) = ($25 + [112])
	CALL eosio_assert($23, [624])
	CALL $61($10, $24, ($25 + [400]))
	$19 = *($25 + [120])
	if ( (int_64)($19 == 0) ){ goto $label$22 }
	CALL _ZN11eosworldmap7depositEyo($0, $19, *(($25 + [272])), *(($25 + [280])))
	
.LABEL $label$22
	$17 = *($25 + [296])
	if ( ($17 == 0) ){ goto $label$23 }
	*($25 + [300]) = $17
	CALL $92($17)
	
.LABEL $label$23
	$24 = *($25 + [344])
	if ( ($24 == 0) ){ goto $label$24 }
	$1 = ($25 + [348])
	$17 = *($1)
	if ( ((int_32)$17 == (int_32)$24) ){ goto $label$26 }
	
.LOOP $label$27:
	$17 = ($17 + [-24])
	$4 = *($17)
	*($17) = [0]
	if ( ($4 == 0) ){ goto $label$28 }
	$0 = *($4 + [8])
	if ( ($0 == 0) ){ goto $label$29 }
	*(($4 + [12])) = $0
	CALL $92($0)
	
.LABEL $label$29
	CALL $92($4)
	
.LABEL $label$28
	if ( ((int_32)$24 != (int_32)$17) ){ goto $label$27 }
	$17 = *(($25 + [344]))
	goto $label$25 
	
.LABEL $label$26
	$17 = $24
	
.LABEL $label$25
	*($1) = $24
	CALL $92($17)
	
.LABEL $label$24
	$24 = *($25 + [384])
	if ( ($24 == 0) ){ goto $label$1 }
	$1 = ($25 + [388])
	$17 = *($1)
	if ( ((int_32)$17 == (int_32)$24) ){ goto $label$31 }
	
.LOOP $label$32:
	$17 = ($17 + [-24])
	$4 = *($17)
	*($17) = [0]
	if ( ($4 == 0) ){ goto $label$33 }
	$0 = *($4 + [8])
	if ( ($0 == 0) ){ goto $label$34 }
	*(($4 + [12])) = $0
	CALL $92($0)
	
.LABEL $label$34
	CALL $92($4)
	
.LABEL $label$33
	if ( ((int_32)$24 != (int_32)$17) ){ goto $label$32 }
	$17 = *(($25 + [384]))
	goto $label$30 
	
.LABEL $label$31
	$17 = $24
	
.LABEL $label$30
	*($1) = $24
	CALL $92($17)
	
.LABEL $label$1
	*([0] + [4]) = ($25 + [512])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	$11 = [0]
	*($12 + [40]) = [0]
	*($12 + [32]) = (int_64)0
	CALL _Z9splitMemoRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEERKS6_c(($12 + [32]), $1, [59])
	$10 = (int_64)0
	$2 = *($12 + [32])
	if ( ((int_32)(*($12 + [36]) - $2) != (int_32)[24]) ){ goto $label$1 }
	if ( (*($2 + [12]) & [1]) ){ goto $label$3 }
	$1 = (($2 + [12]) + [1])
	goto $label$2 
	
.LABEL $label$3
	$1 = *(($2 + [20]))
	
.LABEL $label$2
	$6 = [-1]
	
.LOOP $label$4:
	$5 = ($1 + $6)
	$3 = ($6 + [1])
	$6 = $3
	if ( *(($5 + [1])) ){ goto $label$4 }
	$4 = (CASTING uint_64)(uint_32 $3)
	$8 = (int_64)0
	$7 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$5:
	$9 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$4) ){ goto $label$6 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$6 = ($6 + [165])
	goto $label$7 
	
.LABEL $label$8
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$10 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$9 
	
.LABEL $label$10
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$9
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$5 }
	
.LABEL $label$1
	*($0 + [16]) = $10
	*($12 + [24]) = [0]
	*($12 + [16]) = (int_64)0
	CALL _Z9splitMemoRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEERKS6_c(($12 + [16]), $2, [44])
	*($12 + [4]) = [0]
	*($12 + [8]) = [0]
	$1 = *($12 + [16])
	*($12) = [0]
	$1 = (*($12 + [20]) - $1)
	$6 = ((int_32)$1 / (int_32)[12])
	$3 = [0]
	$5 = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$11 }
	$5 = CALL $91($1)
	$11 = ($5 + ((int_32)$6 * (int_32)[12]))
	*(($12 + [8])) = $11
	*($12) = $5
	*($12 + [4]) = $5
	$3 = ($5 + $1)
	$1 = $5
	
.LOOP $label$13:
	*($1) = (int_64)0
	*(($1 + [8])) = [0]
	$1 = ($1 + [12])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$13 }
	*($12 + [4]) = $3
	
.LABEL $label$12
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$15 }
	*($0 + [4]) = $1
	CALL $92($1)
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$1 = ($0 + [8])
	$11 = *(($12 + [8]))
	$3 = *($12 + [4])
	$5 = *($12)
	goto $label$14 
	
.LABEL $label$15
	$1 = ($0 + [8])
	
.LABEL $label$14
	*($0) = $5
	*($1) = $11
	*(($0 + [4])) = $3
	$1 = *($12 + [20])
	$6 = *($12 + [16])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$16 }
	CALL $73($5, $6)
	if ( ((int_32)($6 + [12]) == (int_32)$1) ){ goto $label$17 }
	$5 = ($1 - $6)
	$1 = [12]
	
.LOOP $label$18:
	CALL $73((*($0) + $1), ($6 + $1))
	$1 = ($1 + [12])
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$18 }
	
.LABEL $label$17
	$6 = *($12 + [16])
	
.LABEL $label$16
	if ( ($6 == 0) ){ goto $label$19 }
	$1 = *($12 + [20])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$21 }
	$5 = ([0] - $6)
	$1 = ($1 + [-12])
	
.LOOP $label$22:
	if ( ((*($1) & [1]) == 0) ){ goto $label$23 }
	CALL $92(*(($1 + [8])))
	
.LABEL $label$23
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $5) != (int_32)[-12]) ){ goto $label$22 }
	$1 = *($12 + [16])
	goto $label$20 
	
.LABEL $label$21
	$1 = $6
	
.LABEL $label$20
	*($12 + [20]) = $6
	CALL $92($1)
	
.LABEL $label$19
	$5 = *($12 + [32])
	if ( ($5 == 0) ){ goto $label$24 }
	$1 = *($12 + [36])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$26 }
	$6 = ([0] - $5)
	$1 = ($1 + [-12])
	
.LOOP $label$27:
	if ( ((*($1) & [1]) == 0) ){ goto $label$28 }
	CALL $92(*(($1 + [8])))
	
.LABEL $label$28
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $6) != (int_32)[-12]) ){ goto $label$27 }
	$1 = *($12 + [32])
	goto $label$25 
	
.LABEL $label$26
	$1 = $5
	
.LABEL $label$25
	*($12 + [36]) = $5
	CALL $92($1)
	
.LABEL $label$24
	*([0] + [4]) = ($12 + [48])
	return (unreachable)
	
.LABEL $label$11
	CALL $101($12)
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [4])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $92($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$5 = [268435455]
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [3])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [4])
	$5 = CALL $91($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [4])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [4])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [4]))
	return (unreachable)
	
.LABEL $label$1
	CALL $101($0)
}

void .FUNC _ZN11eosworldmap14drawOceanPixelERN5eosio11multi_indexILy11679076100940787712E11o_pixel_rowJEEERK13st_pixelOrderR18st_transferContext (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	$8 = *($2)
	*($10 + [34]) = ((uint_32)$8 % (uint_32)[50])
	$9 = *(($1 + [28]))
	$5 = *($1 + [24])
	$8 = ((uint_32)$8 / (uint_32)[50])
	*($10 + [32]) = $8
	$4 = (CASTING uint_64)(uint_32 ($8 & [65535]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$4) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$5 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$1), [848])
	if ( $8 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$8 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-6767667972768763904, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $13($1, $8)
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$1), [848])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0)
	*($10 + [24]) = ($10 + [32])
	*($10 + [8]) = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [544])
	*($10 + [40]) = $1
	*($10 + [44]) = ($10 + [24])
	*($10 + [48]) = ($10 + [8])
	*(($8 = CALL $91([32])) + [16]) = [0]
	*($8 + [8 align=4]) = (int_64)0
	*($8 + [20]) = $1
	CALL $52(($10 + [40]), $8)
	*($10 + [56]) = $8
	$4 = *($8)
	*($10 + [40]) = $4
	$9 = *($8 + [24])
	*($10 + [36]) = $9
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($7 + [8]) = $4
	*($7 + [16]) = $9
	*($10 + [56]) = [0]
	*($7) = $8
	*($6) = ($7 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $16(($1 + [24]), ($10 + [56]), ($10 + [40]), ($10 + [36]))
	
.LABEL $label$6
	$7 = *($10 + [56])
	*($10 + [56]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	$9 = *($7 + [8])
	if ( ($9 == 0) ){ goto $label$8 }
	*(($7 + [12])) = $9
	CALL $92($9)
	
.LABEL $label$8
	CALL $92($7)
	
.LABEL $label$3
	*($10 + [48]) = [0]
	*($10 + [40]) = (int_64)0
	$9 = ($8 + [12])
	$7 = (*($9) - *($8 + [8]))
	$6 = int_32($7 >> [4])
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$9 }
	$7 = CALL $91($7)
	*((($10 + [40]) + [8])) = ($7 + ($6 << [4]))
	*($10 + [40]) = $7
	*($10 + [44]) = $7
	$6 = *(($8 + [8]))
	$9 = (*($9) - $6)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($7, $6, $9)
	*($10 + [44]) = (*($10 + [44]) + $9)
	$7 = *($10 + [40])
	
.LABEL $label$10
	$4 = *(($7 + (*($10 + [34]) << [4])) + [8])
	CALL eosio_assert(((uint_64)*($3 + [16]) > (uint_64)(int_64)9), [976])
	*($3 + [16]) = ((int_64)*($3 + [16]) + (int_64)-10)
	*($3 + [72]) = ((int_64)*($3 + [72]) + (int_64)1)
	*($3 + [64]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($3 + [64])) + (float_64)(float_64)1e17))
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$11 }
	*($3 + [104]) = ((int_64)*($3 + [104]) + (int_64)1)
	
.LABEL $label$11
	*($10 + [12]) = $2
	*($10 + [16]) = $3
	*($10 + [8]) = ($10 + [32])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [624])
	CALL $53($1, $8, ($10 + [8]))
	$8 = *($10 + [40])
	if ( ($8 == 0) ){ goto $label$12 }
	*($10 + [44]) = $8
	CALL $92($8)
	
.LABEL $label$12
	*([0] + [4]) = ($10 + [64])
	return (unreachable)
	
.LABEL $label$9
	CALL $101(($10 + [40]))
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	*($1) = *(*(*($0 + [4])))
	$2 = *($0)
	CALL $55($1)
	$3 = ($1 + [8])
	$5 = *($1 + [8])
	$4 = *(($1 + [12]))
	$6 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	$7 = [21]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	$7 = (((int_32)uint_32(($6 + [-16]) >> [4]) * (int_32)[13]) + $7)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 + [-13])
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [608])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	CALL $54($10, $3)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-6767667972768763904, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [720])
	$8 = *(*(($2 + [8])))
	$10 = *((*(($2 + [4])) + [4]))
	$3 = *($1)
	*(($2 = (*($1 + [8]) + (*((*($2) + [2])) << [4]))) + [4]) = [0]
	*($2) = $10
	$10 = $9
	*($2 + [5 align=1]) = *($10 + [13 align=1])
	*(($2 + [7])) = *((($10 + [13]) + [2]))
	*($2 + [8]) = $8
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [784])
	$4 = ($1 + [8])
	$6 = *($1 + [8])
	$5 = *(($1 + [12]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	$2 = [21]
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$3 }
	$2 = (((int_32)uint_32(($7 + [-16]) >> [4]) * (int_32)[13]) + $2)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 + [-13])
	
.LABEL $label$2
	if ( ($2 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($2)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10) = $9
	*($10 + [8]) = ($9 + $2)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [608])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	CALL $54($10, $4)
	CALL db_update_i64(*($1 + [24]), (int_64)0, $9, $2)
	if ( ($2 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [608])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[3]), [608])
	$3 = ($0 + [4])
	CALL memcpy(*($3), $6, [4])
	$5 = (*($3) + [4])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [608])
	CALL memcpy(*($3), ($6 + [4]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [608])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$4 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-6767668200561070080, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $10($0, $4)
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [0]
	
.LOOP $label$2:
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [224])
	CALL eosio_assert($5, [272])
	$5 = [0]
	$2 = CALL db_next_i64(*($4 + [44]), ($6 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $10($0, $2)
	
.LABEL $label$3
	CALL $35($0, $4)
	if ( ($5 == 0) ){ goto $label$1 }
	$4 = $5
	$3 = ($3 + [1])
	if ( (($3 & [65535]) <= $1) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [4])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $92($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$5 = [268435455]
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [3])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [4])
	$5 = CALL $91($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [4])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [4])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [4]))
	return (unreachable)
	
.LABEL $label$1
	CALL $101($0)
}

int_32 .FUNC _ZN11eosworldmap15isValidReferrerEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *(($0 + [112]))
	$6 = *(($0 + [116]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5) + [8]) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [88])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$5 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$4), [848])
	if ( $5 ){ goto $label$4 }
	return [0]
	
.LABEL $label$5
	$5 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)3607749778735104000, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $28($4, $5)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$4), [848])
	
.LABEL $label$4
	return ((int_64)((int_64)*($5 + [32]) | (int_64)*(($5 + [40]))) != (int_64)0)
	
.LABEL $label$3
	return [0]
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [304])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [352])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [416])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $92($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $92($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [44])))
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [304])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [352])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1 + [8])
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8) + [8]) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [416])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $92($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $92($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [480])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $91([80])) + [64]) = $0
	CALL $30(($8 + [32]), $6)
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = *($6 + [8])
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $31(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $92($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*(($1 = CALL $91([800]))) = (int_64)0
	*(($1 + [8])) = (int_64)0
	*(($1 + [24])) = (int_64)0
	*($1 + [16]) = (int_64)0
	*($3) = $1
	*($3 + [4]) = $1
	$2 = ($1 + [800])
	*($3 + [8]) = $2
	*(($1 + [40])) = (int_64)0
	*($1 + [32]) = (int_64)0
	*(($1 + [56])) = (int_64)0
	*($1 + [48]) = (int_64)0
	*(($1 + [72])) = (int_64)0
	*($1 + [64]) = (int_64)0
	*(($1 + [88])) = (int_64)0
	*($1 + [80]) = (int_64)0
	*(($1 + [104])) = (int_64)0
	*($1 + [96]) = (int_64)0
	*(($1 + [120])) = (int_64)0
	*($1 + [112]) = (int_64)0
	*(($1 + [136])) = (int_64)0
	*($1 + [128]) = (int_64)0
	*(($1 + [152])) = (int_64)0
	*($1 + [144]) = (int_64)0
	*(($1 + [168])) = (int_64)0
	*($1 + [160]) = (int_64)0
	*(($1 + [184])) = (int_64)0
	*($1 + [176]) = (int_64)0
	*(($1 + [200])) = (int_64)0
	*($1 + [192]) = (int_64)0
	*(($1 + [216])) = (int_64)0
	*($1 + [208]) = (int_64)0
	*(($1 + [232])) = (int_64)0
	*($1 + [224]) = (int_64)0
	*(($1 + [248])) = (int_64)0
	*($1 + [240]) = (int_64)0
	*(($1 + [264])) = (int_64)0
	*($1 + [256]) = (int_64)0
	*(($1 + [280])) = (int_64)0
	*($1 + [272]) = (int_64)0
	*(($1 + [296])) = (int_64)0
	*($1 + [288]) = (int_64)0
	*(($1 + [312])) = (int_64)0
	*($1 + [304]) = (int_64)0
	*(($1 + [328])) = (int_64)0
	*($1 + [320]) = (int_64)0
	*(($1 + [344])) = (int_64)0
	*($1 + [336]) = (int_64)0
	*(($1 + [360])) = (int_64)0
	*($1 + [352]) = (int_64)0
	*(($1 + [376])) = (int_64)0
	*($1 + [368]) = (int_64)0
	*(($1 + [392])) = (int_64)0
	*($1 + [384]) = (int_64)0
	*(($1 + [408])) = (int_64)0
	*($1 + [400]) = (int_64)0
	*(($1 + [424])) = (int_64)0
	*($1 + [416]) = (int_64)0
	*(($1 + [440])) = (int_64)0
	*($1 + [432]) = (int_64)0
	*(($1 + [456])) = (int_64)0
	*($1 + [448]) = (int_64)0
	*(($1 + [472])) = (int_64)0
	*($1 + [464]) = (int_64)0
	*(($1 + [488])) = (int_64)0
	*($1 + [480]) = (int_64)0
	*(($1 + [504])) = (int_64)0
	*($1 + [496]) = (int_64)0
	*(($1 + [520])) = (int_64)0
	*($1 + [512]) = (int_64)0
	*(($1 + [536])) = (int_64)0
	*($1 + [528]) = (int_64)0
	*(($1 + [552])) = (int_64)0
	*($1 + [544]) = (int_64)0
	*(($1 + [568])) = (int_64)0
	*($1 + [560]) = (int_64)0
	*(($1 + [584])) = (int_64)0
	*($1 + [576]) = (int_64)0
	*(($1 + [600])) = (int_64)0
	*($1 + [592]) = (int_64)0
	*(($1 + [616])) = (int_64)0
	*($1 + [608]) = (int_64)0
	*(($1 + [632])) = (int_64)0
	*($1 + [624]) = (int_64)0
	*(($1 + [648])) = (int_64)0
	*($1 + [640]) = (int_64)0
	*(($1 + [664])) = (int_64)0
	*($1 + [656]) = (int_64)0
	*(($1 + [680])) = (int_64)0
	*($1 + [672]) = (int_64)0
	*(($1 + [696])) = (int_64)0
	*($1 + [688]) = (int_64)0
	*(($1 + [712])) = (int_64)0
	*($1 + [704]) = (int_64)0
	*(($1 + [728])) = (int_64)0
	*($1 + [720]) = (int_64)0
	*(($1 + [744])) = (int_64)0
	*($1 + [736]) = (int_64)0
	*(($1 + [760])) = (int_64)0
	*($1 + [752]) = (int_64)0
	*(($1 + [776])) = (int_64)0
	*($1 + [768]) = (int_64)0
	*(($1 + [792])) = (int_64)0
	*($1 + [784]) = (int_64)0
	*($3 + [4]) = $2
	$1 = *($3)
	CALL $56(($0 + [8]), $1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($3 + [4]) = $1
	CALL $92($1)
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [16])
}

int_64 .FUNC strtoull (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return $3
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $91(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $92($6)
	
.LABEL $label$11
	CALL $92($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $92($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [528])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $22($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[3]), [512])
	CALL memcpy($7, *($4), [4])
	$3 = (*($4) + [4])
	*($4) = $3
	CALL eosio_assert(((int_32)*($6) != (int_32)$3), [512])
	CALL memcpy(($7 + [4]), *($4), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [512])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $91(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $92($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $92($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($2 >> [3])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $91(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [16])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $101($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [4]))
	$5 = ($2 + ($3 << [4]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $92($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $91(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $92($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $92($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [512])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [512])
	CALL memcpy(($1 + [16]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [512])
	CALL memcpy(($1 + [64]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [512])
	CALL memcpy(($1 + [80]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [512])
	CALL memcpy(($1 + [96]), *($0 + [4]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$4 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $28($0, $4)
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [0]
	
.LOOP $label$2:
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [224])
	CALL eosio_assert($5, [272])
	$5 = [0]
	$2 = CALL db_next_i64(*($4 + [68]), ($6 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $28($0, $2)
	
.LABEL $label$3
	CALL $29($0, $4)
	if ( ($5 == 0) ){ goto $label$1 }
	$4 = $5
	$3 = ($3 + [1])
	if ( (($3 & [65535]) <= $1) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
}

void .FUNC _ZN11eosworldmap10clearacctsEtt (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	CALL $27(($0 + [88]), $1)
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [10625])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [10625])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [10625]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [10625]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [10896]))
	$10 = *(($13 + [10625]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [10625]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [10625]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [10625]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [10625])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [10625])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [608])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [608])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [608])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [608])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $69(*($1), ($0 + [32]))
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $91($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $101($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $92($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [608])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [608])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [608])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $64($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [608])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [608])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $68(CALL $67($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	float_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [64])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [720])
	$4 = *($2 + [4])
	$3 = *($1 + [8])
	$5 = *($2)
	$9 = *($5 + [16])
	if ( (int_64)($9 == 0) ){ goto $label$1 }
	$6 = ($1 + [24])
	CALL __fixunsdfti(($12 + [32]), ((float_64)((float_64)(CASTING float_64)(uint_64 $9) * (float_64)(float_64)1e16) + (float_64)CALL $fimport$1(*($1 + [16]), *($6))))
	*($1 + [16]) = *($12 + [32])
	*($6) = *(($12 + [40]))
	
.LABEL $label$1
	$7 = CALL __floatuntidf(*($5 + [48]), *(($5 + [56])))
	CALL __fixunsdfti(($12 + [16]), ((float_64)(CASTING float_64)(uint_64 *($5 + [64])) + (float_64)((float_64)$7 * (float_64)(float_64)1e16)))
	$11 = *($1 + [32])
	$8 = *($12 + [16])
	$9 = ((int_64)$8 + (int_64)$11)
	*($1 + [32]) = $9
	$10 = *((($12 + [16]) + [8]))
	$11 = ((int_64)((int_64)$10 + (int_64)*($5)) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($9 <= $8)) : (uint_64)($9 <= $11) ))
	*(($5 = ($1 + [40]))) = $11
	CALL eosio_assert(( ((uint_64)$9 >= (uint_64)$8) ? ((uint_64)$11 >= (uint_64)$10) : ((int_64)$11 == (int_64)$10) ), [1376])
	$2 = *($2)
	$7 = CALL __floatuntidf(*($2 + [48]), *(($2 + [56])))
	CALL __fixunsdfti($12, ((float_64)(CASTING float_64)(uint_64 *($2 + [64])) + (float_64)((float_64)$7 * (float_64)(float_64)1e16)))
	CALL _ZN11eosworldmap14airdrop_tokensEyy($4, (Rounds 0)(((float_64)CALL $fimport$1(*($12), *(($12 + [8]))) / (float_64)(float_64)1e16)), *($2))
	CALL eosio_assert(((int_64)$3 == (int_64)*(($1 + [8]))), [784])
	$5 = $13
	$2 = ($5 + [-48])
	*([0] + [4]) = $2
	*($12 + [52]) = $2
	*($12 + [48]) = $2
	*($12 + [56]) = ($5 + [-6])
	CALL $47(($12 + [48]), $1)
	CALL db_update_i64(*($1 + [68]), (int_64)0, $2, [42])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = ($12 + [64])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	return $0
}

int_64 .FUNC _ZNK11eosworldmap17get_token_balanceEyRKN5eosio11symbol_typeE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	$6 = (int_64)0
	*($7 + [32]) = (int_64)0
	$4 = *($0)
	*($7 + [16]) = $4
	*($7 + [8]) = $1
	$2 = CALL db_find_i64($1, $4, (int_64)3607749779137757184, (uint_64)*($2) >> (uint_64)(int_64)8)
	if ( ((int_32)$2) < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $70(($7 + [8]), $2)
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)($7 + [8])), [848])
	$6 = *($2)
	$3 = *($7 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($7 + [36])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	CALL $92($0)
	
.LABEL $label$5
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($7 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $3
	
.LABEL $label$2
	*($5) = $3
	CALL $92($2)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [48])
	return $6
}

void .FUNC _ZN11eosworldmap14airdrop_tokensEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [144])
	*([0] + [4]) = $13
	$11 = ((int_64)$1 * (int_64)1000)
	$1 = (int_64)0
	$8 = (int_64)59
	$7 = [1408]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$1 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	*($13 + [24]) = (int_64)20484
	$1 = CALL _ZNK11eosworldmap17get_token_balanceEyRKN5eosio11symbol_typeE($0, $9, ($13 + [24]))
	if ( (int_64)($1 == 0) ){ goto $label$8 }
	$5 = ( $1 ? $11 : (uint_64)($1 <= $11) )
	$4 = *($0)
	$1 = (int_64)0
	$8 = (int_64)59
	$7 = [1424]
	$9 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$14 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$10 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$10
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$9 }
	$1 = (int_64)0
	$8 = (int_64)59
	$7 = [1408]
	$11 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$1 > (uint_64)(int_64)6) ){ goto $label$20 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$3 = ($3 + [165])
	goto $label$18 
	
.LABEL $label$20
	$10 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$16
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$15 }
	$1 = (int_64)0
	$8 = (int_64)59
	$7 = [1440]
	$12 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$26 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$3 = ($3 + [165])
	goto $label$24 
	
.LABEL $label$26
	$10 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$22
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$21 }
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1456])
	$1 = (int_64)80
	$7 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	
.LOOP $label$31:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$31 }
	
.LABEL $label$30
	$3 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$3 = [0]
	
.LABEL $label$27
	CALL eosio_assert($3, [1520])
	*(($13 + [16])) = [0]
	*($13 + [8]) = (int_64)0
	$7 = CALL strlen([1552])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$34 }
	*($13 + [8]) = ($7 << [1])
	$3 = (($13 + [8]) | [1])
	if ( $7 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$6 = (($7 + [16]) & [-16])
	$3 = CALL $91($6)
	*($13 + [8]) = ($6 | [1])
	*($13 + [16]) = $3
	*($13 + [12]) = $7
	
.LABEL $label$33
	CALL memcpy($3, [1552], $7)
	
.LABEL $label$32
	*(($3 + $7)) = [0]
	*((($13 + [24]) + [24])) = (int_64)20484
	*(($3 = (($13 + [24]) + [36]))) = *($13 + [12])
	*($13 + [32]) = $2
	$7 = ($13 + [16])
	*(($13 + [64])) = *($7)
	*($13 + [24]) = *($0)
	*($13 + [40]) = $5
	*($13 + [56]) = *($13 + [8])
	*($13 + [8]) = [0]
	*($13 + [12]) = [0]
	*($7) = [0]
	*($13 + [72]) = $11
	*($13 + [80]) = $12
	*(($7 = CALL $91([16]))) = $4
	*($7 + [8]) = $9
	*((($13 + [72]) + [32])) = [0]
	$0 = ($7 + [16])
	*((($13 + [72]) + [24])) = $0
	*(($13 + [92])) = $0
	*($13 + [88]) = $7
	*($13 + [100]) = [0]
	*((($13 + [72]) + [36])) = [0]
	$7 = *($13 + [56])
	$3 = ( *($3) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($3 + [32])
	$1 = (CASTING uint_64)(uint_32 $3)
	$3 = ($13 + [100])
	
.LOOP $label$35:
	$7 = ($7 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$35 }
	if ( ($7 == 0) ){ goto $label$37 }
	CALL $64($3, $7)
	$3 = *(($13 + [104]))
	$7 = *(($13 + [100]))
	goto $label$36 
	
.LABEL $label$37
	$3 = [0]
	$7 = [0]
	
.LABEL $label$36
	*($13 + [116]) = $7
	*($13 + [112]) = $7
	*($13 + [120]) = $3
	*($13 + [128]) = ($13 + [112])
	*($13 + [136]) = ($13 + [24])
	CALL $65(($13 + [136]), ($13 + [128]))
	CALL $66(($13 + [112]), ($13 + [72]))
	$7 = *($13 + [112])
	CALL send_inline($7, (*($13 + [116]) - $7))
	$7 = *($13 + [112])
	if ( ($7 == 0) ){ goto $label$38 }
	*($13 + [116]) = $7
	CALL $92($7)
	
.LABEL $label$38
	$7 = *($13 + [100])
	if ( ($7 == 0) ){ goto $label$39 }
	*(($13 + [104])) = $7
	CALL $92($7)
	
.LABEL $label$39
	$7 = *($13 + [88])
	if ( ($7 == 0) ){ goto $label$40 }
	*(($13 + [92])) = $7
	CALL $92($7)
	
.LABEL $label$40
	if ( ((*(($13 + [56])) & [1]) == 0) ){ goto $label$41 }
	CALL $92(*(($13 + [64])))
	
.LABEL $label$41
	if ( ((*($13 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL $92(*(($13 + [16])))
	
.LABEL $label$8
	*([0] + [4]) = ($13 + [144])
	return (unreachable)
	
.LABEL $label$7
	CALL $93(($13 + [8]))
}

void .FUNC $101 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $91($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $92($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [10592])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [10576]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [10608]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_32 .FUNC __errno_location ()
{
	return [10560]
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_32 .FUNC $89 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10502]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10504])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10502]) = [1]
	$7 = ($7 << [16])
	*([0] + [10504]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10504])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10504]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10502]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10502]) = [1]
	$3 = ($3 << [16])
	*([0] + [10504]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10504])
	
.LABEL $label$8
	*([0] + [10504]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $89($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10416])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $88([2008], $0)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [176])
	*([0] + [4]) = $3
	*(($3 + [24])) = $0
	*(($3 + [32])) = (int_64)-1
	*(($3 + [40])) = (int_64)0
	*(($3 + [48])) = [0]
	*($3 + [16]) = $0
	*($3 + [8]) = $0
	*($3 + [56]) = $0
	*(($3 + [64])) = $0
	*(($3 + [72])) = (int_64)-1
	*(($3 + [80])) = [0]
	*(($3 + [84])) = [0]
	*(($3 + [88])) = [0]
	*($3 + [96]) = $0
	*(($3 + [104])) = $0
	*(($3 + [112])) = (int_64)-1
	*(($3 + [120])) = [0]
	*(($3 + [124])) = [0]
	*(($3 + [128])) = [0]
	*($3 + [136]) = $0
	*(($3 + [144])) = $0
	*(($3 + [152])) = (int_64)-1
	*(($3 + [160])) = [0]
	*(($3 + [164])) = [0]
	*(($3 + [168])) = [0]
	CALL _ZN11eosworldmap5applyEyy(($3 + [8]), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [528])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $64($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [512])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $85($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $94($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $91($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $94($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $92($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $93($7)
	return (unreachable)
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $84($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [512])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[1]), [512])
	CALL memcpy(($5 + [8]), $3, [2])
	CALL eosio_assert(((int_32)($1 & [-2]) != (int_32)[2]), [512])
	CALL memcpy((($5 + [8]) | [2]), ($3 + [2]), [2])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *($5 + [10])
	$6 = *($5 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 ($6 & [65535])), (int_32 ($3 & [65535])), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [512])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [512])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [512])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [8]), [1])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7)
	$3 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ($4 & [255])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $91(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $92($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $92($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	$2 = CALL _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji($1, [0], [36])
	*($0 + [10]) = (uint_64)$2 >> (uint_64)(int_64)53)
	*($0 + [4]) = uint_32((CASTING uint_32)(uint_64 $2) >> [8])
	$3 = ((int_64)(uint_64)$2 >> (uint_64)(int_64)4) & (int_64)15
	*($0 + [8]) = $3)
	*($0) = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)) & [2097151])
	$4 = [1]
	CALL eosio_assert(((int_32)((CASTING uint_32)(uint_64 $3) | [1]) == (int_32)[1]), [1600])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$2 }
	if ( $1 ){ goto $label$1 }
	CALL eosio_assert((*($0) <= [659323]), [1616])
	goto $label$1 
	
.LABEL $label$2
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 <= (int_32)[4367860]) ){ goto $label$7 }
	if ( ((int_32)$1 <= (int_32)[9489144]) ){ goto $label$6 }
	if ( ((int_32)$1 == (int_32)[9489145]) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[12312315]) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[14938877]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$7
	if ( ((int_32)$1 > (int_32)[1668817]) ){ goto $label$5 }
	if ( ((int_32)$1 == (int_32)[870305]) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[1402304]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[4367861]) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[6600182]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$1 == (int_32)[1668818]) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[2201331]) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = [0]
	
.LABEL $label$3
	CALL eosio_assert($4, [1648])
	CALL eosio_assert((*($0) <= [1414277]), [1680])
	
.LABEL $label$1
	$2 = ((int_64)$2 & (int_64)15)
	*($0 + [9]) = $2
	CALL eosio_assert(((CASTING uint_32)(uint_64 $2) <= [3]), [1712])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [480])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $91([32])
	$6 = CALL $71($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $72(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $92($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [1456])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1520])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [512])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [512])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC _ZN11eosworldmap8withdrawEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$20 = (*([0] + [4]) - [160])
	*([0] + [4]) = $20
	CALL require_auth($1)
	$7 = [0]
	$13 = [0]
	$12 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-8527966002922258432, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$1 }
	$13 = CALL $9(($0 + [8]), $12)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [160])
	$12 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)-6767668200561070080, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $10(($0 + [48]), $12)
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [192])
	$6 = *(($7 + [24]))
	$19 = *(($13 + [72]))
	$2 = *(($13 + [24]))
	$14 = *($7 + [16])
	$3 = *($13 + [64])
	$16 = *($13 + [16])
	$4 = *(($0 + [112]))
	$12 = *(($0 + [116]))
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$3 }
	$13 = ($12 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($13) + [8]) == (int_64)$1) ){ goto $label$3 }
	$12 = $13
	$7 = ($13 + [-24])
	$13 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$5 = ($0 + [88])
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$6 }
	$13 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [64]) == (int_32)$5), [848])
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	$7 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)3607749778735104000, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$13 = CALL $28($5, $7)
	CALL eosio_assert(((int_32)*($13 + [64]) == (int_32)$5), [848])
	
.LABEL $label$5
	$4 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($4, [1888])
	$12 = ($0 + [128])
	$7 = [0]
	$8 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)7389690656689487872, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $39($12, $8)
	
.LABEL $label$7
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [1904])
	$9 = ($13 + [24])
	$15 = *($9)
	$10 = *(($13 + [40]))
	$18 = *($7 + [8])
	$17 = *($13 + [16])
	$11 = *($13 + [32])
	CALL eosio_assert(((int_32)*($13 + [48]) ^ (int_32)[1]), [16])
	$16 = (Rounds 0)(((float_64)CALL __floatuntidf($17, $15) / (float_64)(float_64)1e16))
	$19 = ((int_64)$14 + (int_64)$16)
	$6 = ((int_64)(Rounds 0)(((float_64)((float_64)((float_64)CALL __floatuntidf($3, $19) / (float_64)(float_64)1e16) * (float_64)CALL __floatuntidf($11, $10)) / (float_64)CALL __floatuntidf($19, ((int_64)((int_64)$6 + (int_64)$2) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($19 <= $14)) : (uint_64)($19 <= $16) ))))) + (int_64)$16)
	CALL eosio_assert(((int_64)$6 > (int_64)0), [48])
	CALL eosio_assert(((uint_64)$18 >= (uint_64)$6), [96])
	CALL eosio_assert($8, [624])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$12), [672])
	CALL eosio_assert(((int_64)*($12) == (int_64)CALL $fimport$6()), [720])
	*($7 + [8]) = (int_64))($18 - $6)
	$14 = *($7)
	CALL eosio_assert([1], [784])
	CALL eosio_assert([1], [608])
	CALL memcpy(($20 + [32]), $7, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($20 + [32]) | [8]), ($7 + [8]), [8])
	*($20 + [88]) = *($7 + [16])
	CALL eosio_assert([1], [608])
	CALL memcpy(($20 + [48]), ($20 + [88]), [1])
	CALL db_update_i64(*($7 + [28]), (int_64)0, ($20 + [32]), [17])
	CALL __fixunsdfti($20, ((float_64)(CASTING float_64)(int_64 $16) * (float_64)(float_64)1e16))
	$18 = *(($20 + [8]))
	$7 = ( ((uint_64)$17 > (uint_64)$16) ? ((uint_64)$15 > (uint_64)$18) : ((int_64)$15 == (int_64)$18) )
	$16 = *($20)
	$19 = ( (int_64))($17 - $16) ? (int_64)0 : $7 )
	$15 = ( (int_64))((int_64))($15 - $18) - (CASTING uint_64)(uint_32 (uint_64)($17 <= $16))) ? (int_64)0 : $7 )
	$7 = ($0 + [144])
	if ( (uint_64)($14 <= *($7)) ){ goto $label$8 }
	*($7) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	CALL eosio_assert($4, [624])
	CALL eosio_assert(((int_32)*($13 + [64]) == (int_32)$5), [672])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$6()), [720])
	*($9) = $15
	*($13 + [16]) = $19
	*($13 + [48]) = [1]
	$15 = *($13 + [8])
	CALL eosio_assert([1], [784])
	*($20 + [96]) = (($20 + [32]) + [42])
	*($20 + [92]) = ($20 + [32])
	*($20 + [88]) = ($20 + [32])
	CALL $47(($20 + [88]), $13)
	CALL db_update_i64(*($13 + [68]), (int_64)0, ($20 + [32]), [42])
	$13 = ($0 + [104])
	if ( (uint_64)($15 <= *($13)) ){ goto $label$9 }
	*($13) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1456])
	$15 = (int_64)5459781
	$13 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$7 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$7 = [0]
	
.LABEL $label$10
	CALL eosio_assert($7, [1520])
	$2 = *($0)
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [1424]
	$16 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$20 }
	$7 = *($13)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$7 = ($7 + [165])
	goto $label$18 
	
.LABEL $label$20
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$16
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$15 }
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [1936]
	$18 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$15 > (uint_64)(int_64)10) ){ goto $label$26 }
	$7 = *($13)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$7 = ($7 + [165])
	goto $label$24 
	
.LABEL $label$26
	$17 = (int_64)0
	if ( ((int_64)$15 == (int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$22
	$13 = ($13 + [1])
	$14 = ((int_64)$14 + (int_64)-5)
	$18 = ((int_64)$17 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)1)
	if ( ((int_64)$15 != (int_64)13) ){ goto $label$21 }
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [1440]
	$19 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$15 > (uint_64)(int_64)7) ){ goto $label$32 }
	$7 = *($13)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$7 = ($7 + [165])
	goto $label$30 
	
.LABEL $label$32
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$28
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$19 = ((int_64)$17 | (int_64)$19)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$27 }
	*(($20 + [24])) = [0]
	*($20 + [16]) = (int_64)0
	$13 = CALL strlen([1952])
	if ( ((uint_32)$13 >= (uint_32)[-16]) ){ goto $label$33 }
	if ( ((uint_32)$13 >= (uint_32)[11]) ){ goto $label$36 }
	*($20 + [16]) = ($13 << [1])
	$7 = (($20 + [16]) | [1])
	if ( $13 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$12 = (($13 + [16]) & [-16])
	$7 = CALL $91($12)
	*($20 + [16]) = ($12 | [1])
	*($20 + [24]) = $7
	*($20 + [20]) = $13
	
.LABEL $label$35
	CALL memcpy($7, [1952], $13)
	
.LABEL $label$34
	*(($7 + $13)) = [0]
	*((($20 + [32]) + [24])) = (int_64)1397703940
	*(($7 = (($20 + [32]) + [36]))) = *($20 + [20])
	*($20 + [40]) = $1
	$13 = ($20 + [24])
	*(($20 + [72])) = *($13)
	*($20 + [32]) = *($0)
	*($20 + [48]) = $6
	*($20 + [64]) = *($20 + [16])
	*($20 + [16]) = [0]
	*($20 + [20]) = [0]
	*($13) = [0]
	*($20 + [88]) = $18
	*($20 + [96]) = $19
	*(($13 = CALL $91([16]))) = $2
	*($13 + [8]) = $16
	*((($20 + [88]) + [32])) = [0]
	$0 = ($13 + [16])
	*((($20 + [88]) + [24])) = $0
	*(($20 + [108])) = $0
	*($20 + [104]) = $13
	*($20 + [116]) = [0]
	*((($20 + [88]) + [36])) = [0]
	$13 = *($20 + [64])
	$7 = ( *($7) ? uint_32($13 >> [1]) : ($13 & [1]) )
	$13 = ($7 + [32])
	$15 = (CASTING uint_64)(uint_32 $7)
	$7 = ($20 + [116])
	
.LOOP $label$37:
	$13 = ($13 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$37 }
	if ( ($13 == 0) ){ goto $label$39 }
	CALL $64($7, $13)
	$7 = *(($20 + [120]))
	$13 = *(($20 + [116]))
	goto $label$38 
	
.LABEL $label$39
	$7 = [0]
	$13 = [0]
	
.LABEL $label$38
	*($20 + [132]) = $13
	*($20 + [128]) = $13
	*($20 + [136]) = $7
	*($20 + [144]) = ($20 + [128])
	*($20 + [152]) = ($20 + [32])
	CALL $65(($20 + [152]), ($20 + [144]))
	CALL $66(($20 + [128]), ($20 + [88]))
	$13 = *($20 + [128])
	CALL send_inline($13, (*($20 + [132]) - $13))
	$13 = *($20 + [128])
	if ( ($13 == 0) ){ goto $label$40 }
	*($20 + [132]) = $13
	CALL $92($13)
	
.LABEL $label$40
	$13 = *($20 + [116])
	if ( ($13 == 0) ){ goto $label$41 }
	*(($20 + [120])) = $13
	CALL $92($13)
	
.LABEL $label$41
	$13 = *($20 + [104])
	if ( ($13 == 0) ){ goto $label$42 }
	*(($20 + [108])) = $13
	CALL $92($13)
	
.LABEL $label$42
	if ( ((*(($20 + [64])) & [1]) == 0) ){ goto $label$43 }
	CALL $92(*(($20 + [72])))
	
.LABEL $label$43
	if ( ((*($20 + [16]) & [1]) == 0) ){ goto $label$44 }
	CALL $92(*(($20 + [24])))
	
.LABEL $label$44
	*([0] + [4]) = ($20 + [160])
	return (unreachable)
	
.LABEL $label$33
	CALL $93(($20 + [16]))
}

void .FUNC _ZN11eosworldmap5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [192])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1936]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$8 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1440]
	$7 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$14 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$10
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $78(($9 + [144]))
	CALL eosio_assert(((int_64)*(($9 + [168])) == (int_64)1397703940), [1984])
	CALL _ZN11eosworldmap10onTransferERKN5eosio8currency8transferE($0, ($9 + [144]))
	if ( ((*($9 + [176]) & [1]) == 0) ){ goto $label$7 }
	CALL $92(*(($9 + [184])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 <= (int_64)4923678631115993087) ){ goto $label$22 }
	if ( ((int_64)$2 <= (int_64)4923678858908299263) ){ goto $label$21 }
	if ( ((int_64)$2 == (int_64)4923678858908299264) ){ goto $label$19 }
	if ( ((int_64)$2 == (int_64)5031766155850039296) ){ goto $label$18 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$7 }
	*($9 + [140]) = [0]
	*($9 + [136]) = [1]
	*($9) = *($9 + [136])
	CALL $79($0, $9)
	goto $label$7 
	
.LABEL $label$22
	if ( ((int_64)$2 > (int_64)-2039333636196532225) ){ goto $label$20 }
	if ( ((int_64)$2 == (int_64)-6217917047871235584) ){ goto $label$17 }
	if ( ((int_64)$2 != (int_64)-4994301928733573120) ){ goto $label$7 }
	*($9 + [76]) = [0]
	*($9 + [72]) = [2]
	*($9 + [64 align=4]) = *($9 + [72])
	CALL $79($0, ($9 + [64]))
	goto $label$7 
	
.LABEL $label$21
	if ( ((int_64)$2 == (int_64)4923678631115993088) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)4923678710352723968) ){ goto $label$7 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [3]
	*($9 + [48 align=4]) = *($9 + [88])
	CALL $79($0, ($9 + [48]))
	goto $label$7 
	
.LABEL $label$20
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)4923678597644681216) ){ goto $label$7 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [4]
	*($9 + [32 align=4]) = *($9 + [104])
	CALL $82($0, ($9 + [32]))
	goto $label$7 
	
.LABEL $label$19
	*($9 + [116]) = [0]
	*($9 + [112]) = [5]
	*($9 + [24 align=4]) = *($9 + [112])
	CALL $82($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$18
	*($9 + [132]) = [0]
	*($9 + [128]) = [6]
	*($9 + [8 align=4]) = *($9 + [128])
	CALL $80($0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$17
	*($9 + [84]) = [0]
	*($9 + [80]) = [7]
	*($9 + [56 align=4]) = *($9 + [80])
	CALL $79($0, ($9 + [56]))
	goto $label$7 
	
.LABEL $label$16
	*($9 + [100]) = [0]
	*($9 + [96]) = [8]
	*($9 + [40 align=4]) = *($9 + [96])
	CALL $82($0, ($9 + [40]))
	goto $label$7 
	
.LABEL $label$15
	*($9 + [124]) = [0]
	*($9 + [120]) = [9]
	*($9 + [16 align=4]) = *($9 + [120])
	CALL $81($0, ($9 + [16]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [192])
}

void .FUNC _ZN11eosworldmap10createacctEyh (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	CALL require_auth($1)
	CALL eosio_assert(($2 <= [3]), [1728])
	$3 = *(($0 + [112]))
	$8 = *(($0 + [116]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7) + [8]) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [88])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$5), [848])
	$8 = ($0 + [96])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = ($0 + [96])
	$4 = CALL db_find_i64(*(($0 + [88])), *($8), (int_64)3607749778735104000, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $28($5, $4)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$5), [848])
	
.LABEL $label$3
	CALL eosio_assert(($7 == 0), [1760])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$6()), [544])
	*(($7 = CALL $91([80])) + [64]) = $5
	*($7) = $2
	*($7 + [8]) = $1
	*($9 + [72]) = (($9 + [16]) + [42])
	*($9 + [68]) = ($9 + [16])
	*($9 + [64]) = ($9 + [16])
	CALL $47(($9 + [64]), $7)
	$6 = *($7 + [8])
	$8 = CALL db_store_i64(*($8), (int_64)3607749778735104000, $1, $6, ($9 + [16]), [42])
	*($7 + [68]) = $8
	$5 = ($0 + [104])
	if ( (uint_64)($6 <= *($5)) ){ goto $label$5 }
	*($5) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($9 + [64]) = $7
	$1 = *(($7 + [8]))
	*($9 + [16]) = $1
	*($9 + [12]) = $8
	$4 = ($0 + [116])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [120]))) ){ goto $label$7 }
	*($5 + [8]) = $1
	*($5 + [16]) = $8
	*($9 + [64]) = [0]
	*($5) = $7
	*($4) = ($5 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $31(($0 + [112]), ($9 + [64]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$6
	$7 = *($9 + [64])
	*($9 + [64]) = [0]
	if ( ($7 == 0) ){ goto $label$8 }
	CALL $92($7)
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [80])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [480])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $91([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [512])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [512])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [512])
	CALL memcpy(($8 + [16]), ($7 + [16]), [1])
	*($6 + [16]) = ((int_32)*($8 + [16]) != (int_32)[0])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $38(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $92($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [304])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [352])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [416])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $92($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $92($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [116]))
}

void .FUNC _ZN11eosworldmap10clearguardEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	$1 = ($0 + [128])
	$2 = ($0 + [136])
	$4 = CALL db_lowerbound_i64(*($0 + [128]), *($2), (int_64)7389690656689487872, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$4 = CALL $39($1, $4)
	CALL eosio_assert([1], [624])
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [672])
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [720])
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = [0]
	$6 = *($4)
	*($4) = (int_64)0
	CALL eosio_assert((int_64)($6 == 0), [784])
	CALL eosio_assert([1], [608])
	CALL memcpy($9, $4, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy(($9 | [8]), ($4 + [8]), [8])
	*($9 + [24]) = *($4 + [16])
	CALL eosio_assert([1], [608])
	CALL memcpy(($9 + [16]), ($9 + [24]), [1])
	CALL db_update_i64(*($4 + [28]), (int_64)0, $9, [17])
	$4 = ($0 + [144])
	if ( (uint_64)($6 <= *($4)) ){ goto $label$5 }
	*($4) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0)
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [544])
	*(($4 = CALL $91([40])) + [24]) = $1
	*($4 + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = [0]
	CALL eosio_assert([1], [608])
	CALL memcpy($9, $4, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy(($9 | [8]), ($4 + [8]), [8])
	*($9 + [24]) = *($4 + [16])
	CALL eosio_assert([1], [608])
	CALL memcpy(($9 + [16]), ($9 + [24]), [1])
	$6 = *($4)
	$2 = CALL db_store_i64(*($2), (int_64)7389690656689487872, $5, $6, $9, [17])
	*($4 + [28]) = $2
	$1 = ($0 + [144])
	if ( (uint_64)($6 <= *($1)) ){ goto $label$7 }
	*($1) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($9 + [24]) = $4
	$6 = *($4)
	*($9) = $6
	*($9 + [20]) = $2
	$3 = ($0 + [156])
	$1 = *($3)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [160]))) ){ goto $label$9 }
	*($1 + [8]) = $6
	*($1 + [16]) = $2
	*($9 + [24]) = [0]
	*($1) = $4
	*($3) = ($1 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $38(($0 + [152]), ($9 + [24]), $9, ($9 + [20]))
	
.LABEL $label$8
	$4 = *($9 + [24])
	*($9 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL $92($4)
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $78 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [1456])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [1520])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $83($6, $0)
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN11eosworldmap11clearcanvasEtt (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	CALL $33(($0 + [8]), $1)
	CALL $34(($0 + [48]), $1)
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$4 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-8527966002922258432, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $9($0, $4)
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [0]
	
.LOOP $label$2:
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [224])
	CALL eosio_assert($5, [272])
	$5 = [0]
	$2 = CALL db_next_i64(*($4 + [116]), ($6 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $9($0, $2)
	
.LABEL $label$3
	CALL $36($0, $4)
	if ( ($5 == 0) ){ goto $label$1 }
	$4 = $5
	$3 = ($3 + [1])
	if ( (($3 & [65535]) <= $1) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [512])
	CALL memcpy($1, *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [512])
	CALL memcpy(($1 + [16]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [512])
	CALL memcpy(($1 + [32]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [512])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [48]) = ((int_32)*($3 + [15]) != (int_32)[0])
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $91(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $92($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $92($6)
	
.LABEL $label$11
	(unreachable)
}