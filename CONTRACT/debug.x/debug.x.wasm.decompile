(data (i32.const 8192) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 8448) "carry == 0\00Assertion failed: %s (%s: %s: %d)\n\00-+   0X0x\00")
(data (i32.const 8504) "base58.hpp\00-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 8534) "DecodeBase58\00")
(data (i32.const 8547) "unexpected asset symbol input\00inf\00")
(data (i32.const 8581) "invalid sell\00INF\00")
(data (i32.const 8598) "invalid conversion\00nan\00")
(data (i32.const 8621) "eosio.token\00NAN\00")
(data (i32.const 8637) "magnitude of asset amount must be less than 2^62\00.\00")
(data (i32.const 8688) "invalid symbol name\00")
(data (i32.const 8708) "ha2domrygege\00")
(data (i32.const 8721) "staked.x\00")
(data (i32.const 8730) "[Eos21.com]Debug Mode. / \e8\b0\83\e8\af\95\e6\a8\a1\e5\bc\8f...\e7\a6\81\e6\ad\a2\e5\85\ac\e5\bc\80\e6\b3\a8\e5\86\8c...\00")
(data (i32.const 8792) "EOS\00")
(data (i32.const 8796) "[Eos21.com]Must be CORE_SYMBOL \e8\bd\ac\e5\85\a5\e5\bf\85\e9\a1\bb\e6\98\afEOS\00")
(data (i32.const 8846) "[Eos21.com]Invalid token transfer \e8\bd\ac\e8\b4\a6\e9\aa\8c\e8\af\81\e5\a4\b1\e8\b4\a5\00")
(data (i32.const 8899) "[Eos21.com]Quantity must be positive \e8\bd\ac\e5\85\a5\e9\87\91\e9\a2\9d\e4\b8\8d\e6\ad\a3\e7\a1\ae\00")
(data (i32.const 8958) "Account name and public key must be separated with space or minuses \e8\b4\a6\e5\8f\b7\e5\90\8d\e5\92\8c\e5\85\ac\e9\92\a5\e5\bf\85\e9\a1\bb\e4\bd\bf\e7\94\a8\e7\a9\ba\e6\a0\bc\e6\88\96\e8\80\85-\e5\88\86\e5\89\b2\00")
(data (i32.const 9076) "eosio.\00")
(data (i32.const 9083) "[Eos21.com]only privileged accounts can have names that start with \'eosio.\'\00")
(data (i32.const 9159) "[Eos21.com]Length of account name should be less than 12.  \e8\b4\a6\e5\8f\b7\e5\90\8d\e5\bf\85\e9\a1\bb\e5\b0\8f\e4\ba\8e12\e4\bd\8d\00")
(data (i32.const 9245) "[Eos21.com]Length of publik key should be 53. \e5\85\ac\e9\92\a5\e9\95\bf\e5\ba\a6\e5\bf\85\e9\a1\bb\e4\bd\8d53\e4\bd\8d\00")
(data (i32.const 9318) "suffix: \00")
(data (i32.const 9327) "\n\00")
(data (i32.const 9329) "subAccount: \00")
(data (i32.const 9342) "[Eos21.com]suffix Account does not exist, Open https://Eos21.com Register the .x .y .z account./\e5\90\8e\e7\bc\80\e4\b8\8d\e5\ad\98\e5\9c\a8,\e8\af\b7\e7\99\bb\e9\99\86 https://Eos21.com \e6\b3\a8\e5\86\8c .x .y .z \e8\b6\85\e7\ba\a7\e8\b4\a6\e5\8f\b7\00")
(data (i32.const 9511) "[Eos21.com]suffix Account Error, Open https://Eos21.com Register the .x .y .z account./\e5\90\8e\e7\bc\80\e9\94\99\e8\af\af,\e8\af\b7\e7\99\bb\e9\99\86 https://Eos21.com \e6\b3\a8\e5\86\8c .x .y .z \e8\b6\85\e7\ba\a7\e8\b4\a6\e5\8f\b7\00")
(data (i32.const 9668) "[Eos21.com]Current suffix account is forbidden to register, Open https://Eos21.com Register the .x .y .z account./\e5\bd\93\e5\89\8d\e5\90\8e\e7\bc\80\e8\b4\a6\e5\8f\b7\e7\a6\81\e6\ad\a2\e6\b3\a8\e5\86\8c,\e8\af\b7\e7\99\bb\e9\99\86 https://Eos21.com \e6\b3\a8\e5\86\8c .x .y .z \e8\b6\85\e7\ba\a7\e8\b4\a6\e5\8f\b7\00")
(data (i32.const 9870) "[Eos21.com]The third-level account cannot contain \".\", Open https://Eos21.com Register the .x .y .z account./\e4\b8\89\e7\ba\a7\e8\b4\a6\e5\8f\b7\e5\90\8d\e4\b8\ad\e4\b8\8d\e8\83\bd\e5\8c\85\e5\90\ab\e2\80\9d.\e2\80\9c,\e8\af\b7\e7\99\bb\e9\99\86 https://Eos21.com \e6\b3\a8\e5\86\8c .x .y .z \e8\b6\85\e7\ba\a7\e8\b4\a6\e5\8f\b7\00")
(data (i32.const 10074) "subsuffixstr: \00")
(data (i32.const 10089) "sub3AccountStr: \00")
(data (i32.const 10106) "[Eos21.com]Current suffix prohibits registration of sub-accounts. / \e5\bd\93\e5\89\8d\e5\90\8e\e7\bc\80\e7\a6\81\e6\ad\a2\e6\b3\a8\e5\86\8c\e5\ad\90\e8\b4\a6\e5\8f\b7.\00")
(data (i32.const 10209) "[Eos21.com]Register Name Error, Must be a-z, 1-5, \".\" \e7\94\a8\e6\88\b7\e5\90\8d\e9\94\99\e8\af\af, \e5\ad\97\e7\ac\a6\e5\bf\85\e9\a1\bb\e6\98\af a-z, 1-5, \".\"\00")
(data (i32.const 10310) "[Eos21.com]Register Name Error, Must be a-z, 1-5. \e7\94\a8\e6\88\b7\e5\90\8d\e9\94\99\e8\af\af, \e5\ad\97\e7\ac\a6\e5\bf\85\e9\a1\bb\e6\98\af a-z, 1-5.\00")
(data (i32.const 10403) ".\00")
(data (i32.const 10405) "[Eos21.com]You do not have permission to create a sub suffix account / \e6\82\a8\e6\b2\a1\e6\9c\89\e6\9d\83\e9\99\90\e5\88\9b\e5\bb\ba\e5\90\8e\e7\bc\80\e5\ad\90\e8\b4\a6\e5\8f\b7.\00")
(data (i32.const 10514) "[Eos21.com]Register Name length must be more than limit. \e6\b3\a8\e5\86\8c\e7\9a\84\e8\b4\a6\e5\8f\b7\e9\95\bf\e5\ba\a6\e5\b0\8f\e4\ba\8e\e7\b3\bb\e7\bb\9f\e5\85\81\e8\ae\b8\e6\b3\a8\e5\86\8c\e9\95\bf\e5\ba\a6\ef\bc\81\00")
(data (i32.const 10626) "[Eos21.com]Register Name Error, Must be a-z, 1-5. \e7\94\a8\e6\88\b7\e5\90\8d\e9\94\99\e8\af\af, \e5\ad\97\e7\ac\a6\e5\bf\85\e9\a1\bb\e6\98\af a-z, 1-5\00")
(data (i32.const 10718) "[Eos21.com]Name price configuration error / \e5\90\8d\e5\ad\97\e4\bb\b7\e6\a0\bc\e9\85\8d\e7\bd\ae\e9\94\99\e8\af\af\00")
(data (i32.const 10787) "[Eos21.com]The account name already exists. Please change your name to register. \e8\b4\a6\e5\8f\b7\e5\90\8d\e5\b7\b2\e7\bb\8f\e5\ad\98\e5\9c\a8\ef\bc\8c\e8\af\b7\e6\9b\b4\e6\8d\a2\e4\b8\80\e4\b8\aa\e5\90\8d\e5\ad\97\e6\b3\a8\e5\86\8c\00")
(data (i32.const 10920) "[Eos21.com]Agent Account Error, Open https://Eos21.com Register the .x account./\e4\bb\a3\e7\90\86\e7\bc\96\e5\8f\b7\e9\94\99\e8\af\af,\e8\af\b7\e7\99\bb\e9\99\86 https://Eos21.com \e6\b3\a8\e5\86\8c .x \e8\b6\85\e7\ba\a7\e8\b4\a6\e5\8f\b7\00")
(data (i32.const 11070) "[Eos21.com]Agent information Error, Open https://Eos21.com Register the .x account . \e4\bb\a3\e7\90\86\e4\bf\a1\e6\81\af\e9\94\99\e8\af\af,\e8\af\b7\e7\99\bb\e9\99\86 https://Eos21.com \e6\b3\a8\e5\86\8c .x \e8\b6\85\e7\ba\a7\e8\b4\a6\e5\8f\b7\00")
(data (i32.const 11225) "[Eos21.com]public key should be prefix with EOS. \e5\85\ac\e9\92\a5\e6\a3\80\e6\9f\a5\e5\a4\b1\e8\b4\a5 \00")
(data (i32.const 11294) "[Eos21.com]Decode owner pubkey failed. \e5\85\ac\e9\92\a5\e6\a3\80\e6\9f\a5\e5\a4\b1\e8\b4\a5 \00")
(data (i32.const 11353) "[Eos21.com]Invalid public key. \e5\85\ac\e9\92\a5\e6\a3\80\e6\9f\a5\e5\a4\b1\e8\b4\a5 \00")
(data (i32.const 11404) "[Eos21.com]invalid owner public key \e5\85\ac\e9\92\a5\e6\a3\80\e6\9f\a5\e5\a4\b1\e8\b4\a5 \00")
(data (i32.const 11460) "[Eos21.com]Register Fee not enough. \e6\b3\a8\e5\86\8c\e9\9c\80\e8\a6\81\e8\b4\b9\e7\94\a8\e4\b8\8d\e5\a4\9f\ef\bc\8c\e8\af\a6\e6\83\85\e8\af\b7\e8\ae\bf\e9\97\ae Eos21.com\00")
(data (i32.const 11549) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 11600) "error reading iterator\00")
(data (i32.const 11623) "read\00")
(data (i32.const 11628) "get\00")
(data (i32.const 11632) "cannot pass end iterator to modify\00")
(data (i32.const 11667) "object passed to modify is not in multi_index\00")
(data (i32.const 11713) "cannot modify objects in table of another contract\00")
(data (i32.const 11764) "updater cannot change primary key when modifying an object\00")
(data (i32.const 11823) "write\00")
(data (i32.const 11829) "RAMCORE market not found\00")
(data (i32.const 11854) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 11913) "attempt to add asset with different symbol\00")
(data (i32.const 11956) "addition underflow\00")
(data (i32.const 11975) "addition overflow\00")
(data (i32.const 11993) "multiplication overflow\00")
(data (i32.const 12017) "multiplication underflow\00")
(data (i32.const 12042) "\e4\bb\a3\e7\90\86\e8\b4\a6\e5\8f\b7\e5\9c\a8\e4\b8\bb\e7\bd\91\e4\b8\ad\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 12076) "\e4\bb\a3\e7\90\86\e8\b4\a6\e5\8f\b7\e5\b7\b2\e7\bb\8f\e5\ad\98\e5\9c\a8\00")
(data (i32.const 12101) "manager.x\00")
(data (i32.const 12111) "\e9\9d\9e\e6\b3\95\e8\b0\83\e7\94\a8\00")
(data (i32.const 12124) "cannot create objects in table of another contract\00")
(data (i32.const 12175) "\e4\bb\a3\e7\90\86\e8\b4\a6\e5\8f\b7\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 12197) "cannot pass end iterator to erase\00")
(data (i32.const 12231) "cannot increment end iterator\00")
(data (i32.const 12261) "object passed to erase is not in multi_index\00")
(data (i32.const 12306) "cannot erase objects in table of another contract\00")
(data (i32.const 12356) "attempt to remove object that was not in multi_index\00")
(data (i32.const 12409) "\e4\bb\b7\e6\a0\bc\e5\b7\b2\e7\bb\8f\e5\ad\98\e5\9c\a8\00")
(data (i32.const 12428) "\e4\bb\b7\e6\a0\bc\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 12444) "Add\00")
(data (i32.const 12448) "Edit: \00")
(data (i32.const 12455) "\e5\90\8e\e7\bc\80\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 12471) "transfer\00")
(data (i32.const 12480) "[\e6\b3\a8\e5\86\8c\e4\b8\8a\e7\9f\ad\e8\b4\a6\e6\88\b7 Eos21.com - Register Short Account from Eos21.com]-Account: \00")
(data (i32.const 12561) " agent fee\00")
(data (i32.const 12572) "eos21.com\00")
(data (i32.const 12582) "newaccount\00")
(data (i32.const 12593) "delegatebw\00")
(data (i32.const 12604) "[\e6\b3\a8\e5\86\8c\e4\b8\8a\e7\9f\ad\e8\b4\a6\e6\88\b7 Eos21.com - Register Short Account from Eos21.com]-registered change\00")
(data (i32.const 12693) "divide by zero\00")
(data (i32.const 12708) "signed division overflow\00")
(data (i32.const 12736) "X2\00\00\00\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\03\00\00\00(4\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 12888) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 12921) "attempt to subtract asset with different symbol\00")
(data (i32.const 12969) "subtraction underflow\00")
(data (i32.const 12991) "subtraction overflow\00")
(data (i32.const 13012) "xstakefree\00")
(data (i32.const 13023) "[Eos21.com]Your account:\00")
(data (i32.const 13048) " Created, We have staked [\00")
(data (i32.const 13075) "] 10EOS free 24hours / \e8\b4\a6\e5\8f\b7\e5\88\9b\e5\bb\ba\e6\88\90\e5\8a\9f\ef\bc\8c\e6\88\91\e4\bb\ac\e5\b7\b2\e7\bb\8f\e4\b8\ba\e6\82\a8\e8\b4\a8\e6\8a\bc10EOS \e8\b5\84\e6\ba\90\ef\bc\8c\e6\97\b6\e9\99\9024\e5\b0\8f\e6\97\b6\00")
(data (i32.const 13173) " Created, We have staked for this account 1 year / \e8\b4\a6\e5\8f\b7\e5\88\9b\e5\bb\ba\e6\88\90\e5\8a\9f\ef\bc\8c\e6\b3\a8\e5\86\8c\e8\b4\b9\e5\b7\b2\e7\bb\8f\e4\b8\ba\e6\82\a8\e5\85\8d\e8\b4\b9\e8\b4\a8\e6\8a\bcCPU&NET\e8\b5\84\e6\ba\90\ef\bc\8c\e6\97\b6\e9\99\90\e4\b8\ba\e4\b8\80\e5\b9\b4\e3\80\82\00")
(data (i32.const 21760) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 21776) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 21792) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 21808) "\c81\00\00")
(data (i32.const 21824) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 21920) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 23724) "(null)\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 23824) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 24288) "0123456789ABCDEF")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$3 (param i32)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "require_recipient" (func $fimport$5 (param i64)))
(import "env" "action_data_size" (func $fimport$6 (result i32)))
(import "env" "read_action_data" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "prints" (func $fimport$8 (param i32)))
(import "env" "prints_l" (func $fimport$9 (param i32 i32)))
(import "env" "is_account" (func $fimport$10 (param i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "memmove" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$13 (param i32 i32 i32)))
(import "env" "__multi3" (func $fimport$14 (param i32 i64 i64 i64 i64)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "send_deferred" (func $fimport$16 (param i32 i64 i32 i32 i32)))
(import "env" "db_next_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "printn" (func $fimport$18 (param i64)))
(import "env" "send_inline" (func $fimport$19 (param i32 i32)))
(import "env" "db_get_i64" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$21 (result i64)))
(import "env" "db_update_i64" (func $fimport$22 (param i32 i64 i32 i32)))
(import "env" "require_auth2" (func $fimport$23 (param i64 i64)))
(import "env" "db_store_i64" (func $fimport$24 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$25 (param i32)))
(import "env" "abort" (func $fimport$26))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $6))
(export "_Znwj" (func $101))
(export "_ZdlPv" (func $103))
(export "_Znaj" (func $102))
(export "_ZdaPv" (func $104))
(table $0 4 4 anyfunc)
(elem (i32.const 1) $128 $129 $130)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 24304))
(global $global$2 i32 (i32.const 24304))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [11823])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[3]), [11823])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $7, [4])
	$4 = (*($6) + [4])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[1]), [11823])
	CALL memcpy(*($6), ($7 + [4]), [2])
	$4 = (*($6) + [2])
	*($6) = $4
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [11823])
	CALL memcpy(*($3 + [4]), $2, [1])
	$4 = (*($3 + [4]) + [1])
	*($3 + [4]) = $4
	$5 = ($3 + [8])
	$3 = ($3 + [4])
	$6 = [1]
	
.LOOP $label$1:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [11823])
	CALL memcpy(*($3), ($2 + $6), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[34]) ){ goto $label$1 }
	$6 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [11823])
	CALL memcpy(*($3 + [4]), $6, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [11823])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [11823])
	CALL memcpy(*($0 + [4]), ($1 + [9]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [11823])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [11823])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [32])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [11823])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [11823])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [11823])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $81(*($1), ($0 + [32]))
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[36]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [31]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [11823])
	CALL memcpy(*($6), ($2 + [31]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$4 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	*($2 + [8]) = $0
	*($2 + [16]) = $6
	*($2 + [20]) = ($6 + [34])
	CALL $99(($2 + [16]), ($2 + [8]))
	$6 = ($6 + [36])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [11823])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [11823])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [11823])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[1]), [11823])
	CALL memcpy(*($6), ($7 + [16]), [2])
	$4 = (*($6) + [2])
	*($6) = $4
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [11823])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [11823])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [11823])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1 + [8]) = *(*($4))
	*($1) = *(*($4 + [4]))
	*($1 + [16]) = *(*($4 + [8]))
	$5 = *($0)
	CALL $108(($1 + [32]), *($4 + [12]))
	*($1 + [24]) = (int_64)0
	*($1 + [48]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$4 = *($1 + [32])
	$6 = ( *(($1 + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [33])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $150($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL $80($3, $1)
	$7 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($5 + [8]), (int_64)3680915223743201280, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $153($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(($5 = ($1 + [16]))) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [11823])
	CALL memcpy($2, $1, [1])
	CALL eosio_assert([1], [11823])
	CALL memcpy(($2 | [1]), ($1 + [8]), [8])
	CALL eosio_assert([1], [11823])
	CALL memcpy(($2 | [9]), $5, [8])
	CALL eosio_assert([1], [11823])
	CALL memcpy(($2 + [17]), ($1 + [24]), [8])
	$6 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-5918709142380707840, *(*($0 + [8])), $6, $2, [25])
	if ( ((uint_64)*($4 + [16]) > (uint_64)$6) ){ goto $label$1 }
	*(($4 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*(($4 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [8637])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8688])
	*($0 + [48]) = $1
	$4 = *($2 + [4])
	*($0) = *(*($4))
	*($0 + [8]) = *(*($4 + [4]))
	*($0 + [9]) = *(*($4 + [8]))
	$7 = *($2)
	$8 = *($4 + [12])
	*(($0 + [24])) = *(($8 + [8]))
	*($0 + [16]) = *($8)
	*($0 + [32]) = *(*($4 + [16]))
	*($0 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [56]) = ($3 + [35])
	*($3 + [52]) = $3
	*($3 + [48]) = $3
	CALL $94(($3 + [48]), $0)
	$5 = *($0)
	*($0 + [52]) = CALL db_store_i64(*($7 + [8]), (int_64)-4136917485322742784, *(*($2 + [8])), $5, $3, [35])
	if ( (uint_64)($5 <= *($7 + [16])) ){ goto $label$6 }
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($3 + [64])
	return $0
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	return CALL $137($0, $1)
}

void .FUNC $123 (int_32 $0)
{
}

int_32 .FUNC $115 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $122 (int_32 $0)
{
	int_32 $1
	return $1
}

int_64 .FUNC $130 (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

int_32 .FUNC $131 (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *($2 + [20])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	if ( CALL $131($2) ){ goto $label$2 }
	$4 = *($2 + [20])
	if ( ((*(($2 + [16])) - $4) <= $1) ){ goto $label$1 }
	
.LABEL $label$3
	$6 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$5 }
	$6 = [0]
	$5 = $0
	$3 = [0]
	
.LOOP $label$6:
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$5 }
	$3 = ($3 + [1])
	$7 = ($5 + $1)
	$8 = ($5 + [-1])
	$5 = $8
	if ( ((int_32)*(($7 + [-1])) != (int_32)[10]) ){ goto $label$6 }
	$6 = (($1 - $3) + [1])
	$5 = CALL int_32 $2((int_32 $0), (int_32 $6), (int_32 *($2 + [36])))
	if ( ($5 <= $6) ){ goto $label$2 }
	$0 = (($8 + $1) + [1])
	$4 = *(($2 + [20]))
	$1 = ($3 + [-1])
	
.LABEL $label$5
	CALL memcpy($4, $0, $1)
	*(($3 = ($2 + [20]))) = (*($3) + $1)
	$5 = ($6 + $1)
	
.LABEL $label$2
	return $5
	return .LABEL $label$1
}

int_32 .FUNC $133 (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC $134 (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [2] ? [3] : (int_64)(((int_64)$2 | (int_64)$0) == 0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_64 .FUNC $121 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL $135($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	return $0
}

int_64 .FUNC $120 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $81(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [11823])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [11823])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [11823])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [11823])
	CALL memcpy(*($0 + [4]), $4, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $126 ()
{
	CALL $148([13332])
	return [13340]
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [11623])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($3, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [11623])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [12261])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [12306])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [12356])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

int_32 .FUNC $125 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $141($0, $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [11623])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $71(*($1), *($0 + [16]))
}

int_32 .FUNC $42 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $85($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $37($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $86($2, $1)
	CALL $88(CALL $87(CALL $87($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = ($2 + ((int_32)$5 * (int_32)[40]))
	$7 = ($2 + ((int_32)$3 * (int_32)[40]))
	$2 = CALL $39($7, $1)
	$8 = ($2 + [40])
	$5 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$6 }
	$10 = ($5 - $9)
	$1 = [0]
	
.LOOP $label$7:
	$2 = ($9 + $1)
	*((($5 = ($7 + $1)) + [-32])) = *(($2 + [-32]))
	*(($5 + [-40])) = *(($2 + [-40]))
	*(($3 = ($5 + [-24]))) = (int_64)0
	*(($4 = ($5 + [-16]))) = [0]
	$11 = ($2 + [-24])
	*($3) = *($11)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($5 + [-12]))) = (int_64)0
	*(($5 = ($5 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($11) = (int_64)0
	$2 = ($2 + [-4])
	*($5) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$7 }
	$2 = ($7 + $1)
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($5 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($5 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($5 + [-40])
	$1 = *(($5 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [11667])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [11713])
	*($1 + [8]) = *(*($3))
	$6 = *($1)
	*($1) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	CALL $108(($1 + [32]), *($3 + [12]))
	*($1 + [48]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [11764])
	$3 = *($1 + [32])
	$7 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [33])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $150($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $80($5, $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $153($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [11623])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $71(*($1), *($0 + [16]))
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert1()), [12124])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [40]) = [0]
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [56]) = $1
	CALL $91(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $78(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $44 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$2 = (int_64)6
	
.LOOP $label$1:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$1 }
	CALL require_auth2($1, (int_64)3617214756542218240)
	$3 = [0]
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$2 }
	$2 = (int_64)6
	
.LOOP $label$3:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$3 }
	CALL require_auth2($1, (int_64)3617214756542218240)
	$3 = [1]
	
.LABEL $label$2
	$2 = (int_64)0
	$4 = (int_64)59
	$0 = [12101]
	$5 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$2 > (uint_64)(int_64)8) ){ goto $label$9 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$6 = ($6 + [-91])
	goto $label$7 
	
.LABEL $label$9
	$7 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$5
	$0 = ($0 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$7 | (int_64)$5)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$4 }
	if ( ((int_64)$5 != (int_64)$1) ){ goto $label$10 }
	$2 = (int_64)0
	$4 = (int_64)59
	$0 = [12101]
	$5 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$2 > (uint_64)(int_64)8) ){ goto $label$16 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$6 = ($6 + [-91])
	goto $label$14 
	
.LABEL $label$16
	$7 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$12
	$0 = ($0 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$7 | (int_64)$5)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$11 }
	$2 = (int_64)6
	
.LOOP $label$17:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$17 }
	CALL require_auth2($5, (int_64)3617214756542218240)
	return 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$18 }
	return 
	
.LABEL $label$18
	CALL eosio_assert([0], [12111])
}

int_32 .FUNC $124 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL $122($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$3 = *($0 + [8])
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	if ( (*([0] + [13328]) == 0) ){ goto $label$8 }
	$4 = CALL $124(*([0] + [13328]))
	
.LABEL $label$8
	$0 = *(CALL $126())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL $122($0)
	
.LABEL $label$11
	$3 = *($0 + [28])
	$2 = *($0 + [20])
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$12 }
	$5 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$5 = CALL $122($0)
	$3 = *(($0 + [28]))
	$2 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$2 = [-1]
	if ( $5 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$3 = *($0 + [8])
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($5 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $123($0)
	
.LABEL $label$14
	$4 = ($2 | $4)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL $123($0)
	
.LABEL $label$18
	$0 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL $127()
	return $4
	
.LABEL $label$3
	$2 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $123($0)
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $128 (int_32 $0)
{
	return [0]
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	$5 = ($global$0 - [672])
	$global$0 = $5
	CALL require_auth($1)
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	$2 = (int_64)0
	$6 = (int_64)59
	$7 = [8708]
	$8 = (int_64)0
	
.LOOP $label$2:
	$9 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$3 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$10 = ($10 + [-91])
	goto $label$4 
	
.LABEL $label$5
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$3
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$2 }
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	$2 = (int_64)5
	
.LOOP $label$6:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$6 }
	if ( ((int_64)4982124130208841728 == (int_64)$1) ){ goto $label$12 }
	$2 = (int_64)0
	$9 = (int_64)59
	$7 = [8721]
	$8 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$18 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$10 = ($10 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$6 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$14
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$8 = ((int_64)$6 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$13 }
	if ( ((int_64)$8 != (int_64)$1) ){ goto $label$11 }
	
.LABEL $label$12
	$2 = *($3 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)1397703940), [8796])
	$10 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$19 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$2 = $6
	$10 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$2 = $6
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $10 ){ goto $label$23 }
	$10 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$10 = [0]
	
.LABEL $label$19
	CALL eosio_assert($10, [8846])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [8899])
	$12 = *($4)
	if ( ($12 & [1]) ){ goto $label$25 }
	$11 = ($4 + [1])
	$10 = uint_32($12 >> [1])
	if ( ($10 == 0) ){ goto $label$24 }
	goto $label$10 
	
.LABEL $label$25
	$11 = *($4 + [8])
	$10 = *($4 + [4])
	if ( $10 ){ goto $label$10 }
	
.LABEL $label$24
	$7 = $11
	$10 = [1]
	if ( (($12 & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	CALL eosio_assert([0], [8730])
	$global$0 = ($5 + [672])
	return (unreachable)
	
.LABEL $label$10
	$12 = ($11 + $10)
	$7 = $11
	
.LOOP $label$27:
	if ( (CALL $115(*($7)) == 0) ){ goto $label$26 }
	$7 = ($7 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$27 }
	$7 = $12
	
.LABEL $label$26
	$10 = [1]
	if ( (*($4) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	$10 = ($4 + $10)
	goto $label$7 
	
.LABEL $label$8
	$10 = *($4 + [8])
	
.LABEL $label$7
	CALL $112($4, ($11 - $10), ($7 - $11))
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$34 }
	$13 = ($4 + [1])
	$7 = ($13 + uint_32($7 >> [1]))
	if ( ((int_32)$7 != (int_32)$13) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$13 = *($4 + [8])
	$7 = ($13 + *($4 + [4]))
	if ( ((int_32)$7 == (int_32)$13) ){ goto $label$32 }
	
.LABEL $label$33
	if ( (CALL $115(*(($7 + [-1]))) == 0) ){ goto $label$32 }
	$11 = ($13 + [1])
	
.LOOP $label$35:
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$31 }
	$10 = ($7 + [-2])
	$12 = ($7 + [-1])
	$7 = $12
	if ( CALL $115(*($10)) ){ goto $label$35 }
	$7 = $12
	
.LABEL $label$32
	$10 = [1]
	$12 = *($4)
	if ( ($12 & [1]) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$7 = $13
	$10 = [1]
	$12 = *($4)
	if ( (($12 & [1]) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$11 = *($4 + [8])
	$10 = ($11 + *($4 + [4]))
	goto $label$28 
	
.LABEL $label$29
	$11 = ($4 + $10)
	$10 = ($11 + uint_32($12 >> $10))
	
.LABEL $label$28
	CALL $112($4, ($7 - $11), ($10 - $7))
	$7 = CALL $113($4, [32], [0])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$36 }
	$7 = CALL $113($4, [45], [0])
	
.LABEL $label$36
	CALL eosio_assert(((int_32)$7 != (int_32)[-1]), [8958])
	$7 = *($4)
	$11 = ($7 & [1])
	if ( $11 ){ goto $label$38 }
	$10 = uint_32($7 >> [1])
	goto $label$37 
	
.LABEL $label$38
	$10 = *($4 + [4])
	
.LABEL $label$37
	$13 = [0]
	$7 = [0]
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$39 }
	if ( $11 ){ goto $label$41 }
	$11 = ($4 + [1])
	$7 = [0]
	
.LOOP $label$42:
	if ( ((int_32)*(($11 + $7)) == (int_32)[45]) ){ goto $label$39 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)$10) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	$11 = *($4 + [8])
	$7 = [0]
	
.LOOP $label$43:
	if ( ((int_32)*(($11 + $7)) == (int_32)[45]) ){ goto $label$39 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)$10) ){ goto $label$43 }
	
.LABEL $label$40
	$7 = [0]
	
.LABEL $label$39
	$14 = CALL $107(($5 + [584]), $4, [0], $7, $4)
	$15 = ($14 + [1])
	$16 = *($14 + [8])
	$11 = *($5 + [584])
	$17 = *($14 + [4])
	$12 = CALL $146([9076])
	if ( ($12 == 0) ){ goto $label$44 }
	$11 = ( $17 ? uint_32($11 >> [1]) : $13 )
	$13 = ($11 & [1])
	$18 = ( $16 ? $15 : $13 )
	$16 = ($18 + $11)
	if ( ((int_32)$11 < (int_32)$12) ){ goto $label$46 }
	$13 = $18
	
.LOOP $label$47:
	$11 = (($11 - $12) + [1])
	if ( ($11 == 0) ){ goto $label$46 }
	$11 = CALL $144($13, [101], $11)
	if ( ($11 == 0) ){ goto $label$46 }
	if ( (CALL $145($11, [9076], $12) == 0) ){ goto $label$45 }
	$13 = ($11 + [1])
	$11 = ($16 - $13)
	if ( ((int_32)$11 >= (int_32)$12) ){ goto $label$47 }
	
.LABEL $label$46
	$11 = $16
	
.LABEL $label$45
	$13 = ( [-1] ? ($11 - $18) : ((int_32)$11 == (int_32)$16) )
	
.LABEL $label$44
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [9083])
	*($5 + [576]) = [0]
	*($5 + [568]) = (int_64)0
	*($5 + [560]) = [0]
	*($5 + [552]) = (int_64)0
	$7 = ($7 & [1])
	$7 = *($5 + [536])
	$16 = CALL $107(($5 + [536]), $4, ($7 + [1]), ($10 + [-1]), $4)
	$10 = ( *($16 + [4]) ? uint_32($7 >> [1]) : $7 )
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$51 }
	$4 = ( *($16 + [8]) ? ($16 + [1]) : $7 )
	$7 = [0]
	
.LOOP $label$53:
	if ( ((int_32)*(($4 + $7)) == (int_32)[45]) ){ goto $label$52 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)$10) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	if ( ($7 == 0) ){ goto $label$51 }
	CALL $107(($5 + [64]), $16, [0], $7, $16)
	if ( (*($5 + [568]) & [1]) ){ goto $label$50 }
	*($5 + [568]) = [0]
	goto $label$49 
	
.LABEL $label$51
	CALL $107(($5 + [64]), $16, [0], $10, $16)
	if ( (*($5 + [568]) & [1]) ){ goto $label$55 }
	*($5 + [568]) = [0]
	goto $label$54 
	
.LABEL $label$55
	*(*(($5 + [576]))) = [0]
	*($5 + [572]) = [0]
	
.LABEL $label$54
	$18 = [0]
	CALL $110(($5 + [568]), [0])
	*((($5 + [568]) + [8])) = *((($5 + [64]) + [8]))
	*($5 + [568]) = *($5 + [64])
	goto $label$48 
	
.LABEL $label$50
	*(*(($5 + [576]))) = [0]
	*($5 + [572]) = [0]
	
.LABEL $label$49
	CALL $110(($5 + [568]), [0])
	*((($5 + [568]) + [8])) = *((($5 + [64]) + [8]))
	*($5 + [568]) = *($5 + [64])
	CALL $107(($5 + [64]), $16, ($7 + [1]), ($10 + [-1]), $16)
	if ( (*($5 + [552]) & [1]) ){ goto $label$57 }
	*($5 + [552]) = [0]
	goto $label$56 
	
.LABEL $label$57
	*(*((($5 + [552]) + [8]))) = [0]
	*($5 + [556]) = [0]
	
.LABEL $label$56
	CALL $110(($5 + [552]), [0])
	*((($5 + [552]) + [8])) = *((($5 + [64]) + [8]))
	*($5 + [552]) = *($5 + [64])
	$18 = [1]
	
.LABEL $label$48
	$10 = *($5 + [584])
	$7 = ($14 + [4])
	CALL eosio_assert((( *($7) ? uint_32($10 >> [1]) : ($10 & [1]) ) <= [13]), [9159])
	$10 = *($5 + [568])
	CALL eosio_assert(((int_32)( *($5 + [572]) ? uint_32($10 >> [1]) : ($10 & [1]) ) == (int_32)[53]), [9245])
	$4 = *($7)
	$7 = *($5 + [584])
	$10 = [0]
	*($5 + [528]) = [0]
	*($5 + [520]) = (int_64)0
	*($5 + [512]) = [0]
	*($5 + [504]) = (int_64)0
	$7 = ($7 & [1])
	$4 = ( $4 ? uint_32($7 >> [1]) : $7 )
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$58 }
	$11 = ( *(($14 + [8])) ? $15 : $7 )
	$12 = ($4 + [-1])
	$7 = $12
	
.LOOP $label$60:
	if ( ((int_32)*(($11 + $7)) == (int_32)[46]) ){ goto $label$59 }
	$4 = ((int_32)$7 > (int_32)[0])
	$7 = ($7 + [-1])
	if ( $4 ){ goto $label$60 }
	goto $label$58 
	
.LABEL $label$59
	CALL $107(($5 + [64]), $14, ($7 + [1]), $12, $14)
	if ( (*($5 + [520]) & [1]) ){ goto $label$62 }
	*($5 + [520]) = [0]
	goto $label$61 
	
.LABEL $label$62
	*(*(($5 + [528]))) = [0]
	*($5 + [524]) = [0]
	
.LABEL $label$61
	CALL $110(($5 + [520]), [0])
	*((($5 + [520]) + [8])) = *((($5 + [64]) + [8]))
	*($5 + [520]) = *($5 + [64])
	CALL $107(($5 + [64]), $14, [0], $7, $14)
	if ( (*($5 + [504]) & [1]) ){ goto $label$64 }
	*($5 + [504]) = [0]
	goto $label$63 
	
.LABEL $label$64
	*(*((($5 + [504]) + [8]))) = [0]
	*($5 + [508]) = [0]
	
.LABEL $label$63
	CALL $110(($5 + [504]), [0])
	*((($5 + [504]) + [8])) = *((($5 + [64]) + [8]))
	*($5 + [504]) = *($5 + [64])
	
.LABEL $label$58
	CALL prints([9318])
	$4 = *($5 + [520])
	$11 = ($4 & [1])
	$17 = (($5 + [520]) | [1])
	$7 = (($5 + [520]) + [8])
	CALL prints_l(( *($7) ? $17 : $11 ), ( *($5 + [524]) ? uint_32($4 >> [1]) : $11 ))
	CALL prints([9327])
	CALL prints([9329])
	$4 = *($5 + [504])
	$11 = ($4 & [1])
	$13 = (($5 + [504]) | [1])
	CALL prints_l(( *((($5 + [504]) + [8])) ? $13 : $11 ), ( *($5 + [508]) ? uint_32($4 >> [1]) : $11 ))
	CALL prints([9327])
	$7 = ( *($7) ? $17 : (*($5 + [520]) & [1]) )
	
.LOOP $label$65:
	$4 = ($7 + $10)
	$11 = ($10 + [1])
	$10 = $11
	if ( *($4) ){ goto $label$65 }
	$19 = (CASTING uint_64)(uint_32 ($11 + [-1]))
	$2 = (int_64)0
	$6 = (int_64)59
	$8 = (int_64)0
	
.LOOP $label$66:
	$9 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$19) ){ goto $label$67 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$10 = ($10 + [-91])
	goto $label$68 
	
.LABEL $label$69
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$67
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$71 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$70 
	
.LABEL $label$71
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$70
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$66 }
	CALL eosio_assert(CALL $fimport$10($8), [9342])
	*(($5 + [496])) = [0]
	*($5 + [480]) = (int_64)-1
	*($5 + [488]) = (int_64)0
	$2 = *($0)
	*($5 + [464]) = $2
	*($5 + [472]) = $2
	$12 = [0]
	$7 = CALL db_find_i64($2, $2, (int_64)-4136917485322742784, $8)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$72 }
	$12 = CALL $31(($5 + [464]), $7)
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)($5 + [464])), [11549])
	
.LABEL $label$72
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [9511])
	$20 = *($12 + [9])
	$21 = *($12 + [8])
	CALL eosio_assert(*($12 + [32]), [9668])
	*($5 + [456]) = [0]
	*($5 + [448]) = (int_64)0
	*($5 + [440]) = [0]
	*($5 + [432]) = (int_64)0
	$10 = ($7 & [1])
	$7 = *($5 + [504])
	$22 = ( *($5 + [508]) ? uint_32($7 >> [1]) : $10 )
	$7 = ($22 + [-1])
	$4 = ( *(($5 + [512])) ? $13 : $10 )
	
.LOOP $label$77:
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$76 }
	$10 = ($4 + $7)
	$11 = ($7 + [-1])
	$7 = $11
	if ( ((int_32)*($10) != (int_32)[46]) ){ goto $label$77 }
	CALL $107(($5 + [64]), ($5 + [504]), ($11 + [2]), ($22 + [-1]), ($5 + [504]))
	$7 = ($11 + [1])
	if ( (*($5 + [448]) & [1]) ){ goto $label$75 }
	*($5 + [448]) = [0]
	goto $label$74 
	
.LABEL $label$76
	$11 = (($5 + [432]) | [1])
	$13 = [0]
	goto $label$73 
	
.LABEL $label$75
	*(*(($5 + [456]))) = [0]
	*($5 + [452]) = [0]
	
.LABEL $label$74
	CALL $110(($5 + [448]), [0])
	*((($5 + [448]) + [8])) = *((($5 + [64]) + [8]))
	*($5 + [448]) = *($5 + [64])
	CALL $107(($5 + [64]), ($5 + [504]), [0], $7, ($5 + [504]))
	if ( (*($5 + [432]) & [1]) ){ goto $label$79 }
	*($5 + [432]) = [0]
	goto $label$78 
	
.LABEL $label$79
	*(*((($5 + [432]) + [8]))) = [0]
	*($5 + [436]) = [0]
	
.LABEL $label$78
	CALL $110(($5 + [432]), [0])
	$10 = *((($5 + [64]) + [8]))
	*((($5 + [432]) + [8])) = $10
	*($5 + [432]) = *($5 + [64])
	$13 = [1]
	$4 = ($7 & [1])
	$7 = *($5 + [432])
	$7 = (( *($5 + [436]) ? uint_32($7 >> [1]) : $4 ) + [-1])
	$11 = (($5 + [432]) | [1])
	$4 = ( $10 ? $11 : $4 )
	
.LOOP $label$80:
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$73 }
	$10 = ($4 + $7)
	$7 = ($7 + [-1])
	if ( ((int_32)*($10) != (int_32)[46]) ){ goto $label$80 }
	CALL eosio_assert([0], [9870])
	
.LABEL $label$73
	CALL prints([10074])
	$7 = *($5 + [448])
	$10 = ($7 & [1])
	CALL prints_l(( *((($5 + [448]) + [8])) ? (($5 + [448]) | [1]) : $10 ), ( *($5 + [452]) ? uint_32($7 >> [1]) : $10 ))
	CALL prints([9327])
	CALL prints([10089])
	$7 = *($5 + [432])
	$10 = ($7 & [1])
	CALL prints_l(( *((($5 + [432]) + [8])) ? $11 : $10 ), ( *($5 + [436]) ? uint_32($7 >> [1]) : $10 ))
	CALL prints([9327])
	CALL eosio_assert([1], [8637])
	$2 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$86:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$84 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$87 }
	$2 = $6
	$11 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$87
	$2 = $6
	
.LOOP $label$89:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$88 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$4 = ($7 + [1])
	$7 = $4
	if ( $10 ){ goto $label$89 }
	$11 = [1]
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$88
	$11 = [0]
	
.LABEL $label$85
	CALL eosio_assert($11, [8688])
	if ( ($13 == 0) ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	CALL eosio_assert([0], [8688])
	if ( $13 ){ goto $label$82 }
	
.LABEL $label$83
	$7 = *($5 + [504])
	CALL eosio_assert(((uint_32)( *($5 + [508]) ? uint_32($7 >> [1]) : ($7 & [1]) ) >= (uint_32)$21), [10514])
	$10 = [1]
	$7 = *($5 + [520])
	$11 = ($7 & [1])
	$7 = *($13)
	$13 = CALL $106(($5 + [384]), $14)
	$4 = (( *($13 + [4]) ? uint_32($7 >> [1]) : $11 ) + ([-2] - ( *($5 + [524]) ? uint_32($7 >> [1]) : ($7 & [1]) )))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$90 }
	if ( $11 ){ goto $label$91 }
	$7 = [1]
	
.LOOP $label$92:
	$11 = *((($5 + [384]) + $7))
	if ( ((($11 + [-97]) & [255]) <= [26]) ){ goto $label$93 }
	$10 = [0]
	if ( ((uint_32)(($11 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$90 }
	if ( ((int_32)int_32((($11 << [24]) + [-805306368]) >> [24]) < (int_32)[1]) ){ goto $label$90 }
	
.LABEL $label$93
	$10 = [1]
	$11 = ($7 + [-1])
	$7 = ($7 + [1])
	if ( ((int_32)$11 < (int_32)$4) ){ goto $label$92 }
	goto $label$90 
	
.LABEL $label$91
	$12 = *($13 + [8])
	$7 = [0]
	
.LOOP $label$94:
	$11 = *(($12 + $7))
	if ( ((($11 + [-97]) & [255]) <= [26]) ){ goto $label$95 }
	$10 = [0]
	if ( ((uint_32)(($11 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$90 }
	if ( ((int_32)int_32((($11 << [24]) + [-805306368]) >> [24]) < (int_32)[1]) ){ goto $label$90 }
	
.LABEL $label$95
	$10 = [1]
	$11 = ((int_32)$7 < (int_32)$4)
	$7 = ($7 + [1])
	if ( $11 ){ goto $label$94 }
	
.LABEL $label$90
	CALL eosio_assert($10, [10626])
	if ( ((*($13) & [1]) == 0) ){ goto $label$96 }
	CALL _ZdlPv(*($13 + [8]))
	
.LABEL $label$96
	*(($5 + [96])) = [0]
	*($5 + [80]) = (int_64)-1
	*($5 + [88]) = (int_64)0
	$2 = *($0)
	*($5 + [64]) = $2
	$10 = *($5 + [504])
	$4 = *($5 + [508])
	*($5 + [72]) = $8
	$7 = [0]
	$10 = CALL db_find_i64($2, $8, (int_64)-5918709142380707840, (CASTING uint_64)(uint_32 ( $4 ? uint_32($10 >> [1]) : ($10 & [1]) )))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$97 }
	$7 = CALL $32(($5 + [64]), $10)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)($5 + [64])), [11549])
	
.LABEL $label$97
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [10718])
	$24 = *(($7 + [16]))
	$25 = *($7 + [8])
	$4 = *($5 + [88])
	if ( ($4 == 0) ){ goto $label$81 }
	$11 = ($5 + [92])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$99 }
	
.LOOP $label$100:
	$7 = ($7 + [-24])
	$10 = *($7)
	*($7) = [0]
	if ( ($10 == 0) ){ goto $label$101 }
	CALL _ZdlPv($10)
	
.LABEL $label$101
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$100 }
	$7 = *(($5 + [88]))
	goto $label$98 
	
.LABEL $label$99
	$7 = $4
	
.LABEL $label$98
	*($11) = $4
	CALL _ZdlPv($7)
	goto $label$81 
	
.LABEL $label$82
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [10106])
	$10 = [1]
	$7 = ($7 & [1])
	$7 = *($21)
	$21 = CALL $106(($5 + [416]), $14)
	$4 = ( *($21 + [4]) ? uint_32($7 >> [1]) : $7 )
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$102 }
	if ( $7 ){ goto $label$103 }
	$13 = (($5 + [416]) | [1])
	$7 = [0]
	
.LOOP $label$104:
	$11 = *(($13 + $7))
	if ( ((($11 + [-97]) & [255]) <= [26]) ){ goto $label$105 }
	if ( ((int_32)($11 & [255]) == (int_32)[46]) ){ goto $label$105 }
	$10 = [0]
	if ( ((((int_32)int_32((($11 << [24]) + [-805306368]) >> [24]) > (int_32)[0]) & ((($11 + [-49]) & [255]) <= [5])) == 0) ){ goto $label$102 }
	
.LABEL $label$105
	$10 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)$4) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$103
	$13 = *($21 + [8])
	$7 = [0]
	
.LOOP $label$106:
	$11 = *(($13 + $7))
	if ( ((($11 + [-97]) & [255]) <= [26]) ){ goto $label$107 }
	if ( ((int_32)($11 & [255]) == (int_32)[46]) ){ goto $label$107 }
	$10 = [0]
	if ( ((((int_32)int_32((($11 << [24]) + [-805306368]) >> [24]) > (int_32)[0]) & ((($11 + [-49]) & [255]) <= [5])) == 0) ){ goto $label$102 }
	
.LABEL $label$107
	$10 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)$4) ){ goto $label$106 }
	
.LABEL $label$102
	CALL eosio_assert($10, [10209])
	if ( ((*($21) & [1]) == 0) ){ goto $label$108 }
	CALL _ZdlPv(*($21 + [8]))
	
.LABEL $label$108
	$7 = [1]
	$10 = ($10 & [1])
	$10 = *($21)
	$21 = CALL $106(($5 + [400]), ($5 + [432]))
	$4 = ( *($21 + [4]) ? uint_32($10 >> [1]) : $10 )
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$109 }
	if ( $10 ){ goto $label$110 }
	$13 = (($5 + [400]) | [1])
	$10 = [0]
	
.LOOP $label$111:
	$11 = *(($13 + $10))
	if ( ((($11 + [-97]) & [255]) <= [26]) ){ goto $label$112 }
	$7 = [0]
	if ( ((uint_32)(($11 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$109 }
	if ( ((int_32)int_32((($11 << [24]) + [-805306368]) >> [24]) < (int_32)[1]) ){ goto $label$109 }
	
.LABEL $label$112
	$7 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)$4) ){ goto $label$111 }
	goto $label$109 
	
.LABEL $label$110
	$13 = *($21 + [8])
	$10 = [0]
	
.LOOP $label$113:
	$11 = *(($13 + $10))
	if ( ((($11 + [-97]) & [255]) <= [26]) ){ goto $label$114 }
	$7 = [0]
	if ( ((uint_32)(($11 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$109 }
	if ( ((int_32)int_32((($11 << [24]) + [-805306368]) >> [24]) < (int_32)[1]) ){ goto $label$109 }
	
.LABEL $label$114
	$7 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)$4) ){ goto $label$113 }
	
.LABEL $label$109
	CALL eosio_assert($7, [10310])
	if ( ((*($21) & [1]) == 0) ){ goto $label$115 }
	CALL _ZdlPv(*($21 + [8]))
	
.LABEL $label$115
	CALL $33(($5 + [160]), ($5 + [448]), [10403])
	$7 = *($5 + [520])
	$10 = ($7 & [1])
	$7 = CALL $111(($5 + [160]), ( *((($5 + [520]) + [8])) ? $17 : $10 ), ( *($5 + [524]) ? uint_32($7 >> [1]) : $10 ))
	$2 = *($7)
	*($7) = (int_64)0
	$7 = ($7 + [8])
	*((($5 + [64]) + [8])) = *($7)
	$10 = [0]
	*($7) = [0]
	*($5 + [64]) = $2
	if ( ((*($5 + [160]) & [1]) == 0) ){ goto $label$116 }
	CALL _ZdlPv(*($5 + [168]))
	
.LABEL $label$116
	$7 = *($5 + [448])
	CALL eosio_assert(((uint_32)( *($5 + [452]) ? uint_32($7 >> [1]) : ($7 & [1]) ) <= (uint_32)$20), [10106])
	$13 = (*($5 + [64]) & [1])
	$17 = *($5 + [72])
	$7 = ( $17 ? (($5 + [64]) | [1]) : $13 )
	
.LOOP $label$117:
	$4 = ($7 + $10)
	$11 = ($10 + [1])
	$10 = $11
	if ( *($4) ){ goto $label$117 }
	$23 = (CASTING uint_64)(uint_32 ($11 + [-1]))
	$2 = (int_64)0
	$6 = (int_64)59
	$19 = (int_64)0
	
.LOOP $label$118:
	$9 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$23) ){ goto $label$119 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$121 }
	$10 = ($10 + [-91])
	goto $label$120 
	
.LABEL $label$121
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$120
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$119
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$123 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$122 
	
.LABEL $label$123
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$122
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$19 = ((int_64)$9 | (int_64)$19)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$118 }
	CALL eosio_assert(((int_64)$19 == (int_64)$1), [10405])
	$24 = *(($12 + [24]))
	$25 = *($12 + [16])
	if ( ($13 == 0) ){ goto $label$81 }
	CALL _ZdlPv($17)
	
.LABEL $label$81
	$7 = ( *(($14 + [8])) ? $15 : (*($5 + [584]) & [1]) )
	$10 = [0]
	
.LOOP $label$124:
	$4 = ($7 + $10)
	$11 = ($10 + [1])
	$10 = $11
	if ( *($4) ){ goto $label$124 }
	$23 = (CASTING uint_64)(uint_32 ($11 + [-1]))
	$2 = (int_64)0
	$6 = (int_64)59
	$19 = (int_64)0
	
.LOOP $label$125:
	$9 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$23) ){ goto $label$126 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$128 }
	$10 = ($10 + [-91])
	goto $label$127 
	
.LABEL $label$128
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$127
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$126
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$130 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$129 
	
.LABEL $label$130
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$129
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$19 = ((int_64)$9 | (int_64)$19)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$125 }
	CALL eosio_assert(((int_32)CALL $fimport$10($19) ^ (int_32)[1]), [10787])
	if ( ($18 == 0) ){ goto $label$134 }
	$7 = ( *(($5 + [560])) ? (($5 + [552]) | [1]) : (*($5 + [552]) & [1]) )
	$10 = [0]
	
.LOOP $label$135:
	$4 = ($7 + $10)
	$11 = ($10 + [1])
	$10 = $11
	if ( *($4) ){ goto $label$135 }
	$26 = (CASTING uint_64)(uint_32 ($11 + [-1]))
	$2 = (int_64)0
	$6 = (int_64)59
	$23 = (int_64)0
	
.LOOP $label$136:
	$9 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$26) ){ goto $label$137 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$139 }
	$10 = ($10 + [-91])
	goto $label$138 
	
.LABEL $label$139
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$138
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$137
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$141 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$140 
	
.LABEL $label$141
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$140
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$23 = ((int_64)$9 | (int_64)$23)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$136 }
	*(($5 + [96])) = [0]
	*($5 + [80]) = (int_64)-1
	*($5 + [88]) = (int_64)0
	$2 = *($0)
	*($5 + [64]) = $2
	*($5 + [72]) = $8
	$7 = [0]
	$10 = CALL db_find_i64($2, $8, (int_64)3680915223743201280, $23)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$142 }
	$7 = CALL $34(($5 + [64]), $10)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($5 + [64])), [11549])
	
.LABEL $label$142
	$10 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($10, [10920])
	$17 = [1]
	if ( CALL is_account($23) ){ goto $label$143 }
	$17 = [0]
	CALL eosio_assert([0], [10920])
	
.LABEL $label$143
	$20 = *($7 + [16])
	CALL eosio_assert(($20 <= [50]), [11070])
	$2 = *($0)
	CALL eosio_assert($10, [11632])
	CALL $35(($5 + [64]), $7, $2, ($5 + [160]))
	$4 = *($5 + [88])
	if ( ($4 == 0) ){ goto $label$131 }
	$11 = ($5 + [92])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$133 }
	
.LOOP $label$144:
	$7 = ($7 + [-24])
	$10 = *($7)
	*($7) = [0]
	if ( ($10 == 0) ){ goto $label$145 }
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$146 }
	CALL _ZdlPv(*(($10 + [40])))
	
.LABEL $label$146
	CALL _ZdlPv($10)
	
.LABEL $label$145
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$144 }
	$7 = *(($5 + [88]))
	goto $label$132 
	
.LABEL $label$134
	$20 = [0]
	$17 = [0]
	goto $label$131 
	
.LABEL $label$133
	$7 = $4
	
.LABEL $label$132
	*($11) = $4
	CALL _ZdlPv($7)
	
.LABEL $label$131
	*(($5 + [376])) = [0]
	*($5 + [368]) = (int_64)0
	$7 = CALL $146([8792])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$167 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$170 }
	*($5 + [368]) = ($7 << [1])
	$11 = (($5 + [368]) | [1])
	$4 = $11
	if ( $7 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$10 = (($7 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*($5 + [368]) = ($10 | [1])
	*($5 + [376]) = $4
	*($5 + [372]) = $7
	$11 = (($5 + [368]) | [1])
	
.LABEL $label$169
	CALL memcpy($4, [8792], $7)
	
.LABEL $label$168
	$10 = [0]
	*(($4 + $7)) = [0]
	$4 = ( *($5 + [372]) ? uint_32($4 >> [1]) : $12 )
	$4 = *($5 + [368])
	$12 = ($4 & [1])
	$7 = ( *($5 + [376]) ? $11 : $12 )
	$18 = ($7 + $4)
	if ( ($4 == 0) ){ goto $label$171 }
	$11 = ( *(($5 + [576])) ? (($5 + [568]) | [1]) : (*($5 + [568]) & [1]) )
	if ( ((int_32)*($7) != (int_32)*($11)) ){ goto $label$171 }
	$11 = ($11 + [1])
	$4 = ($4 + [-1])
	
.LOOP $label$173:
	if ( ($4 == 0) ){ goto $label$172 }
	$4 = ($4 + [-1])
	$12 = ($7 + [1])
	$13 = *($11)
	$11 = ($11 + [1])
	$15 = ($7 + [1])
	$7 = $15
	if ( ((int_32)$13 == (int_32)*($12)) ){ goto $label$173 }
	$7 = $15
	goto $label$171 
	
.LABEL $label$172
	$7 = $18
	
.LABEL $label$171
	CALL eosio_assert(((int_32)$18 == (int_32)$7), [11225])
	$7 = *($5 + [368])
	$12 = CALL $107(($5 + [352]), ($5 + [568]), ( *($5 + [372]) ? uint_32($7 >> [1]) : ($7 & [1]) ), [-1], ($5 + [568]))
	*($5 + [344]) = [0]
	*($5 + [336]) = (int_64)0
	CALL eosio_assert(CALL $1(( *($12 + [8]) ? ($12 + [1]) : (*($5 + [352]) & [1]) ), ($5 + [336])), [11294])
	CALL eosio_assert(((int_32)(*($5 + [340]) - *($5 + [336])) == (int_32)[37]), [11353])
	CALL memmove(($5 + [296]), *($5 + [336]), [33])
	CALL ripemd160(($5 + [296]), [33], ($5 + [256]))
	CALL eosio_assert((CALL $145(($5 + [256]), (*($5 + [340]) + [-4]), [4]) == 0), [11404])
	CALL eosio_assert([1], [8637])
	$2 = (int_64)5459781
	
.LOOP $label$176:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$175 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$177 }
	$2 = $6
	$4 = [1]
	$11 = $10
	$10 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$176 }
	goto $label$174 
	
.LABEL $label$177
	$2 = $6
	
.LOOP $label$178:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$175 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$10 < (int_32)[6])
	$11 = ($10 + [1])
	$10 = $11
	if ( $4 ){ goto $label$178 }
	$4 = [1]
	$10 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$176 }
	goto $label$174 
	
.LABEL $label$175
	$4 = [0]
	
.LABEL $label$174
	CALL eosio_assert($4, [8688])
	CALL eosio_assert([1], [8637])
	$2 = (int_64)5459781
	
.LOOP $label$181:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$180 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$182 }
	$2 = $6
	$10 = [1]
	$4 = $7
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$181 }
	goto $label$179 
	
.LABEL $label$182
	$2 = $6
	
.LOOP $label$183:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$180 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$4 = ($7 + [1])
	$7 = $4
	if ( $10 ){ goto $label$183 }
	$10 = [1]
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$181 }
	goto $label$179 
	
.LABEL $label$180
	$10 = [0]
	
.LABEL $label$179
	CALL eosio_assert($10, [8688])
	CALL $36(($5 + [240]), $0, [3072])
	CALL $36(($5 + [224]), $0, [256])
	CALL eosio_assert(((int_64)1397703940 == (int_64)1397703940), [11913])
	CALL eosio_assert([1], [11956])
	CALL eosio_assert([1], [11975])
	CALL eosio_assert(((int_64)*($5 + [248]) == (int_64)1397703940), [11913])
	$2 = *($5 + [240])
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427389904), [11956])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427385904), [11975])
	CALL eosio_assert(((int_64)$24 == (int_64)1397703940), [11913])
	$6 = ((int_64)((int_64)$25 + (int_64)$2) + (int_64)2000)
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [11956])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [11975])
	$2 = *($5 + [224])
	CALL __multi3(($5 + [8]), $2, (int_64)$2 >> (int_64)63), (int_64)5, (int_64)0)
	$26 = *($5 + [232])
	$2 = *((($5 + [8]) + [8]))
	$9 = *($5 + [8])
	CALL eosio_assert(( (uint_64)($9 <= (int_64)4611686018427387904) ? ((int_64)$2 < (int_64)0) : (int_64)($2 == 0) ), [11993])
	CALL eosio_assert(( ((uint_64)$9 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$2 > (int_64)-1) : ((int_64)$2 == (int_64)-1) ), [12017])
	CALL eosio_assert(((int_64)$26 == (int_64)1397703940), [11913])
	$2 = ((int_64)$6 + (int_64)$9)
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [11956])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [11975])
	$7 = ($3 + [8])
	CALL eosio_assert(((int_64)1397703940 == (int_64)*($7)), [11854])
	CALL eosio_assert(((int_64)$2 <= (int_64)*($3)), [11460])
	$2 = CALL current_time()
	*(($5 + [188])) = (int_64)0
	*(($5 + [204])) = (int_64)0
	*(($5 + [212])) = (int_64)0
	*($5 + [172]) = [0]
	*($5 + [176]) = [0]
	*($5 + [180 align=4]) = (int_64)0
	*($5 + [196 align=4]) = (int_64)0
	*($5 + [160]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	*($5 + [64]) = $1
	*($5 + [80]) = $8
	*($5 + [72]) = $19
	$10 = CALL $106(($5 + [88]), $12)
	*(($5 + [128])) = $24
	*(($5 + [112])) = *($7)
	*($5 + [120]) = $25
	*($5 + [152]) = $20
	*($5 + [104]) = *($3)
	*($5 + [136]) = $17
	*($5 + [144]) = ( $23 ? $19 : $17 )
	$4 = ($5 + [152])
	$11 = ($5 + [144])
	$3 = ($5 + [136])
	$13 = ($5 + [104])
	$15 = ($5 + [80])
	$17 = (($5 + [64]) + [8])
	$6 = *($0)
	$2 = (int_64)6
	
.LOOP $label$184:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$184 }
	$2 = (int_64)7
	
.LOOP $label$185:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$185 }
	*(($18 = ($5 + [48]))) = [0]
	*($5 + [32]) = (int_64)-5001032546562080768
	*($5 + [24]) = $6
	*($5 + [40]) = (int_64)0
	*(($7 = CALL _Znwj([16]))) = $6
	*($7 + [8]) = (int_64)3617214756542218240
	*(($5 + [60])) = [0]
	$20 = ($7 + [16])
	*($18) = $20
	*(($5 + [44])) = $20
	*($5 + [40]) = $7
	*($5 + [52 align=4]) = (int_64)0
	$7 = *($10)
	$18 = ( *((($5 + [64]) + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($18 + [69])
	$2 = (CASTING uint_64)(uint_32 $18)
	$18 = (($5 + [24]) + [28])
	
.LOOP $label$186:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$186 }
	if ( ($7 == 0) ){ goto $label$188 }
	CALL $37($18, $7)
	$18 = *(($5 + [56]))
	$7 = *(($5 + [52]))
	goto $label$187 
	
.LABEL $label$188
	$18 = [0]
	$7 = [0]
	
.LABEL $label$187
	*($5 + [604]) = $7
	*($5 + [600]) = $7
	*($5 + [608]) = $18
	*($5 + [616]) = ($5 + [600])
	*($5 + [628]) = $17
	*($5 + [632]) = $15
	*($5 + [636]) = $10
	*($5 + [640]) = $13
	*($5 + [644]) = ($5 + [120])
	*($5 + [648]) = $3
	*($5 + [652]) = $11
	*($5 + [656]) = $4
	*($5 + [624]) = ($5 + [64])
	CALL $38(($5 + [624]), ($5 + [616]))
	$7 = (($5 + [160]) + [40])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($5 + [204]))) ){ goto $label$190 }
	CALL $39($4, ($5 + [24]))
	*($7) = (*($7) + [40])
	goto $label$189 
	
.LABEL $label$190
	CALL $40(($5 + [196]), ($5 + [24]))
	
.LABEL $label$189
	$2 = *($0)
	$6 = CALL current_time()
	*($5 + [632]) = $2
	*($5 + [624]) = ((int_64)$6 + (int_64)1)
	$2 = *($0)
	CALL $41(($5 + [600]), ($5 + [160]))
	$7 = *($5 + [600])
	CALL send_deferred(($5 + [624]), $2, $7, (*($5 + [604]) - $7), [1])
	$7 = *($5 + [600])
	if ( ($7 == 0) ){ goto $label$191 }
	*($5 + [604]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$191
	$7 = *($5 + [52])
	if ( ($7 == 0) ){ goto $label$192 }
	*(($5 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$192
	$7 = *($5 + [40])
	if ( ($7 == 0) ){ goto $label$193 }
	*(($5 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$193
	if ( ((*($10) & [1]) == 0) ){ goto $label$194 }
	CALL _ZdlPv(*(($5 + [96])))
	
.LABEL $label$194
	CALL $42(($5 + [160]))
	$7 = *($5 + [336])
	if ( ($7 == 0) ){ goto $label$195 }
	*($5 + [340]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$195
	if ( (*($5 + [352]) & [1]) ){ goto $label$197 }
	if ( (*($5 + [368]) & [1]) ){ goto $label$196 }
	goto $label$166 
	
.LABEL $label$197
	CALL _ZdlPv(*(($12 + [8])))
	if ( ((*($5 + [368]) & [1]) == 0) ){ goto $label$166 }
	
.LABEL $label$196
	CALL _ZdlPv(*(($5 + [376])))
	$7 = [1]
	if ( ((*($5 + [432]) & [1]) == 0) ){ goto $label$165 }
	goto $label$164 
	
.LABEL $label$167
	CALL $105(($5 + [368]))
	
.LABEL $label$166
	$7 = [1]
	if ( (*($5 + [432]) & [1]) ){ goto $label$164 }
	
.LABEL $label$165
	if ( (*($5 + [448]) & $7) ){ goto $label$163 }
	goto $label$162 
	
.LABEL $label$164
	CALL _ZdlPv(*(($5 + [440])))
	if ( ((*($5 + [448]) & $7) == 0) ){ goto $label$162 }
	
.LABEL $label$163
	CALL _ZdlPv(*(($5 + [456])))
	$4 = *($5 + [488])
	if ( $4 ){ goto $label$161 }
	goto $label$160 
	
.LABEL $label$162
	$4 = *($5 + [488])
	if ( ($4 == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$11 = ($5 + [492])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$159 }
	
.LOOP $label$198:
	$7 = ($7 + [-24])
	$10 = *($7)
	*($7) = [0]
	if ( ($10 == 0) ){ goto $label$199 }
	CALL _ZdlPv($10)
	
.LABEL $label$199
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$198 }
	$7 = *(($5 + [488]))
	goto $label$158 
	
.LABEL $label$160
	$7 = [1]
	if ( (*($5 + [504]) & [1]) ){ goto $label$157 }
	goto $label$156 
	
.LABEL $label$159
	$7 = $4
	
.LABEL $label$158
	*($11) = $4
	CALL _ZdlPv($7)
	$7 = [1]
	if ( ((*($5 + [504]) & [1]) == 0) ){ goto $label$156 }
	
.LABEL $label$157
	CALL _ZdlPv(*(($5 + [512])))
	if ( ((*($5 + [520]) & $7) == 0) ){ goto $label$155 }
	goto $label$154 
	
.LABEL $label$156
	if ( (*($5 + [520]) & $7) ){ goto $label$154 }
	
.LABEL $label$155
	$7 = [1]
	if ( (*($5 + [536]) & [1]) ){ goto $label$153 }
	goto $label$152 
	
.LABEL $label$154
	CALL _ZdlPv(*(($5 + [528])))
	$7 = [1]
	if ( ((*($5 + [536]) & [1]) == 0) ){ goto $label$152 }
	
.LABEL $label$153
	CALL _ZdlPv(*($16 + [8]))
	if ( ((*($5 + [552]) & $7) == 0) ){ goto $label$151 }
	goto $label$150 
	
.LABEL $label$152
	if ( (*($5 + [552]) & $7) ){ goto $label$150 }
	
.LABEL $label$151
	$7 = [1]
	if ( (*($5 + [568]) & [1]) ){ goto $label$149 }
	goto $label$148 
	
.LABEL $label$150
	CALL _ZdlPv(*(($5 + [560])))
	$7 = [1]
	if ( ((*($5 + [568]) & [1]) == 0) ){ goto $label$148 }
	
.LABEL $label$149
	CALL _ZdlPv(*(($5 + [576])))
	if ( (*($5 + [584]) & $7) ){ goto $label$147 }
	goto $label$1 
	
.LABEL $label$148
	if ( ((*($5 + [584]) & $7) == 0) ){ goto $label$1 }
	
.LABEL $label$147
	CALL _ZdlPv(*(($14 + [8])))
	
.LABEL $label$1
	$global$0 = ($5 + [672])
}

void .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $150($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [11623])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($3 & [-8]) != (int_32)[8]), [11623])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [11623])
	CALL memcpy(($0 + [16]), ($1 + [16]), [1])
	$global$0 = $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [416])
	$global$0 = $3
	CALL memory()
	*($3 + [408]) = $0
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	$2 = (int_64)0
	$4 = (int_64)59
	$5 = [8621]
	$6 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$8 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$0 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$0 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$0 = ((int_64)((int_64)$0 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$4
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)4294967291)
	$6 = ((int_64)$0 | (int_64)$6)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$3 }
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$1 }
	CALL $7(($3 + [200]))
	*(($7 = (($3 + [392]) + [8]))) = *(($3 + [224]))
	*($3 + [392]) = *($3 + [216])
	$2 = *($3 + [208])
	$0 = *($3 + [200])
	$8 = ($3 + [232])
	$5 = CALL $106(($3 + [376]), $8)
	*((($3 + [8]) + [8])) = *($7)
	*($3 + [8]) = *($3 + [392])
	CALL $8(($3 + [408]), $0, $2, ($3 + [8]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$9
	if ( ((*($8) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [240])))
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$2 <= (int_64)3626342975258230783) ){ goto $label$19 }
	if ( ((int_64)$2 > (int_64)5378297606284247039) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)3626342975258230784) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)5377973237638496256) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)5378243230305353728) ){ goto $label$1 }
	CALL $9(($3 + [200]))
	CALL $10(($3 + [408]), *($3 + [200]), *($3 + [208]), *($3 + [216]))
	CALL eosio_exit([0])
	
.LABEL $label$19
	if ( ((int_64)$2 <= (int_64)-4417031583246581761) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)-4417031583246581760) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-1282848418007351296) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)3626072982591373312) ){ goto $label$1 }
	CALL $11(($3 + [200]))
	$7 = ($3 + [228])
	$5 = CALL $106(($3 + [360]), $7)
	CALL $12(($3 + [408]), *($3 + [200]), *($3 + [208]), *($3 + [216]), *($3 + [224]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$20
	if ( ((*($7) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [236])))
	CALL eosio_exit([0])
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)5378297606284247040) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)5935061724012478464) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)5935070161283317760) ){ goto $label$1 }
	CALL $13(($3 + [200]))
	$2 = *(($3 + [232]))
	*((($3 + [312]) + [8])) = $2
	*((($3 + [40]) + [8])) = $2
	$2 = *($3 + [224])
	*($3 + [312]) = $2
	*($3 + [40]) = $2
	CALL $14(($3 + [408]), *($3 + [200]), *($3 + [208]), *($3 + [216]), ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)-7876370025743908864) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-5001032546562080768) ){ goto $label$1 }
	CALL $15(($3 + [200]))
	$2 = *($3 + [216])
	$0 = *($3 + [208])
	$4 = *($3 + [200])
	$7 = ($3 + [224])
	$5 = CALL $106(($3 + [184]), $7)
	$6 = *(($3 + [248]))
	*((($3 + [168]) + [8])) = $6
	$1 = *(($3 + [264]))
	*((($3 + [152]) + [8])) = $1
	*((($3 + [88]) + [8])) = $6
	*((($3 + [72]) + [8])) = $1
	$6 = *($3 + [240])
	*($3 + [168]) = $6
	$1 = *($3 + [256])
	*($3 + [152]) = $1
	*($3 + [88]) = $6
	*($3 + [72]) = $1
	CALL $16(($3 + [408]), $4, $0, $2, $5, ($3 + [88]), ($3 + [72]), *($3 + [272]), *($3 + [280]), *($3 + [288]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$21
	if ( ((*($7) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [232])))
	CALL eosio_exit([0])
	
.LABEL $label$16
	CALL $17(($3 + [200]))
	$2 = *(($3 + [232]))
	*((($3 + [328]) + [8])) = $2
	*((($3 + [24]) + [8])) = $2
	$2 = *($3 + [224])
	*($3 + [328]) = $2
	*($3 + [24]) = $2
	CALL $18(($3 + [408]), *($3 + [200]), *($3 + [208]), *($3 + [216]), ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$15
	CALL $19(($3 + [200]))
	CALL $20(($3 + [408]), *($3 + [200]), *($3 + [208]), *($3 + [216]))
	CALL eosio_exit([0])
	
.LABEL $label$14
	CALL $21(($3 + [200]))
	$2 = *(($3 + [224]))
	*((($3 + [296]) + [8])) = $2
	*((($3 + [56]) + [8])) = $2
	$2 = *($3 + [216])
	*($3 + [296]) = $2
	*($3 + [56]) = $2
	CALL $22(($3 + [408]), *($3 + [200]), *($3 + [208]), *($3 + [209]), ($3 + [56]), *($3 + [232]))
	CALL eosio_exit([0])
	
.LABEL $label$13
	CALL $23(($3 + [200]))
	$2 = *(($3 + [224]))
	*((($3 + [136]) + [8])) = $2
	*((($3 + [104]) + [8])) = $2
	$2 = *($3 + [216])
	*($3 + [136]) = $2
	*($3 + [104]) = $2
	CALL $24(($3 + [408]), *($3 + [200]), *($3 + [208]), ($3 + [104]))
	CALL eosio_exit([0])
	
.LABEL $label$12
	CALL $26(($3 + [408]), CALL $25())
	CALL eosio_exit([0])
	
.LABEL $label$11
	CALL $27(($3 + [200]))
	$7 = ($3 + [228])
	$5 = CALL $106(($3 + [344]), $7)
	CALL $28(($3 + [408]), *($3 + [200]), *($3 + [208]), *($3 + [216]), *($3 + [224]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$22
	if ( ((*($7) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [236])))
	CALL eosio_exit([0])
	
.LABEL $label$10
	CALL $29(($3 + [200]))
	$2 = *($3 + [200])
	$7 = ($3 + [208])
	$5 = CALL $106(($3 + [120]), $7)
	CALL require_auth(*($3 + [408]))
	CALL require_recipient($2)
	if ( ((*($5) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$23
	if ( ((*($7) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [216])))
	CALL eosio_exit([0])
	
.LABEL $label$1
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$1 }
	$1 = CALL $150($3)
	CALL read_action_data($1, $3)
	CALL $30($0, $1, $3)
	$global$0 = $2
	return 
	
.LABEL $label$1
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	CALL read_action_data($1, $3)
	CALL $30($0, $1, $3)
	$global$0 = $2
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	float_64 $6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($1 + [8])), [8547])
	$4 = *($2)
	$5 = *($3)
	$6 = CALL $119(((float_64)((float_64)(CASTING float_64)(int_64 $5) / (float_64)(CASTING float_64)(int_64 (int_64))(*($1) - $5))) + (float_64)(float_64)1), ((float_64)(float_64)1e3 / (float_64)*($2 + [16])))
	*($1) = (int_64))(*($1) - $5)
	$6 = ((float_64)((float_64)$6 + (float_64)(float_64)-1) * (float_64)(CASTING float_64)(int_64 $4))
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$5 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$5 = (Rounds 0)($6)
	
.LABEL $label$1
	*($0) = $5
	*($2) = (int_64))(*($2) - $5)
	$4 = *($2 + [8])
	*($0 + [8]) = $4
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8637])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$5 = $4
	$3 = [1]
	$1 = $2
	$2 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$5 = $4
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$1 = ((int_32)$2 < (int_32)[6])
	$0 = ($2 + [1])
	$2 = $0
	if ( $1 ){ goto $label$8 }
	$3 = [1]
	$2 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert($3, [8688])
	return 
	
.LABEL $label$4
	CALL eosio_assert([0], [8688])
	return 
	
.LABEL $label$3
	CALL eosio_assert([0], [8688])
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	float_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [112])
	$global$0 = $4
	$5 = *(($1 + [48]))
	$6 = *(($1 + [24]))
	$7 = *($2 + [8])
	if ( ((int_64)$7 != (int_64)*($1 + [8])) ){ goto $label$10 }
	if ( ((int_64)$6 != (int_64)$3) ){ goto $label$9 }
	$8 = ($2 + [8])
	$7 = *($8)
	*((($4 + [80]) + [8])) = $7
	$6 = *($2)
	*((($4 + [16]) + [8])) = $7
	*($4 + [80]) = $6
	*($4 + [16]) = $6
	CALL $4(($4 + [96]), $1, ($1 + [16]), ($4 + [16]))
	*($8) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$7 != (int_64)$6) ){ goto $label$8 }
	$7 = *($1)
	$8 = ($1 + [16])
	$6 = *($2)
	$9 = CALL $119(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$6))) + (float_64)(float_64)1), ((float_64)*(($1 + [32])) / (float_64)(float_64)1e3))
	*($8) = ((int_64)$6 + (int_64)*($8))
	$9 = !(float_64)((float_64)(float_64))((float_64)1 - $9) * (float_64)(CASTING float_64)(int_64 $7)
	if ( ((float_64)(float_64)|$9)| < (float_64)(float_64)9223372036854775808) ){ goto $label$7 }
	$5 = (int_64)-9223372036854775808
	goto $label$6 
	
.LABEL $label$9
	if ( ((int_64)$5 != (int_64)$3) ){ goto $label$5 }
	$8 = ($2 + [8])
	$7 = *($8)
	*((($4 + [64]) + [8])) = $7
	$6 = *($2)
	*((($4 + [32]) + [8])) = $7
	*($4 + [64]) = $6
	*($4 + [32]) = $6
	CALL $4(($4 + [96]), $1, ($1 + [40]), ($4 + [32]))
	*($8) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$7 != (int_64)$5) ){ goto $label$4 }
	$7 = *($1)
	$8 = ($1 + [40])
	$6 = *($2)
	$9 = CALL $119(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$6))) + (float_64)(float_64)1), ((float_64)*(($1 + [56])) / (float_64)(float_64)1e3))
	*($8) = ((int_64)$6 + (int_64)*($8))
	$9 = !(float_64)((float_64)(float_64))((float_64)1 - $9) * (float_64)(CASTING float_64)(int_64 $7)
	if ( ((float_64)(float_64)|$9)| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$5 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$7
	$5 = (Rounds 0)($9)
	
.LABEL $label$6
	*($1) = ((int_64)*($1) + (int_64)$5)
	$10 = *(($1 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8637])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$6 = $7
	$11 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$6 = $7
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $11 ){ goto $label$15 }
	$11 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$11 = [0]
	
.LABEL $label$11
	CALL eosio_assert($11, [8688])
	*(($2 + [8])) = $10
	*($2) = $5
	goto $label$1 
	
.LABEL $label$5
	CALL eosio_assert([0], [8598])
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [8581])
	goto $label$1 
	
.LABEL $label$3
	$5 = (Rounds 0)($9)
	
.LABEL $label$2
	*($1) = ((int_64)*($1) + (int_64)$5)
	$10 = *(($1 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8637])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$6 = $7
	$11 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$6 = $7
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $11 ){ goto $label$20 }
	$11 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$11 = [0]
	
.LABEL $label$16
	CALL eosio_assert($11, [8688])
	*(($2 + [8])) = $10
	*($2) = $5
	
.LABEL $label$1
	$8 = ($2 + [8])
	if ( ((int_64)*($8) != (int_64)$3) ){ goto $label$21 }
	*($0) = *($2)
	*(($0 + [8])) = *($8)
	$global$0 = ($4 + [112])
	return 
	
.LABEL $label$21
	$7 = *($8)
	*((($4 + [48]) + [8])) = $7
	$6 = *($2)
	*(($4 + [8])) = $7
	*($4 + [48]) = $6
	*($4) = $6
	CALL $5($0, $1, $4, $3)
	$global$0 = ($4 + [112])
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL _ZdlPv($4)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($3 << [1])
	$5 = ( $1 ? $4 : ($4 <= $1) )
	
.LABEL $label$6
	$4 = CALL _Znwj($5)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $5)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = *($2)
	$4 = (*($0) + [1])
	*($0) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $4)
	$5 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($5 == 0) ){ goto $label$8 }
	CALL memset($4, *($2), $5)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$4 = ($0 + [4])
	$0 = *($4)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($4) + [1])
	*($4) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $114($0)
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC memory ()
{
}

int_32 .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL $115(int_32(($3 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$3 = *($0 + [1])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$4 }
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$3 = [0]
	
.LOOP $label$5:
	$4 = ($0 + $3)
	$5 = ($3 + [1])
	$3 = $5
	if ( ((int_32)*(($4 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$4 = ($0 + $5)
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$4 = $0
	
.LABEL $label$1
	$0 = ((uint_32)((int_32)CALL $146($4) * (int_32)[733]) / (uint_32)[1000])
	$6 = ($0 + [1])
	$7 = CALL _Znwj($6)
	$8 = ($7 + $0)
	$0 = [0]
	
.LOOP $label$6:
	*(($7 + $0)) = [0]
	$0 = ($0 + [1])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$17 }
	$3 = [0]
	
.LOOP $label$18:
	$9 = $3
	$10 = $4
	if ( CALL $115(int_32(($0 << [24]) >> [24])) ){ goto $label$16 }
	$0 = *($10)
	$11 = *(($0 + [8192]))
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$0 != (int_32)[49]) ){ goto $label$20 }
	$3 = [0]
	if ( ($9 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$3 = [0]
	$0 = $8
	
.LOOP $label$22:
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$21 }
	$4 = (((int_32)*($0) * (int_32)[58]) + $11)
	*($0) = $4
	$3 = ($3 + [1])
	$0 = ($0 + [-1])
	$11 = ((int_32)$4 / (int_32)[256])
	if ( ((uint_32)($4 + [255]) > (uint_32)[510]) ){ goto $label$22 }
	if ( ($3 <= $9) ){ goto $label$22 }
	goto $label$19 
	
.LABEL $label$21
	if ( $11 ){ goto $label$9 }
	
.LABEL $label$19
	$4 = ($10 + [1])
	$0 = *($10 + [1])
	if ( $0 ){ goto $label$18 }
	goto $label$15 
	
.LABEL $label$17
	$3 = [0]
	goto $label$15 
	
.LABEL $label$16
	$3 = $9
	$4 = $10
	
.LABEL $label$15
	$9 = ($7 + $6)
	$0 = ($4 + [-1])
	
.LOOP $label$23:
	$0 = ($0 + [1])
	if ( CALL $115(*($0)) ){ goto $label$23 }
	$4 = [0]
	if ( *($0) ){ goto $label$13 }
	$4 = ($7 + ($6 - $3))
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$12 }
	$0 = $4
	if ( *($4) ){ goto $label$10 }
	$6 = ([0] - $3)
	$0 = [-1]
	$11 = $8
	
.LOOP $label$24:
	$4 = $11
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$11 }
	$0 = ($0 + [-1])
	$11 = ($4 + [1])
	if ( (*((($4 + $6) + [2])) == 0) ){ goto $label$24 }
	$0 = (($4 - $3) + [2])
	$4 = (($11 - $3) + [1])
	goto $label$10 
	
.LABEL $label$14
	$4 = [0]
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$12
	$0 = $9
	goto $label$10 
	
.LABEL $label$11
	$0 = (($4 - $3) + [2])
	$4 = $0
	
.LABEL $label$10
	$3 = (($9 - $4) + $5)
	$11 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $11) >= (uint_32)$3) ){ goto $label$25 }
	$4 = *($1 + [4])
	$4 = *($1)
	$11 = (*($1 + [4]) - $4)
	$10 = CALL _Znwj($3)
	$12 = ($10 + ($4 - $11))
	$6 = ($12 - $11)
	$3 = ($10 + $3)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$26 }
	CALL memcpy($6, $4, $11)
	$4 = *($1)
	
.LABEL $label$26
	*($1) = $6
	*(($1 + [4])) = $12
	*(($1 + [8])) = $3
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	*($2 + [15]) = [0]
	CALL $2($1, $5, ($2 + [15]))
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$27 }
	$6 = ($8 + [1])
	$9 = ($1 + [8])
	$4 = ($1 + [4])
	
.LOOP $label$28:
	$3 = ($0 + [1])
	$11 = *($4)
	if ( ((int_32)$11 == (int_32)*($9)) ){ goto $label$29 }
	*($11) = *($0)
	*($4) = (*($4) + [1])
	$0 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL $3($1, $0)
	$0 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$28 }
	
.LABEL $label$27
	$4 = [1]
	if ( $7 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $117([8448], [8504], [59], [8534])
	
.LABEL $label$8
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($2 + [16])
	(unreachable)
	return $4
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [48])
	$global$0 = $5
	CALL $44($0, $1)
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$1 = *($0)
	*($5 + [8]) = $1
	*($5 + [16]) = $2
	$6 = [0]
	$3 = CALL db_find_i64($1, $2, (int_64)-5918709142380707840, (CASTING uint_64)(uint_32 $3))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $32(($5 + [8]), $3)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($5 + [8])), [11549])
	
.LABEL $label$1
	$3 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($3, [12428])
	$2 = *($0)
	*($5) = $4
	CALL eosio_assert($3, [11632])
	CALL $52(($5 + [8]), $6, $2, $5)
	$4 = *($5 + [32])
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ($5 + [36])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	CALL _ZdlPv($6)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($5 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $4
	
.LABEL $label$3
	*($3) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($5 + [48])
}

void .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [64])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $150($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	CALL read_action_data($4, $3)
	$1 = CALL $58($0)
	*($2 + [4]) = $4
	*($2) = $4
	*($2 + [8]) = ($4 + $3)
	*($2 + [16]) = $2
	*($2 + [28]) = ($1 + [8])
	*($2 + [24]) = $1
	*($2 + [32]) = ($1 + [16])
	*($2 + [36]) = ($1 + [24])
	*($2 + [40]) = ($1 + [40])
	*($2 + [44]) = ($1 + [56])
	*($2 + [48]) = ($1 + [72])
	*($2 + [52]) = ($1 + [80])
	*($2 + [56]) = ($1 + [88])
	CALL $59(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [64])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_64 $8, int_32 $9)
{
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	$10 = ($global$0 - [688])
	$global$0 = $10
	CALL require_auth(*($0))
	CALL eosio_assert([1], [8637])
	$11 = [0]
	$12 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$12 = $13
	$14 = [1]
	$15 = $11
	$11 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$12 = $13
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$14 = ((int_32)$11 < (int_32)[6])
	$15 = ($11 + [1])
	$11 = $15
	if ( $14 ){ goto $label$5 }
	$14 = [1]
	$11 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	CALL eosio_assert($14, [8688])
	CALL eosio_assert([1], [8637])
	$12 = (int_64)5459781
	$11 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$12 = $13
	$14 = [1]
	$15 = $11
	$11 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$12 = $13
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$14 = ((int_32)$11 < (int_32)[6])
	$15 = ($11 + [1])
	$11 = $15
	if ( $14 ){ goto $label$10 }
	$14 = [1]
	$11 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$14 = [0]
	
.LABEL $label$6
	CALL eosio_assert($14, [8688])
	CALL $36(($10 + [648]), $0, [3072])
	CALL $36(($10 + [632]), $0, [256])
	$11 = ((int_64)1397703940 == (int_64)1397703940)
	CALL eosio_assert($11, [11913])
	CALL eosio_assert([1], [11956])
	CALL eosio_assert([1], [11975])
	CALL eosio_assert(((int_64)*($10 + [656]) == (int_64)1397703940), [11913])
	$12 = *($10 + [648])
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427389904), [11956])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427385904), [11975])
	$16 = *($6 + [8])
	CALL eosio_assert(((int_64)$16 == (int_64)1397703940), [11913])
	$17 = *($6)
	$13 = ((int_64)((int_64)$12 + (int_64)$17) + (int_64)2000)
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [11956])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [11975])
	$12 = *($10 + [632])
	CALL __multi3(($10 + [32]), $12, (int_64)$12 >> (int_64)63), (int_64)5, (int_64)0)
	$18 = *($10 + [640])
	$12 = *((($10 + [32]) + [8]))
	$19 = *($10 + [32])
	CALL eosio_assert(( (uint_64)($19 <= (int_64)4611686018427387904) ? ((int_64)$12 < (int_64)0) : (int_64)($12 == 0) ), [11993])
	CALL eosio_assert(( ((uint_64)$19 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$12 > (int_64)-1) : ((int_64)$12 == (int_64)-1) ), [12017])
	CALL eosio_assert(((int_64)$18 == (int_64)1397703940), [11913])
	$12 = ((int_64)$13 + (int_64)$19)
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [11956])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [11975])
	CALL eosio_assert(((int_64)1397703940 == (int_64)*($5 + [8])), [11854])
	CALL eosio_assert(((int_64)$12 <= (int_64)*($5)), [11460])
	CALL eosio_assert($11, [11913])
	CALL eosio_assert([1], [11956])
	CALL eosio_assert([1], [11975])
	CALL eosio_assert(((int_64)*($10 + [656]) == (int_64)1397703940), [11913])
	$12 = *($10 + [648])
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427389904), [11956])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427385904), [11975])
	CALL eosio_assert(((int_64)*($10 + [640]) == (int_64)1397703940), [11913])
	$20 = ((int_64)((int_64)$12 + (int_64)*($10 + [632])) + (int_64)2000)
	CALL eosio_assert(((int_64)$20 > (int_64)-4611686018427387904), [11956])
	CALL eosio_assert(((int_64)$20 < (int_64)4611686018427387904), [11975])
	if ( ($7 == 0) ){ goto $label$24 }
	$12 = (CASTING int_64)(int_32 $9)
	$12 = ((int_64)$17 / (int_64)100)
	CALL __multi3(($10 + [16]), $12, (int_64)$12 >> (int_64)63), $12, (int_64)$12 >> (int_64)63))
	CALL eosio_assert([1], [12693])
	CALL eosio_assert([1], [12708])
	$12 = *((($10 + [16]) + [8]))
	$17 = *($10 + [16])
	CALL eosio_assert(( (uint_64)($17 <= (int_64)4611686018427387904) ? ((int_64)$12 < (int_64)0) : (int_64)($12 == 0) ), [11993])
	CALL eosio_assert(( ((uint_64)$17 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$12 > (int_64)-1) : ((int_64)$12 == (int_64)-1) ), [12017])
	$13 = *($0)
	$12 = (int_64)6
	
.LOOP $label$25:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$25 }
	*($10 + [352]) = (int_64)3617214756542218240
	*($10 + [344]) = $13
	$12 = (int_64)0
	$19 = (int_64)59
	$11 = [8621]
	$18 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$31 }
	$14 = *($11)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$14 = ($14 + [-91])
	goto $label$29 
	
.LABEL $label$31
	$13 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$14 = ( ($14 + [-48]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$27
	$11 = ($11 + [1])
	$19 = ((int_64)$19 + (int_64)4294967291)
	$18 = ((int_64)$13 | (int_64)$18)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$26 }
	$12 = (int_64)0
	$19 = (int_64)59
	$11 = [12471]
	$21 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$37 }
	$14 = *($11)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$14 = ($14 + [-91])
	goto $label$35 
	
.LABEL $label$37
	$13 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$14 = ( ($14 + [-48]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$33
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$21 = ((int_64)$13 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)4294967291)
	if ( ((int_64)$19 != (int_64)55834574842) ){ goto $label$32 }
	*(($10 + [584])) = [0]
	*($10 + [576]) = (int_64)0
	$11 = CALL $146([12480])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$23 }
	*($10 + [576]) = ($11 << [1])
	$14 = (($10 + [576]) | [1])
	if ( $11 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$8 = $16
	goto $label$11 
	
.LABEL $label$23
	$15 = (($11 + [16]) & [-16])
	$14 = CALL _Znwj($15)
	*($10 + [576]) = ($15 | [1])
	*($10 + [584]) = $14
	*($10 + [580]) = $11
	
.LABEL $label$22
	CALL memcpy($14, [12480], $11)
	
.LABEL $label$21
	*(($14 + $11)) = [0]
	*($10 + [424]) = $2
	CALL $60(($10 + [504]), ($10 + [424]))
	$11 = *($10 + [504])
	$14 = ($11 & [1])
	$11 = CALL $111(($10 + [576]), ( *($10 + [512]) ? (($10 + [504]) | [1]) : $14 ), ( *($10 + [508]) ? uint_32($11 >> [1]) : $14 ))
	$14 = ($11 + [8])
	*((($10 + [168]) + [8])) = *($14)
	*($10 + [168]) = *($11)
	*($11) = (int_64)0
	*($14) = [0]
	*((($10 + [464]) + [8])) = [0]
	*($10 + [464]) = (int_64)0
	$11 = CALL $146([12561])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$40 }
	*($10 + [464]) = ($11 << [1])
	$15 = (($10 + [464]) | [1])
	$14 = $15
	if ( $11 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$15 = (($11 + [16]) & [-16])
	$14 = CALL _Znwj($15)
	*($10 + [464]) = ($15 | [1])
	*($10 + [472]) = $14
	*($10 + [468]) = $11
	$15 = (($10 + [464]) | [1])
	
.LABEL $label$39
	CALL memcpy($14, [12561], $11)
	
.LABEL $label$38
	*(($14 + $11)) = [0]
	$11 = *($10 + [464])
	$14 = ($11 & [1])
	$11 = CALL $111(($10 + [168]), ( *($10 + [472]) ? $15 : $14 ), ( *($10 + [468]) ? uint_32($11 >> [1]) : $14 ))
	$12 = *($11)
	*($11) = (int_64)0
	$14 = *($11 + [8])
	*($11 + [8]) = [0]
	*(($10 + [232])) = $16
	*(($10 + [248])) = $14
	*($10 + [216]) = $8
	*($10 + [208]) = *($0)
	*($10 + [224]) = $17
	*($10 + [240]) = $12
	$11 = CALL $61(($10 + [104]), ($10 + [344]), $18, $21, ($10 + [208]))
	CALL $62(($10 + [304]), $11)
	$14 = *($10 + [304])
	CALL send_inline($14, (*($10 + [308]) - $14))
	$14 = *($10 + [304])
	if ( ($14 == 0) ){ goto $label$41 }
	*($10 + [308]) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$41
	$14 = *($11 + [28])
	if ( ($14 == 0) ){ goto $label$42 }
	*(($11 + [32])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$42
	$14 = *($11 + [16])
	if ( ($14 == 0) ){ goto $label$43 }
	*(($11 + [20])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$43
	if ( (*($10 + [240]) & [1]) ){ goto $label$45 }
	if ( (*($10 + [464]) & [1]) ){ goto $label$44 }
	goto $label$18 
	
.LABEL $label$45
	CALL _ZdlPv(*(($10 + [248])))
	if ( ((*($10 + [464]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$44
	CALL _ZdlPv(*(($10 + [472])))
	$11 = [1]
	if ( ((*($10 + [168]) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$20
	CALL $105(($10 + [576]))
	
.LABEL $label$19
	CALL $105(($10 + [464]))
	
.LABEL $label$18
	$11 = [1]
	if ( (*($10 + [168]) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($10 + [504]) & $11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($10 + [176]))
	if ( ((*($10 + [504]) & $11) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($10 + [512])))
	if ( (*($10 + [576]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( ((*($10 + [576]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($10 + [584]))
	
.LABEL $label$12
	$12 = *($6)
	$8 = *(($6 + [8]))
	CALL eosio_assert(((int_64)$16 == (int_64)$8), [12921])
	$17 = (int_64)
	CALL eosio_assert(((int_64)$17($12 - $17)) > (int_64)-4611686018427387904), [12969])
	CALL eosio_assert(((int_64)$17 < (int_64)4611686018427387904), [12991])
	
.LABEL $label$11
	$19 = *($0)
	$12 = (int_64)6
	
.LOOP $label$46:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$46 }
	$12 = (int_64)5
	
.LOOP $label$47:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$47 }
	$12 = (int_64)6
	
.LOOP $label$48:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$48 }
	$12 = *($10 + [632])
	CALL __multi3($10, $12, (int_64)$12 >> (int_64)63), (int_64)3, (int_64)0)
	$18 = *((($10 + [632]) + [8]))
	$12 = *(($10 + [8]))
	$13 = *($10)
	CALL eosio_assert(( (uint_64)($13 <= (int_64)4611686018427387904) ? ((int_64)$12 < (int_64)0) : (int_64)($12 == 0) ), [11993])
	CALL eosio_assert(( ((uint_64)$13 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$12 > (int_64)-1) : ((int_64)$12 == (int_64)-1) ), [12017])
	*((($10 + [104]) + [24])) = $18
	*(($14 = (($10 + [208]) + [24]))) = [0]
	*($10 + [120]) = $13
	*($10 + [208]) = (int_64)6138663577826885632
	*($10 + [216]) = (int_64)4520896354024685568
	*($10 + [224]) = (int_64)0
	$12 = *($0)
	*($10 + [104]) = $12
	*($10 + [112]) = $12
	*(($11 = CALL _Znwj([16]))) = $19
	*($11 + [8]) = (int_64)3617214756542218240
	*(($10 + [244])) = [0]
	$15 = ($11 + [16])
	*($14) = $15
	*(($10 + [228])) = $15
	*($10 + [224]) = $11
	*($10 + [236 align=4]) = (int_64)0
	CALL $37(($10 + [236]), [32])
	$11 = *((($10 + [208]) + [32]))
	$14 = *($10 + [236])
	*($10 + [348]) = $14
	*($10 + [344]) = $14
	*($10 + [352]) = $11
	*($10 + [168]) = ($10 + [344])
	*($10 + [304]) = ($10 + [104])
	CALL $63(($10 + [304]), ($10 + [168]))
	CALL $62(($10 + [344]), ($10 + [208]))
	$11 = *($10 + [344])
	CALL send_inline($11, (*($10 + [348]) - $11))
	$11 = *($10 + [344])
	if ( ($11 == 0) ){ goto $label$49 }
	*($10 + [348]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$49
	$11 = *($10 + [236])
	if ( ($11 == 0) ){ goto $label$50 }
	*(($10 + [240])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$50
	$11 = *($10 + [224])
	if ( ($11 == 0) ){ goto $label$51 }
	*(($10 + [228])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$51
	*($10 + [624]) = [0]
	$12 = (int_64)0
	*($10 + [616]) = (int_64)0
	CALL eosio_assert(CALL $1(( *($4 + [8]) ? ($4 + [1]) : (*($4) & [1]) ), ($10 + [616])), [11294])
	CALL eosio_assert(((int_32)(*($10 + [620]) - *($10 + [616])) == (int_32)[37]), [11353])
	CALL memmove(($10 + [576]), *($10 + [616]), [33])
	CALL ripemd160(($10 + [576]), [33], ($10 + [544]))
	CALL eosio_assert((CALL $145(($10 + [544]), (*($10 + [620]) + [-4]), [4]) == 0), [11404])
	$14 = (($10 + [576]) + [32])
	*(($11 = (($10 + [504]) + [32]))) = *($14)
	$4 = (($10 + [576]) + [24])
	*(($15 = (($10 + [504]) + [24]))) = *($4)
	$9 = (($10 + [576]) + [16])
	*(($7 = (($10 + [504]) + [16]))) = *($9)
	$23 = (($10 + [576]) + [8])
	*(($22 = (($10 + [504]) + [8]))) = *($23)
	*($10 + [504]) = *($10 + [576])
	*(($24 = (($10 + [464]) + [32]))) = *($11)
	*(($11 = (($10 + [464]) + [24]))) = *($15)
	*(($15 = (($10 + [464]) + [16]))) = *($7)
	*(($7 = (($10 + [464]) + [8]))) = *($22)
	*($10 + [464]) = *($10 + [504])
	*(($22 = (($10 + [424]) + [32]))) = *($14)
	*(($14 = (($10 + [424]) + [24]))) = *($4)
	*(($4 = (($10 + [424]) + [16]))) = *($9)
	*(($9 = (($10 + [424]) + [8]))) = *($23)
	*($10 + [424]) = *($10 + [576])
	*(($23 = (($10 + [384]) + [32]))) = *($22)
	*(($22 = (($10 + [384]) + [24]))) = *($14)
	*(($25 = (($10 + [384]) + [16]))) = *($4)
	*(($4 = (($10 + [384]) + [8]))) = *($9)
	*($10 + [384]) = *($10 + [424])
	*($10 + [344]) = [1]
	*(($14 = (($10 + [344]) + [12]))) = [0]
	*(($9 = ($10 + [217]))) = *($7)
	*(($7 = ($10 + [225]))) = *($15)
	*(($26 = (($10 + [208]) + [25]))) = *($11)
	*(($27 = (($10 + [208]) + [33]))) = *($24)
	*($10 + [208]) = [0]
	*($10 + [242]) = [1]
	*($10 + [348 align=4]) = (int_64)0
	*($10 + [209 align=1]) = *($10 + [464])
	$11 = CALL _Znwj([36])
	*((($10 + [344]) + [24])) = (int_64)0
	*((($10 + [344]) + [32])) = (int_64)0
	$24 = ($11 + [36])
	*($14) = $24
	*($11) = *($10 + [208])
	$15 = (($10 + [208]) + [8])
	*(($11 + [8])) = *($15)
	$14 = (($10 + [208]) + [16])
	*(($11 + [16])) = *($14)
	$28 = (($10 + [208]) + [24])
	*(($11 + [24])) = *($28)
	$29 = (($10 + [208]) + [32])
	*(($11 + [32])) = *($29)
	*((($10 + [344]) + [8])) = $24
	*($10 + [348]) = $11
	*($10 + [360]) = (int_64)0
	*($10 + [304]) = [1]
	*(($24 = (($10 + [304]) + [12]))) = [0]
	*($9) = *($4)
	*($7) = *($25)
	*($26) = *($22)
	*($27) = *($23)
	*($10 + [208]) = [0]
	*($10 + [242]) = [1]
	*($10 + [308 align=4]) = (int_64)0
	*($10 + [209 align=1]) = *($10 + [384])
	$11 = CALL _Znwj([36])
	*((($10 + [304]) + [24])) = (int_64)0
	*((($10 + [304]) + [32])) = (int_64)0
	$4 = ($11 + [36])
	*($24) = $4
	*($11) = *($10 + [208])
	*(($11 + [8])) = *($15)
	*(($11 + [16])) = *($14)
	*(($11 + [24])) = *($28)
	*(($11 + [32])) = *($29)
	*((($10 + [304]) + [8])) = $4
	*($10 + [308]) = $11
	*($10 + [320]) = (int_64)0
	*($10 + [216]) = $2
	*($10 + [208]) = $3
	$4 = CALL $64($14, ($10 + [344]))
	$7 = CALL $64(($10 + [264]), ($10 + [304]))
	$19 = (int_64)59
	$11 = [12572]
	$18 = (int_64)0
	
.LOOP $label$52:
	if ( ((uint_64)$12 > (uint_64)(int_64)8) ){ goto $label$57 }
	$14 = *($11)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$14 = ($14 + [-91])
	goto $label$55 
	
.LABEL $label$57
	$13 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$56
	$14 = ( ($14 + [-48]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$54
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$53
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$18 = ((int_64)$13 | (int_64)$18)
	$19 = ((int_64)$19 + (int_64)4294967291)
	if ( ((int_64)$19 != (int_64)55834574842) ){ goto $label$52 }
	$12 = (int_64)5
	
.LOOP $label$58:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$58 }
	$12 = (int_64)0
	$19 = (int_64)59
	$11 = [12582]
	$21 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$12 > (uint_64)(int_64)9) ){ goto $label$64 }
	$14 = *($11)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$14 = ($14 + [-91])
	goto $label$62 
	
.LABEL $label$64
	$13 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$14 = ( ($14 + [-48]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$60
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$21 = ((int_64)$13 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)4294967291)
	if ( ((int_64)$19 != (int_64)55834574842) ){ goto $label$59 }
	$14 = [0]
	*(($9 = ($10 + [128]))) = [0]
	*($10 + [112]) = $21
	*($10 + [104]) = (int_64)6138663577826885632
	*($10 + [120]) = (int_64)0
	*(($11 = CALL _Znwj([16]))) = $3
	*($11 + [8]) = $18
	*(($10 + [140])) = [0]
	$22 = ($11 + [16])
	*($9) = $22
	*(($10 + [124])) = $22
	*($10 + [120]) = $11
	*($10 + [132 align=4]) = (int_64)0
	*($10 + [48]) = [0]
	*($10 + [72]) = ($10 + [48])
	*($10 + [172]) = $15
	*($10 + [176]) = $4
	*($10 + [180]) = $7
	*($10 + [168]) = ($10 + [208])
	CALL $65(($10 + [168]), ($10 + [72]))
	$11 = *($10 + [48])
	if ( ($11 == 0) ){ goto $label$66 }
	$9 = ($10 + [132])
	CALL $37($9, $11)
	$14 = *(($10 + [136]))
	$11 = *($9)
	goto $label$65 
	
.LABEL $label$66
	$11 = [0]
	
.LABEL $label$65
	*($10 + [76]) = $11
	*($10 + [72]) = $11
	*($10 + [80]) = $14
	*($10 + [48]) = ($10 + [72])
	*($10 + [172]) = $15
	*($10 + [176]) = $4
	*($10 + [180]) = $7
	*($10 + [168]) = ($10 + [208])
	CALL $66(($10 + [168]), ($10 + [48]))
	CALL $62(($10 + [168]), ($10 + [104]))
	$11 = *($10 + [168])
	CALL send_inline($11, (*($10 + [172]) - $11))
	$11 = *($10 + [168])
	if ( ($11 == 0) ){ goto $label$67 }
	*($10 + [172]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$67
	$11 = *($10 + [132])
	if ( ($11 == 0) ){ goto $label$68 }
	*(($10 + [136])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$68
	$11 = *($10 + [120])
	if ( ($11 == 0) ){ goto $label$69 }
	*(($10 + [124])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$69
	$13 = *($0)
	$12 = (int_64)6
	
.LOOP $label$70:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$70 }
	$12 = (int_64)5
	
.LOOP $label$71:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$71 }
	$12 = (int_64)6
	
.LOOP $label$72:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$72 }
	*(($14 = (($10 + [104]) + [24]))) = [0]
	*((($10 + [168]) + [24])) = *(($10 + [656]))
	*($10 + [176]) = $2
	*($10 + [168]) = $13
	*($10 + [104]) = (int_64)6138663577826885632
	*($10 + [112]) = (int_64)4520896354024685568
	*($10 + [120]) = (int_64)0
	*($10 + [184]) = *($10 + [648])
	*(($11 = CALL _Znwj([16]))) = $13
	*($11 + [8]) = (int_64)3617214756542218240
	*(($10 + [140])) = [0]
	$15 = ($11 + [16])
	*($14) = $15
	*(($10 + [124])) = $15
	*($10 + [120]) = $11
	*($10 + [132 align=4]) = (int_64)0
	CALL $37(($10 + [132]), [32])
	$11 = *((($10 + [104]) + [32]))
	$14 = *($10 + [132])
	*($10 + [76]) = $14
	*($10 + [72]) = $14
	*($10 + [80]) = $11
	*($10 + [672]) = ($10 + [72])
	*($10 + [48]) = ($10 + [168])
	CALL $63(($10 + [48]), ($10 + [672]))
	CALL $62(($10 + [72]), ($10 + [104]))
	$11 = *($10 + [72])
	CALL send_inline($11, (*($10 + [76]) - $11))
	$11 = *($10 + [72])
	if ( ($11 == 0) ){ goto $label$73 }
	*($10 + [76]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$73
	$11 = *($10 + [132])
	if ( ($11 == 0) ){ goto $label$74 }
	*(($10 + [136])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$74
	$11 = *($10 + [120])
	if ( ($11 == 0) ){ goto $label$75 }
	*(($10 + [124])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$75
	$13 = *($0)
	$12 = (int_64)6
	
.LOOP $label$76:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$76 }
	$12 = (int_64)5
	
.LOOP $label$77:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$77 }
	$12 = (int_64)6
	
.LOOP $label$78:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$78 }
	*(($14 = (($10 + [104]) + [24]))) = [0]
	*((($10 + [168]) + [24])) = *(($10 + [640]))
	*($10 + [176]) = $3
	*($10 + [168]) = $13
	*($10 + [104]) = (int_64)6138663577826885632
	*($10 + [112]) = (int_64)4520896354024685568
	*($10 + [120]) = (int_64)0
	*($10 + [184]) = *($10 + [632])
	*(($11 = CALL _Znwj([16]))) = $13
	*($11 + [8]) = (int_64)3617214756542218240
	*(($10 + [140])) = [0]
	$15 = ($11 + [16])
	*($14) = $15
	*(($10 + [124])) = $15
	*($10 + [120]) = $11
	*($10 + [132 align=4]) = (int_64)0
	CALL $37(($10 + [132]), [32])
	$11 = *((($10 + [104]) + [32]))
	$14 = *($10 + [132])
	*($10 + [76]) = $14
	*($10 + [72]) = $14
	*($10 + [80]) = $11
	*($10 + [672]) = ($10 + [72])
	*($10 + [48]) = ($10 + [168])
	CALL $63(($10 + [48]), ($10 + [672]))
	CALL $62(($10 + [72]), ($10 + [104]))
	$11 = *($10 + [72])
	CALL send_inline($11, (*($10 + [76]) - $11))
	$11 = *($10 + [72])
	if ( ($11 == 0) ){ goto $label$79 }
	*($10 + [76]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$79
	$11 = *($10 + [132])
	if ( ($11 == 0) ){ goto $label$80 }
	*(($10 + [136])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$80
	$11 = *($10 + [120])
	if ( ($11 == 0) ){ goto $label$81 }
	*(($10 + [124])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$81
	$21 = *($0)
	$12 = (int_64)6
	
.LOOP $label$82:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$82 }
	$12 = (int_64)5
	
.LOOP $label$83:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$83 }
	$12 = (int_64)0
	$19 = (int_64)59
	$11 = [12593]
	$18 = (int_64)0
	
.LOOP $label$84:
	if ( ((uint_64)$12 > (uint_64)(int_64)9) ){ goto $label$89 }
	$14 = *($11)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$88 }
	$14 = ($14 + [-91])
	goto $label$87 
	
.LABEL $label$89
	$13 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$88
	$14 = ( ($14 + [-48]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$87
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$86
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$85
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$18 = ((int_64)$13 | (int_64)$18)
	$19 = ((int_64)$19 + (int_64)4294967291)
	if ( ((int_64)$19 != (int_64)55834574842) ){ goto $label$84 }
	*((($10 + [104]) + [24])) = (int_64)1397703940
	*(($10 + [144])) = (int_64)1397703940
	*(($14 = (($10 + [168]) + [24]))) = [0]
	*($10 + [112]) = $2
	*($10 + [104]) = $21
	*($10 + [120]) = (int_64)500
	*($10 + [136]) = (int_64)1500
	*($10 + [152]) = [1]
	*($10 + [168]) = (int_64)6138663577826885632
	*($10 + [176]) = $18
	*($10 + [184]) = (int_64)0
	*(($11 = CALL _Znwj([16]))) = $21
	*($11 + [8]) = (int_64)3617214756542218240
	*(($10 + [204])) = [0]
	$15 = ($11 + [16])
	*($14) = $15
	*(($10 + [188])) = $15
	*($10 + [184]) = $11
	*($10 + [196 align=4]) = (int_64)0
	CALL $37(($10 + [196]), [49])
	$11 = *(($10 + [200]))
	$14 = *($10 + [196])
	*($10 + [76]) = $14
	*($10 + [72]) = $14
	*($10 + [80]) = $11
	*($10 + [672]) = ($10 + [72])
	*($10 + [48]) = ($10 + [104])
	CALL $67(($10 + [48]), ($10 + [672]))
	CALL $62(($10 + [72]), ($10 + [168]))
	$11 = *($10 + [72])
	CALL send_inline($11, (*($10 + [76]) - $11))
	$11 = *($10 + [72])
	if ( ($11 == 0) ){ goto $label$90 }
	*($10 + [76]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$90
	$11 = *($10 + [196])
	if ( ($11 == 0) ){ goto $label$91 }
	*(($10 + [200])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$91
	$11 = *($10 + [184])
	if ( ($11 == 0) ){ goto $label$92 }
	*(($10 + [188])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$92
	$12 = *($5)
	$3 = *(($5 + [8]))
	CALL eosio_assert(((int_64)1397703940 == (int_64)$3), [12921])
	$12 = (int_64)
	CALL eosio_assert(((int_64)$12($12 - $20)) > (int_64)-4611686018427387904), [12969])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [12991])
	CALL eosio_assert(((int_64)$3 == (int_64)*(($6 + [8]))), [12921])
	$12 = (int_64)
	CALL eosio_assert(((int_64)$12($12 - *($6))) > (int_64)-4611686018427387904), [12969])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [12991])
	$19 = *((($10 + [632]) + [8]))
	$13 = *($10 + [632])
	CALL eosio_assert(((int_64)$13 < (int_64)1152921504606846976), [11993])
	CALL eosio_assert(((int_64)$13 > (int_64)-1152921504606846976), [12017])
	CALL eosio_assert(((int_64)$19 == (int_64)$3), [12921])
	$20 = (int_64)
	CALL eosio_assert(((int_64)$20($12 - ((int_64)$13 << (int_64)2))) > (int_64)-4611686018427387904), [12969])
	CALL eosio_assert(((int_64)$20 < (int_64)4611686018427387904), [12991])
	CALL eosio_assert([1], [8637])
	$12 = (int_64)5459781
	$11 = [0]
	
.LOOP $label$95:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$94 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$96 }
	$12 = $13
	$14 = [1]
	$15 = $11
	$11 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$95 }
	goto $label$93 
	
.LABEL $label$96
	$12 = $13
	
.LOOP $label$97:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$94 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$14 = ((int_32)$11 < (int_32)[6])
	$15 = ($11 + [1])
	$11 = $15
	if ( $14 ){ goto $label$97 }
	$14 = [1]
	$11 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$95 }
	goto $label$93 
	
.LABEL $label$94
	$14 = [0]
	
.LABEL $label$93
	CALL eosio_assert($14, [8688])
	CALL eosio_assert(((int_64)$3 == (int_64)1397703940), [11854])
	if ( ((int_64)$20 < (int_64)1) ){ goto $label$99 }
	$13 = *($0)
	$12 = (int_64)6
	
.LOOP $label$100:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$100 }
	*($10 + [80]) = (int_64)3617214756542218240
	*($10 + [72]) = $13
	$12 = (int_64)0
	$19 = (int_64)59
	$11 = [8621]
	$18 = (int_64)0
	
.LOOP $label$101:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$106 }
	$14 = *($11)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$105 }
	$14 = ($14 + [-91])
	goto $label$104 
	
.LABEL $label$106
	$13 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$105
	$14 = ( ($14 + [-48]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$104
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$103
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$102
	$11 = ($11 + [1])
	$19 = ((int_64)$19 + (int_64)4294967291)
	$18 = ((int_64)$13 | (int_64)$18)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$101 }
	$12 = (int_64)0
	$19 = (int_64)59
	$11 = [12471]
	$21 = (int_64)0
	
.LOOP $label$107:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$112 }
	$14 = *($11)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$111 }
	$14 = ($14 + [-91])
	goto $label$110 
	
.LABEL $label$112
	$13 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$109 }
	goto $label$108 
	
.LABEL $label$111
	$14 = ( ($14 + [-48]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$110
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$109
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$108
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$21 = ((int_64)$13 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)4294967291)
	if ( ((int_64)$19 != (int_64)55834574842) ){ goto $label$107 }
	*(($10 + [680])) = [0]
	*($10 + [672]) = (int_64)0
	$11 = CALL $146([12604])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$98 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$115 }
	*($10 + [672]) = ($11 << [1])
	$14 = (($10 + [672]) | [1])
	if ( $11 ){ goto $label$114 }
	goto $label$113 
	
.LABEL $label$115
	$15 = (($11 + [16]) & [-16])
	$14 = CALL _Znwj($15)
	*($10 + [672]) = ($15 | [1])
	*($10 + [680]) = $14
	*($10 + [676]) = $11
	
.LABEL $label$114
	CALL memcpy($14, [12604], $11)
	
.LABEL $label$113
	*(($14 + $11)) = [0]
	*(($10 + [128])) = $3
	$11 = ($10 + [680])
	*(($10 + [144])) = *($11)
	*($11) = [0]
	*($10 + [112]) = $2
	*($10 + [120]) = $20
	*($10 + [104]) = *($0)
	*($10 + [136]) = *($10 + [672])
	*($10 + [672]) = (int_64)0
	$11 = CALL $61(($10 + [168]), ($10 + [72]), $18, $21, ($10 + [104]))
	CALL $62(($10 + [48]), $11)
	$14 = *($10 + [48])
	CALL send_inline($14, (*($10 + [52]) - $14))
	$14 = *($10 + [48])
	if ( ($14 == 0) ){ goto $label$116 }
	*($10 + [52]) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$116
	$14 = *($11 + [28])
	if ( ($14 == 0) ){ goto $label$117 }
	*(($11 + [32])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$117
	$14 = *($11 + [16])
	if ( ($14 == 0) ){ goto $label$118 }
	*(($11 + [20])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$118
	if ( ((*(($10 + [136])) & [1]) == 0) ){ goto $label$119 }
	CALL _ZdlPv(*(($10 + [144])))
	
.LABEL $label$119
	if ( ((*($10 + [672]) & [1]) == 0) ){ goto $label$99 }
	CALL _ZdlPv(*(($10 + [680])))
	
.LABEL $label$99
	$13 = *($0)
	$12 = (int_64)6
	
.LOOP $label$120:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$120 }
	$12 = (int_64)5
	
.LOOP $label$121:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$121 }
	$12 = (int_64)6
	
.LOOP $label$122:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$122 }
	$12 = (int_64)7
	
.LOOP $label$123:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$123 }
	*(($14 = (($10 + [104]) + [24]))) = [0]
	*((($10 + [168]) + [24])) = *(($10 + [640]))
	*($10 + [176]) = (int_64)-4157661367865704448
	*($10 + [168]) = $13
	*($10 + [184]) = *($10 + [632])
	*($10 + [104]) = (int_64)6138663577826885632
	*($10 + [112]) = (int_64)4520896354024685568
	*($10 + [120]) = (int_64)0
	*(($11 = CALL _Znwj([16]))) = $13
	*($11 + [8]) = (int_64)3617214756542218240
	*(($10 + [140])) = [0]
	$15 = ($11 + [16])
	*($14) = $15
	*(($10 + [124])) = $15
	*($10 + [120]) = $11
	*($10 + [132 align=4]) = (int_64)0
	CALL $37(($10 + [132]), [32])
	$11 = *((($10 + [104]) + [32]))
	$14 = *($10 + [132])
	*($10 + [76]) = $14
	*($10 + [72]) = $14
	*($10 + [80]) = $11
	*($10 + [672]) = ($10 + [72])
	*($10 + [48]) = ($10 + [168])
	CALL $63(($10 + [48]), ($10 + [672]))
	CALL $62(($10 + [72]), ($10 + [104]))
	$11 = *($10 + [72])
	CALL send_inline($11, (*($10 + [76]) - $11))
	$11 = *($10 + [72])
	if ( ($11 == 0) ){ goto $label$124 }
	*($10 + [76]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$124
	$11 = *($10 + [132])
	if ( ($11 == 0) ){ goto $label$125 }
	*(($10 + [136])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$125
	$11 = *($10 + [120])
	if ( ($11 == 0) ){ goto $label$126 }
	*(($10 + [124])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$126
	$12 = CALL current_time()
	*(($10 + [132])) = (int_64)0
	*(($10 + [148])) = (int_64)0
	*(($10 + [156])) = (int_64)0
	*($10 + [116]) = [0]
	*($10 + [120]) = [0]
	*($10 + [124 align=4]) = (int_64)0
	*($10 + [140 align=4]) = (int_64)0
	*($10 + [104]) = ((CASTING uint_32)(uint_64 ((uint_64)$12 / (uint_64)(int_64)1000000)) + [60])
	*(($10 + [96])) = $8
	*($10 + [80]) = $2
	*($10 + [72]) = $1
	*($10 + [88]) = $17
	$14 = ($10 + [80])
	$13 = *($0)
	$12 = (int_64)6
	
.LOOP $label$127:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$127 }
	$12 = (int_64)7
	
.LOOP $label$128:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$128 }
	*(($15 = ($10 + [192]))) = [0]
	*($10 + [176]) = (int_64)-1282848418007351296
	*($10 + [168]) = $13
	*($10 + [184]) = (int_64)0
	*(($11 = CALL _Znwj([16]))) = $13
	*($11 + [8]) = (int_64)3617214756542218240
	*((($10 + [168]) + [36])) = [0]
	$6 = ($11 + [16])
	*($15) = $6
	*(($10 + [188])) = $6
	*($10 + [184]) = $11
	*($10 + [196 align=4]) = (int_64)0
	CALL $37(($10 + [196]), [32])
	$11 = *((($10 + [168]) + [32]))
	$15 = *($10 + [196])
	*($10 + [676]) = $15
	*($10 + [672]) = $15
	*($10 + [680]) = $11
	*($10 + [664]) = ($10 + [672])
	*($10 + [52]) = $14
	*($10 + [56]) = (($10 + [72]) + [16])
	*($10 + [48]) = ($10 + [72])
	CALL $68(($10 + [48]), ($10 + [664]))
	$11 = (($10 + [104]) + [40])
	$14 = *($11)
	if ( ((uint_32)$14 >= (uint_32)*(($10 + [148]))) ){ goto $label$130 }
	CALL $39($14, ($10 + [168]))
	*($11) = (*($11) + [40])
	goto $label$129 
	
.LABEL $label$130
	CALL $40((($10 + [104]) + [36]), ($10 + [168]))
	
.LABEL $label$129
	$12 = *($0)
	$13 = CALL current_time()
	*($10 + [56]) = $12
	*($10 + [48]) = ((int_64)$13 + (int_64)1)
	$12 = *($0)
	CALL $41(($10 + [672]), ($10 + [104]))
	$11 = *($10 + [672])
	CALL send_deferred(($10 + [48]), $12, $11, (*($10 + [676]) - $11), [1])
	$11 = *($10 + [672])
	if ( ($11 == 0) ){ goto $label$131 }
	*($10 + [676]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$131
	$11 = *($10 + [196])
	if ( ($11 == 0) ){ goto $label$132 }
	*(($10 + [200])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$132
	$11 = *($10 + [184])
	if ( ($11 == 0) ){ goto $label$133 }
	*(($10 + [188])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$133
	CALL $42(($10 + [104]))
	$11 = *(($10 + [292]))
	if ( ($11 == 0) ){ goto $label$134 }
	*(($10 + [296])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$134
	$11 = *(($10 + [280]))
	if ( ($11 == 0) ){ goto $label$135 }
	*(($10 + [284])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$135
	$11 = *(($10 + [268]))
	if ( ($11 == 0) ){ goto $label$136 }
	*(($10 + [272])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$136
	$11 = *(($10 + [252]))
	if ( ($11 == 0) ){ goto $label$137 }
	*(($10 + [256])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$137
	$11 = *(($10 + [240]))
	if ( ($11 == 0) ){ goto $label$138 }
	*(($10 + [244])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$138
	$11 = *(($10 + [228]))
	if ( ($11 == 0) ){ goto $label$139 }
	*(($10 + [232])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$139
	$11 = *(($10 + [332]))
	if ( ($11 == 0) ){ goto $label$140 }
	*(($10 + [336])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$140
	$11 = *(($10 + [320]))
	if ( ($11 == 0) ){ goto $label$141 }
	*(($10 + [324])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$141
	$11 = *($10 + [308])
	if ( ($11 == 0) ){ goto $label$142 }
	*(($10 + [312])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$142
	$11 = *(($10 + [372]))
	if ( ($11 == 0) ){ goto $label$143 }
	*(($10 + [376])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$143
	$11 = *(($10 + [360]))
	if ( ($11 == 0) ){ goto $label$144 }
	*(($10 + [364])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$144
	$11 = *($10 + [348])
	if ( ($11 == 0) ){ goto $label$145 }
	*(($10 + [352])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$145
	$11 = *($10 + [616])
	if ( ($11 == 0) ){ goto $label$146 }
	*($10 + [620]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$146
	$global$0 = ($10 + [688])
	return (unreachable)
	
.LABEL $label$98
	CALL $105(($10 + [672]))
	(unreachable)
	(unreachable)
}

void .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $150($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	CALL read_action_data($4, $3)
	*(($0 + [32])) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [8637])
	$5 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$5 = $6
	$7 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$5 = $6
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [8688])
	*($2 + [12]) = $4
	*($2 + [8]) = $4
	*($2 + [16]) = ($4 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [32]) = $0
	*($2 + [36]) = ($0 + [8])
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [24])
	CALL $49(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL $44($0, $1)
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$1 = *($0)
	*($4) = $1
	*($4 + [8]) = $2
	$0 = [0]
	$3 = CALL db_find_i64($1, $2, (int_64)-5918709142380707840, (CASTING uint_64)(uint_32 $3))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $32($4, $3)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)$4), [11549])
	
.LABEL $label$1
	$3 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($3, [12428])
	CALL eosio_assert($3, [12197])
	CALL eosio_assert($3, [12231])
	$3 = CALL db_next_i64(*($0 + [36]), ($4 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $32($4, $3)
	
.LABEL $label$2
	CALL $53($4, $0)
	$5 = *($4 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($4 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $150($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*(($0 + [36])) = [0]
	*($0 + [28 align=4]) = (int_64)0
	*($2 + [4]) = $1
	*($2) = $1
	*($2 + [8]) = ($1 + $3)
	*($2 + [16]) = $2
	*($2 + [28]) = ($0 + [8])
	*($2 + [24]) = $0
	*($2 + [32]) = ($0 + [16])
	*($2 + [36]) = ($0 + [24])
	*($2 + [40]) = ($0 + [28])
	CALL $43(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [48])
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	$6 = ($global$0 - [96])
	$global$0 = $6
	*($6 + [80]) = $3
	*($6 + [88]) = $1
	*($6 + [79]) = $4
	CALL $44($0, $1)
	if ( CALL is_account($3) ){ goto $label$1 }
	CALL eosio_assert([0], [12042])
	
.LABEL $label$1
	$4 = [0]
	*(($6 + [64])) = [0]
	*($6 + [48]) = (int_64)-1
	*($6 + [56]) = (int_64)0
	$1 = *($0)
	*($6 + [32]) = $1
	*($6 + [40]) = $2
	$7 = CALL db_find_i64($1, $2, (int_64)3680915223743201280, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $34(($6 + [32]), $7) + [56]) == (int_32)($6 + [32])), [11549])
	goto $label$2 
	
.LABEL $label$3
	$4 = [1]
	
.LABEL $label$2
	CALL eosio_assert($4, [12076])
	$3 = *($0)
	*($6 + [28]) = $5
	*($6 + [20]) = ($6 + [80])
	*($6 + [16]) = ($6 + [88])
	*($6 + [24]) = ($6 + [79])
	CALL $45(($6 + [8]), ($6 + [32]), $3, ($6 + [16]))
	$5 = *($6 + [56])
	if ( ($5 == 0) ){ goto $label$4 }
	$7 = ($6 + [60])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$9
	CALL _ZdlPv($4)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($6 + [56]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $5
	
.LABEL $label$5
	*($7) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($6 + [96])
}

void .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $150($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	CALL read_action_data($4, $3)
	*(($0 + [32])) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [8637])
	$5 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$5 = $6
	$7 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$5 = $6
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [8688])
	*($2 + [12]) = $4
	*($2 + [8]) = $4
	*($2 + [16]) = ($4 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [32]) = $0
	*($2 + [36]) = ($0 + [8])
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [24])
	CALL $51(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [11623])
	CALL memcpy($1, *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [64])
	$global$0 = $5
	*($5 + [63]) = $3
	CALL $44($0, $1)
	$6 = [0]
	*(($5 + [48])) = [0]
	*($5 + [32]) = (int_64)-1
	*($5 + [40]) = (int_64)0
	$1 = *($0)
	*($5 + [16]) = $1
	*($5 + [24]) = $2
	$3 = CALL db_find_i64($1, $2, (int_64)-5918709142380707840, (CASTING uint_64)(uint_32 $3))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $32(($5 + [16]), $3) + [32]) == (int_32)($5 + [16])), [11549])
	goto $label$1 
	
.LABEL $label$2
	$6 = [1]
	
.LABEL $label$1
	CALL eosio_assert($6, [12409])
	$2 = *($0)
	*($5 + [12]) = $4
	*($5 + [8]) = ($5 + [63])
	CALL $50($5, ($5 + [16]), $2, ($5 + [8]))
	$6 = *($5 + [40])
	if ( ($6 == 0) ){ goto $label$3 }
	$4 = ($5 + [44])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $6
	
.LABEL $label$4
	*($4) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($5 + [64])
}

void .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $150($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [11623])
	CALL memcpy($0, $1, [8])
	$3 = ($3 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [11623])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [11623])
	CALL memcpy(($0 + [16]), ($1 + [16]), [8])
	$global$0 = $2
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [40]) = (int_64)0
	$1 = [0]
	*(($0 + [32])) = [0]
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	CALL eosio_assert([1], [8637])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $4
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$5 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [8688])
	*(($1 = ($0 + [64]))) = (int_64)1397703940
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [8637])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$3 = $4
	$6 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$3 = $4
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [8688])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8688])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [8688])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $71(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [11623])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [11623])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [11623])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [11623])
	CALL memcpy($4, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert1()), [12124])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([48])) + [16]) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [8637])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8688])
	*($5 + [32]) = $1
	CALL $92(($4 + [16]), $5)
	*($4 + [32]) = $5
	$7 = *($5)
	*($4 + [15]) = $7
	$8 = *($5 + [36])
	*($4 + [16]) = $8
	$9 = ($1 + [28])
	$3 = *($9)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255)
	*($3 + [16]) = $8
	*($4 + [32]) = [0]
	*($3) = $5
	*($9) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $76(($1 + [24]), ($4 + [32]), ($4 + [15]), ($4 + [16]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [11623])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($3, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [11623])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [11667])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [11713])
	$3 = *($3)
	*($1 + [8]) = *($3)
	*(($5 = ($1 + [16]))) = *(($3 + [8]))
	$3 = *($1)
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_32)$3 == (int_32)*($1)), [11764])
	CALL eosio_assert([1], [11823])
	CALL memcpy($4, $1, [1])
	CALL eosio_assert([1], [11823])
	CALL memcpy(($4 | [1]), ($1 + [8]), [8])
	CALL eosio_assert([1], [11823])
	CALL memcpy(($4 | [9]), $5, [8])
	CALL eosio_assert([1], [11823])
	CALL memcpy(($4 + [17]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [25])
	$2 = (CASTING uint_64)(uint_32 $3)
	if ( ((uint_64)*($0 + [16]) > (uint_64)$2) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [12261])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [12306])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = (*($1) & [255])
	if ( ((int_32)*(*(($5 + [-24]))) == (int_32)$6) ){ goto $label$3 }
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$3 = ($5 + [-48])
	$5 = ($5 + [-24])
	if ( ((int_32)*(*($3)) != (int_32)$6) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [12356])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$6 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $6
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$6 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $6
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [11623])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [11623])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [11623])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [11623])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11600])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $150($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [40]) = [0]
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [56]) = $0
	CALL $77(($3 + [32]), $5)
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $78(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $153($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert1()), [12124])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([64])
	CALL $93($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [12261])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [12306])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [12356])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

int_32 .FUNC $116 ()
{
	return [13320]
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL $125(*([0] + [21808]), [8459], $4)
	CALL $124([0])
	CALL abort()
	(unreachable)
}

void .FUNC $114 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [11667])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [11713])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)1)
	$6 = *($1)
	CALL eosio_assert([1], [11764])
	$7 = *($1 + [32])
	$8 = ( *(($1 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [33])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$4 = CALL $150($7)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $7)
	CALL $80($5, $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $153($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $144(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $109($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL $138([21920], *([0] + [20]))
	$1 = [0]
	
.LOOP $label$4:
	if ( ((int_32)*(($1 + [21824])) == (int_32)$0) ){ goto $label$3 }
	$2 = [87]
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[87]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = [21920]
	
.LOOP $label$5:
	$0 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $0 ){ goto $label$5 }
	$1 = $3
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	return CALL $138($3, *([0] + [20]))
	return .LABEL $label$1
}

int_64 .FUNC $118 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC $119 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $121($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $118($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [21776])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [21760]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [21792]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $120($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $152 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [13352]) == 0) ){ goto $label$2 }
	$2 = *([0] + [13356])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [13352]) = [1]
	$2 = ($2 << [16])
	*([0] + [13356]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [13356])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [13356]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [13352]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [13352]) = [1]
	$3 = ($3 << [16])
	*([0] + [13356]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [13356])
	
.LABEL $label$10
	*([0] + [13356]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $153 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [21744])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [21552]
	$3 = (((int_32)$1 * (int_32)[12]) + [21552])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $150 (int_32 $0)
{
	return CALL $151([13360], $0)
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $152($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [23731])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $150($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*(($0 + [16])) = [0]
	*($0 + [8 align=4]) = (int_64)0
	*($2 + [8]) = ($1 + $3)
	*($2) = $1
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [11623])
	CALL memcpy($0, $1, [8])
	*($2 + [4]) = ($1 + [8])
	CALL $71($2, ($0 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	$6 = ($global$0 - [80])
	$global$0 = $6
	*($6 + [72]) = $1
	*($6 + [63]) = $4
	*($6 + [64]) = $3
	CALL $44($0, $1)
	*(($6 + [48])) = [0]
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	$1 = *($0)
	*($6 + [16]) = $1
	*($6 + [24]) = $2
	$4 = [0]
	$7 = CALL db_find_i64($1, $2, (int_64)3680915223743201280, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $34(($6 + [16]), $7)
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($6 + [16])), [11549])
	
.LABEL $label$1
	$7 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($7, [12175])
	$2 = *($0)
	*($6 + [12]) = $5
	*($6 + [4]) = ($6 + [64])
	*($6) = ($6 + [72])
	*($6 + [8]) = ($6 + [63])
	CALL eosio_assert($7, [11632])
	CALL $47(($6 + [16]), $4, $2, $6)
	$5 = *($6 + [40])
	if ( ($5 == 0) ){ goto $label$2 }
	$7 = ($6 + [44])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$7
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($6 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($7) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($6 + [80])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [11667])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [11713])
	*($1 + [8]) = *(*($3))
	*($1 + [9]) = *(*($3 + [4]))
	$5 = *($3 + [8])
	*($1 + [16]) = *($5)
	*(($1 + [24])) = *(($5 + [8]))
	*($1 + [32]) = *(*($3 + [12]))
	$6 = *($1)
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [11764])
	*($4 + [56]) = ($4 + [35])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $94(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [35])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $150($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	CALL read_action_data($4, $3)
	*(($0 + [24])) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [8637])
	$5 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$5 = $6
	$7 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$5 = $6
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [8688])
	*($2 + [4]) = $4
	*($2) = $4
	*($2 + [8]) = ($4 + $3)
	*($2 + [16]) = $2
	*($2 + [24]) = $0
	*($2 + [28]) = ($0 + [8])
	*($2 + [32]) = ($0 + [9])
	*($2 + [36]) = ($0 + [16])
	*($2 + [40]) = ($0 + [32])
	CALL $54(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [48])
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL $44($0, $1)
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$1 = *($0)
	*($4) = $1
	*($4 + [8]) = $2
	$0 = [0]
	$5 = CALL db_find_i64($1, $2, (int_64)3680915223743201280, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $34($4, $5)
	CALL eosio_assert(((int_32)*($0 + [56]) == (int_32)$4), [11549])
	
.LABEL $label$1
	$5 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($5, [12175])
	CALL eosio_assert($5, [12197])
	CALL eosio_assert($5, [12231])
	$5 = CALL db_next_i64(*($0 + [60]), ($4 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $34($4, $5)
	
.LABEL $label$2
	CALL $48($4, $0)
	$6 = *($4 + [24])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($4 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$8
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $6
	
.LABEL $label$4
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $23 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $150($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	CALL read_action_data($4, $3)
	*(($0 + [24])) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [8637])
	$5 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$5 = $6
	$7 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$5 = $6
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [8688])
	*($2 + [12]) = $4
	*($2 + [8]) = $4
	*($2 + [16]) = ($4 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [32]) = $0
	*($2 + [36]) = ($0 + [8])
	*($2 + [40]) = ($0 + [16])
	CALL $69(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	$6 = ($global$0 - [96])
	$global$0 = $6
	*($6 + [87]) = $2
	*($6 + [86]) = $3
	*($6 + [85]) = $5
	*($6 + [88]) = $1
	CALL require_auth(*($0))
	*(($6 + [72])) = [0]
	*($6 + [56]) = (int_64)-1
	*($6 + [64]) = (int_64)0
	$7 = *($0)
	*($6 + [40]) = $7
	*($6 + [48]) = $7
	$5 = CALL db_find_i64($7, $7, (int_64)-4136917485322742784, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $31(($6 + [40]), $5)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)($6 + [40])), [11549])
	$7 = *($0)
	*($6 + [24]) = $4
	*($6 + [20]) = ($6 + [86])
	*($6 + [16]) = ($6 + [87])
	*($6 + [28]) = ($6 + [85])
	CALL eosio_assert([1], [11632])
	CALL $55(($6 + [40]), $5, $7, ($6 + [16]))
	$7 = *($6 + [87])
	CALL prints([12448])
	CALL printn($7)
	$3 = *($6 + [64])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = *($0)
	*($6 + [28]) = $4
	*($6 + [20]) = ($6 + [87])
	*($6 + [16]) = ($6 + [88])
	*($6 + [24]) = ($6 + [86])
	*($6 + [32]) = ($6 + [85])
	CALL $56(($6 + [8]), ($6 + [40]), $7, ($6 + [16]))
	$7 = *($6 + [87])
	CALL prints([12444])
	CALL printn($7)
	$3 = *($6 + [64])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = ($6 + [68])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [64]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($2) = $3
	CALL _ZdlPv($0)
	$global$0 = ($6 + [96])
	return 
	
.LABEL $label$1
	$global$0 = ($6 + [96])
}

int_64 .FUNC $25 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	int_64 $3
	$0 = ($global$0 - [16])
	$1 = $0
	$global$0 = $0
	$2 = CALL action_data_size()
	if ( ($2 <= [513]) ){ goto $label$2 }
	$0 = CALL $150($2)
	goto $label$1 
	
.LABEL $label$2
	$0 = ($0 - (($2 + [15]) & [-16]))
	$global$0 = $0
	
.LABEL $label$1
	CALL read_action_data($0, $2)
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [8]), $0, [8])
	$3 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $3
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [240])
	$global$0 = $4
	CALL require_auth(*($0))
	*($4 + [216]) = $1
	$5 = *($0)
	*($4 + [208]) = $5
	$6 = ($4 + [216])
	$7 = (int_64)6
	
.LOOP $label$1:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$1 }
	$7 = (int_64)7
	
.LOOP $label$2:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$2 }
	$7 = (int_64)0
	$8 = (int_64)59
	$9 = [13012]
	$10 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$8 }
	$11 = *($9)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$11 = ($11 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$12 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$4
	$9 = ($9 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$12 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$3 }
	*($4 + [128]) = $10
	*($4 + [120]) = (int_64)-4157661367865704448
	*(($9 = CALL _Znwj([16]))) = $5
	*($9 + [8]) = (int_64)3617214756542218240
	*(($4 + [156])) = [0]
	$11 = ($9 + [16])
	*(($4 + [144])) = $11
	*(($4 + [140])) = $11
	*($4 + [136]) = $9
	*($4 + [148 align=4]) = (int_64)0
	CALL $37(($4 + [148]), [16])
	$9 = *($4 + [148])
	$11 = (*(($4 + [152])) - $9)
	CALL eosio_assert(((int_32)$11 > (int_32)[7]), [11823])
	CALL memcpy($9, ($4 + [208]), [8])
	CALL eosio_assert(((int_32)($11 + [-8]) > (int_32)[7]), [11823])
	CALL memcpy(($9 + [8]), $6, [8])
	CALL $62(($4 + [168]), ($4 + [120]))
	$9 = *($4 + [168])
	CALL send_inline($9, (*($4 + [172]) - $9))
	$9 = *($4 + [168])
	if ( ($9 == 0) ){ goto $label$9 }
	*($4 + [172]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$9
	$9 = *($4 + [148])
	if ( ($9 == 0) ){ goto $label$10 }
	*(($4 + [152])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = *($4 + [136])
	if ( ($9 == 0) ){ goto $label$11 }
	*(($4 + [140])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$11
	$12 = *($0)
	$7 = (int_64)6
	
.LOOP $label$12:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$12 }
	*($4 + [8]) = (int_64)3617214756542218240
	*($4) = $12
	$7 = (int_64)0
	$8 = (int_64)59
	$9 = [8621]
	$10 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$18 }
	$11 = *($9)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$11 = ($11 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$12 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$14
	$9 = ($9 + [1])
	$8 = ((int_64)$8 + (int_64)4294967291)
	$10 = ((int_64)$12 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$13 }
	$7 = (int_64)0
	$8 = (int_64)59
	$9 = [12471]
	$5 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$24 }
	$11 = *($9)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$11 = ($11 + [-91])
	goto $label$22 
	
.LABEL $label$24
	$12 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$20
	$9 = ($9 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$5 = ((int_64)$12 | (int_64)$5)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$19 }
	$7 = (int_64)7
	
.LOOP $label$25:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$25 }
	*($4 + [88]) = $2
	CALL $60(($4 + [104]), ($4 + [88]))
	*(($4 + [144])) = *(($3 + [8]))
	$9 = (($4 + [104]) + [8])
	*(($4 + [160])) = *($9)
	*($9) = [0]
	*($4 + [128]) = (int_64)-4157661367865704448
	*($4 + [120]) = *($0)
	*($4 + [136]) = *($3)
	*($4 + [152]) = *($4 + [104])
	*($4 + [104]) = (int_64)0
	$9 = CALL $61(($4 + [168]), $4, $10, $5, ($4 + [120]))
	CALL $62(($4 + [224]), $9)
	$11 = *($4 + [224])
	CALL send_inline($11, (*($4 + [228]) - $11))
	$11 = *($4 + [224])
	if ( ($11 == 0) ){ goto $label$26 }
	*($4 + [228]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$26
	$11 = *($9 + [28])
	if ( ($11 == 0) ){ goto $label$27 }
	*(($9 + [32])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$27
	$11 = *($9 + [16])
	if ( ($11 == 0) ){ goto $label$28 }
	*(($9 + [20])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$28
	if ( ((*(($4 + [152])) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($4 + [160])))
	
.LABEL $label$29
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($4 + [112])))
	
.LABEL $label$30
	*($4 + [168]) = $1
	*((($4 + [104]) + [8])) = [0]
	*($4 + [104]) = (int_64)0
	$9 = CALL $146([13023])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$46 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$49 }
	*($4 + [104]) = ($9 << [1])
	$11 = (($4 + [104]) | [1])
	if ( $9 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$3 = (($9 + [16]) & [-16])
	$11 = CALL _Znwj($3)
	*($4 + [104]) = ($3 | [1])
	*($4 + [112]) = $11
	*($4 + [108]) = $9
	
.LABEL $label$48
	CALL memcpy($11, [13023], $9)
	
.LABEL $label$47
	*(($11 + $9)) = [0]
	*($4 + [80]) = $2
	CALL $60(($4 + [88]), ($4 + [80]))
	$9 = *($4 + [88])
	$11 = ($9 & [1])
	$9 = CALL $111(($4 + [104]), ( *($4 + [96]) ? (($4 + [88]) | [1]) : $11 ), ( *($4 + [92]) ? uint_32($9 >> [1]) : $11 ))
	$11 = ($9 + [8])
	*((($4 + [224]) + [8])) = *($11)
	*($4 + [224]) = *($9)
	*($9) = (int_64)0
	*($11) = [0]
	*((($4 + [64]) + [8])) = [0]
	*($4 + [64]) = (int_64)0
	$9 = CALL $146([13048])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$45 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$52 }
	*($4 + [64]) = ($9 << [1])
	$3 = (($4 + [64]) | [1])
	$11 = $3
	if ( $9 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$3 = (($9 + [16]) & [-16])
	$11 = CALL _Znwj($3)
	*($4 + [64]) = ($3 | [1])
	*($4 + [72]) = $11
	*($4 + [68]) = $9
	$3 = (($4 + [64]) | [1])
	
.LABEL $label$51
	CALL memcpy($11, [13048], $9)
	
.LABEL $label$50
	*(($11 + $9)) = [0]
	$9 = *($4 + [64])
	$11 = ($9 & [1])
	$9 = CALL $111(($4 + [224]), ( *($4 + [72]) ? $3 : $11 ), ( *($4 + [68]) ? uint_32($9 >> [1]) : $11 ))
	$11 = ($9 + [8])
	*(($4 + [8])) = *($11)
	*($4) = *($9)
	*($9) = (int_64)0
	*($11) = [0]
	*($4 + [40]) = $1
	CALL $60(($4 + [48]), ($4 + [40]))
	$9 = *($4 + [48])
	$11 = ($9 & [1])
	$9 = CALL $111($4, ( *($4 + [56]) ? (($4 + [48]) | [1]) : $11 ), ( *($4 + [52]) ? uint_32($9 >> [1]) : $11 ))
	$11 = ($9 + [8])
	*((($4 + [120]) + [8])) = *($11)
	*($4 + [120]) = *($9)
	*($9) = (int_64)0
	*($11) = [0]
	*((($4 + [24]) + [8])) = [0]
	*($4 + [24]) = (int_64)0
	$9 = CALL $146([13075])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$44 }
	$3 = (($4 + [168]) + [8])
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$55 }
	*($4 + [24]) = ($9 << [1])
	$6 = (($4 + [24]) | [1])
	$11 = $6
	if ( $9 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$6 = (($9 + [16]) & [-16])
	$11 = CALL _Znwj($6)
	*($4 + [24]) = ($6 | [1])
	*($4 + [32]) = $11
	*($4 + [28]) = $9
	$6 = (($4 + [24]) | [1])
	
.LABEL $label$54
	CALL memcpy($11, [13075], $9)
	
.LABEL $label$53
	*(($11 + $9)) = [0]
	$9 = *($4 + [24])
	$11 = ($9 & [1])
	$9 = CALL $111(($4 + [120]), ( *($4 + [32]) ? $6 : $11 ), ( *($4 + [28]) ? uint_32($9 >> [1]) : $11 ))
	*($3) = *($9)
	$11 = ($9 + [8])
	*(($3 + [8])) = *($11)
	*($9) = (int_64)0
	*($11) = [0]
	if ( (*($4 + [24]) & [1]) ){ goto $label$57 }
	if ( (*($4 + [120]) & [1]) ){ goto $label$56 }
	goto $label$43 
	
.LABEL $label$57
	CALL _ZdlPv(*((($4 + [24]) + [8])))
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$43 }
	
.LABEL $label$56
	CALL _ZdlPv(*($4 + [128]))
	$9 = [1]
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$46
	CALL $105(($4 + [104]))
	
.LABEL $label$45
	CALL $105(($4 + [64]))
	
.LABEL $label$44
	CALL $105(($4 + [24]))
	
.LABEL $label$43
	$9 = [1]
	if ( (*($4 + [48]) & [1]) ){ goto $label$41 }
	
.LABEL $label$42
	if ( (*($4) & $9) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	CALL _ZdlPv(*(($4 + [56])))
	if ( ((*($4) & $9) == 0) ){ goto $label$39 }
	
.LABEL $label$40
	CALL _ZdlPv(*($4 + [8]))
	$9 = [1]
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$9 = [1]
	if ( (*($4 + [64]) & [1]) ){ goto $label$37 }
	
.LABEL $label$38
	if ( (*($4 + [224]) & $9) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	CALL _ZdlPv(*(($4 + [72])))
	if ( ((*($4 + [224]) & $9) == 0) ){ goto $label$35 }
	
.LABEL $label$36
	CALL _ZdlPv(*($4 + [232]))
	$9 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$9 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ((*($4 + [104]) & $9) == 0) ){ goto $label$31 }
	goto $label$32 
	
.LABEL $label$33
	CALL _ZdlPv(*(($4 + [96])))
	if ( ((*($4 + [104]) & $9) == 0) ){ goto $label$31 }
	
.LABEL $label$32
	CALL _ZdlPv(*($4 + [112]))
	
.LABEL $label$31
	$12 = *($0)
	$7 = (int_64)6
	
.LOOP $label$58:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$58 }
	$7 = (int_64)7
	
.LOOP $label$59:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$59 }
	*(($11 = ($4 + [144]))) = [0]
	*($4 + [128]) = (int_64)-7876370025743908864
	*($4 + [120]) = $12
	*($4 + [136]) = (int_64)0
	*(($9 = CALL _Znwj([16]))) = $12
	*($9 + [8]) = (int_64)3617214756542218240
	$3 = ($9 + [16])
	*($11) = $3
	*(($4 + [140])) = $3
	*($4 + [136]) = $9
	CALL $70(($4 + [148]), ($4 + [168]))
	CALL $62($4, ($4 + [120]))
	$9 = *($4)
	CALL send_inline($9, (*($4 + [4]) - $9))
	$9 = *($4)
	if ( ($9 == 0) ){ goto $label$60 }
	*($4 + [4]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$60
	$9 = *($4 + [148])
	if ( ($9 == 0) ){ goto $label$61 }
	*(($4 + [152])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$61
	$9 = *($4 + [136])
	if ( ($9 == 0) ){ goto $label$62 }
	*(($4 + [140])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$62
	*($4) = $2
	*((($4 + [224]) + [8])) = [0]
	*($4 + [224]) = (int_64)0
	$9 = CALL $146([13023])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$69 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$72 }
	*($4 + [224]) = ($9 << [1])
	$11 = (($4 + [224]) | [1])
	if ( $9 ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$72
	$3 = (($9 + [16]) & [-16])
	$11 = CALL _Znwj($3)
	*($4 + [224]) = ($3 | [1])
	*($4 + [232]) = $11
	*($4 + [228]) = $9
	
.LABEL $label$71
	CALL memcpy($11, [13023], $9)
	
.LABEL $label$70
	*(($11 + $9)) = [0]
	*($4 + [64]) = $2
	CALL $60(($4 + [104]), ($4 + [64]))
	$9 = *($4 + [104])
	$11 = ($9 & [1])
	$9 = CALL $111(($4 + [224]), ( *($4 + [112]) ? (($4 + [104]) | [1]) : $11 ), ( *($4 + [108]) ? uint_32($9 >> [1]) : $11 ))
	$11 = ($9 + [8])
	*((($4 + [120]) + [8])) = *($11)
	*($4 + [120]) = *($9)
	*($9) = (int_64)0
	*($11) = [0]
	*((($4 + [88]) + [8])) = [0]
	*($4 + [88]) = (int_64)0
	$9 = CALL $146([13173])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$68 }
	$3 = ($4 + [8])
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$75 }
	*($4 + [88]) = ($9 << [1])
	$6 = (($4 + [88]) | [1])
	$11 = $6
	if ( $9 ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$75
	$6 = (($9 + [16]) & [-16])
	$11 = CALL _Znwj($6)
	*($4 + [88]) = ($6 | [1])
	*($4 + [96]) = $11
	*($4 + [92]) = $9
	$6 = (($4 + [88]) | [1])
	
.LABEL $label$74
	CALL memcpy($11, [13173], $9)
	
.LABEL $label$73
	*(($11 + $9)) = [0]
	$9 = *($4 + [88])
	$11 = ($9 & [1])
	$9 = CALL $111(($4 + [120]), ( *($4 + [96]) ? $6 : $11 ), ( *($4 + [92]) ? uint_32($9 >> [1]) : $11 ))
	*($3) = *($9)
	$11 = ($9 + [8])
	*(($3 + [8])) = *($11)
	*($9) = (int_64)0
	*($11) = [0]
	if ( (*($4 + [88]) & [1]) ){ goto $label$77 }
	if ( (*($4 + [120]) & [1]) ){ goto $label$76 }
	goto $label$67 
	
.LABEL $label$77
	CALL _ZdlPv(*((($4 + [88]) + [8])))
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$67 }
	
.LABEL $label$76
	CALL _ZdlPv(*($4 + [128]))
	$9 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$69
	CALL $105(($4 + [224]))
	
.LABEL $label$68
	CALL $105(($4 + [88]))
	
.LABEL $label$67
	$9 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$65 }
	
.LABEL $label$66
	if ( ((*($4 + [224]) & $9) == 0) ){ goto $label$63 }
	goto $label$64 
	
.LABEL $label$65
	CALL _ZdlPv(*(($4 + [112])))
	if ( ((*($4 + [224]) & $9) == 0) ){ goto $label$63 }
	
.LABEL $label$64
	CALL _ZdlPv(*($4 + [232]))
	
.LABEL $label$63
	$12 = *($0)
	$7 = (int_64)6
	
.LOOP $label$78:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$78 }
	$7 = (int_64)7
	
.LOOP $label$79:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$79 }
	*($4 + [128]) = (int_64)-7876370025743908864
	*($4 + [120]) = $12
	*(($9 = CALL _Znwj([16]))) = $12
	*($9 + [8]) = (int_64)3617214756542218240
	$11 = ($9 + [16])
	*(($4 + [144])) = $11
	*(($4 + [140])) = $11
	*($4 + [136]) = $9
	CALL $70(($4 + [148]), $4)
	CALL $62(($4 + [224]), ($4 + [120]))
	$9 = *($4 + [224])
	CALL send_inline($9, (*($4 + [228]) - $9))
	$9 = *($4 + [224])
	if ( ($9 == 0) ){ goto $label$80 }
	*($4 + [228]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$80
	$9 = *($4 + [148])
	if ( ($9 == 0) ){ goto $label$81 }
	*(($4 + [152])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$81
	$9 = *($4 + [136])
	if ( ($9 == 0) ){ goto $label$82 }
	*(($4 + [140])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$82
	if ( ((*(($4 + [8])) & [1]) == 0) ){ goto $label$83 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$83
	if ( ((*((($4 + [168]) + [8])) & [1]) == 0) ){ goto $label$84 }
	CALL _ZdlPv(*(($4 + [184])))
	
.LABEL $label$84
	$global$0 = ($4 + [240])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $150($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*(($0 + [36])) = [0]
	*($0 + [28 align=4]) = (int_64)0
	*($2 + [4]) = $1
	*($2) = $1
	*($2 + [8]) = ($1 + $3)
	*($2 + [16]) = $2
	*($2 + [28]) = ($0 + [8])
	*($2 + [24]) = $0
	*($2 + [32]) = ($0 + [16])
	*($2 + [36]) = ($0 + [24])
	*($2 + [40]) = ($0 + [28])
	CALL $46(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [48])
}

void .FUNC $26 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)-4136917485322742784, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $31($2, $4)
	CALL eosio_assert(((int_32)*($0 + [48]) == (int_32)$2), [11549])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [12455])
	CALL eosio_assert($4, [12197])
	CALL eosio_assert($4, [12231])
	$4 = CALL db_next_i64(*($0 + [52]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $31($2, $4)
	
.LABEL $label$2
	CALL $57($2, $0)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $135 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL $116()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL $116()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($0, *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [11623])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($3 + [4]), $0, [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [11823])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $109($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$1 = *($2)
	*(($2 = *($1))) = ($1 + [20])
	$1 = ($1 + [56])
	$5 = *($3 + [4])
	$3 = *($0 + [8])
	$4 = *(($3 + [8]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[36]))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	$1 = (((int_32)((uint_32)($6 + [-36]) / (uint_32)[36]) * (int_32)[36]) + $1)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($1 + [-36])
	
.LABEL $label$2
	*($2) = $1
	$5 = *($3 + [16])
	$4 = *(($3 + [20]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[24]))
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$5 }
	$1 = ((((int_32)((uint_32)($6 + [-24]) / (uint_32)[24]) * (int_32)[18]) + $1) + [18])
	
.LABEL $label$5
	*($2) = $1
	$3 = *($3 + [28])
	$4 = *(($3 + [32]))
	$5 = ($4 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$6:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$7 }
	$1 = ((((int_32)uint_32(($5 + [-8]) >> [3]) * (int_32)[6]) + $1) + [6])
	
.LABEL $label$7
	*($2) = ($1 + [4])
	$1 = ($1 + [40])
	$4 = *($3 + [4])
	$3 = *($0 + [12])
	$0 = *(($3 + [8]))
	$5 = ($0 - $4)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[36]))
	
.LOOP $label$8:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$10 }
	$1 = (((int_32)((uint_32)($5 + [-36]) / (uint_32)[36]) * (int_32)[36]) + $1)
	goto $label$9 
	
.LABEL $label$10
	$1 = ($1 + [-36])
	
.LABEL $label$9
	*($2) = $1
	$4 = *($3 + [16])
	$0 = *(($3 + [20]))
	$5 = ($0 - $4)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[24]))
	
.LOOP $label$11:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$12 }
	$1 = ((((int_32)((uint_32)($5 + [-24]) / (uint_32)[24]) * (int_32)[18]) + $1) + [18])
	
.LABEL $label$12
	*($2) = $1
	$3 = *($3 + [28])
	$0 = *(($3 + [32]))
	$4 = ($0 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	
.LOOP $label$13:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$13 }
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$14 }
	$1 = ((((int_32)uint_32(($4 + [-8]) >> [3]) * (int_32)[6]) + $1) + [6])
	
.LABEL $label$14
	*($2) = $1
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 + [8])) = (int_64)0
	*($0 + [4]) = [0]
	*($0) = *($1)
	$2 = (*(($1 + [8])) - *($1 + [4]))
	$3 = ((int_32)$2 / (int_32)[36])
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[119304648]) ){ goto $label$3 }
	$2 = CALL _Znwj($2)
	*(($0 + [4])) = $2
	*(($0 + [12])) = ($2 + ((int_32)$3 * (int_32)[36]))
	*(($3 = ($0 + [8]))) = $2
	$4 = *(($1 + [4]))
	$5 = (*(($1 + [8])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[36]) * (int_32)[36]))
	
.LABEL $label$4
	*($0 + [16 align=4]) = (int_64)0
	*(($0 + [24])) = [0]
	$2 = (*(($1 + [20])) - *($1 + [16]))
	$3 = ((int_32)$2 / (int_32)[24])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$2 }
	$2 = CALL _Znwj($2)
	*(($0 + [16])) = $2
	*(($0 + [24])) = ($2 + ((int_32)$3 * (int_32)[24]))
	*(($3 = ($0 + [20]))) = $2
	$4 = *(($1 + [16]))
	$5 = (*(($1 + [20])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$5
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$2 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = int_32($2 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$2 = CALL _Znwj($2)
	*(($0 + [28])) = $2
	*(($0 + [36])) = ($2 + ($3 << [3]))
	*(($3 = ($0 + [32]))) = $2
	$5 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $5, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$6
	return $0
	
.LABEL $label$3
	CALL $114(($0 + [4]))
	
.LABEL $label$2
	CALL $114(($0 + [16]))
	
.LABEL $label$1
	CALL $114(($0 + [28]))
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [11823])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [11823])
	CALL memcpy(*($4 + [4]), ($0 + [40]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [15]) = *($0 + [48])
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [11823])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [11823])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $96($3, ($2 + [4]))
	CALL $97($3, ($2 + [16]))
	CALL $98($3, ($2 + [28]))
	$0 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [11823])
	CALL memcpy(*($3 + [4]), $0, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $96($3, ($0 + [4]))
	CALL $97($3, ($0 + [16]))
	CALL $98($3, ($0 + [28]))
}

int_32 .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $37($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $95(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL _Znwj([16])
	*($0 + [8]) = $3
	*($0) = (int_64)55834574865
	CALL memset($3, [46], [13])
	*($3 + [13]) = [0]
	$5 = *($1)
	$1 = (CASTING uint_32)(uint_64 $5)
	$4 = *([0] + [12736])
	*($3 + [12]) = *(($4 + ($1 & [15])))
	*($3 + [11]) = *(($4 + (uint_32($1 >> [4]) & [31])))
	*($3 + [10]) = *(($4 + (uint_32($1 >> [9]) & [31])))
	*($3 + [9]) = *(($4 + (uint_32($1 >> [14]) & [31])))
	*($3 + [8]) = *(($4 + (uint_32($1 >> [19]) & [31])))
	*($3 + [7]) = *(($4 + (uint_32($1 >> [24]) & [31])))
	*($3 + [6]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)29)) & [31])))
	*($3 + [5]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)34)) & [31])))
	*($3 + [4]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)39)) & [31])))
	*($3 + [3]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)44)) & [31])))
	*($3 + [2]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)49)) & [31])))
	*($3 + [1]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)54)) & [31])))
	*(*($0 + [8])) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)59))))
	$4 = ($3 & [1])
	$3 = *($0)
	$3 = ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 )
	$1 = ( *($0 + [8]) ? ($0 + [1]) : $4 )
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($1 + $3)
	$6 = ($3 + [-1])
	$3 = $6
	if ( ((int_32)*(($4 + [-1])) == (int_32)[46]) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	CALL $107($2, $0, [0], ($6 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$4 }
	*($0) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$3
	CALL $110($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [11823])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $37($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [11823])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [11823])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $89(CALL $90($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $150($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [13316])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $150($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [11623])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $71(*($1), *($0 + [12]))
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $153($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $105 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [11823])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [11823])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [11823])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [11823])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $89($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [11823])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [11823])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [11823])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $89(CALL $90($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [11823])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [11823])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [11823])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [11823])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [11823])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [11823])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0 + [4])
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($1, *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [8]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [16]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [24]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [32]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [40]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [48]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [56]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	*($1 + [68]) = *(*($0 + [8]))
}

int_32 .FUNC $82 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [8637])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8688])
	*(($2 = ($0 + [24]))) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [8637])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [8688])
	*($0 + [40]) = (int_64)0
	*(($0 + [32])) = (int_64)4602678819172646912
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	CALL eosio_assert([1], [8637])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$1 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [8688])
	*(($0 + [56])) = (int_64)4602678819172646912
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [11823])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [11823])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11823])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [11823])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11823])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $81($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [11823])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $149 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $148 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $145 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $144 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL $144($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC $146 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$global$0 = $3
	*($3 + [284]) = $2
	*(($3 + [272])) = (int_64)0
	*(($3 + [264])) = (int_64)0
	*(($3 + [256])) = (int_64)0
	*($3 + [248]) = (int_64)0
	*($3 + [240]) = (int_64)0
	*($3 + [280]) = *($3 + [284])
	$4 = [0]
	$2 = [-1]
	if ( ((int_32)CALL $142([0], $1, ($3 + [280]), ($3 + [80]), ($3 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $122($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) <= (int_32)[0]) ){ goto $label$6 }
	$5 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	*($0) = ($2 & [-33])
	$5 = ($2 & [32])
	if ( *($0 + [48]) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($3 + [80])
	*($0 + [28]) = $3
	*($0 + [20]) = $3
	$7 = *($0 + [44])
	*($0 + [44]) = $3
	$2 = CALL $142($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	if ( ($7 == 0) ){ goto $label$3 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $7
	*($6) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$7 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $7 )
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $142($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	
.LABEL $label$3
	$1 = *($0)
	*($0) = ($1 | $5)
	$1 = ($1 & [32])
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $123($0)
	
.LABEL $label$7
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	$global$0 = ($3 + [288])
	return $2
}

void .FUNC $140 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$6 = ($5) & [32767]
	if ( ((int_32)$6) == (int_32)[32767]) ){ goto $label$1 }
	if ( $6 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($4, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL $140(($4 + [16]), *($4), *(($4 + [8])), $3)
	$5 = (*($3) + [-120])
	$2 = *($4 + [24])
	$1 = *($4 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($5 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($5 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	*($3) = $5
	
.LABEL $label$1
	*($0) = $1
	*($0 + [8]) = $2
	$global$0 = ($4 + [32])
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	
.LABEL $label$18
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$16
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$15
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$8
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$2
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($3, *($1))
	*($0 + [8]) = *(($3 + [8]))
	*($0) = *($3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$4 = *($1)
	*($0 + [8]) = *($1 + [8])
	*($0) = $4
	$global$0 = ($3 + [16])
	$1
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_64 $29
	int_64 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	$5 = ($global$0 - [8128])
	$global$0 = $5
	$6 = (($5 + [704]) | [8])
	$7 = (($5 + [704]) | [9])
	$8 = ([-2] - ($5 + [704]))
	$9 = ($5 + [7664])
	$10 = (($5 + [692]) + [12])
	$11 = (($5 + [352]) + [54])
	$12 = (($5 + [352]) + [55])
	$13 = [0]
	$14 = [0]
	$15 = [0]
	
.LOOP $label$4:
	if ( ($0 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$1 = *($17)
	if ( ($1 == 0) ){ goto $label$1 }
	$15 = $17
	$1 = ($1 & [255])
	if ( ($1 == 0) ){ goto $label$24 }
	
.LOOP $label$25:
	if ( ((int_32)$1 == (int_32)[37]) ){ goto $label$23 }
	$1 = *($15 + [1])
	$15 = ($15 + [1])
	$1 = ($1 & [255])
	if ( $1 ){ goto $label$25 }
	
.LABEL $label$24
	$1 = $15
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$22 }
	goto $label$3 
	
.LABEL $label$23
	$18 = $15
	
.LOOP $label$27:
	if ( ((int_32)*(($18 + [1])) != (int_32)[37]) ){ goto $label$26 }
	$15 = ($15 + [1])
	$19 = *($18 + [2])
	$1 = ($18 + [2])
	$18 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$27 }
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$22 
	
.LABEL $label$26
	$1 = $18
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	
.LABEL $label$22
	if ( (*($0) & [32]) ){ goto $label$28 }
	CALL $132($17, $15, $0)
	
.LABEL $label$28
	if ( $15 ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	
.LOOP $label$29:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$15 = *($17)
	if ( ($15 == 0) ){ goto $label$31 }
	$1 = $17
	$15 = ($15 & [255])
	if ( ($15 == 0) ){ goto $label$33 }
	
.LOOP $label$34:
	if ( ((int_32)$15 == (int_32)[37]) ){ goto $label$32 }
	$15 = *($1 + [1])
	$1 = ($1 + [1])
	$15 = ($15 & [255])
	if ( $15 ){ goto $label$34 }
	
.LABEL $label$33
	$18 = ([2147483647] - $14)
	$15 = ($1 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$32
	$18 = $1
	$15 = $1
	
.LOOP $label$36:
	if ( ((int_32)*(($15 + [1])) != (int_32)[37]) ){ goto $label$35 }
	$18 = ($18 + [1])
	$19 = *($15 + [2])
	$1 = ($15 + [2])
	$15 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$36 }
	$18 = ([2147483647] - $14)
	$15 = ($18 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$30 
	
.LABEL $label$35
	$1 = $15
	$18 = ([2147483647] - $14)
	$15 = ($18 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$31
	if ( $0 ){ goto $label$1 }
	if ( ($13 == 0) ){ goto $label$46 }
	$1 = [1]
	$15 = *($4 + [4])
	if ( ($15 == 0) ){ goto $label$37 }
	CALL $143(($3 + [16]), $15, $2)
	$15 = *($4 + [8])
	if ( ($15 == 0) ){ goto $label$45 }
	CALL $143(($3 + [32]), $15, $2)
	$15 = *($4 + [12])
	if ( ($15 == 0) ){ goto $label$44 }
	CALL $143(($3 + [48]), $15, $2)
	$15 = *($4 + [16])
	if ( ($15 == 0) ){ goto $label$43 }
	CALL $143(($3 + [64]), $15, $2)
	$15 = *($4 + [20])
	if ( ($15 == 0) ){ goto $label$42 }
	CALL $143(($3 + [80]), $15, $2)
	$15 = *($4 + [24])
	if ( ($15 == 0) ){ goto $label$41 }
	CALL $143(($3 + [96]), $15, $2)
	$15 = *($4 + [28])
	if ( ($15 == 0) ){ goto $label$40 }
	CALL $143(($3 + [112]), $15, $2)
	$15 = *($4 + [32])
	if ( ($15 == 0) ){ goto $label$39 }
	CALL $143(($3 + [128]), $15, $2)
	$15 = *($4 + [36])
	if ( ($15 == 0) ){ goto $label$38 }
	CALL $143(($3 + [144]), $15, $2)
	$global$0 = ($5 + [8128])
	return [1]
	
.LABEL $label$46
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$45
	$1 = [2]
	goto $label$37 
	
.LABEL $label$44
	$1 = [3]
	goto $label$37 
	
.LABEL $label$43
	$1 = [4]
	goto $label$37 
	
.LABEL $label$42
	$1 = [5]
	goto $label$37 
	
.LABEL $label$41
	$1 = [6]
	goto $label$37 
	
.LABEL $label$40
	$1 = [7]
	goto $label$37 
	
.LABEL $label$39
	$1 = [8]
	goto $label$37 
	
.LABEL $label$38
	$1 = [9]
	
.LABEL $label$37
	$15 = ($4 + ($1 << [2]))
	
.LOOP $label$47:
	if ( *($15) ){ goto $label$18 }
	$15 = ($15 + [4])
	$14 = [1]
	$1 = ($1 + [1])
	if ( ((uint_32)$1 <= (uint_32)[9]) ){ goto $label$47 }
	goto $label$1 
	
.LABEL $label$30
	if ( $15 ){ goto $label$29 }
	
.LABEL $label$19
	$15 = ($1 + [1])
	$16 = *($1 + [1])
	$20 = ($16 + [-48])
	if ( ((uint_32)$20 > (uint_32)[9]) ){ goto $label$50 }
	$19 = ((int_32)*($1 + [2]) == (int_32)[36])
	$15 = ( ($1 + [3]) ? $15 : $19 )
	$21 = ( $20 ? [-1] : $19 )
	$13 = ( [1] ? $13 : $19 )
	$22 = [0]
	$16 = *(($1 + ( [3] ? [1] : $19 )))
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	goto $label$49 
	
.LABEL $label$50
	$21 = [-1]
	$22 = [0]
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	
.LABEL $label$49
	$1 = ([1] << $1)
	if ( (($1 & [75913]) == 0) ){ goto $label$48 }
	$19 = ($15 + [1])
	$22 = [0]
	
.LOOP $label$51:
	$22 = ($1 | $22)
	$15 = $19
	$16 = *($15)
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 >= (uint_32)[32]) ){ goto $label$48 }
	$19 = ($15 + [1])
	$1 = ([1] << $1)
	if ( ($1 & [75913]) ){ goto $label$51 }
	
.LABEL $label$48
	if ( ((int_32)$16 != (int_32)[42]) ){ goto $label$57 }
	$1 = (*($15 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$56 }
	if ( ((int_32)*($15 + [2]) != (int_32)[36]) ){ goto $label$56 }
	*(($4 + ($1 << [2]))) = [10]
	$23 = ($15 + [3])
	$13 = [1]
	$20 = *((($3 + (*(($15 + [1])) << [4])) + [-768]))
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	goto $label$55 
	
.LABEL $label$57
	$20 = [0]
	$19 = ($16 + [-48])
	if ( ((uint_32)$19 > (uint_32)[9]) ){ goto $label$54 }
	$1 = [0]
	
.LOOP $label$58:
	$20 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$59 }
	$1 = ((int_32)$1 * (int_32)[10])
	$20 = ( [-1] ? ($1 + $19) : ((int_32)$19 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$59
	$19 = *($15 + [1])
	$23 = ($15 + [1])
	$15 = $23
	$1 = $20
	$19 = ($19 + [-48])
	if ( ($19 <= [10]) ){ goto $label$58 }
	if ( ((int_32)$20 >= (int_32)[0]) ){ goto $label$52 }
	goto $label$3 
	
.LABEL $label$56
	if ( $13 ){ goto $label$18 }
	$23 = ($15 + [1])
	if ( ($0 == 0) ){ goto $label$53 }
	$15 = *($2)
	*($2) = ($15 + [4])
	$13 = [0]
	$20 = *($15)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	
.LABEL $label$55
	$20 = ([0] - $20)
	$22 = ($22 | [8192])
	goto $label$52 
	
.LABEL $label$54
	$23 = $15
	goto $label$52 
	
.LABEL $label$53
	$13 = [0]
	$20 = [0]
	
.LABEL $label$52
	$15 = [0]
	$16 = [-1]
	if ( ((int_32)*($23) != (int_32)[46]) ){ goto $label$66 }
	$19 = *($23 + [1])
	if ( ((int_32)$19 != (int_32)[42]) ){ goto $label$65 }
	$1 = (*($23 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$64 }
	if ( ((int_32)*($23 + [3]) != (int_32)[36]) ){ goto $label$64 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($23 + [4])
	$16 = *((($3 + (*(($23 + [2])) << [4])) + [-768]))
	goto $label$61 
	
.LABEL $label$66
	$1 = $23
	$24 = [0]
	goto $label$60 
	
.LABEL $label$65
	$1 = ($23 + [1])
	$25 = ($19 + [-48])
	if ( ((uint_32)$25 > (uint_32)[9]) ){ goto $label$63 }
	$23 = [0]
	$19 = $1
	
.LOOP $label$67:
	$16 = [-1]
	if ( ((uint_32)$23 > (uint_32)[214748364]) ){ goto $label$68 }
	$1 = ((int_32)$23 * (int_32)[10])
	$16 = ( [-1] ? ($1 + $25) : ((int_32)$25 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$68
	$24 = [1]
	$25 = *($19 + [1])
	$1 = ($19 + [1])
	$19 = $1
	$23 = $16
	$25 = ($25 + [-48])
	if ( ($25 <= [10]) ){ goto $label$67 }
	goto $label$60 
	
.LABEL $label$64
	if ( $13 ){ goto $label$18 }
	$1 = ($23 + [2])
	if ( ($0 == 0) ){ goto $label$62 }
	$19 = *($2)
	*($2) = ($19 + [4])
	$16 = *($19)
	goto $label$61 
	
.LABEL $label$63
	$24 = [1]
	$16 = [0]
	goto $label$60 
	
.LABEL $label$62
	$16 = [0]
	
.LABEL $label$61
	$24 = ((int_32)uint_32($16 >> [31]) ^ (int_32)[1])
	
.LABEL $label$60
	
.LOOP $label$69:
	$19 = $15
	$15 = (*($1) + [-65])
	if ( ((uint_32)$15 > (uint_32)[57]) ){ goto $label$18 }
	$1 = ($1 + [1])
	$15 = *(((((int_32)$19 * (int_32)[58]) + $15) + [23824]))
	if ( (($15 + [-1]) <= [8]) ){ goto $label$69 }
	if ( ($15 == 0) ){ goto $label$18 }
	if ( ((int_32)$15 != (int_32)[27]) ){ goto $label$72 }
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$18 }
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$72
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$73 }
	*(($4 + ($21 << [2]))) = $15
	$15 = ($3 + ($21 << [4]))
	*($5 + [424]) = *(($15 + [8]))
	*($5 + [416]) = *($15)
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$73
	if ( ($0 == 0) ){ goto $label$70 }
	CALL $143(($5 + [416]), $15, $2)
	
.LABEL $label$71
	$23 = ($22 & [-65537])
	$21 = ( $23 ? $22 : ($22 & [8192]) )
	$26 = [0]
	$27 = [8494]
	$15 = *(($1 + [-1]))
	$28 = ( ( ($15 & [-33]) ? $15 : ((int_32)($15 & [15]) == (int_32)[3]) ) ? $15 : $19 )
	$15 = ($28 + [-65])
	if ( ((uint_32)$15 > (uint_32)[55]) ){ goto $label$9 }
	$22 = $12
	goto $label$101 
	
.LABEL $label$101
	if ( ((int_32)$16 > (int_32)[-1]) ){ goto $label$102 }
	if ( $24 ){ goto $label$3 }
	
.LABEL $label$102
	$29 = *($5 + [424])
	$30 = *($5 + [416])
	*($5 + [748]) = [0]
	if ( (CALL $133($30, $29) == 0) ){ goto $label$103 }
	$31 = [1]
	$32 = [8515]
	$29 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	if ( ((int_32)CALL $134($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$103
	if ( ($21 & [2048]) ){ goto $label$99 }
	$31 = ($21 & [1])
	$32 = ( [8521] ? [8516] : $31 )
	if ( ((int_32)CALL $134($30, $29) > (int_32)[1]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$100
	$29 = *($5 + [416])
	if ( ((int_64)$29 <= (int_64)-1) ){ goto $label$86 }
	if ( ($21 & [2048]) ){ goto $label$84 }
	$26 = ($21 & [1])
	$27 = ( [8496] ? [8494] : $26 )
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$99
	$31 = [1]
	$32 = [8518]
	if ( ((int_32)CALL $134($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$98
	*((($5 + [344]) + [4])) = [0]
	*($5 + [344]) = *($5 + [416])
	*($5 + [416]) = ($5 + [344])
	$16 = [-1]
	$17 = ($5 + [344])
	goto $label$96 
	
.LABEL $label$97
	$17 = *($5 + [416])
	if ( ($16 == 0) ){ goto $label$80 }
	
.LABEL $label$96
	$15 = [0]
	$18 = $17
	
.LOOP $label$104:
	$19 = *($18)
	if ( ($19 == 0) ){ goto $label$82 }
	$19 = CALL $136(($5 + [340]), $19)
	$22 = ((int_32)$19 < (int_32)[0])
	if ( $22 ){ goto $label$83 }
	if ( ((uint_32)$19 > (uint_32)($16 - $15)) ){ goto $label$83 }
	$18 = ($18 + [4])
	$15 = ($19 + $15)
	if ( ((uint_32)$16 > (uint_32)$15) ){ goto $label$104 }
	goto $label$82 
	
.LABEL $label$95
	*((($5 + [352]) + [54])) = *($5 + [416])
	$16 = [1]
	$17 = $11
	$22 = $12
	$21 = $23
	goto $label$8 
	
.LABEL $label$94
	$17 = CALL $139(*(CALL $116()))
	goto $label$88 
	
.LABEL $label$93
	$15 = [0]
	$18 = ($19 & [255])
	if ( ((uint_32)$18 > (uint_32)[7]) ){ goto $label$4 }
	goto $label$105 
	
.LABEL $label$105
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$92
	$17 = $12
	$29 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$106 }
	$17 = $12
	
.LOOP $label$107:
	*(($17 = ($17 + [-1]))) = (((CASTING uint_32)(uint_64 $29) & [7]) | [48])
	$29 = (uint_64)$29 >> (uint_64)(int_64)3
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$107 }
	
.LABEL $label$106
	if ( ($21 & [8]) ){ goto $label$81 }
	$26 = [0]
	$27 = [8494]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$91
	$16 = ( $16 ? [8] : ((uint_32)$16 > (uint_32)[8]) )
	$21 = ($21 | [8])
	$28 = [120]
	
.LABEL $label$90
	$26 = [0]
	$27 = [8494]
	$29 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$108 }
	$15 = ($28 & [32])
	$17 = $12
	
.LOOP $label$109:
	*(($17 = ($17 + [-1]))) = (*((((CASTING uint_32)(uint_64 $29) & [15]) + [24288])) | $15)
	$29 = (uint_64)$29 >> (uint_64)(int_64)4
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$109 }
	if ( (($21 & [8]) == 0) ){ goto $label$12 }
	if ( (int_64)(*($5 + [416]) == 0) ){ goto $label$12 }
	$27 = (int_32($28 >> [4]) + [8494])
	$26 = [2]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$108
	$17 = $12
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$89
	$15 = *($5 + [416])
	$17 = ( $15 ? [23724] : $15 )
	
.LABEL $label$88
	$26 = [0]
	$15 = CALL $147($17, ( [2147483647] ? $16 : ((int_32)$16 < (int_32)[0]) ))
	$22 = ($17 + $15)
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$85 }
	$21 = $23
	$16 = $15
	goto $label$8 
	
.LABEL $label$87
	$26 = [0]
	$27 = [8494]
	$29 = *($5 + [416])
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$86
	$29 = (int_64)
	*($5 + [416]) = $29((int_64)0 - $29))
	$26 = [1]
	$27 = [8494]
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$85
	$21 = $23
	$16 = $15
	if ( (*($22) == 0) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$84
	$26 = [1]
	$27 = [8495]
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$83
	if ( $22 ){ goto $label$2 }
	
.LABEL $label$82
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$3 }
	$23 = ($21 & [73728])
	if ( $23 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$81
	$15 = ($12 - $17)
	$27 = ( [8494] ? [8499] : ((int_32)$16 > (int_32)$15) )
	$26 = ((int_32)$16 <= (int_32)$15)
	goto $label$12 
	
.LABEL $label$80
	$15 = [0]
	$23 = ($21 & [73728])
	if ( ($23 == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$79
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$78
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$77
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$76
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$75
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$74
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$70
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$18
	*(CALL $116()) = [22]
	goto $label$2 
	
.LABEL $label$17
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$16 }
	$18 = ($25 <= [256])
	$25 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $25 ? [256] : $18 ))
	$16 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$111 }
	$18 = ($19 == 0)
	$19 = $25
	
.LOOP $label$112:
	if ( (($18 & [1]) == 0) ){ goto $label$113 }
	CALL $132(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$113
	$22 = ($16 & [32])
	$18 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$112 }
	if ( $22 ){ goto $label$16 }
	$25 = ($25 & [255])
	goto $label$110 
	
.LABEL $label$111
	if ( $19 ){ goto $label$16 }
	
.LABEL $label$110
	CALL $132(($5 + [432]), $25, $0)
	
.LABEL $label$16
	if ( ($15 == 0) ){ goto $label$114 }
	$18 = [0]
	
.LOOP $label$115:
	$19 = *($17)
	if ( ($19 == 0) ){ goto $label$114 }
	$19 = CALL $136(($5 + [340]), $19)
	$18 = ($19 + $18)
	if ( ((uint_32)$18 > (uint_32)$15) ){ goto $label$114 }
	if ( (*($0) & [32]) ){ goto $label$116 }
	CALL $132(($5 + [340]), $19, $0)
	
.LABEL $label$116
	$17 = ($17 + [4])
	if ( ($18 <= $15) ){ goto $label$115 }
	
.LABEL $label$114
	if ( ((int_32)$23 != (int_32)[8192]) ){ goto $label$117 }
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$117 }
	$18 = ($22 <= [256])
	$22 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$119 }
	$18 = ($19 == 0)
	$19 = $22
	
.LOOP $label$120:
	if ( (($18 & [1]) == 0) ){ goto $label$121 }
	CALL $132(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$121
	$16 = ($17 & [32])
	$18 = ($16 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$120 }
	if ( $16 ){ goto $label$117 }
	$22 = ($22 & [255])
	goto $label$118 
	
.LABEL $label$119
	if ( $19 ){ goto $label$117 }
	
.LABEL $label$118
	CALL $132(($5 + [432]), $22, $0)
	
.LABEL $label$117
	$15 = ( $20 ? $15 : ((int_32)$20 > (int_32)$15) )
	goto $label$4 
	
.LABEL $label$15
	$30 = $29
	$17 = $12
	goto $label$13 
	
.LABEL $label$14
	$17 = $12
	
.LOOP $label$122:
	$30 = ((uint_64)$29 / (uint_64)(int_64)10)
	*(($17 = ($17 + [-1]))) = ((CASTING uint_32)(uint_64 (int_64))($29 - ((int_64)$30 * (int_64)10))) | [48])
	$15 = ((uint_64)$29 > (uint_64)(int_64)42949672959)
	$29 = $30
	if ( $15 ){ goto $label$122 }
	
.LABEL $label$13
	$15 = (CASTING uint_32)(uint_64 $30)
	if ( ($15 == 0) ){ goto $label$12 }
	
.LOOP $label$123:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$123 }
	
.LABEL $label$12
	if ( ($24 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$10
	$21 = ( ($21 & [-65537]) ? $21 : ((int_32)$16 > (int_32)[-1]) )
	$29 = *($5 + [416])
	if ( $16 ){ goto $label$124 }
	if ( ((int_64)($29 == 0) == 0) ){ goto $label$124 }
	$17 = $12
	$22 = $12
	$16 = [0]
	goto $label$8 
	
.LABEL $label$124
	$15 = (($12 - $17) + (int_64)($29 == 0))
	$16 = ( $16 ? $15 : ((int_32)$16 > (int_32)$15) )
	
.LABEL $label$9
	$22 = $12
	
.LABEL $label$8
	$24 = ($22 - $17)
	$28 = ( $24 ? $16 : ((int_32)$16 < (int_32)$24) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$3 }
	$25 = ($26 + $28)
	$15 = ( $25 ? $20 : ((int_32)$20 < (int_32)$25) )
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$125 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$125 }
	$18 = ($36 <= [256])
	$36 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $36 ? [256] : $18 ))
	$22 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$127 }
	$18 = ($19 == 0)
	$19 = $36
	
.LOOP $label$128:
	if ( (($18 & [1]) == 0) ){ goto $label$129 }
	CALL $132(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$129
	$23 = ($22 & [32])
	$18 = ($23 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$128 }
	if ( $23 ){ goto $label$125 }
	$36 = ($36 & [255])
	goto $label$126 
	
.LABEL $label$127
	if ( $19 ){ goto $label$125 }
	
.LABEL $label$126
	CALL $132(($5 + [432]), $36, $0)
	
.LABEL $label$125
	if ( (*($0) & [32]) ){ goto $label$130 }
	CALL $132($27, $26, $0)
	
.LABEL $label$130
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$131 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$131 }
	$18 = ($26 <= [256])
	$26 = ($15 - $25)
	CALL memset(($5 + [432]), [48], ( $26 ? [256] : $18 ))
	$22 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$133 }
	$18 = ($19 == 0)
	$19 = $26
	
.LOOP $label$134:
	if ( (($18 & [1]) == 0) ){ goto $label$135 }
	CALL $132(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$135
	$23 = ($22 & [32])
	$18 = ($23 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$134 }
	if ( $23 ){ goto $label$131 }
	$26 = ($26 & [255])
	goto $label$132 
	
.LABEL $label$133
	if ( $19 ){ goto $label$131 }
	
.LABEL $label$132
	CALL $132(($5 + [432]), $26, $0)
	
.LABEL $label$131
	if ( ((int_32)$24 >= (int_32)$16) ){ goto $label$136 }
	$18 = ($23 <= [256])
	$23 = ($28 - $24)
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $18 ))
	$16 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$138 }
	$18 = ($19 == 0)
	$19 = $23
	
.LOOP $label$139:
	if ( (($18 & [1]) == 0) ){ goto $label$140 }
	CALL $132(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$140
	$22 = ($16 & [32])
	$18 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$139 }
	if ( $22 ){ goto $label$136 }
	$23 = ($23 & [255])
	goto $label$137 
	
.LABEL $label$138
	if ( $19 ){ goto $label$136 }
	
.LABEL $label$137
	CALL $132(($5 + [432]), $23, $0)
	
.LABEL $label$136
	if ( (*($0) & [32]) ){ goto $label$141 }
	CALL $132($17, $24, $0)
	
.LABEL $label$141
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$4 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$4 }
	$18 = ($16 <= [256])
	$16 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$143 }
	$18 = ($19 == 0)
	$19 = $16
	
.LOOP $label$144:
	if ( (($18 & [1]) == 0) ){ goto $label$145 }
	CALL $132(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$145
	$20 = ($17 & [32])
	$18 = ($20 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$144 }
	if ( $20 ){ goto $label$4 }
	$16 = ($16 & [255])
	goto $label$142 
	
.LABEL $label$143
	if ( $19 ){ goto $label$4 }
	
.LABEL $label$142
	CALL $132(($5 + [432]), $16, $0)
	goto $label$4 
	
.LABEL $label$7
	$23 = CALL __unordtf2($30, $29, $30, $29)
	$16 = ($31 + [3])
	if ( ($21 & [8192]) ){ goto $label$146 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$146 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$148 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$149:
	if ( (($15 & [1]) == 0) ){ goto $label$150 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$150
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$149 }
	if ( $17 ){ goto $label$146 }
	$22 = ($22 & [255])
	goto $label$147 
	
.LABEL $label$148
	if ( $18 ){ goto $label$146 }
	
.LABEL $label$147
	CALL $132(($5 + [432]), $22, $0)
	
.LABEL $label$146
	$15 = *($0)
	if ( ($15 & [32]) ){ goto $label$155 }
	CALL $132($32, $31, $0)
	if ( ((*($0) & [32]) == 0) ){ goto $label$154 }
	goto $label$153 
	
.LABEL $label$155
	if ( ($15 & [32]) ){ goto $label$153 }
	
.LABEL $label$154
	$15 = uint_32(($28 & [32]) >> [5])
	CALL $132(( ( [8617] ? [8633] : $15 ) ? ( [8577] ? [8594] : $15 ) : $23 ), [3], $0)
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }
	goto $label$152 
	
.LABEL $label$153
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }
	
.LABEL $label$152
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$151 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$157 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$158:
	if ( (($15 & [1]) == 0) ){ goto $label$159 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$159
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$158 }
	if ( $17 ){ goto $label$151 }
	$22 = ($22 & [255])
	goto $label$156 
	
.LABEL $label$157
	if ( $18 ){ goto $label$151 }
	
.LABEL $label$156
	CALL $132(($5 + [432]), $22, $0)
	
.LABEL $label$151
	$15 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	goto $label$5 
	
.LABEL $label$6
	CALL $140(($5 + [320]), $30, $29, ($5 + [748]))
	$30 = *($5 + [328])
	$29 = *($5 + [320])
	CALL __addtf3(($5 + [304]), $29, $30, $29, $30)
	$30 = *((($5 + [304]) + [8]))
	$29 = *($5 + [304])
	if ( (CALL __eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$160 }
	*($5 + [748]) = (*($5 + [748]) + [-1])
	
.LABEL $label$160
	$33 = ($28 | [32])
	if ( ((int_32)$33 != (int_32)[97]) ){ goto $label$173 }
	$22 = ($28 & [32])
	$26 = ( ($32 + [9]) ? $32 : $22 )
	if ( ((uint_32)$16 > (uint_32)[26]) ){ goto $label$171 }
	if ( (([27] - $16) == 0) ){ goto $label$171 }
	$15 = ($16 + [-27])
	$34 = (int_64)4612248968380809216
	$35 = (int_64)0
	
.LOOP $label$174:
	CALL __multf3(($5 + [208]), $35, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($5 + [208]) + [8]))
	$35 = *($5 + [208])
	$15 = ($15 + [1])
	if ( $15 ){ goto $label$174 }
	if ( ((int_32)*($26) != (int_32)[45]) ){ goto $label$172 }
	CALL __subtf3(($5 + [160]), $29, ((int_64)$30 ^ (int_64)-9223372036854775808), $35, $34)
	CALL __addtf3(($5 + [144]), $35, $34, *($5 + [160]), *((($5 + [160]) + [8])))
	$30 = ((int_64)*((($5 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$29 = *($5 + [144])
	goto $label$171 
	
.LABEL $label$173
	$15 = ((int_32)$16 < (int_32)[0])
	if ( (CALL __netf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$176 }
	CALL __multf3(($5 + [288]), $29, $30, (int_64)0, (int_64)4619285842798575616)
	$22 = (*($5 + [748]) + [-28])
	*($5 + [748]) = $22
	$30 = *((($5 + [288]) + [8]))
	$29 = *($5 + [288])
	goto $label$175 
	
.LABEL $label$176
	$22 = *($5 + [748])
	
.LABEL $label$175
	$27 = ( [6] ? $16 : $15 )
	$36 = ( ($5 + [752]) ? $9 : ((int_32)$22 < (int_32)[0]) )
	$19 = $36
	
.LOOP $label$177:
	$15 = CALL __fixunstfsi($29, $30)
	CALL __floatunsitf(($5 + [272]), $15)
	CALL __subtf3(($5 + [256]), $29, $30, *($5 + [272]), *((($5 + [272]) + [8])))
	CALL __multf3(($5 + [240]), *($5 + [256]), *((($5 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($19) = $15
	$19 = ($19 + [4])
	$30 = *((($5 + [240]) + [8]))
	$29 = *($5 + [240])
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$177 }
	if ( ((int_32)$22 < (int_32)[1]) ){ goto $label$180 }
	$18 = $36
	
.LOOP $label$181:
	$17 = ( $22 ? [29] : ((int_32)$22 < (int_32)[29]) )
	$15 = ($19 + [-4])
	if ( ($15 <= $18) ){ goto $label$182 }
	$30 = (CASTING uint_64)(uint_32 $17)
	$29 = (int_64)0
	
.LOOP $label$183:
	$29 = ((uint_64)$29 / (uint_64)(int_64)1000000000)
	$29 = ((int_64)((int_64)*($15) << (int_64)$30) + (int_64)((int_64)$29 & (int_64)4294967295))
	*($15) = (int_64))($29 - ((int_64)$29 * (int_64)1000000000))
	$15 = ($15 + [-4])
	if ( ((uint_32)$15 >= (uint_32)$18) ){ goto $label$183 }
	$15 = (CASTING uint_32)(uint_64 $29)
	if ( ($15 == 0) ){ goto $label$182 }
	*(($18 = ($18 + [-4]))) = $15
	
.LABEL $label$182
	
.LOOP $label$185:
	$15 = $19
	if ( ((uint_32)$15 <= (uint_32)$18) ){ goto $label$184 }
	$19 = ($15 + [-4])
	if ( (*($19) == 0) ){ goto $label$185 }
	
.LABEL $label$184
	$19 = $15
	$22 = ($22 - $17)
	if ( ((int_32)$22 > (int_32)[0]) ){ goto $label$181 }
	*($5 + [748]) = $22
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$178 }
	goto $label$179 
	
.LABEL $label$180
	$15 = $19
	$18 = $36
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$178 }
	
.LABEL $label$179
	$26 = (((uint_32)($27 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$33 != (int_32)[102]) ){ goto $label$187 }
	$37 = ($36 + ($26 << [2]))
	
.LOOP $label$188:
	$19 = ([0] - $22)
	$23 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$190 }
	$25 = uint_32([1000000000] >> $23)
	$24 = ((int_32)([-1] << $23) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$191:
	$16 = *($19)
	*($19) = (uint_32($16 >> $23) + $17)
	$17 = ((int_32)($16 & $24) * (int_32)$25)
	$19 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$191 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$189 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$189 
	
.LABEL $label$190
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$189
	$15 = ( $37 ? $15 : ((int_32)int_32(($15 - $36) >> [2]) > (int_32)$26) )
	$22 = ($23 + $22)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$188 }
	goto $label$186 
	
.LABEL $label$187
	
.LOOP $label$192:
	$19 = ([0] - $22)
	$23 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$194 }
	$25 = uint_32([1000000000] >> $23)
	$24 = ((int_32)([-1] << $23) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$195:
	$16 = *($19)
	*($19) = (uint_32($16 >> $23) + $17)
	$17 = ((int_32)($16 & $24) * (int_32)$25)
	$19 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$195 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$193 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$193 
	
.LABEL $label$194
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$193
	$15 = ( ($18 + ($26 << [2])) ? $15 : ((int_32)int_32(($15 - $18) >> [2]) > (int_32)$26) )
	$22 = ($23 + $22)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$192 }
	
.LABEL $label$186
	*($5 + [748]) = $22
	
.LABEL $label$178
	$19 = [0]
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$196 }
	$19 = ((int_32)int_32(($36 - $18) >> [2]) * (int_32)[9])
	$16 = *($18)
	if ( ($16 <= [10]) ){ goto $label$196 }
	$17 = [10]
	
.LOOP $label$197:
	$19 = ($19 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$197 }
	
.LABEL $label$196
	$23 = ((int_32)$33 == (int_32)[103])
	$25 = (((int_32)$27 != (int_32)[0]) & $23)
	$16 = ( [0] ? $19 : ((int_32)$33 == (int_32)[102]) )
	$17 = (($27 - $16) - $25)
	if ( ((int_32)$17 >= (int_32)(((int_32)int_32(($15 - $36) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$198 }
	$24 = ($17 + [147456])
	$26 = ((int_32)$24 / (int_32)[9])
	$37 = ($36 + ($26 << [2]))
	$22 = ($37 + [-65532])
	$17 = [10]
	$26 = ((int_32)$26 * (int_32)[9])
	if ( ((int_32)($24 - $26) > (int_32)[7]) ){ goto $label$199 }
	$16 = (((($27 + ([0] - $25)) + [147455]) - $16) - $26)
	$17 = [10]
	
.LOOP $label$200:
	$17 = ((int_32)$17 * (int_32)[10])
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$200 }
	
.LABEL $label$199
	$24 = ((uint_32)$25 / (uint_32)$17)
	$25 = *($22)
	$16 = ($25 - ((int_32)$24 * (int_32)$17))
	$26 = ($22 + [4])
	if ( ((int_32)$26 != (int_32)$15) ){ goto $label$202 }
	if ( ($16 == 0) ){ goto $label$201 }
	
.LABEL $label$202
	if ( ($24 & [1]) ){ goto $label$204 }
	$29 = (int_64)4643211215818981376
	$30 = (int_64)0
	if ( ((uint_32)$22 <= (uint_32)$18) ){ goto $label$203 }
	if ( ((int_32)$17 != (int_32)[1000000000]) ){ goto $label$203 }
	if ( ((*(($22 + [-4])) & [1]) == 0) ){ goto $label$203 }
	
.LABEL $label$204
	$29 = (int_64)4643211215818981376
	$30 = (int_64)1
	
.LABEL $label$203
	$34 = (int_64)4611123068473966592
	$24 = uint_32($17 >> [1])
	if ( ($16 <= $24) ){ goto $label$205 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$16 == (int_32)$24) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$15) )
	
.LABEL $label$205
	if ( ($31 == 0) ){ goto $label$206 }
	if ( ((int_32)*($32) != (int_32)[45]) ){ goto $label$206 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$29 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	
.LABEL $label$206
	CALL __addtf3(($5 + [224]), $30, $29, (int_64)0, $34)
	$16 = ($25 - $16)
	*($22) = $16
	if ( (CALL __eqtf2(*($5 + [224]), *((($5 + [224]) + [8])), $30, $29) == 0) ){ goto $label$201 }
	$19 = ($16 + $17)
	*($22) = $19
	if ( ($19 <= [1000000000]) ){ goto $label$207 }
	$19 = ($37 + [-65536])
	
.LOOP $label$208:
	*(($19 + [4])) = [0]
	if ( ((uint_32)$19 >= (uint_32)$18) ){ goto $label$209 }
	*(($18 = ($18 + [-4]))) = [0]
	
.LABEL $label$209
	$17 = (*($19) + [1])
	*($19) = $17
	$19 = ($19 + [-4])
	if ( ((uint_32)$17 > (uint_32)[999999999]) ){ goto $label$208 }
	$22 = ($19 + [4])
	
.LABEL $label$207
	$19 = ((int_32)int_32(($36 - $18) >> [2]) * (int_32)[9])
	$16 = *($18)
	if ( ($16 <= [10]) ){ goto $label$201 }
	$17 = [10]
	
.LOOP $label$210:
	$19 = ($19 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$210 }
	
.LABEL $label$201
	$17 = ($22 + [4])
	$15 = ( $17 ? $15 : ((uint_32)$15 > (uint_32)$17) )
	
.LABEL $label$198
	$22 = ([0] - $19)
	
.LOOP $label$213:
	$16 = $15
	if ( ((uint_32)$16 <= (uint_32)$18) ){ goto $label$212 }
	$15 = ($16 + [-4])
	if ( (*($15) == 0) ){ goto $label$213 }
	$24 = [1]
	if ( $23 ){ goto $label$211 }
	goto $label$162 
	
.LABEL $label$212
	$24 = [0]
	if ( ($23 == 0) ){ goto $label$162 }
	
.LABEL $label$211
	$15 = ($27 + ($27 == 0))
	if ( ((int_32)$15 <= (int_32)$19) ){ goto $label$170 }
	if ( ((int_32)$19 < (int_32)[-4]) ){ goto $label$170 }
	$28 = ($28 + [-1])
	$27 = (($15 + [-1]) - $19)
	$23 = ($21 & [8])
	if ( ($23 == 0) ){ goto $label$169 }
	goto $label$161 
	
.LABEL $label$172
	CALL __addtf3(($5 + [192]), $29, $30, $35, $34)
	CALL __subtf3(($5 + [176]), *($5 + [192]), *((($5 + [192]) + [8])), $35, $34)
	$30 = *((($5 + [176]) + [8]))
	$29 = *($5 + [176])
	
.LABEL $label$171
	$19 = $10
	$15 = int_32($23 >> [31])
	$23 = *($5 + [748])
	$15 = ((int_32)($23 + $15) ^ (int_32)$15)
	if ( ($15 == 0) ){ goto $label$215 }
	$18 = [0]
	
.LOOP $label$216:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [692]) + $18) + [11])) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$216 }
	$19 = ((($5 + [692]) + $18) + [12])
	if ( $18 ){ goto $label$214 }
	
.LABEL $label$215
	*(($19 = ($19 + [-1]))) = [48]
	
.LABEL $label$214
	$25 = ($31 | [2])
	*(($24 = ($19 + [-2]))) = ($28 + [15])
	*(($19 + [-1])) = ( [45] ? [43] : ((int_32)$23 < (int_32)[0]) )
	if ( ($21 & [8]) ){ goto $label$217 }
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$168 }
	$15 = ($5 + [704])
	
.LOOP $label$218:
	$18 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [80]), $18)
	CALL __subtf3(($5 + [64]), $29, $30, *($5 + [80]), *((($5 + [80]) + [8])))
	CALL __multf3(($5 + [48]), *($5 + [64]), *((($5 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [24288])) | $22)
	$30 = *((($5 + [48]) + [8]))
	$29 = *($5 + [48])
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$219 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$219
	$15 = $18
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$218 }
	goto $label$167 
	
.LABEL $label$217
	$15 = ($5 + [704])
	
.LOOP $label$220:
	$18 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [128]), $18)
	CALL __subtf3(($5 + [112]), $29, $30, *($5 + [128]), *((($5 + [128]) + [8])))
	CALL __multf3(($5 + [96]), *($5 + [112]), *((($5 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [24288])) | $22)
	$30 = *((($5 + [96]) + [8]))
	$29 = *($5 + [96])
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$221 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$221
	$15 = $18
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$220 }
	goto $label$167 
	
.LABEL $label$170
	$27 = ($15 + [-1])
	$28 = ($28 + [-2])
	$23 = ($21 & [8])
	if ( $23 ){ goto $label$161 }
	
.LABEL $label$169
	$15 = [9]
	if ( ($24 == 0) ){ goto $label$222 }
	$23 = *(($16 + [-4]))
	if ( ($23 == 0) ){ goto $label$222 }
	$15 = [0]
	if ( ((uint_32)$23 % (uint_32)[10]) ){ goto $label$222 }
	$17 = [10]
	$15 = [0]
	
.LOOP $label$223:
	$15 = ($15 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( (((uint_32)$23 % (uint_32)$17) == 0) ){ goto $label$223 }
	
.LABEL $label$222
	$17 = (((int_32)int_32(($16 - $36) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($28 | [32]) != (int_32)[102]) ){ goto $label$166 }
	$23 = [0]
	$15 = ($17 - $15)
	$15 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$27 = ( $27 ? $15 : ((int_32)$27 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$168
	$18 = ($5 + [704])
	
.LOOP $label$224:
	$19 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [32]), $19)
	CALL __subtf3(($5 + [16]), $29, $30, *($5 + [32]), *((($5 + [32]) + [8])))
	CALL __multf3($5, *($5 + [16]), *((($5 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($15 = $18)) = (*(($19 + [24288])) | $22)
	$30 = *(($5 + [8]))
	$29 = *($5)
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$225 }
	if ( (CALL __eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$225 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$225
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$224 }
	
.LABEL $label$167
	$15 = [-1]
	$22 = ($10 - $24)
	if ( ((int_32)(([2147483645] - $25) - $22) < (int_32)$16) ){ goto $label$5 }
	$23 = ($18 - ($5 + [704]))
	$28 = ( ( ($16 + [2]) ? $23 : ((int_32)($8 + $18) < (int_32)$16) ) ? $23 : $16 )
	$16 = (($22 + $25) + $28)
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$163 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$163 }
	$15 = ($27 <= [256])
	$27 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $27 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$165 }
	$15 = ($18 == 0)
	$18 = $27
	
.LOOP $label$226:
	if ( (($15 & [1]) == 0) ){ goto $label$227 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$227
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$226 }
	if ( $17 ){ goto $label$163 }
	$27 = ($27 & [255])
	goto $label$164 
	
.LABEL $label$166
	$23 = [0]
	$15 = (($17 + $19) - $15)
	$15 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$27 = ( $27 ? $15 : ((int_32)$27 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$165
	if ( $18 ){ goto $label$163 }
	
.LABEL $label$164
	CALL $132(($5 + [432]), $27, $0)
	
.LABEL $label$163
	if ( (*($0) & [32]) ){ goto $label$228 }
	CALL $132($26, $25, $0)
	
.LABEL $label$228
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$229 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$229 }
	$15 = ($25 <= [256])
	$25 = ($20 - $16)
	CALL memset(($5 + [432]), [48], ( $25 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$231 }
	$15 = ($18 == 0)
	$18 = $25
	
.LOOP $label$232:
	if ( (($15 & [1]) == 0) ){ goto $label$233 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$233
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$232 }
	if ( $17 ){ goto $label$229 }
	$25 = ($25 & [255])
	goto $label$230 
	
.LABEL $label$231
	if ( $18 ){ goto $label$229 }
	
.LABEL $label$230
	CALL $132(($5 + [432]), $25, $0)
	
.LABEL $label$229
	if ( (*($0) & [32]) ){ goto $label$234 }
	CALL $132(($5 + [704]), $23, $0)
	
.LABEL $label$234
	$23 = ($28 - $23)
	if ( ((int_32)$23 < (int_32)[1]) ){ goto $label$235 }
	$15 = ($23 <= [256])
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$237 }
	$15 = ($18 == 0)
	$18 = $23
	
.LOOP $label$238:
	if ( (($15 & [1]) == 0) ){ goto $label$239 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$239
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$238 }
	if ( $17 ){ goto $label$235 }
	$23 = ($23 & [255])
	goto $label$236 
	
.LABEL $label$237
	if ( $18 ){ goto $label$235 }
	
.LABEL $label$236
	CALL $132(($5 + [432]), $23, $0)
	
.LABEL $label$235
	if ( (*($0) & [32]) ){ goto $label$240 }
	CALL $132($24, $22, $0)
	
.LABEL $label$240
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$241 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$241 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$243 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$244:
	if ( (($15 & [1]) == 0) ){ goto $label$245 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$245
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$244 }
	if ( $17 ){ goto $label$241 }
	$22 = ($22 & [255])
	goto $label$242 
	
.LABEL $label$243
	if ( $18 ){ goto $label$241 }
	
.LABEL $label$242
	CALL $132(($5 + [432]), $22, $0)
	
.LABEL $label$241
	$15 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$162
	$23 = ($21 & [8])
	
.LABEL $label$161
	$15 = [-1]
	$25 = ($27 | $23)
	if ( ((int_32)$27 > (int_32)( [2147483645] ? [2147483646] : $25 )) ){ goto $label$5 }
	$26 = (($27 + ((int_32)$25 != (int_32)[0])) + [1])
	$33 = ((int_32)($28 | [32]) != (int_32)[102])
	if ( $33 ){ goto $label$247 }
	if ( ((int_32)$19 > (int_32)([2147483647] - $26)) ){ goto $label$5 }
	$19 = ( $19 ? [0] : ((int_32)$19 > (int_32)[0]) )
	goto $label$246 
	
.LABEL $label$247
	$17 = $10
	$38 = ((int_32)$19 < (int_32)[0])
	$15 = ( $22 ? $19 : $38 )
	if ( ($15 == 0) ){ goto $label$248 }
	
.LOOP $label$249:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$249 }
	
.LABEL $label$248
	if ( ((int_32)($10 - $17) > (int_32)[1]) ){ goto $label$250 }
	$15 = ($17 + [-1])
	
.LOOP $label$251:
	*($15) = [48]
	$19 = ($10 - $15)
	$17 = ($15 + [-1])
	$15 = $17
	if ( ((int_32)$19 < (int_32)[2]) ){ goto $label$251 }
	$17 = ($17 + [1])
	
.LABEL $label$250
	*(($37 = ($17 + [-2]))) = $28
	$15 = [-1]
	*(($17 + [-1])) = ( [45] ? [43] : $38 )
	$19 = ($10 - $37)
	if ( ((int_32)$19 > (int_32)([2147483647] - $26)) ){ goto $label$5 }
	
.LABEL $label$246
	$15 = [-1]
	$19 = ($19 + $26)
	if ( ((int_32)$19 > (int_32)((int_32)$31 ^ (int_32)[2147483647])) ){ goto $label$5 }
	$26 = ($19 + $31)
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$252 }
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$252 }
	$15 = ($28 <= [256])
	$28 = ($20 - $26)
	CALL memset(($5 + [432]), [32], ( $28 ? [256] : $15 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$254 }
	$15 = ($19 == 0)
	$19 = $28
	
.LOOP $label$255:
	if ( (($15 & [1]) == 0) ){ goto $label$256 }
	CALL $132(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$256
	$22 = ($17 & [32])
	$15 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$255 }
	if ( $22 ){ goto $label$252 }
	$28 = ($28 & [255])
	goto $label$253 
	
.LABEL $label$254
	if ( $19 ){ goto $label$252 }
	
.LABEL $label$253
	CALL $132(($5 + [432]), $28, $0)
	
.LABEL $label$252
	if ( (*($0) & [32]) ){ goto $label$257 }
	CALL $132($32, $31, $0)
	
.LABEL $label$257
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$258 }
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$258 }
	$15 = ($28 <= [256])
	$28 = ($20 - $26)
	CALL memset(($5 + [432]), [48], ( $28 ? [256] : $15 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$260 }
	$15 = ($19 == 0)
	$19 = $28
	
.LOOP $label$261:
	if ( (($15 & [1]) == 0) ){ goto $label$262 }
	CALL $132(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$262
	$22 = ($17 & [32])
	$15 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$261 }
	if ( $22 ){ goto $label$258 }
	$28 = ($28 & [255])
	goto $label$259 
	
.LABEL $label$260
	if ( $19 ){ goto $label$258 }
	
.LABEL $label$259
	CALL $132(($5 + [432]), $28, $0)
	
.LABEL $label$258
	if ( $33 ){ goto $label$273 }
	$23 = ( $36 ? $18 : ((uint_32)$18 > (uint_32)$36) )
	$22 = $23
	
.LOOP $label$274:
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$276 }
	$18 = [0]
	
.LOOP $label$277:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($6 + $18)) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$277 }
	goto $label$275 
	
.LABEL $label$276
	$18 = [0]
	
.LABEL $label$275
	$15 = ($7 + $18)
	if ( ((int_32)$22 == (int_32)$23) ){ goto $label$281 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$280 }
	
.LOOP $label$282:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$282 }
	$15 = ($5 + [704])
	if ( ((*($0) & [32]) == 0) ){ goto $label$279 }
	goto $label$278 
	
.LABEL $label$281
	if ( $18 ){ goto $label$280 }
	*(($15 = ($15 + [-1]))) = [48]
	
.LABEL $label$280
	if ( (*($0) & [32]) ){ goto $label$278 }
	
.LABEL $label$279
	CALL $132($15, ($7 - $15), $0)
	
.LABEL $label$278
	$22 = ($22 + [4])
	if ( ((uint_32)$22 <= (uint_32)$36) ){ goto $label$274 }
	if ( ($25 == 0) ){ goto $label$283 }
	if ( (*($0) & [32]) ){ goto $label$283 }
	CALL $132([8686], [1], $0)
	
.LABEL $label$283
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$272 }
	if ( ((uint_32)$22 >= (uint_32)$16) ){ goto $label$271 }
	
.LOOP $label$284:
	$15 = $7
	$18 = *($22)
	if ( ($18 == 0) ){ goto $label$286 }
	$15 = $7
	
.LOOP $label$287:
	$19 = ((uint_32)$18 / (uint_32)[10])
	*(($15 = ($15 + [-1]))) = (($18 - ((int_32)$19 * (int_32)[10])) | [48])
	$17 = ((uint_32)$18 > (uint_32)[9])
	$18 = $19
	if ( $17 ){ goto $label$287 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$285 }
	
.LABEL $label$286
	
.LOOP $label$288:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$288 }
	
.LABEL $label$285
	if ( (*($0) & [32]) ){ goto $label$289 }
	CALL $132($15, ( $27 ? [9] : ((int_32)$27 < (int_32)[9]) ), $0)
	
.LABEL $label$289
	$15 = ($27 + [-9])
	if ( ((int_32)$27 < (int_32)[10]) ){ goto $label$270 }
	$27 = $15
	$22 = ($22 + [4])
	if ( ($22 <= $16) ){ goto $label$284 }
	goto $label$270 
	
.LABEL $label$273
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$266 }
	$25 = ( $16 ? ($18 + [4]) : $24 )
	if ( ($23 == 0) ){ goto $label$268 }
	$22 = $18
	
.LOOP $label$290:
	$17 = $7
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$292 }
	$19 = [0]
	
.LOOP $label$293:
	$17 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$293 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$291 }
	
.LABEL $label$292
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$291
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$295 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$294 }
	
.LOOP $label$296:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$296 }
	goto $label$294 
	
.LABEL $label$295
	$15 = *($0)
	if ( ($15 & [32]) ){ goto $label$297 }
	CALL $132($17, [1], $0)
	$15 = *($0)
	
.LABEL $label$297
	$17 = ($17 + [1])
	if ( ($15 & [32]) ){ goto $label$294 }
	CALL $132([8686], [1], $0)
	
.LABEL $label$294
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$298 }
	CALL $132($17, ( $15 ? $27 : ((int_32)$27 > (int_32)$15) ), $0)
	
.LABEL $label$298
	$27 = ($27 - $15)
	$22 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$267 }
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$290 }
	goto $label$267 
	
.LABEL $label$272
	$15 = $27
	if ( ((int_32)$15 >= (int_32)[1]) ){ goto $label$269 }
	goto $label$265 
	
.LABEL $label$271
	$15 = $27
	
.LABEL $label$270
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$265 }
	
.LABEL $label$269
	$18 = ($15 <= [256])
	CALL memset(($5 + [432]), [48], ( $15 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$300 }
	$18 = ($19 == 0)
	$19 = $15
	
.LOOP $label$301:
	if ( (($18 & [1]) == 0) ){ goto $label$302 }
	CALL $132(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$302
	$16 = ($17 & [32])
	$18 = ($16 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$301 }
	if ( $16 ){ goto $label$265 }
	$15 = ($15 & [255])
	goto $label$299 
	
.LABEL $label$300
	if ( $19 ){ goto $label$265 }
	
.LABEL $label$299
	CALL $132(($5 + [432]), $15, $0)
	if ( ((int_32)$21 == (int_32)[8192]) ){ goto $label$264 }
	goto $label$263 
	
.LABEL $label$268
	$22 = $18
	
.LOOP $label$303:
	$17 = $7
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$305 }
	$19 = [0]
	
.LOOP $label$306:
	$17 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$306 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$304 }
	
.LABEL $label$305
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$304
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$308 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$307 }
	
.LOOP $label$309:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$309 }
	goto $label$307 
	
.LABEL $label$308
	if ( (*($0) & [32]) ){ goto $label$310 }
	CALL $132($17, [1], $0)
	
.LABEL $label$310
	$17 = ($17 + [1])
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$307 }
	if ( (*($0) & [32]) ){ goto $label$307 }
	CALL $132([8686], [1], $0)
	
.LABEL $label$307
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$311 }
	CALL $132($17, ( $15 ? $27 : ((int_32)$27 > (int_32)$15) ), $0)
	
.LABEL $label$311
	$27 = ($27 - $15)
	$22 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$267 }
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$303 }
	
.LABEL $label$267
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$266 }
	$18 = ($27 <= [256])
	CALL memset(($5 + [432]), [48], ( $27 ? [256] : $18 ))
	$19 = *($0)
	$15 = ($19 & [32])
	if ( $18 ){ goto $label$313 }
	$15 = ($15 == 0)
	$18 = $27
	
.LOOP $label$314:
	if ( (($15 & [1]) == 0) ){ goto $label$315 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$315
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$314 }
	if ( $17 ){ goto $label$266 }
	$27 = ($27 & [255])
	goto $label$312 
	
.LABEL $label$313
	if ( $15 ){ goto $label$266 }
	
.LABEL $label$312
	CALL $132(($5 + [432]), $27, $0)
	
.LABEL $label$266
	if ( (*($0) & [32]) ){ goto $label$265 }
	CALL $132($37, ($10 - $37), $0)
	
.LABEL $label$265
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$263 }
	
.LABEL $label$264
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$263 }
	$15 = ($16 <= [256])
	$16 = ($20 - $26)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$317 }
	$15 = ($18 == 0)
	$18 = $16
	
.LOOP $label$318:
	if ( (($15 & [1]) == 0) ){ goto $label$319 }
	CALL $132(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$319
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$318 }
	if ( $17 ){ goto $label$263 }
	$16 = ($16 & [255])
	goto $label$316 
	
.LABEL $label$317
	if ( $18 ){ goto $label$263 }
	
.LABEL $label$316
	CALL $132(($5 + [432]), $16, $0)
	
.LABEL $label$263
	$15 = ( $20 ? $26 : ((int_32)$20 > (int_32)$26) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	
.LABEL $label$3
	*(CALL $116()) = [75]
	
.LABEL $label$2
	$14 = [-1]
	
.LABEL $label$1
	$global$0 = ($5 + [8128])
	$15
	$18
	return $14
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11600])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $150($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*($3 + [8]) = $0
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	$5 = CALL _Znwj([80])
	CALL $82($5)
	*($5 + [64]) = $0
	CALL $83(($3 + [8]), $5)
	*($3 + [24]) = $5
	$6 = *($5 + [8])
	*($3 + [8]) = $6
	$7 = *($5 + [68])
	*($3 + [4]) = $7
	$8 = ($0 + [28])
	$1 = *($8)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($1 + [8]) = $6
	*($1 + [16]) = $7
	*($3 + [24]) = [0]
	*($1) = $5
	*($8) = ($1 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $84(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $153($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [11623])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [11623])
	CALL memcpy(($1 + [9]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [11623])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [32]) = ((int_32)*($2 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [8])
	$4 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-8] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $37($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	*($2) = $3
	*($2 + [8]) = $4
	CALL eosio_assert(((int_32)($4 - $3) > (int_32)[7]), [11823])
	CALL memcpy($3, $1, [8])
	*($2 + [4]) = ($3 + [8])
	CALL $81($2, $6)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $79($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $110($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $110($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $105($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$8 = *($2)
	$2 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($9 = ((int_32)$5 * (int_32)[24]))))) = $2
	*($1 + [8]) = $8
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $9) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [11623])
	CALL memcpy(($1 + [16]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $71($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11623])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $114(($0 + [16]))
	
.LABEL $label$1
	CALL $114(($0 + [28]))
	(unreachable)
	return (unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [144])
	$global$0 = $3
	$4 = (int_64)5
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	$4 = (int_64)5
	
.LOOP $label$2:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$2 }
	$5 = [0]
	*((($3 + [104]) + [32])) = [0]
	*($3 + [120]) = (int_64)-1
	*($3 + [128]) = (int_64)0
	*($3 + [112]) = (int_64)6138663577826885632
	*($3 + [104]) = (int_64)6138663577826885632
	$6 = [0]
	$7 = CALL db_find_i64((int_64)6138663577826885632, (int_64)6138663577826885632, (int_64)-5069606918720847872, (int_64)4995142087184830980)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $72(($3 + [104]), $7)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)($3 + [104])), [11549])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [11829])
	*((($3 + [40]) + [56])) = *(($6 + [56]))
	*((($3 + [40]) + [48])) = *(($6 + [48]))
	*((($3 + [40]) + [40])) = *(($6 + [40]))
	*((($3 + [40]) + [32])) = *(($6 + [32]))
	*((($3 + [40]) + [24])) = *(($6 + [24]))
	*((($3 + [40]) + [16])) = *(($6 + [16]))
	*((($3 + [40]) + [8])) = *(($6 + [8]))
	*($3 + [24]) = (CASTING uint_64)(uint_32 $2)
	*($3 + [32]) = (int_64)1296126464
	*($3 + [40]) = *($6)
	CALL eosio_assert([1], [8637])
	$4 = (int_64)5062994
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$4 = $8
	$7 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $6 ){ goto $label$7 }
	$7 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [8688])
	*((($3 + [8]) + [8])) = *((($3 + [24]) + [8]))
	*($3 + [8]) = *($3 + [24])
	CALL $5($0, ($3 + [40]), ($3 + [8]), (int_64)1397703940)
	$2 = *($3 + [128])
	if ( ($2 == 0) ){ goto $label$8 }
	$7 = ($3 + [132])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$11 }
	$5 = *(($3 + [128]))
	goto $label$9 
	
.LABEL $label$10
	$5 = $2
	
.LABEL $label$9
	*($7) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$8
	$global$0 = ($3 + [144])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $114($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [11628])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $37($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [11623])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [11600])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $150($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [20]) = $7
	*($3 + [16]) = $7
	*($3 + [24]) = ($7 + $6)
	*(($9 = CALL _Znwj([48])) + [16]) = (int_64)1397703940
	*($9 + [8]) = (int_64)0
	CALL eosio_assert([1], [8637])
	$10 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$10 = $11
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$10 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [8688])
	*($9 + [32]) = $0
	CALL $75(($3 + [16]), $9)
	*($9 + [36]) = $1
	*($3 + [8]) = $9
	$4 = *($9)
	*($3 + [7]) = $4
	*($3) = $1
	$2 = ($0 + [28])
	$5 = *($2)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $4) & (int_64)255)
	*($5 + [16]) = $1
	*($3 + [8]) = [0]
	*($5) = $9
	*($2) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $76($8, ($3 + [8]), ($3 + [7]), $3)
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $153($7)
	
.LABEL $label$11
	$5 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $146($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	CALL $111($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $105($0)
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1397703940
	CALL eosio_assert([1], [8637])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8688])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($3 + [12]) = $1
	*($3 + [8]) = $1
	*($3 + [16]) = ($1 + $2)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($0 + [8])
	*($3 + [32]) = $0
	*($3 + [40]) = ($0 + [16])
	*($3 + [44]) = ($0 + [32])
	CALL $100(($3 + [32]), ($3 + [24]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [11600])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $150($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [36]) = $7
	*($3 + [32]) = $7
	*($3 + [40]) = ($7 + $6)
	*(($9 = CALL _Znwj([64])) + [24]) = (int_64)1397703940
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [8637])
	$10 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$10 = $11
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$10 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [8688])
	*($9 + [48]) = $0
	CALL $73(($3 + [32]), $9)
	*($9 + [52]) = $1
	*($3 + [24]) = $9
	$10 = *($9)
	*($3 + [16]) = $10
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $10
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $74($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $153($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [48])
	return $9
}

int_32 .FUNC $129 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

void .FUNC $127 ()
{
	CALL $149([13332])
}