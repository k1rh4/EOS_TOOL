(data (i32.const 8192) "transfer\00")
(data (i32.const 8201) "withdraw\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8296) "Invalid quantity\00")
(data (i32.const 8313) "Only support EVD\00")
(data (i32.const 8330) "#\00")
(data (i32.const 8332) "Account length must less or equal 12\00")
(data (i32.const 8369) "Amount must be greater than MIN EVD because it takes RAM of contract to save it\00")
(data (i32.const 8449) "Can not change from positive to negative\00")
(data (i32.const 8490) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8539) "invalid symbol name\00")
(data (i32.const 8559) "read\00")
(data (i32.const 8564) "get\00")
(data (i32.const 8568) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8619) "error reading iterator\00")
(data (i32.const 8642) "cannot create objects in table of another contract\00")
(data (i32.const 8693) "write\00")
(data (i32.const 8699) "cannot pass end iterator to modify\00")
(data (i32.const 8734) "object passed to modify is not in multi_index\00")
(data (i32.const 8780) "cannot modify objects in table of another contract\00")
(data (i32.const 8831) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8890) "The account does not exist!\00")
(data (i32.const 8918) "#TIME# 86400\00")
(data (i32.const 8931) "cannot pass end iterator to erase\00")
(data (i32.const 8965) "cannot increment end iterator\00")
(data (i32.const 8995) "object passed to erase is not in multi_index\00")
(data (i32.const 9040) "cannot erase objects in table of another contract\00")
(data (i32.const 9090) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9144) "\bc#\00\00")
(data (i32.const 9148) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9181) "Must have account\00")
(import "env" "current_time" (func $fimport$0 (result i64)))
(import "env" "require_auth2" (func $fimport$1 (param i64 i64)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "action_data_size" (func $fimport$5 (result i32)))
(import "env" "read_action_data" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$10 (result i64)))
(import "env" "db_get_i64" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$12 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$13 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$14 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$15 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$16 (param i32 i64 i32)))
(import "env" "send_inline" (func $fimport$17 (param i32 i32)))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$20 (param i32)))
(import "env" "abort" (func $fimport$21))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$23 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$34 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$35 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$38 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$40 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$41 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$42 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $54))
(export "_Znwj" (func $52))
(export "_Znaj" (func $53))
(export "_ZdaPv" (func $55))
(export "_ZnwjSt11align_val_t" (func $56))
(export "_ZnajSt11align_val_t" (func $57))
(export "_ZdlPvSt11align_val_t" (func $58))
(export "_ZdaPvSt11align_val_t" (func $59))
(table $0 1 1 anyfunc)

(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17616))
(global $global$2 i32 (i32.const 17616))


void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8734])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8780])
	$5 = *($1 + [8])
	*($4 + [40]) = ((int_64))((int_64)9223372036854775807 - $5) + (int_64)((int_64)*($1 + [24]) / (int_64)-8640000))
	$6 = *(*($3))
	$7 = *(*($3 + [4]))
	*($1 + [16]) = ((int_64)((int_64)*(*($3 + [8])) * (int_64)$7) + (int_64)*($1 + [16]))
	*($1 + [8]) = ((int_64)$5 + (int_64)((int_64)$7 * (int_64)$6))
	$5 = *($1)
	*($1 + [24]) = CALL current_time()
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8831])
	CALL eosio_assert([1], [8693])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8693])
	$3 = ($1 + [8])
	CALL memcpy(($4 | [8]), $3, [8])
	CALL eosio_assert([1], [8693])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8693])
	$8 = ($1 + [24])
	CALL memcpy(($4 + [24]), $8, [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [56]) = ((int_64))((int_64)9223372036854775807 - *($3)) + (int_64)((int_64)*($8) / (int_64)-8640000))
	if ( (CALL $71(($4 + [40]), ($4 + [56]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [40])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7073229952170459136, ($4 + [48]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [56]))
	
.LABEL $label$2
	$global$0 = ($4 + [64])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8642])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [32]) = $1
	CALL $31(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $32(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $77 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9212]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9216])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9212]) = [1]
	$2 = ($2 << [16])
	*([0] + [9216]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9216])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9216]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9212]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9212]) = [1]
	$3 = ($3 << [16])
	*([0] + [9216]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9216])
	
.LABEL $label$10
	*([0] + [9216]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $77($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8210])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $66 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8693])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8693])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $67())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $74($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $67 ()
{
	return [9204]
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [32]) = *(*($4 + [8]))
	$5 = *($0)
	*($1 + [40]) = CALL current_time()
	$4 = *($1 + [16])
	$6 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [32])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $75($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	CALL $38(($3 + [8]), $1)
	$7 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)4982429584940072960, *(*($0 + [8])), $7, $2, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $78($2)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$7 = *(($5 + [8]))
	$8 = *(*(($0 + [8])))
	$9 = *($1)
	*($3 + [24]) = (int_64))((int_64)9223372036854775807 - ((int_64)CALL $69(*(($1 + [8]))) * (int_64)*(($1 + [32]))))
	*($1 + [56]) = CALL db_idx64_store($7, (int_64)4982429584940072960, $8, $9, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*((($4 + [48]) + [32])) = [0]
	*($4 + [56]) = $2
	*($4 + [48]) = $1
	*($4 + [64]) = (int_64)-1
	*($4 + [72]) = (int_64)0
	*($4 + [84]) = [0]
	$5 = [0]
	$6 = CALL db_find_i64($1, $2, (int_64)4982429584940072960, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $12(($4 + [48]), $6)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)($4 + [48])), [8568])
	
.LABEL $label$1
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [44]) = [0]
	*($4 + [16]) = $3
	*($4 + [8]) = $1
	$6 = CALL db_find_i64($1, $3, (int_64)4982429584940072960, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $12(($4 + [8]), $6)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($4 + [8])), [8568])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((int_64)*($5 + [8]) != (int_64)0) ){ goto $label$2 }
	$7 = *($5 + [16])
	if ( ($7 & [1]) ){ goto $label$4 }
	if ( uint_32($7 >> [1]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	if ( *(($5 + [20])) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_64)*($6 + [8]) != (int_64)0) ){ goto $label$2 }
	$7 = *($6 + [16])
	if ( ($7 & [1]) ){ goto $label$6 }
	if ( uint_32($7 >> [1]) ){ goto $label$2 }
	goto $label$5 
	
.LABEL $label$6
	if ( *(($6 + [20])) ){ goto $label$2 }
	
.LABEL $label$5
	CALL eosio_assert([1], [8931])
	CALL eosio_assert([1], [8965])
	$7 = CALL db_next_i64(*($5 + [52]), ($4 + [88]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	CALL $12(($4 + [48]), $7)
	
.LABEL $label$7
	CALL $48(($4 + [48]), $5)
	if ( ((int_64)$3 == (int_64)$2) ){ goto $label$2 }
	CALL eosio_assert([1], [8931])
	CALL eosio_assert([1], [8965])
	$5 = CALL db_next_i64(*($6 + [52]), ($4 + [88]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	CALL $12(($4 + [8]), $5)
	
.LABEL $label$8
	CALL $48(($4 + [8]), $6)
	
.LABEL $label$2
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$9 }
	$8 = ($4 + [36])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($6 + [24])))
	
.LABEL $label$14
	CALL _ZdlPv($6)
	
.LABEL $label$13
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$12 }
	$5 = *(($4 + [32]))
	goto $label$10 
	
.LABEL $label$11
	$5 = $7
	
.LABEL $label$10
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$7 = *($4 + [72])
	if ( ($7 == 0) ){ goto $label$15 }
	$8 = ($4 + [76])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$19 }
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($6 + [24])))
	
.LABEL $label$20
	CALL _ZdlPv($6)
	
.LABEL $label$19
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$18 }
	$5 = *(($4 + [72]))
	goto $label$16 
	
.LABEL $label$17
	$5 = $7
	
.LABEL $label$16
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$global$0 = ($4 + [96])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8734])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8780])
	*(($5 = $4) + [24]) = (int_64))((int_64)9223372036854775807 - ((int_64)CALL $69(*($1 + [8])) * (int_64)*($1 + [32])))
	$6 = *($1)
	CALL $63(($1 + [16]), *($3))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8831])
	$3 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $75($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL $38(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $78($4)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [40]) = (int_64))((int_64)9223372036854775807 - ((int_64)CALL $69(*(($1 + [8]))) * (int_64)*(($1 + [32]))))
	if ( (CALL $71(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [56])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4982429584940072960, ($5 + [32]), $6)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$6
	$global$0 = ($5 + [48])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $34($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $65($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $65($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $60($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8642])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [48]) = $1
	CALL $51(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $29(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8995])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9040])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9090])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [36]))
	$6 = *(($1 + [40]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7073229952170459136, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [36]) = [0]
	*($3 + [8]) = $2
	*($3) = $1
	*($3 + [24]) = (int_64)0
	$4 = CALL db_lowerbound_i64($1, $2, (int_64)4982429584940072960, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$5 = ($3 + [8])
	
.LOOP $label$2:
	$4 = CALL $12($3, $4)
	CALL eosio_assert([1], [8931])
	CALL eosio_assert([1], [8965])
	$6 = CALL db_next_i64(*($4 + [52]), ($3 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	CALL $12($3, $6)
	
.LABEL $label$3
	CALL $48($3, $4)
	$4 = CALL db_lowerbound_i64(*($3), *($5), (int_64)4982429584940072960, (int_64)0)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$2 }
	$5 = *($3 + [24])
	if ( ($5 == 0) ){ goto $label$1 }
	$7 = ($3 + [28])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($6 + [24])))
	
.LABEL $label$8
	CALL _ZdlPv($6)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($3 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*($7) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8619])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$5 }
	$2 = CALL $75($4)
	CALL db_get_i64($1, $2, $4)
	CALL $78($2)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	CALL db_get_i64($1, $2, $4)
	
.LABEL $label$4
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8559])
	CALL memcpy($5, $2, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [8559])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [8559])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $37(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1397703940
	CALL eosio_assert([1], [8490])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8539])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($3 + [12]) = $1
	*($3 + [8]) = $1
	*($3 + [16]) = ($1 + $2)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($0 + [8])
	*($3 + [32]) = $0
	*($3 + [40]) = ($0 + [16])
	*($3 + [44]) = ($0 + [32])
	CALL $33(($3 + [32]), ($3 + [24]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $75($1)
	
.LABEL $label$2
	*(CALL $67()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $75(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $78($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8693])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8693])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8693])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8995])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9040])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9090])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [24])))
	
.LABEL $label$13
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [52]))
	$6 = *(($1 + [56]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4982429584940072960, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

int_64 .FUNC $69 (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

void .FUNC $68 (int_32 $0)
{
}

int_32 .FUNC $43 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [44]) = [0]
	*($3 + [16]) = $2
	*($3 + [8]) = $1
	*($3 + [32]) = (int_64)0
	$5 = CALL db_lowerbound_i64($1, $2, (int_64)4982429584940072960, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	CALL $12(($3 + [8]), $5)
	$4 = [1]
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = ($3 + [36])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$5 }
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($8 + [24])))
	
.LABEL $label$6
	CALL _ZdlPv($8)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$4 }
	$5 = *(($3 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $6
	
.LABEL $label$2
	*($7) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8734])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8780])
	$5 = CALL $69(*($1 + [8]))
	*($1 + [8]) = (int_64)0
	*(($6 = $4) + [24]) = (int_64))((int_64)9223372036854775807 - ((int_64)$5 * (int_64)*($1 + [32])))
	$7 = *($1)
	CALL eosio_assert([1], [8831])
	$8 = *($1 + [16])
	$9 = ( *(($1 + [20])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($9 + [32])
	$5 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($8 <= [513]) ){ goto $label$3 }
	$4 = CALL $75($8)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($6 + [12]) = $4
	*($6 + [8]) = $4
	*($6 + [16]) = ($4 + $8)
	CALL $38(($6 + [8]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, $8)
	if ( ($8 <= [513]) ){ goto $label$4 }
	CALL $78($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($6 + [40]) = (int_64))((int_64)9223372036854775807 - ((int_64)CALL $69(*(($1 + [8]))) * (int_64)*(($1 + [32]))))
	if ( (CALL $71(($6 + [24]), ($6 + [40]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [56])
	$8 = *($1)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$7 }
	$8 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4982429584940072960, ($6 + [32]), $7)
	*($1) = $8
	
.LABEL $label$7
	CALL db_idx64_update($8, $2, ($6 + [40]))
	
.LABEL $label$6
	$global$0 = ($6 + [48])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8559])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8559])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8559])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8559])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = (int_64)0
	$5 = *($0)
	$6 = *($4 + [4])
	*($1 + [40]) = CALL current_time()
	*($1 + [32]) = CALL $14($6, *(*($4)))
	$4 = *($1 + [16])
	$6 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [32])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $75($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	CALL $38(($3 + [8]), $1)
	$7 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)4982429584940072960, *(*($0 + [8])), $7, $2, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $78($2)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$7 = *(($5 + [8]))
	$8 = *(*(($0 + [8])))
	$9 = *($1)
	*($3 + [24]) = (int_64))((int_64)9223372036854775807 - ((int_64)CALL $69(*(($1 + [8]))) * (int_64)*(($1 + [32]))))
	*($1 + [56]) = CALL db_idx64_store($7, (int_64)4982429584940072960, $8, $9, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $35($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8693])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8693])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $50(CALL $49($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8693])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8693])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8693])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [8693])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $39(*($1), *($0 + [12]))
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8734])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8780])
	$6 = *($1 + [8])
	*(($5 = $4) + [8]) = ((int_64))((int_64)9223372036854775807 - $6) + (int_64)((int_64)*($1 + [24]) / (int_64)-8640000))
	$3 = *($3)
	$7 = *($3 + [4])
	*($1 + [8]) = (int_64))($6 - ((int_64)*($7) * (int_64)*($3)))
	$8 = ($1 + [24])
	$9 = ($1 + [8])
	$6 = *($1)
	$10 = *($3)
	if ( ((int_64)$10 < (int_64)0) ){ goto $label$2 }
	$7 = ($1 + [16])
	goto $label$1 
	
.LABEL $label$2
	*($1 + [16]) = (int_64))(*($1 + [16]) - ((int_64)*($7) * (int_64)$10))
	$7 = ($1 + [16])
	
.LABEL $label$1
	*(($1 + [24])) = CALL current_time()
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8831])
	$3 = $4
	$4 = ($3 + [-32])
	$global$0 = $4
	CALL eosio_assert([1], [8693])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8693])
	CALL memcpy(($3 + [-24]), $9, [8])
	CALL eosio_assert([1], [8693])
	CALL memcpy(($3 + [-16]), $7, [8])
	CALL eosio_assert([1], [8693])
	CALL memcpy(($3 + [-8]), $8, [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($5 + [24]) = ((int_64))((int_64)9223372036854775807 - *($9)) + (int_64)((int_64)*($8) / (int_64)-8640000))
	if ( (CALL $71(($5 + [8]), ($5 + [24]), [8]) == 0) ){ goto $label$4 }
	$3 = ($1 + [40])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$5 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7073229952170459136, ($5 + [16]), $6)
	*($3) = $1
	
.LABEL $label$5
	CALL db_idx64_update($1, $2, ($5 + [24]))
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL _Znwj([16])
	*($0 + [8]) = $3
	*($0) = (int_64)55834574865
	CALL memset($3, [46], [13])
	*($3 + [13]) = [0]
	$5 = *($1)
	$1 = (CASTING uint_32)(uint_64 $5)
	$4 = *([0] + [9144])
	*($3 + [12]) = *(($4 + ($1 & [15])))
	*($3 + [11]) = *(($4 + (uint_32($1 >> [4]) & [31])))
	*($3 + [10]) = *(($4 + (uint_32($1 >> [9]) & [31])))
	*($3 + [9]) = *(($4 + (uint_32($1 >> [14]) & [31])))
	*($3 + [8]) = *(($4 + (uint_32($1 >> [19]) & [31])))
	*($3 + [7]) = *(($4 + (uint_32($1 >> [24]) & [31])))
	*($3 + [6]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)29)) & [31])))
	*($3 + [5]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)34)) & [31])))
	*($3 + [4]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)39)) & [31])))
	*($3 + [3]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)44)) & [31])))
	*($3 + [2]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)49)) & [31])))
	*($3 + [1]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)54)) & [31])))
	*(*($0 + [8])) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)59))))
	$4 = ($3 & [1])
	$3 = *($0)
	$3 = ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 )
	$1 = ( *($0 + [8]) ? ($0 + [1]) : $4 )
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($1 + $3)
	$6 = ($3 + [-1])
	$3 = $6
	if ( ((int_32)*(($4 + [-1])) == (int_32)[46]) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	CALL $62($2, $0, [0], ($6 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$4 }
	*($0) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$3
	CALL $65($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *($4 + [8])
	CALL $63(($1 + [16]), *($4 + [4]))
	*($1 + [8]) = (int_64)0
	*($1 + [32]) = CALL $14($6, *(*($4)))
	*($1 + [40]) = CALL current_time()
	$4 = *($1 + [16])
	$6 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [32])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $75($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	CALL $38(($3 + [8]), $1)
	$7 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)4982429584940072960, *(*($0 + [8])), $7, $2, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $78($2)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$7 = *(($5 + [8]))
	$8 = *(*(($0 + [8])))
	$9 = *($1)
	*($3 + [24]) = (int_64))((int_64)9223372036854775807 - ((int_64)CALL $69(*(($1 + [8]))) * (int_64)*(($1 + [32]))))
	*($1 + [56]) = CALL db_idx64_store($7, (int_64)4982429584940072960, $8, $9, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $78 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17604])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17412]
	$3 = (((int_32)$1 * (int_32)[12]) + [17412])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $75 (int_32 $0)
{
	return CALL $76([9220], $0)
}

void .FUNC $60 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_64 .FUNC $8 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	int_64 $3
	$0 = ($global$0 - [16])
	$1 = $0
	$global$0 = $0
	$2 = CALL action_data_size()
	if ( ($2 <= [513]) ){ goto $label$2 }
	$0 = CALL $75($2)
	goto $label$1 
	
.LABEL $label$2
	$0 = ($0 - (($2 + [15]) & [-16]))
	$global$0 = $0
	
.LABEL $label$1
	CALL read_action_data($0, $2)
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [8559])
	CALL memcpy(($1 + [8]), $0, [8])
	$3 = *($1 + [8])
	if ( ($2 <= [513]) ){ goto $label$3 }
	CALL $78($0)
	
.LABEL $label$3
	$global$0 = ($1 + [16])
	return $3
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = *($2)
	CALL require_auth((int_64)6138894326491894656)
	*(($3 + [32])) = [0]
	*($3 + [8]) = $4
	*($3) = $1
	*($3 + [16]) = (int_64)-1
	*($3 + [36]) = [0]
	*($3 + [24]) = (int_64)0
	$2 = CALL db_lowerbound_i64($1, $4, (int_64)4982429584940072960, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $12($3, $2)
	
.LOOP $label$2:
	$5 = *($2)
	CALL eosio_assert([1], [8965])
	$6 = *($2 + [52])
	$2 = [0]
	$6 = CALL db_next_i64($6, ($3 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $12($3, $6)
	
.LABEL $label$3
	if ( (int_64)($5 == 0) ){ goto $label$4 }
	CALL $5($0, $1, $5, $4, [1])
	
.LABEL $label$4
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	$0 = *($3 + [24])
	if ( ($0 == 0) ){ goto $label$5 }
	$7 = ($3 + [28])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$9 }
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($6 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($6)
	
.LABEL $label$9
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($3 + [24]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $0
	
.LABEL $label$6
	*($7) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($3 + [48])
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $75($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*(($0 + [24])) = [0]
	*($0 + [16 align=4]) = (int_64)0
	*($2 + [8]) = ($1 + $3)
	*($2) = $1
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [8559])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($3 & [-8]) != (int_32)[8]), [8559])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($1 + [16])
	CALL $23($2, ($0 + [16]))
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $78($1)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
}

void .FUNC $7 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = *($2)
	*($3 + [88]) = $4
	$5 = *($2 + [8])
	$6 = CALL $61(($3 + [72]), ($2 + [16]))
	CALL require_auth($4)
	CALL eosio_assert((((int_64)$5 != (int_64)0) & ((int_64)$4 != (int_64)0)), [9181])
	*(($3 + [64])) = [0]
	*($3 + [40]) = $5
	*($3 + [32]) = $1
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	*($3 + [68]) = [0]
	$2 = CALL db_find_i64($1, $5, (int_64)4982429584940072960, $4)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$2 = CALL $12(($3 + [32]), $2)
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)($3 + [32])), [8568])
	$4 = *($3 + [88])
	*($3 + [16]) = $6
	CALL eosio_assert([1], [8699])
	CALL $20(($3 + [32]), $2, $4, ($3 + [16]))
	CALL $21($0, $1, $5, *($3 + [88]))
	$7 = *($3 + [56])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	*($3 + [20]) = $6
	*($3 + [24]) = $0
	*($3 + [16]) = ($3 + [88])
	CALL $22(($3 + [8]), ($3 + [32]), $4, ($3 + [16]))
	CALL $16($0, $1, $5, *($3 + [88]))
	$7 = *($3 + [56])
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = ($3 + [60])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($0 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($3 + [56]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $7
	
.LABEL $label$6
	*($8) = $7
	CALL _ZdlPv($2)
	if ( (*($3 + [72]) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$1
	$global$0 = ($3 + [96])
}

void .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $75($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [8559])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($3 & [-8]) != (int_32)[8]), [8559])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $78($1)
	
.LABEL $label$3
	$global$0 = $2
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	$5 = ($global$0 - [240])
	$global$0 = $5
	$6 = [0]
	*(($5 + [192])) = [0]
	*($5 + [168]) = $3
	*($5 + [160]) = $1
	*($5 + [176]) = (int_64)-1
	*($5 + [184]) = (int_64)0
	*($5 + [196]) = [0]
	$7 = CALL db_find_i64($1, $3, (int_64)4982429584940072960, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $12(($5 + [160]), $7)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($5 + [160])), [8568])
	
.LABEL $label$1
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_64)*($6 + [8]) < (int_64)1) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($8, [8890])
	$9 = *(($6 + [8]))
	*($5 + [152]) = $9
	$10 = *($6 + [32])
	*($5 + [144]) = ( (int_64)1 ? ( (int_64)1 ? $10 : ((uint_64)$10 > (uint_64)(int_64)1000) ) : ((int_64)$10 < (int_64)1) )
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8490])
	$10 = (int_64)4478533
	$4 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$10 = $11
	$7 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$10 = $11
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $7 ){ goto $label$9 }
	$7 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$7 = [0]
	
.LABEL $label$5
	CALL eosio_assert($7, [8539])
	$10 = *($5 + [152])
	CALL eosio_assert($8, [8699])
	CALL $42(($5 + [160]), $6, (int_64)0, $5)
	CALL $21($0, $1, $3, $2)
	$4 = CALL $43($0, $1, $3)
	*(($5 + [136])) = [0]
	*($5 + [112]) = $1
	*($5 + [104]) = $1
	*($5 + [120]) = (int_64)-1
	*($5 + [128]) = (int_64)0
	*($5 + [140]) = [0]
	$7 = CALL db_find_i64($1, $1, (int_64)7073229952170459136, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	$13 = ( (int_64))((int_64)0 - $10) ? $9 : ((int_64)$10 < (int_64)0) )
	$7 = CALL $17(($5 + [104]), $7)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)($5 + [104])), [8568])
	*($5) = $2
	CALL $44(($5 + [88]), $5)
	if ( ($4 == 0) ){ goto $label$13 }
	*($5 + [4]) = ($5 + [144])
	*($5) = ($5 + [152])
	CALL eosio_assert([1], [8699])
	CALL $45(($5 + [104]), $7, (int_64)0, $5)
	$11 = (int_64)1
	if ( ((int_64)$13 >= (int_64)1) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([1], [8931])
	CALL eosio_assert([1], [8965])
	$4 = CALL db_next_i64(*($7 + [36]), $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$14 }
	CALL $17(($5 + [104]), $4)
	
.LABEL $label$14
	CALL $25(($5 + [104]), $7)
	$11 = (int_64)1
	if ( ((int_64)$13 < (int_64)1) ){ goto $label$11 }
	
.LABEL $label$12
	$10 = (int_64)6
	
.LOOP $label$15:
	$10 = ((int_64)$10 + (int_64)$11)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$15 }
	$10 = (int_64)0
	$3 = (int_64)59
	$4 = [8192]
	$9 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$21 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$7 = ($7 + [-91])
	goto $label$19 
	
.LABEL $label$21
	$11 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$9 = ((int_64)$11 | (int_64)$9)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$16 }
	*(($5 + [24])) = (int_64)1146504452
	*(($5 + [40])) = [0]
	*($5 + [8]) = $2
	*($5) = $1
	*($5 + [16]) = $13
	*($5 + [32]) = (int_64)0
	$12 = ($5 + [32])
	$4 = CALL $72([8918])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$24 }
	*(($5 + [32])) = ($4 << [1])
	$7 = ($12 + [1])
	if ( $4 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$6 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*(($5 + [40])) = $7
	*(($5 + [36])) = $4
	*($5 + [32]) = ($6 | [1])
	
.LABEL $label$23
	CALL memcpy($7, [8918], $4)
	
.LABEL $label$22
	$6 = ($5 + [8])
	*(($7 + $4)) = [0]
	*(($7 = ($5 + [72]))) = [0]
	*($5 + [56]) = $9
	*($5 + [48]) = (int_64)6138716500844090672
	*($5 + [64]) = (int_64)0
	*(($4 = CALL _Znwj([16]))) = $1
	*($4 + [8]) = (int_64)3617214756542218240
	*((($5 + [48]) + [36])) = [0]
	$0 = ($4 + [16])
	*($7) = $0
	*(($5 + [68])) = $0
	*($5 + [64]) = $4
	*($5 + [76 align=4]) = (int_64)0
	$4 = *(($5 + [32]))
	$7 = ( *(($5 + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [32])
	$10 = (CASTING uint_64)(uint_32 $7)
	$7 = ($5 + [76])
	
.LOOP $label$25:
	$4 = ($4 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$25 }
	if ( ($4 == 0) ){ goto $label$27 }
	CALL $35($7, $4)
	$7 = *(($5 + [80]))
	$4 = *(($5 + [76]))
	goto $label$26 
	
.LABEL $label$27
	$7 = [0]
	$4 = [0]
	
.LABEL $label$26
	*($5 + [204]) = $4
	*($5 + [200]) = $4
	*($5 + [208]) = $7
	*($5 + [216]) = ($5 + [200])
	*($5 + [228]) = $6
	*($5 + [232]) = ($5 + [16])
	*($5 + [236]) = $12
	*($5 + [224]) = $5
	CALL $46(($5 + [224]), ($5 + [216]))
	CALL $47(($5 + [224]), ($5 + [48]))
	$4 = *($5 + [224])
	CALL send_inline($4, (*($5 + [228]) - $4))
	$4 = *($5 + [224])
	if ( ($4 == 0) ){ goto $label$28 }
	*($5 + [228]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$28
	$4 = *($5 + [76])
	if ( ($4 == 0) ){ goto $label$29 }
	*(($5 + [80])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$29
	$4 = *($5 + [64])
	if ( ($4 == 0) ){ goto $label$30 }
	*(($5 + [68])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((*(($5 + [32])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$11
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($5 + [96]))
	
.LABEL $label$10
	$12 = *($5 + [128])
	if ( ($12 == 0) ){ goto $label$3 }
	$6 = ($5 + [132])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$32 }
	
.LOOP $label$33:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$34 }
	CALL _ZdlPv($7)
	
.LABEL $label$34
	if ( ((int_32)$12 != (int_32)$4) ){ goto $label$33 }
	$4 = *(($5 + [128]))
	goto $label$31 
	
.LABEL $label$32
	$4 = $12
	
.LABEL $label$31
	*($6) = $12
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$12 = *($5 + [184])
	if ( ($12 == 0) ){ goto $label$35 }
	$6 = ($5 + [188])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$37 }
	
.LOOP $label$38:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$39 }
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*(($7 + [24])))
	
.LABEL $label$40
	CALL _ZdlPv($7)
	
.LABEL $label$39
	if ( ((int_32)$12 != (int_32)$4) ){ goto $label$38 }
	$4 = *(($5 + [184]))
	goto $label$36 
	
.LABEL $label$37
	$4 = $12
	
.LABEL $label$36
	*($6) = $12
	CALL _ZdlPv($4)
	
.LABEL $label$35
	$global$0 = ($5 + [240])
	return (unreachable)
	
.LABEL $label$2
	CALL $60($12)
}

void .FUNC $2 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	if ( ((int_64)$2 != (int_64)6138716500844090672) ){ goto $label$1 }
	$2 = (int_64)0
	$5 = (int_64)59
	$6 = [8192]
	$7 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$7 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$8 = ($8 + [-91])
	goto $label$5 
	
.LABEL $label$7
	$9 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$3
	$6 = ($6 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$2 }
	if ( ((int_64)$7 != (int_64)$3) ){ goto $label$1 }
	CALL $3($0, $1, (int_64)6138716500844090672)
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$1
	$2 = (int_64)0
	$5 = (int_64)59
	$6 = [8201]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$13 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$8 = ($8 + [-91])
	goto $label$11 
	
.LABEL $label$13
	$9 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$8 }
	if ( ((int_64)$7 != (int_64)$3) ){ goto $label$14 }
	CALL $4($4)
	$2 = *($4 + [8])
	$9 = *($4)
	CALL require_auth($9)
	CALL $5($0, $1, $9, $2, [0])
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$14
	$2 = (int_64)7
	
.LOOP $label$15:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$15 }
	if ( ((int_64)4982429584524836864 != (int_64)$3) ){ goto $label$17 }
	CALL $6($4)
	CALL $7($0, $1, $4)
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($4 + [24])))
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$17
	$2 = (int_64)7
	
.LOOP $label$18:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$18 }
	if ( ((int_64)5454183929877626880 != (int_64)$3) ){ goto $label$19 }
	*($4) = CALL $8()
	CALL $9($0, $1, $4)
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$19
	$2 = (int_64)5
	
.LOOP $label$20:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$20 }
	if ( ((int_64)4923678490122780672 != (int_64)$3) ){ goto $label$16 }
	CALL $4($4)
	CALL $10($0, $1, $4)
	
.LABEL $label$16
	$global$0 = ($4 + [32])
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL $11(($3 + [160]))
	if ( ((int_64)*($3 + [160]) == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)6138716500844090672) ){ goto $label$1 }
	if ( ((int_64)*($3 + [168]) != (int_64)$1) ){ goto $label$1 }
	$4 = [0]
	if ( ((uint_64)((int_64)*($3 + [176]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$2 = (uint_64)*((($3 + [160]) + [24])) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$2 = $6
	$4 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$2 = $6
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $4 ){ goto $label$6 }
	$4 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	CALL eosio_assert($4, [8296])
	CALL eosio_assert(((int_64)*(($3 + [184])) == (int_64)1146504452), [8313])
	*($3 + [152]) = *(($3 + [176]))
	$8 = CALL $61(($3 + [136]), ($3 + [192]))
	$4 = *($3 + [136])
	$9 = *($8 + [8])
	$7 = *($8 + [4])
	$5 = CALL $72([8330])
	if ( ($5 == 0) ){ goto $label$7 }
	$10 = ($8 + [1])
	$11 = ($4 & [1])
	$4 = ( $7 ? uint_32($4 >> [1]) : $11 )
	if ( ((int_32)$4 < (int_32)$5) ){ goto $label$8 }
	$11 = ( $9 ? $10 : $11 )
	$9 = ($11 + $4)
	$7 = $11
	
.LOOP $label$9:
	$4 = (($4 - $5) + [1])
	if ( ($4 == 0) ){ goto $label$8 }
	$4 = CALL $70($7, [35], $4)
	if ( ($4 == 0) ){ goto $label$8 }
	if ( (CALL $71($4, [8330], $5) == 0) ){ goto $label$10 }
	$7 = ($4 + [1])
	$4 = ($9 - $7)
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$8 }
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$7 }
	
.LABEL $label$8
	$5 = *(( *(($8 + [8])) ? $10 : (*($3 + [136]) & [1]) ))
	if ( ((int_32)$5 == (int_32)[45]) ){ goto $label$16 }
	if ( ((int_32)$5 != (int_32)[43]) ){ goto $label$11 }
	CALL $62(($3 + [88]), $8, [1], [-1], $8)
	if ( (*($3 + [136]) & [1]) ){ goto $label$15 }
	*($10) = [0]
	*($3 + [136]) = [0]
	goto $label$14 
	
.LABEL $label$16
	*($3 + [152]) = (int_64))((int_64)0 - *($3 + [152]))
	CALL $62(($3 + [88]), $8, [1], [-1], $8)
	if ( (*($3 + [136]) & [1]) ){ goto $label$13 }
	*($10) = [0]
	*($3 + [136]) = [0]
	goto $label$12 
	
.LABEL $label$15
	*(*(($8 + [8]))) = [0]
	*(($8 + [4])) = [0]
	
.LABEL $label$14
	CALL $65($8, [0])
	*((($3 + [136]) + [8])) = *((($3 + [88]) + [8]))
	*($3 + [136]) = *($3 + [88])
	goto $label$11 
	
.LABEL $label$13
	*(*(($8 + [8]))) = [0]
	*(($8 + [4])) = [0]
	
.LABEL $label$12
	CALL $65($8, [0])
	*((($3 + [136]) + [8])) = *((($3 + [88]) + [8]))
	*($3 + [136]) = *($3 + [88])
	
.LABEL $label$11
	$5 = *($3 + [136])
	CALL eosio_assert((( *(($8 + [4])) ? uint_32($5 >> [1]) : ($5 & [1]) ) <= [13]), [8332])
	$11 = *($3 + [136])
	$12 = ($11 & [1])
	$5 = ( *(($8 + [8])) ? $10 : $12 )
	$4 = [0]
	
.LOOP $label$17:
	$7 = ($5 + $4)
	$9 = ($4 + [1])
	$4 = $9
	if ( *($7) ){ goto $label$17 }
	$13 = (CASTING uint_64)(uint_32 ($9 + [-1]))
	$2 = (int_64)0
	$6 = (int_64)59
	$14 = (int_64)0
	
.LOOP $label$18:
	$15 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$13) ){ goto $label$19 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$4 = ($4 + [-91])
	goto $label$20 
	
.LABEL $label$21
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$23 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$22 
	
.LABEL $label$23
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$22
	$5 = ($5 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$18 }
	*($3 + [128]) = $14
	if ( ( *(($8 + [4])) ? uint_32($11 >> [1]) : $12 ) ){ goto $label$24 }
	$14 = *($3 + [160])
	*($3 + [128]) = $14
	
.LABEL $label$24
	*(($3 + [120])) = [0]
	*($3 + [104]) = (int_64)-1
	*($3 + [112]) = (int_64)0
	*($3 + [124]) = [0]
	*($3 + [96]) = $14
	*($3 + [88]) = $1
	*($3 + [80]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [64]) = (int_64)1
	$5 = CALL db_find_i64($1, $14, (int_64)4982429584940072960, *($3 + [160]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$26 }
	$5 = CALL $12(($3 + [88]), $5)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)($3 + [88])), [8568])
	$2 = *($5 + [32])
	*($3 + [64]) = ( (int_64)1 ? ( (int_64)1 ? $2 : ((uint_64)$2 > (uint_64)(int_64)1000) ) : ((int_64)$2 < (int_64)1) )
	$4 = [1]
	$6 = *($5 + [8])
	$2 = *($3 + [152])
	if ( ((int_64)((int_64)$2 | (int_64)$6) > (int_64)-1) ){ goto $label$27 }
	$4 = (((int_64)$6 < (int_64)1) & ((int_64)$2 < (int_64)1))
	
.LABEL $label$27
	CALL eosio_assert($4, [8449])
	$2 = *($3 + [152])
	*($3 + [80]) = $2
	*($3 + [72]) = ((int_64)$2 & (int_64)$2 >> (int_64)63))
	*($3 + [24]) = ($3 + [80])
	CALL eosio_assert([1], [8699])
	CALL $13(($3 + [88]), $5, (int_64)0, ($3 + [24]))
	goto $label$25 
	
.LABEL $label$26
	CALL eosio_assert(((uint_64)*(($3 + [176])) > (uint_64)(int_64)9999), [8369])
	*($3 + [64]) = CALL $14($0, *($3 + [160]))
	$2 = *($3 + [152])
	*($3 + [80]) = $2
	if ( ((int_64)$2 > (int_64)-1) ){ goto $label$28 }
	*($3 + [72]) = $2
	
.LABEL $label$28
	*($3 + [28]) = ($3 + [152])
	*($3 + [24]) = ($3 + [160])
	*($3 + [32]) = ($3 + [64])
	CALL $15(($3 + [8]), ($3 + [88]), $1, ($3 + [24]))
	
.LABEL $label$25
	$2 = *($3 + [128])
	CALL $16($0, $1, $2, *($3 + [160]))
	*(($3 + [56])) = [0]
	*($3 + [32]) = $1
	*($3 + [24]) = $1
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	*($3 + [60]) = [0]
	$5 = CALL db_find_i64($1, $1, (int_64)7073229952170459136, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$31 }
	$5 = CALL $17(($3 + [24]), $5)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($3 + [24])), [8568])
	*($3 + [12]) = ($3 + [64])
	*($3 + [8]) = ($3 + [80])
	*($3 + [16]) = ($3 + [72])
	CALL eosio_assert([1], [8699])
	CALL $18(($3 + [24]), $5, (int_64)0, ($3 + [8]))
	$7 = *($3 + [48])
	if ( $7 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	*($3 + [12]) = ($3 + [80])
	*($3 + [8]) = ($3 + [128])
	*($3 + [16]) = ($3 + [64])
	*($3 + [20]) = ($3 + [72])
	CALL $19($3, ($3 + [24]), $1, ($3 + [8]))
	$7 = *($3 + [48])
	if ( ($7 == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$9 = ($3 + [52])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$33 }
	
.LOOP $label$34:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$35 }
	CALL _ZdlPv($4)
	
.LABEL $label$35
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$34 }
	$5 = *(($3 + [48]))
	goto $label$32 
	
.LABEL $label$33
	$5 = $7
	
.LABEL $label$32
	*($9) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$29
	$7 = *($3 + [112])
	if ( ($7 == 0) ){ goto $label$7 }
	$9 = ($3 + [116])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$37 }
	
.LOOP $label$38:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$39 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$40
	CALL _ZdlPv($4)
	
.LABEL $label$39
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$38 }
	$5 = *(($3 + [112]))
	goto $label$36 
	
.LABEL $label$37
	$5 = $7
	
.LABEL $label$36
	*($9) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((*($3 + [136]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($8 + [8])))
	
.LABEL $label$1
	if ( ((*($3 + [192]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($3 + [200])))
	
.LABEL $label$41
	$global$0 = ($3 + [208])
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL memory()
	CALL $2(($3 + [8]), $0, $1, $2)
	CALL $68([0])
	$global$0 = ($3 + [16])
}

int_64 .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [16]) = $1
	*($2 + [8]) = (int_64)6138716500844090672
	*($2 + [32]) = (int_64)0
	$3 = (int_64)1
	$4 = CALL db_find_i64((int_64)6138716500844090672, $1, (int_64)-3772704971946590208, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $27(($2 + [8]), $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($2 + [8])), [8568])
	$1 = *($4 + [8])
	if ( ((uint_64)((int_64)$1 + (int_64)-1) > (uint_64)(int_64)49) ){ goto $label$1 }
	$1 = ((int_64)( (int_64)500 ? (int_64)1000 : ((int_64)$1 > (int_64)10) ) / (int_64)$1)
	$3 = ( $1 ? (int_64)1000 : (uint_64)($1 <= (int_64)1000) )
	
.LABEL $label$1
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($2 + [36])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$6 }
	CALL _ZdlPv($7)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	$4 = *(($2 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return $3
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8642])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [48]) = $1
	CALL $28(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $29(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [56]) = $2
	if ( ((int_64)$2 == (int_64)$3) ){ goto $label$1 }
	*(($4 + [48])) = [0]
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	*($4 + [52]) = [0]
	*($4 + [24]) = $3
	*($4 + [16]) = $1
	$5 = CALL db_find_i64($1, $3, (int_64)4982429584940072960, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $12(($4 + [16]), $5) + [48]) == (int_32)($4 + [16])), [8568])
	$6 = *($4 + [40])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [12]) = $0
	*($4 + [8]) = ($4 + [56])
	CALL $30($4, ($4 + [16]), $1, ($4 + [8]))
	$6 = *($4 + [40])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($4 + [44])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$8
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $6
	
.LABEL $label$4
	*($7) = $6
	CALL _ZdlPv($0)
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8619])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $75($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $78($4)
	
.LABEL $label$6
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	CALL $41(($3 + [32]), $5)
	*($5 + [40]) = [-1]
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $32(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $10 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = *($2 + [8])
	$5 = *($2)
	CALL require_auth($1)
	CALL $24($0, $1, $5)
	CALL $24($0, $1, $4)
	if ( ((int_64)$5 != (int_64)$1) ){ goto $label$1 }
	*(($3 + [32])) = [0]
	*($3 + [8]) = $1
	*($3) = $1
	*($3 + [16]) = (int_64)-1
	*($3 + [36]) = [0]
	*($3 + [24]) = (int_64)0
	$2 = CALL db_lowerbound_i64($1, $1, (int_64)7073229952170459136, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$6 = ($3 + [8])
	
.LOOP $label$2:
	$2 = CALL $17($3, $2)
	CALL $24($0, $1, *($2))
	CALL eosio_assert([1], [8931])
	CALL eosio_assert([1], [8965])
	$7 = CALL db_next_i64(*($2 + [36]), ($3 + [40]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	CALL $17($3, $7)
	
.LABEL $label$3
	CALL $25($3, $2)
	$2 = CALL db_lowerbound_i64(*($3), *($6), (int_64)7073229952170459136, (int_64)0)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$2 }
	$0 = *($3 + [24])
	if ( ($0 == 0) ){ goto $label$1 }
	$6 = ($3 + [28])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($3 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $0
	
.LABEL $label$4
	*($6) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

void .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $75($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	CALL $26($0, $1, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $78($1)
	
.LABEL $label$3
	$global$0 = $2
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8619])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $75($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $78($4)
	
.LABEL $label$6
	*(($5 = CALL _Znwj([64])) + [24]) = [0]
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [48]) = $0
	CALL $36(($3 + [32]), $5)
	*($5 + [56]) = [-1]
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $29(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$8
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$7
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8734])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8780])
	*(($5 = $4) + [24]) = (int_64))((int_64)9223372036854775807 - ((int_64)CALL $69(*($1 + [8])) * (int_64)*($1 + [32])))
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$6 = *($1)
	*($1 + [40]) = CALL current_time()
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8831])
	$3 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $75($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL $38(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $78($4)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [40]) = (int_64))((int_64)9223372036854775807 - ((int_64)CALL $69(*(($1 + [8]))) * (int_64)*(($1 + [32]))))
	if ( (CALL $71(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [56])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4982429584940072960, ($5 + [32]), $6)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$6
	$global$0 = ($5 + [48])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8559])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8559])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $23($0, ($1 + [16]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8559])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8559])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8564])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $35($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8559])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $66($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8559])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8559])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8559])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8559])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $23(*($1), *($0 + [12]))
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8642])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [48]) = $1
	CALL $40(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $29(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($3 + [8])
	*($1 + [8]) = ((int_64)*($4) * (int_64)*(*($3 + [4])))
	*($1 + [16]) = ((int_64)*($4) * (int_64)*(*($3 + [12])))
	$3 = *($0)
	*($1 + [24]) = CALL current_time()
	CALL eosio_assert([1], [8693])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8693])
	$4 = ($1 + [8])
	CALL memcpy(($2 | [8]), $4, [8])
	CALL eosio_assert([1], [8693])
	CALL memcpy(($2 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8693])
	$5 = ($1 + [24])
	CALL memcpy(($2 + [24]), $5, [8])
	$6 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($3 + [8]), (int_64)7073229952170459136, *(*($0 + [8])), $6, $2, [32])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$6 = *(($3 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	*($2 + [40]) = ((int_64))((int_64)9223372036854775807 - *($4)) + (int_64)((int_64)*($5) / (int_64)-8640000))
	*($1 + [40]) = CALL db_idx64_store($6, (int_64)7073229952170459136, $7, $8, ($2 + [40]))
	$global$0 = ($2 + [48])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $78($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $64($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8693])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8693])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8693])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8693])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $39($0, ($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8693])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8693])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $75($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9200])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $75($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $78($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $73(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9200])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $73(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}