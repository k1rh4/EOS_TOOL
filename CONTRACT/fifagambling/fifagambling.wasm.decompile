(data (i32.const 4) "\f0i\00\00")
(data (i32.const 16) "ignore invalid notification source : \00")
(data (i32.const 64) ", action : \00")
(data (i32.const 80) "\n\00")
(data (i32.const 96) "ignore unknown action : \00")
(data (i32.const 128) "unknown action\00")
(data (i32.const 144) "resolveanc : not timeout yet\00")
(data (i32.const 176) "itrator to the end of ctrltbl\00")
(data (i32.const 208) "cannot increment end iterator\00")
(data (i32.const 240) "guytiobzguge\00")
(data (i32.const 256) "your vote lost, try next!\00")
(data (i32.const 288) "cannot pass end iterator to erase\00")
(data (i32.const 336) "eosio.token\00")
(data (i32.const 352) "your subscription lost, try next!\00")
(data (i32.const 400) "invalid symbol name\00")
(data (i32.const 432) "pendanc not erased properly\00")
(data (i32.const 464) "Congratulate your votes win!\00")
(data (i32.const 496) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 560) "cannot create objects in table of another contract\00")
(data (i32.const 624) "write\00")
(data (i32.const 640) "object passed to erase is not in multi_index\00")
(data (i32.const 688) "cannot erase objects in table of another contract\00")
(data (i32.const 752) "attempt to remove object that was not in multi_index\00")
(data (i32.const 816) "active\00")
(data (i32.const 832) "transfer\00")
(data (i32.const 848) "error reading iterator\00")
(data (i32.const 880) "read\00")
(data (i32.const 896) "get\00")
(data (i32.const 912) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 976) "resolvehis : not timeout yet\00")
(data (i32.const 1008) "Cong. for enrolled in history\00")
(data (i32.const 1040) "ignore transfer from myself\n\00")
(data (i32.const 1072) "ignore transfer not to chainhis\n\00")
(data (i32.const 1120) "direct transfer\00")
(data (i32.const 1136) "direct transfer\n\00")
(data (i32.const 1168) "invalid source contract\00")
(data (i32.const 1200) "invalid quantity\00")
(data (i32.const 1232) "contract freezed\00")
(data (i32.const 1264) ";\00")
(data (i32.const 1280) "1st \';\' invalid\00")
(data (i32.const 1296) "2nd \';\' invalid\00")
(data (i32.const 1312) "3rd \';\' invalid\00")
(data (i32.const 1328) "subhis\00")
(data (i32.const 1344) "votehis\00")
(data (i32.const 1360) "subanc\00")
(data (i32.const 1376) "voteanc\00")
(data (i32.const 1392) "transfer comment invalid\00")
(data (i32.const 1424) "voteanc should >= 10000 and <= max\00")
(data (i32.const 1472) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 1536) "no such pending anounnce\00")
(data (i32.const 1568) "can not vote twice a day\00")
(data (i32.const 1600) "cannot pass end iterator to modify\00")
(data (i32.const 1648) "accept HCT only\00")
(data (i32.const 1664) "object passed to modify is not in multi_index\00")
(data (i32.const 1712) "cannot modify objects in table of another contract\00")
(data (i32.const 1776) "attempt to add asset with different symbol\00")
(data (i32.const 1824) "addition underflow\00")
(data (i32.const 1856) "addition overflow\00")
(data (i32.const 1888) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1952) "accept EOS only\00")
(data (i32.const 1968) "voteanc less than required\00")
(data (i32.const 2000) "at least 32 char\00")
(data (i32.const 2032) "no such pending history\00")
(data (i32.const 2064) "thanks for vote history\00")
(data (i32.const 2112) "thanks for referral\00")
(data (i32.const 2144) "votehis quantity incorrect\00")
(data (i32.const 2176) "thanks for submit history\00")
(data (i32.const 2208) "subhis quantity incorrect\00")
(data (i32.const 2240) " \00")
(data (i32.const 10640) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$6 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$9 (param i32)))
(import "env" "db_store_i64" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$12 (param i32 i32)))
(import "env" "is_account" (func $fimport$13 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "printn" (func $fimport$16 (param i64)))
(import "env" "prints" (func $fimport$17 (param i32)))
(import "env" "read_action_data" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$19 (param i64)))
(import "env" "require_auth2" (func $fimport$20 (param i64 i64)))
(import "env" "send_inline" (func $fimport$21 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $86))
(export "free" (func $89))
(export "memchr" (func $101))
(export "memcmp" (func $102))
(export "strlen" (func $103))
(table $0 0 anyfunc)




void .FUNC $98 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $90($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $90($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $91($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $90(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $91($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10732])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $91 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $92 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $94($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $40($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [880])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [640])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [688])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [752])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$7 }
	CALL $91(*(($4 + [44])))
	
.LABEL $label$7
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL $91(*(($4 + [32])))
	
.LABEL $label$8
	CALL $91($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL $91(*(($4 + [44])))
	
.LABEL $label$11
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL $91(*(($4 + [32])))
	
.LABEL $label$12
	CALL $91($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($0 + [16])
	$4 = ($1 + [16])
	CALL eosio_assert(((int_64)*($4) == (int_64)*($3)), [912])
	$2 = ($1 + [8])
	if ( ((int_64)*($1 + [8]) <= (int_64)*($0 + [8])) ){ goto $label$1 }
	$4 = ($0 + [48])
	*($0 + [96]) = *($4)
	$5 = ($0 + [56])
	*(($0 + [104])) = *($5)
	*(($0 + [116])) = *(($0 + [68]))
	$6 = ($0 + [64])
	*(($0 + [112])) = *($6)
	$7 = ($0 + [72])
	CALL $93(($0 + [120]), $7)
	$8 = ($0 + [84])
	CALL $93(($0 + [132]), $8)
	*($4) = *($0)
	*($6) = *($3)
	*($5) = *($0 + [8])
	$4 = ($0 + [24])
	CALL $93($7, $4)
	$5 = ($0 + [36])
	CALL $93($8, $5)
	*($0) = *($1)
	*($3) = *(($2 + [8]))
	*($0 + [8]) = *($2)
	CALL $93($4, ($1 + [24]))
	CALL $93($5, ($1 + [36]))
	return 
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($4) == (int_64)*(($0 + [64]))), [912])
	if ( ((int_64)*($2) <= (int_64)*(($0 + [56]))) ){ goto $label$3 }
	CALL eosio_assert(((int_64)*(($1 + [16])) == (int_64)*(($0 + [16]))), [912])
	if ( ((int_64)*(($1 + [8])) <= (int_64)*(($0 + [8]))) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = ($1 + [16])
	CALL eosio_assert(((int_64)*($3) == (int_64)*(($0 + [112]))), [912])
	$4 = ($1 + [8])
	if ( ((int_64)*($4) <= (int_64)*(($0 + [104]))) ){ goto $label$4 }
	CALL eosio_assert(((int_64)*($3) == (int_64)*(($0 + [64]))), [912])
	if ( ((int_64)*($4) > (int_64)*(($0 + [56]))) ){ goto $label$4 }
	*($0 + [96]) = *($1)
	*(($0 + [112])) = *(($2 + [8]))
	*(($0 + [104])) = *($2)
	CALL $93(($0 + [120]), ($1 + [24]))
	CALL $93(($0 + [132]), ($1 + [36]))
	
.LABEL $label$4
	return 
	
.LABEL $label$2
	$3 = ($0 + [48])
	*($0 + [96]) = *($3)
	$4 = ($0 + [56])
	*(($0 + [104])) = *($4)
	*(($0 + [116])) = *(($0 + [68]))
	$5 = ($0 + [64])
	*(($0 + [112])) = *($5)
	$6 = ($0 + [72])
	CALL $93(($0 + [120]), $6)
	$0 = ($0 + [84])
	CALL $93(($0 + [132]), $0)
	*($3) = *($1)
	*($5) = *(($2 + [8]))
	*($4) = *($2)
	CALL $93($6, ($1 + [24]))
	CALL $93($0, ($1 + [36]))
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $90(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$11 }
	CALL $91(*(($1 + [60])))
	
.LABEL $label$11
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$12 }
	CALL $91(*(($1 + [48])))
	
.LABEL $label$12
	CALL $91($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $91($6)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $40(CALL $40($0, ($1 + [40])), ($1 + [52]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [880])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [896])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $33($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [880])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $41($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $95($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $90($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $95($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $91($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $92($7)
	return (unreachable)
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [848])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $90([64])
	$4 = CALL $61($6)
	*($6 + [48]) = $0
	CALL $62(($8 + [32]), $4)
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $63(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$10 }
	CALL $91(*(($4 + [44])))
	
.LABEL $label$10
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL $91(*(($4 + [32])))
	
.LABEL $label$11
	CALL $91($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [880])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [880])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [56]) = ((int_32)*($3 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $90(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $91($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $91($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [56])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [624])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $84($0, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = $3
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [80])
	*([0] + [4]) = $18
	$10 = *($0)
	if ( ((int_64)*($2) != (int_64)$10) ){ goto $label$2 }
	CALL prints([1040])
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)*($2 + [8]) != (int_64)$10) ){ goto $label$11 }
	$3 = ($2 + [32])
	$8 = *($2 + [32])
	$4 = CALL strlen([1120])
	if ( ((int_32)$4 != (int_32)( *(($2 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$12 }
	if ( (CALL $97($3, [0], [-1], [1120], $4) == 0) ){ goto $label$8 }
	
.LABEL $label$12
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [336]
	$11 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$18 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$4 = ($4 + [165])
	goto $label$16 
	
.LABEL $label$18
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$14
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$13 }
	if ( ((int_64)$11 != (int_64)$1) ){ goto $label$20 }
	$8 = [1]
	if ( ((int_64)*(($2 + [24])) == (int_64)1397703940) ){ goto $label$19 }
	
.LABEL $label$20
	$10 = (int_64)0
	$12 = (int_64)59
	$8 = [240]
	$11 = (int_64)0
	
.LOOP $label$21:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$22 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$4 = ($4 + [165])
	goto $label$23 
	
.LABEL $label$24
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$22
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$21 }
	$8 = [0]
	if ( ((int_64)$11 != (int_64)$1) ){ goto $label$19 }
	$8 = ((int_64)*(($2 + [24])) == (int_64)1413695492)
	
.LABEL $label$19
	CALL eosio_assert($8, [1168])
	$4 = [0]
	if ( ((uint_64)((int_64)*($2 + [16]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$10 = (uint_64)*(($2 + [24])) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$4 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$25 }
	goto $label$9 
	
.LABEL $label$11
	CALL prints([1072])
	goto $label$1 
	
.LABEL $label$10
	$4 = [0]
	
.LABEL $label$9
	CALL eosio_assert($4, [1200])
	$4 = ($0 + [8])
	$8 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7759857043606863872, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$29 }
	$8 = CALL $15($4, $8)
	*($18 + [76]) = $8
	*($18 + [72]) = $4
	goto $label$28 
	
.LABEL $label$29
	CALL $16(($18 + [56]), $4, *($0), ($18 + [40]))
	$10 = *($18 + [56])
	*($18 + [72]) = $10
	$8 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)32))
	
.LABEL $label$28
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [176])
	CALL eosio_assert(((int_32)*($8 + [56]) ^ (int_32)[1]), [1232])
	$8 = *($3)
	if ( ($8 & [1]) ){ goto $label$31 }
	$13 = uint_32($8 >> [1])
	$5 = ($3 + [1])
	goto $label$30 
	
.LABEL $label$31
	$13 = *(($2 + [36]))
	$5 = *(($2 + [40]))
	
.LABEL $label$30
	$4 = CALL strlen([1264])
	if ( ($4 == 0) ){ goto $label$33 }
	$17 = ($5 + $13)
	$8 = $17
	if ( ((int_32)$13 < (int_32)$4) ){ goto $label$34 }
	$8 = $5
	
.LOOP $label$36:
	$13 = (($13 - $4) + [1])
	if ( ($13 == 0) ){ goto $label$35 }
	$8 = CALL memchr($8, [59], $13)
	if ( ($8 == 0) ){ goto $label$35 }
	if ( (CALL memcmp($8, [1264], $4) == 0) ){ goto $label$34 }
	$8 = ($8 + [1])
	$13 = ($17 - $8)
	if ( ((int_32)$13 >= (int_32)$4) ){ goto $label$36 }
	
.LABEL $label$35
	$8 = $17
	
.LABEL $label$34
	$13 = ( [-1] ? ($8 - $5) : ((int_32)$8 == (int_32)$17) )
	goto $label$32 
	
.LABEL $label$33
	$13 = [0]
	
.LABEL $label$32
	CALL eosio_assert(((int_32)$13 != (int_32)[-1]), [1280])
	$5 = ($13 + [1])
	$8 = *($3)
	if ( ($8 & [1]) ){ goto $label$38 }
	$17 = uint_32($8 >> [1])
	$16 = ($3 + [1])
	goto $label$37 
	
.LABEL $label$38
	$17 = *(($2 + [36]))
	$16 = *(($2 + [40]))
	
.LABEL $label$37
	$4 = CALL strlen([1264])
	$8 = [-1]
	if ( ($17 <= $5) ){ goto $label$39 }
	$8 = $5
	if ( ($4 == 0) ){ goto $label$39 }
	$15 = ($16 + $17)
	$8 = $15
	$6 = ($16 + $5)
	$17 = ($15 - $6)
	if ( ((int_32)$17 < (int_32)$4) ){ goto $label$40 }
	
.LOOP $label$42:
	$8 = (($17 - $4) + [1])
	if ( ($8 == 0) ){ goto $label$41 }
	$8 = CALL memchr($6, [59], $8)
	if ( ($8 == 0) ){ goto $label$41 }
	if ( (CALL memcmp($8, [1264], $4) == 0) ){ goto $label$40 }
	$6 = ($8 + [1])
	$17 = ($15 - $6)
	if ( ((int_32)$17 >= (int_32)$4) ){ goto $label$42 }
	
.LABEL $label$41
	$8 = $15
	
.LABEL $label$40
	$8 = ( [-1] ? ($8 - $16) : ((int_32)$8 == (int_32)$15) )
	
.LABEL $label$39
	CALL eosio_assert(((int_32)$8 != (int_32)[-1]), [1296])
	$6 = ($8 + [1])
	$4 = *($3)
	if ( ($4 & [1]) ){ goto $label$44 }
	$15 = uint_32($4 >> [1])
	$14 = ($3 + [1])
	goto $label$43 
	
.LABEL $label$44
	$15 = *(($2 + [36]))
	$14 = *(($2 + [40]))
	
.LABEL $label$43
	$4 = CALL strlen([1264])
	$17 = [-1]
	if ( ($15 <= $6) ){ goto $label$45 }
	$17 = $6
	if ( ($4 == 0) ){ goto $label$45 }
	$7 = ($14 + $15)
	$17 = $7
	$16 = ($14 + $6)
	$15 = ($7 - $16)
	if ( ((int_32)$15 < (int_32)$4) ){ goto $label$46 }
	
.LOOP $label$48:
	$17 = (($15 - $4) + [1])
	if ( ($17 == 0) ){ goto $label$47 }
	$17 = CALL memchr($16, [59], $17)
	if ( ($17 == 0) ){ goto $label$47 }
	if ( (CALL memcmp($17, [1264], $4) == 0) ){ goto $label$46 }
	$16 = ($17 + [1])
	$15 = ($7 - $16)
	if ( ((int_32)$15 >= (int_32)$4) ){ goto $label$48 }
	
.LABEL $label$47
	$17 = $7
	
.LABEL $label$46
	$17 = ( [-1] ? ($17 - $14) : ((int_32)$17 == (int_32)$7) )
	
.LABEL $label$45
	CALL eosio_assert(((int_32)$17 != (int_32)[-1]), [1312])
	CALL $100(($18 + [56]), $3, [0], $13, $3)
	CALL $100(($18 + [40]), $3, $5, ($8 + ((int_32)$13 ^ (int_32)[-1])), $3)
	CALL $100(($18 + [24]), $3, $6, ($17 + ((int_32)$8 ^ (int_32)[-1])), $3)
	CALL $100(($18 + [8]), $3, ($17 + [1]), [-1], $3)
	CALL $64(($18 + [56]))
	CALL $64(($18 + [40]))
	CALL $64(($18 + [24]))
	CALL $64(($18 + [8]))
	$8 = *($18 + [56])
	$4 = CALL strlen([1328])
	if ( ((int_32)$4 != (int_32)( *($18 + [60]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$49 }
	if ( (CALL $97(($18 + [56]), [0], [-1], [1328], $4) == 0) ){ goto $label$7 }
	
.LABEL $label$49
	$8 = *($18 + [56])
	$4 = CALL strlen([1344])
	if ( ((int_32)$4 != (int_32)( *($18 + [60]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$50 }
	if ( (CALL $97(($18 + [56]), [0], [-1], [1344], $4) == 0) ){ goto $label$6 }
	
.LABEL $label$50
	$8 = *($18 + [56])
	$4 = CALL strlen([1360])
	if ( ((int_32)$4 != (int_32)( *($18 + [60]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$51 }
	if ( (CALL $97(($18 + [56]), [0], [-1], [1360], $4) == 0) ){ goto $label$5 }
	
.LABEL $label$51
	$8 = *($18 + [56])
	$4 = CALL strlen([1376])
	if ( ((int_32)$4 != (int_32)( *($18 + [60]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$52 }
	if ( (CALL $97(($18 + [56]), [0], [-1], [1376], $4) == 0) ){ goto $label$4 }
	
.LABEL $label$52
	CALL eosio_assert([0], [1392])
	goto $label$3 
	
.LABEL $label$8
	CALL prints([1136])
	goto $label$1 
	
.LABEL $label$7
	CALL $65($0, $2, ($18 + [72]), ($18 + [40]), ($18 + [24]), ($18 + [8]))
	goto $label$3 
	
.LABEL $label$6
	CALL $66($0, $2, ($18 + [72]), ($18 + [40]), ($18 + [24]), ($18 + [8]))
	goto $label$3 
	
.LABEL $label$5
	CALL $67($0, $2, ($18 + [72]), ($18 + [40]), ($18 + [24]), ($18 + [8]))
	goto $label$3 
	
.LABEL $label$4
	CALL $68($0, $2, ($18 + [72]), ($18 + [40]), ($18 + [24]), ($18 + [8]))
	
.LABEL $label$3
	if ( ((*($18 + [8]) & [1]) == 0) ){ goto $label$53 }
	CALL $91(*($18 + [16]))
	
.LABEL $label$53
	if ( ((*($18 + [24]) & [1]) == 0) ){ goto $label$54 }
	CALL $91(*($18 + [32]))
	
.LABEL $label$54
	if ( ((*($18 + [40]) & [1]) == 0) ){ goto $label$55 }
	CALL $91(*($18 + [48]))
	
.LABEL $label$55
	if ( ((*($18 + [56]) & [1]) == 0) ){ goto $label$1 }
	CALL $91(*($18 + [64]))
	
.LABEL $label$1
	*([0] + [4]) = ($18 + [80])
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [48])
	*([0] + [4]) = $3
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-4994130327848222720) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-4994130327733141504) ){ goto $label$2 }
	*($3) = CALL $10()
	CALL $11($0, $3)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$5 }
	CALL $8($3)
	CALL $9($0, $1, $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL $91(*(($3 + [40])))
	goto $label$1 
	
.LABEL $label$5
	CALL prints([16])
	CALL printn($1)
	CALL prints([64])
	CALL printn($2)
	CALL prints([80])
	goto $label$1 
	
.LABEL $label$3
	*($3) = CALL $12()
	CALL $13($0, $3)
	goto $label$1 
	
.LABEL $label$2
	CALL prints([96])
	CALL printn($2)
	CALL prints([80])
	CALL eosio_assert([0], [128])
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [48])
}

int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [116])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [60]) & [1]) == 0) ){ goto $label$6 }
	CALL $91(*(($2 + [68])))
	
.LABEL $label$6
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$7 }
	CALL $91(*(($2 + [56])))
	
.LABEL $label$7
	CALL $91($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$2 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $91($2)
	
.LABEL $label$1
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$8 }
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	if ( ((*($2 + [44]) & [1]) == 0) ){ goto $label$13 }
	CALL $91(*(($2 + [52])))
	
.LABEL $label$13
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$14 }
	CALL $91(*(($2 + [40])))
	
.LABEL $label$14
	CALL $91($2)
	
.LABEL $label$12
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$11 }
	$2 = *(($0 + [72]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $1
	
.LABEL $label$9
	*($3) = $1
	CALL $91($2)
	
.LABEL $label$8
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$15 }
	$3 = ($0 + [36])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$17 }
	
.LOOP $label$18:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL $91($4)
	
.LABEL $label$19
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$18 }
	$2 = *(($0 + [32]))
	goto $label$16 
	
.LABEL $label$17
	$2 = $1
	
.LABEL $label$16
	*($3) = $1
	CALL $91($2)
	
.LABEL $label$15
	return $0
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [128])
	*([0] + [4]) = $3
	*(($3 + [16])) = $0
	*(($3 + [24])) = (int_64)-1
	*(($3 + [32])) = (int_64)0
	*(($3 + [40])) = [0]
	*($3 + [8]) = $0
	*($3) = $0
	*($3 + [48]) = $0
	*(($3 + [56])) = $0
	*(($3 + [64])) = (int_64)-1
	*(($3 + [72])) = [0]
	*(($3 + [76])) = [0]
	*(($3 + [80])) = [0]
	*(($3 + [84])) = [0]
	*($3 + [88]) = $0
	*(($3 + [96])) = $0
	*(($3 + [104])) = (int_64)-1
	*(($3 + [112])) = [0]
	*(($3 + [116])) = [0]
	*(($3 + [120])) = [0]
	CALL $6($3, $1, $2)
	CALL $7($3)
	*([0] + [4]) = ($3 + [128])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [400])
	*(($2 = ($0 + [32]))) = (int_64)1413695492
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [400])
	*($0 + [40 align=4]) = (int_64)0
	*(($0 + [48])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	return $0
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [848])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $90([88])) + [72]) = $0
	CALL $46(($8 + [32]), $6)
	*($6 + [76]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $45(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $91($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*(($4 = CALL $90([88])) + [72]) = $1
	*($4 + [8]) = (int_64)1
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)1
	*($4 + [24]) = (int_64)1000
	*($4 + [32]) = (int_64)100
	*($4 + [40]) = (int_64)1000
	*($4 + [48]) = (int_64)1000000
	*($4 + [56]) = [0]
	*($4 + [64]) = (int_64)0
	*($9 + [104]) = (($9 + [16]) + [65])
	*($9 + [100]) = ($9 + [16])
	*($9 + [96]) = ($9 + [16])
	CALL $44(($9 + [96]), $4)
	$5 = *($4)
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)7759857043606863872, $2, $5, ($9 + [16]), [65])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [96]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [76])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [96]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $45(($1 + [24]), ($9 + [96]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [96])
	*($9 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $91($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [112])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [848])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $90([80])
	$4 = CALL $14($6)
	*($6 + [64]) = $0
	CALL $42(($8 + [32]), $4)
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $43(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [52]) & [1]) == 0) ){ goto $label$10 }
	CALL $91(*(($4 + [60])))
	
.LABEL $label$10
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $91(*(($4 + [48])))
	
.LABEL $label$11
	CALL $91($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_64 .FUNC $10 ()
{
	int_32 $0
	int_64 $1
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [16])
	$3 = $2
	*([0] + [4]) = $2
	$0 = CALL action_data_size()
	if ( ($0 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($0)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $0)
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [880])
	CALL memcpy(($3 + [8]), $2, [8])
	$1 = *($3 + [8])
	if ( ($0 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = ($3 + [16])
	return $1
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [272])
	*([0] + [4]) = $12
	$5 = CALL current_time()
	$10 = ((int_64)*($1) / (int_64)86400)
	*($12 + [248]) = $10
	*(($12 + [120])) = (int_64)1397703940
	*($12 + [112]) = (int_64)0
	CALL eosio_assert([1], [496])
	$8 = ((uint_64)$5 / (uint_64)(int_64)86400000000)
	$5 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$11 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	CALL eosio_assert($11, [400])
	*(($12 + [136])) = (int_64)0
	*(($12 + [144])) = (int_64)0
	*(($12 + [160])) = (int_64)0
	*(($12 + [168])) = (int_64)1397703940
	*($12 + [128]) = (int_64)0
	CALL eosio_assert([1], [496])
	$5 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$11 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$11 = [0]
	
.LABEL $label$6
	CALL eosio_assert($11, [400])
	*(($12 + [176])) = (int_64)0
	*(($12 + [184])) = (int_64)0
	*(($12 + [192])) = (int_64)0
	*(($12 + [208])) = (int_64)0
	*(($12 + [216])) = (int_64)1397703940
	CALL eosio_assert([1], [496])
	$5 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$11 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$11 = [0]
	
.LABEL $label$11
	CALL eosio_assert($11, [400])
	*(($12 + [224])) = (int_64)0
	*(($12 + [232])) = (int_64)0
	*(($12 + [240])) = (int_64)0
	CALL eosio_assert((uint_64)($10 <= $8), [976])
	CALL require_auth(*($0))
	$9 = [0]
	*(($12 + [96])) = [0]
	*($12 + [72]) = $10
	*($12 + [80]) = (int_64)-1
	*($12 + [88]) = (int_64)0
	$5 = *($0)
	*($12 + [64]) = $5
	$1 = CALL db_lowerbound_i64($5, $10, (int_64)-6150062511224782848, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$16 }
	$1 = CALL $47(($12 + [64]), $1)
	CALL $48(($12 + [104]), $1)
	CALL eosio_assert([1], [208])
	$1 = CALL db_next_i64(*($1 + [52]), ($12 + [24]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$16 }
	
.LOOP $label$17:
	$1 = CALL $47(($12 + [64]), $1)
	CALL $48(($12 + [104]), $1)
	CALL eosio_assert([1], [208])
	$1 = CALL db_next_i64(*($1 + [52]), ($12 + [24]))
	if ( ((int_32)$1 >= (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$16
	$1 = CALL db_lowerbound_i64(*($12 + [64]), *(($12 + [72])), (int_64)-6150062511224782848, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$18 }
	$9 = CALL $47(($12 + [64]), $1)
	
.LABEL $label$18
	$5 = (int_64)0
	$11 = ($12 + [200])
	$4 = ($12 + [152])
	
.LOOP $label$24:
	$10 = $5
	if ( ($9 == 0) ){ goto $label$23 }
	$7 = *($11)
	$6 = *($4)
	$5 = *($9)
	$8 = *($12 + [104])
	CALL eosio_assert([1], [208])
	if ( ((int_64)$5 == (int_64)$8) ){ goto $label$26 }
	if ( ((int_64)$5 == (int_64)$6) ){ goto $label$26 }
	if ( ((int_64)$5 == (int_64)$7) ){ goto $label$26 }
	$1 = $9
	goto $label$25 
	
.LABEL $label$26
	$1 = $9
	
.LOOP $label$27:
	$1 = CALL db_next_i64(*($1 + [52]), ($12 + [24]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$23 }
	$1 = CALL $47(($12 + [64]), $1)
	$7 = *($11)
	$6 = *($4)
	$5 = *($1)
	$8 = *($12 + [104])
	CALL eosio_assert([1], [208])
	if ( ((int_64)$5 == (int_64)$8) ){ goto $label$27 }
	if ( ((int_64)$5 == (int_64)$6) ){ goto $label$27 }
	if ( ((int_64)$5 == (int_64)$7) ){ goto $label$27 }
	
.LABEL $label$25
	$9 = [0]
	$2 = CALL db_next_i64(*($1 + [52]), ($12 + [24]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$28 }
	$9 = CALL $47(($12 + [64]), $2)
	
.LABEL $label$28
	CALL eosio_assert([1], [288])
	CALL eosio_assert([1], [208])
	$2 = CALL db_next_i64(*(($1 + [52])), ($12 + [24]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$29 }
	CALL $47(($12 + [64]), $2)
	
.LABEL $label$29
	CALL $49(($12 + [64]), $1)
	$5 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 <= (int_64)29) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	*($12 + [40]) = (int_64)-1
	*($12 + [48]) = [0]
	$5 = *($12 + [248])
	$8 = *($0)
	*($12 + [24]) = $8
	*($12 + [32]) = $5
	*(($12 + [52])) = [0]
	*((($12 + [24]) + [32])) = [0]
	$1 = [0]
	$11 = CALL db_lowerbound_i64($8, $5, (int_64)-2507758720402849792, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$30 }
	$1 = CALL $50(($12 + [24]), $11)
	
.LABEL $label$30
	
.LOOP $label$33:
	if ( ($1 == 0) ){ goto $label$32 }
	CALL eosio_assert([1], [208])
	$11 = [0]
	$4 = CALL db_next_i64(*($1 + [32]), ($12 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$34 }
	$11 = CALL $50(($12 + [24]), $4)
	
.LABEL $label$34
	CALL eosio_assert([1], [288])
	CALL eosio_assert([1], [208])
	$4 = CALL db_next_i64(*(($1 + [32])), ($12 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$35 }
	CALL $50(($12 + [24]), $4)
	
.LABEL $label$35
	CALL $51(($12 + [24]), $1)
	$4 = ((int_64)$10 > (int_64)29)
	$1 = $11
	$10 = ((int_64)$10 + (int_64)1)
	if ( ($4 == 0) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	if ( ((int_64)$10 > (int_64)9) ){ goto $label$31 }
	if ( (int_64)(*($12 + [104]) == 0) ){ goto $label$36 }
	$5 = *($0)
	*($12 + [12]) = ($12 + [104])
	*($12 + [8]) = ($12 + [248])
	CALL $52(($12 + [256]), ($0 + [48]), $5, ($12 + [8]))
	$7 = *($0)
	$5 = (int_64)0
	$10 = (int_64)59
	$1 = [240]
	$3 = *($12 + [104])
	$6 = (int_64)0
	
.LOOP $label$37:
	$8 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$38 }
	$11 = *($1)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$11 = ($11 + [165])
	goto $label$39 
	
.LABEL $label$40
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$38
	$1 = ($1 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$8 | (int_64)$6)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$37 }
	*($12 + [16]) = (int_64)1413695492
	*($12 + [8]) = (int_64)100000
	CALL eosio_assert([1], [496])
	$5 = (uint_64)*($12 + [16]) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$44 }
	
.LOOP $label$45:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$42 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$45 }
	
.LABEL $label$44
	$11 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$11 = [0]
	
.LABEL $label$41
	CALL eosio_assert($11, [400])
	*(($12 + [264])) = [0]
	*($12 + [256]) = (int_64)0
	$1 = CALL strlen([1008])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$48 }
	*($12 + [256]) = ($1 << [1])
	$11 = (($12 + [256]) | [1])
	if ( $1 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$4 = (($1 + [16]) & [-16])
	$11 = CALL $90($4)
	*($12 + [256]) = ($4 | [1])
	*($12 + [264]) = $11
	*($12 + [260]) = $1
	
.LABEL $label$47
	CALL memcpy($11, [1008], $1)
	
.LABEL $label$46
	*(($11 + $1)) = [0]
	CALL $20($7, $3, $6, ($12 + [8]), ($12 + [256]))
	if ( ((*($12 + [256]) & [1]) == 0) ){ goto $label$36 }
	CALL $91(*($12 + [264]))
	
.LABEL $label$36
	$1 = (($12 + [104]) + [48])
	if ( (int_64)(*($1) == 0) ){ goto $label$49 }
	$5 = *($0)
	*($12 + [12]) = ($12 + [104])
	*($12 + [8]) = ($12 + [248])
	CALL $53(($12 + [256]), ($0 + [48]), $5, ($12 + [8]))
	$7 = *($1)
	$3 = *($0)
	$5 = (int_64)0
	$10 = (int_64)59
	$1 = [240]
	$6 = (int_64)0
	
.LOOP $label$50:
	$8 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$51 }
	$11 = *($1)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$11 = ($11 + [165])
	goto $label$52 
	
.LABEL $label$53
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$51
	$1 = ($1 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$8 | (int_64)$6)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$50 }
	*($12 + [16]) = (int_64)1413695492
	*($12 + [8]) = (int_64)100000
	CALL eosio_assert([1], [496])
	$5 = (uint_64)*($12 + [16]) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$56:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$55 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$57 }
	
.LOOP $label$58:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$55 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$58 }
	
.LABEL $label$57
	$11 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$55
	$11 = [0]
	
.LABEL $label$54
	CALL eosio_assert($11, [400])
	*(($12 + [264])) = [0]
	*($12 + [256]) = (int_64)0
	$1 = CALL strlen([1008])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$61 }
	*($12 + [256]) = ($1 << [1])
	$11 = (($12 + [256]) | [1])
	if ( $1 ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	$4 = (($1 + [16]) & [-16])
	$11 = CALL $90($4)
	*($12 + [256]) = ($4 | [1])
	*($12 + [264]) = $11
	*($12 + [260]) = $1
	
.LABEL $label$60
	CALL memcpy($11, [1008], $1)
	
.LABEL $label$59
	*(($11 + $1)) = [0]
	CALL $20($3, $7, $6, ($12 + [8]), ($12 + [256]))
	if ( ((*($12 + [256]) & [1]) == 0) ){ goto $label$49 }
	CALL $91(*($12 + [264]))
	
.LABEL $label$49
	$1 = ($12 + [200])
	if ( (int_64)(*($1) == 0) ){ goto $label$62 }
	$5 = *($0)
	*($12 + [12]) = ($12 + [104])
	*($12 + [8]) = ($12 + [248])
	CALL $54(($12 + [256]), ($0 + [48]), $5, ($12 + [8]))
	$7 = *($1)
	$3 = *($0)
	$5 = (int_64)0
	$10 = (int_64)59
	$1 = [240]
	$6 = (int_64)0
	
.LOOP $label$63:
	$8 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$64 }
	$11 = *($1)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$11 = ($11 + [165])
	goto $label$65 
	
.LABEL $label$66
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$64
	$1 = ($1 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$8 | (int_64)$6)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$63 }
	*($12 + [16]) = (int_64)1413695492
	*($12 + [8]) = (int_64)100000
	CALL eosio_assert([1], [496])
	$5 = (uint_64)*($12 + [16]) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$69:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$68 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$70 }
	
.LOOP $label$71:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$68 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$71 }
	
.LABEL $label$70
	$11 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$69 }
	goto $label$67 
	
.LABEL $label$68
	$11 = [0]
	
.LABEL $label$67
	CALL eosio_assert($11, [400])
	*(($12 + [264])) = [0]
	*($12 + [256]) = (int_64)0
	$1 = CALL strlen([1008])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$74 }
	*($12 + [256]) = ($1 << [1])
	$11 = (($12 + [256]) | [1])
	if ( $1 ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$74
	$4 = (($1 + [16]) & [-16])
	$11 = CALL $90($4)
	*($12 + [256]) = ($4 | [1])
	*($12 + [264]) = $11
	*($12 + [260]) = $1
	
.LABEL $label$73
	CALL memcpy($11, [1008], $1)
	
.LABEL $label$72
	*(($11 + $1)) = [0]
	CALL $20($3, $7, $6, ($12 + [8]), ($12 + [256]))
	if ( ((*($12 + [256]) & [1]) == 0) ){ goto $label$62 }
	CALL $91(*($12 + [264]))
	
.LABEL $label$62
	$1 = CALL db_lowerbound_i64(*($12 + [64]), *(($12 + [72])), (int_64)-6150062511224782848, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$31 }
	$1 = CALL $47(($12 + [64]), $1)
	
.LOOP $label$75:
	CALL eosio_assert([1], [208])
	$11 = [0]
	$4 = CALL db_next_i64(*($1 + [52]), ($12 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$76 }
	$11 = CALL $47(($12 + [64]), $4)
	
.LABEL $label$76
	CALL eosio_assert([1], [288])
	CALL eosio_assert([1], [208])
	$4 = CALL db_next_i64(*(($1 + [52])), ($12 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$77 }
	CALL $47(($12 + [64]), $4)
	
.LABEL $label$77
	CALL $49(($12 + [64]), $1)
	$1 = $11
	if ( $11 ){ goto $label$75 }
	
.LABEL $label$31
	$4 = *($12 + [48])
	if ( ($4 == 0) ){ goto $label$22 }
	$9 = ($12 + [52])
	$1 = *($9)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$79 }
	
.LOOP $label$80:
	$1 = ($1 + [-24])
	$11 = *($1)
	*($1) = [0]
	if ( ($11 == 0) ){ goto $label$81 }
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$82 }
	CALL $91(*(($11 + [24])))
	
.LABEL $label$82
	CALL $91($11)
	
.LABEL $label$81
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$80 }
	$1 = *(($12 + [48]))
	goto $label$78 
	
.LABEL $label$79
	$1 = $4
	
.LABEL $label$78
	*($9) = $4
	CALL $91($1)
	
.LABEL $label$22
	$4 = *($12 + [88])
	if ( ($4 == 0) ){ goto $label$83 }
	$9 = ($12 + [92])
	$11 = *($9)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$85 }
	
.LOOP $label$86:
	$11 = ($11 + [-24])
	$1 = *($11)
	*($11) = [0]
	if ( ($1 == 0) ){ goto $label$87 }
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$88 }
	CALL $91(*(($1 + [44])))
	
.LABEL $label$88
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$89 }
	CALL $91(*(($1 + [32])))
	
.LABEL $label$89
	CALL $91($1)
	
.LABEL $label$87
	if ( ((int_32)$4 != (int_32)$11) ){ goto $label$86 }
	$1 = *(($12 + [88]))
	goto $label$84 
	
.LABEL $label$85
	$1 = $4
	
.LABEL $label$84
	*($9) = $4
	CALL $91($1)
	
.LABEL $label$83
	if ( ((*(($12 + [236])) & [1]) == 0) ){ goto $label$90 }
	CALL $91(*(($12 + [244])))
	
.LABEL $label$90
	if ( ((*(($12 + [224])) & [1]) == 0) ){ goto $label$91 }
	CALL $91(*(($12 + [232])))
	
.LABEL $label$91
	if ( ((*(($12 + [188])) & [1]) == 0) ){ goto $label$92 }
	CALL $91(*(($12 + [196])))
	
.LABEL $label$92
	if ( ((*(($12 + [176])) & [1]) == 0) ){ goto $label$93 }
	CALL $91(*(($12 + [184])))
	
.LABEL $label$93
	if ( ((*($12 + [140]) & [1]) == 0) ){ goto $label$94 }
	CALL $91(*(($12 + [148])))
	
.LABEL $label$94
	if ( ((*($12 + [128]) & [1]) == 0) ){ goto $label$95 }
	CALL $91(*(($12 + [136])))
	
.LABEL $label$95
	*([0] + [4]) = ($12 + [272])
	return (unreachable)
	
.LABEL $label$21
	CALL $92(($12 + [256]))
	
.LABEL $label$20
	CALL $92(($12 + [256]))
	
.LABEL $label$19
	CALL $92(($12 + [256]))
	(unreachable)
	(unreachable)
}

int_64 .FUNC $12 ()
{
	int_32 $0
	int_64 $1
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [16])
	$3 = $2
	*([0] + [4]) = $2
	$0 = CALL action_data_size()
	if ( ($0 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($0)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $0)
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [880])
	CALL memcpy(($3 + [8]), $2, [8])
	$1 = *($3 + [8])
	if ( ($0 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = ($3 + [16])
	return $1
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_32 $28
	$28 = (*([0] + [4]) - [320])
	*([0] + [4]) = $28
	$25 = CALL current_time()
	$27 = ((int_64)*($1) / (int_64)86400)
	*($28 + [296]) = $27
	CALL $14(($28 + [104]))
	CALL $14(($28 + [168]))
	CALL $14(($28 + [232]))
	CALL eosio_assert((uint_64)($27 <= ((uint_64)$25 / (uint_64)(int_64)86400000000)), [144])
	CALL require_auth(*($0))
	$1 = ($0 + [8])
	$11 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7759857043606863872, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$2 }
	$11 = CALL $15($1, $11)
	goto $label$1 
	
.LABEL $label$2
	CALL $16(($28 + [64]), $1, *($0), ($28 + [24]))
	$11 = *($28 + [68])
	
.LABEL $label$1
	$23 = [0]
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [176])
	*($28 + [80]) = (int_64)-1
	*($28 + [88]) = [0]
	$25 = *($28 + [296])
	$27 = *($0)
	*($28 + [64]) = $27
	*($28 + [72]) = $25
	*(($28 + [92])) = [0]
	*(($28 + [96])) = [0]
	$1 = CALL db_lowerbound_i64($27, $25, (int_64)-6150066282206068736, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $17(($28 + [64]), $1)
	CALL $18(($28 + [104]), $1)
	CALL eosio_assert([1], [208])
	$1 = CALL db_next_i64(*($1 + [68]), ($28 + [24]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	
.LOOP $label$4:
	$1 = CALL $17(($28 + [64]), $1)
	CALL $18(($28 + [104]), $1)
	CALL eosio_assert([1], [208])
	$1 = CALL db_next_i64(*($1 + [68]), ($28 + [24]))
	if ( ((int_32)$1 >= (int_32)[0]) ){ goto $label$4 }
	
.LABEL $label$3
	$1 = CALL db_lowerbound_i64(*($28 + [64]), *((($28 + [64]) + [8])), (int_64)-6150066282206068736, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	$23 = CALL $17(($28 + [64]), $1)
	
.LABEL $label$5
	$3 = (($28 + [8]) | [1])
	$2 = (($28 + [8]) | [1])
	$13 = ($28 + [232])
	$14 = ($28 + [168])
	$15 = (($28 + [24]) + [8])
	$16 = (($28 + [24]) + [16])
	$21 = ($28 + [48])
	$17 = ($28 + [56])
	$18 = ($11 + [40])
	$19 = ($28 + [52])
	$4 = [0]
	
.LOOP $label$12:
	if ( ($23 == 0) ){ goto $label$11 }
	$25 = *($23)
	if ( ((int_64)$25 == (int_64)*($28 + [104])) ){ goto $label$14 }
	if ( ((int_64)$25 == (int_64)*($14)) ){ goto $label$14 }
	if ( ((int_64)$25 != (int_64)*($13)) ){ goto $label$13 }
	
.LABEL $label$14
	
.LOOP $label$15:
	CALL eosio_assert([1], [208])
	$1 = CALL db_next_i64(*($23 + [68]), ($28 + [24]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$11 }
	$23 = CALL $17(($28 + [64]), $1)
	$25 = *($23)
	if ( ((int_64)$25 == (int_64)*($28 + [104])) ){ goto $label$15 }
	if ( ((int_64)$25 == (int_64)*($14)) ){ goto $label$15 }
	if ( ((int_64)$25 == (int_64)*($13)) ){ goto $label$15 }
	
.LABEL $label$13
	$20 = $23
	*($15) = $25
	*($16) = (int_64)-1
	*($21) = (int_64)0
	$7 = [0]
	*($17) = [0]
	$27 = *($0)
	*($28 + [24]) = $27
	$1 = CALL db_lowerbound_i64($27, $25, (int_64)-2507762491384135680, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$16 }
	$7 = CALL $19(($28 + [24]), $1)
	
.LABEL $label$16
	
.LOOP $label$20:
	if ( ($7 == 0) ){ goto $label$19 }
	$8 = *($7)
	$10 = *($0)
	$25 = (int_64)0
	$27 = (int_64)59
	$1 = [240]
	$26 = (int_64)0
	
.LOOP $label$21:
	$24 = (int_64)0
	if ( ((uint_64)$25 > (uint_64)(int_64)11) ){ goto $label$22 }
	$11 = *($1)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$11 = ($11 + [165])
	goto $label$23 
	
.LABEL $label$24
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$24 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$27 & (int_64)4294967295))
	
.LABEL $label$22
	$1 = ($1 + [1])
	$25 = ((int_64)$25 + (int_64)1)
	$26 = ((int_64)$24 | (int_64)$26)
	$27 = ((int_64)$27 + (int_64)-5)
	if ( ((int_64)$27 != (int_64)-6) ){ goto $label$21 }
	*(($22 = (($28 + [8]) + [8]))) = [0]
	*($28 + [8]) = (int_64)0
	$1 = CALL strlen([256])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$6 }
	$12 = ($7 + [8])
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$27 }
	*($28 + [8]) = ($1 << [1])
	$11 = $2
	if ( $1 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$5 = (($1 + [16]) & [-16])
	$11 = CALL $90($5)
	*($22) = $11
	*($28 + [8]) = ($5 | [1])
	*($28 + [12]) = $1
	
.LABEL $label$26
	CALL memcpy($11, [256], $1)
	
.LABEL $label$25
	*(($11 + $1)) = [0]
	CALL $20($10, $8, $26, $12, ($28 + [8]))
	if ( ((*($28 + [8]) & [1]) == 0) ){ goto $label$28 }
	CALL $91(*($22))
	
.LABEL $label$28
	CALL eosio_assert([1], [208])
	$1 = [0]
	$11 = CALL db_next_i64(*($7 + [48]), ($28 + [8]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$29 }
	$1 = CALL $19(($28 + [24]), $11)
	
.LABEL $label$29
	CALL eosio_assert([1], [288])
	CALL eosio_assert([1], [208])
	$11 = CALL db_next_i64(*(($7 + [48])), ($28 + [8]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$30 }
	CALL $19(($28 + [24]), $11)
	
.LABEL $label$30
	CALL $21(($28 + [24]), $7)
	$22 = [1]
	$11 = ((int_32)$4 > (int_32)[19])
	$7 = $1
	$1 = ($4 + [1])
	$4 = $1
	if ( ($11 == 0) ){ goto $label$20 }
	$23 = $20
	$4 = $1
	$7 = *($21)
	if ( $7 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( ((int_64)*($23 + [8]) < (int_64)*($18)) ){ goto $label$31 }
	$8 = *($23)
	$10 = *($0)
	$25 = (int_64)0
	$24 = (int_64)59
	$1 = [336]
	$26 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$25 > (uint_64)(int_64)10) ){ goto $label$37 }
	$11 = *($1)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$11 = ($11 + [165])
	goto $label$35 
	
.LABEL $label$37
	$27 = (int_64)0
	if ( ((int_64)$25 == (int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$27 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$27 = ((int_64)((int_64)$27 & (int_64)31) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$33
	$1 = ($1 + [1])
	$24 = ((int_64)$24 + (int_64)-5)
	$26 = ((int_64)$27 | (int_64)$26)
	$25 = ((int_64)$25 + (int_64)1)
	if ( ((int_64)$25 != (int_64)13) ){ goto $label$32 }
	*(($7 = (($28 + [8]) + [8]))) = [0]
	*($28 + [8]) = (int_64)0
	$1 = CALL strlen([352])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$7 }
	$22 = ($23 + [8])
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$40 }
	*($28 + [8]) = ($1 << [1])
	$11 = $3
	if ( $1 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$12 = (($1 + [16]) & [-16])
	$11 = CALL $90($12)
	*($7) = $11
	*($28 + [8]) = ($12 | [1])
	*($28 + [12]) = $1
	
.LABEL $label$39
	CALL memcpy($11, [352], $1)
	
.LABEL $label$38
	*(($11 + $1)) = [0]
	CALL $20($10, $8, $26, $22, ($28 + [8]))
	if ( ((*($28 + [8]) & [1]) == 0) ){ goto $label$31 }
	CALL $91(*($7))
	
.LABEL $label$31
	CALL eosio_assert([1], [208])
	$1 = *($23 + [68])
	$23 = [0]
	$1 = CALL db_next_i64($1, ($28 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$41 }
	$23 = CALL $17(($28 + [64]), $1)
	
.LABEL $label$41
	$1 = ((int_32)$20 != (int_32)[0])
	CALL eosio_assert($1, [288])
	CALL eosio_assert($1, [208])
	$1 = CALL db_next_i64(*($20 + [68]), ($28 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$42 }
	CALL $17(($28 + [64]), $1)
	
.LABEL $label$42
	CALL $22(($28 + [64]), $20)
	$22 = ((int_32)$4 > (int_32)[19])
	$4 = ($4 + [1])
	$7 = *($21)
	if ( ($7 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$1 = *($19)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$44 }
	
.LOOP $label$45:
	$1 = ($1 + [-24])
	$11 = *($1)
	*($1) = [0]
	if ( ($11 == 0) ){ goto $label$46 }
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$47 }
	CALL $91(*(($11 + [40])))
	
.LABEL $label$47
	CALL $91($11)
	
.LABEL $label$46
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$45 }
	$1 = *($21)
	goto $label$43 
	
.LABEL $label$44
	$1 = $7
	
.LABEL $label$43
	*($19) = $7
	CALL $91($1)
	
.LABEL $label$17
	if ( ($22 == 0) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$1 = CALL db_lowerbound_i64(*($28 + [64]), *((($28 + [64]) + [8])), (int_64)-6150066282206068736, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$48 }
	$5 = (($28 + [304]) | [1])
	$12 = CALL $17(($28 + [64]), $1)
	$13 = (($28 + [24]) + [8])
	$20 = (($28 + [24]) + [16])
	$21 = ($28 + [56])
	$2 = ($28 + [52])
	$19 = ($28 + [168])
	$15 = ($28 + [232])
	
.LOOP $label$49:
	CALL eosio_assert([1], [496])
	$25 = (int_64)5462355
	$1 = [0]
	
.LOOP $label$52:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $25) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$51 }
	$25 = (uint_64)$25 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$25) & (int_64)255) != (int_64)0) ){ goto $label$53 }
	
.LOOP $label$54:
	$25 = (uint_64)$25 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$25) & (int_64)255) != (int_64)0) ){ goto $label$51 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$54 }
	
.LABEL $label$53
	$11 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$51
	$11 = [0]
	
.LABEL $label$50
	CALL eosio_assert($11, [400])
	CALL eosio_assert([1], [496])
	$25 = (int_64)5462355
	$1 = [0]
	
.LOOP $label$57:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $25) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$56 }
	$25 = (uint_64)$25 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$25) & (int_64)255) != (int_64)0) ){ goto $label$58 }
	
.LOOP $label$59:
	$25 = (uint_64)$25 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$25) & (int_64)255) != (int_64)0) ){ goto $label$56 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$59 }
	
.LABEL $label$58
	$11 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$56
	$11 = [0]
	
.LABEL $label$55
	CALL eosio_assert($11, [400])
	$7 = [0]
	$1 = [0]
	$25 = *($12)
	if ( ((int_64)$25 == (int_64)*($28 + [104])) ){ goto $label$65 }
	$1 = [1]
	if ( ((int_64)$25 == (int_64)*($19)) ){ goto $label$65 }
	$1 = [2]
	if ( ((int_64)$25 != (int_64)*($15)) ){ goto $label$64 }
	
.LABEL $label$65
	$27 = *((($28 + [104]) + ($1 << [6])) + [8])
	*($13) = $25
	*($20) = (int_64)-1
	*(($14 = (($28 + [24]) + [24]))) = (int_64)0
	*($21) = [0]
	$24 = *($0)
	*($28 + [24]) = $24
	$1 = CALL db_lowerbound_i64($24, $25, (int_64)-2507762491384135680, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$66 }
	$7 = CALL $19(($28 + [24]), $1)
	
.LABEL $label$66
	$6 = ((int_64)$27 * (int_64)10000)
	
.LOOP $label$69:
	if ( ($7 == 0) ){ goto $label$68 }
	$8 = ((int_64)((int_64)$6 * (int_64)*($7 + [8])) / (int_64)((int_64)*(($12 + [24])) * (int_64)10000))
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$70 }
	$10 = *($7)
	$9 = *($0)
	$25 = (int_64)0
	$24 = (int_64)59
	$1 = [336]
	$26 = (int_64)0
	
.LOOP $label$71:
	if ( ((uint_64)$25 > (uint_64)(int_64)10) ){ goto $label$76 }
	$11 = *($1)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$75 }
	$11 = ($11 + [165])
	goto $label$74 
	
.LABEL $label$76
	$27 = (int_64)0
	if ( ((int_64)$25 == (int_64)11) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$75
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$74
	$27 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$73
	$27 = ((int_64)((int_64)$27 & (int_64)31) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$72
	$1 = ($1 + [1])
	$24 = ((int_64)$24 + (int_64)-5)
	$26 = ((int_64)$27 | (int_64)$26)
	$25 = ((int_64)$25 + (int_64)1)
	if ( ((int_64)$25 != (int_64)13) ){ goto $label$71 }
	*(($1 = (($28 + [8]) + [8]))) = (int_64)1397703940
	*($28 + [8]) = $8
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [496])
	$25 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$79:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $25) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$78 }
	$25 = (uint_64)$25 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$25) & (int_64)255) != (int_64)0) ){ goto $label$80 }
	
.LOOP $label$81:
	$25 = (uint_64)$25 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$25) & (int_64)255) != (int_64)0) ){ goto $label$78 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$81 }
	
.LABEL $label$80
	$11 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$79 }
	goto $label$77 
	
.LABEL $label$78
	$11 = [0]
	
.LABEL $label$77
	CALL eosio_assert($11, [400])
	*(($22 = (($28 + [304]) + [8]))) = [0]
	*($28 + [304]) = (int_64)0
	$1 = CALL strlen([464])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$63 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$84 }
	*($28 + [304]) = ($1 << [1])
	$11 = $5
	if ( $1 ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	$23 = (($1 + [16]) & [-16])
	$11 = CALL $90($23)
	*($22) = $11
	*($28 + [304]) = ($23 | [1])
	*($28 + [308]) = $1
	
.LABEL $label$83
	CALL memcpy($11, [464], $1)
	
.LABEL $label$82
	*(($11 + $1)) = [0]
	CALL $20($9, $10, $26, ($28 + [8]), ($28 + [304]))
	if ( ((*($28 + [304]) & [1]) == 0) ){ goto $label$70 }
	CALL $91(*($22))
	
.LABEL $label$70
	CALL eosio_assert([1], [208])
	$1 = [0]
	$11 = CALL db_next_i64(*($7 + [48]), ($28 + [8]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$85 }
	$1 = CALL $19(($28 + [24]), $11)
	
.LABEL $label$85
	CALL eosio_assert([1], [288])
	CALL eosio_assert([1], [208])
	$11 = CALL db_next_i64(*(($7 + [48])), ($28 + [8]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$86 }
	CALL $19(($28 + [24]), $11)
	
.LABEL $label$86
	CALL $21(($28 + [24]), $7)
	$11 = ((int_32)$4 < (int_32)[10])
	$7 = $1
	$1 = ($4 + [1])
	$4 = $1
	if ( $11 ){ goto $label$69 }
	$22 = [0]
	$4 = $1
	$7 = *($14)
	if ( $7 ){ goto $label$67 }
	goto $label$60 
	
.LABEL $label$68
	$22 = [1]
	$7 = *($14)
	if ( ($7 == 0) ){ goto $label$60 }
	
.LABEL $label$67
	$1 = *($2)
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$87 }
	$1 = $7
	goto $label$61 
	
.LABEL $label$87
	
.LOOP $label$88:
	$1 = ($1 + [-24])
	$11 = *($1)
	*($1) = [0]
	if ( ($11 == 0) ){ goto $label$89 }
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$90 }
	CALL $91(*(($11 + [40])))
	
.LABEL $label$90
	CALL $91($11)
	
.LABEL $label$89
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$88 }
	goto $label$62 
	
.LABEL $label$64
	CALL eosio_assert([0], [432])
	$7 = *($28 + [88])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$63
	CALL $92(($28 + [304]))
	
.LABEL $label$62
	$1 = *($14)
	
.LABEL $label$61
	*($2) = $7
	CALL $91($1)
	
.LABEL $label$60
	if ( ($22 == 0) ){ goto $label$10 }
	CALL eosio_assert([1], [208])
	$1 = CALL db_next_i64(*($12 + [68]), ($28 + [24]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$48 }
	$12 = CALL $17(($28 + [64]), $1)
	goto $label$49 
	
.LABEL $label$48
	if ( (int_64)(*($28 + [104]) == 0) ){ goto $label$91 }
	$25 = *($0)
	*($28 + [28]) = ($28 + [104])
	*($28 + [24]) = ($28 + [296])
	CALL $23(($28 + [8]), ($0 + [88]), $25, ($28 + [24]))
	
.LABEL $label$91
	if ( (int_64)(*(($28 + [168])) == 0) ){ goto $label$92 }
	$25 = *($0)
	*($28 + [28]) = ($28 + [104])
	*($28 + [24]) = ($28 + [296])
	CALL $24(($28 + [8]), ($0 + [88]), $25, ($28 + [24]))
	
.LABEL $label$92
	if ( (int_64)(*(($28 + [232])) == 0) ){ goto $label$93 }
	$25 = *($0)
	*($28 + [28]) = ($28 + [104])
	*($28 + [24]) = ($28 + [296])
	CALL $25(($28 + [8]), ($0 + [88]), $25, ($28 + [24]))
	
.LABEL $label$93
	$1 = CALL db_lowerbound_i64(*($28 + [64]), *(($28 + [72])), (int_64)-6150066282206068736, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$10 }
	$1 = CALL $17(($28 + [64]), $1)
	
.LOOP $label$94:
	CALL eosio_assert([1], [208])
	$11 = [0]
	$7 = CALL db_next_i64(*($1 + [68]), ($28 + [24]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$95 }
	$11 = CALL $17(($28 + [64]), $7)
	
.LABEL $label$95
	$7 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($7, [288])
	CALL eosio_assert($7, [208])
	$7 = CALL db_next_i64(*(($1 + [68])), ($28 + [24]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$96 }
	CALL $17(($28 + [64]), $7)
	
.LABEL $label$96
	CALL $22(($28 + [64]), $1)
	$1 = $11
	if ( $11 ){ goto $label$94 }
	
.LABEL $label$10
	$7 = *($28 + [88])
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$4 = ($28 + [92])
	$11 = *($4)
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$98 }
	
.LOOP $label$99:
	$11 = ($11 + [-24])
	$1 = *($11)
	*($11) = [0]
	if ( ($1 == 0) ){ goto $label$100 }
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$101 }
	CALL $91(*(($1 + [60])))
	
.LABEL $label$101
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$102 }
	CALL $91(*(($1 + [48])))
	
.LABEL $label$102
	CALL $91($1)
	
.LABEL $label$100
	if ( ((int_32)$7 != (int_32)$11) ){ goto $label$99 }
	$1 = *(($28 + [88]))
	goto $label$97 
	
.LABEL $label$98
	$1 = $7
	
.LABEL $label$97
	*($4) = $7
	CALL $91($1)
	
.LABEL $label$8
	if ( ((*(($28 + [284])) & [1]) == 0) ){ goto $label$103 }
	CALL $91(*(($28 + [292])))
	
.LABEL $label$103
	if ( ((*(($28 + [272])) & [1]) == 0) ){ goto $label$104 }
	CALL $91(*(($28 + [280])))
	
.LABEL $label$104
	if ( ((*(($28 + [220])) & [1]) == 0) ){ goto $label$105 }
	CALL $91(*(($28 + [228])))
	
.LABEL $label$105
	if ( ((*(($28 + [208])) & [1]) == 0) ){ goto $label$106 }
	CALL $91(*(($28 + [216])))
	
.LABEL $label$106
	if ( ((*($28 + [156]) & [1]) == 0) ){ goto $label$107 }
	CALL $91(*(($28 + [164])))
	
.LABEL $label$107
	if ( ((*($28 + [144]) & [1]) == 0) ){ goto $label$108 }
	CALL $91(*(($28 + [152])))
	
.LABEL $label$108
	*([0] + [4]) = ($28 + [320])
	return (unreachable)
	
.LABEL $label$7
	CALL $92(($28 + [8]))
	
.LABEL $label$6
	CALL $92(($28 + [8]))
	(unreachable)
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$2 = *($0)
	CALL $76(*($0 + [4]), $1)
	$5 = *($1 + [40])
	$3 = ( *(($1 + [44])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [40])
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$3 = *($1 + [52])
	$3 = ( *(($1 + [56])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $5)
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $73($7, $1)
	$4 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($2 + [8]), (int_64)-6150066282206068736, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($0 + [32])
	$4 = ($1 + [32])
	CALL eosio_assert(((int_64)*($4) == (int_64)*($3)), [912])
	$2 = ($1 + [24])
	if ( ((int_64)*($1 + [24]) <= (int_64)*($0 + [24])) ){ goto $label$1 }
	$4 = ($0 + [64])
	*($0 + [128]) = *($4)
	$5 = ($0 + [72])
	*(($0 + [136])) = *($5)
	*(($0 + [148])) = *(($0 + [84]))
	$6 = ($0 + [80])
	*(($0 + [144])) = *($6)
	$7 = ($0 + [96])
	*(($0 + [160])) = *($7)
	$8 = ($0 + [88])
	*(($0 + [152])) = *($8)
	$9 = ($0 + [104])
	CALL $93(($0 + [168]), $9)
	$10 = ($0 + [116])
	CALL $93(($0 + [180]), $10)
	*($4) = *($0)
	$4 = ($0 + [16])
	*($6) = *($4)
	*($5) = *($0 + [8])
	*($7) = *($3)
	*($8) = *($0 + [24])
	$5 = ($0 + [40])
	CALL $93($9, $5)
	$6 = ($0 + [52])
	CALL $93($10, $6)
	*($0) = *($1)
	*($4) = *(($1 + [16]))
	*($0 + [8]) = *($1 + [8])
	*($0 + [24]) = *($2)
	*($3) = *(($2 + [8]))
	CALL $93($5, ($1 + [40]))
	CALL $93($6, ($1 + [52]))
	return 
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($4) == (int_64)*(($0 + [96]))), [912])
	if ( ((int_64)*($2) <= (int_64)*(($0 + [88]))) ){ goto $label$3 }
	CALL eosio_assert(((int_64)*(($1 + [32])) == (int_64)*(($0 + [32]))), [912])
	if ( ((int_64)*(($1 + [24])) <= (int_64)*(($0 + [24]))) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = ($1 + [32])
	CALL eosio_assert(((int_64)*($3) == (int_64)*(($0 + [160]))), [912])
	$4 = ($1 + [24])
	if ( ((int_64)*($4) <= (int_64)*(($0 + [152]))) ){ goto $label$4 }
	CALL eosio_assert(((int_64)*($3) == (int_64)*(($0 + [96]))), [912])
	if ( ((int_64)*($4) > (int_64)*(($0 + [88]))) ){ goto $label$4 }
	*($0 + [128]) = *($1)
	*(($0 + [144])) = *(($1 + [16]))
	*(($0 + [136])) = *($1 + [8])
	*(($0 + [152])) = *($2)
	*(($0 + [160])) = *(($2 + [8]))
	CALL $93(($0 + [168]), ($1 + [40]))
	CALL $93(($0 + [180]), ($1 + [52]))
	
.LABEL $label$4
	return 
	
.LABEL $label$2
	$3 = ($0 + [64])
	*($0 + [128]) = *($3)
	$4 = ($0 + [72])
	*(($0 + [136])) = *($4)
	*(($0 + [148])) = *(($0 + [84]))
	$5 = ($0 + [80])
	*(($0 + [144])) = *($5)
	$6 = ($0 + [96])
	*(($0 + [160])) = *($6)
	$7 = ($0 + [88])
	*(($0 + [152])) = *($7)
	$8 = ($0 + [104])
	CALL $93(($0 + [168]), $8)
	$0 = ($0 + [116])
	CALL $93(($0 + [180]), $0)
	*($3) = *($1)
	*($5) = *(($1 + [16]))
	*($4) = *($1 + [8])
	*($7) = *($2)
	*($6) = *(($2 + [8]))
	CALL $93($8, ($1 + [40]))
	CALL $93($0, ($1 + [52]))
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [848])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $90([56])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [496])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [400])
	*($4 + [40]) = [0]
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [44]) = $0
	CALL $38(($8 + [32]), $4)
	*($4 + [48]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [48])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $39($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$15 }
	CALL $91(*(($5 + [40])))
	
.LABEL $label$15
	CALL $91($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [32])
	$9 = $8
	*([0] + [4]) = $8
	$7 = *($0 + [4])
	*($1) = ((int_64)((int_64)*(*($7)) * (int_64)86400) | (int_64)1)
	*($1 + [8]) = *(*($7 + [4]) + [48])
	$2 = *($0)
	$3 = *($7 + [4])
	*(($1 + [24])) = *(($3 + [64]))
	*($1 + [16]) = *(($3 + [56]))
	CALL $93(($1 + [32]), (*($7 + [4]) + [72]))
	CALL $93(($1 + [44]), (*($7 + [4]) + [84]))
	$7 = *($1 + [32])
	$3 = ( *(($1 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($3 + [32])
	$6 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$3 = *(($1 + [44]))
	$3 = ( *(($1 + [48])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$7 = ($3 + $7)
	$6 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [12]) = $8
	*($9 + [8]) = $8
	*($9 + [16]) = ($8 + $7)
	CALL $57(($9 + [8]), $1)
	$6 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)6604081033807659008, *(*($0 + [8])), $6, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$6 = *(($2 + [8]))
	$4 = *(*(($0 + [8])))
	$5 = *($1)
	*($9 + [24]) = *(($1 + [8]))
	*($1 + [64]) = CALL db_idx64_store($6, (int_64)6604081033807659008, $4, $5, ($9 + [24]))
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [32])
	$9 = $8
	*([0] + [4]) = $8
	$7 = *($0 + [4])
	*($1) = ((int_64)*(*($7)) * (int_64)86400)
	*($1 + [8]) = *(*($7 + [4]))
	$2 = *($0)
	$3 = *($7 + [4])
	*($1 + [16]) = *($3 + [8])
	*(($1 + [24])) = *(($3 + [16]))
	CALL $93(($1 + [32]), (*($7 + [4]) + [24]))
	CALL $93(($1 + [44]), (*($7 + [4]) + [36]))
	$7 = *($1 + [32])
	$3 = ( *(($1 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($3 + [32])
	$6 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$3 = *(($1 + [44]))
	$3 = ( *(($1 + [48])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$7 = ($3 + $7)
	$6 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [12]) = $8
	*($9 + [8]) = $8
	*($9 + [16]) = ($8 + $7)
	CALL $57(($9 + [8]), $1)
	$6 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)6604081033807659008, *(*($0 + [8])), $6, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$6 = *(($2 + [8]))
	$4 = *(*(($0 + [8])))
	$5 = *($1)
	*($9 + [24]) = *(($1 + [8]))
	*($1 + [64]) = CALL db_idx64_store($6, (int_64)6604081033807659008, $4, $5, ($9 + [24]))
	*([0] + [4]) = ($9 + [32])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [848])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $90([40])) + [24]) = [0]
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [28]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [880])
	CALL memcpy($6, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($7 - $3) > (uint_32)[7]), [880])
	CALL memcpy(($6 + [8]), $3, [8])
	*($8 + [36]) = ($4 + [16])
	CALL $40(($8 + [32]), ($6 + [16]))
	*($6 + [32]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [32])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $60(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL $91(*(($4 + [24])))
	
.LABEL $label$10
	CALL $91($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [640])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [688])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [752])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $91(*(($4 + [24])))
	
.LABEL $label$7
	CALL $91($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL $91(*(($4 + [24])))
	
.LABEL $label$10
	CALL $91($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [32]))
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $90([72])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [496])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [400])
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48 align=4]) = (int_64)0
	*($4 + [56]) = $1
	CALL $59(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [60])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $56(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$9 }
	CALL $91(*(($3 + [52])))
	
.LABEL $label$9
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $91(*(($3 + [40])))
	
.LABEL $label$10
	CALL $91($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $90([72])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [496])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [400])
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48 align=4]) = (int_64)0
	*($4 + [56]) = $1
	CALL $58(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [60])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $56(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$9 }
	CALL $91(*(($3 + [52])))
	
.LABEL $label$9
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $91(*(($3 + [40])))
	
.LABEL $label$10
	CALL $91($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $90([72])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [496])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [400])
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48 align=4]) = (int_64)0
	*($4 + [56]) = $1
	CALL $55(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [60])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $56(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$9 }
	CALL $91(*(($3 + [52])))
	
.LABEL $label$9
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $91(*(($3 + [40])))
	
.LABEL $label$10
	CALL $91($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $30(*($1), ($0 + [32]))
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $90(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$11 }
	CALL $91(*(($1 + [52])))
	
.LABEL $label$11
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $91(*(($1 + [40])))
	
.LABEL $label$12
	CALL $91($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $91($6)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $30(CALL $30($0, ($1 + [32])), ($1 + [44]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $33($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [624])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [624])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $37(CALL $36($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $30(CALL $30($0, ($1 + [48])), ($1 + [60]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $90(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [60]) & [1]) == 0) ){ goto $label$11 }
	CALL $91(*(($1 + [68])))
	
.LABEL $label$11
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$12 }
	CALL $91(*(($1 + [56])))
	
.LABEL $label$12
	CALL $91($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $91($6)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [32])
	$9 = $8
	*([0] + [4]) = $8
	$7 = *($0 + [4])
	*($1) = ((int_64)((int_64)*(*($7)) * (int_64)86400) | (int_64)2)
	$2 = *($0)
	$3 = *($7 + [4])
	*(($1 + [24])) = *(($3 + [112]))
	*($1 + [16]) = *(($3 + [104]))
	*($1 + [8]) = *(*($7 + [4]) + [96])
	CALL $93(($1 + [32]), (*($7 + [4]) + [120]))
	CALL $93(($1 + [44]), (*($7 + [4]) + [132]))
	$7 = *($1 + [32])
	$3 = ( *(($1 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($3 + [32])
	$6 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$3 = *(($1 + [44]))
	$3 = ( *(($1 + [48])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$7 = ($3 + $7)
	$6 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [12]) = $8
	*($9 + [8]) = $8
	*($9 + [16]) = ($8 + $7)
	CALL $57(($9 + [8]), $1)
	$6 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)6604081033807659008, *(*($0 + [8])), $6, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$6 = *(($2 + [8]))
	$4 = *(*(($0 + [8])))
	$5 = *($1)
	*($9 + [24]) = *(($1 + [8]))
	*($1 + [64]) = CALL db_idx64_store($6, (int_64)6604081033807659008, $4, $5, ($9 + [24]))
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [640])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [688])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [752])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $91(*(($4 + [40])))
	
.LABEL $label$7
	CALL $91($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $91(*(($4 + [40])))
	
.LABEL $label$10
	CALL $91($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
}

void .FUNC $20 (int_64 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [816]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [832]
	$11 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$12 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$7 }
	*((($12 + [8]) + [28])) = *(($3 + [12]))
	*((($12 + [8]) + [24])) = *(($3 + [8]))
	*((($12 + [8]) + [20])) = *(($3 + [4]))
	*($12 + [16]) = $1
	*($12 + [8]) = $0
	*($12 + [24]) = *($3)
	CALL $99((($12 + [8]) + [32]), $4)
	*($12 + [64]) = $11
	*($12 + [56]) = $2
	*(($6 = CALL $90([16]))) = $0
	*($6 + [8]) = $9
	*((($12 + [56]) + [32])) = [0]
	$5 = ($6 + [16])
	*((($12 + [56]) + [24])) = $5
	*((($12 + [56]) + [20])) = $5
	*($12 + [72]) = $6
	*($12 + [84]) = [0]
	*((($12 + [56]) + [36])) = [0]
	$6 = *($12 + [40])
	$5 = ( *((($12 + [8]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [32])
	$8 = (CASTING uint_64)(uint_32 $5)
	$5 = (($12 + [56]) + [28])
	
.LOOP $label$13:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$13 }
	if ( ($6 == 0) ){ goto $label$15 }
	CALL $33($5, $6)
	$5 = *(($12 + [88]))
	$6 = *(($12 + [84]))
	goto $label$14 
	
.LABEL $label$15
	$5 = [0]
	$6 = [0]
	
.LABEL $label$14
	*($12 + [116]) = $6
	*($12 + [112]) = $6
	*($12 + [120]) = $5
	*($12 + [96]) = ($12 + [112])
	*($12 + [104]) = ($12 + [8])
	CALL $34(($12 + [104]), ($12 + [96]))
	CALL $35(($12 + [112]), ($12 + [56]))
	$6 = *($12 + [112])
	CALL send_inline($6, (*($12 + [116]) - $6))
	$6 = *($12 + [112])
	if ( ($6 == 0) ){ goto $label$16 }
	*($12 + [116]) = $6
	CALL $91($6)
	
.LABEL $label$16
	$6 = *($12 + [84])
	if ( ($6 == 0) ){ goto $label$17 }
	*(($12 + [88])) = $6
	CALL $91($6)
	
.LABEL $label$17
	$6 = *($12 + [72])
	if ( ($6 == 0) ){ goto $label$18 }
	*(($12 + [76])) = $6
	CALL $91($6)
	
.LABEL $label$18
	if ( ((*($12 + [40]) & [1]) == 0) ){ goto $label$19 }
	CALL $91(*(($12 + [48])))
	
.LABEL $label$19
	*([0] + [4]) = ($12 + [128])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $90([88])
	CALL $26($3)
	*($3 + [72]) = $1
	CALL $32(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [76])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $28(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [60]) & [1]) == 0) ){ goto $label$4 }
	CALL $91(*(($1 + [68])))
	
.LABEL $label$4
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $91(*(($1 + [56])))
	
.LABEL $label$5
	CALL $91($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [640])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [688])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [752])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [52]) & [1]) == 0) ){ goto $label$7 }
	CALL $91(*(($4 + [60])))
	
.LABEL $label$7
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$8 }
	CALL $91(*(($4 + [48])))
	
.LABEL $label$8
	CALL $91($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [52]) & [1]) == 0) ){ goto $label$11 }
	CALL $91(*(($4 + [60])))
	
.LABEL $label$11
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$12 }
	CALL $91(*(($4 + [48])))
	
.LABEL $label$12
	CALL $91($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $90([88])
	CALL $26($3)
	*($3 + [72]) = $1
	CALL $27(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [76])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $28(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [60]) & [1]) == 0) ){ goto $label$4 }
	CALL $91(*(($1 + [68])))
	
.LABEL $label$4
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $91(*(($1 + [56])))
	
.LABEL $label$5
	CALL $91($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $90([88])
	CALL $26($3)
	*($3 + [72]) = $1
	CALL $31(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [76])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $28(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [60]) & [1]) == 0) ){ goto $label$4 }
	CALL $91(*(($1 + [68])))
	
.LABEL $label$4
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $91(*(($1 + [56])))
	
.LABEL $label$5
	CALL $91($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$5 = *($0 + [4])
	*($1) = ((int_64)((int_64)*(*($5)) * (int_64)86400) | (int_64)2)
	$2 = *($0)
	$3 = *($5 + [4])
	*(($1 + [16])) = *(($3 + [144]))
	*($1 + [8]) = *(($3 + [136]))
	$3 = *($5 + [4])
	*(($1 + [32])) = *(($3 + [160]))
	*($1 + [24]) = *(($3 + [152]))
	*($1 + [40]) = *(*($5 + [4]) + [128])
	CALL $93(($1 + [48]), (*($5 + [4]) + [168]))
	CALL $93(($1 + [60]), (*($5 + [4]) + [180]))
	$5 = *($1 + [48])
	$3 = ( *(($1 + [52])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [48])
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$3 = *(($1 + [60]))
	$3 = ( *(($1 + [64])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $5)
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $29($7, $1)
	$4 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($2 + [8]), (int_64)6604080915964493824, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $26 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [400])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [400])
	*($0 + [48 align=4]) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = (int_64)0
	return $0
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1712])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*(($3 + [24])) == (int_64)*(($1 + [32]))), [1776])
	$6 = ((int_64)*($1 + [24]) + (int_64)*($3 + [16]))
	*($1 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1824])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1856])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1888])
	$3 = *($1 + [40])
	$5 = ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [40])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [52])
	$5 = ( *(($1 + [56])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = ($5 + $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $3)
	CALL $73($8, $1)
	CALL db_update_i64(*($1 + [68]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [112])
	*([0] + [4]) = $17
	$12 = CALL current_time()
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)1413695492), [1648])
	$6 = ((uint_64)$12 / (uint_64)(int_64)86400000000)
	$10 = [0]
	$12 = *($1 + [16])
	if ( ((int_64)$12 < (int_64)10000) ){ goto $label$1 }
	$10 = ((int_64)$12 <= (int_64)*(*($2 + [4]) + [48]))
	
.LABEL $label$1
	CALL eosio_assert($10, [1424])
	$4 = ( *($4 + [8]) ? ($4 + [1]) : (*($4) & [1]) )
	$10 = [-1]
	
.LOOP $label$2:
	$2 = ($4 + $10)
	$7 = ($10 + [1])
	$10 = $7
	if ( *(($2 + [1])) ){ goto $label$2 }
	$8 = (CASTING uint_64)(uint_32 $7)
	$12 = (int_64)0
	$11 = (int_64)59
	$13 = (int_64)0
	
.LOOP $label$3:
	$14 = (int_64)0
	if ( ((uint_64)$12 >= (uint_64)$8) ){ goto $label$4 }
	$10 = *($4)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$10 = ($10 + [165])
	goto $label$5 
	
.LABEL $label$6
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$8 }
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	goto $label$7 
	
.LABEL $label$8
	$14 = ((int_64)$14 & (int_64)15)
	
.LABEL $label$7
	$4 = ($4 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$3 }
	*($17 + [104]) = $13
	*((($17 + [64]) + [32])) = [0]
	*($17 + [80]) = (int_64)-1
	*($17 + [88]) = (int_64)0
	$12 = *($0)
	*($17 + [64]) = $12
	*($17 + [72]) = $6
	*((($17 + [24]) + [32])) = [0]
	*($17 + [32]) = $13
	*($17 + [24]) = $12
	*($17 + [40]) = (int_64)-1
	*($17 + [48]) = (int_64)0
	$4 = CALL db_find_i64($12, $6, (int_64)-6150066282206068736, $13)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$10 }
	$16 = CALL $17(($17 + [64]), $4)
	CALL eosio_assert(((int_32)*($16 + [64]) == (int_32)($17 + [64])), [1472])
	$15 = *(($17 + [48]))
	$2 = *(($17 + [52]))
	goto $label$9 
	
.LABEL $label$10
	$15 = [0]
	$2 = [0]
	$16 = [0]
	
.LABEL $label$9
	$9 = ((int_32)$16 != (int_32)[0])
	CALL eosio_assert($9, [1536])
	$12 = *($1)
	if ( ((int_32)$2 == (int_32)$15) ){ goto $label$11 }
	$4 = ($2 + [-24])
	$7 = ([0] - $15)
	
.LOOP $label$12:
	if ( ((int_64)*(*($4)) == (int_64)$12) ){ goto $label$11 }
	$2 = $4
	$10 = ($4 + [-24])
	$4 = $10
	if ( ((int_32)($10 + $7) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$2 == (int_32)$15) ){ goto $label$14 }
	$4 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)($17 + [24])), [1472])
	goto $label$13 
	
.LABEL $label$14
	$4 = [0]
	$10 = CALL db_find_i64(*($17 + [24]), *(($17 + [32])), (int_64)-2507762491384135680, $12)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL $19(($17 + [24]), $10)
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)($17 + [24])), [1472])
	
.LABEL $label$13
	CALL eosio_assert(($4 == 0), [1568])
	*($17 + [8]) = $1
	CALL eosio_assert($9, [1600])
	CALL $69(($17 + [64]), $16, (int_64)0, ($17 + [8]))
	$12 = *($0)
	*($17 + [8]) = $1
	*($17 + [16]) = $5
	*($17 + [12]) = ($17 + [104])
	CALL $70($17, ($17 + [24]), $12, ($17 + [8]))
	$2 = *($17 + [48])
	if ( ($2 == 0) ){ goto $label$15 }
	$7 = ($17 + [52])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$10 = *($4)
	*($4) = [0]
	if ( ($10 == 0) ){ goto $label$19 }
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$20 }
	CALL $91(*(($10 + [40])))
	
.LABEL $label$20
	CALL $91($10)
	
.LABEL $label$19
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$18 }
	$4 = *(($17 + [48]))
	goto $label$16 
	
.LABEL $label$17
	$4 = $2
	
.LABEL $label$16
	*($7) = $2
	CALL $91($4)
	
.LABEL $label$15
	$2 = *($17 + [88])
	if ( ($2 == 0) ){ goto $label$21 }
	$7 = ($17 + [92])
	$10 = *($7)
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$23 }
	
.LOOP $label$24:
	$10 = ($10 + [-24])
	$4 = *($10)
	*($10) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	if ( ((*($4 + [52]) & [1]) == 0) ){ goto $label$26 }
	CALL $91(*(($4 + [60])))
	
.LABEL $label$26
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$27 }
	CALL $91(*(($4 + [48])))
	
.LABEL $label$27
	CALL $91($4)
	
.LABEL $label$25
	if ( ((int_32)$2 != (int_32)$10) ){ goto $label$24 }
	$4 = *(($17 + [88]))
	goto $label$22 
	
.LABEL $label$23
	$4 = $2
	
.LABEL $label$22
	*($7) = $2
	CALL $91($4)
	
.LABEL $label$21
	*([0] + [4]) = ($17 + [112])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	$11 = CALL current_time()
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)1397703940), [1952])
	CALL eosio_assert(((int_64)*($1 + [16]) == (int_64)*(*($2 + [4]) + [24])), [2208])
	$2 = *($5)
	CALL eosio_assert(((uint_32)( *($5 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ) > (uint_32)[31]), [2000])
	*(($12 + [56])) = [0]
	*($12 + [32]) = ((uint_64)$11 / (uint_64)(int_64)86400000000)
	*($12 + [40]) = (int_64)-1
	$11 = (int_64)0
	*($12 + [48]) = (int_64)0
	$8 = *($0)
	*($12 + [24]) = $8
	*($12 + [12]) = $4
	*($12 + [8]) = $1
	*($12 + [16]) = $5
	CALL $81(($12 + [64]), ($12 + [24]), $8, ($12 + [8]))
	$7 = *($1)
	$6 = *($0)
	$8 = (int_64)59
	$5 = [240]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	*($12 + [16]) = (int_64)1413695492
	*($12 + [8]) = (int_64)20000
	CALL eosio_assert([1], [496])
	$11 = (uint_64)*($12 + [16]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$4 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$4 = [0]
	
.LABEL $label$5
	CALL eosio_assert($4, [400])
	*(($12 + [72])) = [0]
	*($12 + [64]) = (int_64)0
	$5 = CALL strlen([2176])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$14 }
	*($12 + [64]) = ($5 << [1])
	$4 = (($12 + [64]) | [1])
	if ( $5 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$2 = (($5 + [16]) & [-16])
	$4 = CALL $90($2)
	*($12 + [64]) = ($2 | [1])
	*($12 + [72]) = $4
	*($12 + [68]) = $5
	
.LABEL $label$13
	CALL memcpy($4, [2176], $5)
	
.LABEL $label$12
	*(($4 + $5)) = [0]
	CALL $20($6, $7, $9, ($12 + [8]), ($12 + [64]))
	if ( ((*($12 + [64]) & [1]) == 0) ){ goto $label$15 }
	CALL $91(*($12 + [72]))
	
.LABEL $label$15
	$5 = *($3)
	$4 = CALL strlen([2096])
	if ( ((int_32)$4 != (int_32)( *($3 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$17 }
	if ( (CALL $97($3, [0], [-1], [2096], $4) == 0) ){ goto $label$16 }
	$5 = *($3)
	
.LABEL $label$17
	$4 = ( *($3 + [8]) ? ($3 + [1]) : ($5 & [1]) )
	$5 = [-1]
	
.LOOP $label$18:
	$3 = ($4 + $5)
	$2 = ($5 + [1])
	$5 = $2
	if ( *(($3 + [1])) ){ goto $label$18 }
	$7 = (CASTING uint_64)(uint_32 $2)
	$11 = (int_64)0
	$8 = (int_64)59
	$5 = $4
	$9 = (int_64)0
	
.LOOP $label$19:
	$10 = (int_64)0
	if ( ((uint_64)$11 >= (uint_64)$7) ){ goto $label$20 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$3 = ($3 + [165])
	goto $label$21 
	
.LABEL $label$22
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$24 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$23 
	
.LABEL $label$24
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$23
	$5 = ($5 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$19 }
	if ( ((int_64)$9 == (int_64)*($1)) ){ goto $label$16 }
	$5 = [-1]
	
.LOOP $label$25:
	$3 = ($4 + $5)
	$2 = ($5 + [1])
	$5 = $2
	if ( *(($3 + [1])) ){ goto $label$25 }
	$7 = (CASTING uint_64)(uint_32 $2)
	$11 = (int_64)0
	$8 = (int_64)59
	$9 = (int_64)0
	
.LOOP $label$26:
	$10 = (int_64)0
	if ( ((uint_64)$11 >= (uint_64)$7) ){ goto $label$27 }
	$5 = *($4)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$5 = ($5 + [165])
	goto $label$28 
	
.LABEL $label$29
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$31 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$30 
	
.LABEL $label$31
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$30
	$4 = ($4 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$26 }
	if ( (CALL is_account($9) == 0) ){ goto $label$16 }
	$6 = *($0)
	$11 = (int_64)0
	$8 = (int_64)59
	$5 = [240]
	$7 = (int_64)0
	
.LOOP $label$32:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$33 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$4 = ($4 + [165])
	goto $label$34 
	
.LABEL $label$35
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$33
	$5 = ($5 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$7 = ((int_64)$10 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$32 }
	*($12 + [16]) = (int_64)1413695492
	*($12 + [8]) = (int_64)2000
	CALL eosio_assert([1], [496])
	$11 = (int_64)5522248
	$5 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	
.LOOP $label$40:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	$4 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$4 = [0]
	
.LABEL $label$36
	CALL eosio_assert($4, [400])
	*(($12 + [72])) = [0]
	*($12 + [64]) = (int_64)0
	$5 = CALL strlen([2112])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$43 }
	*($12 + [64]) = ($5 << [1])
	$4 = (($12 + [64]) | [1])
	if ( $5 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	$3 = (($5 + [16]) & [-16])
	$4 = CALL $90($3)
	*($12 + [64]) = ($3 | [1])
	*($12 + [72]) = $4
	*($12 + [68]) = $5
	
.LABEL $label$42
	CALL memcpy($4, [2112], $5)
	
.LABEL $label$41
	*(($4 + $5)) = [0]
	CALL $20($6, $9, $7, ($12 + [8]), ($12 + [64]))
	if ( ((*($12 + [64]) & [1]) == 0) ){ goto $label$16 }
	CALL $91(*($12 + [72]))
	
.LABEL $label$16
	$3 = *($12 + [48])
	if ( ($3 == 0) ){ goto $label$44 }
	$2 = ($12 + [52])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$46 }
	
.LOOP $label$47:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$48 }
	if ( ((*($5 + [36]) & [1]) == 0) ){ goto $label$49 }
	CALL $91(*(($5 + [44])))
	
.LABEL $label$49
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$50 }
	CALL $91(*(($5 + [32])))
	
.LABEL $label$50
	CALL $91($5)
	
.LABEL $label$48
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$47 }
	$5 = *(($12 + [48]))
	goto $label$45 
	
.LABEL $label$46
	$5 = $3
	
.LABEL $label$45
	*($2) = $3
	CALL $91($5)
	
.LABEL $label$44
	*([0] + [4]) = ($12 + [80])
	return (unreachable)
	
.LABEL $label$11
	CALL $92(($12 + [64]))
	
.LABEL $label$10
	CALL $92(($12 + [64]))
	(unreachable)
}

int_32 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = ($6 & [1])
	$6 = *($0)
	$5 = ( *($0 + [4]) ? uint_32($6 >> [1]) : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	$1 = ($0 + [1])
	$2 = ( *($0 + [8]) ? $1 : $6 )
	$6 = $2
	$3 = CALL strlen([2240])
	if ( ($3 == 0) ){ goto $label$3 }
	$6 = $2
	
.LOOP $label$4:
	if ( (CALL memchr([2240], *($6), $3) == 0) ){ goto $label$3 }
	$4 = [-1]
	$6 = ($6 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = ($6 - $2)
	
.LABEL $label$2
	$5 = [0]
	CALL $96($0, [0], $4)
	$4 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $4 )
	$4 = ( *(($0 + [8])) ? $1 : $4 )
	$3 = CALL strlen([2240])
	if ( ($3 == 0) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( ($6 == 0) ){ goto $label$6 }
	$5 = ($4 + $6)
	$6 = ($6 + [-1])
	if ( CALL memchr([2240], *(($5 + [-1])), $3) ){ goto $label$9 }
	$6 = ($4 + $6)
	goto $label$7 
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$5 }
	$6 = (($4 + $6) + [-1])
	
.LABEL $label$7
	$5 = (([1] - $4) + $6)
	goto $label$5 
	
.LABEL $label$6
	$5 = [0]
	
.LABEL $label$5
	CALL $96($0, $5, [-1])
	
.LABEL $label$1
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)1397703940), [1952])
	CALL eosio_assert(((int_64)*($1 + [16]) >= (int_64)*(*($2 + [4]) + [40])), [1968])
	$2 = *($5)
	CALL eosio_assert(((uint_32)( *($5 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ) > (uint_32)[31]), [2000])
	$6 = CALL current_time()
	*(($7 + [56])) = [0]
	*($7 + [32]) = ((uint_64)$6 / (uint_64)(int_64)86400000000)
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$6 = *($0)
	*($7 + [24]) = $6
	*($7 + [12]) = $4
	*($7 + [8]) = $1
	*($7 + [16]) = $5
	CALL $74($7, ($7 + [24]), $6, ($7 + [8]))
	$4 = *($7 + [48])
	if ( ($4 == 0) ){ goto $label$1 }
	$0 = ($7 + [52])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	if ( ((*($5 + [52]) & [1]) == 0) ){ goto $label$6 }
	CALL $91(*(($5 + [60])))
	
.LABEL $label$6
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL $91(*(($5 + [48])))
	
.LABEL $label$7
	CALL $91($5)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$4 }
	$5 = *(($7 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $4
	
.LABEL $label$2
	*($0) = $4
	CALL $91($5)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [128])
	*([0] + [4]) = $17
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)1397703940), [1952])
	CALL eosio_assert(((int_64)*($1 + [16]) == (int_64)*(*($2 + [4]) + [32])), [2144])
	$4 = ( *($4 + [8]) ? ($4 + [1]) : (*($4) & [1]) )
	$2 = [-1]
	
.LOOP $label$1:
	$11 = ($4 + $2)
	$6 = ($2 + [1])
	$2 = $6
	if ( *(($11 + [1])) ){ goto $label$1 }
	$7 = (CASTING uint_64)(uint_32 $6)
	$13 = (int_64)0
	$12 = (int_64)59
	$14 = (int_64)0
	
.LOOP $label$2:
	$15 = (int_64)0
	if ( ((uint_64)$13 >= (uint_64)$7) ){ goto $label$3 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$7 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	goto $label$6 
	
.LABEL $label$7
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$6
	$4 = ($4 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$2 }
	*($17 + [104]) = $14
	$13 = CALL current_time()
	*((($17 + [64]) + [32])) = [0]
	$13 = ((uint_64)$13 / (uint_64)(int_64)86400000000)
	*($17 + [72]) = $13
	*($17 + [80]) = (int_64)-1
	*($17 + [88]) = (int_64)0
	$12 = *($0)
	*($17 + [64]) = $12
	*((($17 + [24]) + [32])) = [0]
	*($17 + [32]) = $13
	*($17 + [24]) = $12
	*($17 + [40]) = (int_64)-1
	*($17 + [48]) = (int_64)0
	$16 = [0]
	$4 = CALL db_find_i64($12, $13, (int_64)-6150062511224782848, $14)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$16 = CALL $47(($17 + [64]), $4)
	CALL eosio_assert(((int_32)*($16 + [48]) == (int_32)($17 + [64])), [1472])
	
.LABEL $label$8
	$8 = ((int_32)$16 != (int_32)[0])
	CALL eosio_assert($8, [2032])
	$13 = *($1)
	$9 = *(($17 + [48]))
	$11 = *(($17 + [52]))
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$9 }
	$4 = ($11 + [-24])
	$6 = ([0] - $9)
	
.LOOP $label$10:
	if ( ((int_64)*(*($4)) == (int_64)$13) ){ goto $label$9 }
	$11 = $4
	$2 = ($4 + [-24])
	$4 = $2
	if ( ((int_32)($2 + $6) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$12 }
	$4 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)($17 + [24])), [1472])
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	$2 = CALL db_find_i64(*($17 + [24]), *(($17 + [32])), (int_64)-2507758720402849792, $13)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$11 }
	$4 = CALL $50(($17 + [24]), $2)
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)($17 + [24])), [1472])
	
.LABEL $label$11
	CALL eosio_assert(($4 == 0), [1568])
	*($17 + [8]) = $1
	CALL eosio_assert($8, [1600])
	$13 = (int_64)0
	CALL $77(($17 + [64]), $16, (int_64)0, ($17 + [8]))
	$12 = *($0)
	*($17 + [8]) = $1
	*($17 + [16]) = $5
	*($17 + [12]) = ($17 + [104])
	CALL $78(($17 + [112]), ($17 + [24]), $12, ($17 + [8]))
	$7 = *($1)
	$10 = *($0)
	$12 = (int_64)59
	$4 = [240]
	$14 = (int_64)0
	
.LOOP $label$13:
	$15 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$14 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$2 = ($2 + [165])
	goto $label$15 
	
.LABEL $label$16
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$14
	$4 = ($4 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$13 }
	*($17 + [16]) = (int_64)1413695492
	*($17 + [8]) = (int_64)10000
	CALL eosio_assert([1], [496])
	$13 = (uint_64)*($17 + [16]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	
.LOOP $label$21:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$21 }
	
.LABEL $label$20
	$2 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$2 = [0]
	
.LABEL $label$17
	CALL eosio_assert($2, [400])
	*(($17 + [120])) = [0]
	*($17 + [112]) = (int_64)0
	$4 = CALL strlen([2064])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$26 }
	*($17 + [112]) = ($4 << [1])
	$2 = (($17 + [112]) | [1])
	if ( $4 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$11 = (($4 + [16]) & [-16])
	$2 = CALL $90($11)
	*($17 + [112]) = ($11 | [1])
	*($17 + [120]) = $2
	*($17 + [116]) = $4
	
.LABEL $label$25
	CALL memcpy($2, [2064], $4)
	
.LABEL $label$24
	*(($2 + $4)) = [0]
	CALL $20($10, $7, $14, ($17 + [8]), ($17 + [112]))
	if ( ((*($17 + [112]) & [1]) == 0) ){ goto $label$27 }
	CALL $91(*($17 + [120]))
	
.LABEL $label$27
	$4 = *($3)
	$2 = CALL strlen([2096])
	if ( ((int_32)$2 != (int_32)( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$29 }
	if ( (CALL $97($3, [0], [-1], [2096], $2) == 0) ){ goto $label$28 }
	$4 = *($3)
	
.LABEL $label$29
	$2 = ( *($3 + [8]) ? ($3 + [1]) : ($4 & [1]) )
	$4 = [-1]
	
.LOOP $label$30:
	$11 = ($2 + $4)
	$6 = ($4 + [1])
	$4 = $6
	if ( *(($11 + [1])) ){ goto $label$30 }
	$7 = (CASTING uint_64)(uint_32 $6)
	$13 = (int_64)0
	$12 = (int_64)59
	$4 = $2
	$14 = (int_64)0
	
.LOOP $label$31:
	$15 = (int_64)0
	if ( ((uint_64)$13 >= (uint_64)$7) ){ goto $label$32 }
	$11 = *($4)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$11 = ($11 + [165])
	goto $label$33 
	
.LABEL $label$34
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$36 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	goto $label$35 
	
.LABEL $label$36
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$35
	$4 = ($4 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$31 }
	if ( ((int_64)$14 == (int_64)*($1)) ){ goto $label$28 }
	$4 = [-1]
	
.LOOP $label$37:
	$11 = ($2 + $4)
	$6 = ($4 + [1])
	$4 = $6
	if ( *(($11 + [1])) ){ goto $label$37 }
	$7 = (CASTING uint_64)(uint_32 $6)
	$13 = (int_64)0
	$12 = (int_64)59
	$14 = (int_64)0
	
.LOOP $label$38:
	$15 = (int_64)0
	if ( ((uint_64)$13 >= (uint_64)$7) ){ goto $label$39 }
	$4 = *($2)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$4 = ($4 + [165])
	goto $label$40 
	
.LABEL $label$41
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$43 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	goto $label$42 
	
.LABEL $label$43
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$42
	$2 = ($2 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$38 }
	if ( (CALL is_account($14) == 0) ){ goto $label$28 }
	$10 = *($0)
	$13 = (int_64)0
	$12 = (int_64)59
	$4 = [240]
	$7 = (int_64)0
	
.LOOP $label$44:
	$15 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$45 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$2 = ($2 + [165])
	goto $label$46 
	
.LABEL $label$47
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$45
	$4 = ($4 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$7 = ((int_64)$15 | (int_64)$7)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$44 }
	*($17 + [16]) = (int_64)1413695492
	*($17 + [8]) = (int_64)1000
	CALL eosio_assert([1], [496])
	$13 = (int_64)5522248
	$4 = [0]
	
.LOOP $label$50:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$49 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$51 }
	
.LOOP $label$52:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$49 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$52 }
	
.LABEL $label$51
	$2 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$49
	$2 = [0]
	
.LABEL $label$48
	CALL eosio_assert($2, [400])
	*(($17 + [120])) = [0]
	*($17 + [112]) = (int_64)0
	$4 = CALL strlen([2112])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$22 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$55 }
	*($17 + [112]) = ($4 << [1])
	$2 = (($17 + [112]) | [1])
	if ( $4 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$11 = (($4 + [16]) & [-16])
	$2 = CALL $90($11)
	*($17 + [112]) = ($11 | [1])
	*($17 + [120]) = $2
	*($17 + [116]) = $4
	
.LABEL $label$54
	CALL memcpy($2, [2112], $4)
	
.LABEL $label$53
	*(($2 + $4)) = [0]
	CALL $20($10, $14, $7, ($17 + [8]), ($17 + [112]))
	if ( ((*($17 + [112]) & [1]) == 0) ){ goto $label$28 }
	CALL $91(*($17 + [120]))
	
.LABEL $label$28
	$11 = *($17 + [48])
	if ( ($11 == 0) ){ goto $label$56 }
	$6 = ($17 + [52])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$58 }
	
.LOOP $label$59:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$60 }
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$61 }
	CALL $91(*(($2 + [24])))
	
.LABEL $label$61
	CALL $91($2)
	
.LABEL $label$60
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$59 }
	$4 = *(($17 + [48]))
	goto $label$57 
	
.LABEL $label$58
	$4 = $11
	
.LABEL $label$57
	*($6) = $11
	CALL $91($4)
	
.LABEL $label$56
	$11 = *($17 + [88])
	if ( ($11 == 0) ){ goto $label$62 }
	$6 = ($17 + [92])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$64 }
	
.LOOP $label$65:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$66 }
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$67 }
	CALL $91(*(($4 + [44])))
	
.LABEL $label$67
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$68 }
	CALL $91(*(($4 + [32])))
	
.LABEL $label$68
	CALL $91($4)
	
.LABEL $label$66
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$65 }
	$4 = *(($17 + [88]))
	goto $label$63 
	
.LABEL $label$64
	$4 = $11
	
.LABEL $label$63
	*($6) = $11
	CALL $91($4)
	
.LABEL $label$62
	*([0] + [4]) = ($17 + [128])
	return (unreachable)
	
.LABEL $label$23
	CALL $92(($17 + [112]))
	
.LABEL $label$22
	CALL $92(($17 + [112]))
	(unreachable)
}

int_32 .FUNC $61 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [400])
	*($0 + [24 align=4]) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	return $0
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $90(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $91(*(($1 + [24])))
	
.LABEL $label$11
	CALL $91($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $91($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $90(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL $91(*(($1 + [44])))
	
.LABEL $label$11
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL $91(*(($1 + [32])))
	
.LABEL $label$12
	CALL $91($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $91($6)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $40(CALL $40($0, ($1 + [24])), ($1 + [36]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [880])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [880])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $90($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10628])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10436]
	$1 = (((int_32)$2 * (int_32)[12]) + [10436])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10726]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10728])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10726]) = [1]
	$7 = ($7 << [16])
	*([0] + [10728]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10728])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10728]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10726]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10726]) = [1]
	$3 = ($3 << [16])
	*([0] + [10728]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10728])
	
.LABEL $label$8
	*([0] + [10728]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $88($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10640])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $87([2244], $0)
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [880])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [880])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [880])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [880])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $40(*($1), *($0 + [12]))
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [496])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [400])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $85(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	*($1) = *(*($0))
	CALL eosio_assert([1], [496])
	$3 = [0]
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [400])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	CALL $93(($1 + [36]), *($0 + [4]))
	CALL $93(($1 + [24]), *($0 + [8]))
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$2 = *($0)
	CALL $83(*($0 + [4]), $1)
	$5 = *($1 + [24])
	$3 = ( *(($1 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [24])
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$3 = *($1 + [36])
	$3 = ( *(($1 + [40])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $5)
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $80($7, $1)
	$4 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-6150062511224782848, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $90([64])
	CALL $61($3)
	*($3 + [48]) = $1
	CALL $82(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [52])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $63(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$4 }
	CALL $91(*(($1 + [44])))
	
.LABEL $label$4
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL $91(*(($1 + [32])))
	
.LABEL $label$5
	CALL $91($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $30(CALL $30($0, ($1 + [24])), ($1 + [36]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $30($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $30(CALL $30($0, ($1 + [40])), ($1 + [52]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $90([56])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [496])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [400])
	*($4 + [40]) = [0]
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [44]) = $1
	CALL $71(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [48])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $39(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL $91(*(($3 + [40])))
	
.LABEL $label$9
	CALL $91($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$2 = *($0)
	$3 = *($4)
	*($1 + [8]) = *($3 + [16])
	*(($1 + [16])) = *(($3 + [24]))
	*($1 + [24]) = *(*($4 + [4]))
	CALL $93(($1 + [32]), *($4 + [8]))
	$4 = *($1 + [32])
	$3 = ( *(($1 + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($3 + [32])
	$5 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($4)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($6 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $4)
	CALL $72($7, $1)
	$5 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($2 + [8]), (int_64)-2507762491384135680, *(*($0 + [8])), $5, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	*($1) = *(*($0))
	$3 = *($0)
	*($1 + [8]) = *($3 + [16])
	*(($1 + [16])) = *(($3 + [24]))
	CALL eosio_assert([1], [496])
	$3 = [0]
	$2 = (int_64)5522248
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [400])
	*(($1 + [32])) = (int_64)1413695492
	*($1 + [24]) = (int_64)0
	CALL $93(($1 + [52]), *($0 + [4]))
	CALL $93(($1 + [40]), *($0 + [8]))
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1664])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1712])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*(($3 + [24])) == (int_64)*(($1 + [16]))), [1776])
	$6 = ((int_64)*($1 + [8]) + (int_64)*($3 + [16]))
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1824])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1856])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1888])
	$3 = *($1 + [24])
	$5 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [24])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [36])
	$5 = ( *(($1 + [40])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = ($5 + $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $3)
	CALL $80($8, $1)
	CALL db_update_i64(*($1 + [52]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $90([80])
	CALL $14($3)
	*($3 + [64]) = $1
	CALL $75(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [68])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $43(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$4 }
	CALL $91(*(($1 + [60])))
	
.LABEL $label$4
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$5 }
	CALL $91(*(($1 + [48])))
	
.LABEL $label$5
	CALL $91($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $90(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $91(*(($1 + [40])))
	
.LABEL $label$11
	CALL $91($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $91($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [624])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [624])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [624])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [624])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [624])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $90([40])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [28]) = $1
	CALL $79(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [32])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $60(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL $91(*(($3 + [24])))
	
.LABEL $label$4
	CALL $91($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	$7 = *($0 + [4])
	*($1) = *(*($7))
	*($1 + [8]) = *(*($7 + [4]))
	$2 = *($0)
	$3 = ($1 + [16])
	CALL $93($3, *($7 + [8]))
	$7 = *($1 + [16])
	$4 = ( *(($1 + [20])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($4 + [16])
	$8 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [8])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$9 = CALL malloc($7)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$2
	*($10) = $9
	$5 = ($9 + $7)
	*($10 + [8]) = $5
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [624])
	CALL memcpy($9, $1, [8])
	$6 = ($9 + [8])
	CALL eosio_assert(((int_32)($5 - $6) > (int_32)[7]), [624])
	CALL memcpy($6, $4, [8])
	*($10 + [4]) = ($9 + [16])
	CALL $30($10, $3)
	$8 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)-2507758720402849792, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$4 }
	CALL free($9)
	
.LABEL $label$4
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$5 = *($0 + [4])
	*($1) = ((int_64)*(*($5)) * (int_64)86400)
	$2 = *($0)
	$3 = *($5 + [4])
	*($1 + [8]) = *($3 + [8])
	*(($1 + [16])) = *(($3 + [16]))
	$3 = *($5 + [4])
	*($1 + [24]) = *($3 + [24])
	*(($1 + [32])) = *(($3 + [32]))
	*($1 + [40]) = *(*($5 + [4]))
	CALL $93(($1 + [48]), (*($5 + [4]) + [40]))
	CALL $93(($1 + [60]), (*($5 + [4]) + [52]))
	$5 = *($1 + [48])
	$3 = ( *(($1 + [52])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [48])
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$3 = *(($1 + [60]))
	$3 = ( *(($1 + [64])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $5)
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $29($7, $1)
	$4 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($2 + [8]), (int_64)6604080915964493824, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $90($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $98($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $91($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [624])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [624])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$5 = *($0 + [4])
	*($1) = ((int_64)((int_64)*(*($5)) * (int_64)86400) | (int_64)1)
	$2 = *($0)
	$3 = *($5 + [4])
	*(($1 + [16])) = *(($3 + [80]))
	*($1 + [8]) = *(($3 + [72]))
	$3 = *($5 + [4])
	*(($1 + [32])) = *(($3 + [96]))
	*($1 + [24]) = *(($3 + [88]))
	*($1 + [40]) = *(*($5 + [4]) + [64])
	CALL $93(($1 + [48]), (*($5 + [4]) + [104]))
	CALL $93(($1 + [60]), (*($5 + [4]) + [116]))
	$5 = *($1 + [48])
	$3 = ( *(($1 + [52])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [48])
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$3 = *(($1 + [60]))
	$3 = ( *(($1 + [64])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $5)
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $29($7, $1)
	$4 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($2 + [8]), (int_64)6604080915964493824, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}