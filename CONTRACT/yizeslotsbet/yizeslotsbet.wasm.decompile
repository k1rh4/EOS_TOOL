(data (i32.const 8192) "eosio.token\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8213) "transfer\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8308) "betAmount\00")
(data (i32.const 8318) "FB\00")
(data (i32.const 8321) "exchange\00")
(data (i32.const 8330) "eos 2 token\00")
(data (i32.const 8342) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8393) "error reading iterator\00")
(data (i32.const 8416) "read\00")
(data (i32.const 8421) "get\00")
(data (i32.const 8425) "cannot create objects in table of another contract\00")
(data (i32.const 8476) "write\00")
(data (i32.const 8482) "cannot pass end iterator to modify\00")
(data (i32.const 8517) "object passed to modify is not in multi_index\00%llu\00")
(data (i32.const 8568) "cannot modify objects in table of another contract\00")
(data (i32.const 8619) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8678) "invalid symbol name\00")
(data (i32.const 8698) "memo has more than 256 bytes\00")
(data (i32.const 8727) "token with symbol does not exist, create token before issue\00")
(data (i32.const 8787) "error symbol\00")
(data (i32.const 8800) "BET AMOUNT ERROR\00")
(data (i32.const 8817) ",\00")
(data (i32.const 8819) "seed:\00")
(data (i32.const 8826) ":\00")
(data (i32.const 8828) "0b777d7c99b57c9f0bbd04dd3125c8d12e9177b49e8fdd7fbbf80361b77da51f\00")
(data (i32.const 8893) "LOST\00")
(data (i32.const 8898) "Bar*3\00")
(data (i32.const 8904) "7*3\00")
(data (i32.const 8908) "7*2\00")
(data (i32.const 8912) "*3\00")
(data (i32.const 8915) "WON\00")
(data (i32.const 8919) "can not find account!\00")
(data (i32.const 8941) "|\00")
(data (i32.const 8943) "active\00")
(data (i32.const 8950) "finishbet\00")
(data (i32.const 8960) "string is too long to be a valid symbol_code\00")
(data (i32.const 9005) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9058) "no balance object found\00")
(data (i32.const 9082) "overdrawn balance\00")
(data (i32.const 9100) "attempt to subtract asset with different symbol\00")
(data (i32.const 9148) "subtraction underflow\00")
(data (i32.const 9170) "subtraction overflow\00")
(data (i32.const 9191) "attempt to add asset with different symbol\00")
(data (i32.const 9234) "addition underflow\00")
(data (i32.const 9253) "addition overflow\00")
(data (i32.const 9271) "orderID\00")
(data (i32.const 9279) "0123456789abcdef\00")
(data (i32.const 9296) "multiplication overflow\00")
(data (i32.const 9320) "multiplication underflow\00")
(data (i32.const 9345) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9394) "slotsreceipt\00")
(data (i32.const 9407) "bet id not exist\00")
(data (i32.const 9424) "player not match\00")
(data (i32.const 9441) "bet have been processed\00")
(data (i32.const 9465) "slots prize\00")
(data (i32.const 9477) "slots jackpot\00")
(data (i32.const 9491) "cannot pass end iterator to erase\00")
(data (i32.const 9525) "cannot increment end iterator\00")
(data (i32.const 9555) "object passed to erase is not in multi_index\00")
(data (i32.const 9600) "cannot erase objects in table of another contract\00")
(data (i32.const 9650) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9703) "invalid supply\00")
(data (i32.const 9718) "max-supply must be positive\00")
(data (i32.const 9746) "token with symbol already exists\00")
(data (i32.const 9779) "invalid quantity\00")
(data (i32.const 9796) "must issue positive quantity\00")
(data (i32.const 9825) "symbol precision mismatch\00")
(data (i32.const 9851) "quantity exceeds available supply\00")
(data (i32.const 9885) "cannot transfer to self\00")
(data (i32.const 9909) "to account does not exist\00")
(data (i32.const 9935) "unable to find key\00")
(data (i32.const 9954) "must transfer positive quantity\00")
(data (i32.const 9986) "symbol does not exist\00")
(data (i32.const 10008) "Balance row already deleted or never existed. Action won\'t have any effect.\00")
(data (i32.const 10084) "Cannot close because the balance is not zero.\00")
(data (i32.const 10130) "token with symbol does not exist\00")
(data (i32.const 10163) "must retire positive quantity\00")
(data (i32.const 10193) "string is too long to be a valid name\00")
(data (i32.const 10231) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 10298) "character is not in allowed character set for names\00")
(data (i32.const 10350) "fairsportbet\00")
(data (i32.const 10363) "EOS\00")
(data (i32.const 10367) "poundage\00")
(data (i32.const 10376) "eos exchange\00")
(data (i32.const 10389) "Bar1\00")
(data (i32.const 10394) "Bar2\00")
(data (i32.const 10399) "Bar3\00")
(data (i32.const 10404) "Ring\00")
(data (i32.const 10409) "Grape\00")
(data (i32.const 10415) "Diamond\00")
(data (i32.const 10423) "7B\00")
(data (i32.const 10426) "7P\00")
(data (i32.const 10429) "7R\00")
(data (i32.const 10432) "7R*3\00")
(data (i32.const 10437) "7P*3\00")
(data (i32.const 10442) "7B*3\00")
(data (i32.const 10447) "Diamond*3\00")
(data (i32.const 10457) "Grape*3\00")
(data (i32.const 10465) "Ring*3\00")
(data (i32.const 10472) "Bar3*3\00")
(data (i32.const 10479) "Bar2*3\00")
(data (i32.const 10486) "Bar1*3\00")
(data (i32.const 18912) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 18992) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$4 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "sha256" (func $fimport$6 (param i32 i32 i32)))
(import "env" "read_transaction" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "__multi3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "send_deferred" (func $fimport$10 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$11 (param i32 i32)))
(import "env" "is_account" (func $fimport$12 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$13 (param i64)))
(import "env" "has_auth" (func $fimport$14 (param i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$16 (result i64)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$18 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$19 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$20 (param i32)))
(import "env" "abort" (func $fimport$21))
(import "env" "memset" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$24 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_Znwj" (func $106))
(export "_ZdlPv" (func $108))
(export "_Znaj" (func $107))
(export "_ZdaPv" (func $109))
(export "_ZnwjSt11align_val_t" (func $110))
(export "_ZnajSt11align_val_t" (func $111))
(export "_ZdlPvSt11align_val_t" (func $112))
(export "_ZdaPvSt11align_val_t" (func $113))
(table $0 15 15 anyfunc)
(elem (i32.const 1) $2 $5 $7 $9 $11 $13 $14 $16 $18 $20 $22 $23 $132 $134)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19249))
(global $global$2 i32 (i32.const 19249))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8476])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8476])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $94($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8476])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $72(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8476])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8476])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8476])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8476])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8476])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8476])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8476])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8476])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8476])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8476])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8476])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $94(CALL $93($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1) = (int_64)100
	$4 = *($0)
	$5 = ($1 + [8])
	CALL $120($5, [9271])
	*($1 + [24]) = (int_64)4656594471352270848
	$6 = ($1 + [32])
	CALL $120($6, [8825])
	$7 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [16])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [24])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$10 = *(($1 + [32]))
	$10 = ( *(($1 + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$7 = ($10 + $7)
	$9 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$2 = CALL $147($7)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3) = $2
	*($3 + [8]) = ($2 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [8476])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $72($3, $5)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($3 + [4]), $8, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $72($3, $6)
	$9 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($4 + [8]), (int_64)7235159537265672192, *(*($0 + [8])), $9, $2, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$9 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $150($2)
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($1) = *(*($0))
	*($1 + [8]) = *(*($0 + [4]))
	$3 = *($0 + [8])
	*(($1 + [24])) = *(($3 + [8]))
	*($1 + [16]) = *($3)
	CALL $37($2, *($0 + [12]), [8941])
	$4 = *($3 + [12])
	$5 = ($4 & [1])
	$3 = *($0 + [12])
	$3 = CALL $125($2, ( *(($3 + [20])) ? ($3 + [13]) : $5 ), ( *(($3 + [16])) ? uint_32($4 >> [1]) : $5 ))
	$4 = ($3 + [8])
	*((($2 + [16]) + [8])) = *($4)
	*($2 + [16]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	$3 = CALL $123(($2 + [16]), [8941])
	$4 = ($3 + [8])
	*((($2 + [32]) + [8])) = *($4)
	*($2 + [32]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	$4 = *($3 + [24])
	$5 = ($4 & [1])
	$3 = *($0 + [12])
	$3 = CALL $125(($2 + [32]), ( *(($3 + [32])) ? ($3 + [25]) : $5 ), ( *(($3 + [28])) ? uint_32($4 >> [1]) : $5 ))
	$4 = *($3 + [4])
	$5 = *($3)
	*($3) = (int_64)0
	$6 = *($3 + [8])
	*($3 + [8]) = [0]
	$3 = ($1 + [32])
	if ( (*($1 + [32]) & [1]) ){ goto $label$2 }
	*($3) = [0]
	$7 = ($1 + [40])
	goto $label$1 
	
.LABEL $label$2
	*(*(($7 = ($1 + [40])))) = [0]
	*(($1 + [36])) = [0]
	
.LABEL $label$1
	CALL $119($3, [0])
	*(($1 + [36])) = $4
	*($1 + [32]) = $5
	*($7) = $6
	if ( (*($2 + [32]) & [1]) ){ goto $label$7 }
	if ( (*($2 + [16]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($2 + [40]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($2 + [24]))
	if ( (*($2) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((*($2) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$3
	*($1 + [48]) = *(*($0 + [16]))
	*($1 + [56]) = *(*($0 + [20]))
	$8 = CALL current_time()
	*($1 + [72]) = [0]
	*($1 + [64]) = $8
	$global$0 = ($2 + [48])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8476])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8476])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8476])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $72($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8476])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8476])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8476])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8476])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8476])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8476])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $138 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $144($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $118($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $122 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $130 (int_32 $0)
{
}

int_32 .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [13] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $133($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $133($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $133($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $133($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18912]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $133($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $133($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $133($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $122($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $137 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $136($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $144($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $118($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $118($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($0 + [4])
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$1 }
	$4 = ($2 + [1])
	$5 = ($2 + [8])
	
.LOOP $label$3:
	$7 = ($0 + [16])
	$12 = ($11 & [1])
	$11 = *($2)
	$10 = ($2 + [4])
	$11 = ( *($10) ? uint_32($11 >> [1]) : $12 )
	$9 = ($6 & [1])
	$6 = *($0 + [16])
	$8 = ($0 + [20])
	$6 = ( *($8) ? uint_32($6 >> [1]) : $9 )
	$13 = ( $6 ? $11 : ($6 <= $11) )
	if ( ($13 == 0) ){ goto $label$7 }
	$9 = CALL $143(( *($5) ? $4 : $12 ), ( *(($0 + [24])) ? ($7 + [1]) : $9 ), $13)
	if ( ($9 == 0) ){ goto $label$7 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = *($0)
	if ( $6 ){ goto $label$4 }
	*($1) = $0
	return $0
	
.LABEL $label$5
	$12 = ($11 & [1])
	$11 = *($7)
	$11 = ( *($8) ? uint_32($11 >> [1]) : $12 )
	$9 = ($6 & [1])
	$6 = *($2)
	$6 = ( *($10) ? uint_32($6 >> [1]) : $9 )
	$13 = ( $6 ? $11 : ($6 <= $11) )
	if ( ($13 == 0) ){ goto $label$9 }
	$7 = CALL $143(( *(($0 + [24])) ? ($7 + [1]) : $12 ), ( *($5) ? $4 : $9 ), $13)
	if ( ($7 == 0) ){ goto $label$9 }
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$2 }
	
.LABEL $label$8
	$3 = ($0 + [4])
	$6 = *($0 + [4])
	if ( ($6 == 0) ){ goto $label$2 }
	$0 = $3
	
.LABEL $label$4
	$3 = $0
	$0 = $6
	goto $label$3 
	
.LABEL $label$2
	*($1) = $0
	return $3
	
.LABEL $label$1
	*($1) = $3
	return $3
}

int_32 .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $143(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $49 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0 + [8]))
	$3 = ($0 + [1408])
	$5 = *(($0 + [1436]))
	$4 = *(($0 + [1432]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [76]) == (int_32)$3), [8342])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [1416])), (int_64)-4293729036219842560, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $46($3, $6)
	CALL eosio_assert(((int_32)*($7 + [76]) == (int_32)$3), [8342])
	
.LABEL $label$2
	CALL eosio_assert([1], [9491])
	CALL eosio_assert([1], [9525])
	$6 = CALL db_next_i64(*($7 + [80]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $46($3, $6)
	
.LABEL $label$6
	CALL $100($3, $7)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $71($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8476])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8476])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $94(CALL $93($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $125 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $118($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $128($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $71(($6 + [28]), [16])
	$2 = *($6 + [28])
	$1 = (*(($6 + [32])) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [8476])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [8476])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($4 = ($2 + [-24]))) = (int_64)0
	*(($5 = ($2 + [-16]))) = [0]
	$3 = ($8 + [-24])
	*($4) = *($3)
	$4 = ($8 + [-16])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$5 = ($8 + [-12])
	*($4) = *($5)
	*($3) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($5) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$5 = ($global$0 - [144])
	$global$0 = $5
	$6 = *($0)
	*($5 + [72]) = [8943]
	*($5 + [76]) = CALL $144([8943])
	*($5 + [16]) = *($5 + [72])
	$7 = *(CALL $4(($5 + [24]), ($5 + [16])))
	$8 = *($0)
	*($5 + [72]) = [9394]
	*($5 + [76]) = CALL $144([9394])
	*($5 + [8]) = *($5 + [72])
	$9 = *(CALL $4(($5 + [24]), ($5 + [8])))
	*($5 + [24]) = $1
	$0 = CALL $115((($5 + [24]) + [8]), $2)
	$3 = CALL $115((($5 + [24]) + [20]), $3)
	*(($5 + [64])) = *(($4 + [8]))
	*($5 + [72]) = $8
	*($5 + [80]) = $9
	*($5 + [56]) = *($4)
	*(($4 = CALL _Znwj([16]))) = $6
	*($4 + [8]) = $7
	*(($5 + [108])) = [0]
	$2 = ($4 + [16])
	*((($5 + [72]) + [24])) = $2
	*((($5 + [72]) + [20])) = $2
	*($5 + [88]) = $4
	*($5 + [100 align=4]) = (int_64)0
	$4 = *($0)
	$0 = ( *(($5 + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($0 + [24])
	$1 = (CASTING uint_64)(uint_32 $0)
	$2 = ($5 + [100])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$1 }
	$0 = *($3)
	$0 = ( *(($5 + [48])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$4 = ($0 + $4)
	$1 = (CASTING uint_64)(uint_32 $0)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$2 }
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $71($2, $4)
	$0 = *(($5 + [104]))
	$4 = *(($5 + [100]))
	goto $label$3 
	
.LABEL $label$4
	$0 = [0]
	$4 = [0]
	
.LABEL $label$3
	*($5 + [132]) = $4
	*($5 + [128]) = $4
	*($5 + [136]) = $0
	*($5 + [112]) = ($5 + [128])
	*($5 + [120]) = ($5 + [24])
	CALL $85(($5 + [120]), ($5 + [112]))
	CALL $48(($5 + [128]), ($5 + [72]))
	$4 = *($5 + [128])
	CALL send_inline($4, (*($5 + [132]) - $4))
	$4 = *($5 + [128])
	if ( ($4 == 0) ){ goto $label$5 }
	*($5 + [132]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($5 + [100])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($5 + [104])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$4 = *($5 + [88])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($5 + [92])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( (*($5 + [44]) & [1]) ){ goto $label$10 }
	if ( (*($5 + [32]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($5 + [52])))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($5 + [40])))
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [144])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8393])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8416])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8416])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $89(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [8425])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [76]) = $1
	CALL $83(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [80])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $84(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $71($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $99(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8393])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [76]) = $0
	CALL $101(($3 + [32]), $5)
	*($5 + [80]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $84(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $95($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $71($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $96($2, $1)
	CALL $98(CALL $97(CALL $97($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $122($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $128 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [1600])
	$global$0 = $3
	*(($4 = $3) + [1592]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $147($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [1560])) = (int_64)0
	*(($4 + [1568])) = (int_64)0
	*(($4 + [1584])) = (int_64)0
	*($4 + [1544]) = (int_64)0
	*($4 + [1552]) = (int_64)0
	*($4 + [1576]) = (int_64)0
	*($4 + [1532]) = $3
	*($4 + [1528]) = $3
	*($4 + [1536]) = ($3 + $2)
	*($4 + [16]) = ($4 + [1528])
	*($4 + [40]) = ($4 + [1544])
	CALL $60(($4 + [40]), ($4 + [16]))
	$5 = *($4 + [1536])
	*((($4 + [24]) + [8])) = $5
	*(($4 + [8])) = $5
	$6 = *($4 + [1528])
	*($4) = $6
	*($4 + [24]) = $6
	$5 = CALL $25(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $5
	*($4 + [20]) = ($4 + [1592])
	CALL $61(($4 + [16]), ($4 + [1544]))
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL $150($3)
	
.LABEL $label$5
	CALL $26($5)
	if ( ((*($4 + [1564]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [1572])))
	
.LABEL $label$6
	if ( ((*($4 + [1552]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [1560])))
	
.LABEL $label$7
	$global$0 = ($4 + [1600])
	return [1]
}

void .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [128])
	$global$0 = $1
	CALL require_auth(*($0 + [8]))
	CALL $27($0, ($0 + [624]))
	CALL $27($0, ($0 + [656]))
	CALL $27($0, ($0 + [688]))
	CALL $27($0, ($0 + [720]))
	CALL $27($0, ($0 + [752]))
	CALL $27($0, ($0 + [784]))
	CALL $27($0, ($0 + [816]))
	CALL $27($0, ($0 + [848]))
	CALL $27($0, ($0 + [880]))
	CALL $27($0, ($0 + [912]))
	CALL $27($0, ($0 + [944]))
	CALL $27($0, ($0 + [976]))
	*(($1 + [120])) = [0]
	*($1 + [112]) = (int_64)0
	$2 = CALL $144([8308])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$12 }
	*($1 + [112]) = ($2 << [1])
	$3 = (($1 + [112]) | [1])
	if ( $2 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [112]) = ($4 | [1])
	*($1 + [120]) = $3
	*($1 + [116]) = $2
	
.LABEL $label$11
	CALL memcpy($3, [8308], $2)
	
.LABEL $label$10
	*(($3 + $2)) = [0]
	*(($1 + [104])) = [0]
	*($1 + [96]) = (int_64)0
	$2 = CALL $144([8318])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$15 }
	*($1 + [96]) = ($2 << [1])
	$3 = (($1 + [96]) | [1])
	if ( $2 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [96]) = ($4 | [1])
	*($1 + [104]) = $3
	*($1 + [100]) = $2
	
.LABEL $label$14
	CALL memcpy($3, [8318], $2)
	
.LABEL $label$13
	*(($3 + $2)) = [0]
	CALL $28($0, (int_64)1, ($1 + [112]), (float_64)10, ($1 + [96]))
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($1 + [104]))
	
.LABEL $label$16
	if ( ((*($1 + [112]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($1 + [120]))
	
.LABEL $label$17
	*(($1 + [88])) = [0]
	*($1 + [80]) = (int_64)0
	$2 = CALL $144([8308])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$20 }
	*($1 + [80]) = ($2 << [1])
	$3 = (($1 + [80]) | [1])
	if ( $2 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [80]) = ($4 | [1])
	*($1 + [88]) = $3
	*($1 + [84]) = $2
	
.LABEL $label$19
	CALL memcpy($3, [8308], $2)
	
.LABEL $label$18
	*(($3 + $2)) = [0]
	*(($1 + [72])) = [0]
	*($1 + [64]) = (int_64)0
	$2 = CALL $144([8318])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$23 }
	*($1 + [64]) = ($2 << [1])
	$3 = (($1 + [64]) | [1])
	if ( $2 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [64]) = ($4 | [1])
	*($1 + [72]) = $3
	*($1 + [68]) = $2
	
.LABEL $label$22
	CALL memcpy($3, [8318], $2)
	
.LABEL $label$21
	*(($3 + $2)) = [0]
	CALL $28($0, (int_64)2, ($1 + [80]), (float_64)50, ($1 + [64]))
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($1 + [72]))
	
.LABEL $label$24
	if ( ((*($1 + [80]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($1 + [88]))
	
.LABEL $label$25
	*(($1 + [56])) = [0]
	*($1 + [48]) = (int_64)0
	$2 = CALL $144([8308])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$28 }
	*($1 + [48]) = ($2 << [1])
	$3 = (($1 + [48]) | [1])
	if ( $2 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [48]) = ($4 | [1])
	*($1 + [56]) = $3
	*($1 + [52]) = $2
	
.LABEL $label$27
	CALL memcpy($3, [8308], $2)
	
.LABEL $label$26
	*(($3 + $2)) = [0]
	*(($1 + [40])) = [0]
	*($1 + [32]) = (int_64)0
	$2 = CALL $144([8318])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$31 }
	*($1 + [32]) = ($2 << [1])
	$3 = (($1 + [32]) | [1])
	if ( $2 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [32]) = ($4 | [1])
	*($1 + [40]) = $3
	*($1 + [36]) = $2
	
.LABEL $label$30
	CALL memcpy($3, [8318], $2)
	
.LABEL $label$29
	*(($3 + $2)) = [0]
	CALL $28($0, (int_64)3, ($1 + [48]), (float_64)100, ($1 + [32]))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*($1 + [40]))
	
.LABEL $label$32
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*($1 + [56]))
	
.LABEL $label$33
	*(($1 + [24])) = [0]
	*($1 + [16]) = (int_64)0
	$2 = CALL $144([8321])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$36 }
	*($1 + [16]) = ($2 << [1])
	$3 = (($1 + [16]) | [1])
	if ( $2 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1 + [16]) = ($4 | [1])
	*($1 + [24]) = $3
	*($1 + [20]) = $2
	
.LABEL $label$35
	CALL memcpy($3, [8321], $2)
	
.LABEL $label$34
	*(($3 + $2)) = [0]
	*(($1 + [8])) = [0]
	*($1) = (int_64)0
	$2 = CALL $144([8330])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$39 }
	*($1) = ($2 << [1])
	$3 = ($1 | [1])
	if ( $2 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$4 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($1) = ($4 | [1])
	*($1 + [8]) = $3
	*($1 + [4]) = $2
	
.LABEL $label$38
	CALL memcpy($3, [8330], $2)
	
.LABEL $label$37
	*(($3 + $2)) = [0]
	CALL $28($0, (int_64)4, ($1 + [16]), (float_64)5e3, $1)
	if ( (*($1) & [1]) ){ goto $label$41 }
	if ( (*($1 + [16]) & [1]) ){ goto $label$40 }
	goto $label$1 
	
.LABEL $label$41
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$40
	CALL _ZdlPv(*($1 + [24]))
	$global$0 = ($1 + [128])
	return (unreachable)
	
.LABEL $label$9
	CALL $114(($1 + [112]))
	
.LABEL $label$8
	CALL $114(($1 + [96]))
	
.LABEL $label$7
	CALL $114(($1 + [80]))
	
.LABEL $label$6
	CALL $114(($1 + [64]))
	
.LABEL $label$5
	CALL $114(($1 + [48]))
	
.LABEL $label$4
	CALL $114(($1 + [32]))
	
.LABEL $label$3
	CALL $114(($1 + [16]))
	
.LABEL $label$2
	CALL $114($1)
	
.LABEL $label$1
	$global$0 = ($1 + [128])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [1600])
	$global$0 = $3
	*(($4 = $3) + [1592]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [1568])) = (int_64)0
	*(($4 + [1584])) = [0]
	*($4 + [1552]) = (int_64)0
	*($4 + [1544]) = (int_64)0
	*($4 + [1560]) = (int_64)0
	*($4 + [1576]) = (int_64)0
	*($4 + [1532]) = $2
	*($4 + [1528]) = $2
	*($4 + [1536]) = ($2 + $5)
	*($4 + [16]) = ($4 + [1528])
	*($4 + [40]) = ($4 + [1544])
	CALL $53(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [1536])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [1528])
	*($4) = $6
	*($4 + [24]) = $6
	$3 = CALL $25(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [1592])
	CALL $54(($4 + [16]), ($4 + [1544]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $150($2)
	
.LABEL $label$4
	CALL $26($3)
	if ( ((*($4 + [1576]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [1584])))
	
.LABEL $label$5
	$global$0 = ($4 + [1600])
	return [1]
}

void .FUNC $7 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [10193])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [10298])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [10231])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [10298])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	float_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$5 = ($global$0 - [192])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$2 }
	*($5 + [136]) = [8943]
	*($5 + [140]) = CALL $144([8943])
	*($5 + [48]) = *($5 + [136])
	*($5 + [128]) = *(CALL $4(($5 + [72]), ($5 + [48])))
	*($5 + [120]) = $6
	*($5 + [136]) = [8192]
	*($5 + [140]) = CALL $144([8192])
	*($5 + [40]) = *($5 + [136])
	$7 = *(CALL $4(($5 + [72]), ($5 + [40])))
	*($5 + [136]) = [8213]
	*($5 + [140]) = CALL $144([8213])
	*($5 + [32]) = *($5 + [136])
	$8 = *(CALL $4(($5 + [72]), ($5 + [32])))
	$9 = *($0)
	*($5 + [136]) = [10350]
	*($5 + [140]) = CALL $144([10350])
	*($5 + [24]) = *($5 + [136])
	$10 = *(CALL $4(($5 + [72]), ($5 + [24])))
	$6 = *($3)
	$11 = CALL $144([10363])
	$12 = ($11 <= [8])
	$13 = ((float_64)(CASTING float_64)(int_64 $6) * (float_64)(float_64)0.02)
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$7 }
	$14 = (int_64)-9223372036854775808
	if ( ($12 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$14 = (Rounds 0)($13)
	if ( $12 ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([0], [8960])
	goto $label$4 
	
.LABEL $label$5
	if ( $11 ){ goto $label$4 }
	$15 = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$6 = (int_64)0
	
.LOOP $label$8:
	$12 = *(($11 + [10362]))
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [9005])
	
.LABEL $label$9
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$8 }
	$15 = ((int_64)$6 << (int_64)8)
	
.LABEL $label$3
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9345])
	$6 = (uint_64)$15 >> (uint_64)(int_64)8)
	$16 = ((int_64)$15 | (int_64)4)
	$11 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$15 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$6 = $15
	$12 = [1]
	$17 = $11
	$11 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$6 = $15
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$12 = ((int_32)$11 < (int_32)[6])
	$17 = ($11 + [1])
	$11 = $17
	if ( $12 ){ goto $label$14 }
	$12 = [1]
	$11 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$12 = [0]
	
.LABEL $label$10
	CALL eosio_assert($12, [8678])
	*(($5 + [64])) = [0]
	*($5 + [56]) = (int_64)0
	$11 = CALL $144([10367])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$19 }
	*($5 + [56]) = ($11 << [1])
	$12 = (($5 + [56]) | [1])
	if ( $11 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$17 = (($11 + [16]) & [-16])
	$12 = CALL _Znwj($17)
	*($5 + [56]) = ($17 | [1])
	*($5 + [64]) = $12
	*($5 + [60]) = $11
	
.LABEL $label$18
	CALL memcpy($12, [10367], $11)
	
.LABEL $label$17
	*(($12 + $11)) = [0]
	*(($5 + [96])) = $16
	$11 = ($5 + [64])
	*(($5 + [112])) = *($11)
	*($11) = [0]
	*($5 + [80]) = $10
	*($5 + [72]) = $9
	*($5 + [88]) = $14
	*($5 + [104]) = *($5 + [56])
	*($5 + [56]) = (int_64)0
	$11 = CALL $47(($5 + [136]), ($5 + [120]), $7, $8, ($5 + [72]))
	CALL $48(($5 + [176]), $11)
	$12 = *($5 + [176])
	CALL send_inline($12, (*($5 + [180]) - $12))
	$12 = *($5 + [176])
	if ( ($12 == 0) ){ goto $label$20 }
	*($5 + [180]) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$20
	$12 = *($11 + [28])
	if ( ($12 == 0) ){ goto $label$21 }
	*(($11 + [32])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$21
	$12 = *($11 + [16])
	if ( ($12 == 0) ){ goto $label$22 }
	*(($11 + [20])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$22
	if ( ((*(($5 + [104])) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($5 + [112])))
	
.LABEL $label$23
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$24
	$6 = *($3)
	CALL eosio_assert(((int_64)$6 > (int_64)0), [9954])
	$14 = ((int_64)$6 * (int_64)5000)
	$11 = CALL $144([8318])
	if ( ($11 <= [8]) ){ goto $label$27 }
	CALL eosio_assert([0], [8960])
	goto $label$26 
	
.LABEL $label$27
	if ( ($11 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$6 = (int_64)0
	
.LOOP $label$28:
	$12 = *(($11 + [8317]))
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$29 }
	CALL eosio_assert([0], [9005])
	
.LABEL $label$29
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$28 }
	$7 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$15 
	
.LABEL $label$25
	$7 = (int_64)4
	goto $label$15 
	
.LABEL $label$16
	CALL $114(($5 + [56]))
	
.LABEL $label$15
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9345])
	$6 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$15 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$6 = $15
	$12 = [1]
	$17 = $11
	$11 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$33
	$6 = $15
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$31 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$12 = ((int_32)$11 < (int_32)[6])
	$17 = ($11 + [1])
	$11 = $17
	if ( $12 ){ goto $label$34 }
	$12 = [1]
	$11 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$12 = [0]
	
.LABEL $label$30
	CALL eosio_assert($12, [8678])
	$6 = *($0)
	*($5 + [136]) = [8943]
	*($5 + [140]) = CALL $144([8943])
	*($5 + [16]) = *($5 + [136])
	*($5 + [128]) = *(CALL $4(($5 + [72]), ($5 + [16])))
	*($5 + [120]) = $6
	$6 = *($0)
	*($5 + [136]) = [8213]
	*($5 + [140]) = CALL $144([8213])
	*($5 + [8]) = *($5 + [136])
	$15 = *(CALL $4(($5 + [72]), ($5 + [8])))
	$8 = *($0)
	*(($5 + [64])) = [0]
	*($5 + [56]) = (int_64)0
	$11 = CALL $144([10376])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$37 }
	*($5 + [56]) = ($11 << [1])
	$12 = (($5 + [56]) | [1])
	if ( $11 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$17 = (($11 + [16]) & [-16])
	$12 = CALL _Znwj($17)
	*($5 + [56]) = ($17 | [1])
	*($5 + [64]) = $12
	*($5 + [60]) = $11
	
.LABEL $label$36
	CALL memcpy($12, [10376], $11)
	
.LABEL $label$35
	*(($12 + $11)) = [0]
	*(($5 + [96])) = $7
	$11 = ($5 + [64])
	*(($5 + [112])) = *($11)
	*($11) = [0]
	*($5 + [80]) = $1
	*($5 + [72]) = $8
	*($5 + [88]) = $14
	*($5 + [104]) = *($5 + [56])
	*($5 + [56]) = (int_64)0
	$11 = CALL $47(($5 + [136]), ($5 + [120]), $6, $15, ($5 + [72]))
	CALL $48(($5 + [176]), $11)
	$12 = *($5 + [176])
	CALL send_inline($12, (*($5 + [180]) - $12))
	$12 = *($5 + [176])
	if ( ($12 == 0) ){ goto $label$38 }
	*($5 + [180]) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$38
	$12 = *($11 + [28])
	if ( ($12 == 0) ){ goto $label$39 }
	*(($11 + [32])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$39
	$12 = *($11 + [16])
	if ( ($12 == 0) ){ goto $label$40 }
	*(($11 + [20])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$40
	if ( ((*(($5 + [104])) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($5 + [112])))
	
.LABEL $label$41
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$2
	$global$0 = ($5 + [192])
	return (unreachable)
	
.LABEL $label$1
	CALL $114(($5 + [56]))
	(unreachable)
}

void .FUNC $2 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $1
	CALL require_auth(*($0))
	$4 = [0]
	$5 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$1 = $5)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8678])
	$7 = [0]
	$9 = *($2)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$1 = $5
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [9703])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [9718])
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$1 = *($0)
	*($3 + [16]) = $1
	*($3 + [24]) = $5
	$4 = CALL db_find_i64($1, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $31(($3 + [16]), $4) + [40]) == (int_32)($3 + [16])), [8342])
	$4 = [0]
	goto $label$11 
	
.LABEL $label$12
	$4 = [1]
	
.LABEL $label$11
	CALL eosio_assert($4, [9746])
	$1 = *($0)
	*($3 + [8]) = $2
	*($3 + [12]) = ($3 + [56])
	CALL $50($3, ($3 + [16]), $1, ($3 + [8]))
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$13 }
	$2 = ($3 + [44])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$15 }
	
.LOOP $label$16:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$16 }
	$4 = *(($3 + [40]))
	goto $label$14 
	
.LABEL $label$15
	$4 = $8
	
.LABEL $label$14
	*($2) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$global$0 = ($3 + [64])
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [1616])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [1544]) + [16]))) = (int_64)0
	*($4 + [1552]) = (int_64)0
	*($4 + [1544]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8416])
	CALL memcpy(($4 + [1544]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [8416])
	CALL memcpy((($4 + [1544]) + [8]), ($2 + [8]), [8])
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [8416])
	CALL memcpy(($4 + [56]), ($2 + [16]), [8])
	*($3) = *($4 + [56])
	$8 = ($2 + $7)
	*((($4 + [24]) + [8])) = $8
	*($4 + [44]) = ($2 + [24])
	*($4 + [40]) = $2
	*($4 + [48]) = $8
	*($4 + [24]) = *($4 + [40])
	$8 = CALL $25(($4 + [56]), $0, $1, ($4 + [24]))
	*(($9 = (($4 + [1568]) + [8]))) = *($3)
	*($4 + [1568]) = *($4 + [1552])
	$0 = *($4 + [1544])
	*((($4 + [1584]) + [8])) = *($9)
	*($4 + [1584]) = *($4 + [1568])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [1584]) + [8]))
	*((($4 + [1600]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [1584])
	*($4 + [8]) = $1
	*($4 + [1600]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $150($2)
	
.LABEL $label$6
	CALL $26($8)
	$global$0 = ($4 + [1616])
	return [1]
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$12 }
	if ( ((int_64)$2 <= (int_64)-3617168760277827585) ){ goto $label$11 }
	if ( ((int_64)$2 > (int_64)6604225615606841343) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)4929617502180212736) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$1 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [1]
	*($3 + [24]) = *($3 + [208])
	CALL $3($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [136]) = [8192]
	*($3 + [140]) = CALL $144([8192])
	*($3 + [104]) = *($3 + [136])
	CALL $4(($3 + [144]), ($3 + [104]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [120]) = [8213]
	*($3 + [124]) = CALL $144([8213])
	*($3 + [96]) = *($3 + [120])
	CALL $4(($3 + [128]), ($3 + [96]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [2]
	*($3 + [88]) = *($3 + [112])
	CALL $6($0, $0, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 <= (int_64)-4993669930013425665) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-4993669930013425664) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-4293729119859900416) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4293728845261722736) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [3]
	*($3 + [80]) = *($3 + [152])
	CALL $8($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)6604225615606841344) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)8516769789752901632) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421049959963623424) ){ goto $label$1 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [4]
	*($3) = *($3 + [232])
	CALL $10($1, $1, $3)
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-7119375207604682752) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-6533262907872903168) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [5]
	*($3 + [48]) = *($3 + [184])
	CALL $12($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [196]) = [0]
	*($3 + [192]) = [6]
	*($3 + [40]) = *($3 + [192])
	CALL $6($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [180]) = [0]
	*($3 + [176]) = [7]
	*($3 + [56]) = *($3 + [176])
	CALL $15($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [172]) = [0]
	*($3 + [168]) = [8]
	*($3 + [64]) = *($3 + [168])
	CALL $17($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [228]) = [0]
	*($3 + [224]) = [9]
	*($3 + [8]) = *($3 + [224])
	CALL $19($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [220]) = [0]
	*($3 + [216]) = [10]
	*($3 + [16]) = *($3 + [216])
	CALL $21($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [204]) = [0]
	*($3 + [200]) = [11]
	*($3 + [32]) = *($3 + [200])
	CALL $19($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [164]) = [0]
	*($3 + [160]) = [12]
	*($3 + [72]) = *($3 + [160])
	CALL $24($1, $1, ($3 + [72]))
	
.LABEL $label$1
	CALL $130([0])
	$global$0 = ($3 + [240])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth($1)
	*(($3 + [32])) = [0]
	*($3 + [8]) = $1
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$4 = *($0)
	*($3) = $4
	$0 = [0]
	$2 = CALL db_find_i64($4, $1, (int_64)3607749779137757184, (uint_64)*($2) >> (uint_64)(int_64)8)
	if ( ((int_32)$2) < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $41($3, $2)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$3), [8342])
	
.LABEL $label$1
	$2 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($2, [10008])
	CALL eosio_assert((int_64)(*($0) == 0), [10084])
	CALL eosio_assert($2, [9491])
	CALL eosio_assert($2, [9525])
	$2 = CALL db_next_i64(*($0 + [20]), ($3 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	CALL $41($3, $2)
	
.LABEL $label$2
	CALL $57($3, $0)
	$5 = *($3 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($3 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [1552])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [1536]) = (int_64)0
	*($4 + [1528]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8416])
	CALL memcpy(($4 + [1528]), $2, [8])
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8416])
	CALL memcpy(($4 + [40]), ($2 + [8]), [8])
	*($4 + [1536]) = *($4 + [40])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [16])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $25(($4 + [40]), $0, $1, ($4 + [8]))
	$0 = *($4 + [1528])
	*($4 + [1544]) = *($4 + [1536])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 ($4 + [1544])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $150($2)
	
.LABEL $label$6
	CALL $26($8)
	$global$0 = ($4 + [1552])
	return [1]
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = [0]
	$5 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	$6 = $5)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [8678])
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$7 }
	$4 = uint_32($4 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$4 = *($2 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($4 <= [257]), [8698])
	$8 = [0]
	*(($3 + [72])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$6 = *($0)
	*($3 + [40]) = $6
	*($3 + [48]) = $5
	$2 = [0]
	$4 = CALL db_find_i64($6, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$2 = CALL $31(($3 + [40]), $4)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)($3 + [40])), [8342])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [10130])
	CALL require_auth(*($2 + [32]))
	$10 = ($1 + [8])
	$5 = *($10)
	$11 = *($1)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$6 = $7
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$6 = $7
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$13 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$8 = [0]
	
.LABEL $label$9
	CALL eosio_assert($8, [9779])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [10163])
	CALL eosio_assert(((int_64)$5 == (int_64)*($2 + [8])), [9825])
	*($3 + [32]) = $1
	CALL $59(($3 + [40]), $2, (int_64)0, ($3 + [32]))
	$6 = *(($2 + [32]))
	*(($4 = (($3 + [16]) + [8]))) = *($10)
	$7 = *($1)
	*(($3 + [8])) = *($4)
	*($3 + [16]) = $7
	*($3) = *($3 + [16])
	CALL $32($0, $6, $3)
	$9 = *($3 + [64])
	if ( ($9 == 0) ){ goto $label$14 }
	$2 = ($3 + [68])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$18 }
	CALL _ZdlPv($8)
	
.LABEL $label$18
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$17 }
	$4 = *(($3 + [64]))
	goto $label$15 
	
.LABEL $label$16
	$4 = $9
	
.LABEL $label$15
	*($2) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$global$0 = ($3 + [80])
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [1584])
	$global$0 = $3
	*(($4 = $3) + [1576]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [1568])) = [0]
	*($4 + [1552]) = (int_64)0
	*($4 + [1544]) = (int_64)0
	*($4 + [1560]) = (int_64)0
	*($4 + [1536]) = ($2 + $5)
	*($4 + [1528]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8416])
	CALL memcpy(($4 + [1544]), $2, [8])
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [8416])
	CALL memcpy(($4 + [40]), ($2 + [8]), [8])
	*($4 + [1532]) = ($2 + [16])
	*($4 + [1552]) = *($4 + [40])
	CALL $29(($4 + [1528]), (($4 + [1544]) + [16]))
	$3 = *($4 + [1536])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [1528])
	*($4) = $6
	*($4 + [24]) = $6
	$3 = CALL $25(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [1576])
	CALL $58(($4 + [16]), ($4 + [1544]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $150($2)
	
.LABEL $label$4
	CALL $26($3)
	if ( ((*($4 + [1560]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [1568])))
	
.LABEL $label$5
	$global$0 = ($4 + [1584])
	return [1]
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [1520])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $25(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $150($2)
	
.LABEL $label$6
	CALL $26($8)
	$global$0 = ($4 + [1520])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL require_auth($3)
	$5 = *($2)
	*((($4 + [56]) + [32])) = [0]
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	*($4 + [56]) = *($0)
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	*($4 + [64]) = $5)
	CALL eosio_assert(((int_64)*(CALL $55(($4 + [56]), $5, [9986]) + [8]) == (int_64)*($2)), [9825])
	*((($4 + [16]) + [32])) = [0]
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	$6 = *($0)
	*($4 + [16]) = $6
	*($4 + [24]) = $1
	$0 = CALL db_find_i64($6, $1, (int_64)3607749779137757184, $5)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $41(($4 + [16]), $0) + [16]) == (int_32)($4 + [16])), [8342])
	$7 = *($4 + [40])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [8]) = $2
	CALL $56($4, ($4 + [16]), $3, ($4 + [8]))
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [44])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($4 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $7
	
.LABEL $label$4
	*($8) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$8 }
	$8 = ($4 + [84])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	CALL _ZdlPv($0)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($4 + [80]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $7
	
.LABEL $label$9
	*($8) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$global$0 = ($4 + [96])
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [1552])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [1528]) = (int_64)0
	*($4 + [1520]) = (int_64)0
	*($4 + [1536]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8416])
	CALL memcpy(($4 + [1520]), $2, [8])
	*($4 + [32]) = (int_64)0
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8416])
	CALL memcpy(($4 + [32]), ($2 + [8]), [8])
	*($4 + [1528]) = *($4 + [32])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [8416])
	CALL memcpy((($4 + [1520]) + [16]), ($2 + [16]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [24])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $25(($4 + [32]), $0, $1, $4)
	$0 = *($4 + [1536])
	$1 = *($4 + [1520])
	*($4 + [1544]) = *($4 + [1528])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 ($4 + [1544])), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $150($2)
	
.LABEL $label$6
	CALL $26($8)
	$global$0 = ($4 + [1552])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [9885])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$12($2), [9909])
	$6 = *($3 + [8])
	$7 = [0]
	*(($5 + [104])) = [0]
	$8 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [80]) = $8)
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($0)
	$9 = CALL $55(($5 + [72]), $8, [9935])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$10 = *($3)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$11 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $12
	$7 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9779])
	CALL eosio_assert(((int_64)$10 > (int_64)0), [9954])
	CALL eosio_assert(((int_64)$6 == (int_64)*($9 + [8])), [9825])
	$11 = *($4)
	if ( ($11 & [1]) ){ goto $label$7 }
	$11 = uint_32($11 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$11 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($11 <= [257]), [8698])
	$11 = CALL has_auth($2)
	$7 = ($3 + [8])
	$12 = *($7)
	*((($5 + [56]) + [8])) = $12
	$8 = *($3)
	*((($5 + [24]) + [8])) = $12
	*($5 + [24]) = $8
	*($5 + [56]) = $8
	CALL $32($0, $1, ($5 + [24]))
	$12 = *($7)
	*((($5 + [40]) + [8])) = $12
	$8 = *($3)
	*((($5 + [8]) + [8])) = $12
	*($5 + [8]) = $8
	*($5 + [40]) = $8
	CALL $33($0, $2, ($5 + [8]), ( $2 ? $1 : $11 ))
	$13 = *($5 + [96])
	if ( ($13 == 0) ){ goto $label$8 }
	$3 = ($5 + [100])
	$11 = *($3)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$10 }
	
.LOOP $label$11:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$11 }
	$11 = *(($5 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$11 = $13
	
.LABEL $label$9
	*($3) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$8
	$global$0 = ($5 + [112])
}

int_32 .FUNC $75 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8342])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $41($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8342])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_64 $18
	$4 = ($global$0 - [464])
	$global$0 = $4
	*($4 + [448]) = $1
	CALL require_auth($1)
	$5 = [0]
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$1 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $7
	$8 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [8678])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [8698])
	*(($4 + [160])) = [0]
	*($4 + [144]) = (int_64)-1
	*($4 + [152]) = (int_64)0
	$1 = *($0)
	*($4 + [128]) = $1
	*($4 + [136]) = $6
	$5 = [0]
	$8 = CALL db_find_i64($1, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	$5 = CALL $31(($4 + [128]), $8)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)($4 + [128])), [8342])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8727])
	$5 = CALL $144([8318])
	if ( ($5 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [8960])
	goto $label$11 
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$1 = (int_64)0
	
.LOOP $label$13:
	$8 = *(($5 + [8317]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9005])
	
.LABEL $label$14
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$13 }
	goto $label$9 
	
.LABEL $label$10
	$1 = (int_64)0
	
.LABEL $label$9
	CALL eosio_assert(((int_64)$6 == (int_64)$1), [8787])
	$5 = [1]
	$1 = *($2)
	if ( ((int_64)$1 == (int_64)100000) ){ goto $label$15 }
	if ( ((int_64)$1 == (int_64)500000) ){ goto $label$15 }
	if ( ((int_64)$1 == (int_64)1000000) ){ goto $label$15 }
	$5 = [0]
	
.LABEL $label$15
	CALL eosio_assert($5, [8800])
	$9 = *($4 + [152])
	if ( ($9 == 0) ){ goto $label$16 }
	$10 = ($4 + [156])
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$20 }
	CALL _ZdlPv($8)
	
.LABEL $label$20
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$19 }
	$5 = *(($4 + [152]))
	goto $label$17 
	
.LABEL $label$18
	$5 = $9
	
.LABEL $label$17
	*($10) = $9
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$1 = *($2)
	$5 = ($2 + [8])
	$7 = *($5)
	*((($4 + [72]) + [8])) = $7
	*((($4 + [432]) + [8])) = $7
	*($4 + [432]) = $1
	*($4 + [72]) = $1
	CALL $32($0, *($4 + [448]), ($4 + [72]))
	$7 = *($5)
	*((($4 + [416]) + [8])) = $7
	$6 = *($0)
	$1 = *($2)
	*((($4 + [56]) + [8])) = $7
	*($4 + [416]) = $1
	*($4 + [56]) = $1
	CALL $33($0, $6, ($4 + [56]), *($4 + [448]))
	*(($4 + [408])) = [0]
	*($4 + [392]) = (int_64)-1
	*($4 + [400]) = (int_64)0
	$1 = *($0)
	*($4 + [376]) = $1
	*($4 + [384]) = $1
	*($4 + [368]) = [0]
	*($4 + [360]) = (int_64)0
	$1 = CALL $34($0)
	*($4 + [352]) = $1
	CALL $127(($4 + [128]), $1)
	if ( (*($4 + [360]) & [1]) ){ goto $label$22 }
	*($4 + [360]) = [0]
	goto $label$21 
	
.LABEL $label$22
	*(*((($4 + [360]) + [8]))) = [0]
	*($4 + [364]) = [0]
	
.LABEL $label$21
	CALL $119(($4 + [360]), [0])
	$5 = (($4 + [128]) + [8])
	*((($4 + [360]) + [8])) = *($5)
	*($4 + [360]) = *($4 + [128])
	*($5) = [0]
	*($4 + [128]) = (int_64)0
	$5 = CALL $144([8817])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$32 }
	*($4 + [128]) = ($5 << [1])
	$8 = (($4 + [128]) | [1])
	if ( $5 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$9 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($4 + [128]) = ($9 | [1])
	*($4 + [136]) = $8
	*($4 + [132]) = $5
	
.LABEL $label$31
	CALL memcpy($8, [8817], $5)
	
.LABEL $label$30
	*(($8 + $5)) = [0]
	CALL $35(($4 + [112]), $0, $3, ($4 + [128]))
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*($4 + [136]))
	
.LABEL $label$33
	*(($4 + [96])) = [0]
	*($4 + [88]) = (int_64)0
	$5 = CALL $144([8819])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$28 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$36 }
	*($4 + [88]) = ($5 << [1])
	$8 = (($4 + [88]) | [1])
	if ( $5 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$9 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($4 + [88]) = ($9 | [1])
	*($4 + [96]) = $8
	*($4 + [92]) = $5
	
.LABEL $label$35
	CALL memcpy($8, [8819], $5)
	
.LABEL $label$34
	*(($8 + $5)) = [0]
	*(($4 + [312])) = [0]
	*($4 + [304]) = (int_64)0
	$5 = CALL $144([8825])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$39 }
	*($4 + [304]) = ($5 << [1])
	$8 = (($4 + [304]) | [1])
	if ( $5 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$9 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($4 + [304]) = ($9 | [1])
	*($4 + [312]) = $8
	*($4 + [308]) = $5
	
.LABEL $label$38
	CALL memcpy($8, [8825], $5)
	
.LABEL $label$37
	$11 = [0]
	*(($8 + $5)) = [0]
	$9 = *($4 + [112])
	if ( ((int_32)*($4 + [116]) == (int_32)$9) ){ goto $label$40 }
	$12 = (($4 + [88]) | [1])
	$13 = ($4 + [96])
	
.LOOP $label$42:
	$5 = ($9 + ((int_32)$11 * (int_32)[12]))
	$8 = *($5)
	if ( ($8 & [1]) ){ goto $label$44 }
	$8 = uint_32($8 >> [1])
	$14 = ($5 + [1])
	goto $label$43 
	
.LABEL $label$44
	$8 = *($5 + [4])
	$14 = *($5 + [8])
	
.LABEL $label$43
	$3 = ($5 & [1])
	$5 = *($4 + [88])
	$5 = ( *($4 + [92]) ? uint_32($5 >> [1]) : $3 )
	if ( ($5 == 0) ){ goto $label$41 }
	if ( ((int_32)$8 < (int_32)$5) ){ goto $label$46 }
	$10 = ($14 + $8)
	$15 = ( *($13) ? $12 : $3 )
	$3 = *($15)
	$9 = $14
	
.LOOP $label$47:
	$8 = (($8 - $5) + [1])
	if ( ($8 == 0) ){ goto $label$46 }
	$8 = CALL $142($9, $3, $8)
	if ( ($8 == 0) ){ goto $label$46 }
	if ( (CALL $143($8, $15, $5) == 0) ){ goto $label$48 }
	$9 = ($8 + [1])
	$8 = ($10 - $9)
	if ( ((int_32)$8 >= (int_32)$5) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$46 }
	if ( ((int_32)($8 - $14) != (int_32)[-1]) ){ goto $label$45 }
	
.LABEL $label$46
	$9 = *($4 + [112])
	$11 = ($11 + [1])
	if ( ($11 <= ((int_32)(*($4 + [116]) - $9) / (int_32)[12])) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$45
	$9 = *($4 + [112])
	
.LABEL $label$41
	*(($4 + [264])) = [0]
	*($4 + [256]) = (int_64)0
	$5 = CALL $144([8826])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$26 }
	$9 = ($9 + ((int_32)$11 * (int_32)[12]))
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$51 }
	*($4 + [256]) = ($5 << [1])
	$8 = (($4 + [256]) | [1])
	if ( $5 ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$3 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($3)
	*($4 + [256]) = ($3 | [1])
	*($4 + [264]) = $8
	*($4 + [260]) = $5
	
.LABEL $label$50
	CALL memcpy($8, [8826], $5)
	
.LABEL $label$49
	*(($8 + $5)) = [0]
	CALL $35(($4 + [128]), $0, $9, ($4 + [256]))
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*($4 + [264]))
	
.LABEL $label$52
	CALL $117(($4 + [304]), (*($4 + [128]) + [12]))
	$9 = *($4 + [128])
	if ( ($9 == 0) ){ goto $label$40 }
	$8 = *($4 + [132])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$54 }
	
.LOOP $label$55:
	$5 = ($8 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$56 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$56
	$8 = $5
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$55 }
	$5 = *($4 + [128])
	goto $label$53 
	
.LABEL $label$54
	$5 = $9
	
.LABEL $label$53
	*($4 + [132]) = $9
	CALL _ZdlPv($5)
	
.LABEL $label$40
	CALL $123(($4 + [304]), [8828])
	$5 = *($4 + [304])
	CALL sha256(($4 + [304]), ( *($4 + [308]) ? uint_32($5 >> [1]) : ($5 & [1]) ), ($4 + [128]))
	$8 = CALL read_transaction([0], [0])
	$5 = CALL $147($8)
	CALL read_transaction($5, $8)
	CALL sha256($5, $8, ($4 + [256]))
	if ( ($5 == 0) ){ goto $label$57 }
	CALL _ZdlPv($5)
	
.LABEL $label$57
	*($4 + [456]) = [3]
	CALL $36($0, ($4 + [128]), ($4 + [256]), ($4 + [360]), ($4 + [320]), ($4 + [456]), ($0 + [616]))
	if ( (*($4 + [304]) & [1]) ){ goto $label$59 }
	if ( (*($4 + [88]) & [1]) ){ goto $label$58 }
	goto $label$25 
	
.LABEL $label$59
	CALL _ZdlPv(*($4 + [312]))
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$25 }
	
.LABEL $label$58
	CALL _ZdlPv(*($4 + [96]))
	$9 = *($4 + [112])
	if ( $9 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$29
	CALL $114(($4 + [128]))
	
.LABEL $label$28
	CALL $114(($4 + [88]))
	
.LABEL $label$27
	CALL $114(($4 + [304]))
	
.LABEL $label$26
	CALL $114(($4 + [256]))
	
.LABEL $label$25
	$9 = *($4 + [112])
	if ( ($9 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$8 = *($4 + [116])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$61 }
	
.LOOP $label$62:
	$5 = ($8 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$63
	$8 = $5
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$62 }
	$5 = *($4 + [112])
	goto $label$60 
	
.LABEL $label$61
	$5 = $9
	
.LABEL $label$60
	*($4 + [116]) = $9
	CALL _ZdlPv($5)
	
.LABEL $label$23
	*((($4 + [256]) + [16])) = (int_64)0
	*((($4 + [256]) + [32])) = [0]
	*($4 + [256]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [280]) = (int_64)0
	if ( (*($0 + [320]) == 0) ){ goto $label$66 }
	$1 = *($4 + [320])
	$5 = ($0 + [328])
	if ( ((uint_64)*(($5 + [16])) <= (uint_64)$1) ){ goto $label$65 }
	$16 = [186]
	goto $label$64 
	
.LABEL $label$66
	$16 = [2]
	goto $label$64 
	
.LABEL $label$65
	$16 = [183]
	
.LABEL $label$64
	
.LOOP $label$67:
	goto $label$399 
	
.LABEL $label$408
	$5 = ($5 + [32])
	if ( ((uint_64)*(($5 + [16])) > (uint_64)$1) ){ goto $label$68 }
	$16 = [183]
	goto $label$67 
	
.LABEL $label$407
	if ( (uint_64)(*(($5 + [24])) <= $1) ){ goto $label$221 }
	$16 = [184]
	goto $label$67 
	
.LABEL $label$406
	CALL $117(($4 + [256]), $5)
	if ( ((uint_32)*(($0 + [320])) <= (uint_32)[1]) ){ goto $label$216 }
	$16 = [185]
	goto $label$67 
	
.LABEL $label$405
	$1 = *($4 + [328])
	$5 = ($0 + [328])
	if ( ((uint_64)*(($5 + [16])) <= (uint_64)$1) ){ goto $label$70 }
	$16 = [182]
	goto $label$67 
	
.LABEL $label$404
	$5 = ($5 + [32])
	if ( ((uint_64)*(($5 + [16])) > (uint_64)$1) ){ goto $label$69 }
	$16 = [179]
	goto $label$67 
	
.LABEL $label$403
	if ( (uint_64)(*(($5 + [24])) <= $1) ){ goto $label$220 }
	$16 = [180]
	goto $label$67 
	
.LABEL $label$402
	CALL $117((($4 + [256]) | [12]), $5)
	if ( (*(($0 + [320])) <= [3]) ){ goto $label$215 }
	$16 = [181]
	goto $label$67 
	
.LABEL $label$401
	$1 = *($4 + [336])
	$5 = ($0 + [328])
	if ( ((uint_64)*(($5 + [16])) <= (uint_64)$1) ){ goto $label$218 }
	$16 = [178]
	goto $label$67 
	
.LABEL $label$400
	$5 = ($5 + [32])
	if ( ((uint_64)*(($5 + [16])) > (uint_64)$1) ){ goto $label$217 }
	$16 = [0]
	goto $label$67 
	
.LABEL $label$399
	if ( (uint_64)(*(($5 + [24])) <= $1) ){ goto $label$219 }
	$16 = [1]
	goto $label$67 
	
.LABEL $label$398
	CALL $117(($4 + [280]), $5)
	$16 = [2]
	goto $label$67 
	
.LABEL $label$397
	*($4 + [248]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*(($4 + [312])) = [0]
	*($4 + [304]) = (int_64)0
	$5 = CALL $144([8893])
	if ( ((uint_32)$5 > (uint_32)[-17]) ){ goto $label$214 }
	$16 = [3]
	goto $label$67 
	
.LABEL $label$396
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$213 }
	$16 = [176]
	goto $label$67 
	
.LABEL $label$395
	*($4 + [304]) = ($5 << [1])
	$8 = (($4 + [304]) | [1])
	if ( $5 ){ goto $label$211 }
	goto $label$212 
	
.LABEL $label$394
	$9 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($4 + [304]) = ($9 | [1])
	*($4 + [312]) = $8
	*($4 + [308]) = $5
	$16 = [5]
	goto $label$67 
	
.LABEL $label$393
	CALL memcpy($8, [8893], $5)
	$16 = [6]
	goto $label$67 
	
.LABEL $label$392
	*(($8 + $5)) = [0]
	*(($4 + [120])) = [0]
	*($4 + [112]) = (int_64)0
	$5 = CALL $144([8825])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$210 }
	$16 = [7]
	goto $label$67 
	
.LABEL $label$391
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$209 }
	$16 = [174]
	goto $label$67 
	
.LABEL $label$390
	*($4 + [112]) = ($5 << [1])
	$8 = (($4 + [112]) | [1])
	if ( $5 ){ goto $label$207 }
	goto $label$208 
	
.LABEL $label$389
	$9 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($4 + [112]) = ($9 | [1])
	*($4 + [120]) = $8
	*($4 + [116]) = $5
	$16 = [9]
	goto $label$67 
	
.LABEL $label$388
	CALL memcpy($8, [8825], $5)
	$16 = [10]
	goto $label$67 
	
.LABEL $label$387
	$15 = ($4 + [280])
	$10 = (($4 + [256]) | [12])
	*(($8 + $5)) = [0]
	$8 = ($5 & [1])
	$5 = *($4 + [268])
	$3 = ($11 & [1])
	$11 = *($4 + [256])
	$9 = uint_32($11 >> [1])
	$14 = *($4 + [260])
	$12 = ( $14 ? $9 : $3 )
	if ( ((int_32)$12 != (int_32)( *(($4 + [272])) ? uint_32($5 >> [1]) : $8 )) ){ goto $label$206 }
	$16 = [166]
	goto $label$67 
	
.LABEL $label$386
	$5 = (($4 + [256]) | [1])
	$8 = ( *(($4 + [276])) ? ($10 + [1]) : $8 )
	if ( $3 ){ goto $label$71 }
	$16 = [170]
	goto $label$67 
	
.LABEL $label$385
	if ( ($12 == 0) ){ goto $label$110 }
	$16 = [171]
	goto $label$67 
	
.LABEL $label$384
	$3 = ([0] - $9)
	$16 = [172]
	goto $label$67 
	
.LABEL $label$383
	if ( ((int_32)*($5) != (int_32)*($8)) ){ goto $label$205 }
	$16 = [173]
	goto $label$67 
	
.LABEL $label$382
	$8 = ($8 + [1])
	$5 = ($5 + [1])
	$3 = ($3 + [1])
	if ( $3 ){ goto $label$100 }
	goto $label$101 
	
.LABEL $label$381
	if ( ($12 == 0) ){ goto $label$112 }
	$16 = [168]
	goto $label$67 
	
.LABEL $label$380
	if ( (CALL $143(( *($4 + [264]) ? $5 : $3 ), $8, $12) == 0) ){ goto $label$111 }
	$16 = [169]
	goto $label$67 
	
.LABEL $label$379
	$11 = *($4 + [256])
	$9 = uint_32($11 >> [1])
	$14 = *($4 + [260])
	$16 = [11]
	goto $label$67 
	
.LABEL $label$378
	$3 = ($5 & [1])
	$5 = *(($4 + [280]))
	$14 = uint_32($5 >> [1])
	$11 = *(($4 + [284]))
	$12 = ($11 & [1])
	$13 = ( $14 ? $9 : $12 )
	if ( ((int_32)$13 != (int_32)( $11 ? $14 : $3 )) ){ goto $label$204 }
	$16 = [158]
	goto $label$67 
	
.LABEL $label$377
	$5 = (($4 + [256]) | [1])
	$8 = ( *(($4 + [288])) ? ($15 + [1]) : $3 )
	if ( $12 ){ goto $label$72 }
	$16 = [162]
	goto $label$67 
	
.LABEL $label$376
	if ( ($13 == 0) ){ goto $label$107 }
	$16 = [163]
	goto $label$67 
	
.LABEL $label$375
	$16 = [164]
	goto $label$67 
	
.LABEL $label$374
	if ( ((int_32)*($5) != (int_32)*($8)) ){ goto $label$203 }
	$16 = [165]
	goto $label$67 
	
.LABEL $label$373
	$8 = ($8 + [1])
	$5 = ($5 + [1])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$102 }
	goto $label$103 
	
.LABEL $label$372
	if ( ($13 == 0) ){ goto $label$109 }
	$16 = [160]
	goto $label$67 
	
.LABEL $label$371
	if ( (CALL $143(( *($4 + [264]) ? $5 : $12 ), $8, $13) == 0) ){ goto $label$108 }
	$16 = [161]
	goto $label$67 
	
.LABEL $label$370
	$5 = *(($4 + [280]))
	$14 = uint_32($5 >> [1])
	$3 = ($5 & [1])
	$11 = *(($4 + [284]))
	$16 = [12]
	goto $label$67 
	
.LABEL $label$369
	$9 = ($5 & [1])
	$5 = *($4 + [268])
	$13 = uint_32($5 >> [1])
	$12 = ( *(($4 + [272])) ? $13 : $9 )
	if ( ((int_32)$12 != (int_32)( $11 ? $14 : $3 )) ){ goto $label$202 }
	$16 = [116]
	goto $label$67 
	
.LABEL $label$368
	$5 = ( *(($4 + [288])) ? ($15 + [1]) : $3 )
	$8 = ($10 + [1])
	if ( $9 ){ goto $label$114 }
	$16 = [154]
	goto $label$67 
	
.LABEL $label$367
	if ( ($12 == 0) ){ goto $label$106 }
	$16 = [155]
	goto $label$67 
	
.LABEL $label$366
	$9 = ([0] - $13)
	$16 = [156]
	goto $label$67 
	
.LABEL $label$365
	if ( ((int_32)*($8) != (int_32)*($5)) ){ goto $label$200 }
	$16 = [157]
	goto $label$67 
	
.LABEL $label$364
	$5 = ($5 + [1])
	$8 = ($8 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$104 }
	goto $label$105 
	
.LABEL $label$363
	if ( ($12 == 0) ){ goto $label$113 }
	$16 = [118]
	goto $label$67 
	
.LABEL $label$362
	if ( (CALL $143(( *(($4 + [276])) ? $8 : $9 ), $5, $12) == 0) ){ goto $label$201 }
	$16 = [13]
	goto $label$67 
	
.LABEL $label$361
	$5 = *(( *($4 + [264]) ? (($4 + [256]) | [1]) : (*($4 + [256]) & [1]) ))
	if ( ((int_32)$5 == (int_32)[55]) ){ goto $label$199 }
	$16 = [14]
	goto $label$67 
	
.LABEL $label$360
	if ( ((int_32)$5 != (int_32)[66]) ){ goto $label$198 }
	$16 = [108]
	goto $label$67 
	
.LABEL $label$359
	if ( ((int_32)*(( *(($4 + [276])) ? ($10 + [1]) : (*($4 + [268]) & [1]) )) != (int_32)[66]) ){ goto $label$196 }
	$16 = [109]
	goto $label$67 
	
.LABEL $label$358
	if ( ((int_32)*(( *(($4 + [288])) ? ($15 + [1]) : (*(($4 + [280])) & [1]) )) != (int_32)[66]) ){ goto $label$195 }
	$16 = [110]
	goto $label$67 
	
.LABEL $label$357
	CALL $120(($4 + [112]), [8898])
	goto $label$193 
	
.LABEL $label$356
	$5 = ($5 & [1])
	$5 = *($4 + [268])
	$8 = ($11 & [1])
	$11 = *($4 + [256])
	$3 = uint_32($11 >> [1])
	$12 = *($4 + [260])
	$9 = ( $12 ? $3 : $8 )
	if ( ((int_32)$9 != (int_32)( *(($4 + [272])) ? uint_32($5 >> [1]) : $5 )) ){ goto $label$99 }
	$16 = [134]
	goto $label$67 
	
.LABEL $label$355
	$14 = (($4 + [256]) | [1])
	$5 = ( *(($4 + [276])) ? ($10 + [1]) : $5 )
	if ( $8 ){ goto $label$84 }
	$16 = [150]
	goto $label$67 
	
.LABEL $label$354
	if ( ($9 == 0) ){ goto $label$82 }
	$16 = [151]
	goto $label$67 
	
.LABEL $label$353
	$9 = ([0] - $3)
	$8 = $14
	$16 = [152]
	goto $label$67 
	
.LABEL $label$352
	if ( ((int_32)*($8) != (int_32)*($5)) ){ goto $label$96 }
	$16 = [153]
	goto $label$67 
	
.LABEL $label$351
	$5 = ($5 + [1])
	$8 = ($8 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$80 }
	goto $label$81 
	
.LABEL $label$350
	$14 = (($4 + [256]) | [1])
	goto $label$98 
	
.LABEL $label$349
	if ( ($9 == 0) ){ goto $label$83 }
	$16 = [136]
	goto $label$67 
	
.LABEL $label$348
	if ( CALL $143(( *($4 + [264]) ? $14 : $8 ), $5, $9) ){ goto $label$95 }
	$16 = [137]
	goto $label$67 
	
.LABEL $label$347
	$11 = *($4 + [256])
	$3 = uint_32($11 >> [1])
	$12 = *($4 + [260])
	$16 = [138]
	goto $label$67 
	
.LABEL $label$346
	$5 = ($5 & [1])
	$5 = *(($4 + [280]))
	$8 = ($11 & [1])
	$9 = ( $12 ? $3 : $8 )
	if ( ((int_32)$9 != (int_32)( *(($4 + [284])) ? uint_32($5 >> [1]) : $5 )) ){ goto $label$94 }
	$16 = [139]
	goto $label$67 
	
.LABEL $label$345
	$5 = ( *(($4 + [288])) ? ($15 + [1]) : $5 )
	if ( $8 ){ goto $label$79 }
	$16 = [146]
	goto $label$67 
	
.LABEL $label$344
	if ( ($9 == 0) ){ goto $label$77 }
	$16 = [147]
	goto $label$67 
	
.LABEL $label$343
	$8 = $14
	$16 = [148]
	goto $label$67 
	
.LABEL $label$342
	if ( ((int_32)*($8) != (int_32)*($5)) ){ goto $label$93 }
	$16 = [149]
	goto $label$67 
	
.LABEL $label$341
	$5 = ($5 + [1])
	$8 = ($8 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$75 }
	goto $label$76 
	
.LABEL $label$340
	$8 = ($10 + [1])
	$5 = ($4 + [276])
	if ( ((int_32)*(( *($5) ? $8 : (*($4 + [268]) & [1]) )) != (int_32)[55]) ){ goto $label$116 }
	$16 = [114]
	goto $label$67 
	
.LABEL $label$339
	if ( ((int_32)*(( *(($4 + [288])) ? ($15 + [1]) : (*(($4 + [280])) & [1]) )) != (int_32)[55]) ){ goto $label$115 }
	$16 = [115]
	goto $label$67 
	
.LABEL $label$338
	CALL $120(($4 + [112]), [8904])
	goto $label$194 
	
.LABEL $label$337
	if ( ((int_32)*(( *($5) ? $8 : (*($4 + [268]) & [1]) )) == (int_32)[55]) ){ goto $label$117 }
	$16 = [113]
	goto $label$67 
	
.LABEL $label$336
	if ( ((int_32)*(( *(($4 + [288])) ? ($15 + [1]) : (*(($4 + [280])) & [1]) )) == (int_32)[55]) ){ goto $label$197 }
	$16 = [15]
	goto $label$67 
	
.LABEL $label$335
	if ( ((int_32)*(( *(($4 + [276])) ? ($10 + [1]) : (*($4 + [268]) & [1]) )) != (int_32)[55]) ){ goto $label$192 }
	$16 = [106]
	goto $label$67 
	
.LABEL $label$334
	if ( ((int_32)*(( *(($4 + [288])) ? ($15 + [1]) : (*(($4 + [280])) & [1]) )) != (int_32)[55]) ){ goto $label$191 }
	$16 = [107]
	goto $label$67 
	
.LABEL $label$333
	CALL $120(($4 + [112]), [8908])
	goto $label$190 
	
.LABEL $label$332
	if ( ($9 == 0) ){ goto $label$78 }
	$16 = [141]
	goto $label$67 
	
.LABEL $label$331
	if ( (CALL $143(( *($4 + [264]) ? $14 : $8 ), $5, $9) == 0) ){ goto $label$97 }
	$16 = [121]
	goto $label$67 
	
.LABEL $label$330
	$5 = *(( *($4 + [264]) ? $14 : (*($4 + [256]) & [1]) ))
	if ( ((int_32)$5 == (int_32)[66]) ){ goto $label$92 }
	$16 = [122]
	goto $label$67 
	
.LABEL $label$329
	if ( ((int_32)$5 != (int_32)[55]) ){ goto $label$91 }
	$16 = [126]
	goto $label$67 
	
.LABEL $label$328
	$8 = ($10 + [1])
	$5 = ($4 + [276])
	if ( ((int_32)*(( *($5) ? $8 : (*($4 + [268]) & [1]) )) != (int_32)[55]) ){ goto $label$86 }
	$16 = [129]
	goto $label$67 
	
.LABEL $label$327
	if ( ((int_32)*(( *(($4 + [288])) ? ($15 + [1]) : (*(($4 + [280])) & [1]) )) != (int_32)[55]) ){ goto $label$85 }
	$16 = [130]
	goto $label$67 
	
.LABEL $label$326
	CALL $120(($4 + [112]), [8904])
	goto $label$188 
	
.LABEL $label$325
	if ( ((int_32)*(( *(($4 + [276])) ? ($10 + [1]) : (*($4 + [268]) & [1]) )) != (int_32)[66]) ){ goto $label$90 }
	$16 = [132]
	goto $label$67 
	
.LABEL $label$324
	if ( ((int_32)*(( *(($4 + [288])) ? ($15 + [1]) : (*(($4 + [280])) & [1]) )) != (int_32)[66]) ){ goto $label$89 }
	$16 = [133]
	goto $label$67 
	
.LABEL $label$323
	CALL $120(($4 + [112]), [8898])
	goto $label$189 
	
.LABEL $label$322
	if ( ((int_32)*(( *($5) ? $8 : (*($4 + [268]) & [1]) )) == (int_32)[55]) ){ goto $label$87 }
	$16 = [128]
	goto $label$67 
	
.LABEL $label$321
	if ( ((int_32)*(( *(($4 + [288])) ? ($15 + [1]) : (*(($4 + [280])) & [1]) )) == (int_32)[55]) ){ goto $label$88 }
	$16 = [123]
	goto $label$67 
	
.LABEL $label$320
	if ( ((int_32)*(( *(($4 + [276])) ? ($10 + [1]) : (*($4 + [268]) & [1]) )) != (int_32)[55]) ){ goto $label$187 }
	$16 = [124]
	goto $label$67 
	
.LABEL $label$319
	if ( ((int_32)*(( *(($4 + [288])) ? ($15 + [1]) : (*(($4 + [280])) & [1]) )) != (int_32)[55]) ){ goto $label$186 }
	$16 = [125]
	goto $label$67 
	
.LABEL $label$318
	CALL $120(($4 + [112]), [8908])
	goto $label$185 
	
.LABEL $label$317
	CALL $37(($4 + [128]), ($4 + [256]), [8912])
	if ( (*($4 + [112]) & [1]) ){ goto $label$74 }
	$16 = [145]
	goto $label$67 
	
.LABEL $label$316
	*($4 + [112]) = [0]
	goto $label$73 
	
.LABEL $label$315
	*(*($4 + [120])) = [0]
	*($4 + [116]) = [0]
	$16 = [144]
	goto $label$67 
	
.LABEL $label$314
	CALL $119(($4 + [112]), [0])
	*((($4 + [112]) + [8])) = *((($4 + [128]) + [8]))
	*($4 + [112]) = *($4 + [128])
	$16 = [16]
	goto $label$67 
	
.LABEL $label$313
	$5 = *($4 + [112])
	$8 = CALL $144([8825])
	if ( ((int_32)$8 != (int_32)( *($4 + [116]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$184 }
	$16 = [105]
	goto $label$67 
	
.LABEL $label$312
	if ( (CALL $126(($4 + [112]), [0], [-1], [8825], $8) == 0) ){ goto $label$183 }
	$16 = [17]
	goto $label$67 
	
.LABEL $label$311
	$8 = ($0 + [1392])
	$9 = CALL $38($8, ($4 + [128]), ($4 + [112]))
	$5 = *($9)
	if ( $5 ){ goto $label$182 }
	$16 = [102]
	goto $label$67 
	
.LABEL $label$310
	$5 = CALL _Znwj([32])
	CALL $115(($5 + [16]), ($4 + [112]))
	*($5) = (int_64)0
	*($5 + [8]) = *($4 + [128])
	*($9) = $5
	*($5 + [28]) = [0]
	$3 = $5
	$11 = *(*($8))
	if ( ($11 == 0) ){ goto $label$118 }
	$16 = [103]
	goto $label$67 
	
.LABEL $label$309
	*($8) = $11
	$3 = *($9)
	$16 = [104]
	goto $label$67 
	
.LABEL $label$308
	CALL $39(*(($0 + [1396])), $3)
	*(($8 = ($0 + [1400]))) = (*($8) + [1])
	$16 = [18]
	goto $label$67 
	
.LABEL $label$307
	$5 = ($0 + (*(($5 + [28])) << [5]))
	*($4 + [128]) = *(($5 + [1008]))
	$8 = CALL $115((($4 + [128]) | [4]), ($5 + [1012]))
	$1 = *(($5 + [1024]))
	*($4 + [144]) = $1
	*($4 + [248]) = $1
	$1 = *(($5 + [1032]))
	*($4 + [152]) = $1
	*($4 + [240]) = $1
	CALL $120(($4 + [304]), [8915])
	if ( ((*($8) & [1]) == 0) ){ goto $label$181 }
	$16 = [19]
	goto $label$67 
	
.LABEL $label$306
	CALL _ZdlPv(*(($4 + [140])))
	$16 = [20]
	goto $label$67 
	
.LABEL $label$305
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$180 }
	$16 = [21]
	goto $label$67 
	
.LABEL $label$304
	CALL _ZdlPv(*($4 + [120]))
	$16 = [22]
	goto $label$67 
	
.LABEL $label$303
	$1 = *($0)
	*($4 + [136]) = $2
	*($4 + [132]) = ($4 + [448])
	*($4 + [128]) = ($4 + [352])
	*($4 + [140]) = ($4 + [256])
	*($4 + [144]) = ($4 + [248])
	*($4 + [148]) = ($4 + [240])
	CALL $40(($4 + [112]), ($4 + [376]), $1, ($4 + [128]))
	$17 = *($4 + [248])
	if ( ((int_32)((float_64)$17 > (float_64)(float_64)0.0001) ^ (int_32)[1]) ){ goto $label$179 }
	$16 = [98]
	goto $label$67 
	
.LABEL $label$302
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)9223372036854775808) ){ goto $label$120 }
	$16 = [101]
	goto $label$67 
	
.LABEL $label$301
	$1 = (int_64)-9223372036854775808
	goto $label$119 
	
.LABEL $label$300
	$7 = (int_64)0
	$6 = (int_64)0
	if ( ((int_32)((float_64)*($4 + [240]) > (float_64)(float_64)1e-07) ^ (int_32)[1]) ){ goto $label$178 }
	$16 = [58]
	goto $label$67 
	
.LABEL $label$299
	$5 = CALL $144([8318])
	if ( ($5 <= [8]) ){ goto $label$146 }
	$16 = [97]
	goto $label$67 
	
.LABEL $label$298
	CALL eosio_assert([0], [8960])
	goto $label$144 
	
.LABEL $label$297
	$1 = (Rounds 0)($17)
	$16 = [100]
	goto $label$67 
	
.LABEL $label$296
	$7 = *($2)
	CALL __multi3(($4 + [40]), $7, (int_64)$7 >> (int_64)63), $1, (int_64)$1 >> (int_64)63))
	$6 = *(($2 + [8]))
	$1 = *((($4 + [40]) + [8]))
	$7 = *($4 + [40])
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [9296])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [9320])
	goto $label$177 
	
.LABEL $label$295
	if ( ($5 == 0) ){ goto $label$145 }
	$16 = [60]
	goto $label$67 
	
.LABEL $label$294
	$1 = (int_64)0
	$16 = [61]
	goto $label$67 
	
.LABEL $label$293
	$8 = *(($5 + [8317]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$142 }
	$16 = [95]
	goto $label$67 
	
.LABEL $label$292
	CALL eosio_assert([0], [9005])
	$16 = [62]
	goto $label$67 
	
.LABEL $label$291
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$143 }
	$16 = [63]
	goto $label$67 
	
.LABEL $label$290
	*(($4 + [160])) = [0]
	*($4 + [144]) = (int_64)-1
	*($4 + [152]) = (int_64)0
	$7 = *($0)
	*($4 + [128]) = $7
	*($4 + [136]) = $7
	$5 = [0]
	$8 = CALL db_find_i64($7, $7, (int_64)3607749779137757184, ((int_64)$1 & (int_64)72057594037927935))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$140 }
	$16 = [64]
	goto $label$67 
	
.LABEL $label$289
	$5 = CALL $41(($4 + [128]), $8)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [128])), [8342])
	$16 = [65]
	goto $label$67 
	
.LABEL $label$288
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8919])
	$1 = *($5)
	$17 = *($4 + [240])
	$5 = CALL $144([8318])
	$8 = ($5 <= [8])
	$17 = ((float_64)$17 * (float_64)(CASTING float_64)(uint_64 $1))
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)9223372036854775808) ){ goto $label$139 }
	$16 = [94]
	goto $label$67 
	
.LABEL $label$287
	$7 = (int_64)-9223372036854775808
	if ( ($8 == 0) ){ goto $label$137 }
	$16 = [67]
	goto $label$67 
	
.LABEL $label$286
	if ( $5 ){ goto $label$136 }
	$16 = [92]
	goto $label$67 
	
.LABEL $label$285
	$6 = (int_64)0
	goto $label$133 
	
.LABEL $label$284
	$7 = (Rounds 0)($17)
	if ( $8 ){ goto $label$138 }
	$16 = [93]
	goto $label$67 
	
.LABEL $label$283
	CALL eosio_assert([0], [8960])
	$16 = [68]
	goto $label$67 
	
.LABEL $label$282
	$1 = (int_64)0
	$16 = [69]
	goto $label$67 
	
.LABEL $label$281
	$8 = *(($5 + [8317]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$134 }
	$16 = [91]
	goto $label$67 
	
.LABEL $label$280
	CALL eosio_assert([0], [9005])
	$16 = [70]
	goto $label$67 
	
.LABEL $label$279
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$135 }
	$16 = [71]
	goto $label$67 
	
.LABEL $label$278
	$6 = ((int_64)$1 << (int_64)8)
	$16 = [72]
	goto $label$67 
	
.LABEL $label$277
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9345])
	$1 = (uint_64)$6 >> (uint_64)(int_64)8)
	$6 = ((int_64)$6 | (int_64)4)
	$5 = [0]
	$16 = [73]
	goto $label$67 
	
.LABEL $label$276
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$128 }
	$16 = [83]
	goto $label$67 
	
.LABEL $label$275
	$18 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$123 }
	$16 = [84]
	goto $label$67 
	
.LABEL $label$274
	$1 = $18
	$3 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$130 }
	goto $label$129 
	
.LABEL $label$273
	$1 = $18
	$16 = [87]
	goto $label$67 
	
.LABEL $label$272
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$121 }
	$16 = [89]
	goto $label$67 
	
.LABEL $label$271
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $8 ){ goto $label$122 }
	$16 = [90]
	goto $label$67 
	
.LABEL $label$270
	$3 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$132 }
	goto $label$131 
	
.LABEL $label$269
	$3 = [0]
	$16 = [85]
	goto $label$67 
	
.LABEL $label$268
	CALL eosio_assert($3, [8678])
	$9 = *($4 + [152])
	if ( ($9 == 0) ){ goto $label$176 }
	$16 = [75]
	goto $label$67 
	
.LABEL $label$267
	$3 = ($4 + [156])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$127 }
	$16 = [76]
	goto $label$67 
	
.LABEL $label$266
	$16 = [77]
	goto $label$67 
	
.LABEL $label$265
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$125 }
	$16 = [78]
	goto $label$67 
	
.LABEL $label$264
	CALL _ZdlPv($8)
	$16 = [79]
	goto $label$67 
	
.LABEL $label$263
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$126 }
	$16 = [80]
	goto $label$67 
	
.LABEL $label$262
	$5 = *(($4 + [152]))
	goto $label$124 
	
.LABEL $label$261
	$5 = $9
	$16 = [81]
	goto $label$67 
	
.LABEL $label$260
	*($3) = $9
	CALL _ZdlPv($5)
	$16 = [24]
	goto $label$67 
	
.LABEL $label$259
	$1 = *($4 + [448])
	CALL $37(($4 + [88]), ($4 + [256]), [8941])
	$5 = *($4 + [268])
	$8 = ($5 & [1])
	$5 = CALL $125(($4 + [88]), ( *(($4 + [276])) ? ($10 + [1]) : $8 ), ( *(($4 + [272])) ? uint_32($5 >> [1]) : $8 ))
	$8 = ($5 + [8])
	*((($4 + [112]) + [8])) = *($8)
	*($4 + [112]) = *($5)
	*($5) = (int_64)0
	*($8) = [0]
	$5 = CALL $123(($4 + [112]), [8941])
	$8 = ($5 + [8])
	*((($4 + [128]) + [8])) = *($8)
	*($4 + [128]) = *($5)
	*($5) = (int_64)0
	*($8) = [0]
	$5 = *(($4 + [280]))
	$8 = ($5 & [1])
	$5 = CALL $125(($4 + [128]), ( *(($4 + [288])) ? ($15 + [1]) : $8 ), ( *(($4 + [284])) ? uint_32($5 >> [1]) : $8 ))
	$8 = ($5 + [8])
	*((($4 + [224]) + [8])) = *($8)
	*($4 + [224]) = *($5)
	*($5) = (int_64)0
	*($8) = [0]
	$5 = CALL $115(($4 + [208]), ($4 + [304]))
	*((($4 + [24]) + [8])) = $6
	*($4 + [200]) = $6
	*($4 + [24]) = $7
	*($4 + [192]) = $7
	CALL $42($0, $1, ($4 + [224]), $5, ($4 + [24]))
	if ( (*($5) & [1]) ){ goto $label$173 }
	$16 = [57]
	goto $label$67 
	
.LABEL $label$258
	if ( (*($4 + [224]) & [1]) ){ goto $label$172 }
	$16 = [56]
	goto $label$67 
	
.LABEL $label$257
	$5 = [1]
	if ( (*($4 + [128]) & [1]) ){ goto $label$170 }
	$16 = [55]
	goto $label$67 
	
.LABEL $label$256
	if ( (*($4 + [112]) & $5) ){ goto $label$168 }
	$16 = [54]
	goto $label$67 
	
.LABEL $label$255
	$5 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$166 }
	$16 = [29]
	goto $label$67 
	
.LABEL $label$254
	CALL _ZdlPv(*($4 + [96]))
	$16 = [30]
	goto $label$67 
	
.LABEL $label$253
	$1 = CALL current_time()
	*(($4 + [156])) = (int_64)0
	*(($4 + [172])) = (int_64)0
	*(($4 + [180])) = (int_64)0
	*($4 + [140]) = [0]
	*($4 + [144]) = [0]
	*($4 + [148 align=4]) = (int_64)0
	*($4 + [164 align=4]) = (int_64)0
	*($4 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	$1 = *($0)
	*($4 + [88]) = [8943]
	*($4 + [92]) = CALL $144([8943])
	*($4 + [16]) = *($4 + [88])
	*($4 + [120]) = *(CALL $4(($4 + [112]), ($4 + [16])))
	*($4 + [112]) = $1
	*($4 + [104]) = *($0)
	*($4 + [456]) = [8950]
	*($4 + [460]) = CALL $144([8950])
	*($4 + [8]) = *($4 + [456])
	*($4 + [456]) = *(CALL $4(($4 + [88]), ($4 + [8])))
	*($4 + [88]) = *($4 + [352])
	*($4 + [96]) = *($4 + [448])
	CALL $43(($4 + [164]), ($4 + [112]), ($4 + [104]), ($4 + [456]), ($4 + [88]))
	$1 = *($0)
	$7 = *($4 + [448])
	*($4 + [148]) = $5
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = $7
	CALL $44(($4 + [88]), ($4 + [128]))
	$5 = *($4 + [88])
	CALL send_deferred(($4 + [112]), $1, $5, (*($4 + [92]) - $5), [0])
	$5 = *($4 + [88])
	if ( ($5 == 0) ){ goto $label$163 }
	$16 = [31]
	goto $label$67 
	
.LABEL $label$252
	*($4 + [92]) = $5
	CALL _ZdlPv($5)
	$16 = [32]
	goto $label$67 
	
.LABEL $label$251
	CALL $45(($4 + [128]))
	if ( (*($4 + [304]) & [1]) ){ goto $label$162 }
	$16 = [53]
	goto $label$67 
	
.LABEL $label$250
	if ( (*($4 + [280]) & [1]) ){ goto $label$161 }
	$16 = [52]
	goto $label$67 
	
.LABEL $label$249
	$5 = [1]
	if ( (*($4 + [268]) & [1]) ){ goto $label$159 }
	$16 = [51]
	goto $label$67 
	
.LABEL $label$248
	if ( (*($4 + [256]) & $5) ){ goto $label$157 }
	$16 = [50]
	goto $label$67 
	
.LABEL $label$247
	if ( (*($4 + [360]) & [1]) ){ goto $label$155 }
	$16 = [49]
	goto $label$67 
	
.LABEL $label$246
	$9 = *($4 + [400])
	if ( ($9 == 0) ){ goto $label$153 }
	$16 = [38]
	goto $label$67 
	
.LABEL $label$245
	$3 = ($4 + [404])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$151 }
	$16 = [39]
	goto $label$67 
	
.LABEL $label$244
	$16 = [40]
	goto $label$67 
	
.LABEL $label$243
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$149 }
	$16 = [41]
	goto $label$67 
	
.LABEL $label$242
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$148 }
	$16 = [42]
	goto $label$67 
	
.LABEL $label$241
	CALL _ZdlPv(*(($8 + [40])))
	$16 = [43]
	goto $label$67 
	
.LABEL $label$240
	CALL _ZdlPv($8)
	$16 = [44]
	goto $label$67 
	
.LABEL $label$239
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$150 }
	$16 = [45]
	goto $label$67 
	
.LABEL $label$238
	$5 = *(($4 + [400]))
	goto $label$147 
	
.LABEL $label$237
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$171 }
	$16 = [26]
	goto $label$67 
	
.LABEL $label$236
	CALL _ZdlPv(*($4 + [232]))
	$5 = [1]
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$169 }
	$16 = [27]
	goto $label$67 
	
.LABEL $label$235
	CALL _ZdlPv(*($4 + [136]))
	if ( ((*($4 + [112]) & $5) == 0) ){ goto $label$167 }
	$16 = [28]
	goto $label$67 
	
.LABEL $label$234
	CALL _ZdlPv(*($4 + [120]))
	$5 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$164 }
	goto $label$165 
	
.LABEL $label$233
	CALL _ZdlPv(*($4 + [312]))
	if ( ((*($4 + [280]) & [1]) == 0) ){ goto $label$160 }
	$16 = [34]
	goto $label$67 
	
.LABEL $label$232
	CALL _ZdlPv(*(($4 + [288])))
	$5 = [1]
	if ( ((*($4 + [268]) & [1]) == 0) ){ goto $label$158 }
	$16 = [35]
	goto $label$67 
	
.LABEL $label$231
	CALL _ZdlPv(*(($4 + [276])))
	if ( ((*($4 + [256]) & $5) == 0) ){ goto $label$156 }
	$16 = [36]
	goto $label$67 
	
.LABEL $label$230
	CALL _ZdlPv(*($4 + [264]))
	if ( ((*($4 + [360]) & [1]) == 0) ){ goto $label$154 }
	$16 = [37]
	goto $label$67 
	
.LABEL $label$229
	CALL _ZdlPv(*(($4 + [368])))
	$9 = *($4 + [400])
	if ( $9 ){ goto $label$152 }
	$16 = [48]
	goto $label$67 
	
.LABEL $label$228
	$global$0 = ($4 + [464])
	return (unreachable)
	
.LABEL $label$227
	$5 = $9
	$16 = [46]
	goto $label$67 
	
.LABEL $label$226
	*($3) = $9
	CALL _ZdlPv($5)
	$global$0 = ($4 + [464])
	return (unreachable)
	
.LABEL $label$225
	$1 = (int_64)0
	goto $label$141 
	
.LABEL $label$224
	CALL eosio_assert([0], [8678])
	$9 = *($4 + [152])
	if ( $9 ){ goto $label$174 }
	goto $label$175 
	
.LABEL $label$223
	CALL $114(($4 + [304]))
	
.LABEL $label$222
	CALL $114(($4 + [112]))
	
.LABEL $label$221
	$16 = [186]
	goto $label$67 
	
.LABEL $label$220
	$16 = [182]
	goto $label$67 
	
.LABEL $label$219
	$16 = [178]
	goto $label$67 
	
.LABEL $label$218
	$16 = [0]
	goto $label$67 
	
.LABEL $label$217
	$16 = [178]
	goto $label$67 
	
.LABEL $label$216
	$16 = [2]
	goto $label$67 
	
.LABEL $label$215
	$16 = [2]
	goto $label$67 
	
.LABEL $label$214
	$16 = [177]
	goto $label$67 
	
.LABEL $label$213
	$16 = [4]
	goto $label$67 
	
.LABEL $label$212
	$16 = [6]
	goto $label$67 
	
.LABEL $label$211
	$16 = [5]
	goto $label$67 
	
.LABEL $label$210
	$16 = [175]
	goto $label$67 
	
.LABEL $label$209
	$16 = [8]
	goto $label$67 
	
.LABEL $label$208
	$16 = [10]
	goto $label$67 
	
.LABEL $label$207
	$16 = [9]
	goto $label$67 
	
.LABEL $label$206
	$16 = [11]
	goto $label$67 
	
.LABEL $label$205
	$16 = [11]
	goto $label$67 
	
.LABEL $label$204
	$16 = [12]
	goto $label$67 
	
.LABEL $label$203
	$16 = [12]
	goto $label$67 
	
.LABEL $label$202
	$16 = [13]
	goto $label$67 
	
.LABEL $label$201
	$16 = [119]
	goto $label$67 
	
.LABEL $label$200
	$16 = [13]
	goto $label$67 
	
.LABEL $label$199
	$16 = [111]
	goto $label$67 
	
.LABEL $label$198
	$16 = [15]
	goto $label$67 
	
.LABEL $label$197
	$16 = [107]
	goto $label$67 
	
.LABEL $label$196
	$16 = [15]
	goto $label$67 
	
.LABEL $label$195
	$16 = [15]
	goto $label$67 
	
.LABEL $label$194
	$16 = [16]
	goto $label$67 
	
.LABEL $label$193
	$16 = [16]
	goto $label$67 
	
.LABEL $label$192
	$16 = [16]
	goto $label$67 
	
.LABEL $label$191
	$16 = [16]
	goto $label$67 
	
.LABEL $label$190
	$16 = [16]
	goto $label$67 
	
.LABEL $label$189
	$16 = [16]
	goto $label$67 
	
.LABEL $label$188
	$16 = [16]
	goto $label$67 
	
.LABEL $label$187
	$16 = [16]
	goto $label$67 
	
.LABEL $label$186
	$16 = [16]
	goto $label$67 
	
.LABEL $label$185
	$16 = [16]
	goto $label$67 
	
.LABEL $label$184
	$16 = [17]
	goto $label$67 
	
.LABEL $label$183
	$16 = [20]
	goto $label$67 
	
.LABEL $label$182
	$16 = [18]
	goto $label$67 
	
.LABEL $label$181
	$16 = [20]
	goto $label$67 
	
.LABEL $label$180
	$16 = [22]
	goto $label$67 
	
.LABEL $label$179
	$16 = [23]
	goto $label$67 
	
.LABEL $label$178
	$16 = [24]
	goto $label$67 
	
.LABEL $label$177
	$16 = [24]
	goto $label$67 
	
.LABEL $label$176
	$16 = [24]
	goto $label$67 
	
.LABEL $label$175
	$16 = [24]
	goto $label$67 
	
.LABEL $label$174
	$16 = [75]
	goto $label$67 
	
.LABEL $label$173
	$16 = [25]
	goto $label$67 
	
.LABEL $label$172
	$16 = [26]
	goto $label$67 
	
.LABEL $label$171
	$16 = [56]
	goto $label$67 
	
.LABEL $label$170
	$16 = [27]
	goto $label$67 
	
.LABEL $label$169
	$16 = [55]
	goto $label$67 
	
.LABEL $label$168
	$16 = [28]
	goto $label$67 
	
.LABEL $label$167
	$16 = [54]
	goto $label$67 
	
.LABEL $label$166
	$16 = [30]
	goto $label$67 
	
.LABEL $label$165
	$16 = [30]
	goto $label$67 
	
.LABEL $label$164
	$16 = [29]
	goto $label$67 
	
.LABEL $label$163
	$16 = [32]
	goto $label$67 
	
.LABEL $label$162
	$16 = [33]
	goto $label$67 
	
.LABEL $label$161
	$16 = [34]
	goto $label$67 
	
.LABEL $label$160
	$16 = [52]
	goto $label$67 
	
.LABEL $label$159
	$16 = [35]
	goto $label$67 
	
.LABEL $label$158
	$16 = [51]
	goto $label$67 
	
.LABEL $label$157
	$16 = [36]
	goto $label$67 
	
.LABEL $label$156
	$16 = [50]
	goto $label$67 
	
.LABEL $label$155
	$16 = [37]
	goto $label$67 
	
.LABEL $label$154
	$16 = [49]
	goto $label$67 
	
.LABEL $label$153
	$16 = [48]
	goto $label$67 
	
.LABEL $label$152
	$16 = [38]
	goto $label$67 
	
.LABEL $label$151
	$16 = [47]
	goto $label$67 
	
.LABEL $label$150
	$16 = [40]
	goto $label$67 
	
.LABEL $label$149
	$16 = [44]
	goto $label$67 
	
.LABEL $label$148
	$16 = [43]
	goto $label$67 
	
.LABEL $label$147
	$16 = [46]
	goto $label$67 
	
.LABEL $label$146
	$16 = [59]
	goto $label$67 
	
.LABEL $label$145
	$16 = [96]
	goto $label$67 
	
.LABEL $label$144
	$16 = [60]
	goto $label$67 
	
.LABEL $label$143
	$16 = [61]
	goto $label$67 
	
.LABEL $label$142
	$16 = [62]
	goto $label$67 
	
.LABEL $label$141
	$16 = [63]
	goto $label$67 
	
.LABEL $label$140
	$16 = [65]
	goto $label$67 
	
.LABEL $label$139
	$16 = [66]
	goto $label$67 
	
.LABEL $label$138
	$16 = [67]
	goto $label$67 
	
.LABEL $label$137
	$16 = [93]
	goto $label$67 
	
.LABEL $label$136
	$16 = [68]
	goto $label$67 
	
.LABEL $label$135
	$16 = [69]
	goto $label$67 
	
.LABEL $label$134
	$16 = [70]
	goto $label$67 
	
.LABEL $label$133
	$16 = [72]
	goto $label$67 
	
.LABEL $label$132
	$16 = [73]
	goto $label$67 
	
.LABEL $label$131
	$16 = [85]
	goto $label$67 
	
.LABEL $label$130
	$16 = [73]
	goto $label$67 
	
.LABEL $label$129
	$16 = [85]
	goto $label$67 
	
.LABEL $label$128
	$16 = [74]
	goto $label$67 
	
.LABEL $label$127
	$16 = [82]
	goto $label$67 
	
.LABEL $label$126
	$16 = [77]
	goto $label$67 
	
.LABEL $label$125
	$16 = [79]
	goto $label$67 
	
.LABEL $label$124
	$16 = [81]
	goto $label$67 
	
.LABEL $label$123
	$16 = [86]
	goto $label$67 
	
.LABEL $label$122
	$16 = [87]
	goto $label$67 
	
.LABEL $label$121
	$16 = [88]
	goto $label$67 
	
.LABEL $label$120
	$16 = [99]
	goto $label$67 
	
.LABEL $label$119
	$16 = [100]
	goto $label$67 
	
.LABEL $label$118
	$16 = [104]
	goto $label$67 
	
.LABEL $label$117
	$16 = [107]
	goto $label$67 
	
.LABEL $label$116
	$16 = [112]
	goto $label$67 
	
.LABEL $label$115
	$16 = [112]
	goto $label$67 
	
.LABEL $label$114
	$16 = [117]
	goto $label$67 
	
.LABEL $label$113
	$16 = [119]
	goto $label$67 
	
.LABEL $label$112
	$16 = [119]
	goto $label$67 
	
.LABEL $label$111
	$16 = [119]
	goto $label$67 
	
.LABEL $label$110
	$16 = [119]
	goto $label$67 
	
.LABEL $label$109
	$16 = [119]
	goto $label$67 
	
.LABEL $label$108
	$16 = [119]
	goto $label$67 
	
.LABEL $label$107
	$16 = [119]
	goto $label$67 
	
.LABEL $label$106
	$16 = [119]
	goto $label$67 
	
.LABEL $label$105
	$16 = [119]
	goto $label$67 
	
.LABEL $label$104
	$16 = [156]
	goto $label$67 
	
.LABEL $label$103
	$16 = [119]
	goto $label$67 
	
.LABEL $label$102
	$16 = [164]
	goto $label$67 
	
.LABEL $label$101
	$16 = [119]
	goto $label$67 
	
.LABEL $label$100
	$16 = [172]
	goto $label$67 
	
.LABEL $label$99
	$16 = [120]
	goto $label$67 
	
.LABEL $label$98
	$16 = [121]
	goto $label$67 
	
.LABEL $label$97
	$16 = [142]
	goto $label$67 
	
.LABEL $label$96
	$16 = [121]
	goto $label$67 
	
.LABEL $label$95
	$16 = [121]
	goto $label$67 
	
.LABEL $label$94
	$16 = [121]
	goto $label$67 
	
.LABEL $label$93
	$16 = [121]
	goto $label$67 
	
.LABEL $label$92
	$16 = [131]
	goto $label$67 
	
.LABEL $label$91
	$16 = [123]
	goto $label$67 
	
.LABEL $label$90
	$16 = [123]
	goto $label$67 
	
.LABEL $label$89
	$16 = [123]
	goto $label$67 
	
.LABEL $label$88
	$16 = [125]
	goto $label$67 
	
.LABEL $label$87
	$16 = [125]
	goto $label$67 
	
.LABEL $label$86
	$16 = [127]
	goto $label$67 
	
.LABEL $label$85
	$16 = [127]
	goto $label$67 
	
.LABEL $label$84
	$16 = [135]
	goto $label$67 
	
.LABEL $label$83
	$16 = [138]
	goto $label$67 
	
.LABEL $label$82
	$16 = [138]
	goto $label$67 
	
.LABEL $label$81
	$16 = [138]
	goto $label$67 
	
.LABEL $label$80
	$16 = [152]
	goto $label$67 
	
.LABEL $label$79
	$16 = [140]
	goto $label$67 
	
.LABEL $label$78
	$16 = [142]
	goto $label$67 
	
.LABEL $label$77
	$16 = [142]
	goto $label$67 
	
.LABEL $label$76
	$16 = [142]
	goto $label$67 
	
.LABEL $label$75
	$16 = [148]
	goto $label$67 
	
.LABEL $label$74
	$16 = [143]
	goto $label$67 
	
.LABEL $label$73
	$16 = [144]
	goto $label$67 
	
.LABEL $label$72
	$16 = [159]
	goto $label$67 
	
.LABEL $label$71
	$16 = [167]
	goto $label$67 
	
.LABEL $label$70
	$16 = [179]
	goto $label$67 
	
.LABEL $label$69
	$16 = [182]
	goto $label$67 
	
.LABEL $label$68
	$16 = [186]
	goto $label$67 
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	$16
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [1600])
	$global$0 = $3
	*(($4 = $3) + [1592]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [1552]) + [16]))) = (int_64)0
	*(($4 + [1584])) = [0]
	*($4 + [1560]) = (int_64)0
	*($4 + [1552]) = (int_64)0
	*($4 + [1576]) = (int_64)0
	*($4 + [1544]) = ($2 + $5)
	*($4 + [1536]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8416])
	CALL memcpy(($4 + [1552]), $2, [8])
	$6 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8416])
	CALL memcpy((($4 + [1552]) + [8]), ($2 + [8]), [8])
	*($4 + [48]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8416])
	CALL memcpy(($4 + [48]), ($2 + [16]), [8])
	*($3) = *($4 + [48])
	*($4 + [1540]) = ($2 + [24])
	CALL $29(($4 + [1536]), (($4 + [1552]) + [24]))
	$3 = *($4 + [1544])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$7 = *($4 + [1536])
	*($4 + [8]) = $7
	*($4 + [32]) = $7
	$3 = CALL $25(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [1592])
	CALL $30(($4 + [24]), ($4 + [1552]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $150($2)
	
.LABEL $label$4
	CALL $26($3)
	if ( ((*($4 + [1576]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [1584])))
	
.LABEL $label$5
	$global$0 = ($4 + [1600])
	return [1]
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [8]))
	*($2 + [32]) = *($1)
	$1 = CALL $115(($2 + [16]), ($1 + [16]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($5 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$4 = CALL $115(($2 + [64]), $1)
	*(($2 + [8])) = *($5)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $2), (int_32 $4), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8517])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8568])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [9100])
	$6 = (int_64)
	*($1) = $6(*($1) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9148])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9170])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [8619])
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [16])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [32])
	CALL $102(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [8425])
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $1
	$6 = *($3)
	*($5 + [8]) = *($6 + [8])
	*($5 + [24]) = *($6 + [8])
	*($5 + [16]) = *($6)
	*($5 + [32]) = *(*($3 + [4]))
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($5 + [16])
	*($4 + [64]) = $5
	*($4 + [72]) = ($5 + [32])
	CALL $102(($4 + [64]), ($4 + [56]))
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4157508551318700032, $2, $7), $4, [40]
	*($5 + [44]) = $6)
	if ( (uint_64)($7 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$1
	*($4 + [64]) = $5
	$7 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($4) = $7)
	*($4 + [40]) = $6
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $7
	*($3 + [16]) = $6
	*($4 + [64]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $87(($1 + [24]), ($4 + [64]), $4, ($4 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8517])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8568])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [9191])
	$6 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9234])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9253])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [8619])
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [16])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [32])
	CALL $102(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $52 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $71($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $99(($4 + [72]), ($4 + [64]))
	CALL $48(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $128(($4 + [8]))
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8416])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8416])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8416])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8416])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $29(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $115(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $115(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_64 .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	float_64 $8
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = ($0 + [1448])
	$4 = *(($0 + [1476]))
	$3 = *(($0 + [1472]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)100) ){ goto $label$5 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($6 + [44]) == (int_32)$2), [8342])
	if ( $6 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = CALL db_find_i64(*($2), *(($0 + [1456])), (int_64)7235159537265672192, (int_64)100)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $65($2, $5)
	CALL eosio_assert(((int_32)*($6 + [44]) == (int_32)$2), [8342])
	
.LABEL $label$3
	$7 = *($0 + [8])
	CALL eosio_assert([1], [8482])
	CALL $79($2, $6, $7, ($1 + [8]))
	goto $label$1 
	
.LABEL $label$2
	CALL $80(($1 + [24]), $2, *($0 + [8]), ($1 + [16]))
	$6 = *($1 + [28])
	
.LABEL $label$1
	$8 = *($6 + [24])
	if ( (((float_64)$8 < (float_64)(float_64)18446744073709551615) & ((float_64)$8 >= (float_64)(float_64)0)) ){ goto $label$7 }
	$global$0 = ($1 + [32])
	return (int_64)0
	
.LABEL $label$7
	$global$0 = ($1 + [32])
	return (Rounds 0)($8)
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [8425])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = $1
	CALL $103(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($4 + [16]) = $2)
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $89(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9555])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9600])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9650])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $118($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $114 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$6 = *($2)
	$5 = CALL $144([8825])
	if ( ((int_32)$5 != (int_32)( *($2 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$2 }
	if ( (CALL $126($2, [0], [-1], [8825], $5) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $81(($4 + [32]), $2, $3)
	$7 = ($3 + [1])
	$6 = *($4 + [32])
	$5 = ($6 & [1])
	$8 = (($4 + [32]) | [1])
	$9 = ($2 & [1])
	$2 = *($3)
	$2 = ( *($3 + [4]) ? uint_32($2 >> [1]) : $9 )
	if ( ($2 == 0) ){ goto $label$7 }
	$6 = ( *($4 + [36]) ? uint_32($6 >> [1]) : $5 )
	if ( ((int_32)$6 < (int_32)$2) ){ goto $label$8 }
	$10 = ( *($4 + [40]) ? $8 : $5 )
	$11 = ($10 + $6)
	$12 = ( *($3 + [8]) ? $7 : $9 )
	$9 = *($12)
	$5 = $10
	
.LOOP $label$9:
	$6 = (($6 - $2) + [1])
	if ( ($6 == 0) ){ goto $label$8 }
	$6 = CALL $142($5, $9, $6)
	if ( ($6 == 0) ){ goto $label$8 }
	if ( (CALL $143($6, $12, $2) == 0) ){ goto $label$6 }
	$5 = ($6 + [1])
	$6 = ($11 - $5)
	if ( ((int_32)$6 >= (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( (*($4 + [32]) & [1]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$7
	$13 = ( *($4 + [36]) ? uint_32($6 >> [1]) : $5 )
	$2 = [0]
	goto $label$5 
	
.LABEL $label$6
	$9 = *($4 + [32])
	$5 = ($9 & [1])
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$4 }
	$2 = ($6 - $10)
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$4 }
	$13 = ( *($4 + [36]) ? uint_32($9 >> [1]) : $5 )
	
.LABEL $label$5
	$14 = ($0 + [8])
	$10 = ($0 + [4])
	
.LOOP $label$10:
	$6 = CALL $116(($4 + [16]), ($4 + [32]), [0], $2, ($4 + [32]))
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)*($14)) ){ goto $label$12 }
	CALL $115($5, $6)
	*($10) = (*($10) + [12])
	goto $label$11 
	
.LABEL $label$12
	CALL $82($0, $6)
	
.LABEL $label$11
	CALL $116($4, ($4 + [32]), ($2 + [1]), $13, ($4 + [32]))
	if ( (*($4 + [32]) & [1]) ){ goto $label$14 }
	*($4 + [32]) = [0]
	goto $label$13 
	
.LABEL $label$14
	*(*((($4 + [32]) + [8]))) = [0]
	*($4 + [36]) = [0]
	
.LABEL $label$13
	$2 = [0]
	CALL $119(($4 + [32]), [0])
	$5 = *(($4 + [8]))
	*((($4 + [32]) + [8])) = $5
	*($4 + [32]) = *($4)
	$12 = ($6 & [1])
	$6 = *($3)
	$6 = ( *(($3 + [4])) ? uint_32($6 >> [1]) : $12 )
	if ( ($6 == 0) ){ goto $label$15 }
	$2 = ( *($4 + [36]) ? uint_32($2 >> [1]) : $9 )
	$2 = *($4 + [32])
	$9 = ($2 & [1])
	$15 = ( $5 ? $8 : $9 )
	$9 = ($15 + $2)
	if ( ((int_32)$2 < (int_32)$6) ){ goto $label$17 }
	$11 = ( *(($3 + [8])) ? $7 : $12 )
	$12 = *($11)
	$5 = $15
	
.LOOP $label$18:
	$2 = (($2 - $6) + [1])
	if ( ($2 == 0) ){ goto $label$17 }
	$2 = CALL $142($5, $12, $2)
	if ( ($2 == 0) ){ goto $label$17 }
	if ( (CALL $143($2, $11, $6) == 0) ){ goto $label$16 }
	$5 = ($2 + [1])
	$2 = ($9 - $5)
	if ( ((int_32)$2 >= (int_32)$6) ){ goto $label$18 }
	
.LABEL $label$17
	$2 = $9
	
.LABEL $label$16
	$2 = ( [-1] ? ($2 - $15) : ((int_32)$2 == (int_32)$9) )
	
.LABEL $label$15
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*((($4 + [16]) + [8])))
	
.LABEL $label$19
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$10 }
	$5 = (*($4 + [32]) & [1])
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$3
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $150($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $145(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10496])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $145(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $139 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $137($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $150 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18900])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18708]
	$3 = (((int_32)$1 * (int_32)[12]) + [18708])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $70($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $119($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $119($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $114($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $28 (int_32 $0, int_64 $1, int_32 $2, float_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [48])
	$global$0 = $5
	*($5 + [32]) = $3
	*($5 + [40]) = $1
	CALL require_auth(*($0 + [8]))
	$6 = ($0 + [1448])
	$8 = *(($0 + [1476]))
	$7 = *(($0 + [1472]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$4 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)$6), [8342])
	if ( $10 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$9 = CALL db_find_i64(*($6), *(($0 + [1456])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $65($6, $9)
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)$6), [8342])
	
.LABEL $label$2
	$1 = *(($0 + [8]))
	*($5 + [20]) = $2
	*($5 + [28]) = $4
	*($5 + [16]) = ($5 + [40])
	*($5 + [24]) = ($5 + [32])
	CALL eosio_assert([1], [8482])
	CALL $66($6, $10, $1, ($5 + [16]))
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$1
	$1 = *(($0 + [8]))
	*($5 + [20]) = $2
	*($5 + [28]) = $4
	*($5 + [16]) = ($5 + [40])
	*($5 + [24]) = ($5 + [32])
	CALL $67(($5 + [8]), $6, $1, ($5 + [16]))
	$global$0 = ($5 + [48])
}

int_32 .FUNC $55 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [8342])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $31($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [8342])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $147($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10496])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $147($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [1536])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [1528]) = (int_64)0
	*($4 + [1520]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8416])
	CALL memcpy(($4 + [1520]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8416])
	CALL memcpy((($4 + [1520]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $25(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [1528])
	$1 = *($4 + [1520])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $150($2)
	
.LABEL $label$6
	CALL $26($8)
	$global$0 = ($4 + [1536])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	float_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [272])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [248])) = [0]
	*($3 + [232]) = (int_64)-1
	*($3 + [240]) = (int_64)0
	$4 = *($0)
	*($3 + [216]) = $4
	*($3 + [224]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)-4293729036219842560, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $46(($3 + [216]), $6)
	CALL eosio_assert(((int_32)*($5 + [76]) == (int_32)($3 + [216])), [8342])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9407])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)$2), [9424])
	CALL eosio_assert((*($5 + [72]) == 0), [9441])
	$7 = *($5 + [48])
	if ( ((int_32)((float_64)$7 > (float_64)(float_64)0.0001) ^ (int_32)[1]) ){ goto $label$12 }
	$8 = *(($5 + [24]))
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$11 }
	$4 = (int_64)-9223372036854775808
	goto $label$10 
	
.LABEL $label$12
	$7 = *($5 + [56])
	if ( ((int_32)((float_64)$7 > (float_64)(float_64)1e-07) ^ (int_32)[1]) ){ goto $label$4 }
	$5 = CALL $144([8318])
	if ( ($5 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8960])
	goto $label$8 
	
.LABEL $label$11
	$4 = (Rounds 0)($7)
	
.LABEL $label$10
	$9 = *($5 + [16])
	CALL __multi3(($3 + [8]), $9, (int_64)$9 >> (int_64)63), $4, (int_64)$4 >> (int_64)63))
	$4 = *($0)
	*($3 + [176]) = [8943]
	*($3 + [180]) = CALL $144([8943])
	*($3 + [32]) = *($3 + [176])
	*($3 + [96]) = *(CALL $4(($3 + [128]), ($3 + [32])))
	*($3 + [88]) = $4
	$10 = *($0)
	*($3 + [176]) = [8213]
	*($3 + [180]) = CALL $144([8213])
	*($3 + [24]) = *($3 + [176])
	$4 = *((($3 + [8]) + [8]))
	$9 = *($3 + [8])
	$11 = *(CALL $4(($3 + [128]), ($3 + [24])))
	$12 = *($0)
	CALL eosio_assert(( (uint_64)($9 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [9296])
	CALL eosio_assert(( ((uint_64)$9 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [9320])
	*((($3 + [256]) + [8])) = [0]
	*($3 + [256]) = (int_64)0
	$5 = CALL $144([9465])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$15 }
	*($3 + [256]) = ($5 << [1])
	$6 = (($3 + [256]) | [1])
	if ( $5 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$13 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($13)
	*($3 + [256]) = ($13 | [1])
	*($3 + [264]) = $6
	*($3 + [260]) = $5
	
.LABEL $label$14
	CALL memcpy($6, [9465], $5)
	
.LABEL $label$13
	*(($6 + $5)) = [0]
	*(($3 + [152])) = $8
	$5 = ($3 + [264])
	*(($3 + [168])) = *($5)
	*($5) = [0]
	*($3 + [136]) = $2
	*($3 + [128]) = $12
	*($3 + [144]) = $9
	*($3 + [160]) = *($3 + [256])
	*($3 + [256]) = (int_64)0
	$5 = CALL $47(($3 + [176]), ($3 + [88]), $10, $11, ($3 + [128]))
	CALL $48(($3 + [72]), $5)
	$6 = *($3 + [72])
	CALL send_inline($6, (*($3 + [76]) - $6))
	$6 = *($3 + [72])
	if ( ($6 == 0) ){ goto $label$16 }
	*($3 + [76]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$16
	$6 = *($5 + [28])
	if ( ($6 == 0) ){ goto $label$17 }
	*(($5 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$17
	$6 = *($5 + [16])
	if ( ($6 == 0) ){ goto $label$18 }
	*(($5 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$18
	if ( ((*(($3 + [160])) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($3 + [168])))
	
.LABEL $label$19
	if ( ((*($3 + [256]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [264])))
	CALL $49($0, $1)
	$0 = *($3 + [240])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$9
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$4 = (int_64)0
	
.LOOP $label$20:
	$6 = *(($5 + [8317]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9005])
	
.LABEL $label$21
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$20 }
	goto $label$5 
	
.LABEL $label$7
	$4 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	CALL $114(($3 + [256]))
	
.LABEL $label$5
	*(($3 + [208])) = [0]
	*($3 + [192]) = (int_64)-1
	*($3 + [200]) = (int_64)0
	$9 = *($0)
	*($3 + [176]) = $9
	*($3 + [184]) = $9
	$5 = [0]
	$6 = CALL db_find_i64($9, $9, (int_64)3607749779137757184, ((int_64)$4 & (int_64)72057594037927935))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$22 }
	$5 = CALL $41(($3 + [176]), $6)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($3 + [176])), [8342])
	
.LABEL $label$22
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8919])
	$4 = *($5)
	$5 = CALL $144([8318])
	$6 = ($5 <= [8])
	$7 = ((float_64)$7 * (float_64)(CASTING float_64)(uint_64 $4))
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$27 }
	$8 = (int_64)-9223372036854775808
	if ( ($6 == 0) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$8 = (Rounds 0)($7)
	if ( $6 ){ goto $label$25 }
	
.LABEL $label$26
	CALL eosio_assert([0], [8960])
	goto $label$24 
	
.LABEL $label$25
	if ( $5 ){ goto $label$24 }
	$10 = (int_64)4
	goto $label$23 
	
.LABEL $label$24
	$4 = (int_64)0
	
.LOOP $label$28:
	$6 = *(($5 + [8317]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$29 }
	CALL eosio_assert([0], [9005])
	
.LABEL $label$29
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$28 }
	$10 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	
.LABEL $label$23
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9345])
	$4 = (uint_64)$10 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$9 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$4 = $9
	$6 = [1]
	$13 = $5
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$33
	$4 = $9
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$31 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$13 = ($5 + [1])
	$5 = $13
	if ( $6 ){ goto $label$34 }
	$6 = [1]
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$6 = [0]
	
.LABEL $label$30
	CALL eosio_assert($6, [8678])
	$4 = *($0)
	*($3 + [88]) = [8943]
	*($3 + [92]) = CALL $144([8943])
	*($3 + [48]) = *($3 + [88])
	*($3 + [80]) = *(CALL $4(($3 + [128]), ($3 + [48])))
	*($3 + [72]) = $4
	$4 = *($0)
	*($3 + [88]) = [8213]
	*($3 + [92]) = CALL $144([8213])
	*($3 + [40]) = *($3 + [88])
	$9 = *(CALL $4(($3 + [128]), ($3 + [40])))
	$11 = *($0)
	*(($3 + [64])) = [0]
	*($3 + [56]) = (int_64)0
	$5 = CALL $144([9477])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$37 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$40 }
	*($3 + [56]) = ($5 << [1])
	$6 = (($3 + [56]) | [1])
	if ( $5 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$13 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($13)
	*($3 + [56]) = ($13 | [1])
	*($3 + [64]) = $6
	*($3 + [60]) = $5
	
.LABEL $label$39
	CALL memcpy($6, [9477], $5)
	
.LABEL $label$38
	*(($6 + $5)) = [0]
	*(($3 + [152])) = $10
	$5 = ($3 + [64])
	*(($3 + [168])) = *($5)
	*($5) = [0]
	*($3 + [136]) = $2
	*($3 + [128]) = $11
	*($3 + [144]) = $8
	*($3 + [160]) = *($3 + [56])
	*($3 + [56]) = (int_64)0
	$5 = CALL $47(($3 + [88]), ($3 + [72]), $4, $9, ($3 + [128]))
	CALL $48(($3 + [256]), $5)
	$6 = *($3 + [256])
	CALL send_inline($6, (*($3 + [260]) - $6))
	$6 = *($3 + [256])
	if ( ($6 == 0) ){ goto $label$41 }
	*($3 + [260]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$41
	$6 = *($5 + [28])
	if ( ($6 == 0) ){ goto $label$42 }
	*(($5 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$42
	$6 = *($5 + [16])
	if ( ($6 == 0) ){ goto $label$43 }
	*(($5 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$43
	if ( (*(($3 + [160])) & [1]) ){ goto $label$45 }
	if ( (*($3 + [56]) & [1]) ){ goto $label$44 }
	goto $label$36 
	
.LABEL $label$45
	CALL _ZdlPv(*(($3 + [168])))
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$36 }
	
.LABEL $label$44
	CALL _ZdlPv(*(($3 + [64])))
	$13 = *($3 + [200])
	if ( ($13 == 0) ){ goto $label$4 }
	goto $label$35 
	
.LABEL $label$37
	CALL $114(($3 + [56]))
	
.LABEL $label$36
	$13 = *($3 + [200])
	if ( ($13 == 0) ){ goto $label$4 }
	
.LABEL $label$35
	$14 = ($3 + [204])
	$5 = *($14)
	if ( ((int_32)$5 == (int_32)$13) ){ goto $label$47 }
	
.LOOP $label$48:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$49 }
	CALL _ZdlPv($6)
	
.LABEL $label$49
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$48 }
	$5 = *(($3 + [200]))
	goto $label$46 
	
.LABEL $label$47
	$5 = $13
	
.LABEL $label$46
	*($14) = $13
	CALL _ZdlPv($5)
	
.LABEL $label$4
	CALL $49($0, $1)
	$0 = *($3 + [240])
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$13 = ($3 + [244])
	$5 = *($13)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$51 }
	
.LOOP $label$52:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$53 }
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*(($6 + [40])))
	
.LABEL $label$54
	CALL _ZdlPv($6)
	
.LABEL $label$53
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$52 }
	$5 = *(($3 + [240]))
	goto $label$50 
	
.LABEL $label$51
	$5 = $0
	
.LABEL $label$50
	*($13) = $0
	CALL _ZdlPv($5)
	$global$0 = ($3 + [272])
	return 
	
.LABEL $label$2
	$global$0 = ($3 + [272])
	(unreachable)
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$4 = ($global$0 - [208])
	$global$0 = $4
	$5 = [0]
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8678])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [8698])
	$9 = [0]
	*(($4 + [136])) = [0]
	*($4 + [120]) = (int_64)-1
	*($4 + [128]) = (int_64)0
	$7 = *($0)
	*($4 + [104]) = $7
	*($4 + [112]) = $6
	$11 = [0]
	$5 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $31(($4 + [104]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [104])), [8342])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8727])
	CALL require_auth(*($11 + [32]))
	$12 = ($2 + [8])
	$13 = *($12)
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$7 = (uint_64)$13 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $8
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$13 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$9 = [0]
	
.LABEL $label$9
	CALL eosio_assert($9, [9779])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [9796])
	CALL eosio_assert(((int_64)$13 == (int_64)*($11 + [8])), [9825])
	CALL eosio_assert(((int_64)$6 <= (int_64))(*($11 + [16]) - *($11))), [9851])
	*($4 + [144]) = $2
	CALL $51(($4 + [104]), $11, (int_64)0, ($4 + [144]))
	$5 = ($11 + [32])
	$7 = *($5)
	*(($9 = (($4 + [88]) + [8]))) = *($12)
	$8 = *($2)
	*((($4 + [8]) + [8])) = *($9)
	*($4 + [88]) = $8
	*($4 + [8]) = *($4 + [88])
	CALL $33($0, $7, ($4 + [8]), $7)
	$7 = *($5)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$14 }
	$8 = *($0)
	*($4 + [72]) = [8943]
	*($4 + [76]) = CALL $144([8943])
	*($4) = *($4 + [72])
	*($4 + [80]) = *(CALL $4(($4 + [144]), $4))
	*($4 + [72]) = $7
	*((($9 = CALL _Znwj([16])) + [8])) = *($4 + [80])
	*($9) = *($4 + [72])
	$7 = *($5)
	*(($5 = (($4 + [24]) + [24]))) = *(($2 + [8]))
	*($4 + [32]) = $1
	*($4 + [24]) = $7
	*($4 + [40]) = *($2)
	CALL $115((($4 + [24]) + [32]), $3)
	*((($4 + [144]) + [24])) = *($5)
	$5 = (($4 + [24]) + [40])
	*(($10 = (($4 + [144]) + [40]))) = *($5)
	*($5) = [0]
	$5 = ($9 + [16])
	*($4 + [196]) = $5
	*($4 + [192]) = $9
	*($4 + [200]) = $5
	*($4 + [144]) = *($4 + [24])
	*($4 + [152]) = *($4 + [32])
	*($4 + [160]) = *($4 + [40])
	*($4 + [176]) = *($4 + [56])
	*($4 + [56]) = (int_64)0
	CALL $52($8, (int_64)-3617168760277827584, ($4 + [192]), ($4 + [144]))
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$15
	$5 = *($4 + [192])
	if ( ($5 == 0) ){ goto $label$16 }
	*($4 + [196]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$14
	$10 = *($4 + [128])
	if ( ($10 == 0) ){ goto $label$17 }
	$11 = ($4 + [132])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$19 }
	
.LOOP $label$20:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$21 }
	CALL _ZdlPv($9)
	
.LABEL $label$21
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$20 }
	$5 = *(($4 + [128]))
	goto $label$18 
	
.LABEL $label$19
	$5 = $10
	
.LABEL $label$18
	*($11) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$global$0 = ($4 + [208])
}

int_32 .FUNC $25 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	$4 = ($global$0 - [368])
	$global$0 = $4
	*(($5 = (($4 + [336]) + [8]))) = *(($3 + [8]))
	*($4 + [336]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [352]) + [8])) = $3
	$1 = *($4 + [336])
	*($0 + [16]) = $1
	*(($0 + [24])) = $3
	*($4 + [352]) = $1
	*((($4 + [320]) + [8])) = [0]
	*($4 + [320]) = (int_64)0
	$3 = CALL $144([10389])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$21 }
	$6 = ($0 + [32])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$24 }
	*($4 + [320]) = ($3 << [1])
	$5 = (($4 + [320]) | [1])
	if ( $3 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$7 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($4 + [320]) = ($7 | [1])
	*($4 + [328]) = $5
	*($4 + [324]) = $3
	
.LABEL $label$23
	CALL memcpy($5, [10389], $3)
	
.LABEL $label$22
	*(($5 + $3)) = [0]
	*(($0 + [40])) = [0]
	*(($0 + [32])) = (int_64)0
	CALL $117($6, ($4 + [320]))
	*(($0 + [56])) = (int_64)300
	*(($7 = ($0 + [48]))) = (int_64)1
	if ( ((*($4 + [320]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($4 + [328]))
	
.LABEL $label$25
	*(($4 + [312])) = [0]
	*($4 + [304]) = (int_64)0
	$3 = CALL $144([10394])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$20 }
	$8 = ($0 + [64])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$28 }
	*($4 + [304]) = ($3 << [1])
	$5 = (($4 + [304]) | [1])
	if ( $3 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$9 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($4 + [304]) = ($9 | [1])
	*($4 + [312]) = $5
	*($4 + [308]) = $3
	
.LABEL $label$27
	CALL memcpy($5, [10394], $3)
	
.LABEL $label$26
	*(($5 + $3)) = [0]
	*(($0 + [72])) = [0]
	*(($0 + [64])) = (int_64)0
	CALL $117($8, ($4 + [304]))
	*(($0 + [88])) = (int_64)500
	*(($9 = ($0 + [80]))) = (int_64)301
	if ( ((*($4 + [304]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*($4 + [312]))
	
.LABEL $label$29
	*(($4 + [296])) = [0]
	*($4 + [288]) = (int_64)0
	$3 = CALL $144([10399])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$19 }
	$10 = ($0 + [96])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$32 }
	*($4 + [288]) = ($3 << [1])
	$5 = (($4 + [288]) | [1])
	if ( $3 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$11 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($11)
	*($4 + [288]) = ($11 | [1])
	*($4 + [296]) = $5
	*($4 + [292]) = $3
	
.LABEL $label$31
	CALL memcpy($5, [10399], $3)
	
.LABEL $label$30
	*(($5 + $3)) = [0]
	*(($0 + [104])) = [0]
	*(($0 + [96])) = (int_64)0
	CALL $117($10, ($4 + [288]))
	*(($0 + [120])) = (int_64)600
	*(($11 = ($0 + [112]))) = (int_64)501
	if ( ((*($4 + [288]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*($4 + [296]))
	
.LABEL $label$33
	*(($4 + [280])) = [0]
	*($4 + [272]) = (int_64)0
	$3 = CALL $144([10404])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$18 }
	$12 = ($0 + [128])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$36 }
	*($4 + [272]) = ($3 << [1])
	$5 = (($4 + [272]) | [1])
	if ( $3 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$13 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($13)
	*($4 + [272]) = ($13 | [1])
	*($4 + [280]) = $5
	*($4 + [276]) = $3
	
.LABEL $label$35
	CALL memcpy($5, [10404], $3)
	
.LABEL $label$34
	*(($5 + $3)) = [0]
	*(($0 + [136])) = [0]
	*(($0 + [128])) = (int_64)0
	CALL $117($12, ($4 + [272]))
	*(($0 + [152])) = (int_64)700
	*(($13 = ($0 + [144]))) = (int_64)601
	if ( ((*($4 + [272]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($4 + [280]))
	
.LABEL $label$37
	*(($4 + [264])) = [0]
	*($4 + [256]) = (int_64)0
	$3 = CALL $144([10409])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$17 }
	$14 = ($0 + [160])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$40 }
	*($4 + [256]) = ($3 << [1])
	$5 = (($4 + [256]) | [1])
	if ( $3 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$15 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($15)
	*($4 + [256]) = ($15 | [1])
	*($4 + [264]) = $5
	*($4 + [260]) = $3
	
.LABEL $label$39
	CALL memcpy($5, [10409], $3)
	
.LABEL $label$38
	*(($5 + $3)) = [0]
	*(($0 + [168])) = [0]
	*(($0 + [160])) = (int_64)0
	CALL $117($14, ($4 + [256]))
	*(($0 + [184])) = (int_64)800
	*(($15 = ($0 + [176]))) = (int_64)701
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*($4 + [264]))
	
.LABEL $label$41
	*(($4 + [248])) = [0]
	*($4 + [240]) = (int_64)0
	$3 = CALL $144([10415])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$16 }
	$16 = ($0 + [192])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$44 }
	*($4 + [240]) = ($3 << [1])
	$5 = (($4 + [240]) | [1])
	if ( $3 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	$17 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($17)
	*($4 + [240]) = ($17 | [1])
	*($4 + [248]) = $5
	*($4 + [244]) = $3
	
.LABEL $label$43
	CALL memcpy($5, [10415], $3)
	
.LABEL $label$42
	*(($5 + $3)) = [0]
	*(($0 + [200])) = [0]
	*(($0 + [192])) = (int_64)0
	CALL $117($16, ($4 + [240]))
	*(($0 + [216])) = (int_64)900
	*(($17 = ($0 + [208]))) = (int_64)801
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*($4 + [248]))
	
.LABEL $label$45
	*(($4 + [232])) = [0]
	*($4 + [224]) = (int_64)0
	$3 = CALL $144([10423])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$15 }
	$18 = ($0 + [224])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$48 }
	*($4 + [224]) = ($3 << [1])
	$5 = (($4 + [224]) | [1])
	if ( $3 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$19 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($19)
	*($4 + [224]) = ($19 | [1])
	*($4 + [232]) = $5
	*($4 + [228]) = $3
	
.LABEL $label$47
	CALL memcpy($5, [10423], $3)
	
.LABEL $label$46
	*(($5 + $3)) = [0]
	*(($0 + [232])) = [0]
	*(($0 + [224])) = (int_64)0
	CALL $117($18, ($4 + [224]))
	*(($0 + [248])) = (int_64)950
	*(($19 = ($0 + [240]))) = (int_64)901
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*($4 + [232]))
	
.LABEL $label$49
	*(($4 + [216])) = [0]
	*($4 + [208]) = (int_64)0
	$3 = CALL $144([10426])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$14 }
	$20 = ($0 + [256])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$52 }
	*($4 + [208]) = ($3 << [1])
	$5 = (($4 + [208]) | [1])
	if ( $3 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$21 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($21)
	*($4 + [208]) = ($21 | [1])
	*($4 + [216]) = $5
	*($4 + [212]) = $3
	
.LABEL $label$51
	CALL memcpy($5, [10426], $3)
	
.LABEL $label$50
	*(($5 + $3)) = [0]
	*(($0 + [264])) = [0]
	*(($0 + [256])) = (int_64)0
	CALL $117($20, ($4 + [208]))
	*(($0 + [280])) = (int_64)990
	*(($21 = ($0 + [272]))) = (int_64)951
	if ( ((*($4 + [208]) & [1]) == 0) ){ goto $label$53 }
	CALL _ZdlPv(*($4 + [216]))
	
.LABEL $label$53
	*(($4 + [200])) = [0]
	*($4 + [192]) = (int_64)0
	$3 = CALL $144([10429])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$13 }
	$22 = ($0 + [288])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$56 }
	*($4 + [192]) = ($3 << [1])
	$5 = (($4 + [192]) | [1])
	if ( $3 ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	$23 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($23)
	*($4 + [192]) = ($23 | [1])
	*($4 + [200]) = $5
	*($4 + [196]) = $3
	
.LABEL $label$55
	CALL memcpy($5, [10429], $3)
	
.LABEL $label$54
	*(($5 + $3)) = [0]
	*(($0 + [296])) = [0]
	*(($0 + [288])) = (int_64)0
	CALL $117($22, ($4 + [192]))
	*(($0 + [312])) = (int_64)1000
	*(($3 = ($0 + [304]))) = (int_64)991
	if ( ((*($4 + [192]) & [1]) == 0) ){ goto $label$57 }
	CALL _ZdlPv(*($4 + [200]))
	
.LABEL $label$57
	*($0 + [320]) = [9]
	CALL $115(($0 + [328]), $6)
	*(($0 + [352])) = *(($7 + [8]))
	*(($0 + [344])) = *($7)
	CALL $115(($0 + [360]), $8)
	*(($0 + [384])) = *(($9 + [8]))
	*(($0 + [376])) = *($9)
	CALL $115(($0 + [392]), $10)
	*(($0 + [416])) = *(($11 + [8]))
	*(($0 + [408])) = *($11)
	CALL $115(($0 + [424]), $12)
	*(($0 + [448])) = *(($13 + [8]))
	*(($0 + [440])) = *($13)
	CALL $115(($0 + [456]), $14)
	*(($0 + [480])) = *(($15 + [8]))
	*(($0 + [472])) = *($15)
	CALL $115(($0 + [488]), $16)
	*(($0 + [512])) = *(($17 + [8]))
	*(($0 + [504])) = *($17)
	CALL $115(($0 + [520]), $18)
	*(($0 + [544])) = *(($19 + [8]))
	*(($0 + [536])) = *($19)
	CALL $115(($0 + [552]), $20)
	*(($0 + [576])) = *(($21 + [8]))
	*(($0 + [568])) = *($21)
	CALL $115(($0 + [584]), $22)
	*($0 + [616]) = (int_64)1000
	*((($4 + [176]) + [8])) = [0]
	*(($0 + [608])) = *(($3 + [8]))
	*(($0 + [600])) = *($3)
	*($4 + [176]) = (int_64)0
	$3 = CALL $144([10432])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$60 }
	*($4 + [176]) = ($3 << [1])
	$5 = (($4 + [176]) | [1])
	if ( $3 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($4 + [176]) = ($6 | [1])
	*($4 + [184]) = $5
	*($4 + [180]) = $3
	
.LABEL $label$59
	CALL memcpy($5, [10432], $3)
	
.LABEL $label$58
	*(($5 + $3)) = [0]
	*(($0 + [632])) = (int_64)0
	*($0 + [624]) = (int_64)0
	$17 = ($0 + [628])
	CALL $117($17, ($4 + [176]))
	*(($0 + [648])) = (int_64)0
	*(($6 = ($0 + [640]))) = (int_64)4652007308841189376
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$61 }
	CALL _ZdlPv(*($4 + [184]))
	
.LABEL $label$61
	*(($4 + [168])) = [0]
	*($4 + [160]) = (int_64)0
	$3 = CALL $144([10437])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$64 }
	*($4 + [160]) = ($3 << [1])
	$5 = (($4 + [160]) | [1])
	if ( $3 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$64
	$7 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($4 + [160]) = ($7 | [1])
	*($4 + [168]) = $5
	*($4 + [164]) = $3
	
.LABEL $label$63
	CALL memcpy($5, [10437], $3)
	
.LABEL $label$62
	*(($5 + $3)) = [0]
	*(($0 + [664])) = (int_64)0
	*($0 + [656]) = (int_64)1
	$18 = ($0 + [660])
	CALL $117($18, ($4 + [160]))
	*(($0 + [680])) = (int_64)0
	*(($7 = ($0 + [672]))) = (int_64)4636737291354636288
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$65 }
	CALL _ZdlPv(*($4 + [168]))
	
.LABEL $label$65
	*(($4 + [152])) = [0]
	*($4 + [144]) = (int_64)0
	$3 = CALL $144([10442])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$68 }
	*($4 + [144]) = ($3 << [1])
	$5 = (($4 + [144]) | [1])
	if ( $3 ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$68
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($4 + [144]) = ($8 | [1])
	*($4 + [152]) = $5
	*($4 + [148]) = $3
	
.LABEL $label$67
	CALL memcpy($5, [10442], $3)
	
.LABEL $label$66
	*(($5 + $3)) = [0]
	*(($0 + [696])) = (int_64)0
	*($0 + [688]) = (int_64)2
	$19 = ($0 + [692])
	CALL $117($19, ($4 + [144]))
	*(($0 + [712])) = (int_64)0
	*(($8 = ($0 + [704]))) = (int_64)4632233691727265792
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$69 }
	CALL _ZdlPv(*($4 + [152]))
	
.LABEL $label$69
	*(($4 + [136])) = [0]
	*($4 + [128]) = (int_64)0
	$3 = CALL $144([8904])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$72 }
	*($4 + [128]) = ($3 << [1])
	$5 = (($4 + [128]) | [1])
	if ( $3 ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$72
	$9 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($4 + [128]) = ($9 | [1])
	*($4 + [136]) = $5
	*($4 + [132]) = $3
	
.LABEL $label$71
	CALL memcpy($5, [8904], $3)
	
.LABEL $label$70
	*(($5 + $3)) = [0]
	*(($0 + [728])) = (int_64)0
	*($0 + [720]) = (int_64)3
	$20 = ($0 + [724])
	CALL $117($20, ($4 + [128]))
	*(($0 + [744])) = (int_64)0
	*(($9 = ($0 + [736]))) = (int_64)4626322717216342016
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$73 }
	CALL _ZdlPv(*($4 + [136]))
	
.LABEL $label$73
	*(($4 + [120])) = [0]
	*($4 + [112]) = (int_64)0
	$3 = CALL $144([8908])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$76 }
	*($4 + [112]) = ($3 << [1])
	$5 = (($4 + [112]) | [1])
	if ( $3 ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	$10 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($10)
	*($4 + [112]) = ($10 | [1])
	*($4 + [120]) = $5
	*($4 + [116]) = $3
	
.LABEL $label$75
	CALL memcpy($5, [8908], $3)
	
.LABEL $label$74
	*(($5 + $3)) = [0]
	*(($0 + [760])) = (int_64)0
	*($0 + [752]) = (int_64)4
	$21 = ($0 + [756])
	CALL $117($21, ($4 + [112]))
	*(($0 + [776])) = (int_64)0
	*(($10 = ($0 + [768]))) = (int_64)4618441417868443648
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$77 }
	CALL _ZdlPv(*($4 + [120]))
	
.LABEL $label$77
	*(($4 + [104])) = [0]
	*($4 + [96]) = (int_64)0
	$3 = CALL $144([10447])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$80 }
	*($4 + [96]) = ($3 << [1])
	$5 = (($4 + [96]) | [1])
	if ( $3 ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$80
	$11 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($11)
	*($4 + [96]) = ($11 | [1])
	*($4 + [104]) = $5
	*($4 + [100]) = $3
	
.LABEL $label$79
	CALL memcpy($5, [10447], $3)
	
.LABEL $label$78
	*(($5 + $3)) = [0]
	*(($0 + [792])) = (int_64)0
	*($0 + [784]) = (int_64)5
	$22 = ($0 + [788])
	CALL $117($22, ($4 + [96]))
	*(($0 + [808])) = (int_64)0
	*(($11 = ($0 + [800]))) = (int_64)4625196817309499392
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$81 }
	CALL _ZdlPv(*($4 + [104]))
	
.LABEL $label$81
	*(($4 + [88])) = [0]
	*($4 + [80]) = (int_64)0
	$3 = CALL $144([10457])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$84 }
	*($4 + [80]) = ($3 << [1])
	$5 = (($4 + [80]) | [1])
	if ( $3 ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	$12 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($12)
	*($4 + [80]) = ($12 | [1])
	*($4 + [88]) = $5
	*($4 + [84]) = $3
	
.LABEL $label$83
	CALL memcpy($5, [10457], $3)
	
.LABEL $label$82
	*(($5 + $3)) = [0]
	*(($0 + [824])) = (int_64)0
	*($0 + [816]) = (int_64)6
	$23 = ($0 + [820])
	CALL $117($23, ($4 + [80]))
	*(($0 + [840])) = (int_64)0
	*(($12 = ($0 + [832]))) = (int_64)4624070917402656768
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$85 }
	CALL _ZdlPv(*($4 + [88]))
	
.LABEL $label$85
	*(($4 + [72])) = [0]
	*($4 + [64]) = (int_64)0
	$3 = CALL $144([10465])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$88 }
	*($4 + [64]) = ($3 << [1])
	$5 = (($4 + [64]) | [1])
	if ( $3 ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$88
	$13 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($13)
	*($4 + [64]) = ($13 | [1])
	*($4 + [72]) = $5
	*($4 + [68]) = $3
	
.LABEL $label$87
	CALL memcpy($5, [10465], $3)
	
.LABEL $label$86
	*(($5 + $3)) = [0]
	*(($0 + [856])) = (int_64)0
	*($0 + [848]) = (int_64)7
	$24 = ($0 + [852])
	CALL $117($24, ($4 + [64]))
	*(($0 + [872])) = (int_64)0
	*(($13 = ($0 + [864]))) = (int_64)4622945017495814144
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$89 }
	CALL _ZdlPv(*($4 + [72]))
	
.LABEL $label$89
	*(($4 + [56])) = [0]
	*($4 + [48]) = (int_64)0
	$3 = CALL $144([10472])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$92 }
	*($4 + [48]) = ($3 << [1])
	$5 = (($4 + [48]) | [1])
	if ( $3 ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$92
	$14 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($14)
	*($4 + [48]) = ($14 | [1])
	*($4 + [56]) = $5
	*($4 + [52]) = $3
	
.LABEL $label$91
	CALL memcpy($5, [10472], $3)
	
.LABEL $label$90
	*(($5 + $3)) = [0]
	*(($0 + [888])) = (int_64)0
	*($0 + [880]) = (int_64)8
	$25 = ($0 + [884])
	CALL $117($25, ($4 + [48]))
	*(($0 + [904])) = (int_64)0
	*(($14 = ($0 + [896]))) = (int_64)4620693217682128896
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$93 }
	CALL _ZdlPv(*($4 + [56]))
	
.LABEL $label$93
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	$3 = CALL $144([10479])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$96 }
	*($4 + [32]) = ($3 << [1])
	$5 = (($4 + [32]) | [1])
	if ( $3 ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$96
	$15 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($15)
	*($4 + [32]) = ($15 | [1])
	*($4 + [40]) = $5
	*($4 + [36]) = $3
	
.LABEL $label$95
	CALL memcpy($5, [10479], $3)
	
.LABEL $label$94
	*(($5 + $3)) = [0]
	*(($0 + [920])) = (int_64)0
	*($0 + [912]) = (int_64)9
	$26 = ($0 + [916])
	CALL $117($26, ($4 + [32]))
	*(($0 + [936])) = (int_64)0
	*(($15 = ($0 + [928]))) = (int_64)4618441417868443648
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$97 }
	CALL _ZdlPv(*($4 + [40]))
	
.LABEL $label$97
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	$3 = CALL $144([10486])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$100 }
	*($4 + [16]) = ($3 << [1])
	$5 = (($4 + [16]) | [1])
	if ( $3 ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$100
	$16 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($16)
	*($4 + [16]) = ($16 | [1])
	*($4 + [24]) = $5
	*($4 + [20]) = $3
	
.LABEL $label$99
	CALL memcpy($5, [10486], $3)
	
.LABEL $label$98
	*(($5 + $3)) = [0]
	*(($0 + [952])) = (int_64)0
	*($0 + [944]) = (int_64)10
	$27 = ($0 + [948])
	CALL $117($27, ($4 + [16]))
	*(($0 + [968])) = (int_64)0
	*(($16 = ($0 + [960]))) = (int_64)4616189618054758400
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$101 }
	CALL _ZdlPv(*($4 + [24]))
	
.LABEL $label$101
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$3 = CALL $144([8898])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$104 }
	*($4) = ($3 << [1])
	$5 = ($4 | [1])
	if ( $3 ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$104
	$28 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($28)
	*($4) = ($28 | [1])
	*($4 + [8]) = $5
	*($4 + [4]) = $3
	
.LABEL $label$103
	CALL memcpy($5, [8898], $3)
	
.LABEL $label$102
	*(($5 + $3)) = [0]
	*(($0 + [984])) = (int_64)0
	*($0 + [976]) = (int_64)11
	$5 = ($0 + [980])
	CALL $117($5, $4)
	*(($0 + [1000])) = (int_64)0
	*(($3 = ($0 + [992]))) = (int_64)4611686018427387904
	if ( ((*($4) & [1]) == 0) ){ goto $label$105 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$105
	*($0 + [1008]) = *(($0 + [624]))
	CALL $115(($0 + [1012]), $17)
	*(($0 + [1032])) = *(($6 + [8]))
	*(($0 + [1024])) = *($6)
	*(($0 + [1040])) = *(($0 + [656]))
	CALL $115(($0 + [1044]), $18)
	*(($0 + [1064])) = *(($7 + [8]))
	*(($0 + [1056])) = *($7)
	*(($0 + [1072])) = *(($0 + [688]))
	CALL $115(($0 + [1076]), $19)
	*(($0 + [1096])) = *(($8 + [8]))
	*(($0 + [1088])) = *($8)
	*(($0 + [1104])) = *(($0 + [720]))
	CALL $115(($0 + [1108]), $20)
	*(($0 + [1128])) = *(($9 + [8]))
	*(($0 + [1120])) = *($9)
	*(($0 + [1136])) = *(($0 + [752]))
	CALL $115(($0 + [1140]), $21)
	*(($0 + [1160])) = *(($10 + [8]))
	*(($0 + [1152])) = *($10)
	*(($0 + [1168])) = *(($0 + [784]))
	CALL $115(($0 + [1172]), $22)
	*(($0 + [1192])) = *(($11 + [8]))
	*(($0 + [1184])) = *($11)
	*(($0 + [1200])) = *(($0 + [816]))
	CALL $115(($0 + [1204]), $23)
	*(($0 + [1224])) = *(($12 + [8]))
	*(($0 + [1216])) = *($12)
	*(($0 + [1232])) = *(($0 + [848]))
	CALL $115(($0 + [1236]), $24)
	*(($0 + [1256])) = *(($13 + [8]))
	*(($0 + [1248])) = *($13)
	*(($0 + [1264])) = *(($0 + [880]))
	CALL $115(($0 + [1268]), $25)
	*(($0 + [1288])) = *(($14 + [8]))
	*(($0 + [1280])) = *($14)
	*(($0 + [1296])) = *(($0 + [912]))
	CALL $115(($0 + [1300]), $26)
	*(($0 + [1320])) = *(($15 + [8]))
	*(($0 + [1312])) = *($15)
	*(($0 + [1328])) = *(($0 + [944]))
	CALL $115(($0 + [1332]), $27)
	*(($0 + [1352])) = *(($16 + [8]))
	*(($0 + [1344])) = *($16)
	*(($0 + [1360])) = *(($0 + [976]))
	CALL $115(($0 + [1364]), $5)
	*(($5 = ($0 + [1396]))) = (int_64)0
	*($0 + [1392]) = $5
	*($0 + [1408]) = $2
	*(($0 + [1416])) = $2
	*(($0 + [1424])) = (int_64)-1
	*(($0 + [1432])) = (int_64)0
	*(($0 + [1440])) = [0]
	*($0 + [1448]) = $2
	*(($0 + [1456])) = $2
	*(($0 + [1464])) = (int_64)-1
	*(($0 + [1472])) = (int_64)0
	*(($0 + [1480])) = [0]
	*(($0 + [1384])) = *(($3 + [8]))
	*(($0 + [1376])) = *($3)
	CALL $104($0)
	$global$0 = ($4 + [368])
	return $0
	
.LABEL $label$21
	CALL $114(($4 + [320]))
	
.LABEL $label$20
	CALL $114(($4 + [304]))
	
.LABEL $label$19
	CALL $114(($4 + [288]))
	
.LABEL $label$18
	CALL $114(($4 + [272]))
	
.LABEL $label$17
	CALL $114(($4 + [256]))
	
.LABEL $label$16
	CALL $114(($4 + [240]))
	
.LABEL $label$15
	CALL $114(($4 + [224]))
	
.LABEL $label$14
	CALL $114(($4 + [208]))
	
.LABEL $label$13
	CALL $114(($4 + [192]))
	
.LABEL $label$12
	CALL $114(($4 + [176]))
	
.LABEL $label$11
	CALL $114(($4 + [160]))
	
.LABEL $label$10
	CALL $114(($4 + [144]))
	
.LABEL $label$9
	CALL $114(($4 + [128]))
	
.LABEL $label$8
	CALL $114(($4 + [112]))
	
.LABEL $label$7
	CALL $114(($4 + [96]))
	
.LABEL $label$6
	CALL $114(($4 + [80]))
	
.LABEL $label$5
	CALL $114(($4 + [64]))
	
.LABEL $label$4
	CALL $114(($4 + [48]))
	
.LABEL $label$3
	CALL $114(($4 + [32]))
	
.LABEL $label$2
	CALL $114(($4 + [16]))
	
.LABEL $label$1
	CALL $114($4)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [1600])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [1560])) = [0]
	*($4 + [1544]) = (int_64)0
	*($4 + [1552]) = (int_64)0
	*($4 + [1536]) = ($2 + $7)
	*($4 + [1528]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8416])
	CALL memcpy(($4 + [1544]), $2, [8])
	*($4 + [1532]) = ($2 + [8])
	$8 = (($4 + [1544]) + [8])
	CALL $29(($4 + [1528]), $8)
	$3 = *($4 + [1536])
	*((($4 + [24]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$9 = *($4 + [1528])
	*($4 + [8]) = $9
	*($4 + [24]) = $9
	$10 = CALL $25(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [1544])
	$8 = CALL $115(($4 + [1568]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $115(($4 + [1584]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [1584]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [1568]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [1568]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $150($2)
	
.LABEL $label$5
	CALL $26($10)
	if ( ((*($4 + [1552]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [1560])))
	
.LABEL $label$10
	$global$0 = ($4 + [1600])
	return [1]
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth(*($0 + [8]))
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$3 = *($0 + [8])
	*($2 + [24]) = $3
	*($2 + [32]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)-6215650152938471424, *($1))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $62(($2 + [24]), $4)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)($2 + [24])), [8342])
	$3 = *(($0 + [8]))
	*($2 + [8]) = $1
	CALL eosio_assert([1], [8482])
	CALL $63(($2 + [24]), $4, $3, ($2 + [8]))
	$4 = *($2 + [48])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = *(($0 + [8]))
	*($2 + [16]) = $1
	CALL $64(($2 + [8]), ($2 + [24]), $3, ($2 + [16]))
	$4 = *($2 + [48])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($2 + [52])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($0)
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

int_32 .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [1472]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [1476])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$6
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$7
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$4 = *(($0 + [1472]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$1 = *(($0 + [1432]))
	if ( ($1 == 0) ){ goto $label$8 }
	$2 = ($0 + [1436])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$13
	CALL _ZdlPv($3)
	
.LABEL $label$12
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$11 }
	$4 = *(($0 + [1432]))
	goto $label$9 
	
.LABEL $label$10
	$4 = $1
	
.LABEL $label$9
	*($2) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$8
	CALL $105(($0 + [1392]), *(($0 + [1396])))
	if ( ((*(($0 + [1364])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($0 + [1372])))
	
.LABEL $label$14
	if ( ((*(($0 + [1332])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($0 + [1340])))
	
.LABEL $label$15
	if ( ((*(($0 + [1300])) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($0 + [1308])))
	
.LABEL $label$16
	if ( ((*(($0 + [1268])) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($0 + [1276])))
	
.LABEL $label$17
	if ( ((*(($0 + [1236])) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($0 + [1244])))
	
.LABEL $label$18
	if ( ((*(($0 + [1204])) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($0 + [1212])))
	
.LABEL $label$19
	if ( ((*(($0 + [1172])) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($0 + [1180])))
	
.LABEL $label$20
	if ( ((*(($0 + [1140])) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($0 + [1148])))
	
.LABEL $label$21
	if ( ((*(($0 + [1108])) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($0 + [1116])))
	
.LABEL $label$22
	if ( ((*(($0 + [1076])) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($0 + [1084])))
	
.LABEL $label$23
	if ( ((*(($0 + [1044])) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($0 + [1052])))
	
.LABEL $label$24
	if ( ((*(($0 + [1012])) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($0 + [1020])))
	
.LABEL $label$25
	if ( ((*(($0 + [980])) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($0 + [988])))
	
.LABEL $label$26
	if ( ((*(($0 + [948])) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($0 + [956])))
	
.LABEL $label$27
	if ( ((*(($0 + [916])) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($0 + [924])))
	
.LABEL $label$28
	if ( ((*(($0 + [884])) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($0 + [892])))
	
.LABEL $label$29
	if ( ((*(($0 + [852])) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($0 + [860])))
	
.LABEL $label$30
	if ( ((*(($0 + [820])) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($0 + [828])))
	
.LABEL $label$31
	if ( ((*(($0 + [788])) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*(($0 + [796])))
	
.LABEL $label$32
	if ( ((*(($0 + [756])) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*(($0 + [764])))
	
.LABEL $label$33
	if ( ((*(($0 + [724])) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($0 + [732])))
	
.LABEL $label$34
	if ( ((*(($0 + [692])) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($0 + [700])))
	
.LABEL $label$35
	if ( ((*(($0 + [660])) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($0 + [668])))
	
.LABEL $label$36
	if ( ((*(($0 + [628])) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*(($0 + [636])))
	
.LABEL $label$37
	if ( ((*(($0 + [584])) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($0 + [592])))
	
.LABEL $label$38
	if ( ((*(($0 + [552])) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*(($0 + [560])))
	
.LABEL $label$39
	if ( ((*(($0 + [520])) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*(($0 + [528])))
	
.LABEL $label$40
	if ( ((*(($0 + [488])) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($0 + [496])))
	
.LABEL $label$41
	if ( ((*(($0 + [456])) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*(($0 + [464])))
	
.LABEL $label$42
	if ( ((*(($0 + [424])) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*(($0 + [432])))
	
.LABEL $label$43
	if ( ((*(($0 + [392])) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*(($0 + [400])))
	
.LABEL $label$44
	if ( (*(($0 + [360])) & [1]) ){ goto $label$65 }
	$4 = [1]
	if ( (*($0 + [328]) & [1]) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$65
	CALL _ZdlPv(*(($0 + [368])))
	$4 = [1]
	if ( ((*($0 + [328]) & [1]) == 0) ){ goto $label$63 }
	
.LABEL $label$64
	CALL _ZdlPv(*(($0 + [336])))
	if ( ((*($0 + [288]) & $4) == 0) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	if ( (*($0 + [288]) & $4) ){ goto $label$61 }
	
.LABEL $label$62
	$4 = [1]
	if ( (*($0 + [256]) & [1]) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	CALL _ZdlPv(*(($0 + [296])))
	$4 = [1]
	if ( ((*($0 + [256]) & [1]) == 0) ){ goto $label$59 }
	
.LABEL $label$60
	CALL _ZdlPv(*(($0 + [264])))
	if ( ((*($0 + [224]) & $4) == 0) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$59
	if ( (*($0 + [224]) & $4) ){ goto $label$57 }
	
.LABEL $label$58
	$4 = [1]
	if ( (*($0 + [192]) & [1]) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	CALL _ZdlPv(*(($0 + [232])))
	$4 = [1]
	if ( ((*($0 + [192]) & [1]) == 0) ){ goto $label$55 }
	
.LABEL $label$56
	CALL _ZdlPv(*(($0 + [200])))
	if ( ((*($0 + [160]) & $4) == 0) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	if ( (*($0 + [160]) & $4) ){ goto $label$53 }
	
.LABEL $label$54
	$4 = [1]
	if ( (*($0 + [128]) & [1]) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	CALL _ZdlPv(*(($0 + [168])))
	$4 = [1]
	if ( ((*($0 + [128]) & [1]) == 0) ){ goto $label$51 }
	
.LABEL $label$52
	CALL _ZdlPv(*(($0 + [136])))
	if ( ((*($0 + [96]) & $4) == 0) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( (*($0 + [96]) & $4) ){ goto $label$49 }
	
.LABEL $label$50
	$4 = [1]
	if ( (*($0 + [64]) & [1]) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	CALL _ZdlPv(*(($0 + [104])))
	$4 = [1]
	if ( ((*($0 + [64]) & [1]) == 0) ){ goto $label$47 }
	
.LABEL $label$48
	CALL _ZdlPv(*(($0 + [72])))
	if ( ((*($0 + [32]) & $4) == 0) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$47
	if ( (*($0 + [32]) & $4) ){ goto $label$45 }
	
.LABEL $label$46
	return $0
	
.LABEL $label$45
	CALL _ZdlPv(*(($0 + [40])))
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $135 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $131([14], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $128($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	$6 = *($0)
	$7 = ($1 + [8])
	CALL $117($7, ($5 + [4]))
	$4 = *($4)
	*($1 + [24]) = *($4 + [16])
	*($1 + [32]) = *($4 + [24])
	$4 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [24])
	$8 = (CASTING uint_64)(uint_32 $5)
	$5 = ($1 + [32])
	$9 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [8476])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $72($3, $7)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($3 + [4]), $9, [8])
	$7 = (*($3 + [4]) + [8])
	*($3 + [4]) = $7
	CALL eosio_assert(((int_32)(*($3 + [8]) - $7) > (int_32)[7]), [8476])
	CALL memcpy(*($3 + [4]), $5, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($6 + [8]), (int_64)-6215650152938471424, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($6 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $150($2)
	if ( (uint_64)($8 <= *($6 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $150($0)
	
.LABEL $label$1
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8393])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([56])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [44]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8416])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $29(($3 + [32]), ($5 + [8]))
	CALL eosio_assert(((uint_32)(*($3 + [40]) - *($3 + [36])) > (uint_32)[7]), [8416])
	CALL memcpy(($5 + [24]), *($3 + [36]), [8])
	*($3 + [36]) = (*($3 + [36]) + [8])
	CALL $29(($3 + [32]), ($5 + [32]))
	*($5 + [48]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $74(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$10
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [8425])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [40]) = $1
	CALL $68(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $69(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [8425])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [44]) = $1
	CALL $73(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [48])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$4
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8517])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8568])
	$6 = *($1)
	*($1) = *(*($3))
	$7 = ($1 + [8])
	CALL $117($7, *($3 + [4]))
	*($1 + [24]) = *(*($3 + [8]))
	$8 = ($1 + [32])
	CALL $117($8, *($3 + [12]))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8619])
	$3 = *($1 + [8])
	$9 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($9 + [16])
	$10 = (CASTING uint_64)(uint_32 $9)
	$9 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	$11 = *(($1 + [32]))
	$11 = ( *(($1 + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$3 = ($11 + $3)
	$10 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $147($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8476])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	CALL $72($5, $7)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($5 + [4]), $9, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL $72($5, $8)
	CALL db_update_i64(*($1 + [48]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $150($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $115(($2 + [48]), ($1 + [8]))
	$5 = CALL $115(($2 + [32]), ($1 + [20]))
	*(($6 = (($2 + [16]) + [8]))) = *(($1 + [40]))
	*($2 + [16]) = *($1 + [32])
	*((($2 + [64]) + [8])) = *($6)
	*($2 + [64]) = *($2 + [16])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*($0) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$6 = CALL $115(($2 + [112]), $4)
	$7 = CALL $115(($2 + [96]), $5)
	$8 = *((($2 + [64]) + [8]))
	*((($2 + [80]) + [8])) = $8
	*(($2 + [8])) = $8
	$8 = *($2 + [64])
	*($2) = $8
	*($2 + [80]) = $8
	CALL void $0((int_32 $3), (int_64 $6), (int_32 $7), (int_32 $2), (int_32 $1))
	if ( (*($2 + [96]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [112]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	$1 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($5) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($4) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [128])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [128])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8416])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	CALL $29(*($1), ($4 + [8]))
	CALL $29(*($1), ($4 + [20]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8416])
	CALL memcpy(($4 + [32]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [8416])
	CALL memcpy(($2 + [8]), *($1 + [4]), [8])
	*(($4 + [40])) = *($2 + [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8517])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8568])
	$6 = *($1)
	$7 = *($3)
	*($1) = *($7)
	$8 = ($1 + [8])
	CALL $117($8, ($7 + [4]))
	$3 = *($3)
	*($1 + [24]) = *($3 + [16])
	*($1 + [32]) = *($3 + [24])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8619])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [24])
	$9 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [32])
	$10 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $147($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [8476])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	CALL $72($5, $8)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($5 + [4]), $10, [8])
	$8 = (*($5 + [4]) + [8])
	*($5 + [4]) = $8
	CALL eosio_assert(((int_32)(*($5 + [8]) - $8) > (int_32)[7]), [8476])
	CALL memcpy(*($5 + [4]), $7, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $150($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8393])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([56])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [40]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8416])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $29(($3 + [32]), ($5 + [8]))
	CALL eosio_assert(((uint_32)(*($3 + [40]) - *($3 + [36])) > (uint_32)[7]), [8416])
	CALL memcpy(($5 + [24]), *($3 + [36]), [8])
	$6 = (*($3 + [36]) + [8])
	*($3 + [36]) = $6
	CALL eosio_assert(((uint_32)(*($3 + [40]) - $6) > (uint_32)[7]), [8416])
	CALL memcpy(($5 + [32]), *($3 + [36]), [8])
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	*($3 + [36]) = (*($3 + [36]) + [8])
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $69(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8416])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8416])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8416])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8416])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $29($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8416])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8416])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8416])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [8416])
	CALL memcpy(($1 + [72]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [76]) == (int_32)$0), [9555])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [9600])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9650])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [80]))
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*(*($0 + [4])))
	CALL eosio_assert([1], [9345])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8678])
	*($1 + [8]) = $5
	*($1) = (int_64)0
	$9 = $2
	$7 = ($9 + [-16])
	$global$0 = $7
	CALL eosio_assert([1], [8476])
	CALL memcpy($7, $1, [8])
	*($3 + [8]) = *($1 + [8])
	CALL eosio_assert([1], [8476])
	CALL memcpy(($9 + [-8]), ($3 + [8]), [8])
	$6 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($1 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $6), $7, [16])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8476])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8476])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $105($0, *($1))
	CALL $105($0, *($1 + [4]))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$2
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $104 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [624])
	$4 = ($0 + [628])
	$3 = ($0 + [1392])
	$5 = CALL $38($3, ($1 + [12]), $4)
	$6 = *($5)
	if ( $6 ){ goto $label$1 }
	$6 = CALL _Znwj([32])
	CALL $115(($6 + [16]), $4)
	*($6) = (int_64)0
	*($6 + [8]) = *($1 + [12])
	*($5) = $6
	*($6 + [28]) = [0]
	$4 = $6
	$7 = *(*($3))
	if ( ($7 == 0) ){ goto $label$2 }
	*($3) = $7
	$4 = *($5)
	
.LABEL $label$2
	CALL $39(*(($0 + [1396])), $4)
	*(($5 = ($0 + [1400]))) = (*($5) + [1])
	
.LABEL $label$1
	*(($6 + [28])) = $2
	$2 = *($0 + [656])
	$4 = ($0 + [660])
	$5 = CALL $38($3, ($1 + [12]), $4)
	$6 = *($5)
	if ( $6 ){ goto $label$3 }
	$6 = CALL _Znwj([32])
	CALL $115(($6 + [16]), $4)
	*($6) = (int_64)0
	*($6 + [8]) = *($1 + [12])
	*($5) = $6
	*($6 + [28]) = [0]
	$4 = $6
	$7 = *(*($3))
	if ( ($7 == 0) ){ goto $label$4 }
	*($3) = $7
	$4 = *($5)
	
.LABEL $label$4
	CALL $39(*(($0 + [1396])), $4)
	*(($5 = ($0 + [1400]))) = (*($5) + [1])
	
.LABEL $label$3
	*(($6 + [28])) = $2
	$2 = *($0 + [688])
	$4 = ($0 + [692])
	$5 = CALL $38($3, ($1 + [12]), $4)
	$6 = *($5)
	if ( $6 ){ goto $label$5 }
	$6 = CALL _Znwj([32])
	CALL $115(($6 + [16]), $4)
	*($6) = (int_64)0
	*($6 + [8]) = *($1 + [12])
	*($5) = $6
	*($6 + [28]) = [0]
	$4 = $6
	$7 = *(*($3))
	if ( ($7 == 0) ){ goto $label$6 }
	*($3) = $7
	$4 = *($5)
	
.LABEL $label$6
	CALL $39(*(($0 + [1396])), $4)
	*(($5 = ($0 + [1400]))) = (*($5) + [1])
	
.LABEL $label$5
	*(($6 + [28])) = $2
	$2 = *($0 + [720])
	$4 = ($0 + [724])
	$5 = CALL $38($3, ($1 + [12]), $4)
	$6 = *($5)
	if ( $6 ){ goto $label$7 }
	$6 = CALL _Znwj([32])
	CALL $115(($6 + [16]), $4)
	*($6) = (int_64)0
	*($6 + [8]) = *($1 + [12])
	*($5) = $6
	*($6 + [28]) = [0]
	$4 = $6
	$7 = *(*($3))
	if ( ($7 == 0) ){ goto $label$8 }
	*($3) = $7
	$4 = *($5)
	
.LABEL $label$8
	CALL $39(*(($0 + [1396])), $4)
	*(($5 = ($0 + [1400]))) = (*($5) + [1])
	
.LABEL $label$7
	*(($6 + [28])) = $2
	$2 = *($0 + [752])
	$4 = ($0 + [756])
	$5 = CALL $38($3, ($1 + [12]), $4)
	$6 = *($5)
	if ( $6 ){ goto $label$9 }
	$6 = CALL _Znwj([32])
	CALL $115(($6 + [16]), $4)
	*($6) = (int_64)0
	*($6 + [8]) = *($1 + [12])
	*($5) = $6
	*($6 + [28]) = [0]
	$4 = $6
	$7 = *(*($3))
	if ( ($7 == 0) ){ goto $label$10 }
	*($3) = $7
	$4 = *($5)
	
.LABEL $label$10
	CALL $39(*(($0 + [1396])), $4)
	*(($5 = ($0 + [1400]))) = (*($5) + [1])
	
.LABEL $label$9
	*(($6 + [28])) = $2
	$2 = *($0 + [784])
	$4 = ($0 + [788])
	$5 = CALL $38($3, ($1 + [12]), $4)
	$6 = *($5)
	if ( $6 ){ goto $label$11 }
	$6 = CALL _Znwj([32])
	CALL $115(($6 + [16]), $4)
	*($6) = (int_64)0
	*($6 + [8]) = *($1 + [12])
	*($5) = $6
	*($6 + [28]) = [0]
	$4 = $6
	$7 = *(*($3))
	if ( ($7 == 0) ){ goto $label$12 }
	*($3) = $7
	$4 = *($5)
	
.LABEL $label$12
	CALL $39(*(($0 + [1396])), $4)
	*(($5 = ($0 + [1400]))) = (*($5) + [1])
	
.LABEL $label$11
	*(($6 + [28])) = $2
	$2 = *($0 + [816])
	$4 = ($0 + [820])
	$5 = CALL $38($3, ($1 + [12]), $4)
	$6 = *($5)
	if ( $6 ){ goto $label$13 }
	$6 = CALL _Znwj([32])
	CALL $115(($6 + [16]), $4)
	*($6) = (int_64)0
	*($6 + [8]) = *($1 + [12])
	*($5) = $6
	*($6 + [28]) = [0]
	$4 = $6
	$7 = *(*($3))
	if ( ($7 == 0) ){ goto $label$14 }
	*($3) = $7
	$4 = *($5)
	
.LABEL $label$14
	CALL $39(*(($0 + [1396])), $4)
	*(($5 = ($0 + [1400]))) = (*($5) + [1])
	
.LABEL $label$13
	*(($6 + [28])) = $2
	$2 = *($0 + [848])
	$4 = ($0 + [852])
	$5 = CALL $38($3, ($1 + [12]), $4)
	$6 = *($5)
	if ( $6 ){ goto $label$15 }
	$6 = CALL _Znwj([32])
	CALL $115(($6 + [16]), $4)
	*($6) = (int_64)0
	*($6 + [8]) = *($1 + [12])
	*($5) = $6
	*($6 + [28]) = [0]
	$4 = $6
	$7 = *(*($3))
	if ( ($7 == 0) ){ goto $label$16 }
	*($3) = $7
	$4 = *($5)
	
.LABEL $label$16
	CALL $39(*(($0 + [1396])), $4)
	*(($5 = ($0 + [1400]))) = (*($5) + [1])
	
.LABEL $label$15
	*(($6 + [28])) = $2
	$2 = *($0 + [880])
	$4 = ($0 + [884])
	$5 = CALL $38($3, ($1 + [12]), $4)
	$6 = *($5)
	if ( $6 ){ goto $label$17 }
	$6 = CALL _Znwj([32])
	CALL $115(($6 + [16]), $4)
	*($6) = (int_64)0
	*($6 + [8]) = *($1 + [12])
	*($5) = $6
	*($6 + [28]) = [0]
	$4 = $6
	$7 = *(*($3))
	if ( ($7 == 0) ){ goto $label$18 }
	*($3) = $7
	$4 = *($5)
	
.LABEL $label$18
	CALL $39(*(($0 + [1396])), $4)
	*(($5 = ($0 + [1400]))) = (*($5) + [1])
	
.LABEL $label$17
	*(($6 + [28])) = $2
	$2 = *($0 + [912])
	$4 = ($0 + [916])
	$5 = CALL $38($3, ($1 + [12]), $4)
	$6 = *($5)
	if ( $6 ){ goto $label$19 }
	$6 = CALL _Znwj([32])
	CALL $115(($6 + [16]), $4)
	*($6) = (int_64)0
	*($6 + [8]) = *($1 + [12])
	*($5) = $6
	*($6 + [28]) = [0]
	$4 = $6
	$7 = *(*($3))
	if ( ($7 == 0) ){ goto $label$20 }
	*($3) = $7
	$4 = *($5)
	
.LABEL $label$20
	CALL $39(*(($0 + [1396])), $4)
	*(($5 = ($0 + [1400]))) = (*($5) + [1])
	
.LABEL $label$19
	*(($6 + [28])) = $2
	$2 = *($0 + [944])
	$4 = ($0 + [948])
	$5 = CALL $38($3, ($1 + [12]), $4)
	$6 = *($5)
	if ( $6 ){ goto $label$21 }
	$6 = CALL _Znwj([32])
	CALL $115(($6 + [16]), $4)
	*($6) = (int_64)0
	*($6 + [8]) = *($1 + [12])
	*($5) = $6
	*($6 + [28]) = [0]
	$4 = $6
	$7 = *(*($3))
	if ( ($7 == 0) ){ goto $label$22 }
	*($3) = $7
	$4 = *($5)
	
.LABEL $label$22
	CALL $39(*(($0 + [1396])), $4)
	*(($5 = ($0 + [1400]))) = (*($5) + [1])
	
.LABEL $label$21
	*(($6 + [28])) = $2
	$2 = *($0 + [976])
	$4 = ($0 + [980])
	$5 = CALL $38($3, ($1 + [12]), $4)
	$6 = *($5)
	if ( $6 ){ goto $label$23 }
	$6 = CALL _Znwj([32])
	CALL $115(($6 + [16]), $4)
	*($6) = (int_64)0
	*($6 + [8]) = *($1 + [12])
	*($5) = $6
	*($6 + [28]) = [0]
	$4 = $6
	$7 = *(*($3))
	if ( ($7 == 0) ){ goto $label$24 }
	*($3) = $7
	$4 = *($5)
	
.LABEL $label$24
	CALL $39(*(($0 + [1396])), $4)
	*(($0 = ($0 + [1400]))) = (*($0) + [1])
	
.LABEL $label$23
	*(($6 + [28])) = $2
	$global$0 = ($1 + [16])
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $128($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	$1 = *($2)
	$4 = *(*($2 + [4]))
	*($0) = *($4)
	*($0 + [8]) = *(($4 + [8]))
	CALL eosio_assert([1], [8476])
	CALL memcpy($3, $0, [8])
	*($3 + [24]) = *($0 + [8])
	CALL eosio_assert([1], [8476])
	CALL memcpy(($3 | [8]), ($3 + [24]), [8])
	$5 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)3607749779137757184, *(*($2 + [8])), $5), $3, [16])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $128($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8416])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8416])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8416])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8416])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8416])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	CALL $72(*($1), ($4 + [8]))
	CALL $72(*($1), ($4 + [20]))
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($1 + [4]), ($4 + [32]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	*($2 + [8]) = *(($4 + [40]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - $0) > (int_32)[7]), [8476])
	CALL memcpy(*($1 + [4]), ($2 + [8]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $128($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $91(*($0 + [4]), $1)
	$5 = *($1 + [32])
	$6 = ( *(($1 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [60])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $92($3, $1)
	$7 = *($1)
	*($1 + [80]) = CALL db_store_i64(*($4 + [8]), (int_64)-4293729036219842560, *(*($0 + [8])), $7, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $150($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $128($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $115(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($6 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, ( $7 ? ($1 + [1]) : $5 ), $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $125($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $114($0)
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [8425])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [44]) = $1
	CALL $90(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [48])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$4
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $149 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10508]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10512])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10508]) = [1]
	$2 = ($2 << [16])
	*([0] + [10512]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10512])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10512]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10508]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10508]) = [1]
	$3 = ($3 << [16])
	*([0] + [10512]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10512])
	
.LABEL $label$10
	*([0] + [10512]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $149($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8222])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $145 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $129())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $146($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $144 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $147 (int_32 $0)
{
	return CALL $148([10516], $0)
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $147($1)
	
.LABEL $label$2
	*(CALL $129()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $147(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $150($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $138($3, (int_64)0)
	$4 = CALL $140($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $139($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $129()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $139($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18993]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $138($0, (int_64)0)
	*(CALL $129()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $139($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $139($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $139($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $139($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18993])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $139($0)
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $139($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8204]))
	$8 = (int_64)0
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $139($0)
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $139($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $138($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18993]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18993]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $139($0) + [18993]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $129()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $129()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $129()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8476])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8476])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $117($6, *($4 + [4]))
	*($1 + [24]) = *(*($4 + [8]))
	$7 = ($1 + [32])
	CALL $117($7, *($4 + [12]))
	$4 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($8 + [16])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$10 = *(($1 + [32]))
	$10 = ( *(($1 + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$4 = ($10 + $4)
	$9 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $147($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [8476])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $72($3, $6)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($3 + [4]), $8, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $72($3, $7)
	$9 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($5 + [8]), (int_64)7235159537265672192, *(*($0 + [8])), $9, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$9 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $150($2)
	if ( (uint_64)($9 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8421])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $71($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8416])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $128($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8517])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8568])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [9100])
	$6 = (int_64)
	*($1) = $6(*($1) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9148])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9170])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [8619])
	CALL eosio_assert([1], [8476])
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [8476])
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8517])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8568])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [9191])
	$6 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9234])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9253])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [8619])
	CALL eosio_assert([1], [8476])
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [8476])
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $128($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = ($global$0 - [96])
	$global$0 = $7
	$8 = [0]
	*($7 + [40]) = [0]
	*($7 + [32]) = (int_64)0
	
.LOOP $label$1:
	$9 = *(($1 + $8))
	CALL $124(($7 + [32]), *((uint_32($9 >> [4]) + [9279])))
	CALL $124(($7 + [32]), *((($9 & [15]) + [9279])))
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)[32]) ){ goto $label$1 }
	$8 = [0]
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	
.LOOP $label$2:
	$9 = *(($2 + $8))
	CALL $124(($7 + [16]), *((uint_32($9 >> [4]) + [9279])))
	CALL $124(($7 + [16]), *((($9 & [15]) + [9279])))
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)[32]) ){ goto $label$2 }
	$8 = *($7 + [16])
	$9 = ($8 & [1])
	$8 = CALL $125(($7 + [32]), ( *((($7 + [16]) + [8])) ? (($7 + [16]) | [1]) : $9 ), ( *($7 + [20]) ? uint_32($8 >> [1]) : $9 ))
	$9 = ($8 + [8])
	*((($7 + [64]) + [8])) = *($9)
	*($7 + [64]) = *($8)
	*($8) = (int_64)0
	*($9) = [0]
	$8 = *($3)
	$9 = ($8 & [1])
	$8 = CALL $125(($7 + [64]), ( *($3 + [8]) ? ($3 + [1]) : $9 ), ( *($3 + [4]) ? uint_32($8 >> [1]) : $9 ))
	$9 = ($8 + [8])
	*((($7 + [48]) + [8])) = *($9)
	*($7 + [48]) = *($8)
	*($8) = (int_64)0
	*($9) = [0]
	if ( (*($7 + [64]) & [1]) ){ goto $label$7 }
	if ( (*($7 + [16]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($7 + [72]))
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($7 + [24])))
	$1 = [1]
	if ( (*($7 + [32]) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($7 + [40])))
	
.LABEL $label$3
	$8 = *($7 + [48])
	$9 = ($8 & $1)
	CALL sha256(( *($7 + [56]) ? (($7 + [48]) | $1) : $9 ), ( *($7 + [52]) ? uint_32($8 >> $1) : $9 ), ($7 + [64]))
	$8 = [0]
	*($7 + [40]) = [0]
	*($7 + [32]) = (int_64)0
	
.LOOP $label$8:
	$9 = *((($7 + [64]) + $8))
	CALL $124(($7 + [32]), *((uint_32($9 >> [4]) + [9279])))
	CALL $124(($7 + [32]), *((($9 & [15]) + [9279])))
	$8 = ($8 + $1)
	if ( ((int_32)$8 != (int_32)[32]) ){ goto $label$8 }
	$2 = (($7 + [16]) | [1])
	$8 = [0]
	$1 = (($7 + [16]) + [8])
	$9 = [0]
	
.LOOP $label$9:
	CALL $116(($7 + [16]), ($7 + [32]), $9, [5], ($7 + [32]))
	*($4) = ((int_64)((uint_64)(CASTING int_64)(int_32 CALL $141(( *($1) ? $2 : (*($7 + [16]) & [1]) ), ($7 + [12]), [16])) % (uint_64)*($6)) + (int_64)1)
	$8 = ($8 + [1])
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($1))
	
.LABEL $label$10
	$9 = ($9 + [5])
	$4 = ($4 + [8])
	if ( ($8 <= *($5)) ){ goto $label$9 }
	if ( (*($7 + [32]) & [1]) ){ goto $label$13 }
	if ( (*($7 + [48]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($7 + [40])))
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($7 + [56])))
	$global$0 = ($7 + [96])
	return 
	
.LABEL $label$11
	$global$0 = ($7 + [96])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $144($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	CALL $125($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $114($0)
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$16()), [8425])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $88($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($4 + [16]) = $2)
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $89(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8517])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [8568])
	*($1 + [24]) = ((float_64)*($1 + [24]) + (float_64)(float_64)1)
	$6 = *($1)
	CALL eosio_assert([1], [8619])
	$7 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [16])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	$10 = ($1 + [24])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$11 = *($1 + [32])
	$11 = ( *(($1 + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$7 = ($11 + $7)
	$9 = (CASTING uint_64)(uint_32 $11)
	$11 = ($1 + [32])
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$4 = CALL $147($7)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5) = $4
	*($5 + [8]) = ($4 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [8476])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	CALL $72($5, $8)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [8476])
	CALL memcpy(*($5 + [4]), $10, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL $72($5, $11)
	CALL db_update_i64(*($1 + [48]), $2, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $150($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $32 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$0 = CALL $75(($3 + [8]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8), [9058]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)*($2)), [9082])
	*($3) = $2
	CALL $76(($3 + [8]), $0, $1, $3)
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($3 + [36])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	CALL _ZdlPv($0)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($3 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

void .FUNC $33 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$5 = *($0)
	*($4 + [24]) = $5
	$6 = *($2 + [8])
	*($4 + [32]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $41(($4 + [24]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [24])), [8342])
	*($4 + [8]) = $2
	CALL eosio_assert([1], [8482])
	CALL $77(($4 + [24]), $0, (int_64)0, ($4 + [8]))
	$7 = *($4 + [48])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [16]) = $2
	CALL $78(($4 + [8]), ($4 + [24]), $3, ($4 + [16]))
	$7 = *($4 + [48])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [52])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($4 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $7
	
.LABEL $label$4
	*($8) = $7
	CALL _ZdlPv($2)
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $115(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $115(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8393])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $86(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $87(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $129 ()
{
	return [10500]
}

void .FUNC $127 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $121(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $135(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8563], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $121(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $121(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}