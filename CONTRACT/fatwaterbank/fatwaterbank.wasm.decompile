(data (i32.const 4) "\d0f\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "check\00")
(data (i32.const 160) "freedapp\00")
(data (i32.const 176) "read\00")
(data (i32.const 192) "invalid symbol name\00")
(data (i32.const 224) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 288) "Plan does not exist.\00")
(data (i32.const 320) "cannot increment end iterator\00")
(data (i32.const 352) "Payer have already applied for free program within 24h.\00")
(data (i32.const 416) "active\00")
(data (i32.const 432) "delegatebw\00")
(data (i32.const 448) "write\00")
(data (i32.const 464) "cannot create objects in table of another contract\00")
(data (i32.const 516) "\10\02\00\00")
(data (i32.const 528) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 576) "error reading iterator\00")
(data (i32.const 608) "undelegatebw\00")
(data (i32.const 624) "cannot pass end iterator to modify\00")
(data (i32.const 672) "object passed to modify is not in multi_index\00")
(data (i32.const 720) "cannot modify objects in table of another contract\00")
(data (i32.const 784) "updater cannot change primary key when modifying an object\00")
(data (i32.const 848) "get\00")
(data (i32.const 864) "Minimum plan is 0.01 EOS.\00")
(data (i32.const 896) "Please select the plan.\00")
(data (i32.const 928) "Account name is too long.\00")
(data (i32.const 960) "Plan is not correct.\00")
(data (i32.const 992) "Minimum plan is 0.02 EOS.\00")
(data (i32.const 1024) "Minimum plan is 0.05 EOS.\00")
(data (i32.const 1056) "Minimum plan is 0.1 EOS.\00")
(data (i32.const 1088) "Minimum plan is 0.8 EOS.\00")
(data (i32.const 1120) "Minimum plan is 1.2 EOS.\00")
(data (i32.const 1152) "Minimum plan is 0.25 EOS.\00")
(data (i32.const 1184) "Minimum deposit is 100.00 EOS.\00")
(data (i32.const 1216) "Deposit confirmed - http://fatbank.io \00")
(data (i32.const 1264) "dinnerwinner\00")
(data (i32.const 1280) "t\00")
(data (i32.const 1296) "a\00")
(data (i32.const 1312) "b\00")
(data (i32.const 1328) "c1\00")
(data (i32.const 1344) "c2\00")
(data (i32.const 1360) "d1\00")
(data (i32.const 1376) "d2\00")
(data (i32.const 1392) "e1\00")
(data (i32.const 1408) "e2\00")
(data (i32.const 1424) "deposit\00")
(data (i32.const 9840) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_get_i64" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$8 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$9 (param i32 i32)))
(import "env" "memcpy" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$13 (param i64)))
(import "env" "require_auth2" (func $fimport$14 (param i64 i64)))
(import "env" "send_inline" (func $fimport$15 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $36))
(export "free" (func $39))
(export "memchr" (func $48))
(export "memcmp" (func $49))
(export "strlen" (func $50))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $51 $7 $11 $9)



void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $40($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $45($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $41($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	*($4 + [15]) = *($0 + [48])
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [448])
	CALL memcpy(*($3 + [4]), ($4 + [15]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*([0] + [4]) = ($4 + [16])
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9816])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9624]
	$1 = (((int_32)$2 * (int_32)[12]) + [9624])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($1 + [56]) = *(*($3) + [152])
	$4 = *($1)
	CALL eosio_assert([1], [784])
	*($5 + [104]) = ($5 + [88])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $26(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $5, [88])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [448])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [448])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [448])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $18($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [448])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [448])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $22(CALL $21($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	$5 = CALL $25($0)
	*($0 + [88]) = $1
	$1 = *($2 + [4])
	$6 = *($1)
	*($0) = *($6 + [160])
	*($0 + [8]) = *(*($1 + [4]))
	$3 = *($2)
	*($0 + [16]) = *(*($1 + [8]))
	$7 = *($1 + [12])
	*($0 + [24]) = *($7)
	*(($0 + [32])) = *(($7 + [8]))
	$7 = *($1 + [16])
	*($0 + [40]) = *($7)
	*(($0 + [48])) = *(($7 + [8]))
	*($0 + [64]) = *(*($1 + [20]))
	*($0 + [56]) = *($6 + [144])
	*($0 + [72]) = *(*($1 + [24]))
	*($0 + [80]) = *(*($1 + [28]))
	*($8 + [104]) = ($8 + [88])
	*($8 + [100]) = $8
	*($8 + [96]) = $8
	CALL $26(($8 + [96]), $5)
	$4 = *($0)
	*($0 + [92]) = CALL db_store_i64(*($3 + [8]), (int_64)-4995154566124142592, *(*($2 + [8])), $4, $8, [88])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [112])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [448])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $25 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24]) = (int_64)0
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [224])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [192])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [224])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [192])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $40(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $45($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $41($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $41($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $40(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $41($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $42 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $41 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9932])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $40($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $40($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $45 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

void .FUNC $51 ()
{
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [224])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [192])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $30(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $31(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $41(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [128])
	*([0] + [4]) = $13
	CALL require_auth($1)
	$1 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$6 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)-4995154566124142592, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$1 = ((int_64)$1 & (int_64)4294967295)
	$2 = ($0 + [168])
	$6 = CALL $15($2, $6)
	$7 = ($0 + [144])
	
.LOOP $label$3:
	if ( ((int_64)*($6 + [56]) != (int_64)*($7)) ){ goto $label$4 }
	if ( (uint_64)(*($6 + [72]) <= $1) ){ goto $label$2 }
	
.LABEL $label$4
	CALL eosio_assert([1], [320])
	$6 = CALL db_next_i64(*($6 + [92]), ($13 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $15($2, $6)
	goto $label$3 
	
.LABEL $label$2
	$3 = *($0)
	$1 = (int_64)0
	$8 = (int_64)59
	$7 = [416]
	$9 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$10 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$4 = ($4 + [165])
	goto $label$8 
	
.LABEL $label$10
	$10 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$6
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$5 }
	$1 = (int_64)0
	$8 = (int_64)59
	$7 = [32]
	$11 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$1 > (uint_64)(int_64)4) ){ goto $label$16 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$4 = ($4 + [165])
	goto $label$14 
	
.LABEL $label$16
	$10 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$12
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$11 }
	$1 = (int_64)0
	$10 = (int_64)59
	$7 = [608]
	$12 = (int_64)0
	
.LOOP $label$17:
	$8 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$18 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$4 = ($4 + [165])
	goto $label$19 
	
.LABEL $label$20
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$18
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$8 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$17 }
	$1 = *($6 + [16])
	*((($13 + [8]) + [28])) = *(($6 + [52]))
	*((($13 + [8]) + [24])) = *(($6 + [48]))
	*((($13 + [8]) + [20])) = *(($6 + [44]))
	*($13 + [8]) = $3
	*($13 + [16]) = $1
	*($13 + [24]) = *($6 + [40])
	*(($13 + [48])) = *(($6 + [32]))
	*($13 + [40]) = *($6 + [24])
	*($13 + [56]) = $11
	*($13 + [64]) = $12
	*(($7 = CALL $40([16]))) = $3
	*($7 + [8]) = $9
	*(($4 = (($13 + [56]) + [32]))) = [0]
	$5 = ($7 + [16])
	*((($13 + [56]) + [24])) = $5
	*((($13 + [56]) + [20])) = $5
	*($13 + [72]) = $7
	*($13 + [84]) = [0]
	*(($13 + [92])) = [0]
	CALL $18((($13 + [56]) + [28]), [48])
	$7 = *($4)
	$4 = *($13 + [84])
	*($13 + [100]) = $4
	*($13 + [96]) = $4
	*($13 + [104]) = $7
	*($13 + [112]) = ($13 + [96])
	*($13 + [120]) = ($13 + [8])
	CALL $28(($13 + [120]), ($13 + [112]))
	CALL $20(($13 + [8]), ($13 + [56]))
	$7 = *($13 + [8])
	CALL send_inline($7, (*($13 + [12]) - $7))
	$7 = *($13 + [8])
	if ( ($7 == 0) ){ goto $label$21 }
	*($13 + [12]) = $7
	CALL $41($7)
	
.LABEL $label$21
	*($13 + [8]) = $0
	CALL eosio_assert([1], [624])
	CALL $29($2, $6, (int_64)0, ($13 + [8]))
	$6 = *($13 + [84])
	if ( ($6 == 0) ){ goto $label$22 }
	*(($13 + [88])) = $6
	CALL $41($6)
	
.LABEL $label$22
	$6 = *($13 + [72])
	if ( ($6 == 0) ){ goto $label$1 }
	*(($13 + [76])) = $6
	CALL $41($6)
	
.LABEL $label$1
	*([0] + [4]) = ($13 + [128])
}

int_32 .FUNC $6 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0 + [8]) = [0]
	*($0) = $1
	*(($0 + [12])) = (int_64)0
	$3 = ($0 + [8])
	$4 = CALL strlen([1264])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$14 }
	*($3) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $40($2)
	*(($0 + [8])) = ($2 | [1])
	*(($0 + [16])) = $3
	*(($0 + [12])) = $4
	
.LABEL $label$13
	CALL memcpy($3, [1264], $4)
	
.LABEL $label$12
	*(($3 + $4)) = [0]
	*(($0 + [28])) = [0]
	*($0 + [20 align=4]) = (int_64)0
	$3 = ($0 + [20])
	$4 = CALL strlen([1280])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$17 }
	*($3) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $40($2)
	*(($0 + [20])) = ($2 | [1])
	*(($0 + [28])) = $3
	*(($0 + [24])) = $4
	
.LABEL $label$16
	CALL memcpy($3, [1280], $4)
	
.LABEL $label$15
	*(($3 + $4)) = [0]
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	$3 = ($0 + [32])
	$4 = CALL strlen([1296])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$20 }
	*($3) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $40($2)
	*(($0 + [32])) = ($2 | [1])
	*(($0 + [40])) = $3
	*(($0 + [36])) = $4
	
.LABEL $label$19
	CALL memcpy($3, [1296], $4)
	
.LABEL $label$18
	*(($3 + $4)) = [0]
	*(($0 + [52])) = [0]
	*($0 + [44 align=4]) = (int_64)0
	$3 = ($0 + [44])
	$4 = CALL strlen([1312])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$23 }
	*($3) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $40($2)
	*(($0 + [44])) = ($2 | [1])
	*(($0 + [52])) = $3
	*(($0 + [48])) = $4
	
.LABEL $label$22
	CALL memcpy($3, [1312], $4)
	
.LABEL $label$21
	*(($3 + $4)) = [0]
	*(($0 + [64])) = [0]
	*($0 + [56 align=4]) = (int_64)0
	$3 = ($0 + [56])
	$4 = CALL strlen([1328])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$26 }
	*($3) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $40($2)
	*(($0 + [56])) = ($2 | [1])
	*(($0 + [64])) = $3
	*(($0 + [60])) = $4
	
.LABEL $label$25
	CALL memcpy($3, [1328], $4)
	
.LABEL $label$24
	*(($3 + $4)) = [0]
	*(($0 + [76])) = [0]
	*($0 + [68 align=4]) = (int_64)0
	$3 = ($0 + [68])
	$4 = CALL strlen([1344])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$29 }
	*($3) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $40($2)
	*(($0 + [68])) = ($2 | [1])
	*(($0 + [76])) = $3
	*(($0 + [72])) = $4
	
.LABEL $label$28
	CALL memcpy($3, [1344], $4)
	
.LABEL $label$27
	*(($3 + $4)) = [0]
	*(($0 + [88])) = [0]
	*($0 + [80 align=4]) = (int_64)0
	$3 = ($0 + [80])
	$4 = CALL strlen([1360])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$32 }
	*($3) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $40($2)
	*(($0 + [80])) = ($2 | [1])
	*(($0 + [88])) = $3
	*(($0 + [84])) = $4
	
.LABEL $label$31
	CALL memcpy($3, [1360], $4)
	
.LABEL $label$30
	*(($3 + $4)) = [0]
	*(($0 + [100])) = [0]
	*($0 + [92 align=4]) = (int_64)0
	$3 = ($0 + [92])
	$4 = CALL strlen([1376])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$35 }
	*($3) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $40($2)
	*(($0 + [92])) = ($2 | [1])
	*(($0 + [100])) = $3
	*(($0 + [96])) = $4
	
.LABEL $label$34
	CALL memcpy($3, [1376], $4)
	
.LABEL $label$33
	*(($3 + $4)) = [0]
	*(($0 + [112])) = [0]
	*($0 + [104 align=4]) = (int_64)0
	$3 = ($0 + [104])
	$4 = CALL strlen([1392])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$38 }
	*($3) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $40($2)
	*(($0 + [104])) = ($2 | [1])
	*(($0 + [112])) = $3
	*(($0 + [108])) = $4
	
.LABEL $label$37
	CALL memcpy($3, [1392], $4)
	
.LABEL $label$36
	*(($3 + $4)) = [0]
	*(($0 + [124])) = [0]
	*($0 + [116 align=4]) = (int_64)0
	$3 = ($0 + [116])
	$4 = CALL strlen([1408])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$41 }
	*($3) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $40($2)
	*(($0 + [116])) = ($2 | [1])
	*(($0 + [124])) = $3
	*(($0 + [120])) = $4
	
.LABEL $label$40
	CALL memcpy($3, [1408], $4)
	
.LABEL $label$39
	*(($3 + $4)) = [0]
	*(($0 + [136])) = [0]
	*($0 + [128 align=4]) = (int_64)0
	$3 = ($0 + [128])
	$4 = CALL strlen([1424])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$44 }
	*($3) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $40($2)
	*(($0 + [128])) = ($2 | [1])
	*(($0 + [136])) = $3
	*(($0 + [132])) = $4
	
.LABEL $label$43
	CALL memcpy($3, [1424], $4)
	
.LABEL $label$42
	*(($3 + $4)) = [0]
	*($0 + [152]) = (int_64)2
	*($0 + [144]) = (int_64)1
	*(($0 + [184])) = (int_64)-1
	*(($0 + [192])) = [0]
	$1 = *($0)
	*($0 + [168]) = $1
	*(($0 + [176])) = $1
	*(($0 + [196])) = [0]
	*(($0 + [200])) = [0]
	*($0 + [160]) = (int_64)0
	$4 = CALL db_lowerbound_i64($1, $1, (int_64)-4995154566124142592, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$45 }
	$2 = ($0 + [168])
	$4 = CALL $15($2, $4)
	$3 = ($0 + [160])
	
.LOOP $label$46:
	$1 = *($4)
	if ( ((uint_64)$1 <= (uint_64)*($3)) ){ goto $label$47 }
	*($3) = $1
	
.LABEL $label$47
	CALL eosio_assert([1], [320])
	$4 = CALL db_next_i64(*($4 + [92]), ($5 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$45 }
	$4 = CALL $15($2, $4)
	goto $label$46 
	
.LABEL $label$45
	*([0] + [4]) = ($5 + [16])
	return $0
	
.LABEL $label$11
	CALL $42($3)
	
.LABEL $label$10
	CALL $42($3)
	
.LABEL $label$9
	CALL $42($3)
	
.LABEL $label$8
	CALL $42($3)
	
.LABEL $label$7
	CALL $42($3)
	
.LABEL $label$6
	CALL $42($3)
	
.LABEL $label$5
	CALL $42($3)
	
.LABEL $label$4
	CALL $42($3)
	
.LABEL $label$3
	CALL $42($3)
	
.LABEL $label$2
	CALL $42($3)
	
.LABEL $label$1
	CALL $42($3)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [240])
	*([0] + [4]) = $18
	CALL require_auth($1)
	$5 = *($3)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$17 = *($3 + [8])
	$12 = (uint_64)$17 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$4 }
	if ( ((int_64)$17 != (int_64)1397703940) ){ goto $label$3 }
	$12 = *($0)
	if ( ((int_64)$12 == (int_64)$1) ){ goto $label$3 }
	if ( ((int_64)$12 != (int_64)$2) ){ goto $label$3 }
	if ( ((int_64)$5 < (int_64)10) ){ goto $label$3 }
	CALL eosio_assert(((int_64)$5 > (int_64)99), [864])
	$8 = *($4)
	$6 = ($8 & [1])
	if ( $6 ){ goto $label$2 }
	$11 = uint_32($8 >> [1])
	goto $label$1 
	
.LABEL $label$3
	*([0] + [4]) = ($18 + [240])
	return (unreachable)
	
.LABEL $label$2
	$11 = *($4 + [4])
	
.LABEL $label$1
	$3 = [0]
	if ( ((uint_32)$11 > (uint_32)[15]) ){ goto $label$7 }
	if ( $6 ){ goto $label$9 }
	$3 = uint_32($8 >> [1])
	goto $label$8 
	
.LABEL $label$9
	$3 = *($4 + [4])
	
.LABEL $label$8
	$3 = ((int_32)$3 != (int_32)[0])
	
.LABEL $label$7
	CALL eosio_assert($3, [896])
	$3 = CALL $44($4, [45], [0])
	*($18 + [200]) = [0]
	*($18 + [192]) = (int_64)0
	*($18 + [184]) = [0]
	*($18 + [176]) = (int_64)0
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$10 }
	CALL $47(($18 + [88]), $4, [0], $3, $4)
	if ( (*($18 + [192]) & [1]) ){ goto $label$12 }
	*($18 + [192]) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*(($18 + [200]))) = [0]
	*($18 + [196]) = [0]
	
.LABEL $label$11
	CALL $43(($18 + [192]), [0])
	*((($18 + [192]) + [8])) = *((($18 + [88]) + [8]))
	*($18 + [192]) = *($18 + [88])
	CALL $47(($18 + [88]), $4, ($3 + [1]), [-1], $4)
	if ( (*($18 + [176]) & [1]) ){ goto $label$14 }
	*($18 + [176]) = [0]
	goto $label$13 
	
.LABEL $label$14
	*(*((($18 + [176]) + [8]))) = [0]
	*($18 + [180]) = [0]
	
.LABEL $label$13
	CALL $43(($18 + [176]), [0])
	*((($18 + [176]) + [8])) = *((($18 + [88]) + [8]))
	*($18 + [176]) = *($18 + [88])
	$3 = *($18 + [192])
	CALL eosio_assert((( *($18 + [196]) ? uint_32($3 >> [1]) : ($3 & [1]) ) <= [13]), [928])
	$3 = *($18 + [176])
	CALL eosio_assert(((( *($18 + [180]) ? uint_32($3 >> [1]) : ($3 & [1]) ) + [-1]) <= [10]), [960])
	CALL eosio_assert([1], [224])
	$12 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$4 = [0]
	
.LABEL $label$15
	CALL eosio_assert($4, [192])
	CALL eosio_assert([1], [224])
	$12 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	
.LOOP $label$24:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$24 }
	
.LABEL $label$23
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$4 = [0]
	
.LABEL $label$20
	CALL eosio_assert($4, [192])
	$8 = ($3 & [1])
	$3 = *($18 + [176])
	$3 = ( *($18 + [180]) ? uint_32($3 >> [1]) : $8 )
	$6 = *(($18 + [184]))
	$4 = *($0 + [20])
	if ( ($4 & [1]) ){ goto $label$26 }
	$13 = (($0 + [20]) + [1])
	$4 = uint_32($4 >> [1])
	goto $label$25 
	
.LABEL $label$26
	$13 = *(($0 + [28]))
	$4 = *(($0 + [24]))
	
.LABEL $label$25
	$11 = (($18 + [176]) | [1])
	$7 = ( $3 ? $4 : ($3 <= $4) )
	if ( ($7 == 0) ){ goto $label$62 }
	if ( CALL memcmp($13, ( $6 ? $11 : $8 ), $7) ){ goto $label$61 }
	
.LABEL $label$62
	if ( ($4 <= $3) ){ goto $label$61 }
	if ( ($3 <= $4) ){ goto $label$61 }
	CALL eosio_assert([1], [224])
	$12 = (int_64)5459781
	$2 = (int_64)1397703936
	$3 = [0]
	
.LOOP $label$63:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$60 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$64 }
	
.LOOP $label$65:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$60 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$65 }
	
.LABEL $label$64
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$63 }
	goto $label$59 
	
.LABEL $label$61
	$8 = ($3 & [1])
	$3 = *($18 + [176])
	$3 = ( *($18 + [180]) ? uint_32($3 >> [1]) : $8 )
	$6 = *(($18 + [184]))
	$4 = *($0 + [44])
	if ( ($4 & [1]) ){ goto $label$67 }
	$13 = (($0 + [44]) + [1])
	$4 = uint_32($4 >> [1])
	goto $label$66 
	
.LABEL $label$67
	$13 = *(($0 + [52]))
	$4 = *(($0 + [48]))
	
.LABEL $label$66
	$7 = ( $3 ? $4 : ($3 <= $4) )
	if ( ($7 == 0) ){ goto $label$69 }
	if ( CALL memcmp($13, ( $6 ? $11 : $8 ), $7) ){ goto $label$68 }
	
.LABEL $label$69
	if ( ($4 <= $3) ){ goto $label$68 }
	if ( ($3 <= $4) ){ goto $label$68 }
	CALL eosio_assert([1], [224])
	$12 = (int_64)5459781
	$2 = (int_64)1397703936
	$3 = [0]
	
.LOOP $label$70:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$56 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$71 }
	
.LOOP $label$72:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$56 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$72 }
	
.LABEL $label$71
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$70 }
	goto $label$55 
	
.LABEL $label$68
	$8 = ($3 & [1])
	$3 = *($18 + [176])
	$3 = ( *($18 + [180]) ? uint_32($3 >> [1]) : $8 )
	$6 = *(($18 + [184]))
	$4 = *($0 + [56])
	if ( ($4 & [1]) ){ goto $label$58 }
	$13 = (($0 + [56]) + [1])
	$4 = uint_32($4 >> [1])
	goto $label$57 
	
.LABEL $label$60
	$4 = [0]
	
.LABEL $label$59
	CALL eosio_assert($4, [192])
	CALL eosio_assert(((int_64)$5 > (int_64)199), [992])
	$15 = (int_64)300
	$14 = (int_64)100
	goto $label$29 
	
.LABEL $label$58
	$13 = *(($0 + [64]))
	$4 = *(($0 + [60]))
	
.LABEL $label$57
	$7 = ( $3 ? $4 : ($3 <= $4) )
	if ( ($7 == 0) ){ goto $label$74 }
	if ( CALL memcmp($13, ( $6 ? $11 : $8 ), $7) ){ goto $label$73 }
	
.LABEL $label$74
	if ( ($4 <= $3) ){ goto $label$73 }
	if ( ($3 <= $4) ){ goto $label$73 }
	CALL eosio_assert([1], [224])
	$12 = (int_64)5459781
	$2 = (int_64)1397703936
	$3 = [0]
	
.LOOP $label$75:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$76 }
	
.LOOP $label$77:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$52 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$77 }
	
.LABEL $label$76
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$75 }
	goto $label$51 
	
.LABEL $label$73
	$8 = ($3 & [1])
	$3 = *($18 + [176])
	$3 = ( *($18 + [180]) ? uint_32($3 >> [1]) : $8 )
	$6 = *(($18 + [184]))
	$4 = *($0 + [68])
	if ( ($4 & [1]) ){ goto $label$54 }
	$13 = (($0 + [68]) + [1])
	$4 = uint_32($4 >> [1])
	goto $label$53 
	
.LABEL $label$56
	$4 = [0]
	
.LABEL $label$55
	CALL eosio_assert($4, [192])
	CALL eosio_assert(((int_64)$5 > (int_64)499), [1024])
	$15 = (int_64)86400
	$14 = (int_64)30000
	goto $label$29 
	
.LABEL $label$54
	$13 = *(($0 + [76]))
	$4 = *(($0 + [72]))
	
.LABEL $label$53
	$7 = ( $3 ? $4 : ($3 <= $4) )
	if ( ($7 == 0) ){ goto $label$79 }
	if ( CALL memcmp($13, ( $6 ? $11 : $8 ), $7) ){ goto $label$78 }
	
.LABEL $label$79
	if ( ($4 <= $3) ){ goto $label$78 }
	if ( ($3 <= $4) ){ goto $label$78 }
	CALL eosio_assert([1], [224])
	$12 = (int_64)5459781
	$2 = (int_64)1397703936
	$3 = [0]
	
.LOOP $label$80:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$81 }
	
.LOOP $label$82:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$48 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$82 }
	
.LABEL $label$81
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$80 }
	goto $label$47 
	
.LABEL $label$78
	$8 = ($3 & [1])
	$3 = *($18 + [176])
	$3 = ( *($18 + [180]) ? uint_32($3 >> [1]) : $8 )
	$6 = *(($18 + [184]))
	$4 = *($0 + [104])
	if ( ($4 & [1]) ){ goto $label$50 }
	$13 = (($0 + [104]) + [1])
	$4 = uint_32($4 >> [1])
	goto $label$49 
	
.LABEL $label$52
	$4 = [0]
	
.LABEL $label$51
	CALL eosio_assert($4, [192])
	CALL eosio_assert(((int_64)$5 > (int_64)499), [1024])
	$15 = (int_64)28800
	$14 = (int_64)100000
	goto $label$29 
	
.LABEL $label$50
	$13 = *(($0 + [112]))
	$4 = *(($0 + [108]))
	
.LABEL $label$49
	$7 = ( $3 ? $4 : ($3 <= $4) )
	if ( ($7 == 0) ){ goto $label$84 }
	if ( CALL memcmp($13, ( $6 ? $11 : $8 ), $7) ){ goto $label$83 }
	
.LABEL $label$84
	if ( ($4 <= $3) ){ goto $label$83 }
	if ( ($3 <= $4) ){ goto $label$83 }
	CALL eosio_assert([1], [224])
	$12 = (int_64)5459781
	$2 = (int_64)1397703936
	$3 = [0]
	
.LOOP $label$85:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$44 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$86 }
	
.LOOP $label$87:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$44 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$87 }
	
.LABEL $label$86
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$85 }
	goto $label$43 
	
.LABEL $label$83
	$8 = ($3 & [1])
	$3 = *($18 + [176])
	$3 = ( *($18 + [180]) ? uint_32($3 >> [1]) : $8 )
	$6 = *(($18 + [184]))
	$4 = *($0 + [116])
	if ( ($4 & [1]) ){ goto $label$46 }
	$13 = (($0 + [116]) + [1])
	$4 = uint_32($4 >> [1])
	goto $label$45 
	
.LABEL $label$48
	$4 = [0]
	
.LABEL $label$47
	CALL eosio_assert($4, [192])
	CALL eosio_assert(((int_64)$5 > (int_64)999), [1056])
	$15 = (int_64)86400
	$14 = (int_64)100000
	goto $label$29 
	
.LABEL $label$46
	$13 = *(($0 + [124]))
	$4 = *(($0 + [120]))
	
.LABEL $label$45
	$7 = ( $3 ? $4 : ($3 <= $4) )
	if ( ($7 == 0) ){ goto $label$89 }
	if ( CALL memcmp($13, ( $6 ? $11 : $8 ), $7) ){ goto $label$88 }
	
.LABEL $label$89
	if ( ($4 <= $3) ){ goto $label$88 }
	if ( ($3 <= $4) ){ goto $label$88 }
	CALL eosio_assert([1], [224])
	$12 = (int_64)5459781
	$2 = (int_64)1397703936
	$3 = [0]
	
.LOOP $label$90:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$91 }
	
.LOOP $label$92:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$40 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$92 }
	
.LABEL $label$91
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$90 }
	goto $label$39 
	
.LABEL $label$88
	$8 = ($3 & [1])
	$3 = *($18 + [176])
	$3 = ( *($18 + [180]) ? uint_32($3 >> [1]) : $8 )
	$6 = *(($18 + [184]))
	$4 = *($0 + [80])
	if ( ($4 & [1]) ){ goto $label$42 }
	$13 = (($0 + [80]) + [1])
	$4 = uint_32($4 >> [1])
	goto $label$41 
	
.LABEL $label$44
	$4 = [0]
	
.LABEL $label$43
	CALL eosio_assert($4, [192])
	CALL eosio_assert(((int_64)$5 > (int_64)7999), [1088])
	$15 = (int_64)86400
	$14 = (int_64)1000000
	goto $label$29 
	
.LABEL $label$42
	$13 = *(($0 + [88]))
	$4 = *(($0 + [84]))
	
.LABEL $label$41
	$7 = ( $3 ? $4 : ($3 <= $4) )
	if ( ($7 == 0) ){ goto $label$94 }
	if ( CALL memcmp($13, ( $6 ? $11 : $8 ), $7) ){ goto $label$93 }
	
.LABEL $label$94
	if ( ($4 <= $3) ){ goto $label$93 }
	if ( ($3 <= $4) ){ goto $label$93 }
	CALL eosio_assert([1], [224])
	$12 = (int_64)5459781
	$2 = (int_64)1397703936
	$3 = [0]
	
.LOOP $label$95:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$36 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$96 }
	
.LOOP $label$97:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$36 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$97 }
	
.LABEL $label$96
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$95 }
	goto $label$35 
	
.LABEL $label$93
	$8 = ($3 & [1])
	$3 = *($18 + [176])
	$3 = ( *($18 + [180]) ? uint_32($3 >> [1]) : $8 )
	$6 = *(($18 + [184]))
	$4 = *($0 + [92])
	if ( ($4 & [1]) ){ goto $label$38 }
	$13 = (($0 + [92]) + [1])
	$4 = uint_32($4 >> [1])
	goto $label$37 
	
.LABEL $label$40
	$4 = [0]
	
.LABEL $label$39
	CALL eosio_assert($4, [192])
	CALL eosio_assert(((int_64)$5 > (int_64)11999), [1120])
	$15 = (int_64)172800
	$14 = (int_64)1000000
	goto $label$29 
	
.LABEL $label$38
	$13 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	
.LABEL $label$37
	$7 = ( $3 ? $4 : ($3 <= $4) )
	if ( ($7 == 0) ){ goto $label$99 }
	if ( CALL memcmp($13, ( $6 ? $11 : $8 ), $7) ){ goto $label$98 }
	
.LABEL $label$99
	if ( ($4 <= $3) ){ goto $label$98 }
	if ( ($3 <= $4) ){ goto $label$98 }
	CALL eosio_assert([1], [224])
	$12 = (int_64)5459781
	$2 = (int_64)1397703936
	$3 = [0]
	
.LOOP $label$100:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$101 }
	
.LOOP $label$102:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$102 }
	
.LABEL $label$101
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$100 }
	goto $label$31 
	
.LABEL $label$98
	$8 = ($3 & [1])
	$3 = *($18 + [176])
	$3 = ( *($18 + [180]) ? uint_32($3 >> [1]) : $8 )
	$6 = *(($18 + [184]))
	$4 = *($0 + [128])
	if ( ($4 & [1]) ){ goto $label$34 }
	$13 = (($0 + [128]) + [1])
	$4 = uint_32($4 >> [1])
	goto $label$33 
	
.LABEL $label$36
	$4 = [0]
	
.LABEL $label$35
	CALL eosio_assert($4, [192])
	CALL eosio_assert(((int_64)$5 > (int_64)999), [1056])
	$15 = (int_64)28800
	goto $label$30 
	
.LABEL $label$34
	$13 = *(($0 + [136]))
	$4 = *(($0 + [132]))
	
.LABEL $label$33
	$7 = ( $3 ? $4 : ($3 <= $4) )
	if ( ($7 == 0) ){ goto $label$103 }
	if ( CALL memcmp($13, ( $6 ? $11 : $8 ), $7) ){ goto $label$10 }
	
.LABEL $label$103
	if ( ($4 <= $3) ){ goto $label$10 }
	if ( ($3 <= $4) ){ goto $label$10 }
	CALL eosio_assert(((int_64)$5 > (int_64)999999), [1184])
	CALL eosio_assert([1], [224])
	$12 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$104:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$105 }
	
.LOOP $label$106:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$106 }
	
.LABEL $label$105
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$104 }
	goto $label$27 
	
.LABEL $label$32
	$4 = [0]
	
.LABEL $label$31
	CALL eosio_assert($4, [192])
	CALL eosio_assert(((int_64)$5 > (int_64)2499), [1152])
	$15 = (int_64)86400
	
.LABEL $label$30
	$14 = (int_64)300000
	
.LABEL $label$29
	$3 = ( *(($18 + [200])) ? (($18 + [192]) | [1]) : (*($18 + [192]) & [1]) )
	$4 = [-1]
	
.LOOP $label$107:
	$11 = ($3 + $4)
	$8 = ($4 + [1])
	$4 = $8
	if ( *(($11 + [1])) ){ goto $label$107 }
	$9 = ((int_64)$2 | (int_64)4)
	$10 = (CASTING uint_64)(uint_32 $8)
	$12 = (int_64)0
	$2 = (int_64)59
	$16 = (int_64)0
	
.LOOP $label$108:
	$17 = (int_64)0
	if ( ((uint_64)$12 >= (uint_64)$10) ){ goto $label$109 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$111 }
	$4 = ($4 + [165])
	goto $label$110 
	
.LABEL $label$111
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$110
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$109
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$113 }
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	goto $label$112 
	
.LABEL $label$113
	$17 = ((int_64)$17 & (int_64)15)
	
.LABEL $label$112
	$3 = ($3 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$108 }
	*($18 + [64]) = (int_64)1397703940
	*($18 + [48]) = $9
	*((($18 + [24]) + [8])) = *($18 + [64])
	*($18 + [56]) = (int_64)0
	*($18 + [40]) = $14
	*((($18 + [8]) + [8])) = *($18 + [48])
	*($18 + [24]) = *($18 + [56])
	*($18 + [8]) = *($18 + [40])
	CALL $14($0, $1, $16, ($18 + [24]), ($18 + [8]), $15, $5)
	goto $label$10 
	
.LABEL $label$28
	$4 = [0]
	
.LABEL $label$27
	CALL eosio_assert($4, [192])
	$15 = *($0)
	$12 = (int_64)0
	$2 = (int_64)59
	$3 = [416]
	$17 = (int_64)0
	
.LOOP $label$114:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$119 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$118 }
	$4 = ($4 + [165])
	goto $label$117 
	
.LABEL $label$119
	$5 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$116 }
	goto $label$115 
	
.LABEL $label$118
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$117
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$116
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$115
	$3 = ($3 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$17 = ((int_64)$5 | (int_64)$17)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$114 }
	$12 = (int_64)0
	$2 = (int_64)59
	$3 = [112]
	$16 = (int_64)0
	
.LOOP $label$120:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$125 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$124 }
	$4 = ($4 + [165])
	goto $label$123 
	
.LABEL $label$125
	$5 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$122 }
	goto $label$121 
	
.LABEL $label$124
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$123
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$122
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$121
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)-5)
	$16 = ((int_64)$5 | (int_64)$16)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$120 }
	$12 = (int_64)0
	$2 = (int_64)59
	$3 = [128]
	$10 = (int_64)0
	
.LOOP $label$126:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$131 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$130 }
	$4 = ($4 + [165])
	goto $label$129 
	
.LABEL $label$131
	$5 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$128 }
	goto $label$127 
	
.LABEL $label$130
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$129
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$128
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$127
	$3 = ($3 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$10 = ((int_64)$5 | (int_64)$10)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$126 }
	*(($18 + [80])) = [0]
	*($18 + [72]) = (int_64)0
	$3 = CALL strlen([1216])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$132 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$135 }
	*($18 + [72]) = ($3 << [1])
	$4 = (($18 + [72]) | [1])
	if ( $3 ){ goto $label$134 }
	goto $label$133 
	
.LABEL $label$135
	$11 = (($3 + [16]) & [-16])
	$4 = CALL $40($11)
	*($18 + [72]) = ($11 | [1])
	*($18 + [80]) = $4
	*($18 + [76]) = $3
	
.LABEL $label$134
	CALL memcpy($4, [1216], $3)
	
.LABEL $label$133
	*(($4 + $3)) = [0]
	*((($18 + [88]) + [24])) = (int_64)1397703940
	*(($4 = (($18 + [88]) + [36]))) = *($18 + [76])
	*($18 + [96]) = $1
	$3 = ($18 + [80])
	*(($18 + [128])) = *($3)
	*($18 + [88]) = *($0)
	*($18 + [104]) = (int_64)1
	*($18 + [120]) = *($18 + [72])
	*($18 + [72]) = [0]
	*($18 + [76]) = [0]
	*($3) = [0]
	*($18 + [136]) = $16
	*($18 + [144]) = $10
	*(($3 = CALL $40([16]))) = $15
	*($3 + [8]) = $17
	*((($18 + [136]) + [32])) = [0]
	$0 = ($3 + [16])
	*((($18 + [136]) + [24])) = $0
	*(($18 + [156])) = $0
	*($18 + [152]) = $3
	*($18 + [164]) = [0]
	*((($18 + [136]) + [36])) = [0]
	$3 = *($18 + [120])
	$0 = ( *($4) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($0 + [32])
	$12 = (CASTING uint_64)(uint_32 $0)
	$0 = ($18 + [164])
	
.LOOP $label$136:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$136 }
	if ( ($3 == 0) ){ goto $label$138 }
	CALL $18($0, $3)
	$0 = *(($18 + [168]))
	$3 = *(($18 + [164]))
	goto $label$137 
	
.LABEL $label$138
	$0 = [0]
	$3 = [0]
	
.LABEL $label$137
	*($18 + [212]) = $3
	*($18 + [208]) = $3
	*($18 + [216]) = $0
	*($18 + [224]) = ($18 + [208])
	*($18 + [232]) = ($18 + [88])
	CALL $34(($18 + [232]), ($18 + [224]))
	if ( ((*(($18 + [120])) & [1]) == 0) ){ goto $label$139 }
	CALL $41(*(($18 + [128])))
	
.LABEL $label$139
	if ( ((*($18 + [72]) & [1]) == 0) ){ goto $label$140 }
	CALL $41(*(($18 + [80])))
	
.LABEL $label$140
	CALL $20(($18 + [88]), ($18 + [136]))
	$3 = *($18 + [88])
	CALL send_inline($3, (*($18 + [92]) - $3))
	$3 = *($18 + [88])
	if ( ($3 == 0) ){ goto $label$141 }
	*($18 + [92]) = $3
	CALL $41($3)
	
.LABEL $label$141
	$3 = *($18 + [164])
	if ( ($3 == 0) ){ goto $label$142 }
	*(($18 + [168])) = $3
	CALL $41($3)
	
.LABEL $label$142
	$3 = *($18 + [152])
	if ( ($3 == 0) ){ goto $label$10 }
	*(($18 + [156])) = $3
	CALL $41($3)
	goto $label$10 
	
.LABEL $label$132
	CALL $42(($18 + [72]))
	
.LABEL $label$10
	if ( ((*($18 + [176]) & [1]) == 0) ){ goto $label$143 }
	CALL $41(*(($18 + [184])))
	
.LABEL $label$143
	if ( ((*($18 + [192]) & [1]) == 0) ){ goto $label$144 }
	CALL $41(*(($18 + [200])))
	
.LABEL $label$144
	*([0] + [4]) = ($18 + [240])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [256])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$22 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [160]
	$7 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$46 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$3 = ($3 + [165])
	goto $label$44 
	
.LABEL $label$46
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$42
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$41 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	$4 = CALL $6(($9 + [48]), $0)
	if ( ((int_64)$2 == (int_64)6761209924958552064) ){ goto $label$49 }
	if ( ((int_64)$2 == (int_64)4851652232166244352) ){ goto $label$48 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$47 }
	*($9 + [44]) = [0]
	*($9 + [40]) = [1]
	*($9) = *($9 + [40])
	CALL $8($4, $9)
	goto $label$47 
	
.LABEL $label$49
	*($9 + [28]) = [0]
	*($9 + [24]) = [2]
	*($9 + [16 align=4]) = *($9 + [24])
	CALL $12($4, ($9 + [16]))
	goto $label$47 
	
.LABEL $label$48
	*($9 + [36]) = [0]
	*($9 + [32]) = [3]
	*($9 + [8 align=4]) = *($9 + [32])
	CALL $10($4, ($9 + [8]))
	
.LABEL $label$47
	CALL $13($4)
	
.LABEL $label$20
	*([0] + [4]) = ($9 + [256])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_32 $19
	$19 = (*([0] + [4]) - [176])
	*([0] + [4]) = $19
	*($19 + [144]) = $1
	*($19 + [136]) = $2
	$2 = (int_64)0
	*($19 + [128]) = $6
	CALL eosio_assert(((int_64)$5 != (int_64)0), [288])
	$1 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($19 + [120]) = $1
	*($19 + [112]) = ((int_64)$1 + (int_64)$5)
	$15 = ($0 + [168])
	$16 = [1]
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$1 }
	$16 = [1]
	$13 = CALL db_lowerbound_i64(*($15), *(($0 + [176])), (int_64)-4995154566124142592, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$1 }
	$16 = CALL $15($15, $13)
	$8 = (($19 + [64]) | [1])
	$7 = (($19 + [8]) | [1])
	
.LOOP $label$3:
	*($19 + [152]) = *($16 + [8])
	CALL $16(($19 + [8]), ($19 + [152]))
	*($19 + [104]) = *($19 + [144])
	CALL $16(($19 + [64]), ($19 + [104]))
	if ( ((int_64)*($16 + [80]) != (int_64)0) ){ goto $label$4 }
	if ( (uint_64)(((int_64)*($16 + [64]) + (int_64)86400) <= *($19 + [120])) ){ goto $label$4 }
	$10 = ($11 & [1])
	$11 = *($19 + [8])
	$11 = ( *($19 + [12]) ? uint_32($11 >> [1]) : $10 )
	$9 = ($13 & [1])
	$13 = *($19 + [64])
	$13 = ( *($19 + [68]) ? uint_32($13 >> [1]) : $9 )
	$12 = ( $13 ? $11 : ($13 <= $11) )
	if ( ($12 == 0) ){ goto $label$5 }
	if ( CALL memcmp(( *((($19 + [8]) + [8])) ? $7 : $10 ), ( *((($19 + [64]) + [8])) ? $8 : $9 ), $12) ){ goto $label$4 }
	
.LABEL $label$5
	if ( ($11 <= $13) ){ goto $label$4 }
	if ( ((uint_32)$13 >= (uint_32)$11) ){ goto $label$2 }
	
.LABEL $label$4
	if ( ((*($19 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL $41(*((($19 + [64]) + [8])))
	
.LABEL $label$6
	if ( ((*($19 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $41(*((($19 + [8]) + [8])))
	
.LABEL $label$7
	CALL eosio_assert([1], [320])
	$16 = CALL db_next_i64(*($16 + [92]), ($19 + [8]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$8 }
	$16 = CALL $15($15, $16)
	goto $label$3 
	
.LABEL $label$8
	$16 = [1]
	goto $label$1 
	
.LABEL $label$2
	if ( ((*($19 + [64]) & [1]) == 0) ){ goto $label$9 }
	CALL $41(*(($19 + [72])))
	
.LABEL $label$9
	if ( ((*($19 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $41(*(($19 + [16])))
	
.LABEL $label$10
	$16 = [0]
	
.LABEL $label$1
	CALL eosio_assert($16, [352])
	*($0 + [160]) = ((int_64)*($0 + [160]) + (int_64)1)
	$6 = *($0)
	*($19 + [8]) = $0
	*($19 + [20]) = $4
	*($19 + [24]) = $3
	*($19 + [12]) = ($19 + [144])
	*($19 + [16]) = ($19 + [136])
	*($19 + [28]) = ($19 + [120])
	*($19 + [32]) = ($19 + [112])
	*($19 + [36]) = ($19 + [128])
	CALL $17(($19 + [64]), $15, $6, ($19 + [8]))
	$13 = *($19 + [68])
	$14 = *($0)
	$5 = (int_64)59
	$16 = [416]
	$1 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$16 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$15 = ($15 + [165])
	goto $label$14 
	
.LABEL $label$16
	$6 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$12
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$1 = ((int_64)$6 | (int_64)$1)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$11 }
	$2 = (int_64)0
	$5 = (int_64)59
	$16 = [32]
	$17 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$2 > (uint_64)(int_64)4) ){ goto $label$22 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$15 = ($15 + [165])
	goto $label$20 
	
.LABEL $label$22
	$6 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$18
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$6 | (int_64)$17)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$17 }
	$2 = (int_64)0
	$5 = (int_64)59
	$16 = [432]
	$18 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$2 > (uint_64)(int_64)9) ){ goto $label$28 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$15 = ($15 + [165])
	goto $label$26 
	
.LABEL $label$28
	$6 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$6 | (int_64)$18)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	*((($19 + [8]) + [28])) = *(($13 + [52]))
	*((($19 + [8]) + [24])) = *(($13 + [48]))
	*((($19 + [8]) + [20])) = *(($13 + [44]))
	*($19 + [8]) = $14
	*($19 + [24]) = *($13 + [40])
	*($19 + [16]) = *($19 + [136])
	*(($19 + [48])) = *(($13 + [32]))
	*($19 + [40]) = *($13 + [24])
	*($19 + [56]) = [0]
	*($19 + [64]) = $17
	*($19 + [72]) = $18
	*(($16 = CALL $40([16]))) = $14
	*($16 + [8]) = $1
	*(($15 = (($19 + [64]) + [32]))) = [0]
	$0 = ($16 + [16])
	*((($19 + [64]) + [24])) = $0
	*((($19 + [64]) + [20])) = $0
	*($19 + [80]) = $16
	*($19 + [92]) = [0]
	*(($19 + [100])) = [0]
	CALL $18((($19 + [64]) + [28]), [49])
	$16 = *($15)
	$15 = *($19 + [92])
	*($19 + [156]) = $15
	*($19 + [152]) = $15
	*($19 + [160]) = $16
	*($19 + [168]) = ($19 + [152])
	*($19 + [104]) = ($19 + [8])
	CALL $19(($19 + [104]), ($19 + [168]))
	CALL $20(($19 + [8]), ($19 + [64]))
	$16 = *($19 + [8])
	CALL send_inline($16, (*($19 + [12]) - $16))
	$16 = *($19 + [8])
	if ( ($16 == 0) ){ goto $label$29 }
	*($19 + [12]) = $16
	CALL $41($16)
	
.LABEL $label$29
	$16 = *($19 + [92])
	if ( ($16 == 0) ){ goto $label$30 }
	*(($19 + [96])) = $16
	CALL $41($16)
	
.LABEL $label$30
	$16 = *($19 + [80])
	if ( ($16 == 0) ){ goto $label$31 }
	*(($19 + [84])) = $16
	CALL $41($16)
	
.LABEL $label$31
	*([0] + [4]) = ($19 + [176])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [576])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $40([104])
	$4 = CALL $25($6)
	*($6 + [88]) = $0
	CALL $27(($8 + [32]), $4)
	*($6 + [92]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [92])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $24(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $41($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $40([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [516]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $47($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $43($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [464])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $40([104])
	CALL $23($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [92])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $24(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $41($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [176])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL require_auth($1)
	CALL eosio_assert([1], [224])
	$4 = [0]
	$3 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [192])
	CALL eosio_assert([1], [224])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [192])
	*($6 + [56]) = (int_64)1397703940
	*($6 + [40]) = (int_64)1397703940
	*((($6 + [16]) + [8])) = *($6 + [56])
	*($6 + [48]) = (int_64)0
	*($6 + [32]) = (int_64)15000
	*(($6 + [8])) = *($6 + [40])
	*($6 + [16]) = *($6 + [48])
	*($6) = *($6 + [32])
	CALL $14($0, $1, $2, ($6 + [16]), $6, (int_64)28800, (int_64)0)
	*([0] + [4]) = ($6 + [64])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [176])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [176])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

int_32 .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [196])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $41($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [192]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $41($4)
	
.LABEL $label$1
	if ( ((*($0 + [128]) & [1]) == 0) ){ goto $label$6 }
	CALL $41(*(($0 + [136])))
	
.LABEL $label$6
	if ( ((*($0 + [116]) & [1]) == 0) ){ goto $label$7 }
	CALL $41(*(($0 + [124])))
	
.LABEL $label$7
	if ( ((*($0 + [104]) & [1]) == 0) ){ goto $label$8 }
	CALL $41(*(($0 + [112])))
	
.LABEL $label$8
	if ( ((*($0 + [92]) & [1]) == 0) ){ goto $label$9 }
	CALL $41(*(($0 + [100])))
	
.LABEL $label$9
	if ( ((*($0 + [80]) & [1]) == 0) ){ goto $label$10 }
	CALL $41(*(($0 + [88])))
	
.LABEL $label$10
	if ( ((*($0 + [68]) & [1]) == 0) ){ goto $label$11 }
	CALL $41(*(($0 + [76])))
	
.LABEL $label$11
	if ( ((*($0 + [56]) & [1]) == 0) ){ goto $label$12 }
	CALL $41(*(($0 + [64])))
	
.LABEL $label$12
	if ( ((*($0 + [44]) & [1]) == 0) ){ goto $label$13 }
	CALL $41(*(($0 + [52])))
	
.LABEL $label$13
	if ( ((*($0 + [32]) & [1]) == 0) ){ goto $label$14 }
	CALL $41(*(($0 + [40])))
	
.LABEL $label$14
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$15 }
	CALL $41(*(($0 + [28])))
	
.LABEL $label$15
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$16 }
	CALL $41(*(($0 + [16])))
	
.LABEL $label$16
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $37([1432], $0)
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $38($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9840])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $35(*($1), ($0 + [32]))
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [448])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $33($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $43($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $40($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $43($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $41($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $42($7)
	return (unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [848])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $18($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [176])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $32(*($1), ($0 + [32]))
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $46(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $46(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $41(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $41(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9926]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9928])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9926]) = [1]
	$7 = ($7 << [16])
	*([0] + [9928]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9928])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9928]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9926]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9926]) = [1]
	$3 = ($3 << [16])
	*([0] + [9928]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9928])
	
.LABEL $label$8
	*([0] + [9928]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}