(data (i32.const 4) "\10i\00\00")
(data (i32.const 16) "transfer\00")
(data (i32.const 32) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 96) "it is not an active game\00")
(data (i32.const 128) "game is still on going.\00")
(data (i32.const 160) "cannot pass end iterator to modify\00")
(data (i32.const 208) "cannot increment end iterator\00")
(data (i32.const 240) "invalid symbol name\00")
(data (i32.const 272) "chinesegamer\00")
(data (i32.const 288) "savethepoors\00")
(data (i32.const 304) "unknown account\00")
(data (i32.const 320) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 384) "object passed to modify is not in multi_index\00")
(data (i32.const 432) "cannot modify objects in table of another contract\00")
(data (i32.const 496) "updater cannot change primary key when modifying an object\00")
(data (i32.const 560) "write\00")
(data (i32.const 576) "cannot create objects in table of another contract\00")
(data (i32.const 640) "next primary key in table is at autoincrement limit\00")
(data (i32.const 704) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 768) "cannot decrement iterator at beginning of table\00")
(data (i32.const 816) "error reading iterator\00")
(data (i32.const 848) "read\00")
(data (i32.const 864) "game has not ended yet.\00")
(data (i32.const 896) "cannot pass end iterator to erase\00")
(data (i32.const 944) "object passed to erase is not in multi_index\00")
(data (i32.const 992) "cannot erase objects in table of another contract\00")
(data (i32.const 1056) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1120) "game expired\00")
(data (i32.const 1136) "Not enough rock cards\00")
(data (i32.const 1168) "Not enough paper cards\00")
(data (i32.const 1200) "Not enough scissors cards\00")
(data (i32.const 1232) "player is over\00")
(data (i32.const 1248) "invalid card\00")
(data (i32.const 1264) "invalid quantity\00")
(data (i32.const 1296) "must deposit positive quantity\00")
(data (i32.const 1328) "it is not a correct quantity.\00")
(data (i32.const 1360) "not enough balance.\00")
(data (i32.const 1392) "attempt to add asset with different symbol\00")
(data (i32.const 1440) "addition underflow\00")
(data (i32.const 1472) "addition overflow\00")
(data (i32.const 1504) "don\'t have host auth or all the allowed open unsed.\00")
(data (i32.const 1568) "only core token allowed\00")
(data (i32.const 1600) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1664) "insufficient balance\00")
(data (i32.const 1696) "attempt to subtract asset with different symbol\00")
(data (i32.const 1744) "subtraction underflow\00")
(data (i32.const 1776) "subtraction overflow\00")
(data (i32.const 1808) "must withdraw positive quantity\00")
(data (i32.const 1840) "active\00")
(data (i32.const 1856) "eosio.token\00")
(data (i32.const 1872) "withdraw EOS\00")
(data (i32.const 1888) "game  expired\00")
(data (i32.const 1904) "Not enough star\00")
(data (i32.const 1920) "no bounty game anymore\00")
(data (i32.const 1952) "Hello, \00")
(data (i32.const 1968) "get\00")
(data (i32.const 10368) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10464) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 10480) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 10496) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$8 (param i32)))
(import "env" "db_idx64_store" (func $fimport$9 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$10 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$14 (param i32)))
(import "env" "db_store_i64" (func $fimport$15 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$16 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$17 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$18 (param i32)))
(import "env" "memcpy" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "printn" (func $fimport$20 (param i64)))
(import "env" "prints" (func $fimport$21 (param i32)))
(import "env" "read_action_data" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$23 (param i64)))
(import "env" "require_auth2" (func $fimport$24 (param i64 i64)))
(import "env" "send_inline" (func $fimport$25 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $130))
(export "free" (func $133))
(export "pow" (func $139))
(export "sqrt" (func $140))
(export "fabs" (func $141))
(export "scalbn" (func $142))
(export "memcmp" (func $143))
(export "strlen" (func $144))
(table $0 14 14 anyfunc)
(elem (i32.const 0) $145 $16 $11 $26 $9 $14 $25 $27 $19 $21 $17 $13 $23 $30)



int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [560])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [560])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [560])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [560])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $99(*($1), ($0 + [32]))
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $93($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [560])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [560])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $98(CALL $97($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [944])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [992])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1056])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $135($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $135($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [560])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [560])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [560])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)((int_64)*(*($3)) / (int_64)10000))
	*($6 + [88]) = *($1 + [56])
	$4 = *($1)
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)((int_64)*(*($3)) / (int_64)10000))
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)((int_64)*(*($3)) / (int_64)10000))
	$5 = *(*($3))
	*($1 + [48]) = ((int_64)((int_64)((int_64)$5 / (int_64)-40000) + (int_64)$5) + (int_64)*($1 + [48]))
	*($1 + [8]) = *(*($3 + [4]))
	CALL eosio_assert([1], [496])
	*($6 + [80]) = ($6 + [72])
	*($6 + [76]) = $6
	*($6 + [72]) = $6
	CALL $70(($6 + [72]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $6, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [104]) = *(($1 + [56]))
	if ( (CALL memcmp(($6 + [88]), ($6 + [104]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [80])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($6 + [96]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($6 + [104]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [112])
}

int_32 .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	*($0 + [72]) = $1
	*($0 + [64]) = (int_64)0
	*($0 + [16]) = *(*(*($2 + [4])))
	$1 = *($2)
	*($6 + [80]) = ($6 + [72])
	*($6 + [76]) = $6
	*($6 + [72]) = $6
	CALL $70(($6 + [72]), $0)
	$3 = *($0)
	*($0 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)7614284302722138112, *(*($2 + [8])), $3, $6, [72])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($1 + [8]))
	$4 = *(*(($2 + [8])))
	$5 = *($0)
	*($6 + [88]) = *($0 + [56])
	*($0 + [80]) = CALL db_idx64_store($3, (int_64)7614284302722138112, $4, $5, ($6 + [88]))
	*([0] + [4]) = ($6 + [96])
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$4 = *($1)
	$6 = *($3)
	$5 = ($1 + [16])
	CALL eosio_assert(((int_64)*($5) == (int_64)*($6 + [8])), [1600])
	CALL eosio_assert(((int_64)*($1 + [8]) >= (int_64)*($6)), [1664])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($5)), [1696])
	$7 = (int_64)
	*($1 + [8]) = $7(*($1 + [8]) - *($3)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [1744])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1776])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [496])
	*($8 + [40]) = ($8 + [32])
	*($8 + [36]) = $8
	*($8 + [32]) = $8
	CALL $42(($8 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $8, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $134($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $138($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $135($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $138 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [944])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [992])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1056])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $135($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $135($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $115 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [576])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $134([48])
	CALL $122($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [36])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $51(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $135($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $122 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [320])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [240])
	*($0 + [32]) = $1
	*($0) = *(*(*($2 + [4])))
	$4 = *($2)
	*($6 + [40]) = ($6 + [32])
	*($6 + [36]) = $6
	*($6 + [32]) = $6
	CALL $42(($6 + [32]), $0)
	$3 = *($0)
	*($0 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)3607749778735104000, *(*($2 + [8])), $3, $6, [32])
	if ( (uint_64)($3 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [48])
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $131([1972], $0)
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $132($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10368])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $132 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10454]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10456])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10454]) = [1]
	$7 = ($7 << [16])
	*([0] + [10456]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10456])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10456]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10454]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10454]) = [1]
	$3 = ($3 << [16])
	*([0] + [10456]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10456])
	
.LABEL $label$8
	*([0] + [10456]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10356])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10164]
	$1 = (((int_32)$2 * (int_32)[12]) + [10164])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $134 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10460])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $136 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $134(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $135($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0 + [4])
	*($1) = *(*($2))
	*($1 + [12]) = *(*($2 + [4]))
	$2 = *($0)
	CALL eosio_assert([1], [560])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [560])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	CALL eosio_assert([1], [560])
	CALL memcpy(($4 | [12]), ($1 + [12]), [4])
	$3 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($2 + [8]), (int_64)7035931943447298048, *(*($0 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)((int_64)*(*(*($3) + [4]) + [8]) / (int_64)100))
	$4 = *($1)
	CALL eosio_assert([1], [496])
	*($5 + [40]) = ($5 + [32])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $42(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [320])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [240])
	*($0 + [32]) = $1
	*($0) = *(*(*($2 + [4])))
	$4 = *($2)
	*($6 + [40]) = ($6 + [32])
	*($6 + [36]) = $6
	*($6 + [32]) = $6
	CALL $42(($6 + [32]), $0)
	$3 = *($0)
	*($0 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)3607749778735104000, *(*($2 + [8])), $3, $6, [32])
	if ( (uint_64)($3 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [48])
	return $0
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [848])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [24])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [48])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-4157538979756376064, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [48]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]))
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [52]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-4157538979756376063, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [52])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $125 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))), [1392])
	$5 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1472])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [496])
	*($6 + [40]) = ($6 + [32])
	*($6 + [36]) = $6
	*($6 + [32]) = $6
	CALL $42(($6 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $6, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*((*(*($3)) + (*(*($3 + [4])) << [5])) + [16]))
	$4 = *($1)
	CALL eosio_assert([1], [496])
	*($5 + [40]) = ($5 + [32])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $42(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	*($1 + [40]) = [2]
	$4 = *($1)
	CALL eosio_assert([1], [496])
	*($5 + [56]) = ($5 + [44])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $43(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [48]), $2, $5, [44])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [44]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [768])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4157538979756376064)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [704])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [704])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $34(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	$11 = $12
	*([0] + [4]) = $12
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [192])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [176])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [184])), (int_64)-4157538979756376064, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $34($5, $6)
	*($11 + [12]) = [0]
	*($11 + [8]) = $5
	$7 = *(*(CALL $46(($11 + [8])) + [4]) + [32])
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [192])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [640])
	$7 = *($8)
	*($1 + [32]) = $7
	$4 = *($3 + [4])
	*($1 + [8]) = (int_64)1
	*($4 + [8]) = $7
	$4 = *($3 + [8])
	*($1 + [16]) = (int_64)0
	*($1) = *($4 + [48])
	*($1 + [24]) = *(*($3 + [12]))
	$12 = $12
	$3 = ($12 + [-48])
	*([0] + [4]) = $3
	*($11 + [12]) = $3
	*($11 + [8]) = $3
	*($11 + [16]) = ($12 + [-8])
	CALL $47(($11 + [8]), $1)
	$7 = *($1 + [32])
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)-4157538979756376064, *(*($0 + [8])), $7, $3, [40])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$3 = ($1 + [32])
	$7 = *($3)
	$2 = ($2 + [8])
	$9 = *($2)
	$0 = *(($0 + [8]))
	$10 = *($0)
	*($11 + [24]) = *(($1 + [24]))
	*($1 + [48]) = CALL db_idx64_store($9, (int_64)-4157538979756376064, $10, $7, ($11 + [24]))
	$7 = *($3)
	$9 = *($0)
	$10 = *($2)
	*($11 + [24]) = *($1)
	*(($1 + [52])) = CALL db_idx64_store($10, (int_64)-4157538979756376063, $9, $7, ($11 + [24]))
	*([0] + [4]) = ($11 + [32])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [576])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $134([48])
	CALL $126($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [36])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $51(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $135($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $129($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $137($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $134($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $137($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $135($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $136($7)
	return (unreachable)
}

void .FUNC $8 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	$3 = *($1)
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [272]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$3 == (int_64)$8) ){ goto $label$5 }
	if ( ((int_64)*($1 + [8]) != (int_64)*($0)) ){ goto $label$5 }
	$5 = ($1 + [24])
	if ( ((int_64)*($5) != (int_64)1397703940) ){ goto $label$5 }
	$7 = *($5)
	*(($10 + [72])) = $7
	*($10 + [64]) = *($1 + [16])
	CALL eosio_assert(((int_64)$7 == (int_64)1397703940), [1568])
	$4 = [0]
	$6 = *($10 + [64])
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$6 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [1264])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [1296])
	*($10 + [40]) = (int_64)-1
	*($10 + [48]) = [0]
	$6 = *($0)
	*($10 + [24]) = $6
	$7 = *($1)
	*($10 + [32]) = $7
	*(($10 + [52])) = [0]
	*(($10 + [56])) = [0]
	$5 = CALL db_find_i64($6, $7, (int_64)3607749778735104000, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	$5 = CALL $32(($10 + [24]), $5)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($10 + [24])), [32])
	goto $label$11 
	
.LABEL $label$12
	$7 = *($0)
	*($10 + [8]) = $1
	CALL $124(($10 + [16]), ($10 + [24]), $7, ($10 + [8]))
	$5 = *($10 + [20])
	
.LABEL $label$11
	*($10 + [16]) = ($10 + [64])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [160])
	CALL $125(($10 + [24]), $5, (int_64)0, ($10 + [16]))
	$1 = *($10 + [48])
	if ( ($1 == 0) ){ goto $label$5 }
	$0 = ($10 + [52])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	CALL $135($4)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$15 }
	$5 = *(($10 + [48]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($0) = $1
	CALL $135($5)
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [80])
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [272]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	*(($11 + [32])) = [0]
	*($11 + [16]) = (int_64)-1
	*($11 + [24]) = (int_64)0
	$8 = *($0)
	*($11) = $8
	*($11 + [8]) = $1
	$6 = CALL db_find_i64($8, $1, (int_64)3607749778735104000, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $32($11, $6)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$11), [32])
	CALL eosio_assert([1], [896])
	CALL eosio_assert([1], [208])
	$2 = CALL db_next_i64(*($6 + [36]), ($11 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	CALL $32($11, $2)
	
.LABEL $label$6
	CALL $96($11, $6)
	
.LABEL $label$5
	$3 = *(($0 + [320]))
	$5 = *(($0 + [324]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$6 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$8:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$7 }
	$5 = $6
	$2 = ($6 + [-24])
	$6 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = ($0 + [296])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$11 }
	$2 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)$6), [32])
	if ( $2 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$2 = CALL db_find_i64(*(($0 + [296])), *(($0 + [304])), (int_64)7035931943447298048, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$9 }
	$2 = CALL $116($6, $2)
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)$6), [32])
	
.LABEL $label$10
	CALL eosio_assert([1], [896])
	CALL eosio_assert([1], [208])
	$5 = CALL db_next_i64(*($2 + [20]), ($11 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	CALL $116($6, $5)
	
.LABEL $label$12
	CALL $123($6, $2)
	
.LABEL $label$9
	$5 = *($11 + [24])
	if ( ($5 == 0) ){ goto $label$13 }
	$4 = ($11 + [28])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	CALL $135($2)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$16 }
	$6 = *(($11 + [24]))
	goto $label$14 
	
.LABEL $label$15
	$6 = $5
	
.LABEL $label$14
	*($4) = $5
	CALL $135($6)
	
.LABEL $label$13
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [240])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $7(($9 + [192]))
	CALL $8($0, ($9 + [192]), $1)
	if ( ((*($9 + [224]) & [1]) == 0) ){ goto $label$7 }
	CALL $135(*(($9 + [232])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)$2 > (int_64)4929617711867101183) ){ goto $label$19 }
	if ( ((int_64)$2 > (int_64)-4157529782108553217) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)-6030913829195513856) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)-6030911325394173952) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)-4417333686766141440) ){ goto $label$7 }
	*($9 + [156]) = [0]
	*($9 + [152]) = [1]
	*($9 + [32 align=4]) = *($9 + [152])
	CALL $15($0, ($9 + [32]))
	goto $label$7 
	
.LABEL $label$19
	if ( ((int_64)$2 > (int_64)5377971004819521535) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)4929617711867101184) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)4981848853654971392) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)5031766159817850880) ){ goto $label$7 }
	*($9 + [180]) = [0]
	*($9 + [176]) = [2]
	*($9 + [8 align=4]) = *($9 + [176])
	CALL $12($0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)-4157529782108553216) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)4923678699810062336) ){ goto $label$7 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [3]
	*($9 + [80 align=4]) = *($9 + [104])
	CALL $10($0, ($9 + [80]))
	goto $label$7 
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)7746191359077253120) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)6121143619480977408) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)5377971004819521536) ){ goto $label$7 }
	*($9 + [188]) = [0]
	*($9 + [184]) = [4]
	*($9) = *($9 + [184])
	CALL $10($0, $9)
	goto $label$7 
	
.LABEL $label$16
	*($9 + [164]) = [0]
	*($9 + [160]) = [5]
	*($9 + [24 align=4]) = *($9 + [160])
	CALL $15($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$15
	*($9 + [116]) = [0]
	*($9 + [112]) = [6]
	*($9 + [72 align=4]) = *($9 + [112])
	CALL $15($0, ($9 + [72]))
	goto $label$7 
	
.LABEL $label$14
	*($9 + [100]) = [0]
	*($9 + [96]) = [7]
	*($9 + [88 align=4]) = *($9 + [96])
	CALL $10($0, ($9 + [88]))
	goto $label$7 
	
.LABEL $label$13
	*($9 + [140]) = [0]
	*($9 + [136]) = [8]
	*($9 + [48 align=4]) = *($9 + [136])
	CALL $20($0, ($9 + [48]))
	goto $label$7 
	
.LABEL $label$12
	*($9 + [132]) = [0]
	*($9 + [128]) = [9]
	*($9 + [56 align=4]) = *($9 + [128])
	CALL $22($0, ($9 + [56]))
	goto $label$7 
	
.LABEL $label$11
	*($9 + [148]) = [0]
	*($9 + [144]) = [10]
	*($9 + [40 align=4]) = *($9 + [144])
	CALL $18($0, ($9 + [40]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [172]) = [0]
	*($9 + [168]) = [11]
	*($9 + [16 align=4]) = *($9 + [168])
	CALL $10($0, ($9 + [16]))
	goto $label$7 
	
.LABEL $label$9
	*($9 + [124]) = [0]
	*($9 + [120]) = [12]
	*($9 + [64 align=4]) = *($9 + [120])
	CALL $24($0, ($9 + [64]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [240])
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [320])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [240])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $127($6, $0)
	*([0] + [4]) = ($6 + [16])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [336])
	*([0] + [4]) = $3
	*(($3 + [24])) = $0
	*(($3 + [32])) = (int_64)-1
	*(($3 + [40])) = [0]
	*(($3 + [44])) = [0]
	*($3 + [8]) = [300]
	*($3) = $0
	*($3 + [16]) = $0
	*(($3 + [48])) = [0]
	*($3 + [56]) = $0
	*(($3 + [64])) = $0
	*(($3 + [72])) = (int_64)-1
	*(($3 + [80])) = [0]
	*(($3 + [84])) = [0]
	*(($3 + [88])) = [0]
	*($3 + [96]) = $0
	*(($3 + [104])) = $0
	*(($3 + [112])) = (int_64)-1
	*(($3 + [120])) = [0]
	*(($3 + [124])) = [0]
	*(($3 + [128])) = [0]
	*(($3 + [132])) = [0]
	*($3 + [136]) = $0
	*(($3 + [144])) = $0
	*(($3 + [152])) = (int_64)-1
	*(($3 + [160])) = [0]
	*(($3 + [164])) = [0]
	*(($3 + [168])) = [0]
	*($3 + [176]) = $0
	*(($3 + [184])) = $0
	*(($3 + [192])) = (int_64)-1
	*(($3 + [200])) = [0]
	*(($3 + [204])) = [0]
	*(($3 + [208])) = [0]
	*(($3 + [212])) = [0]
	*($3 + [216]) = $0
	*(($3 + [224])) = $0
	*(($3 + [232])) = (int_64)-1
	*(($3 + [240])) = [0]
	*(($3 + [244])) = [0]
	*(($3 + [248])) = [0]
	*($3 + [256]) = $0
	*(($3 + [264])) = $0
	*(($3 + [272])) = (int_64)-1
	*(($3 + [280])) = [0]
	*(($3 + [284])) = [0]
	*(($3 + [288])) = [0]
	*($3 + [296]) = $0
	*(($3 + [304])) = $0
	*(($3 + [312])) = (int_64)-1
	*(($3 + [320])) = [0]
	*(($3 + [324])) = [0]
	*(($3 + [328])) = [0]
	CALL $6($3, $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [64])
	*([0] + [4]) = $13
	*($13 + [48]) = $1
	CALL require_auth($3)
	$6 = *(($0 + [160]))
	$5 = *(($0 + [164]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$1 }
	$9 = ($5 + [-24])
	$12 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$2) ){ goto $label$1 }
	$5 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $12) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [136])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	$9 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$7), [32])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$5 = CALL db_find_i64(*(($0 + [136])), *(($0 + [144])), (int_64)7614284258291875840, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $28($7, $5)
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$7), [32])
	
.LABEL $label$3
	*($13 + [24]) = (int_64)-1
	$6 = [0]
	*($13 + [32]) = [0]
	$1 = *($0)
	*($13 + [8]) = $1
	$8 = *($9 + [32])
	*($13 + [16]) = $8
	*(($7 = ($13 + [36]))) = [0]
	*(($13 + [40])) = [0]
	*($13 + [44]) = [0]
	$11 = (int_64)0
	$10 = (int_64)0
	$9 = CALL db_lowerbound_i64($1, $8, (int_64)7614284302722138112, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	$9 = CALL $29(($13 + [8]), $9)
	$6 = [0]
	$10 = (int_64)0
	$11 = (int_64)0
	
.LOOP $label$6:
	$1 = *($9 + [8])
	if ( ((int_64)*($9 + [56]) != (int_64)3) ){ goto $label$9 }
	if ( ((int_64)$1 != (int_64)$2) ){ goto $label$9 }
	if ( ((int_64)*($9 + [16]) == (int_64)$3) ){ goto $label$8 }
	$10 = *($9)
	$6 = [1]
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_64)$1 != (int_64)$2) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((int_64)*($9 + [16]) != (int_64)$3) ){ goto $label$7 }
	$11 = *($9)
	$1 = *($13 + [48])
	if ( ((int_64)$1 != (int_64)1) ){ goto $label$10 }
	CALL eosio_assert(((int_64)*($9 + [24]) != (int_64)0), [1136])
	$1 = *($13 + [48])
	
.LABEL $label$10
	if ( ((int_64)$1 != (int_64)2) ){ goto $label$11 }
	CALL eosio_assert(((int_64)*($9 + [32]) != (int_64)0), [1168])
	$1 = *($13 + [48])
	
.LABEL $label$11
	if ( ((int_64)$1 != (int_64)3) ){ goto $label$12 }
	CALL eosio_assert(((int_64)*($9 + [40]) != (int_64)0), [1200])
	
.LABEL $label$12
	CALL eosio_assert(((int_64)*(($9 + [56])) != (int_64)2), [1232])
	
.LABEL $label$7
	CALL eosio_assert([1], [208])
	$9 = CALL db_next_i64(*($9 + [76]), ($13 + [56]))
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$5 }
	$9 = CALL $29(($13 + [8]), $9)
	goto $label$6 
	
.LABEL $label$5
	CALL eosio_assert(($6 & [1]), [1920])
	$4 = *(($13 + [32]))
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$13 }
	$9 = ($5 + [-24])
	$12 = ([0] - $4)
	
.LOOP $label$14:
	if ( ((int_64)*(*($9)) == (int_64)$11) ){ goto $label$13 }
	$5 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $12) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$16 }
	$4 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)($13 + [8])), [32])
	goto $label$15 
	
.LABEL $label$16
	$4 = [0]
	$9 = CALL db_find_i64(*($13 + [8]), *(($13 + [16])), (int_64)7614284302722138112, $11)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	$4 = CALL $29(($13 + [8]), $9)
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)($13 + [8])), [32])
	
.LABEL $label$15
	if ( (($6 & [1]) == 0) ){ goto $label$17 }
	$6 = *(($13 + [32]))
	$5 = *(($13 + [36]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$18 }
	$9 = ($5 + [-24])
	$12 = ([0] - $6)
	
.LOOP $label$19:
	if ( ((int_64)*(*($9)) == (int_64)$10) ){ goto $label$18 }
	$5 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $12) != (int_32)[-24]) ){ goto $label$19 }
	
.LABEL $label$18
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$21 }
	$9 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)($13 + [8])), [32])
	goto $label$20 
	
.LABEL $label$21
	$9 = CALL $29(($13 + [8]), CALL $fimport$5(*($13 + [8]), *(($13 + [16])), (int_64)7614284302722138112, $10))
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)($13 + [8])), [32])
	
.LABEL $label$20
	*($13 + [56]) = ($13 + [8])
	$1 = *($13 + [48])
	*($13 + [60]) = $9
	$11 = *($9 + [64])
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)-1) <= (int_64)3), [1248])
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)-1) <= (int_64)3), [1248])
	$9 = [0]
	if ( ((int_64)$1 == (int_64)$11) ){ goto $label$22 }
	$9 = [2]
	if ( ((int_64)$1 != (int_64)1) ){ goto $label$23 }
	if ( ((int_64)$11 == (int_64)2) ){ goto $label$22 }
	
.LABEL $label$23
	if ( ((int_64)$1 != (int_64)2) ){ goto $label$24 }
	if ( ((int_64)$11 == (int_64)3) ){ goto $label$22 }
	
.LABEL $label$24
	$9 = ( ( [2] ? [1] : ((int_64)$11 == (int_64)1) ) ? [1] : ((int_64)$1 == (int_64)3) )
	
.LABEL $label$22
	$9 = ($9 & [3])
	if ( ($9 == 0) ){ goto $label$25 }
	if ( ((int_32)$9 == (int_32)[2]) ){ goto $label$26 }
	if ( ((int_32)$9 != (int_32)[1]) ){ goto $label$17 }
	*($13 + [4]) = ($13 + [48])
	*($13) = ($13 + [56])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [160])
	CALL $106(($13 + [8]), $4, (int_64)0, $13)
	$9 = *($13 + [60])
	*($13) = ($13 + [48])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [160])
	CALL $107(($13 + [8]), $9, (int_64)0, $13)
	goto $label$17 
	
.LABEL $label$26
	*($13 + [4]) = ($13 + [56])
	*($13) = ($13 + [48])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [160])
	CALL $108(($13 + [8]), $4, (int_64)0, $13)
	$9 = *($13 + [60])
	*($13) = ($13 + [48])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [160])
	CALL $109(($13 + [8]), $9, (int_64)0, $13)
	goto $label$17 
	
.LABEL $label$25
	$9 = *($13 + [60])
	*($13) = ($13 + [48])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [160])
	CALL $110(($13 + [8]), $9, (int_64)0, $13)
	*($13) = ($13 + [48])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [160])
	CALL $111(($13 + [8]), $4, (int_64)0, $13)
	
.LABEL $label$17
	$5 = ($0 + [216])
	$1 = (int_64)0
	$9 = CALL db_lowerbound_i64(*($0 + [216]), *(($0 + [224])), (int_64)4410498445928824832, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$27 }
	$9 = CALL $104($5, $9)
	
.LOOP $label$29:
	if ( ((int_64)*($9 + [8]) == (int_64)$3) ){ goto $label$30 }
	if ( ((int_64)*($9 + [16]) == (int_64)$2) ){ goto $label$28 }
	
.LABEL $label$30
	CALL eosio_assert([1], [208])
	$9 = CALL db_next_i64(*($9 + [28]), ($13 + [56]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$27 }
	$9 = CALL $104($5, $9)
	goto $label$29 
	
.LABEL $label$28
	$1 = *($9)
	
.LABEL $label$27
	$4 = *(($0 + [240]))
	$12 = *(($0 + [244]))
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$31 }
	$9 = ($12 + [-24])
	$6 = ([0] - $4)
	
.LOOP $label$32:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$31 }
	$12 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$32 }
	
.LABEL $label$31
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$34 }
	$9 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [32])
	goto $label$33 
	
.LABEL $label$34
	$9 = [0]
	$7 = CALL db_find_i64(*(($0 + [216])), *(($0 + [224])), (int_64)4410498445928824832, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$33 }
	$9 = CALL $104($5, $7)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [32])
	
.LABEL $label$33
	$7 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($7, [896])
	CALL eosio_assert($7, [208])
	$7 = CALL db_next_i64(*($9 + [28]), ($13 + [56]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$35 }
	CALL $104($5, $7)
	
.LABEL $label$35
	CALL $112($5, $9)
	$5 = *($13 + [32])
	if ( ($5 == 0) ){ goto $label$36 }
	$12 = ($13 + [36])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$38 }
	
.LOOP $label$39:
	$9 = ($9 + [-24])
	$7 = *($9)
	*($9) = [0]
	if ( ($7 == 0) ){ goto $label$40 }
	CALL $135($7)
	
.LABEL $label$40
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$39 }
	$9 = *(($13 + [32]))
	goto $label$37 
	
.LABEL $label$38
	$9 = $5
	
.LABEL $label$37
	*($12) = $5
	CALL $135($9)
	
.LABEL $label$36
	*([0] + [4]) = ($13 + [64])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [848])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [848])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [848])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [88]) = $1
	*($9 + [80]) = $2
	*($9 + [72]) = $3
	CALL require_auth($3)
	$4 = *(($0 + [160]))
	$6 = *(($0 + [164]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$1 }
	$8 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$6 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [136])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	$8 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [44]) == (int_32)$7), [32])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$6 = CALL db_find_i64(*(($0 + [136])), *(($0 + [144])), (int_64)7614284258291875840, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $28($7, $6)
	CALL eosio_assert(((int_32)*($8 + [44]) == (int_32)$7), [32])
	
.LABEL $label$3
	CALL eosio_assert(((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000)) <= *($8 + [24])), [1888])
	*($9 + [48]) = (int_64)-1
	*($9 + [56]) = [0]
	$3 = *($0)
	*($9 + [32]) = $3
	$1 = *($8 + [32])
	*($9 + [40]) = $1
	*(($7 = ($9 + [60]))) = [0]
	*(($9 + [64])) = [0]
	*($9 + [68]) = [0]
	$2 = (int_64)0
	$8 = CALL db_lowerbound_i64($3, $1, (int_64)7614284302722138112, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $29(($9 + [32]), $8)
	
.LOOP $label$7:
	if ( ((int_64)*($8 + [8]) != (int_64)*($9 + [80])) ){ goto $label$8 }
	if ( ((int_64)*($8 + [16]) == (int_64)*($9 + [72])) ){ goto $label$6 }
	
.LABEL $label$8
	CALL eosio_assert([1], [208])
	$8 = CALL db_next_i64(*($8 + [76]), ($9 + [16]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $29(($9 + [32]), $8)
	goto $label$7 
	
.LABEL $label$6
	$2 = *($8)
	CALL eosio_assert(((uint_64)*($8 + [48]) > (uint_64)(int_64)1), [1904])
	$3 = *($9 + [88])
	if ( ((int_64)$3 != (int_64)1) ){ goto $label$9 }
	CALL eosio_assert(((int_64)*($8 + [24]) != (int_64)0), [1136])
	$3 = *($9 + [88])
	
.LABEL $label$9
	if ( ((int_64)$3 != (int_64)2) ){ goto $label$10 }
	CALL eosio_assert(((int_64)*($8 + [32]) != (int_64)0), [1168])
	$3 = *($9 + [88])
	
.LABEL $label$10
	if ( ((int_64)$3 != (int_64)3) ){ goto $label$11 }
	CALL eosio_assert(((int_64)*($8 + [40]) != (int_64)0), [1200])
	
.LABEL $label$11
	CALL eosio_assert(((int_64)*($8 + [56]) != (int_64)2), [1232])
	
.LABEL $label$5
	$4 = *(($9 + [56]))
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$12 }
	$8 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$13:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$12 }
	$6 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$15 }
	$8 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)($9 + [32])), [32])
	goto $label$14 
	
.LABEL $label$15
	$8 = [0]
	$7 = CALL db_find_i64(*($9 + [32]), *(($9 + [40])), (int_64)7614284302722138112, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$14 }
	$8 = CALL $29(($9 + [32]), $7)
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)($9 + [32])), [32])
	
.LABEL $label$14
	*($9 + [16]) = ($9 + [88])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [160])
	CALL $100(($9 + [32]), $8, (int_64)0, ($9 + [16]))
	$2 = *($0)
	*($9 + [16]) = $0
	*($9 + [20]) = ($9 + [72])
	*($9 + [24]) = ($9 + [80])
	CALL $101(($9 + [8]), ($0 + [216]), $2, ($9 + [16]))
	$6 = *($9 + [56])
	if ( ($6 == 0) ){ goto $label$16 }
	$5 = ($9 + [60])
	$8 = *($5)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$18 }
	
.LOOP $label$19:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$20 }
	CALL $135($7)
	
.LABEL $label$20
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$19 }
	$8 = *(($9 + [56]))
	goto $label$17 
	
.LABEL $label$18
	$8 = $6
	
.LABEL $label$17
	*($5) = $6
	CALL $135($8)
	
.LABEL $label$16
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [176])
	*([0] + [4]) = $15
	CALL require_auth($1)
	$7 = [0]
	$5 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$10 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1264])
	$10 = (int_64)0
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [1808])
	*(($15 + [136])) = [0]
	*($15 + [120]) = (int_64)-1
	*($15 + [128]) = (int_64)0
	$12 = *($0)
	*($15 + [104]) = $12
	*($15 + [112]) = $1
	$8 = CALL db_find_i64($12, $1, (int_64)3607749778735104000, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $32(($15 + [104]), $8)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)($15 + [104])), [32])
	
.LABEL $label$6
	$3 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($3, [304])
	*($15 + [16]) = $2
	CALL eosio_assert($3, [160])
	CALL $92(($15 + [104]), $7, (int_64)0, ($15 + [16]))
	$4 = *($0)
	$9 = (int_64)59
	$8 = [1840]
	$11 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$12 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$8
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$7 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1856]
	$13 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$18 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$5 = ($5 + [165])
	goto $label$16 
	
.LABEL $label$18
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$14
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$13 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [16]
	$14 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$24 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$5 = ($5 + [165])
	goto $label$22 
	
.LABEL $label$24
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$20
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$19 }
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$8 = CALL strlen([1872])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$28 }
	*($15) = ($8 << [1])
	$5 = ($15 | [1])
	if ( $8 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$6 = (($8 + [16]) & [-16])
	$5 = CALL $134($6)
	*($15) = ($6 | [1])
	*($15 + [8]) = $5
	*($15 + [4]) = $8
	
.LABEL $label$27
	CALL memcpy($5, [1872], $8)
	
.LABEL $label$26
	*(($5 + $8)) = [0]
	*((($15 + [16]) + [28])) = *(($2 + [12]))
	*((($15 + [16]) + [24])) = *(($2 + [8]))
	*((($15 + [16]) + [20])) = *(($2 + [4]))
	*($15 + [24]) = $1
	*($15 + [16]) = *($0)
	*($15 + [32]) = *($2)
	$8 = ($15 + [8])
	*(($15 + [56])) = *($8)
	*($15 + [48]) = *($15)
	*($15) = [0]
	*($15 + [4]) = [0]
	*($8) = [0]
	*($15 + [64]) = $13
	*($15 + [72]) = $14
	*(($8 = CALL $134([16]))) = $4
	*($8 + [8]) = $11
	*((($15 + [64]) + [32])) = [0]
	$5 = ($8 + [16])
	*((($15 + [64]) + [24])) = $5
	*((($15 + [64]) + [20])) = $5
	*($15 + [80]) = $8
	*($15 + [92]) = [0]
	*((($15 + [64]) + [36])) = [0]
	$8 = *($15 + [48])
	$5 = ( *((($15 + [16]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($5 + [32])
	$10 = (CASTING uint_64)(uint_32 $5)
	$5 = (($15 + [64]) + [28])
	
.LOOP $label$29:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$29 }
	if ( ($8 == 0) ){ goto $label$31 }
	CALL $93($5, $8)
	$5 = *(($15 + [96]))
	$8 = *(($15 + [92]))
	goto $label$30 
	
.LABEL $label$31
	$5 = [0]
	$8 = [0]
	
.LABEL $label$30
	*($15 + [164]) = $8
	*($15 + [160]) = $8
	*($15 + [168]) = $5
	*($15 + [144]) = ($15 + [160])
	*($15 + [152]) = ($15 + [16])
	CALL $94(($15 + [152]), ($15 + [144]))
	CALL $95(($15 + [160]), ($15 + [64]))
	$8 = *($15 + [160])
	CALL send_inline($8, (*($15 + [164]) - $8))
	$8 = *($15 + [160])
	if ( ($8 == 0) ){ goto $label$32 }
	*($15 + [164]) = $8
	CALL $135($8)
	
.LABEL $label$32
	$8 = *($15 + [92])
	if ( ($8 == 0) ){ goto $label$33 }
	*(($15 + [96])) = $8
	CALL $135($8)
	
.LABEL $label$33
	$8 = *($15 + [80])
	if ( ($8 == 0) ){ goto $label$34 }
	*(($15 + [84])) = $8
	CALL $135($8)
	
.LABEL $label$34
	if ( ((*(($15 + [48])) & [1]) == 0) ){ goto $label$35 }
	CALL $135(*(($15 + [56])))
	
.LABEL $label$35
	if ( ((*($15) & [1]) == 0) ){ goto $label$36 }
	CALL $135(*(($15 + [8])))
	
.LABEL $label$36
	if ( ((int_64)((int_64)((int_64)*($7 + [24]) | (int_64)*($7 + [8])) | (int_64)*($7 + [28])) != (int_64)0) ){ goto $label$37 }
	CALL eosio_assert($3, [896])
	CALL eosio_assert($3, [208])
	$8 = CALL db_next_i64(*($7 + [36]), ($15 + [16]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$38 }
	CALL $32(($15 + [104]), $8)
	
.LABEL $label$38
	CALL $96(($15 + [104]), $7)
	
.LABEL $label$37
	$2 = *($15 + [128])
	if ( ($2 == 0) ){ goto $label$39 }
	$7 = ($15 + [132])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$41 }
	
.LOOP $label$42:
	$8 = ($8 + [-24])
	$5 = *($8)
	*($8) = [0]
	if ( ($5 == 0) ){ goto $label$43 }
	CALL $135($5)
	
.LABEL $label$43
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$42 }
	$8 = *(($15 + [128]))
	goto $label$40 
	
.LABEL $label$41
	$8 = $2
	
.LABEL $label$40
	*($7) = $2
	CALL $135($8)
	
.LABEL $label$39
	*([0] + [4]) = ($15 + [176])
	return (unreachable)
	
.LABEL $label$25
	CALL $136($15)
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [848])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	*($12 + [72]) = $1
	*($12 + [68]) = $2
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [272]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($2)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	*(($12 + [56])) = [0]
	*($12 + [40]) = (int_64)-1
	$8 = (int_64)0
	*($12 + [48]) = (int_64)0
	$7 = *($0)
	*($12 + [24]) = $7
	*($12 + [32]) = $1
	$2 = CALL db_find_i64($7, $1, (int_64)3607749778735104000, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$11 = CALL $32(($12 + [24]), $2)
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)($12 + [24])), [32])
	goto $label$5 
	
.LABEL $label$6
	$7 = (int_64)59
	$2 = [272]
	$9 = (int_64)0
	
.LOOP $label$7:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$8 }
	$3 = *($2)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$3 = ($3 + [165])
	goto $label$9 
	
.LABEL $label$10
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$7 }
	*($12 + [8]) = ($12 + [72])
	CALL $115(($12 + [16]), ($12 + [24]), $9, ($12 + [8]))
	$11 = *($12 + [20])
	
.LABEL $label$5
	$8 = *($12 + [72])
	$4 = *(($0 + [320]))
	$6 = *(($0 + [324]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$11 }
	$2 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$12:
	if ( ((int_64)*(*($2)) == (int_64)$8) ){ goto $label$11 }
	$6 = $2
	$3 = ($2 + [-24])
	$2 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$5 = ($0 + [296])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$15 }
	$2 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)$5), [32])
	if ( $2 ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	$2 = CALL db_find_i64(*(($0 + [296])), *(($0 + [304])), (int_64)7035931943447298048, $8)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$14 }
	$2 = CALL $116($5, $2)
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)$5), [32])
	goto $label$13 
	
.LABEL $label$14
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [272]
	$9 = (int_64)0
	
.LOOP $label$16:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$17 }
	$3 = *($2)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$3 = ($3 + [165])
	goto $label$18 
	
.LABEL $label$19
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$17
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$16 }
	*($12 + [12]) = ($12 + [68])
	*($12 + [8]) = ($12 + [72])
	CALL $117(($12 + [16]), $5, $9, ($12 + [8]))
	$2 = *($12 + [20])
	
.LABEL $label$13
	*($12 + [16]) = ($12 + [68])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [160])
	CALL $118(($12 + [24]), $11, (int_64)0, ($12 + [16]))
	*($12 + [16]) = ($12 + [68])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [160])
	CALL $119($5, $2, (int_64)0, ($12 + [16]))
	$6 = *($12 + [48])
	if ( ($6 == 0) ){ goto $label$20 }
	$5 = ($12 + [52])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$22 }
	
.LOOP $label$23:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$24 }
	CALL $135($3)
	
.LABEL $label$24
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$23 }
	$2 = *(($12 + [48]))
	goto $label$21 
	
.LABEL $label$22
	$2 = $6
	
.LABEL $label$21
	*($5) = $6
	CALL $135($2)
	
.LABEL $label$20
	*([0] + [4]) = ($12 + [80])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [848])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[8]), [848])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [8]), [4])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7)
	$3 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $4), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($6 + [56]) = $1
	CALL require_auth($1)
	CALL prints([1952])
	CALL printn($1)
	*(($6 + [48])) = [0]
	*($6 + [24]) = $1
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	$4 = *($0)
	*($6 + [16]) = $4
	$3 = CALL db_find_i64($4, $1, (int_64)3607749778735104000, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $32(($6 + [16]), $3) + [32]) == (int_32)($6 + [16])), [32])
	$2 = *($6 + [40])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = *($0)
	*($6) = ($6 + [56])
	CALL $113(($6 + [8]), ($6 + [16]), $1, $6)
	$2 = *($6 + [40])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($6 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $135($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $135($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	$10 = $11
	*([0] + [4]) = $11
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$7 = *($4 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4), *($4 + [8]), (int_64)7614284302722138112, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $29($4, $5)
	*($10 + [12]) = [0]
	*($10 + [8]) = $4
	$7 = *(*(CALL $76(($10 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [640])
	*($1) = *(($4 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	$4 = *($3 + [12])
	*($1 + [56]) = (int_64)0
	*($1 + [48]) = ((int_64)((int_64)((int_64)*($4) / (int_64)20000) * (int_64)3) + (int_64)*($1 + [48]))
	$6 = *(*($3 + [12]))
	if ( ((uint_64)((int_64)$6 + (int_64)-40000) >= (uint_64)(int_64)10000) ){ goto $label$5 }
	$7 = (int_64)7
	$8 = (int_64)8
	$9 = (int_64)7
	goto $label$4 
	
.LABEL $label$5
	if ( ((uint_64)((int_64)$6 + (int_64)-60000) >= (uint_64)(int_64)10000) ){ goto $label$6 }
	$7 = (int_64)11
	$8 = (int_64)10
	$9 = (int_64)11
	goto $label$4 
	
.LABEL $label$6
	if ( ((uint_64)((int_64)$6 + (int_64)-80000) >= (uint_64)(int_64)10000) ){ goto $label$7 }
	$9 = (int_64)14
	$8 = (int_64)13
	$7 = (int_64)13
	goto $label$4 
	
.LABEL $label$7
	if ( ((uint_64)((int_64)$6 + (int_64)-100000) >= (uint_64)(int_64)10000) ){ goto $label$8 }
	$7 = (int_64)17
	$8 = (int_64)16
	$9 = (int_64)16
	goto $label$4 
	
.LABEL $label$8
	$8 = (int_64)4
	$7 = (int_64)4
	$9 = (int_64)4
	if ( ((uint_64)((int_64)$6 + (int_64)-20000) > (uint_64)(int_64)9999) ){ goto $label$3 }
	
.LABEL $label$4
	*($1 + [32]) = $7
	*($1 + [24]) = $8
	*($1 + [40]) = $9
	
.LABEL $label$3
	$4 = $11
	$3 = ($4 + [-80])
	*([0] + [4]) = $3
	*($10 + [12]) = $3
	*($10 + [8]) = $3
	*($10 + [16]) = ($4 + [-8])
	CALL $70(($10 + [8]), $1)
	$7 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($2 + [8]), (int_64)7614284302722138112, *(*($0 + [8])), $7, $3, [72])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$9 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$7 = *(($2 + [8]))
	$8 = *(*(($0 + [8])))
	$9 = *($1)
	*($10 + [24]) = *(($1 + [56]))
	*($1 + [80]) = CALL db_idx64_store($7, (int_64)7614284302722138112, $8, $9, ($10 + [24]))
	*([0] + [4]) = ($10 + [32])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [64])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = [0]
	$4 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $3)
	
.LABEL $label$1
	*(($8 + [24])) = (int_64)1398362884
	*($8 + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	CALL eosio_assert([1], [320])
	$5 = (int_64)5462355
	
.LOOP $label$5:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($6, [240])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [848])
	CALL memcpy(($8 + [8]), $4, [8])
	$6 = ($3 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [848])
	$1 = (($8 + [8]) + [8])
	CALL memcpy($1, ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [848])
	CALL memcpy((($8 + [8]) + [16]), ($4 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($4)
	
.LABEL $label$8
	*(($6 = (($8 + [32]) + [8]))) = *(($1 + [8]))
	$5 = *($8 + [8])
	*($8 + [32]) = *($1)
	*((($8 + [48]) + [8])) = *($6)
	*($8 + [48]) = *($8 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$7 = *((*($1) + $7))
	
.LABEL $label$9
	CALL void $1((int_32 $5), (int_64 ($8 + [48])), (int_32 $7))
	*([0] + [4]) = ($8 + [64])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($9 + [24]) = $1
	*($9 + [16]) = $3
	CALL require_auth($1)
	$6 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$3 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [1264])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [1296])
	CALL eosio_assert((int_64)(((int_64)*($2) % (int_64)40000) == 0), [1328])
	CALL eosio_assert(((int_64)*($2) > (int_64)159999), [1328])
	CALL eosio_assert(((int_64)*($2) < (int_64)840000), [1328])
	$4 = *(($0 + [120]))
	$8 = *(($0 + [124]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = ($0 + [96])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$10 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$6), [32])
	if ( $7 ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$7 = CALL db_find_i64(*(($0 + [96])), *(($0 + [104])), (int_64)7614284302722138112, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	$7 = CALL $29($6, $7)
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$6), [32])
	goto $label$8 
	
.LABEL $label$9
	$3 = *($0)
	*($9) = ($9 + [24])
	CALL $89(($9 + [8]), $6, $3, $9)
	$7 = *($9 + [12])
	
.LABEL $label$8
	*($9 + [8]) = $2
	*($9 + [12]) = ($9 + [16])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [160])
	CALL $90($6, $7, (int_64)0, ($9 + [8]))
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [944])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [992])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1056])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $135($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $135($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [848])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [848])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [848])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [32])
	*([0] + [4]) = $15
	$14 = CALL int_32 $1((int_32 $0), (int_32 *($4)))
	$5 = CALL int_32 $2((int_32 $1), (int_32 *($4)))
	if ( ($14 == 0) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$3 }
	$5 = ($0 + [24])
	*(($14 = ($15 + [24]))) = *($5)
	$8 = ($0 + [16])
	*(($6 = ($15 + [16]))) = *($8)
	$10 = ($0 + [8])
	*(($7 = ($15 + [8]))) = *($10)
	*($15) = *($0)
	$9 = ($2 + [24])
	*($5) = *($9)
	$5 = ($2 + [16])
	*($8) = *($5)
	$8 = ($2 + [8])
	*($10) = *($8)
	*($0) = *($2)
	*($9) = *($14)
	*($5) = *($6)
	*($8) = *($7)
	*($2) = *($15)
	$14 = [1]
	goto $label$1 
	
.LABEL $label$4
	$14 = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($1 + [24])
	*(($5 = ($15 + [24]))) = *($6)
	$7 = ($1 + [16])
	*(($8 = ($15 + [16]))) = *($7)
	$9 = ($1 + [8])
	*(($10 = ($15 + [8]))) = *($9)
	*($15) = *($1)
	$14 = ($2 + [24])
	*($6) = *($14)
	$11 = ($2 + [16])
	*($7) = *($11)
	$12 = ($2 + [8])
	*($9) = *($12)
	*($1) = *($2)
	*($14) = *($5)
	*($11) = *($8)
	*($12) = *($10)
	*($2) = *($15)
	$14 = [1]
	if ( (CALL int_32 $1((int_32 $0), (int_32 *($4))) == 0) ){ goto $label$1 }
	$14 = ($0 + [24])
	*($5) = *($14)
	$11 = ($0 + [16])
	*($8) = *($11)
	$12 = ($0 + [8])
	*($10) = *($12)
	*($15) = *($0)
	*($14) = *($6)
	*($11) = *($7)
	*($12) = *($9)
	*($0) = *($1)
	*($6) = *($5)
	*($7) = *($8)
	*($9) = *($10)
	*($1) = *($15)
	goto $label$2 
	
.LABEL $label$3
	$14 = ($0 + [24])
	*(($5 = ($15 + [24]))) = *($14)
	$9 = ($0 + [16])
	*(($6 = ($15 + [16]))) = *($9)
	$11 = ($0 + [8])
	*(($8 = ($15 + [8]))) = *($11)
	*($15) = *($0)
	$7 = ($1 + [24])
	*($14) = *($7)
	$10 = ($1 + [16])
	*($9) = *($10)
	$9 = ($1 + [8])
	*($11) = *($9)
	*($0) = *($1)
	*($7) = *($5)
	*($10) = *($6)
	*($9) = *($8)
	*($1) = *($15)
	$14 = [1]
	if ( (CALL int_32 $2((int_32 $1), (int_32 *($4))) == 0) ){ goto $label$1 }
	*($5) = *($7)
	*($6) = *($10)
	*($8) = *($9)
	*($15) = *($1)
	$14 = ($2 + [24])
	*($7) = *($14)
	$7 = ($2 + [16])
	*($10) = *($7)
	$10 = ($2 + [8])
	*($9) = *($10)
	*($1) = *($2)
	*($14) = *($5)
	*($7) = *($6)
	*($10) = *($8)
	*($2) = *($15)
	
.LABEL $label$2
	$14 = [2]
	
.LABEL $label$1
	if ( (CALL int_32 $3((int_32 $2), (int_32 *($4))) == 0) ){ goto $label$5 }
	$6 = ($2 + [24])
	*(($5 = ($15 + [24]))) = *($6)
	$7 = ($2 + [16])
	*(($8 = ($15 + [16]))) = *($7)
	$9 = ($2 + [8])
	*(($10 = ($15 + [8]))) = *($9)
	*($15) = *($2)
	$11 = ($3 + [24])
	*($6) = *($11)
	$12 = ($3 + [16])
	*($7) = *($12)
	$13 = ($3 + [8])
	*($9) = *($13)
	*($2) = *($3)
	*($11) = *($5)
	*($12) = *($8)
	*($13) = *($10)
	*($3) = *($15)
	if ( (CALL int_32 $2((int_32 $1), (int_32 *($4))) == 0) ){ goto $label$7 }
	$3 = ($1 + [24])
	*($5) = *($3)
	$11 = ($1 + [16])
	*($8) = *($11)
	$12 = ($1 + [8])
	*($10) = *($12)
	*($15) = *($1)
	*($3) = *($6)
	*($11) = *($7)
	*($12) = *($9)
	*($1) = *($2)
	*($6) = *($5)
	*($7) = *($8)
	*($9) = *($10)
	*($2) = *($15)
	if ( (CALL int_32 $1((int_32 $0), (int_32 *($4))) == 0) ){ goto $label$6 }
	$4 = ($0 + [24])
	*(($2 = ($15 + [24]))) = *($4)
	$5 = ($0 + [16])
	*(($3 = ($15 + [16]))) = *($5)
	$8 = ($0 + [8])
	*(($6 = ($15 + [8]))) = *($8)
	*($15) = *($0)
	$7 = ($1 + [24])
	*($4) = *($7)
	$4 = ($1 + [16])
	*($5) = *($4)
	$5 = ($1 + [8])
	*($8) = *($5)
	*($0) = *($1)
	*($7) = *($2)
	*($4) = *($3)
	*($5) = *($6)
	*($1) = *($15)
	$14 = ($14 + [3])
	goto $label$5 
	
.LABEL $label$7
	$14 = ($14 + [1])
	goto $label$5 
	
.LABEL $label$6
	$14 = ($14 + [2])
	
.LABEL $label$5
	*([0] + [4]) = ($15 + [32])
	return $14
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [32])
	*([0] + [4]) = $14
	$13 = ($0 + [32])
	$8 = CALL int_32 $13((int_32 $0), (int_32 *($2)))
	$7 = ($0 + [64])
	$9 = CALL int_32 $7((int_32 $13), (int_32 *($2)))
	if ( ($8 == 0) ){ goto $label$3 }
	if ( ($9 == 0) ){ goto $label$2 }
	$8 = ($0 + [24])
	*(($13 = ($14 + [24]))) = *($8)
	$10 = ($0 + [16])
	*(($9 = ($14 + [16]))) = *($10)
	$3 = ($0 + [8])
	*(($11 = ($14 + [8]))) = *($3)
	*($14) = *($0)
	$12 = ($7 + [24])
	*($8) = *($12)
	$8 = ($7 + [16])
	*($10) = *($8)
	$10 = ($7 + [8])
	*($3) = *($10)
	*($0) = *($7)
	*($12) = *($13)
	*($8) = *($9)
	*($10) = *($11)
	*($7) = *($14)
	goto $label$1 
	
.LABEL $label$3
	if ( ($9 == 0) ){ goto $label$1 }
	$9 = ($13 + [24])
	*(($8 = ($14 + [24]))) = *($9)
	$11 = ($13 + [16])
	*(($10 = ($14 + [16]))) = *($11)
	$12 = ($13 + [8])
	*(($3 = ($14 + [8]))) = *($12)
	*($14) = *($13)
	$4 = ($7 + [24])
	*($9) = *($4)
	$5 = ($7 + [16])
	*($11) = *($5)
	$6 = ($7 + [8])
	*($12) = *($6)
	*($13) = *($7)
	*($4) = *($8)
	*($5) = *($10)
	*($6) = *($3)
	*($7) = *($14)
	if ( (CALL int_32 $13((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$1 }
	$4 = ($0 + [24])
	*($8) = *($4)
	$5 = ($0 + [16])
	*($10) = *($5)
	$6 = ($0 + [8])
	*($3) = *($6)
	*($14) = *($0)
	*($4) = *($9)
	*($5) = *($11)
	*($6) = *($12)
	*($0) = *($13)
	*($9) = *($8)
	*($11) = *($10)
	*($12) = *($3)
	*($13) = *($14)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($0 + [24])
	*(($8 = ($14 + [24]))) = *($3)
	$12 = ($0 + [16])
	*(($9 = ($14 + [16]))) = *($12)
	$4 = ($0 + [8])
	*(($10 = ($14 + [8]))) = *($4)
	*($14) = *($0)
	$11 = ($13 + [24])
	*($3) = *($11)
	$3 = ($13 + [16])
	*($12) = *($3)
	$12 = ($13 + [8])
	*($4) = *($12)
	*($0) = *($13)
	*($11) = *($8)
	*($3) = *($9)
	*($12) = *($10)
	*($13) = *($14)
	if ( (CALL int_32 $7((int_32 $13), (int_32 *($2))) == 0) ){ goto $label$1 }
	*($8) = *($11)
	*($9) = *($3)
	*($10) = *($12)
	*($14) = *($13)
	$4 = ($7 + [24])
	*($11) = *($4)
	$11 = ($7 + [16])
	*($3) = *($11)
	$3 = ($7 + [8])
	*($12) = *($3)
	*($13) = *($7)
	*($4) = *($8)
	*($11) = *($9)
	*($3) = *($10)
	*($7) = *($14)
	
.LABEL $label$1
	$13 = ($0 + [96])
	if ( ((int_32)$13 == (int_32)$1) ){ goto $label$4 }
	$12 = [0]
	
.LOOP $label$5:
	$3 = $13
	if ( (CALL int_32 $3((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$6 }
	*(($4 = ($14 + [24]))) = *(($3 + [24]))
	*(($5 = ($14 + [16]))) = *(($3 + [16]))
	*(($6 = ($14 + [8]))) = *(($3 + [8]))
	*($14) = *($3)
	$13 = $12
	
.LOOP $label$8:
	$8 = ($7 + [88])
	*((($7 = ($0 + $13)) + [120])) = *($8)
	$9 = ($7 + [80])
	*(($7 + [112])) = *($9)
	$10 = ($7 + [72])
	*(($7 + [104])) = *($10)
	$11 = ($7 + [64])
	*(($7 + [96])) = *($11)
	if ( ((int_32)$13 == (int_32)[-64]) ){ goto $label$7 }
	$13 = ($13 + [-32])
	if ( CALL int_32 $14((int_32 ($7 + [32])), (int_32 *($2))) ){ goto $label$8 }
	
.LABEL $label$7
	*($8) = *($4)
	*($9) = *($5)
	*($10) = *($6)
	*($11) = *($14)
	
.LABEL $label$6
	$12 = ($12 + [32])
	$7 = $3
	$13 = ($3 + [32])
	if ( ((int_32)$13 != (int_32)$1) ){ goto $label$5 }
	
.LABEL $label$4
	*([0] + [4]) = ($14 + [32])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [32])
	*([0] + [4]) = $16
	$15 = int_32(($1 - $0) >> [5])
	if ( ((uint_32)$15 > (uint_32)[5]) ){ goto $label$9 }
	$8 = [1]
	goto $label$1 
	
.LABEL $label$11
	$15 = ($1 + [-32])
	if ( (CALL int_32 $15((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$1 }
	$9 = ($0 + [24])
	*(($2 = ($16 + [24]))) = *($9)
	$11 = ($0 + [16])
	*(($10 = ($16 + [16]))) = *($11)
	$3 = ($0 + [8])
	*(($12 = ($16 + [8]))) = *($3)
	*($16) = *($0)
	$13 = ($15 + [24])
	*($9) = *($13)
	$9 = ($15 + [16])
	*($11) = *($9)
	$11 = ($15 + [8])
	*($3) = *($11)
	*($0) = *($15)
	*($13) = *($2)
	*($9) = *($10)
	*($11) = *($12)
	*($15) = *($16)
	goto $label$1 
	
.LABEL $label$10
	$15 = ($0 + [32])
	$10 = CALL int_32 $15((int_32 $0), (int_32 *($2)))
	$9 = ($1 + [-32])
	$11 = CALL int_32 $9((int_32 $15), (int_32 *($2)))
	if ( ($10 == 0) ){ goto $label$6 }
	if ( ($11 == 0) ){ goto $label$4 }
	$2 = ($0 + [24])
	*(($15 = ($16 + [24]))) = *($2)
	$11 = ($0 + [16])
	*(($10 = ($16 + [16]))) = *($11)
	$3 = ($0 + [8])
	*(($12 = ($16 + [8]))) = *($3)
	*($16) = *($0)
	$13 = ($9 + [24])
	*($2) = *($13)
	$2 = ($9 + [16])
	*($11) = *($2)
	$11 = ($9 + [8])
	*($3) = *($11)
	*($0) = *($9)
	*($13) = *($15)
	*($2) = *($10)
	*($11) = *($12)
	*($9) = *($16)
	goto $label$1 
	
.LABEL $label$9
	$15 = ($0 + [32])
	$9 = CALL int_32 $15((int_32 $0), (int_32 *($2)))
	$8 = ($0 + [64])
	$10 = CALL int_32 $8((int_32 $15), (int_32 *($2)))
	if ( ($9 == 0) ){ goto $label$5 }
	if ( ($10 == 0) ){ goto $label$3 }
	$9 = ($0 + [24])
	*(($15 = ($16 + [24]))) = *($9)
	$11 = ($0 + [16])
	*(($10 = ($16 + [16]))) = *($11)
	$3 = ($0 + [8])
	*(($12 = ($16 + [8]))) = *($3)
	*($16) = *($0)
	$13 = ($8 + [24])
	*($9) = *($13)
	$9 = ($8 + [16])
	*($11) = *($9)
	$11 = ($8 + [8])
	*($3) = *($11)
	*($0) = *($8)
	*($13) = *($15)
	*($9) = *($10)
	*($11) = *($12)
	*($8) = *($16)
	goto $label$2 
	
.LABEL $label$8
	CALL $52($0, ($0 + [32]), ($0 + [64]), ($1 + [-32]), $2)
	goto $label$1 
	
.LABEL $label$7
	$15 = ($0 + [96])
	$9 = ($0 + [64])
	$11 = ($0 + [32])
	CALL $52($0, $11, $9, $15, $2)
	$10 = ($1 + [-32])
	if ( (CALL int_32 $10((int_32 $15), (int_32 *($2))) == 0) ){ goto $label$1 }
	$3 = ($15 + [24])
	*(($12 = ($16 + [24]))) = *($3)
	$1 = ($15 + [16])
	*(($13 = ($16 + [16]))) = *($1)
	$5 = ($15 + [8])
	*(($14 = ($16 + [8]))) = *($5)
	*($16) = *($15)
	$6 = ($10 + [24])
	*($3) = *($6)
	$7 = ($10 + [16])
	*($1) = *($7)
	$4 = ($10 + [8])
	*($5) = *($4)
	*($15) = *($10)
	*($6) = *($12)
	*($7) = *($13)
	*($4) = *($14)
	*($10) = *($16)
	if ( (CALL int_32 $15((int_32 $9), (int_32 *($2))) == 0) ){ goto $label$1 }
	$10 = ($9 + [24])
	*($12) = *($10)
	$6 = ($9 + [16])
	*($13) = *($6)
	$7 = ($9 + [8])
	*($14) = *($7)
	*($16) = *($9)
	*($10) = *($3)
	*($6) = *($1)
	*($7) = *($5)
	*($9) = *($15)
	*($3) = *($12)
	*($1) = *($13)
	*($5) = *($14)
	*($15) = *($16)
	if ( (CALL int_32 $9((int_32 $11), (int_32 *($2))) == 0) ){ goto $label$1 }
	$10 = ($11 + [24])
	*(($15 = ($16 + [24]))) = *($10)
	$3 = ($11 + [16])
	*(($12 = ($16 + [16]))) = *($3)
	$1 = ($11 + [8])
	*(($13 = ($16 + [8]))) = *($1)
	*($16) = *($11)
	$14 = ($9 + [24])
	*($10) = *($14)
	$5 = ($9 + [16])
	*($3) = *($5)
	$6 = ($9 + [8])
	*($1) = *($6)
	*($11) = *($9)
	*($14) = *($15)
	*($5) = *($12)
	*($6) = *($13)
	*($9) = *($16)
	if ( (CALL int_32 $11((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$1 }
	$2 = ($0 + [24])
	*($15) = *($2)
	$9 = ($0 + [16])
	*($12) = *($9)
	$14 = ($0 + [8])
	*($13) = *($14)
	*($16) = *($0)
	*($2) = *($10)
	*($9) = *($3)
	*($14) = *($1)
	*($0) = *($11)
	*($10) = *($15)
	*($3) = *($12)
	*($1) = *($13)
	*($11) = *($16)
	goto $label$1 
	
.LABEL $label$6
	if ( ($11 == 0) ){ goto $label$1 }
	$11 = ($15 + [24])
	*(($10 = ($16 + [24]))) = *($11)
	$3 = ($15 + [16])
	*(($12 = ($16 + [16]))) = *($3)
	$1 = ($15 + [8])
	*(($13 = ($16 + [8]))) = *($1)
	*($16) = *($15)
	$14 = ($9 + [24])
	*($11) = *($14)
	$5 = ($9 + [16])
	*($3) = *($5)
	$6 = ($9 + [8])
	*($1) = *($6)
	*($15) = *($9)
	*($14) = *($10)
	*($5) = *($12)
	*($6) = *($13)
	*($9) = *($16)
	if ( (CALL int_32 $15((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$1 }
	$2 = ($0 + [24])
	*($10) = *($2)
	$9 = ($0 + [16])
	*($12) = *($9)
	$14 = ($0 + [8])
	*($13) = *($14)
	*($16) = *($0)
	*($2) = *($11)
	*($9) = *($3)
	*($14) = *($1)
	*($0) = *($15)
	*($11) = *($10)
	*($3) = *($12)
	*($1) = *($13)
	*($15) = *($16)
	goto $label$1 
	
.LABEL $label$5
	if ( ($10 == 0) ){ goto $label$2 }
	$10 = ($15 + [24])
	*(($9 = ($16 + [24]))) = *($10)
	$12 = ($15 + [16])
	*(($11 = ($16 + [16]))) = *($12)
	$13 = ($15 + [8])
	*(($3 = ($16 + [8]))) = *($13)
	*($16) = *($15)
	$14 = ($8 + [24])
	*($10) = *($14)
	$5 = ($8 + [16])
	*($12) = *($5)
	$6 = ($8 + [8])
	*($13) = *($6)
	*($15) = *($8)
	*($14) = *($9)
	*($5) = *($11)
	*($6) = *($3)
	*($8) = *($16)
	if ( (CALL int_32 $15((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$2 }
	$14 = ($0 + [24])
	*($9) = *($14)
	$5 = ($0 + [16])
	*($11) = *($5)
	$6 = ($0 + [8])
	*($3) = *($6)
	*($16) = *($0)
	*($14) = *($10)
	*($5) = *($12)
	*($6) = *($13)
	*($0) = *($15)
	*($10) = *($9)
	*($12) = *($11)
	*($13) = *($3)
	*($15) = *($16)
	goto $label$2 
	
.LABEL $label$4
	$13 = ($0 + [24])
	*(($10 = ($16 + [24]))) = *($13)
	$1 = ($0 + [16])
	*(($11 = ($16 + [16]))) = *($1)
	$14 = ($0 + [8])
	*(($12 = ($16 + [8]))) = *($14)
	*($16) = *($0)
	$3 = ($15 + [24])
	*($13) = *($3)
	$13 = ($15 + [16])
	*($1) = *($13)
	$1 = ($15 + [8])
	*($14) = *($1)
	*($0) = *($15)
	*($3) = *($10)
	*($13) = *($11)
	*($1) = *($12)
	*($15) = *($16)
	if ( (CALL int_32 $9((int_32 $15), (int_32 *($2))) == 0) ){ goto $label$1 }
	*($10) = *($3)
	*($11) = *($13)
	*($12) = *($1)
	*($16) = *($15)
	$0 = ($9 + [24])
	*($3) = *($0)
	$2 = ($9 + [16])
	*($13) = *($2)
	$3 = ($9 + [8])
	*($1) = *($3)
	*($15) = *($9)
	*($0) = *($10)
	*($2) = *($11)
	*($3) = *($12)
	*($9) = *($16)
	goto $label$1 
	
.LABEL $label$3
	$3 = ($0 + [24])
	*(($9 = ($16 + [24]))) = *($3)
	$13 = ($0 + [16])
	*(($10 = ($16 + [16]))) = *($13)
	$14 = ($0 + [8])
	*(($11 = ($16 + [8]))) = *($14)
	*($16) = *($0)
	$12 = ($15 + [24])
	*($3) = *($12)
	$3 = ($15 + [16])
	*($13) = *($3)
	$13 = ($15 + [8])
	*($14) = *($13)
	*($0) = *($15)
	*($12) = *($9)
	*($3) = *($10)
	*($13) = *($11)
	*($15) = *($16)
	if ( (CALL int_32 $8((int_32 $15), (int_32 *($2))) == 0) ){ goto $label$2 }
	*($9) = *($12)
	*($10) = *($3)
	*($11) = *($13)
	*($16) = *($15)
	$14 = ($8 + [24])
	*($12) = *($14)
	$12 = ($8 + [16])
	*($3) = *($12)
	$3 = ($8 + [8])
	*($13) = *($3)
	*($15) = *($8)
	*($14) = *($9)
	*($12) = *($10)
	*($3) = *($11)
	*($8) = *($16)
	
.LABEL $label$2
	$15 = ($0 + [96])
	if ( ((int_32)$15 == (int_32)$1) ){ goto $label$14 }
	$13 = [0]
	$14 = [0]
	
.LOOP $label$15:
	$3 = $15
	if ( (CALL int_32 $3((int_32 $8), (int_32 *($2))) == 0) ){ goto $label$16 }
	*(($5 = ($16 + [24]))) = *(($3 + [24]))
	*(($6 = ($16 + [16]))) = *(($3 + [16]))
	*(($7 = ($16 + [8]))) = *(($3 + [8]))
	*($16) = *($3)
	$15 = $13
	
.LOOP $label$18:
	$9 = ($8 + [88])
	*((($8 = ($0 + $15)) + [120])) = *($9)
	$10 = ($8 + [80])
	*(($8 + [112])) = *($10)
	$11 = ($8 + [72])
	*(($8 + [104])) = *($11)
	$12 = ($8 + [64])
	*(($8 + [96])) = *($12)
	if ( ((int_32)$15 == (int_32)[-64]) ){ goto $label$17 }
	$15 = ($15 + [-32])
	if ( CALL int_32 $16((int_32 ($8 + [32])), (int_32 *($2))) ){ goto $label$18 }
	
.LABEL $label$17
	*($9) = *($5)
	*($10) = *($6)
	*($11) = *($7)
	*($12) = *($16)
	$14 = ($14 + [1])
	if ( ((int_32)$14 == (int_32)[8]) ){ goto $label$13 }
	
.LABEL $label$16
	$13 = ($13 + [32])
	$8 = $3
	$15 = ($3 + [32])
	if ( ((int_32)$15 != (int_32)$1) ){ goto $label$15 }
	
.LABEL $label$14
	$8 = [1]
	goto $label$12 
	
.LABEL $label$13
	$15 = ((int_32)($3 + [32]) == (int_32)$1)
	$8 = [0]
	
.LABEL $label$12
	$8 = ($15 | $8)
	
.LABEL $label$1
	*([0] + [4]) = ($16 + [32])
	$15
	return ($8 & [1])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [816])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $134([56])) + [40]) = $0
	CALL $49(($8 + [32]), $6)
	*($6 + [48]) = [-1]
	*($6 + [44]) = $1
	*($6 + [52]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6 + [32])
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $45(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $135($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [848])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [848])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [848])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [848])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [816])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $134([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [848])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-4])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [848])
	CALL memcpy(($6 + [8]), ($7 + [8]), [4])
	CALL eosio_assert(((int_32)$4 != (int_32)[12]), [848])
	CALL memcpy(($6 + [12]), ($7 + [12]), [4])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $121(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $135($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $117 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [576])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $134([32])) + [16]) = $1
	CALL $120(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $121(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $135($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $114 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [320])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [240])
	*($0 + [32]) = $1
	*($0) = *(*(*($2 + [4])))
	*(($0 + [16])) = (int_64)1397703940
	$4 = *($2)
	*($6 + [40]) = ($6 + [32])
	*($6 + [36]) = $6
	*($6 + [32]) = $6
	CALL $42(($6 + [32]), $0)
	$3 = *($0)
	*($0 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)3607749778735104000, *(*($2 + [8])), $3, $6, [32])
	if ( (uint_64)($3 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [48])
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	*($6 + [112]) = $2
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	*($6 + [96]) = *($1 + [24])
	*($6 + [104]) = *($1)
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	$5 = *($1 + [32])
	*($6 + [88]) = $5
	CALL eosio_assert([1], [496])
	*($6 + [80]) = ($6 + [40])
	*($6 + [76]) = $6
	*($6 + [72]) = $6
	CALL $47(($6 + [72]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $6, [40])
	$4 = ($0 + [36])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [52]) = $1
	*($6 + [48]) = $0
	*($6 + [60]) = $1
	*($6 + [56]) = ($6 + [96])
	*($6 + [64]) = ($6 + [88])
	*($6 + [68]) = ($6 + [112])
	*($6 + [120]) = ($6 + [48])
	CALL $48(($6 + [120]), $4, ($4 + [1]))
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [944])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [992])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1056])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $135($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $135($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $113 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [576])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $134([48])
	CALL $114($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [36])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $51(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $135($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $110 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$4 = *($1 + [56])
	*($1 + [56]) = (int_64)0
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)-1)
	*(($8 = $6) + [24]) = $4
	$4 = *($1)
	$5 = *($1 + [64])
	if ( ((int_64)$5 == (int_64)3) ){ goto $label$4 }
	if ( ((int_64)$5 == (int_64)2) ){ goto $label$3 }
	if ( ((int_64)$5 != (int_64)1) ){ goto $label$1 }
	$7 = ($1 + [24])
	goto $label$2 
	
.LABEL $label$4
	$7 = ($1 + [40])
	goto $label$2 
	
.LABEL $label$3
	$7 = ($1 + [32])
	
.LABEL $label$2
	*($7) = ((int_64)*($7) + (int_64)-1)
	
.LABEL $label$1
	*(($1 + [64])) = *(*($3))
	CALL eosio_assert([1], [496])
	$7 = $6
	$6 = ($7 + [-80])
	*([0] + [4]) = $6
	*($8 + [12]) = $6
	*($8 + [8]) = $6
	*($8 + [16]) = ($7 + [-8])
	CALL $70(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $6, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($8 + [40]) = *(($1 + [56]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$6 }
	$6 = ($1 + [80])
	$1 = *($6)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($8 + [32]), $4)
	*($6) = $1
	
.LABEL $label$7
	CALL db_idx64_update($1, $2, ($8 + [40]))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$5 = *($1 + [56])
	*($1 + [56]) = (int_64)0
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)1)
	*(($6 = $7) + [24]) = $5
	$4 = *($1)
	*($1 + [64]) = *(*($3))
	$5 = *(*($3))
	if ( ((int_64)$5 != (int_64)1) ){ goto $label$1 }
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)-1)
	$5 = *(*($3))
	
.LABEL $label$1
	if ( ((int_64)$5 != (int_64)2) ){ goto $label$2 }
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)-1)
	$5 = *(*($3))
	
.LABEL $label$2
	if ( ((int_64)$5 != (int_64)3) ){ goto $label$3 }
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)-1)
	
.LABEL $label$3
	CALL eosio_assert([1], [496])
	$7 = $7
	$3 = ($7 + [-80])
	*([0] + [4]) = $3
	*($6 + [12]) = $3
	*($6 + [8]) = $3
	*($6 + [16]) = ($7 + [-8])
	CALL $70(($6 + [8]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $3, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($6 + [40]) = *(($1 + [56]))
	if ( (CALL memcmp(($6 + [24]), ($6 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [80])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($6 + [32]), $4)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($6 + [40]))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [48])
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [10480])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [10464]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [10496]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

void .FUNC $118 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	*($1 + [28]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [496])
	*($5 + [40]) = ($5 + [32])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $42(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	*($1 + [12]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [496])
	CALL eosio_assert([1], [560])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [560])
	CALL memcpy(($5 | [8]), ($1 + [8]), [4])
	CALL eosio_assert([1], [560])
	CALL memcpy(($5 | [12]), ($1 + [12]), [4])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [816])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $134([88])) + [72]) = $0
	*($6 + [64]) = (int_64)0
	CALL $55(($8 + [32]), $6)
	*($6 + [80]) = [-1]
	*($6 + [76]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $56(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $135($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [816])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $134([56])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [320])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [240])
	*($4 + [44]) = $0
	*($4 + [24]) = [0]
	CALL $57(($8 + [32]), $4)
	*($4 + [48]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [48])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $58($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $135($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [848])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$4 = *($1 + [56])
	*($1 + [56]) = (int_64)0
	*(($8 = $6) + [24]) = $4
	$4 = *($1)
	$5 = *($1 + [48])
	if ( (int_64)($5 == 0) ){ goto $label$2 }
	*(($1 + [48])) = ((int_64)$5 + (int_64)-2)
	goto $label$1 
	
.LABEL $label$2
	*(($1 + [56])) = (int_64)2
	
.LABEL $label$1
	$5 = *($1 + [64])
	if ( ((int_64)$5 == (int_64)3) ){ goto $label$6 }
	if ( ((int_64)$5 == (int_64)2) ){ goto $label$5 }
	if ( ((int_64)$5 != (int_64)1) ){ goto $label$3 }
	$7 = ($1 + [24])
	goto $label$4 
	
.LABEL $label$6
	$7 = ($1 + [40])
	goto $label$4 
	
.LABEL $label$5
	$7 = ($1 + [32])
	
.LABEL $label$4
	*($7) = ((int_64)*($7) + (int_64)-1)
	
.LABEL $label$3
	*(($1 + [64])) = *(*($3))
	CALL eosio_assert([1], [496])
	$7 = $6
	$6 = ($7 + [-80])
	*([0] + [4]) = $6
	*($8 + [12]) = $6
	*($8 + [8]) = $6
	*($8 + [16]) = ($7 + [-8])
	CALL $70(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $6, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($8 + [40]) = *(($1 + [56]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$8 }
	$6 = ($1 + [80])
	$1 = *($6)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$9 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($8 + [32]), $4)
	*($6) = $1
	
.LABEL $label$9
	CALL db_idx64_update($1, $2, ($8 + [40]))
	
.LABEL $label$8
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$5 = *($1 + [56])
	*($1 + [56]) = (int_64)0
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)2)
	*(($6 = $7) + [24]) = $5
	$4 = *($1)
	*($1 + [64]) = *(*(*($3) + [4]) + [64])
	$5 = *(*($3 + [4]))
	if ( ((int_64)$5 != (int_64)1) ){ goto $label$1 }
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)-1)
	$5 = *(*(($3 + [4])))
	
.LABEL $label$1
	if ( ((int_64)$5 != (int_64)2) ){ goto $label$2 }
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)-1)
	$5 = *(*(($3 + [4])))
	
.LABEL $label$2
	if ( ((int_64)$5 != (int_64)3) ){ goto $label$3 }
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)-1)
	
.LABEL $label$3
	CALL eosio_assert([1], [496])
	$7 = $7
	$3 = ($7 + [-80])
	*([0] + [4]) = $3
	*($6 + [12]) = $3
	*($6 + [8]) = $3
	*($6 + [16]) = ($7 + [-8])
	CALL $70(($6 + [8]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $3, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($6 + [40]) = *(($1 + [56]))
	if ( (CALL memcmp(($6 + [24]), ($6 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [80])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($6 + [32]), $4)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($6 + [40]))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	*($6 + [88]) = $2
	*($6 + [80]) = $3
	CALL require_auth($2)
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)1397703940), [1568])
	$4 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$3 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [1264])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($1) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [1296])
	*(($6 + [72])) = [0]
	*($6 + [56]) = (int_64)-1
	*($6 + [64]) = (int_64)0
	$3 = *($0)
	*($6 + [40]) = $3
	*($6 + [48]) = $2
	$5 = CALL db_find_i64($3, $2, (int_64)3607749778735104000, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $32(($6 + [40]), $5)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($6 + [40])), [32])
	goto $label$6 
	
.LABEL $label$7
	$3 = *($6 + [88])
	*($6 + [32]) = ($6 + [88])
	CALL $78(($6 + [8]), ($6 + [40]), $3, ($6 + [32]))
	$5 = *($6 + [12])
	
.LABEL $label$6
	CALL eosio_assert(((uint_32)*($5 + [28]) > (uint_32)*($5 + [24])), [1504])
	*($6 + [8]) = $1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [160])
	CALL $79(($6 + [40]), $5, (int_64)0, ($6 + [8]))
	$5 = ($0 + [16])
	$4 = CALL db_lowerbound_i64(*($0 + [16]), *(($0 + [24])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	*($6 + [36]) = CALL $80($5, $4)
	*($6 + [32]) = $5
	$3 = *($6 + [32])
	goto $label$8 
	
.LABEL $label$9
	*($6 + [36]) = [0]
	*($6 + [32]) = $5
	CALL $81(($6 + [8]), $5, *($0), ($6 + [24]))
	$3 = *($6 + [8])
	*($6 + [32]) = $3
	
.LABEL $label$8
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$4) != (int_32)[0]), [160])
	CALL $82($5, $4, (int_64)0, ($6 + [8]))
	$3 = *($6 + [88])
	*($6 + [12]) = $1
	*($6 + [8]) = ($6 + [32])
	*($6 + [16]) = ($6 + [80])
	*($6 + [20]) = ($6 + [88])
	CALL $83(($6 + [24]), ($0 + [136]), $3, ($6 + [8]))
	$0 = *($6 + [64])
	if ( ($0 == 0) ){ goto $label$10 }
	$4 = ($6 + [68])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$1 = *($5)
	*($5) = [0]
	if ( ($1 == 0) ){ goto $label$14 }
	CALL $135($1)
	
.LABEL $label$14
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$13 }
	$5 = *(($6 + [64]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $0
	
.LABEL $label$11
	*($4) = $0
	CALL $135($5)
	
.LABEL $label$10
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [80])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [24])) = (int_64)1398362884
	*($9 + [16]) = (int_64)0
	*($9 + [8]) = (int_64)0
	CALL eosio_assert([1], [320])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [240])
	*($9 + [32]) = (int_64)0
	*($9 + [68]) = $5
	*($9 + [64]) = $5
	*($9 + [72]) = ($5 + $3)
	*($9 + [40]) = ($9 + [64])
	*($9 + [48]) = ($9 + [8])
	CALL $88(($9 + [48]), ($9 + [40]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($1 = (($9 + [48]) + [8]))) = *(($9 + [24]))
	$6 = *($9 + [8])
	*($9 + [48]) = *($9 + [16])
	$4 = *(($9 + [32]))
	*((($9 + [64]) + [8])) = *($1)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	CALL void $1((int_32 $6), (int_64 ($9 + [64])), (int_32 $4), (int_64 $8))
	*([0] + [4]) = ($9 + [80])
	return [1]
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	*($10 + [104]) = $1
	CALL require_auth(*($2))
	$7 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [1264])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [1296])
	CALL eosio_assert((int_64)(((int_64)*($3) % (int_64)20000) == 0), [1328])
	CALL eosio_assert(((int_64)*($3) > (int_64)19999), [1328])
	CALL eosio_assert(((int_64)*($3) < (int_64)110000), [1328])
	$4 = *(($0 + [160]))
	$6 = *(($0 + [164]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$6 }
	$9 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$6 }
	$6 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = ($0 + [136])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$9 }
	$7 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)$5), [32])
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	$9 = CALL db_find_i64(*(($0 + [136])), *(($0 + [144])), (int_64)7614284258291875840, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$8 }
	$7 = CALL $28($5, $9)
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)$5), [32])
	
.LABEL $label$8
	CALL eosio_assert(((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000)) <= *($7 + [24])), [1120])
	*($10 + [80]) = (int_64)-1
	*($10 + [88]) = [0]
	$1 = *($0)
	*($10 + [64]) = $1
	$8 = *($2)
	*($10 + [72]) = $8
	*((($10 + [64]) + [28])) = [0]
	*((($10 + [64]) + [32])) = [0]
	$6 = [0]
	$9 = CALL db_find_i64($1, $8, (int_64)3607749778735104000, $8)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$10 }
	$6 = CALL $32(($10 + [64]), $9)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($10 + [64])), [32])
	
.LABEL $label$10
	CALL eosio_assert(((int_64)*($6 + [8]) >= (int_64)*($3)), [1360])
	*($10 + [40]) = (int_64)-1
	*($10 + [48]) = [0]
	$8 = *($0)
	*($10 + [24]) = $8
	$1 = *($7 + [32])
	*($10 + [32]) = $1
	*((($10 + [24]) + [28])) = [0]
	*((($10 + [24]) + [32])) = [0]
	*($10 + [60]) = [0]
	$9 = CALL db_lowerbound_i64($8, $1, (int_64)7614284302722138112, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$12 }
	$9 = CALL $29(($10 + [24]), $9)
	
.LOOP $label$13:
	if ( ((int_64)*($9 + [8]) != (int_64)*($10 + [104])) ){ goto $label$14 }
	if ( ((int_64)*($9 + [16]) == (int_64)*($2)) ){ goto $label$11 }
	
.LABEL $label$14
	CALL eosio_assert([1], [208])
	$9 = CALL db_next_i64(*($9 + [76]), ($10 + [8]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$12 }
	$9 = CALL $29(($10 + [24]), $9)
	goto $label$13 
	
.LABEL $label$12
	*($10 + [8]) = $3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [160])
	CALL $72($5, $7, (int_64)0, ($10 + [8]))
	$8 = *($0)
	*($10 + [16]) = $2
	*($10 + [20]) = $3
	*($10 + [12]) = ($10 + [104])
	*($10 + [8]) = ($10 + [24])
	CALL $73($10, ($10 + [24]), $8, ($10 + [8]))
	*($10 + [8]) = $3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [160])
	CALL $74(($10 + [64]), $6, (int_64)0, ($10 + [8]))
	
.LABEL $label$11
	$6 = *($10 + [48])
	if ( ($6 == 0) ){ goto $label$15 }
	$2 = ($10 + [52])
	$9 = *($2)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$17 }
	
.LOOP $label$18:
	$9 = ($9 + [-24])
	$7 = *($9)
	*($9) = [0]
	if ( ($7 == 0) ){ goto $label$19 }
	CALL $135($7)
	
.LABEL $label$19
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$18 }
	$9 = *(($10 + [48]))
	goto $label$16 
	
.LABEL $label$17
	$9 = $6
	
.LABEL $label$16
	*($2) = $6
	CALL $135($9)
	
.LABEL $label$15
	$6 = *($10 + [88])
	if ( ($6 == 0) ){ goto $label$20 }
	$2 = ($10 + [92])
	$9 = *($2)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$22 }
	
.LOOP $label$23:
	$9 = ($9 + [-24])
	$7 = *($9)
	*($9) = [0]
	if ( ($7 == 0) ){ goto $label$24 }
	CALL $135($7)
	
.LABEL $label$24
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$23 }
	$9 = *(($10 + [88]))
	goto $label$21 
	
.LABEL $label$22
	$9 = $6
	
.LABEL $label$21
	*($2) = $6
	CALL $135($9)
	
.LABEL $label$20
	*([0] + [4]) = ($10 + [112])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [80])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*($9 + [16]) = (int_64)1398362884
	*($9 + [8]) = (int_64)0
	CALL eosio_assert([1], [320])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [240])
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	*($9 + [68]) = $5
	*($9 + [64]) = $5
	*($9 + [72]) = ($5 + $3)
	*($9 + [40]) = ($9 + [64])
	*($9 + [48]) = ($9 + [8])
	CALL $77(($9 + [48]), ($9 + [40]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($1 = (($9 + [48]) + [8]))) = *((($9 + [8]) + [8]))
	*($9 + [48]) = *($9 + [8])
	$6 = *(($9 + [32]))
	$4 = *(($9 + [24]))
	*((($9 + [64]) + [8])) = *($1)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	CALL void $1((int_32 ($9 + [64])), (int_32 $4), (int_64 $6), (int_64 $8))
	*([0] + [4]) = ($9 + [80])
	return [1]
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [64])
	*([0] + [4]) = $12
	*($12 + [48]) = $1
	CALL require_auth($3)
	$4 = *(($0 + [160]))
	$6 = *(($0 + [164]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$1 }
	$10 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$1 }
	$6 = $10
	$7 = ($10 + [-24])
	$10 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [136])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	$10 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)$7), [32])
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	$6 = CALL db_find_i64(*(($0 + [136])), *(($0 + [144])), (int_64)7614284258291875840, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $28($7, $6)
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)$7), [32])
	
.LABEL $label$3
	CALL eosio_assert(((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000)) <= *($10 + [24])), [1120])
	*($12 + [24]) = (int_64)-1
	$4 = [0]
	*($12 + [32]) = [0]
	$8 = *($0)
	*($12 + [8]) = $8
	$9 = *($10 + [32])
	*($12 + [16]) = $9
	*(($12 + [36])) = [0]
	*(($12 + [40])) = [0]
	*($12 + [44]) = [0]
	$11 = (int_64)0
	$1 = (int_64)0
	$10 = CALL db_lowerbound_i64($8, $9, (int_64)7614284302722138112, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$5 }
	$10 = CALL $29(($12 + [8]), $10)
	
.LOOP $label$7:
	if ( ((int_64)*($10 + [8]) != (int_64)$2) ){ goto $label$8 }
	if ( ((int_64)*($10 + [16]) == (int_64)$3) ){ goto $label$6 }
	
.LABEL $label$8
	CALL eosio_assert([1], [208])
	$10 = CALL db_next_i64(*($10 + [76]), ($12 + [56]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$9 }
	$10 = CALL $29(($12 + [8]), $10)
	goto $label$7 
	
.LABEL $label$9
	$1 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$1 = *($10)
	$8 = *($12 + [48])
	if ( ((int_64)$8 != (int_64)1) ){ goto $label$10 }
	CALL eosio_assert(((int_64)*($10 + [24]) != (int_64)0), [1136])
	$8 = *($12 + [48])
	
.LABEL $label$10
	if ( ((int_64)$8 != (int_64)2) ){ goto $label$11 }
	CALL eosio_assert(((int_64)*($10 + [32]) != (int_64)0), [1168])
	$8 = *($12 + [48])
	
.LABEL $label$11
	if ( ((int_64)$8 != (int_64)3) ){ goto $label$12 }
	CALL eosio_assert(((int_64)*($10 + [40]) != (int_64)0), [1200])
	
.LABEL $label$12
	CALL eosio_assert(((int_64)*($10 + [56]) != (int_64)2), [1232])
	
.LABEL $label$5
	$10 = CALL db_lowerbound_i64(*($12 + [8]), *(($12 + [16])), (int_64)7614284302722138112, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$13 }
	$10 = CALL $29(($12 + [8]), $10)
	
.LOOP $label$15:
	if ( ((int_64)*($10 + [56]) != (int_64)1) ){ goto $label$16 }
	if ( ((int_64)*($10 + [8]) != (int_64)$2) ){ goto $label$16 }
	if ( ((int_64)*($10 + [16]) != (int_64)$3) ){ goto $label$14 }
	
.LABEL $label$16
	CALL eosio_assert([1], [208])
	$10 = CALL db_next_i64(*($10 + [76]), ($12 + [56]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$17 }
	$10 = CALL $29(($12 + [8]), $10)
	goto $label$15 
	
.LABEL $label$17
	$4 = [0]
	goto $label$13 
	
.LABEL $label$14
	$11 = *($10)
	$4 = [1]
	
.LABEL $label$13
	$0 = *(($12 + [32]))
	$6 = *(($12 + [36]))
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$18 }
	$10 = ($6 + [-24])
	$5 = ([0] - $0)
	
.LOOP $label$19:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$18 }
	$6 = $10
	$7 = ($10 + [-24])
	$10 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$19 }
	
.LABEL $label$18
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$26 }
	$0 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [72]) == (int_32)($12 + [8])), [32])
	if ( $4 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$0 = [0]
	$10 = CALL db_find_i64(*($12 + [8]), *(($12 + [16])), (int_64)7614284302722138112, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$27 }
	$0 = CALL $29(($12 + [8]), $10)
	CALL eosio_assert(((int_32)*($0 + [72]) == (int_32)($12 + [8])), [32])
	
.LABEL $label$27
	if ( ($4 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$4 = *(($12 + [32]))
	$6 = *(($12 + [36]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$28 }
	$10 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$29:
	if ( ((int_64)*(*($10)) == (int_64)$11) ){ goto $label$28 }
	$6 = $10
	$7 = ($10 + [-24])
	$10 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$29 }
	
.LABEL $label$28
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$23 }
	$10 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)($12 + [8])), [32])
	goto $label$22 
	
.LABEL $label$24
	*($12 + [56]) = ($12 + [48])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [160])
	CALL $63(($12 + [8]), $0, (int_64)0, ($12 + [56]))
	$6 = *($12 + [32])
	if ( $6 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$10 = CALL $29(($12 + [8]), CALL $fimport$5(*($12 + [8]), *(($12 + [16])), (int_64)7614284302722138112, $11))
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)($12 + [8])), [32])
	
.LABEL $label$22
	*($12 + [56]) = ($12 + [8])
	$2 = *($12 + [48])
	*($12 + [60]) = $10
	$3 = *($10 + [64])
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)-1) <= (int_64)3), [1248])
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)-1) <= (int_64)3), [1248])
	if ( ((int_64)$2 != (int_64)$3) ){ goto $label$30 }
	$10 = *($12 + [60])
	*($12) = ($12 + [48])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [160])
	CALL $68(($12 + [8]), $10, (int_64)0, $12)
	*($12) = ($12 + [48])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [160])
	CALL $69(($12 + [8]), $0, (int_64)0, $12)
	$6 = *($12 + [32])
	if ( $6 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$30
	if ( ((int_64)$2 != (int_64)1) ){ goto $label$33 }
	if ( ((int_64)$3 == (int_64)2) ){ goto $label$32 }
	
.LABEL $label$33
	if ( ((int_64)$2 != (int_64)2) ){ goto $label$34 }
	if ( ((int_64)$3 == (int_64)3) ){ goto $label$32 }
	
.LABEL $label$34
	if ( ((int_64)$2 != (int_64)3) ){ goto $label$31 }
	if ( ((int_64)$3 != (int_64)1) ){ goto $label$31 }
	
.LABEL $label$32
	*($12 + [4]) = ($12 + [56])
	*($12) = ($12 + [48])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [160])
	CALL $66(($12 + [8]), $0, (int_64)0, $12)
	$10 = *($12 + [60])
	*($12) = ($12 + [48])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [160])
	CALL $67(($12 + [8]), $10, (int_64)0, $12)
	$6 = *($12 + [32])
	if ( ($6 == 0) ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$31
	*($12 + [4]) = ($12 + [48])
	*($12) = ($12 + [56])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [160])
	CALL $64(($12 + [8]), $0, (int_64)0, $12)
	$10 = *($12 + [60])
	*($12) = ($12 + [48])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [160])
	CALL $65(($12 + [8]), $10, (int_64)0, $12)
	$6 = *($12 + [32])
	if ( ($6 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$5 = ($12 + [36])
	$10 = *($5)
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$36 }
	
.LOOP $label$37:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$38 }
	CALL $135($7)
	
.LABEL $label$38
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$37 }
	$10 = *(($12 + [32]))
	goto $label$35 
	
.LABEL $label$36
	$10 = $6
	
.LABEL $label$35
	*($5) = $6
	CALL $135($10)
	
.LABEL $label$20
	*([0] + [4]) = ($12 + [64])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [80])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*((($9 + [8]) + [24])) = (int_64)1398362884
	*($9 + [16]) = (int_64)0
	*($9 + [8]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [320])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [240])
	*($9 + [60]) = $5
	*($9 + [56]) = $5
	*($9 + [64]) = ($5 + $3)
	*($9 + [72]) = ($9 + [56])
	*($9 + [40]) = ($9 + [8])
	CALL $71(($9 + [40]), ($9 + [72]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	$6 = *((($9 + [8]) + [8]))
	*(($9 + [52])) = *(($9 + [36]))
	*(($1 = (($9 + [40]) + [8]))) = *(($9 + [32]))
	$4 = *($9 + [8])
	*($9 + [40]) = *($9 + [24])
	*($9 + [44]) = *(($9 + [28]))
	*((($9 + [56]) + [8])) = *($1)
	*($9 + [56]) = *($9 + [40])
	*($9 + [72]) = $6
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	CALL void $1((int_32 $4), (int_64 ($9 + [72])), (int_32 ($9 + [56])), (int_32 $8))
	*([0] + [4]) = ($9 + [80])
	return [1]
}

void .FUNC $27 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	float_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	float_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	$25 = (*([0] + [4]) - [256])
	*([0] + [4]) = $25
	*($25 + [248]) = $1
	*($25 + [240]) = [0]
	*($25 + [232]) = (int_64)0
	$22 = *(($0 + [160]))
	$23 = *(($0 + [164]))
	if ( ((int_32)$23 == (int_32)$22) ){ goto $label$1 }
	$24 = ($23 + [-24])
	$7 = ([0] - $22)
	
.LOOP $label$2:
	if ( ((int_64)*(*($24)) == (int_64)$1) ){ goto $label$1 }
	$23 = $24
	$8 = ($24 + [-24])
	$24 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [136])
	if ( ((int_32)$23 == (int_32)$22) ){ goto $label$4 }
	$24 = *(($23 + [-24]))
	CALL eosio_assert(((int_32)*($24 + [44]) == (int_32)$2), [32])
	*($25 + [228]) = $24
	*($25 + [224]) = $2
	$17 = (($25 + [224]) | [4])
	goto $label$3 
	
.LABEL $label$4
	$24 = CALL db_find_i64(*(($0 + [136])), *(($0 + [144])), (int_64)7614284258291875840, $1)
	if ( ((int_32)$24 <= (int_32)[-1]) ){ goto $label$5 }
	$24 = CALL $28($2, $24)
	CALL eosio_assert(((int_32)*($24 + [44]) == (int_32)$2), [32])
	*($25 + [228]) = $24
	*($25 + [224]) = $2
	$17 = (($25 + [224]) | [4])
	goto $label$3 
	
.LABEL $label$5
	$24 = [0]
	*($25 + [228]) = [0]
	*($25 + [224]) = $2
	$17 = (($25 + [224]) | [4])
	
.LABEL $label$3
	CALL require_auth(*($24 + [32]))
	CALL eosio_assert(((int_32)*($24 + [40]) == (int_32)[1]), [96])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000)) > (uint_32)*($24 + [24])), [128])
	*($25 + [200]) = (int_64)-1
	*($25 + [208]) = [0]
	$1 = *($0)
	*($25 + [184]) = $1
	$16 = *($24 + [32])
	*($25 + [192]) = $16
	*((($25 + [184]) + [28])) = [0]
	*((($25 + [184]) + [32])) = [0]
	*($25 + [220]) = [0]
	$24 = CALL db_lowerbound_i64($1, $16, (int_64)7614284302722138112, (int_64)0)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$6 }
	$7 = ($0 + [176])
	$24 = CALL $29(($25 + [184]), $24)
	$9 = ($0 + [200])
	$10 = ($0 + [204])
	$18 = ($0 + [184])
	$14 = (($25 + [144]) + [24])
	$5 = (($25 + [144]) + [16])
	$13 = ($25 + [116])
	
.LOOP $label$7:
	if ( ((int_64)*($24 + [8]) != (int_64)*($25 + [248])) ){ goto $label$8 }
	if ( ((int_64)*($24 + [40]) != (int_64)0) ){ goto $label$8 }
	if ( ((int_64)*($24 + [32]) != (int_64)0) ){ goto $label$8 }
	if ( ((int_64)*($24 + [24]) != (int_64)0) ){ goto $label$8 }
	if ( (uint_64)(*($24 + [48]) <= (int_64)3) ){ goto $label$8 }
	$11 = *($9)
	$22 = *($10)
	if ( ((int_32)$22 == (int_32)$11) ){ goto $label$9 }
	$8 = ($22 + [-24])
	$15 = ([0] - $11)
	
.LOOP $label$10:
	if ( (int_64)(*(*($8) + [32]) == 0) ){ goto $label$9 }
	$22 = $8
	$23 = ($8 + [-24])
	$8 = $23
	if ( ((int_32)($23 + $15) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$22 == (int_32)$11) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(*(($22 + [-24])) + [40]) == (int_32)$7), [32])
	goto $label$11 
	
.LABEL $label$12
	$8 = CALL db_find_i64(*($7), *($18), (int_64)-4157538979756376064, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*(CALL $34($7, $8) + [40]) == (int_32)$7), [32])
	
.LABEL $label$11
	$8 = CALL db_lowerbound_i64(*($7), *($18), (int_64)-4157538979756376064, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$16 }
	$8 = CALL $34($7, $8)
	
.LOOP $label$17:
	if ( ((int_64)*($8) != (int_64)*(($24 + [48]))) ){ goto $label$18 }
	if ( ((int_64)*($8 + [24]) == (int_64)*($25 + [248])) ){ goto $label$15 }
	
.LABEL $label$18
	CALL eosio_assert([1], [208])
	$8 = CALL db_next_i64(*($8 + [44]), ($25 + [144]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$16 }
	$8 = CALL $34($7, $8)
	goto $label$17 
	
.LABEL $label$16
	*($14) = (int_64)1398362884
	*($5) = (int_64)0
	CALL eosio_assert([1], [320])
	$1 = (uint_64)*($14) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	
.LOOP $label$21:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$21 }
	
.LABEL $label$20
	$23 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$19 }
	goto $label$13 
	
.LABEL $label$15
	$1 = *($8 + [32])
	$11 = *($9)
	$22 = *($10)
	if ( ((int_32)$22 == (int_32)$11) ){ goto $label$22 }
	$8 = ($22 + [-24])
	$15 = ([0] - $11)
	
.LOOP $label$23:
	if ( ((int_64)*(*($8) + [32]) == (int_64)$1) ){ goto $label$22 }
	$22 = $8
	$23 = ($8 + [-24])
	$8 = $23
	if ( ((int_32)($23 + $15) != (int_32)[-24]) ){ goto $label$23 }
	
.LABEL $label$22
	if ( ((int_32)$22 == (int_32)$11) ){ goto $label$25 }
	$8 = *(($22 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$7), [32])
	goto $label$24 
	
.LABEL $label$25
	$8 = [0]
	$23 = CALL db_find_i64(*($7), *($18), (int_64)-4157538979756376064, $1)
	if ( ((int_32)$23 < (int_32)[0]) ){ goto $label$24 }
	$8 = CALL $34($7, $23)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$7), [32])
	
.LABEL $label$24
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [160])
	CALL $35($7, $8, (int_64)0, ($25 + [144]))
	goto $label$8 
	
.LABEL $label$14
	$23 = [0]
	
.LABEL $label$13
	CALL eosio_assert($23, [240])
	*($25 + [144]) = *(($24 + [48]))
	$1 = *($0)
	*((($25 + [104]) + [8])) = $24
	*($25 + [104]) = $0
	*($13) = ($25 + [248])
	*($25 + [108]) = ($25 + [144])
	CALL $36(($25 + [64]), $7, $1, ($25 + [104]))
	$8 = *($25 + [236])
	if ( ((int_32)$8 == (int_32)*((($25 + [232]) + [8]))) ){ goto $label$26 }
	*($8) = *($25 + [144])
	*(($8 + [24])) = *($14)
	*(($8 + [16])) = *($5)
	*(($8 + [8])) = *((($25 + [144]) + [8]))
	*($25 + [236]) = ($8 + [32])
	goto $label$8 
	
.LABEL $label$26
	CALL $37(($25 + [232]), ($25 + [144]))
	
.LABEL $label$8
	CALL eosio_assert([1], [208])
	$24 = CALL db_next_i64(*($24 + [76]), ($25 + [144]))
	if ( ((int_32)$24 <= (int_32)[-1]) ){ goto $label$6 }
	$24 = CALL $29(($25 + [184]), $24)
	goto $label$7 
	
.LABEL $label$6
	$24 = *($25 + [236])
	$8 = *($25 + [232])
	*($25 + [144]) = [13]
	CALL $31($8, $24, ($25 + [144]))
	$24 = *($17)
	$16 = *($24 + [8])
	*($25 + [160]) = (int_64)-1
	*($25 + [168]) = [0]
	$20 = *($0)
	*($25 + [144]) = $20
	$1 = *($24 + [32])
	*($25 + [152]) = $1
	*((($25 + [144]) + [28])) = [0]
	*((($25 + [144]) + [32])) = [0]
	$3 = ((int_64)((int_64)$16 * (int_64)195) / (int_64)200)
	$24 = CALL db_find_i64($20, $1, (int_64)3607749778735104000, $1)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$27 }
	$24 = CALL $32(($25 + [144]), $24)
	CALL eosio_assert(((int_32)*($24 + [32]) == (int_32)($25 + [144])), [32])
	*($25 + [104]) = ($25 + [224])
	CALL eosio_assert([1], [160])
	CALL $33(($25 + [144]), $24, (int_64)0, ($25 + [104]))
	
.LABEL $label$27
	$4 = *($0)
	$1 = (int_64)0
	$16 = (int_64)59
	$24 = [272]
	$19 = (int_64)0
	
.LOOP $label$28:
	$20 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$29 }
	$8 = *($24)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$8 = ($8 + [165])
	goto $label$30 
	
.LABEL $label$31
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$29
	$24 = ($24 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$28 }
	*(($25 + [136])) = [0]
	*($25 + [112]) = $19
	*($25 + [104]) = $4
	*($25 + [120]) = (int_64)-1
	$1 = (int_64)0
	*($25 + [128]) = (int_64)0
	$16 = (int_64)59
	$24 = [272]
	$21 = (int_64)0
	
.LOOP $label$32:
	$20 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$33 }
	$8 = *($24)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$8 = ($8 + [165])
	goto $label$34 
	
.LABEL $label$35
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$33
	$24 = ($24 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$21 = ((int_64)$20 | (int_64)$21)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$32 }
	$24 = [0]
	$8 = CALL db_find_i64($4, $19, (int_64)3607749778735104000, $21)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$36 }
	$24 = CALL $32(($25 + [104]), $8)
	CALL eosio_assert(((int_32)*($24 + [32]) == (int_32)($25 + [104])), [32])
	
.LABEL $label$36
	*($25 + [64]) = ($25 + [224])
	CALL eosio_assert(((int_32)$24 != (int_32)[0]), [160])
	$1 = (int_64)0
	CALL $38(($25 + [104]), $24, (int_64)0, ($25 + [64]))
	$4 = *($0)
	$16 = (int_64)59
	$24 = [288]
	$19 = (int_64)0
	
.LOOP $label$37:
	$20 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$38 }
	$8 = *($24)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$8 = ($8 + [165])
	goto $label$39 
	
.LABEL $label$40
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$38
	$24 = ($24 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$37 }
	*(($25 + [96])) = [0]
	*($25 + [72]) = $19
	*($25 + [64]) = $4
	*($25 + [80]) = (int_64)-1
	$1 = (int_64)0
	*($25 + [88]) = (int_64)0
	$16 = (int_64)59
	$24 = [288]
	$21 = (int_64)0
	
.LOOP $label$41:
	$20 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$42 }
	$8 = *($24)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$8 = ($8 + [165])
	goto $label$43 
	
.LABEL $label$44
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$42
	$24 = ($24 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$21 = ((int_64)$20 | (int_64)$21)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$41 }
	$24 = CALL db_find_i64($4, $19, (int_64)3607749778735104000, $21)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$45 }
	$24 = CALL $32(($25 + [64]), $24)
	CALL eosio_assert(((int_32)*($24 + [32]) == (int_32)($25 + [64])), [32])
	*($25 + [16]) = ($25 + [224])
	CALL eosio_assert([1], [160])
	CALL $39(($25 + [64]), $24, (int_64)0, ($25 + [16]))
	
.LABEL $label$45
	*($25 + [60]) = [0]
	$8 = *($25 + [232])
	if ( ((int_32)*($25 + [236]) == (int_32)$8) ){ goto $label$46 }
	$5 = ($0 + [176])
	$6 = (CASTING float_64)(uint_64 $3)
	$9 = ($0 + [200])
	$10 = ($0 + [204])
	$11 = ($0 + [184])
	$13 = (($25 + [184]) + [8])
	$14 = ($25 + [32])
	$15 = ($25 + [40])
	$17 = ($25 + [44])
	$18 = ($25 + [48])
	$24 = [0]
	
.LOOP $label$47:
	$1 = *(($8 + ($24 << [5])) + [8])
	$22 = *($9)
	$23 = *($10)
	if ( ((int_32)$23 == (int_32)$22) ){ goto $label$48 }
	$24 = ($23 + [-24])
	$7 = ([0] - $22)
	
.LOOP $label$49:
	if ( ((int_64)*(*($24) + [32]) == (int_64)$1) ){ goto $label$48 }
	$23 = $24
	$8 = ($24 + [-24])
	$24 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$49 }
	
.LABEL $label$48
	if ( ((int_32)$23 == (int_32)$22) ){ goto $label$51 }
	$22 = *(($23 + [-24]))
	CALL eosio_assert(((int_32)*($22 + [40]) == (int_32)$5), [32])
	goto $label$50 
	
.LABEL $label$51
	$22 = [0]
	$24 = CALL db_find_i64(*($5), *($11), (int_64)-4157538979756376064, $1)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$50 }
	$22 = CALL $34($5, $24)
	CALL eosio_assert(((int_32)*($22 + [40]) == (int_32)$5), [32])
	
.LABEL $label$50
	$12 = CALL pow((float_64)2, (CASTING float_64)(int_32 (*($25 + [60]) + [1])))
	*((*($25 + [232]) + (*($25 + [60]) << [5])) + [16]) = (Rounds 0)(((float_64)((float_64)$6 / (float_64)$12) / (float_64)(CASTING float_64)(uint_64 *($22 + [8]))))
	$24 = CALL db_lowerbound_i64(*($25 + [184]), *($13), (int_64)7614284302722138112, (int_64)0)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$52 }
	$23 = CALL $29(($25 + [184]), $24)
	
.LOOP $label$53:
	if ( ((int_64)*($23 + [8]) != (int_64)*($25 + [248])) ){ goto $label$54 }
	if ( ((int_64)*($23 + [48]) != (int_64)*($22)) ){ goto $label$54 }
	$1 = *($23 + [16])
	*((($25 + [16]) + [8])) = $1
	*($14) = (int_64)-1
	$24 = [0]
	*($15) = [0]
	$16 = *($0)
	*($25 + [16]) = $16
	*($17) = [0]
	*($18) = [0]
	$8 = CALL db_find_i64($16, $1, (int_64)3607749778735104000, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$55 }
	$24 = CALL $32(($25 + [16]), $8)
	CALL eosio_assert(((int_32)*($24 + [32]) == (int_32)($25 + [16])), [32])
	
.LABEL $label$55
	$8 = ((int_32)$24 != (int_32)[0])
	CALL eosio_assert($8, [304])
	*($25 + [12]) = ($25 + [60])
	*($25 + [8]) = ($25 + [232])
	CALL eosio_assert($8, [160])
	CALL $41(($25 + [16]), $24, (int_64)0, ($25 + [8]))
	$7 = *($15)
	if ( ($7 == 0) ){ goto $label$54 }
	$24 = *($17)
	if ( ((int_32)$24 != (int_32)$7) ){ goto $label$57 }
	$24 = $7
	goto $label$56 
	
.LABEL $label$57
	
.LOOP $label$58:
	$24 = ($24 + [-24])
	$8 = *($24)
	*($24) = [0]
	if ( ($8 == 0) ){ goto $label$59 }
	CALL $135($8)
	
.LABEL $label$59
	if ( ((int_32)$7 != (int_32)$24) ){ goto $label$58 }
	$24 = *($15)
	
.LABEL $label$56
	*($17) = $7
	CALL $135($24)
	
.LABEL $label$54
	CALL eosio_assert([1], [208])
	$24 = CALL db_next_i64(*($23 + [76]), ($25 + [16]))
	if ( ((int_32)$24 <= (int_32)[-1]) ){ goto $label$52 }
	$23 = CALL $29(($25 + [184]), $24)
	goto $label$53 
	
.LABEL $label$52
	$24 = (*($25 + [60]) + [1])
	*($25 + [60]) = $24
	$8 = *($25 + [232])
	if ( ($24 <= int_32((*($25 + [236]) - $8) >> [5])) ){ goto $label$47 }
	
.LABEL $label$46
	$24 = *($25 + [228])
	CALL eosio_assert(((int_32)$24 != (int_32)[0]), [160])
	CALL $40($2, $24, (int_64)0, ($25 + [16]))
	$23 = *($25 + [88])
	if ( ($23 == 0) ){ goto $label$60 }
	$7 = ($25 + [92])
	$24 = *($7)
	if ( ((int_32)$24 == (int_32)$23) ){ goto $label$62 }
	
.LOOP $label$63:
	$24 = ($24 + [-24])
	$8 = *($24)
	*($24) = [0]
	if ( ($8 == 0) ){ goto $label$64 }
	CALL $135($8)
	
.LABEL $label$64
	if ( ((int_32)$23 != (int_32)$24) ){ goto $label$63 }
	$24 = *(($25 + [88]))
	goto $label$61 
	
.LABEL $label$62
	$24 = $23
	
.LABEL $label$61
	*($7) = $23
	CALL $135($24)
	
.LABEL $label$60
	$23 = *($25 + [128])
	if ( ($23 == 0) ){ goto $label$65 }
	$7 = ($25 + [132])
	$24 = *($7)
	if ( ((int_32)$24 == (int_32)$23) ){ goto $label$67 }
	
.LOOP $label$68:
	$24 = ($24 + [-24])
	$8 = *($24)
	*($24) = [0]
	if ( ($8 == 0) ){ goto $label$69 }
	CALL $135($8)
	
.LABEL $label$69
	if ( ((int_32)$23 != (int_32)$24) ){ goto $label$68 }
	$24 = *(($25 + [128]))
	goto $label$66 
	
.LABEL $label$67
	$24 = $23
	
.LABEL $label$66
	*($7) = $23
	CALL $135($24)
	
.LABEL $label$65
	$23 = *($25 + [168])
	if ( ($23 == 0) ){ goto $label$70 }
	$7 = ($25 + [172])
	$24 = *($7)
	if ( ((int_32)$24 == (int_32)$23) ){ goto $label$72 }
	
.LOOP $label$73:
	$24 = ($24 + [-24])
	$8 = *($24)
	*($24) = [0]
	if ( ($8 == 0) ){ goto $label$74 }
	CALL $135($8)
	
.LABEL $label$74
	if ( ((int_32)$23 != (int_32)$24) ){ goto $label$73 }
	$24 = *(($25 + [168]))
	goto $label$71 
	
.LABEL $label$72
	$24 = $23
	
.LABEL $label$71
	*($7) = $23
	CALL $135($24)
	
.LABEL $label$70
	$23 = *($25 + [208])
	if ( ($23 == 0) ){ goto $label$75 }
	$7 = ($25 + [212])
	$24 = *($7)
	if ( ((int_32)$24 == (int_32)$23) ){ goto $label$77 }
	
.LOOP $label$78:
	$24 = ($24 + [-24])
	$8 = *($24)
	*($24) = [0]
	if ( ($8 == 0) ){ goto $label$79 }
	CALL $135($8)
	
.LABEL $label$79
	if ( ((int_32)$23 != (int_32)$24) ){ goto $label$78 }
	$24 = *(($25 + [208]))
	goto $label$76 
	
.LABEL $label$77
	$24 = $23
	
.LABEL $label$76
	*($7) = $23
	CALL $135($24)
	
.LABEL $label$75
	$24 = *($25 + [232])
	if ( ($24 == 0) ){ goto $label$80 }
	*($25 + [236]) = $24
	CALL $135($24)
	
.LABEL $label$80
	*([0] + [4]) = ($25 + [256])
}

void .FUNC $26 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [64])
	*([0] + [4]) = $19
	$4 = (int_64)0
	$12 = (int_64)59
	$17 = [272]
	$13 = (int_64)0
	
.LOOP $label$1:
	$14 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($17)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [165])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$2
	$17 = ($17 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($13)
	$2 = *(($0 + [160]))
	$18 = *(($0 + [164]))
	if ( ((int_32)$18 == (int_32)$2) ){ goto $label$5 }
	$17 = ($18 + [-24])
	$6 = ([0] - $2)
	
.LOOP $label$6:
	if ( ((int_64)*(*($17)) == (int_64)$1) ){ goto $label$5 }
	$18 = $17
	$7 = ($17 + [-24])
	$17 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$17 = ($0 + [136])
	if ( ((int_32)$18 == (int_32)$2) ){ goto $label$8 }
	$15 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [44]) == (int_32)$17), [32])
	goto $label$7 
	
.LABEL $label$8
	$15 = [0]
	$7 = CALL db_find_i64(*(($0 + [136])), *(($0 + [144])), (int_64)7614284258291875840, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$15 = CALL $28($17, $7)
	CALL eosio_assert(((int_32)*($15 + [44]) == (int_32)$17), [32])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)*($15 + [40]) == (int_32)[1]), [864])
	if ( ($15 == 0) ){ goto $label$9 }
	CALL eosio_assert([1], [896])
	CALL eosio_assert([1], [208])
	$7 = CALL db_next_i64(*($15 + [48]), $19)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	CALL $28($17, $7)
	
.LABEL $label$10
	CALL $59($17, $15)
	
.LABEL $label$9
	$2 = ($0 + [176])
	$4 = *(($0 + [184]))
	*($19 + [48]) = [0]
	*($19 + [40]) = (int_64)0
	$17 = CALL db_lowerbound_i64(*($0 + [176]), $4, (int_64)-4157538979756376064, (int_64)0)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$11 }
	$17 = CALL $34($2, $17)
	$6 = (($19 + [40]) + [8])
	
.LOOP $label$12:
	if ( ((int_64)*($17 + [24]) != (int_64)$1) ){ goto $label$13 }
	$18 = ($17 + [32])
	$7 = *($19 + [44])
	if ( ((int_32)$7 == (int_32)*($6)) ){ goto $label$14 }
	*($7) = *($18)
	*($19 + [44]) = ($7 + [8])
	goto $label$13 
	
.LABEL $label$14
	CALL $60(($19 + [40]), $18)
	
.LABEL $label$13
	CALL eosio_assert([1], [208])
	$17 = CALL db_next_i64(*($17 + [44]), $19)
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$11 }
	$17 = CALL $34($2, $17)
	goto $label$12 
	
.LABEL $label$11
	$3 = *($19 + [44])
	$16 = *($19 + [40])
	if ( ((int_32)$16 == (int_32)$3) ){ goto $label$15 }
	$8 = ($0 + [200])
	$9 = ($0 + [204])
	$10 = ($0 + [184])
	$11 = ($0 + [176])
	
.LOOP $label$16:
	$4 = *($16)
	$5 = *($8)
	$18 = *($9)
	if ( ((int_32)$18 == (int_32)$5) ){ goto $label$17 }
	$17 = ($18 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$18:
	if ( ((int_64)*(*($17) + [32]) == (int_64)$4) ){ goto $label$17 }
	$18 = $17
	$7 = ($17 + [-24])
	$17 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$18 }
	
.LABEL $label$17
	if ( ((int_32)$18 == (int_32)$5) ){ goto $label$21 }
	$17 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [40]) == (int_32)$2), [32])
	if ( $17 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$17 = CALL db_find_i64(*($11), *($10), (int_64)-4157538979756376064, $4)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$19 }
	$17 = CALL $34($2, $17)
	CALL eosio_assert(((int_32)*($17 + [40]) == (int_32)$2), [32])
	
.LABEL $label$20
	CALL eosio_assert([1], [896])
	CALL eosio_assert([1], [208])
	$7 = CALL db_next_i64(*($17 + [44]), $19)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$22 }
	CALL $34($2, $7)
	
.LABEL $label$22
	CALL $61($2, $17)
	
.LABEL $label$19
	$16 = ($16 + [8])
	if ( ((int_32)$16 != (int_32)$3) ){ goto $label$16 }
	
.LABEL $label$15
	*($19 + [16]) = (int_64)-1
	*($19 + [24]) = [0]
	$4 = *($0)
	*($19) = $4
	$12 = *($15 + [32])
	*($19 + [8]) = $12
	*(($19 + [28])) = [0]
	*(($19 + [32])) = [0]
	*($19 + [36]) = [0]
	$17 = CALL db_lowerbound_i64($4, $12, (int_64)7614284302722138112, (int_64)0)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$23 }
	$17 = CALL $29($19, $17)
	$18 = (($19 + [40]) + [8])
	
.LOOP $label$24:
	if ( ((int_64)*($17 + [8]) != (int_64)$1) ){ goto $label$25 }
	$7 = *($19 + [44])
	if ( ((int_32)$7 == (int_32)*($18)) ){ goto $label$26 }
	*($7) = *($17)
	*($19 + [44]) = ($7 + [8])
	goto $label$25 
	
.LABEL $label$26
	CALL $60(($19 + [40]), $17)
	
.LABEL $label$25
	CALL eosio_assert([1], [208])
	$17 = CALL db_next_i64(*($17 + [76]), ($19 + [56]))
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$23 }
	$17 = CALL $29($19, $17)
	goto $label$24 
	
.LABEL $label$23
	$5 = *($19 + [44])
	$2 = *($19 + [40])
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$27 }
	$3 = ($19 + [24])
	$8 = ($19 + [28])
	$9 = ($19 + [8])
	
.LOOP $label$28:
	$4 = *($2)
	$16 = *($3)
	$18 = *($8)
	if ( ((int_32)$18 == (int_32)$16) ){ goto $label$29 }
	$17 = ($18 + [-24])
	$6 = ([0] - $16)
	
.LOOP $label$30:
	if ( ((int_64)*(*($17)) == (int_64)$4) ){ goto $label$29 }
	$18 = $17
	$7 = ($17 + [-24])
	$17 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$30 }
	
.LABEL $label$29
	if ( ((int_32)$18 == (int_32)$16) ){ goto $label$33 }
	$17 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [72]) == (int_32)$19), [32])
	if ( $17 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$17 = CALL db_find_i64(*($19), *($9), (int_64)7614284302722138112, $4)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$31 }
	$17 = CALL $29($19, $17)
	CALL eosio_assert(((int_32)*($17 + [72]) == (int_32)$19), [32])
	
.LABEL $label$32
	CALL eosio_assert([1], [896])
	CALL eosio_assert([1], [208])
	$7 = CALL db_next_i64(*($17 + [76]), ($19 + [56]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$34 }
	CALL $29($19, $7)
	
.LABEL $label$34
	CALL $62($19, $17)
	
.LABEL $label$31
	$2 = ($2 + [8])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$28 }
	
.LABEL $label$27
	$18 = *($19 + [24])
	if ( ($18 == 0) ){ goto $label$35 }
	$6 = ($19 + [28])
	$17 = *($6)
	if ( ((int_32)$17 == (int_32)$18) ){ goto $label$37 }
	
.LOOP $label$38:
	$17 = ($17 + [-24])
	$7 = *($17)
	*($17) = [0]
	if ( ($7 == 0) ){ goto $label$39 }
	CALL $135($7)
	
.LABEL $label$39
	if ( ((int_32)$18 != (int_32)$17) ){ goto $label$38 }
	$17 = *(($19 + [24]))
	goto $label$36 
	
.LABEL $label$37
	$17 = $18
	
.LABEL $label$36
	*($6) = $18
	CALL $135($17)
	
.LABEL $label$35
	$17 = *($19 + [40])
	if ( ($17 == 0) ){ goto $label$40 }
	*($19 + [44]) = $17
	CALL $135($17)
	
.LABEL $label$40
	*([0] + [4]) = ($19 + [64])
}

void .FUNC $109 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$4 = *($1 + [56])
	*($1 + [56]) = (int_64)0
	*(($8 = $6) + [24]) = $4
	$4 = *($1)
	$5 = *($1 + [64])
	if ( ((int_64)$5 == (int_64)3) ){ goto $label$4 }
	if ( ((int_64)$5 == (int_64)2) ){ goto $label$3 }
	if ( ((int_64)$5 != (int_64)1) ){ goto $label$1 }
	$7 = ($1 + [24])
	goto $label$2 
	
.LABEL $label$4
	$7 = ($1 + [40])
	goto $label$2 
	
.LABEL $label$3
	$7 = ($1 + [32])
	
.LABEL $label$2
	*($7) = ((int_64)*($7) + (int_64)-1)
	
.LABEL $label$1
	*(($1 + [64])) = *(*($3))
	CALL eosio_assert([1], [496])
	$7 = $6
	$6 = ($7 + [-80])
	*([0] + [4]) = $6
	*($8 + [12]) = $6
	*($8 + [8]) = $6
	*($8 + [16]) = ($7 + [-8])
	CALL $70(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $6, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($8 + [40]) = *(($1 + [56]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$6 }
	$6 = ($1 + [80])
	$1 = *($6)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($8 + [32]), $4)
	*($6) = $1
	
.LABEL $label$7
	CALL db_idx64_update($1, $2, ($8 + [40]))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $135 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$5 = *($1 + [56])
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = *(*($3))
	*(($6 = $7) + [24]) = $5
	$4 = *($1)
	$5 = *(*($3))
	if ( ((int_64)$5 != (int_64)1) ){ goto $label$1 }
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)-1)
	$5 = *(*($3))
	
.LABEL $label$1
	if ( ((int_64)$5 != (int_64)2) ){ goto $label$2 }
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)-1)
	$5 = *(*($3))
	
.LABEL $label$2
	if ( ((int_64)$5 != (int_64)3) ){ goto $label$3 }
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)-1)
	
.LABEL $label$3
	CALL eosio_assert([1], [496])
	$7 = $7
	$3 = ($7 + [-80])
	*([0] + [4]) = $3
	*($6 + [12]) = $3
	*($6 + [8]) = $3
	*($6 + [16]) = ($7 + [-8])
	CALL $70(($6 + [8]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $3, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($6 + [40]) = *(($1 + [56]))
	if ( (CALL memcmp(($6 + [24]), ($6 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [80])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($6 + [32]), $4)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($6 + [40]))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$4 = *($1 + [56])
	*($1 + [56]) = (int_64)0
	*(($8 = $6) + [24]) = $4
	$4 = *($1)
	$5 = *($1 + [64])
	if ( ((int_64)$5 == (int_64)3) ){ goto $label$4 }
	if ( ((int_64)$5 == (int_64)2) ){ goto $label$3 }
	if ( ((int_64)$5 != (int_64)1) ){ goto $label$1 }
	$7 = ($1 + [24])
	goto $label$2 
	
.LABEL $label$4
	$7 = ($1 + [40])
	goto $label$2 
	
.LABEL $label$3
	$7 = ($1 + [32])
	
.LABEL $label$2
	*($7) = ((int_64)*($7) + (int_64)-1)
	
.LABEL $label$1
	*(($1 + [64])) = *(*($3))
	CALL eosio_assert([1], [496])
	$7 = $6
	$6 = ($7 + [-80])
	*([0] + [4]) = $6
	*($8 + [12]) = $6
	*($8 + [8]) = $6
	*($8 + [16]) = ($7 + [-8])
	CALL $70(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $6, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($8 + [40]) = *(($1 + [56]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$6 }
	$6 = ($1 + [80])
	$1 = *($6)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($8 + [32]), $4)
	*($6) = $1
	
.LABEL $label$7
	CALL db_idx64_update($1, $2, ($8 + [40]))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$5 = *($1 + [56])
	*($1 + [56]) = ((int_64)(CASTING uint_64)(uint_32 (int_64)(*($1 + [48]) == 0)) << (int_64)1)
	*(($6 = $7) + [24]) = $5
	$4 = *($1)
	$5 = *(*($3))
	if ( ((int_64)$5 != (int_64)1) ){ goto $label$1 }
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)-1)
	$5 = *(*($3))
	
.LABEL $label$1
	if ( ((int_64)$5 != (int_64)2) ){ goto $label$2 }
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)-1)
	$5 = *(*($3))
	
.LABEL $label$2
	if ( ((int_64)$5 != (int_64)3) ){ goto $label$3 }
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)-1)
	
.LABEL $label$3
	*($1 + [64]) = *(*(*($3 + [4]) + [4]) + [64])
	CALL eosio_assert([1], [496])
	$7 = $7
	$3 = ($7 + [-80])
	*([0] + [4]) = $3
	*($6 + [12]) = $3
	*($6 + [8]) = $3
	*($6 + [16]) = ($7 + [-8])
	CALL $70(($6 + [8]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $3, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($6 + [40]) = *(($1 + [56]))
	if ( (CALL memcmp(($6 + [24]), ($6 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [80])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($6 + [32]), $4)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($6 + [40]))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$4 = *($1 + [56])
	*($1 + [56]) = (int_64)0
	*(($8 = $6) + [24]) = $4
	$4 = *($1)
	$5 = *($1 + [48])
	if ( (int_64)($5 == 0) ){ goto $label$2 }
	*(($1 + [48])) = ((int_64)$5 + (int_64)-1)
	goto $label$1 
	
.LABEL $label$2
	*(($1 + [56])) = (int_64)2
	
.LABEL $label$1
	$5 = *($1 + [64])
	if ( ((int_64)$5 == (int_64)3) ){ goto $label$6 }
	if ( ((int_64)$5 == (int_64)2) ){ goto $label$5 }
	if ( ((int_64)$5 != (int_64)1) ){ goto $label$3 }
	$7 = ($1 + [24])
	goto $label$4 
	
.LABEL $label$6
	$7 = ($1 + [40])
	goto $label$4 
	
.LABEL $label$5
	$7 = ($1 + [32])
	
.LABEL $label$4
	*($7) = ((int_64)*($7) + (int_64)-1)
	
.LABEL $label$3
	*(($1 + [64])) = *(*($3))
	CALL eosio_assert([1], [496])
	$7 = $6
	$6 = ($7 + [-80])
	*([0] + [4]) = $6
	*($8 + [12]) = $6
	*($8 + [8]) = $6
	*($8 + [16]) = ($7 + [-8])
	CALL $70(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $6, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($8 + [40]) = *(($1 + [56]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$8 }
	$6 = ($1 + [80])
	$1 = *($6)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$9 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($8 + [32]), $4)
	*($6) = $1
	
.LABEL $label$9
	CALL db_idx64_update($1, $2, ($8 + [40]))
	
.LABEL $label$8
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$5 = *($1 + [56])
	*($1 + [56]) = (int_64)0
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)1)
	*(($6 = $7) + [24]) = $5
	$4 = *($1)
	*($1 + [64]) = *(*(*($3) + [4]) + [64])
	$5 = *(*($3 + [4]))
	if ( ((int_64)$5 != (int_64)1) ){ goto $label$1 }
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)-1)
	$5 = *(*(($3 + [4])))
	
.LABEL $label$1
	if ( ((int_64)$5 != (int_64)2) ){ goto $label$2 }
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)-1)
	$5 = *(*(($3 + [4])))
	
.LABEL $label$2
	if ( ((int_64)$5 != (int_64)3) ){ goto $label$3 }
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)-1)
	
.LABEL $label$3
	CALL eosio_assert([1], [496])
	$7 = $7
	$3 = ($7 + [-80])
	*([0] + [4]) = $3
	*($6 + [12]) = $3
	*($6 + [8]) = $3
	*($6 + [16]) = ($7 + [-8])
	CALL $70(($6 + [8]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $3, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($6 + [40]) = *(($1 + [56]))
	if ( (CALL memcmp(($6 + [24]), ($6 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [80])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($6 + [32]), $4)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($6 + [40]))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$4 = *($1 + [56])
	*($1 + [56]) = (int_64)0
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)1)
	*(($8 = $6) + [24]) = $4
	$4 = *($1)
	$5 = *($1 + [64])
	if ( ((int_64)$5 == (int_64)3) ){ goto $label$4 }
	if ( ((int_64)$5 == (int_64)2) ){ goto $label$3 }
	if ( ((int_64)$5 != (int_64)1) ){ goto $label$1 }
	$7 = ($1 + [24])
	goto $label$2 
	
.LABEL $label$4
	$7 = ($1 + [40])
	goto $label$2 
	
.LABEL $label$3
	$7 = ($1 + [32])
	
.LABEL $label$2
	*($7) = ((int_64)*($7) + (int_64)-1)
	
.LABEL $label$1
	*(($1 + [64])) = *(*($3))
	CALL eosio_assert([1], [496])
	$7 = $6
	$6 = ($7 + [-80])
	*([0] + [4]) = $6
	*($8 + [12]) = $6
	*($8 + [8]) = $6
	*($8 + [16]) = ($7 + [-8])
	CALL $70(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $6, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($8 + [40]) = *(($1 + [56]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$6 }
	$6 = ($1 + [80])
	$1 = *($6)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($8 + [32]), $4)
	*($6) = $1
	
.LABEL $label$7
	CALL db_idx64_update($1, $2, ($8 + [40]))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$5 = *($1 + [56])
	*($1 + [56]) = (int_64)0
	*(($6 = $7) + [24]) = $5
	$4 = *($1)
	$5 = *($1 + [48])
	if ( (int_64)($5 == 0) ){ goto $label$2 }
	*(($1 + [48])) = ((int_64)$5 + (int_64)-1)
	goto $label$1 
	
.LABEL $label$2
	*(($1 + [56])) = (int_64)2
	
.LABEL $label$1
	$5 = *(*($3))
	if ( ((int_64)$5 != (int_64)1) ){ goto $label$3 }
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)-1)
	$5 = *(*($3))
	
.LABEL $label$3
	if ( ((int_64)$5 != (int_64)2) ){ goto $label$4 }
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)-1)
	$5 = *(*($3))
	
.LABEL $label$4
	if ( ((int_64)$5 != (int_64)3) ){ goto $label$5 }
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)-1)
	
.LABEL $label$5
	*($1 + [64]) = *(*(*($3 + [4]) + [4]) + [64])
	CALL eosio_assert([1], [496])
	$7 = $7
	$3 = ($7 + [-80])
	*([0] + [4]) = $3
	*($6 + [12]) = $3
	*($6 + [8]) = $3
	*($6 + [16]) = ($7 + [-8])
	CALL $70(($6 + [8]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $3, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($6 + [40]) = *(($1 + [56]))
	if ( (CALL memcmp(($6 + [24]), ($6 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = ($1 + [80])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($6 + [32]), $4)
	*($3) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($6 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [944])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [992])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1 + [32])
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8) + [32]) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1056])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $135($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $135($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
	$7 = *(($1 + [48]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157538979756376064, ($9 + [8]), *(($1 + [32])))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	$7 = *(($1 + [52]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157538979756376063, ($9 + [8]), *(($1 + [32])))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $134(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $138($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $135($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$4 = *($1 + [56])
	*($1 + [56]) = (int_64)1
	*($1 + [64]) = *(*($3))
	*($5 + [88]) = $4
	$4 = *($1)
	CALL eosio_assert([1], [496])
	*($5 + [80]) = ($5 + [72])
	*($5 + [76]) = $5
	*($5 + [72]) = $5
	CALL $70(($5 + [72]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [104]) = *(($1 + [56]))
	if ( (CALL memcmp(($5 + [88]), ($5 + [104]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [80])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($5 + [96]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [104]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [944])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [992])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1056])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $135($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $135($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
	$7 = *(($1 + [80]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [576])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $134([40])) + [24]) = $1
	CALL $102(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $103(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $135($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$4 = *($1 + [56])
	*($1 + [56]) = (int_64)3
	*($1 + [64]) = *(*($3))
	*($5 + [88]) = $4
	$4 = *($1)
	CALL eosio_assert([1], [496])
	*($5 + [80]) = ($5 + [72])
	*($5 + [76]) = $5
	*($5 + [72]) = $5
	CALL $70(($5 + [72]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [104]) = *(($1 + [56]))
	if ( (CALL memcmp(($5 + [88]), ($5 + [104]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [80])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7614284302722138112, ($5 + [96]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [104]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [232])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [216])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [224])), (int_64)4410498445928824832, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $104($5, $6)
	*($9 + [12]) = [0]
	*($9 + [8]) = $5
	$7 = *(*(CALL $105(($9 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [232])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [640])
	*($1) = *($8)
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	$10 = $10
	$3 = ($10 + [-32])
	*([0] + [4]) = $3
	CALL eosio_assert([1], [560])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert([1], [560])
	CALL memcpy(($10 + [-24]), ($1 + [8]), [8])
	CALL eosio_assert([1], [560])
	CALL memcpy(($10 + [-16]), ($1 + [16]), [8])
	$7 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)4410498445928824832, *(*($0 + [8])), $7, $3, [24])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [28]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [768])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4410498445928824832)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [704])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [704])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $104(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [816])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $134([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [848])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [848])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [848])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $103(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $135($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [576])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $134([88])
	CALL $91($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [76])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $56(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $135($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [848])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [848])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [848])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [320])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [240])
	*($0 + [32]) = $1
	*($0) = *(*(*($2 + [4])))
	$4 = *($2)
	*($6 + [40]) = ($6 + [32])
	*($6 + [36]) = $6
	*($6 + [32]) = $6
	CALL $42(($6 + [32]), $0)
	$3 = *($0)
	*($0 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)3607749778735104000, *(*($2 + [8])), $3, $6, [32])
	if ( (uint_64)($3 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [48])
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $134(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $135($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $135($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)0
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [560])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [560])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [320])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [240])
	*($0 + [44]) = $1
	*($0 + [24]) = [0]
	$4 = *($2 + [4])
	*($0) = *(*(*($4) + [4]) + [8])
	$5 = *($2)
	$1 = *($4 + [4])
	*($0 + [8]) = *($1)
	*(($0 + [16])) = *(($1 + [8]))
	$3 = CALL current_time()
	*($0 + [24]) = ((int_64)((int_64)*(*($4 + [8])) * (int_64)1200) + (int_64)((uint_64)$3 / (uint_64)(int_64)1000000))
	$4 = *($4 + [12])
	*($0 + [40]) = [1]
	*($0 + [32]) = *($4)
	*($0 + [28]) = [0]
	*($6 + [56]) = ($6 + [44])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $43(($6 + [48]), $0)
	$3 = *($0)
	*($0 + [48]) = CALL db_store_i64(*($5 + [8]), (int_64)7614284258291875840, *(*($2 + [8])), $3, $6, [44])
	if ( (uint_64)($3 <= *($5 + [16])) ){ goto $label$6 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [64])
	return $0
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [576])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $134([56])
	CALL $84($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [48])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $58(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $135($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	$4 = *($1)
	CALL eosio_assert([1], [496])
	CALL eosio_assert([1], [560])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [560])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [576])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $134([32])
	CALL $85($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $86(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $135($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [816])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $134([32])) + [8]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [848])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [848])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $86(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $135($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $145 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))), [1392])
	$5 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1472])
	*($1 + [28]) = (*($1 + [28]) + [1])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [496])
	*($6 + [56]) = ($6 + [44])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $43(($6 + [48]), $1)
	CALL db_update_i64(*($1 + [48]), $2, $6, [44])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [576])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $134([88])) + [72]) = $1
	*($3 + [64]) = (int_64)0
	CALL $75(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [76])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $56(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $135($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [848])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [848])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [848])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [848])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [76]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [768])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7614284302722138112)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [704])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [704])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $29(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [848])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [848])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [848])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [848])
	CALL memcpy(($0 + [24]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	*($1 + [8]) = (int_64))(*($1 + [8]) - *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [496])
	*($5 + [40]) = ($5 + [32])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $42(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)((int_64)*(*(*($3) + [4]) + [8]) / (int_64)200))
	$4 = *($1)
	CALL eosio_assert([1], [496])
	*($5 + [40]) = ($5 + [32])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $42(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [576])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $134([56])) + [40]) = $1
	CALL $44(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3 + [32])
	*($7 + [16]) = $2
	$4 = *($3 + [44])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $45(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $135($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [5])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	$4 = [134217727]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$4 = int_32($7 >> [4])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $134(($4 << [5]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $138($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [5])))) = *($1)
	*(($3 + [24])) = *(($1 + [24]))
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [5]))
	$3 = ($3 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $135($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [576])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $134([48])
	CALL $87($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [36])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $51(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $135($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	$4 = *($1)
	$6 = *($3)
	$5 = ($1 + [16])
	CALL eosio_assert(((int_64)*($5) == (int_64)*($6 + [8])), [1600])
	CALL eosio_assert(((int_64)*($1 + [8]) >= (int_64)*($6)), [1664])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($5)), [1696])
	$7 = (int_64)
	*($1 + [8]) = $7(*($1 + [8]) - *($3)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [1744])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1776])
	*($1 + [24]) = (*($1 + [24]) + [1])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [496])
	*($8 + [40]) = ($8 + [32])
	*($8 + [36]) = $8
	*($8 + [32]) = $8
	CALL $42(($8 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $8, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [816])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $134([48])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)1398362884
	CALL eosio_assert([1], [320])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [240])
	*($4 + [32]) = $0
	CALL $50(($8 + [32]), $4)
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [36])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $51($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $135($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [432])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)((int_64)*(*(*($3) + [4]) + [8]) / (int_64)100))
	$4 = *($1)
	*($1 + [24]) = (*($1 + [24]) + [-1])
	CALL eosio_assert([1], [496])
	*($5 + [40]) = ($5 + [32])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $42(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	return ((int_32)*($0) > (int_32)*($1))
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [32])
	*([0] + [4]) = $18
	
.LOOP $label$1:
	$4 = ($1 + [-64])
	$3 = ($1 + [-32])
	
.LOOP $label$2:
	$5 = $0
	
.LOOP $label$4:
	$0 = ($1 - $5)
	$17 = int_32($0 >> [5])
	if ( ((uint_32)$17 <= (uint_32)[5]) ){ goto $label$14 }
	if ( ((int_32)$0 <= (int_32)[991]) ){ goto $label$13 }
	$7 = ($5 + (((int_32)$17 / (int_32)[2]) << [5]))
	if ( ((int_32)$0 < (int_32)[31969]) ){ goto $label$21 }
	$0 = ($7 + $0)
	$0 = (((int_32)$17 / (int_32)[4]) << [5])
	$17 = ($5 + $0)
	$10 = CALL $52($5, $17, $7, $0, $2)
	if ( (CALL int_32 $3((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$15 }
	$11 = ($0 + [24])
	*(($8 = ($18 + [24]))) = *($11)
	$13 = ($0 + [16])
	*(($9 = ($18 + [16]))) = *($13)
	$14 = ($0 + [8])
	*(($12 = ($18 + [8]))) = *($14)
	*($18) = *($0)
	$15 = ($3 + [24])
	*($11) = *($15)
	$16 = ($3 + [16])
	*($13) = *($16)
	$6 = ($3 + [8])
	*($14) = *($6)
	*($0) = *($3)
	*($3) = *($18)
	*($15) = *($8)
	*($16) = *($9)
	*($6) = *($12)
	if ( (CALL int_32 $0((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$20 }
	$15 = ($7 + [24])
	*($8) = *($15)
	$16 = ($7 + [16])
	*($9) = *($16)
	$6 = ($7 + [8])
	*($12) = *($6)
	*($18) = *($7)
	*($15) = *($11)
	*($16) = *($13)
	*($6) = *($14)
	*($7) = *($0)
	*($0) = *($18)
	*($11) = *($8)
	*($13) = *($9)
	*($14) = *($12)
	if ( (CALL int_32 $7((int_32 $17), (int_32 *($2))) == 0) ){ goto $label$17 }
	$0 = ($17 + [24])
	*($8) = *($0)
	$11 = ($17 + [16])
	*($9) = *($11)
	$13 = ($17 + [8])
	*($12) = *($13)
	*($18) = *($17)
	*($0) = *($15)
	*($11) = *($16)
	*($13) = *($6)
	*($17) = *($7)
	*($7) = *($18)
	*($15) = *($8)
	*($16) = *($9)
	*($6) = *($12)
	if ( (CALL int_32 $17((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$16 }
	$14 = ($5 + [24])
	*($8) = *($14)
	$15 = ($5 + [16])
	*($9) = *($15)
	$16 = ($5 + [8])
	*($12) = *($16)
	*($18) = *($5)
	*($14) = *($0)
	*($15) = *($11)
	*($16) = *($13)
	*($5) = *($17)
	*($17) = *($18)
	*($0) = *($8)
	*($11) = *($9)
	*($13) = *($12)
	$10 = ($10 + [4])
	goto $label$15 
	
.LABEL $label$21
	$0 = CALL int_32 $7((int_32 $5), (int_32 *($2)))
	$17 = CALL int_32 $3((int_32 $7), (int_32 *($2)))
	if ( ($0 == 0) ){ goto $label$22 }
	if ( ($17 == 0) ){ goto $label$19 }
	$17 = ($5 + [24])
	*(($0 = ($18 + [24]))) = *($17)
	$10 = ($5 + [16])
	*(($8 = ($18 + [16]))) = *($10)
	$12 = ($5 + [8])
	*(($9 = ($18 + [8]))) = *($12)
	*($18) = *($5)
	$11 = ($3 + [24])
	*($17) = *($11)
	$17 = ($3 + [16])
	*($10) = *($17)
	$10 = ($3 + [8])
	*($12) = *($10)
	*($5) = *($3)
	*($3) = *($18)
	*($11) = *($0)
	*($17) = *($8)
	*($10) = *($9)
	$10 = [1]
	goto $label$15 
	
.LABEL $label$22
	$10 = [0]
	if ( ($17 == 0) ){ goto $label$15 }
	$17 = ($7 + [24])
	*(($0 = ($18 + [24]))) = *($17)
	$9 = ($7 + [16])
	*(($8 = ($18 + [16]))) = *($9)
	$11 = ($7 + [8])
	*(($12 = ($18 + [8]))) = *($11)
	*($18) = *($7)
	$10 = ($3 + [24])
	*($17) = *($10)
	$13 = ($3 + [16])
	*($9) = *($13)
	$14 = ($3 + [8])
	*($11) = *($14)
	*($7) = *($3)
	*($3) = *($18)
	*($10) = *($0)
	*($13) = *($8)
	*($14) = *($12)
	$10 = [1]
	if ( (CALL int_32 $7((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$15 }
	$10 = ($5 + [24])
	*($0) = *($10)
	$13 = ($5 + [16])
	*($8) = *($13)
	$14 = ($5 + [8])
	*($12) = *($14)
	*($18) = *($5)
	*($10) = *($17)
	*($13) = *($9)
	*($14) = *($11)
	*($5) = *($7)
	*($7) = *($18)
	*($17) = *($0)
	*($9) = *($8)
	*($11) = *($12)
	goto $label$18 
	
.LABEL $label$20
	$10 = ($10 + [1])
	goto $label$15 
	
.LABEL $label$19
	$10 = ($5 + [24])
	*(($0 = ($18 + [24]))) = *($10)
	$11 = ($5 + [16])
	*(($17 = ($18 + [16]))) = *($11)
	$13 = ($5 + [8])
	*(($8 = ($18 + [8]))) = *($13)
	*($18) = *($5)
	$9 = ($7 + [24])
	*($10) = *($9)
	$12 = ($7 + [16])
	*($11) = *($12)
	$11 = ($7 + [8])
	*($13) = *($11)
	*($5) = *($7)
	*($7) = *($18)
	*($9) = *($0)
	*($12) = *($17)
	*($11) = *($8)
	$10 = [1]
	if ( (CALL int_32 $3((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$15 }
	*($0) = *($9)
	*($17) = *($12)
	*($8) = *($11)
	*($18) = *($7)
	$10 = ($3 + [24])
	*($9) = *($10)
	$9 = ($3 + [16])
	*($12) = *($9)
	$12 = ($3 + [8])
	*($11) = *($12)
	*($7) = *($3)
	*($3) = *($18)
	*($10) = *($0)
	*($9) = *($17)
	*($12) = *($8)
	
.LABEL $label$18
	$10 = [2]
	goto $label$15 
	
.LABEL $label$17
	$10 = ($10 + [2])
	goto $label$15 
	
.LABEL $label$16
	$10 = ($10 + [3])
	
.LABEL $label$15
	if ( CALL int_32 $5((int_32 $7), (int_32 *($2))) ){ goto $label$23 }
	$0 = $4
	
.LOOP $label$25:
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$24 }
	$17 = CALL int_32 $0((int_32 $7), (int_32 *($2)))
	$0 = ($0 + [-32])
	if ( ($17 == 0) ){ goto $label$25 }
	$17 = ($5 + [24])
	*(($8 = ($18 + [24]))) = *($17)
	$12 = ($5 + [16])
	*(($9 = ($18 + [16]))) = *($12)
	$13 = ($5 + [8])
	*(($11 = ($18 + [8]))) = *($13)
	*($18) = *($5)
	$14 = ($0 + [56])
	*($17) = *($14)
	$15 = ($0 + [48])
	*($12) = *($15)
	$12 = ($0 + [40])
	*($13) = *($12)
	$17 = ($0 + [32])
	*($5) = *($17)
	*($12) = *($11)
	*($14) = *($8)
	*($15) = *($9)
	*($17) = *($18)
	$10 = ($10 + [1])
	goto $label$7 
	
.LABEL $label$24
	$0 = ($5 + [32])
	if ( CALL int_32 $5((int_32 $3), (int_32 *($2))) ){ goto $label$26 }
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	$0 = ($5 + [64])
	
.LOOP $label$28:
	$17 = ($0 + [-32])
	if ( CALL int_32 $5((int_32 $17), (int_32 *($2))) ){ goto $label$27 }
	$0 = ($0 + [32])
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$28 }
	goto $label$6 
	
.LABEL $label$27
	$8 = ($0 + [-8])
	*(($7 = ($18 + [24]))) = *($8)
	$9 = ($0 + [-16])
	*(($10 = ($18 + [16]))) = *($9)
	$11 = ($0 + [-24])
	*(($12 = ($18 + [8]))) = *($11)
	*($18) = *($17)
	$13 = ($3 + [24])
	*($8) = *($13)
	$8 = ($3 + [16])
	*($9) = *($8)
	$9 = ($3 + [8])
	*($11) = *($9)
	*($17) = *($3)
	*($13) = *($7)
	*($8) = *($10)
	*($9) = *($12)
	*($3) = *($18)
	
.LABEL $label$26
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	$17 = $3
	
.LOOP $label$29:
	$7 = CALL int_32 $5((int_32 $0), (int_32 *($2)))
	$0 = ($0 + [32])
	if ( ($7 == 0) ){ goto $label$29 }
	$7 = ($0 + [-32])
	
.LOOP $label$30:
	$17 = ($17 + [-32])
	if ( CALL int_32 $5((int_32 $17), (int_32 *($2))) ){ goto $label$30 }
	if ( ((uint_32)$7 >= (uint_32)$17) ){ goto $label$5 }
	$8 = ($0 + [-8])
	*(($7 = ($18 + [24]))) = *($8)
	$9 = ($0 + [-16])
	*(($10 = ($18 + [16]))) = *($9)
	$11 = ($0 + [-24])
	*(($12 = ($18 + [8]))) = *($11)
	$13 = ($0 + [-32])
	*($18) = *($13)
	$14 = ($17 + [24])
	*($8) = *($14)
	$8 = ($17 + [16])
	*($9) = *($8)
	$9 = ($17 + [8])
	*($11) = *($9)
	*($13) = *($17)
	*($14) = *($7)
	*($8) = *($10)
	*($9) = *($12)
	*($17) = *($18)
	goto $label$29 
	
.LABEL $label$23
	$17 = $3
	goto $label$7 
	
.LABEL $label$14
	goto $label$6 
	
.LABEL $label$31
	if ( (CALL int_32 $3((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$6 }
	$0 = ($5 + [24])
	*(($2 = ($18 + [24]))) = *($0)
	$7 = ($5 + [16])
	*(($17 = ($18 + [16]))) = *($7)
	$10 = ($5 + [8])
	*(($8 = ($18 + [8]))) = *($10)
	*($18) = *($5)
	$9 = ($3 + [24])
	*($0) = *($9)
	$0 = ($3 + [16])
	*($7) = *($0)
	$7 = ($3 + [8])
	*($10) = *($7)
	*($5) = *($3)
	*($3) = *($18)
	*($9) = *($2)
	*($0) = *($17)
	*($7) = *($8)
	goto $label$6 
	
.LABEL $label$13
	CALL $53($5, $1, $2)
	goto $label$6 
	
.LABEL $label$12
	$0 = ($5 + [32])
	$17 = CALL int_32 $0((int_32 $5), (int_32 *($2)))
	$7 = CALL int_32 $3((int_32 $0), (int_32 *($2)))
	if ( ($17 == 0) ){ goto $label$9 }
	if ( ($7 == 0) ){ goto $label$8 }
	$0 = ($5 + [24])
	*(($2 = ($18 + [24]))) = *($0)
	$7 = ($5 + [16])
	*(($17 = ($18 + [16]))) = *($7)
	$10 = ($5 + [8])
	*(($8 = ($18 + [8]))) = *($10)
	*($18) = *($5)
	$9 = ($3 + [24])
	*($0) = *($9)
	$0 = ($3 + [16])
	*($7) = *($0)
	$7 = ($3 + [8])
	*($10) = *($7)
	*($5) = *($3)
	*($3) = *($18)
	*($9) = *($2)
	*($0) = *($17)
	*($7) = *($8)
	goto $label$6 
	
.LABEL $label$11
	CALL $52($5, ($5 + [32]), ($5 + [64]), $3, $2)
	goto $label$6 
	
.LABEL $label$10
	$0 = ($5 + [96])
	$17 = ($5 + [64])
	$7 = ($5 + [32])
	CALL $52($5, $7, $17, $0, $2)
	if ( (CALL int_32 $3((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$6 }
	$10 = ($0 + [24])
	*(($8 = ($18 + [24]))) = *($10)
	$12 = ($0 + [16])
	*(($9 = ($18 + [16]))) = *($12)
	$13 = ($0 + [8])
	*(($11 = ($18 + [8]))) = *($13)
	*($18) = *($0)
	$14 = ($3 + [24])
	*($10) = *($14)
	$15 = ($3 + [16])
	*($12) = *($15)
	$16 = ($3 + [8])
	*($13) = *($16)
	*($0) = *($3)
	*($14) = *($8)
	*($15) = *($9)
	*($16) = *($11)
	*($3) = *($18)
	if ( (CALL int_32 $0((int_32 $17), (int_32 *($2))) == 0) ){ goto $label$6 }
	$14 = ($17 + [24])
	*($8) = *($14)
	$15 = ($17 + [16])
	*($9) = *($15)
	$16 = ($17 + [8])
	*($11) = *($16)
	*($18) = *($17)
	*($14) = *($10)
	*($15) = *($12)
	*($16) = *($13)
	*($17) = *($0)
	*($10) = *($8)
	*($12) = *($9)
	*($13) = *($11)
	*($0) = *($18)
	if ( (CALL int_32 $17((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$6 }
	$8 = ($7 + [24])
	*(($0 = ($18 + [24]))) = *($8)
	$9 = ($7 + [16])
	*(($10 = ($18 + [16]))) = *($9)
	$11 = ($7 + [8])
	*(($12 = ($18 + [8]))) = *($11)
	*($18) = *($7)
	$13 = ($17 + [24])
	*($8) = *($13)
	$14 = ($17 + [16])
	*($9) = *($14)
	$15 = ($17 + [8])
	*($11) = *($15)
	*($7) = *($17)
	*($13) = *($0)
	*($14) = *($10)
	*($15) = *($12)
	*($17) = *($18)
	if ( (CALL int_32 $7((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$6 }
	$2 = ($5 + [24])
	*($0) = *($2)
	$17 = ($5 + [16])
	*($10) = *($17)
	$13 = ($5 + [8])
	*($12) = *($13)
	*($18) = *($5)
	*($2) = *($8)
	*($17) = *($9)
	*($13) = *($11)
	*($5) = *($7)
	*($8) = *($0)
	*($9) = *($10)
	*($11) = *($12)
	*($7) = *($18)
	goto $label$6 
	
.LABEL $label$9
	if ( ($7 == 0) ){ goto $label$6 }
	$7 = ($0 + [24])
	*(($17 = ($18 + [24]))) = *($7)
	$10 = ($0 + [16])
	*(($8 = ($18 + [16]))) = *($10)
	$12 = ($0 + [8])
	*(($9 = ($18 + [8]))) = *($12)
	*($18) = *($0)
	$11 = ($3 + [24])
	*($7) = *($11)
	$13 = ($3 + [16])
	*($10) = *($13)
	$14 = ($3 + [8])
	*($12) = *($14)
	*($0) = *($3)
	*($11) = *($17)
	*($13) = *($8)
	*($14) = *($9)
	*($3) = *($18)
	if ( (CALL int_32 $0((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$6 }
	$2 = ($5 + [24])
	*($17) = *($2)
	$11 = ($5 + [16])
	*($8) = *($11)
	$13 = ($5 + [8])
	*($9) = *($13)
	*($18) = *($5)
	*($2) = *($7)
	*($11) = *($10)
	*($13) = *($12)
	*($5) = *($0)
	*($7) = *($17)
	*($10) = *($8)
	*($12) = *($9)
	*($0) = *($18)
	goto $label$6 
	
.LABEL $label$8
	$9 = ($5 + [24])
	*(($17 = ($18 + [24]))) = *($9)
	$12 = ($5 + [16])
	*(($7 = ($18 + [16]))) = *($12)
	$11 = ($5 + [8])
	*(($8 = ($18 + [8]))) = *($11)
	*($18) = *($5)
	$10 = ($0 + [24])
	*($9) = *($10)
	$9 = ($0 + [16])
	*($12) = *($9)
	$12 = ($0 + [8])
	*($11) = *($12)
	*($5) = *($0)
	*($10) = *($17)
	*($9) = *($7)
	*($12) = *($8)
	*($0) = *($18)
	if ( (CALL int_32 $3((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$6 }
	*($17) = *($10)
	*($7) = *($9)
	*($8) = *($12)
	*($18) = *($0)
	$2 = ($3 + [24])
	*($10) = *($2)
	$5 = ($3 + [16])
	*($9) = *($5)
	$10 = ($3 + [8])
	*($12) = *($10)
	*($0) = *($3)
	*($2) = *($17)
	*($5) = *($7)
	*($10) = *($8)
	*($3) = *($18)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($5 + [32])
	if ( ((uint_32)$8 >= (uint_32)$17) ){ goto $label$32 }
	
.LOOP $label$33:
	$0 = ($8 + [-32])
	
.LOOP $label$34:
	$0 = ($0 + [32])
	if ( CALL int_32 $0((int_32 $7), (int_32 *($2))) ){ goto $label$34 }
	$8 = ($0 + [32])
	
.LOOP $label$35:
	$17 = ($17 + [-32])
	if ( (CALL int_32 $17((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$35 }
	if ( ((uint_32)$0 > (uint_32)$17) ){ goto $label$36 }
	$12 = ($0 + [24])
	*(($9 = ($18 + [24]))) = *($12)
	$13 = ($0 + [16])
	*(($11 = ($18 + [16]))) = *($13)
	$15 = ($0 + [8])
	*(($14 = ($18 + [8]))) = *($15)
	*($18) = *($0)
	$16 = ($17 + [24])
	*($12) = *($16)
	$12 = ($17 + [16])
	*($13) = *($12)
	$13 = ($17 + [8])
	*($15) = *($13)
	*($0) = *($17)
	*($17) = *($18)
	*($16) = *($9)
	*($12) = *($11)
	*($13) = *($14)
	$7 = ( $17 ? $7 : ((int_32)$7 == (int_32)$0) )
	$10 = ($10 + [1])
	goto $label$33 
	
.LABEL $label$36
	$8 = $0
	
.LABEL $label$32
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$37 }
	if ( (CALL int_32 $7((int_32 $8), (int_32 *($2))) == 0) ){ goto $label$37 }
	$17 = ($8 + [24])
	*(($0 = ($18 + [24]))) = *($17)
	$12 = ($8 + [16])
	*(($9 = ($18 + [16]))) = *($12)
	$13 = ($8 + [8])
	*(($11 = ($18 + [8]))) = *($13)
	*($18) = *($8)
	$14 = ($7 + [24])
	*($17) = *($14)
	$17 = ($7 + [16])
	*($12) = *($17)
	$12 = ($7 + [8])
	*($13) = *($12)
	*($8) = *($7)
	*($7) = *($18)
	*($14) = *($0)
	*($17) = *($9)
	*($12) = *($11)
	$10 = ($10 + [1])
	
.LABEL $label$37
	if ( $10 ){ goto $label$39 }
	$17 = CALL $54($5, $8, $2)
	$0 = ($8 + [32])
	if ( CALL $54($0, $1, $2) ){ goto $label$38 }
	if ( $17 ){ goto $label$2 }
	
.LABEL $label$39
	if ( ((int_32)($8 - $5) >= (int_32)($1 - $8)) ){ goto $label$3 }
	CALL $31($5, $8, $2)
	$5 = ($8 + [32])
	goto $label$4 
	
.LABEL $label$38
	$1 = $8
	$0 = $5
	if ( ($17 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	*([0] + [4]) = ($18 + [32])
	return 
	
.LABEL $label$5
	$5 = $7
	goto $label$4 
	
.LABEL $label$3
	CALL $31(($8 + [32]), $1, $2)
	$1 = $8
	$0 = $5
	goto $label$1 
	$17
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1968])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $93($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [848])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $128($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [848])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}