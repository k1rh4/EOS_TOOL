(data (i32.const 8232) "failed to allocate pages\00unexpected error in fixed_bytes constructor\00active seed is already exists\00")
(data (i32.const 8336) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 8416) "active\00")
(data (i32.const 8423) "already registered member.\00")
(data (i32.const 8450) "resultseed\00")
(data (i32.const 8461) "not exists.\00")
(data (i32.const 8473) "seed contract : active seed table is not exists.\00")
(data (i32.const 8522) "invalid request id\00")
(data (i32.const 8541) "invalid request seed member.\00")
(data (i32.const 8570) "invalid seed member.\00")
(data (i32.const 8591) "string is too long to be a valid name\00")
(data (i32.const 8629) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8696) "character is not in allowed character set for names\00")
(data (i32.const 8748) "write\00")
(data (i32.const 8754) "eosio\00")
(data (i32.const 8760) "singleton does not exist\00")
(data (i32.const 8785) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8836) "error reading iterator\00")
(data (i32.const 8859) "read\00")
(data (i32.const 8864) "seed contract : buffer size is exceeded.\00")
(data (i32.const 8905) "get\00")
(data (i32.const 8909) "EOS\00")
(data (i32.const 8913) "not found symbol \00")
(data (i32.const 8931) " \00")
(data (i32.const 8933) ",\00")
(data (i32.const 8935) "invalid symbol name\00")
(data (i32.const 8955) "string is too long to be a valid symbol_code\00")
(data (i32.const 9000) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9053) "cannot create objects in table of another contract\00")
(data (i32.const 9104) "cannot pass end iterator to erase\00")
(data (i32.const 9138) "cannot increment end iterator\00")
(data (i32.const 9168) "object passed to erase is not in multi_index\00")
(data (i32.const 9213) "cannot erase objects in table of another contract\00")
(data (i32.const 9263) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9316) "%lld%s%s %s\00")
(data (i32.const 9328) ".\00")
(data (i32.const 9331) "cannot pass end iterator to modify\00")
(data (i32.const 9366) "object passed to modify is not in multi_index\00")
(data (i32.const 9412) "cannot modify objects in table of another contract\00")
(data (i32.const 9463) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9522) "unexpected error in fixed_bytes constructor\00")
(data (i32.const 0) "`%\00\00")
(import "env" "db_find_i64" (func $fimport$0 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "abort" (func $fimport$3))
(import "env" "memset" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "send_deferred" (func $fimport$6 (param i32 i64 i32 i32 i32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$7 (param i32 i32)))
(import "env" "memcpy" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "set_proposed_producers" (func $fimport$10 (param i32 i32) (result i64)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "get_active_producers" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$13 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "cancel_deferred" (func $fimport$15 (param i32) (result i32)))
(import "env" "require_auth" (func $fimport$16 (param i64)))
(import "env" "assert_sha256" (func $fimport$17 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$18 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$19 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$20 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$21 (param i32 i32 i32)))
(import "env" "__ashlti3" (func $fimport$22 (param i32 i64 i64 i32)))
(import "env" "sha1" (func $fimport$23 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$24 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$25 (param i32 i32 i32)))
(import "env" "recover_key" (func $fimport$26 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$27 (param i32 i32 i32 i32 i32)))
(import "env" "prints" (func $fimport$28 (param i32)))
(import "env" "printui" (func $fimport$29 (param i64)))
(import "env" "printi" (func $fimport$30 (param i64)))
(import "env" "printn" (func $fimport$31 (param i64)))
(import "env" "prints_l" (func $fimport$32 (param i32 i32)))
(import "env" "read_transaction" (func $fimport$33 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$34 (param i32 i32)))
(import "env" "db_idx64_store" (func $fimport$35 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "printhex" (func $fimport$36 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$37 (result i32)))
(import "env" "read_action_data" (func $fimport$38 (param i32 i32) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$39 (param i32 i64)))
(import "env" "db_get_i64" (func $fimport$40 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$41 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$42 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$43 (param i32 i32)))
(import "env" "__multf3" (func $fimport$44 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$45 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$46 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$47 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$48 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$49 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$50 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$51 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$52 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$53 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$54 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$55 (param i64 i64) (result f32)))
(import "env" "__unordtf2" (func $fimport$56 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$57 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$58 (param i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$59 (param i32)))
(import "env" "db_idx64_find_primary" (func $fimport$60 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$61 (param i32)))
(import "env" "db_update_i64" (func $fimport$62 (param i32 i64 i32 i32)))
(import "env" "db_idx64_update" (func $fimport$63 (param i32 i64 i32)))
(export "apply" (func $76))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $22 $24 $65 $54 $50 $73 $74 $75)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 9566))
(global $global$2 i32 (i32.const 9566))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $7(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $15($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$8 = ($7 + ($6 << [4]))
	$9 = ($7 + ($3 << [4]))
	$6 = $9
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$10 = ($9 + ($1 << [4]))
	$6 = *($0)
	$11 = ($0 + [4])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$10 }
	$13 = (($3 + [-1]) - uint_32((($12 + [-16]) - $6) >> [4]))
	$14 = ($6 - $12)
	$6 = [0]
	
.LOOP $label$11:
	*(($3 = (($2 = ($9 + $6)) + [-12]))) = (int_64)0
	*(($4 = ($2 + [-4]))) = [0]
	$1 = ($12 + $6)
	$5 = ($1 + [-12])
	*($3) = *($5)
	$3 = ($1 + [-4])
	*($4) = *($3)
	*(($2 + [-16])) = *(($1 + [-16]))
	*($3) = [0]
	*($5) = (int_64)0
	$6 = ($6 + [-16])
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$11 }
	$9 = ($7 + ($13 << [4]))
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $6
	
.LABEL $label$9
	*($0) = $9
	*($11) = $10
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($6 + [-16])
	$1 = *(($6 + [-12]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-8])) = $1
	CALL $9($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$15 }
	CALL $9($3)
	
.LABEL $label$15
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8905])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $40($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8859])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8748])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8748])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8748])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	CALL $97($0, $1)
	$2 = ($1 + [88])
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8859])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $3, [8])
	$2 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $2
	$4 = ($1 + [96])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8859])
	$2 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	$2 = (*($3) + [8])
	*($3) = $2
	$3 = ($1 + [104])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8859])
	$2 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $2, [8])
	$2 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $2
	$4 = ($1 + [112])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [8859])
	$2 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, $2, [4])
	$2 = (*($3) + [4])
	*($3) = $2
	$3 = ($1 + [120])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8859])
	$2 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $2, [8])
	$2 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $2
	$4 = ($1 + [128])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8859])
	$2 = *($3)
	
.LABEL $label$6
	CALL memcpy($4, $2, [8])
	$2 = (*($3) + [8])
	*($3) = $2
	$3 = ($1 + [136])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8859])
	$2 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $2, [8])
	$2 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $2
	$4 = ($1 + [144])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[3]) ){ goto $label$8 }
	CALL eosio_assert([0], [8859])
	$2 = *($3)
	
.LABEL $label$8
	CALL memcpy($4, $2, [4])
	$2 = (*($3) + [4])
	*($3) = $2
	$3 = ($1 + [152])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [8859])
	$2 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($3, $2, [8])
	$2 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $2
	$4 = ($1 + [160])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [8859])
	$2 = *($3)
	
.LABEL $label$10
	CALL memcpy($4, $2, [8])
	$2 = (*($3) + [8])
	*($3) = $2
	$3 = ($1 + [168])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[1]) ){ goto $label$11 }
	CALL eosio_assert([0], [8859])
	$2 = *(($0 + [4]))
	
.LABEL $label$11
	CALL memcpy($3, $2, [2])
	$2 = (*($3) + [2])
	*(($3 = ($0 + [4]))) = $2
	$4 = ($1 + [176])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [8859])
	$2 = *($3)
	
.LABEL $label$12
	CALL memcpy($4, $2, [8])
	$2 = (*($3) + [8])
	*($3) = $2
	$1 = ($1 + [184])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[3]) ){ goto $label$13 }
	CALL eosio_assert([0], [8859])
	$2 = *(($0 + [4]))
	
.LABEL $label$13
	CALL memcpy($1, $2, [4])
	*(($1 = ($0 + [4]))) = (*($1) + [4])
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $15($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8859])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [8859])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$2 = ($1 + [12])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [8859])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [4])
	$3 = (*($2) + [4])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [16])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [8859])
	$3 = *($2)
	
.LABEL $label$4
	CALL memcpy($4, $3, [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$2 = ($1 + [20])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [8859])
	$3 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $3, [4])
	$3 = (*($2) + [4])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [24])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [8859])
	$3 = *($2)
	
.LABEL $label$6
	CALL memcpy($4, $3, [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$2 = ($1 + [28])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [8859])
	$3 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($2, $3, [4])
	$3 = (*($2) + [4])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [32])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$8 }
	CALL eosio_assert([0], [8859])
	$3 = *($2)
	
.LABEL $label$8
	CALL memcpy($4, $3, [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$2 = ($1 + [36])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$9 }
	CALL eosio_assert([0], [8859])
	$3 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($2, $3, [4])
	$3 = (*($2) + [4])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [40])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$10 }
	CALL eosio_assert([0], [8859])
	$3 = *($2)
	
.LABEL $label$10
	CALL memcpy($4, $3, [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$2 = ($1 + [44])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$11 }
	CALL eosio_assert([0], [8859])
	$3 = *(($0 + [4]))
	
.LABEL $label$11
	CALL memcpy($2, $3, [4])
	$3 = (*($2) + [4])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [64])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$12 }
	CALL eosio_assert([0], [8859])
	$3 = *($2)
	
.LABEL $label$12
	CALL memcpy($4, $3, [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$2 = ($1 + [68])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$13 }
	CALL eosio_assert([0], [8859])
	$3 = *(($0 + [4]))
	
.LABEL $label$13
	CALL memcpy($2, $3, [4])
	$3 = (*($2) + [4])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [72])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$14 }
	CALL eosio_assert([0], [8859])
	$3 = *($2)
	
.LABEL $label$14
	CALL memcpy($4, $3, [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$2 = ($1 + [76])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$15 }
	CALL eosio_assert([0], [8859])
	$3 = *(($0 + [4]))
	
.LABEL $label$15
	CALL memcpy($2, $3, [4])
	$3 = (*($2) + [4])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [80])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[1]) ){ goto $label$16 }
	CALL eosio_assert([0], [8859])
	$3 = *($2)
	
.LABEL $label$16
	CALL memcpy($4, $3, [2])
	$3 = (*($2) + [2])
	*($2) = $3
	$1 = ($1 + [82])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[1]) ){ goto $label$17 }
	CALL eosio_assert([0], [8859])
	$3 = *(($0 + [4]))
	
.LABEL $label$17
	CALL memcpy($1, $3, [2])
	*(($1 = ($0 + [4]))) = (*($1) + [2])
	return $0
}

void .FUNC $90 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [160])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [28])) = $4
	$5 = ($4 + $5)
	*(($3 + [32])) = $5
	*(($3 + [48])) = $1
	*(($3 + [56])) = $4
	*(($3 + [60])) = $4
	*(($3 + [64])) = $5
	*(($3 + [72])) = $0
	*(($3 + [88])) = $0
	*(($3 + [96])) = (int_64)-1
	*(($6 = ($3 + [104]))) = (int_64)0
	*(($3 + [112])) = [0]
	*(($3 + [116])) = [0]
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $4
	*($3 + [40]) = $0
	*($3 + [80]) = $0
	*($3 + [120]) = $0
	*(($3 + [136])) = (int_64)-1
	*(($3 + [128])) = $0
	*(($4 = ($3 + [144]))) = (int_64)0
	*(($3 + [152])) = [0]
	CALL $75(($3 + [8]))
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$4 }
	$8 = ($3 + [148])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	$2 = *($4 + [28])
	if ( ($2 == 0) ){ goto $label$9 }
	*(($4 + [32])) = $2
	CALL $9($2)
	
.LABEL $label$9
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $2
	CALL $9($2)
	
.LABEL $label$10
	CALL $9($4)
	
.LABEL $label$8
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$7 }
	$4 = *(($3 + [144]))
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($8) = $7
	CALL $9($4)
	
.LABEL $label$4
	$2 = *($6)
	if ( ($2 == 0) ){ goto $label$11 }
	$7 = ($3 + [108])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $9($5)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($3 + [104]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $2
	
.LABEL $label$12
	*($7) = $2
	CALL $9($4)
	
.LABEL $label$11
	$global$0 = ($3 + [160])
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [8748])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [4])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [8748])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [2])
	$4 = (*($3) + [2])
	*($3) = $4
	$3 = ($1 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [8748])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [4])
	$3 = (*($4) + [4])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [12])
	$8 = ($0 + [8])
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [8748])
	$3 = *($4)
	
.LABEL $label$5
	CALL memcpy($3, ($2 + [14]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$4 }
	$4 = ($1 + [16])
	$8 = ($0 + [8])
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [8748])
	$3 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $4, [1])
	$3 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [20])
	
.LOOP $label$7:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [8748])
	$3 = *($4)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$7 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8748])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$7 = ($0 + [4])
	$1 = ($0 + [8])
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$5 }
	$8 = [2]
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	goto $label$3 
	
.LABEL $label$4
	$8 = [3]
	
.LABEL $label$3
	
.LOOP $label$6:
	goto $label$10 
	
.LABEL $label$12
	$4 = *($7)
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$7 }
	$8 = [2]
	goto $label$6 
	
.LABEL $label$11
	CALL eosio_assert([0], [8748])
	$4 = *($7)
	$8 = [0]
	goto $label$6 
	
.LABEL $label$10
	CALL memcpy($4, $6, [2])
	*($7) = (*($7) + [2])
	CALL $93($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$8 = [3]
	goto $label$6 
	
.LABEL $label$9
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$8
	$8 = [1]
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	goto $label$6 
	return $8
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8748])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [8748])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	*($2 + [11]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [10]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [9]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [8]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$4 = *(($1 + [8]))
	*($2 + [3]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [2]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [1]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2) = (uint_64)$4 >> (uint_64)(int_64)56)
	$5 = (CASTING uint_32)(uint_64 $3)
	*($2 + [15]) = $5
	*($2 + [14]) = uint_32($5 >> [8])
	*($2 + [13]) = uint_32($5 >> [16])
	*($2 + [12]) = uint_32($5 >> [24])
	$5 = (CASTING uint_32)(uint_64 $4)
	*($2 + [7]) = $5
	*($2 + [6]) = uint_32($5 >> [8])
	*($2 + [5]) = uint_32($5 >> [16])
	*($2 + [4]) = uint_32($5 >> [24])
	$3 = *(($1 + [24]))
	*($2 + [23]) = $3
	$4 = *($1 + [16])
	*($2 + [27]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [26]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [25]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2 + [24]) = (uint_64)$4 >> (uint_64)(int_64)56)
	*($2 + [19]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [18]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [17]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [16]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$1 = (CASTING uint_32)(uint_64 $3)
	*($2 + [22]) = uint_32($1 >> [8])
	*($2 + [21]) = uint_32($1 >> [16])
	*($2 + [20]) = uint_32($1 >> [24])
	$1 = (CASTING uint_32)(uint_64 $4)
	*($2 + [31]) = $1
	*($2 + [30]) = uint_32($1 >> [8])
	*($2 + [29]) = uint_32($1 >> [16])
	*($2 + [28]) = uint_32($1 >> [24])
	$1 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [8748])
	$1 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [32])
	*(($1 = ($0 + [4]))) = (*($1) + [32])
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8748])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$3 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8748])
	$4 = *($7)
	
.LABEL $label$5
	CALL memcpy($4, $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [5])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$3 }
	$6 = [134217727]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$6 = int_32($7 >> [4])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL $7(($6 << [5]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $15($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [5])))) = *($1)
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [5]))
	$4 = ($4 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $9($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL $7(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $15($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $9($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL $9($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL $9($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL $9($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL $9($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL $9($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL $9($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL $9($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL $9($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9168])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9213])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [9263])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $9($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $9($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
	$9 = *(($1 + [48]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$16 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4425744126933864448, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($9)
	
.LABEL $label$15
	$global$0 = ($2 + [16])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8836])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL $7([56])) + [40]) = $0
	*($5) = (int_64)0
	CALL $112(($3 + [32]), $5)
	*($5 + [48]) = [-1]
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $67(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $15($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8836])
	
.LABEL $label$5
	$2 = CALL $1($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $7([32])) + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[15]) ){ goto $label$7 }
	CALL eosio_assert([0], [8859])
	
.LABEL $label$7
	CALL memcpy($5, $2, [16])
	*($5 + [20]) = $1
	*($3 + [40]) = $5
	*($3 + [24]) = *(($5 + [8]))
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = $7
	*($4 + [16]) = $1
	*($3 + [40]) = [0]
	*($4) = $5
	*($8) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $43(($0 + [24]), ($3 + [40]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($2)
	
.LABEL $label$8
	$1 = *($3 + [40])
	*($3 + [40]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $9($1)
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $91($0, $1)
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8748])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [14]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *(($1 + [28]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $64($0, $6)
	$6 = ($6 + [40])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [40])) - *($1 + [36])) / (int_32)[40]))
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$5:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [8748])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$5 }
	$6 = *(($1 + [40]))
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $64($0, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = CALL $92($0, ($1 + [48]))
	$global$0 = ($2 + [16])
	return $4
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $7($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $15($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $9($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = ($0 + [80])
	$3 = CALL db_lowerbound_i64(*($0 + [72]), *($2), (int_64)-4425744126933864448, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = ($0 + [72])
	
.LOOP $label$2:
	$3 = CALL $48($0, $3)
	$4 = CALL db_next_i64(*($3 + [44]), ($1 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL $48($0, $4)
	
.LABEL $label$3
	CALL $49($0, $3)
	$3 = CALL db_lowerbound_i64(*($0), *($2), (int_64)-4425744126933864448, (int_64)0)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL $7(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $15($0)
	
.LABEL $label$1
	$6 = ($2 + ((int_32)$5 * (int_32)[40]))
	$7 = ($2 + ((int_32)$3 * (int_32)[40]))
	$2 = CALL $113($7, $1)
	$8 = ($2 + [40])
	$5 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$6 }
	$10 = ($5 - $9)
	$1 = [0]
	
.LOOP $label$7:
	$2 = ($9 + $1)
	*((($5 = ($7 + $1)) + [-32])) = *(($2 + [-32]))
	*(($5 + [-40])) = *(($2 + [-40]))
	*(($3 = ($5 + [-24]))) = (int_64)0
	*(($4 = ($5 + [-16]))) = [0]
	$11 = ($2 + [-24])
	*($3) = *($11)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($5 + [-12]))) = (int_64)0
	*(($5 = ($5 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($11) = (int_64)0
	$2 = ($2 + [-4])
	*($5) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$7 }
	$2 = ($7 + $1)
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($5 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($5 + [-8])) = $2
	CALL $9($2)
	
.LABEL $label$10
	$2 = ($5 + [-40])
	$1 = *(($5 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [-20])) = $1
	CALL $9($1)
	
.LABEL $label$11
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$12 }
	CALL $9($3)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9168])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9213])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$8 = *(($1 + [8]))
	$7 = *($1)
	$6 = *(($4 + [-24]))
	if ( (int_64)(((int_64)((int_64)*($6) ^ (int_64)$7) | (int_64)((int_64)*(($6 + [8])) ^ (int_64)$8)) == 0) ){ goto $label$9 }
	$9 = ($2 + [24])
	$5 = $4
	
.LOOP $label$10:
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$8 }
	$6 = ($5 + [-48])
	$5 = ($5 + [-24])
	$6 = *($6)
	if ( ((int_64)(((int_64)((int_64)*($6) ^ (int_64)$7) | (int_64)((int_64)*(($6 + [8])) ^ (int_64)$8)) == 0) == 0) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [9263])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$6 = $5
	
.LOOP $label$11:
	$2 = *($6)
	*($6) = [0]
	$3 = ($6 + $9)
	$5 = *($3)
	*($3) = $2
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $9($5)
	
.LABEL $label$12
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$11 }
	$2 = ($6 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $9($6)
	
.LABEL $label$14
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $2
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $44 (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [32])) = [0]
	*($1 + [8]) = $0
	*($1) = $0
	*($1 + [16]) = (int_64)-1
	*($1 + [24]) = (int_64)0
	$2 = CALL db_lowerbound_i64($0, $0, (int_64)5374672172214124544, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($1 + [8])
	
.LOOP $label$2:
	$2 = CALL $42($1, $2)
	CALL cancel_deferred($2)
	$4 = CALL db_next_i64(*($2 + [20]), ($1 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL $42($1, $4)
	
.LABEL $label$3
	CALL $45($1, $2)
	$2 = CALL db_lowerbound_i64(*($1), *($3), (int_64)5374672172214124544, (int_64)0)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$2 }
	$3 = *($1 + [24])
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($1 + [28])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $9($4)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($1 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $3
	
.LABEL $label$4
	*($5) = $3
	CALL $9($2)
	
.LABEL $label$1
	$global$0 = ($1 + [48])
}

int_32 .FUNC $8 (int_32 $0)
{
	return CALL $7($0)
}

void .FUNC $9 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

int_32 .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $4())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $5($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $1($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $1($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $4 ()
{
	return [8208]
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $1($1)
	
.LABEL $label$2
	*(CALL $4()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $1(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $2($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $2 (int_32 $0)
{
}

void .FUNC $3 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

void .FUNC $0 ()
{
	CALL $3()
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8232])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	CALL $13($0, $1)
}

void .FUNC $15 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_64 .FUNC $16 ()
{
	int_64 $0
	if ( (*([0] + [8220]) == 0) ){ goto $label$1 }
	return *([0] + [8224])
	
.LABEL $label$1
	$0 = CALL current_time()
	*([0] + [8220]) = [1]
	*([0] + [8224]) = $0
	return $0
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $10 (int_32 $0)
{
	CALL $9($0)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $6(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $6(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	return CALL $11($0, $1)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

void .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	$1 = ($global$0 - [176])
	$global$0 = $1
	CALL $44(*($0))
	$2 = ($0 + [80])
	$3 = CALL db_lowerbound_i64(*($0 + [72]), *($2), (int_64)-4425744126933864448, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = ($0 + [72])
	$5 = (($1 + [96]) + [36])
	$6 = (($1 + [40]) + [8])
	$7 = (($1 + [56]) + [28])
	$8 = ($1 + [80])
	$9 = (($1 + [56]) + [20])
	$10 = ($1 + [88])
	$11 = ($1 + [108])
	$12 = ($1 + [140])
	$13 = ($1 + [148])
	$14 = (int_64)0
	
.LOOP $label$3:
	$3 = CALL $48($4, $3)
	$15 = *($0)
	$16 = *($3)
	*($6) = $16
	*((($1 + [56]) + [8])) = (int_64)-3841117306037993472
	*(($17 = (($1 + [56]) + [16]))) = (int_64)0
	*($8) = [0]
	*($1 + [40]) = $15
	*($1 + [56]) = $15
	$3 = CALL $7([16])
	*($17) = $3
	*($3) = $15
	*($3 + [8]) = (int_64)3617214756542218240
	*($7) = (int_64)0
	*((($1 + [56]) + [36])) = [0]
	$3 = ($3 + [16])
	*($8) = $3
	*($9) = $3
	CALL $40($7, [16])
	$14 = ((int_64)$14 + (int_64)1)
	$18 = ((uint_64)$14 / (uint_64)(int_64)20)
	$3 = *($7)
	$19 = (*($10) - $3)
	if ( ((int_32)$19 > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8748])
	
.LABEL $label$4
	$20 = (CASTING uint_32)(uint_64 $18)
	CALL memcpy($3, ($1 + [40]), [8])
	$3 = ($3 + [8])
	if ( ((int_32)($19 + [-8]) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8748])
	
.LABEL $label$5
	CALL memcpy($3, $6, [8])
	*($1 + [168]) = $16
	*($1 + [160]) = $14
	$16 = CALL $16()
	*($11) = [0]
	*((($1 + [96]) + [16])) = [0]
	*(($3 = (($1 + [96]) + [20]))) = (int_64)0
	*((($1 + [96]) + [28])) = (int_64)0
	*($5) = (int_64)0
	*($12) = (int_64)0
	*($13) = (int_64)0
	*($1 + [96]) = ((CASTING uint_32)(uint_64 ((int_64)$16 / (int_64)1000000)) + [60])
	CALL $46($5, ($1 + [56]))
	*($3) = $20
	CALL $37(($1 + [96]), ($1 + [160]), $15, [0])
	CALL $38(($1 + [96]))
	$3 = *($7)
	if ( ($3 == 0) ){ goto $label$6 }
	*($10) = $3
	CALL $9($3)
	
.LABEL $label$6
	$3 = *($17)
	if ( ($3 == 0) ){ goto $label$7 }
	*($9) = $3
	CALL $9($3)
	
.LABEL $label$7
	$3 = CALL db_lowerbound_i64(*($4), *($2), (int_64)-4425744126933864448, (int_64)0)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$14 = (int_64)0
	
.LABEL $label$1
	*($1 + [8]) = (int_64)4851652650024304640
	$15 = *($0)
	*($1) = $15
	*(($7 = CALL $7([16]))) = $15
	*($7 + [8]) = (int_64)3617214756542218240
	*(($1 + [36])) = [0]
	$3 = ($7 + [16])
	*(($1 + [24])) = $3
	*(($1 + [20])) = $3
	*($1 + [16]) = $7
	*($1 + [28 align=4]) = (int_64)0
	*($1 + [168]) = ((int_64)$15 | (int_64)0)
	*($1 + [160]) = $14
	$14 = CALL $16()
	*(($1 + [124])) = (int_64)0
	*(($1 + [140])) = (int_64)0
	*(($1 + [148])) = (int_64)0
	*($1 + [108]) = [0]
	*($1 + [112]) = [0]
	*($1 + [116 align=4]) = (int_64)0
	*($1 + [132 align=4]) = (int_64)0
	*($1 + [96]) = ((CASTING uint_32)(uint_64 ((int_64)$14 / (int_64)1000000)) + [60])
	CALL $46((($1 + [96]) + [36]), $1)
	*($1 + [116]) = [5]
	CALL $37(($1 + [96]), ($1 + [160]), $15, [0])
	CALL $38(($1 + [96]))
	$7 = *($1 + [28])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($1 + [32])) = $7
	CALL $9($7)
	
.LABEL $label$8
	$7 = *($1 + [16])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($1 + [20])) = $7
	CALL $9($7)
	
.LABEL $label$9
	$global$0 = ($1 + [176])
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL sha256($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [8257])
	
.LABEL $label$4
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$5 }
	if ( ($1 <= [2]) ){ goto $label$6 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$6
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$5
	$global$0 = ($3 + [48])
}

void .FUNC $19 (int_32 $0)
{
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$2 = $10
	$global$0 = $2
	*(($11 = ($10 + $5))) = [0]
	$12 = *($1)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : ((int_64)$12 < (int_64)0) ) * (int_64)((int_64)$12 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($11 + [-1])
	
.LOOP $label$5:
	$13 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$13 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $13
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$11 = ($2 - (($5 + [47]) & [496]))
	$global$0 = $11
	$14 = ( [9328] ? [9330] : *($10) )
	$9 = ((int_64)$12 / (int_64)$9)
	$15 = ($5 + [32])
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL $7($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*(($3 + [16])) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	*($3 + [12]) = $10
	*($3 + [8]) = $14
	*($3) = $9
	CALL $25($11, $15, [9316], $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $17($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL $7($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $26($0)
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[15]) ){ goto $label$1 }
	CALL eosio_assert([0], [8748])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [16])
	*(($3 = ($3 + [4]))) = (*($3) + [16])
	$4 = *($0)
	$2 = ($4 + [16])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8748])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $115(*($1), ($4 + [32]))
}

void .FUNC $50 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [112])
	$global$0 = $2
	*($2 + [64]) = $1
	CALL require_auth(*($0))
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	if ( ((int_32)*($7 + [40]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [8785])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-4425744126933864448, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	if ( ((int_32)*(CALL $48($3, $6) + [40]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [8785])
	
.LABEL $label$2
	CALL eosio_assert([0], [8423])
	
.LABEL $label$1
	*($2 + [56]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2 + [40]) = [8450]
	*($2 + [44]) = CALL $17([8450])
	*($2) = *($2 + [40])
	$6 = CALL $36(($2 + [8]), $2)
	*($2 + [32]) = (int_64)0
	*($2 + [80]) = [0]
	*($2 + [72]) = (int_64)0
	CALL $31((int_64)0, (int_64)0, [1000], $0, ($2 + [64]), $6, ($2 + [32]), ($2 + [72]), [1])
	$4 = *($2 + [72])
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = *($2 + [76])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = ($5 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$10 }
	CALL $9(*(($5 + [-4])))
	
.LABEL $label$10
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$9 }
	$6 = *($2 + [72])
	goto $label$7 
	
.LABEL $label$8
	$6 = $4
	
.LABEL $label$7
	*($2 + [76]) = $4
	CALL $9($6)
	
.LABEL $label$6
	*($2 + [8]) = *($2 + [64])
	$1 = *($0)
	*(($6 = CALL $7([16]))) = $1
	*($6 + [8]) = (int_64)3617214756542218240
	$5 = ($6 + [16])
	*((($2 + [8]) + [16])) = $5
	*(($2 + [20])) = $5
	*($2 + [16]) = $6
	CALL $51(($2 + [72]), ($2 + [8]), ($2 + [48]), $0)
	CALL $52(($2 + [72]))
	$6 = *($2 + [100])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($2 + [104])) = $6
	CALL $9($6)
	
.LABEL $label$11
	$6 = *($2 + [88])
	if ( ($6 == 0) ){ goto $label$12 }
	*(($2 + [92])) = $6
	CALL $9($6)
	
.LABEL $label$12
	$6 = *($2 + [16])
	if ( ($6 == 0) ){ goto $label$13 }
	*(($2 + [20])) = $6
	CALL $9($6)
	
.LABEL $label$13
	$global$0 = ($2 + [112])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = [0]
	*($4 + [32]) = (int_64)0
	$5 = (*(($1 + [12])) - *($1 + [8]))
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = int_32($5 >> [4])
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$1 }
	$5 = CALL $7($5)
	*((($4 + [32]) + [8])) = ($5 + ($6 << [4]))
	*($4 + [32]) = $5
	*($4 + [36]) = $5
	$7 = *(($1 + [8]))
	$6 = (*(($1 + [12])) - $7)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $7, $6)
	*($4 + [36]) = ($5 + $6)
	
.LABEL $label$2
	$8 = *($1)
	*($4 + [8]) = *(($2 + [8]))
	*($4) = *($2)
	*($4 + [16]) = *($3)
	CALL $114($0, ($4 + [32]), $8, (int_64)7108557744776582288, $4)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$3 }
	*($4 + [36]) = $1
	CALL $9($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $15(($4 + [32]))
}

void .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $40($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $64(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $9($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $53 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$6 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	if ( ((int_32)*($7 + [40]) == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [8785])
	if ( $7 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-4425744126933864448, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $48($3, $6)
	if ( ((int_32)*($7 + [40]) == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [8785])
	
.LABEL $label$4
	if ( $7 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [8461])
	
.LABEL $label$2
	CALL eosio_assert([0], [9104])
	CALL eosio_assert([0], [9138])
	
.LABEL $label$1
	$6 = CALL db_next_i64(*($7 + [44]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	CALL $48($3, $6)
	
.LABEL $label$8
	CALL $49($3, $7)
	CALL $47($0)
	$global$0 = ($2 + [16])
}

void .FUNC $54 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$4 = ($global$0 - [624])
	$global$0 = $4
	$5 = [0]
	*(($4 + [584])) = [0]
	*($4 + [560]) = $3
	*($4 + [552]) = $3
	*($4 + [568]) = (int_64)-1
	*($4 + [576]) = (int_64)0
	$6 = CALL db_find_i64($3, $3, (int_64)3617214769600282624, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $32(($4 + [552]), $6)
	if ( ((int_32)*($5 + [68]) == (int_32)($4 + [552])) ){ goto $label$1 }
	CALL eosio_assert([0], [8785])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8473])
	
.LABEL $label$1
	CALL require_auth($3)
	*((($4 + [512]) + [24])) = (int_64)0
	*((($4 + [512]) + [16])) = (int_64)0
	*($4 + [520]) = (int_64)0
	*($4 + [512]) = (int_64)0
	*(($6 = (($4 + [336]) + [24]))) = (int_64)0
	*(($7 = (($4 + [336]) + [16]))) = (int_64)0
	*(($8 = ($4 + [392]))) = (int_64)0
	*(($9 = ($4 + [384]))) = (int_64)0
	*(($10 = ($4 + [376]))) = (int_64)0
	*(($4 + [424])) = (int_64)0
	*(($4 + [416])) = (int_64)0
	*(($4 + [408])) = (int_64)0
	*(($4 + [456])) = (int_64)0
	*(($4 + [448])) = (int_64)0
	*(($4 + [440])) = (int_64)0
	*(($4 + [488])) = (int_64)0
	*(($4 + [480])) = (int_64)0
	*(($4 + [472])) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [368]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [464]) = (int_64)0
	*($4 + [496]) = (int_64)0
	*(($4 + [504])) = (int_64)0
	CALL $55(($4 + [144]))
	CALL $18(($4 + [16]), ($4 + [144]), [192])
	$11 = (($4 + [16]) + [24])
	*($6) = *($11)
	$6 = (($4 + [16]) + [16])
	*($7) = *($6)
	*($4 + [344]) = *($4 + [24])
	*($4 + [336]) = *($4 + [16])
	CALL $56(($4 + [16]))
	*($8) = *($11)
	*($9) = *($6)
	*($10) = *($4 + [24])
	*($4 + [368]) = *($4 + [16])
	$6 = CALL $17([8909])
	if ( ($6 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8955])
	goto $label$5 
	
.LABEL $label$6
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$12 = (int_64)0
	
.LOOP $label$7:
	$7 = *(($6 + [8908]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9000])
	
.LABEL $label$8
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$7 }
	$13 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)4)
	goto $label$3 
	
.LABEL $label$4
	$13 = (int_64)4
	
.LABEL $label$3
	*(($4 + [48])) = [0]
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	*($4 + [24]) = $3
	*($4 + [16]) = (int_64)6138663591592764928
	$12 = (uint_64)$13 >> (uint_64)(int_64)8
	$6 = CALL db_find_i64((int_64)6138663591592764928, $3, (int_64)3607749779137757184, $12)
	if ( ((int_32)$6) < (int_32)[0]) ){ goto $label$11 }
	$6 = CALL $57(($4 + [16]), $6)
	if ( ((int_32)*($6 + [16]) == (int_32)($4 + [16])) ){ goto $label$12 }
	CALL eosio_assert([0], [8785])
	
.LABEL $label$12
	$13 = *($6 + [8])
	$12 = *($6)
	$8 = *($4 + [40])
	if ( $8 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL prints([8913])
	CALL printui((int_64)4)
	CALL prints([8933])
	if ( (int_64)($12 == 0) ){ goto $label$13 }
	$6 = [0]
	$14 = (int_64)0
	$15 = $12
	
.LOOP $label$15:
	*((($4 + [104]) + $6)) = $15
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((uint_32)$6 > (uint_32)[5]) ){ goto $label$14 }
	$6 = ($6 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$15 }
	
.LABEL $label$14
	CALL prints(($4 + [104]))
	CALL printi($14)
	
.LABEL $label$13
	CALL prints([8931])
	CALL printn($3)
	$6 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$15 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$12 = $15
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$12 = $15
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $7 ){ goto $label$20 }
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	CALL eosio_assert([0], [8935])
	
.LABEL $label$16
	$12 = (int_64)0
	$8 = *($4 + [40])
	if ( ($8 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$9 = ($4 + [44])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$22 }
	
.LOOP $label$23:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$24 }
	CALL $9($7)
	
.LABEL $label$24
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$23 }
	$6 = *(($4 + [40]))
	goto $label$21 
	
.LABEL $label$22
	$6 = $8
	
.LABEL $label$21
	*($9) = $8
	CALL $9($6)
	
.LABEL $label$9
	*(($4 + [504])) = $13
	*($4 + [496]) = $12
	CALL $58(($4 + [16]), ($4 + [496]))
	$6 = *($4 + [16])
	$7 = ($6 & [1])
	CALL prints_l(( *($4 + [24]) ? (($4 + [16]) | [1]) : $7 ), ( *($4 + [20]) ? uint_32($6 >> [1]) : $7 ))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$25 }
	CALL $9(*(($4 + [24])))
	
.LABEL $label$25
	$6 = *($5 + [56])
	$7 = *(($5 + [60]))
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$27 }
	$8 = $7
	goto $label$26 
	
.LABEL $label$27
	$7 = ($4 + [400])
	$8 = *($6)
	if ( ($8 & [1]) ){ goto $label$29 }
	$8 = uint_32($8 >> [1])
	$6 = ($6 + [1])
	goto $label$28 
	
.LABEL $label$29
	$8 = *($6 + [4])
	$6 = *($6 + [8])
	
.LABEL $label$28
	CALL $18(($4 + [16]), $6, $8)
	*(($7 + [24])) = *((($4 + [16]) + [24]))
	*(($7 + [16])) = *((($4 + [16]) + [16]))
	*(($7 + [8])) = *($4 + [24])
	*($7) = *($4 + [16])
	$8 = *(($5 + [60]))
	$6 = *(($5 + [56]))
	$7 = $6
	
.LABEL $label$26
	if ( (((int_32)($8 - $7) / (int_32)[12]) <= [2]) ){ goto $label$30 }
	$7 = ($4 + [432])
	$8 = *($6 + [12])
	if ( ($8 & [1]) ){ goto $label$32 }
	$8 = uint_32($8 >> [1])
	$6 = (($6 + [12]) + [1])
	goto $label$31 
	
.LABEL $label$32
	$8 = *(($6 + [16]))
	$6 = *(($6 + [20]))
	
.LABEL $label$31
	CALL $18(($4 + [16]), $6, $8)
	*(($7 + [24])) = *((($4 + [16]) + [24]))
	*(($7 + [16])) = *((($4 + [16]) + [16]))
	*(($7 + [8])) = *($4 + [24])
	*($7) = *($4 + [16])
	$7 = *(($5 + [56]))
	if ( (((int_32)(*(($5 + [60])) - $7) / (int_32)[12]) <= [3]) ){ goto $label$30 }
	$6 = ($4 + [464])
	$8 = *($7 + [24])
	if ( ($8 & [1]) ){ goto $label$34 }
	$8 = uint_32($8 >> [1])
	$7 = (($7 + [24]) + [1])
	goto $label$33 
	
.LABEL $label$34
	$8 = *(($7 + [28]))
	$7 = *(($7 + [32]))
	
.LABEL $label$33
	CALL $18(($4 + [16]), $7, $8)
	*(($6 + [24])) = *((($4 + [16]) + [24]))
	*(($6 + [16])) = *((($4 + [16]) + [16]))
	*(($6 + [8])) = *($4 + [24])
	*($6) = *($4 + [16])
	
.LABEL $label$30
	CALL $18(($4 + [16]), ($4 + [336]), [176])
	*(($6 = (($4 + [512]) + [24]))) = *((($4 + [16]) + [24]))
	*(($7 = (($4 + [512]) + [16]))) = *((($4 + [16]) + [16]))
	*($4 + [520]) = *($4 + [24])
	*($4 + [512]) = *($4 + [16])
	*($4 + [88]) = [8416]
	*($4 + [92]) = CALL $17([8416])
	*($4 + [8]) = *($4 + [88])
	$12 = *(CALL $36(($4 + [96]), ($4 + [8])))
	$15 = *($5 + [40])
	$14 = *($5 + [32])
	*(($4 + [56])) = *($4 + [520])
	*(($4 + [64])) = *($7)
	*((($4 + [16]) + [56])) = *($6)
	*($4 + [24]) = $2
	*($4 + [16]) = $1
	*($4 + [32]) = $3
	*($4 + [104]) = $14
	*($4 + [112]) = $15
	*($4 + [48]) = *($4 + [512])
	*(($6 = CALL $7([16]))) = $3
	*($6 + [8]) = $12
	*(($4 + [140])) = [0]
	$7 = ($6 + [16])
	*((($4 + [104]) + [24])) = $7
	*(($4 + [124])) = $7
	*($4 + [120]) = $6
	*($4 + [132 align=4]) = (int_64)0
	CALL $40(($4 + [132]), [56])
	$8 = ($4 + [136])
	$6 = *($8)
	$7 = *($4 + [132])
	*($4 + [596]) = $7
	*($4 + [592]) = $7
	*($4 + [600]) = $6
	*($4 + [608]) = ($4 + [592])
	*($4 + [616]) = ($4 + [16])
	CALL $59(($4 + [616]), ($4 + [608]))
	CALL $52(($4 + [104]))
	$6 = *($4 + [132])
	if ( ($6 == 0) ){ goto $label$35 }
	*($8) = $6
	CALL $9($6)
	
.LABEL $label$35
	$6 = *($4 + [120])
	if ( ($6 == 0) ){ goto $label$36 }
	*(($4 + [124])) = $6
	CALL $9($6)
	
.LABEL $label$36
	$10 = *($4 + [576])
	if ( ($10 == 0) ){ goto $label$37 }
	$16 = ($4 + [580])
	$5 = *($16)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$39 }
	
.LOOP $label$40:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$41 }
	$8 = *($9 + [56])
	if ( ($8 == 0) ){ goto $label$42 }
	$11 = ($9 + [60])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$44 }
	
.LOOP $label$45:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$46 }
	CALL $9(*(($7 + [-4])))
	
.LABEL $label$46
	$7 = $6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$45 }
	$6 = *(($9 + [56]))
	goto $label$43 
	
.LABEL $label$44
	$6 = $8
	
.LABEL $label$43
	*($11) = $8
	CALL $9($6)
	
.LABEL $label$42
	CALL $9($9)
	
.LABEL $label$41
	if ( ((int_32)$5 != (int_32)$10) ){ goto $label$40 }
	$6 = *(($4 + [576]))
	goto $label$38 
	
.LABEL $label$39
	$6 = $10
	
.LABEL $label$38
	*($16) = $10
	CALL $9($6)
	
.LABEL $label$37
	$global$0 = ($4 + [624])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $15($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($5 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$6 = ($4 + ((int_32)$7 * (int_32)[24]))
	$8 = ($1 + [24])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$1 = (($4 + $5) + [-24])
	
.LOOP $label$7:
	$4 = ($7 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($7 + [-8]))
	*(($1 + [8])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $4
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	$4 = *($3 + [56])
	if ( ($4 == 0) ){ goto $label$11 }
	$0 = ($3 + [60])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($7 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $9(*(($7 + [-4])))
	
.LABEL $label$15
	$7 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$14 }
	$1 = *(($3 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $4
	
.LABEL $label$12
	*($0) = $4
	CALL $9($1)
	
.LABEL $label$11
	CALL $9($3)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$16 }
	CALL $9($5)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [624])
	$global$0 = $1
	$2 = CALL read_transaction(($1 + [112]), [512])
	if ( ((int_32)$2 < (int_32)[513]) ){ goto $label$1 }
	CALL eosio_assert([0], [8864])
	
.LABEL $label$1
	*($1 + [104]) = (($1 + [112]) + $2)
	*($1 + [100]) = ($1 + [112])
	*($1 + [96]) = ($1 + [112])
	$3 = CALL $16()
	*(($1 + [60])) = (int_64)0
	*(($1 + [76])) = (int_64)0
	*(($1 + [84])) = (int_64)0
	*($1 + [44]) = [0]
	*($1 + [48]) = [0]
	*($1 + [52 align=4]) = (int_64)0
	*($1 + [68 align=4]) = (int_64)0
	*($1 + [32]) = ((CASTING uint_32)(uint_64 ((int_64)$3 / (int_64)1000000)) + [60])
	CALL $61(($1 + [96]), ($1 + [32]))
	CALL $63(CALL $62(CALL $62(($1 + [96]), (($1 + [32]) + [24])), ($1 + [68])), ($1 + [80]))
	*(($4 = ($0 + [24]))) = (int_64)0
	*(($5 = ($0 + [16]))) = (int_64)0
	*(($6 = ($0 + [8]))) = (int_64)0
	*($0) = (int_64)0
	CALL $18($1, ($1 + [32]), $2)
	*($4) = *(($1 + [24]))
	*($5) = *(($1 + [16]))
	*($6) = *($1 + [8])
	*($0) = *($1)
	CALL $38(($1 + [32]))
	$global$0 = ($1 + [624])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8836])
	
.LABEL $label$5
	$2 = CALL $1($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $7([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8859])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [8859])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	$8 = *($3 + [24])
	*(($5 + [8])) = $8
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	*($3 + [24]) = $8)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $8
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $104(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $2($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $9($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8905])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$5 = *($1 + [4])
	$6 = int_32(($5 - $7) >> [3])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $120($1, ($2 - $6))
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $5
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($0 + [4])
	$2 = *($6)
	$4 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8859])
	$2 = *($6)
	
.LABEL $label$8
	CALL memcpy($7, $2, [8])
	$2 = (*($6) + [8])
	*($6) = $2
	$7 = ($7 + [8])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	$7 = [0]
	
.LOOP $label$1:
	if ( ($3 <= *($5)) ){ goto $label$2 }
	CALL eosio_assert([0], [8905])
	$3 = *($6)
	
.LABEL $label$2
	$8 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$7 = ($7 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $7)))
	$7 = ($7 + [7])
	$3 = $3
	if ( ($8 & [128]) ){ goto $label$1 }
	$3 = (CASTING uint_32)(uint_64 $4)
	$5 = *($1)
	$9 = *($1 + [4])
	$8 = int_32(($9 - $5) >> [5])
	if ( ((uint_32)$8 >= (uint_32)$3) ){ goto $label$5 }
	CALL $119($1, ($3 - $8))
	$9 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$8 <= (uint_32)$3) ){ goto $label$6 }
	$9 = ($5 + ($3 << [5]))
	*(($1 + [4])) = $9
	
.LABEL $label$6
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($0 + [4])
	$10 = ($0 + [8])
	
.LOOP $label$7:
	$3 = *($1)
	if ( ((uint_32)(*($10) - $3) > (uint_32)[31]) ){ goto $label$8 }
	CALL eosio_assert([0], [8859])
	$3 = *($1)
	
.LABEL $label$8
	CALL memcpy(($2 + [48]), $3, [32])
	*($1) = (*($1) + [32])
	$4 = (int_64)0
	$3 = [16]
	$8 = [0]
	$7 = ($2 + [16])
	$11 = (int_64)0
	
.LOOP $label$10:
	$6 = (($2 + [48]) + $8)
	if ( ($3 <= [2]) ){ goto $label$11 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$3 = ($3 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)[32]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$12 }
	CALL eosio_assert([0], [9522])
	
.LABEL $label$12
	*($7 + [8]) = $11
	*($7) = ((int_64)$4 | (int_64)*($6))
	$3 = [16]
	$7 = ($7 + [16])
	$4 = (int_64)0
	$11 = (int_64)0
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)[32]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)[16]) ){ goto $label$13 }
	if ( ($3 <= [2]) ){ goto $label$14 }
	CALL __ashlti3($2, $4, $11, (($3 << [3]) + [-8]))
	$11 = *(($2 + [8]))
	$4 = *($2)
	
.LABEL $label$14
	*($7) = $4
	*($7 + [8]) = $11
	
.LABEL $label$13
	*($5) = *($2 + [16])
	*(($5 + [8])) = *($2 + [24])
	*(($5 + [24])) = *((($2 + [16]) + [24]))
	*(($5 + [16])) = *((($2 + [16]) + [16]))
	$5 = ($5 + [32])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$7 }
	
.LABEL $label$3
	$global$0 = ($2 + [80])
	return $0
}

int_32 .FUNC $114 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	*($0 + [16 align=4]) = *($1)
	*($5) = *($1 + [8])
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	CALL $40(($0 + [28]), [24])
	$1 = *($0 + [28])
	$5 = (*(($0 + [32])) - $1)
	if ( ((int_32)$5 > (int_32)[15]) ){ goto $label$1 }
	CALL eosio_assert([0], [8748])
	
.LABEL $label$1
	CALL memcpy($1, $4, [16])
	$4 = ($4 + [16])
	$1 = ($1 + [16])
	if ( ((int_32)($5 + [-16]) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8748])
	
.LABEL $label$2
	CALL memcpy($1, $4, [8])
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	if ( ((int_32)*($1 + [68]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9168])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9213])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$7 }
	$5 = $4
	$8 = *(($1 + [8]))
	$7 = *($1)
	$6 = *(($4 + [-24]))
	if ( (int_64)(((int_64)((int_64)*($6) ^ (int_64)$7) | (int_64)((int_64)*(($6 + [8])) ^ (int_64)$8)) == 0) ){ goto $label$8 }
	$9 = ($2 + [24])
	$5 = $4
	
.LOOP $label$9:
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$7 }
	$6 = ($5 + [-48])
	$5 = ($5 + [-24])
	$6 = *($6)
	if ( ((int_64)(((int_64)((int_64)*($6) ^ (int_64)$7) | (int_64)((int_64)*(($6 + [8])) ^ (int_64)$8)) == 0) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$6 }
	$10 = [-24]
	$11 = ($5 + [-24])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$5 = $2
	
.LABEL $label$6
	CALL eosio_assert([0], [9263])
	$10 = [-24]
	$11 = ($5 + [-24])
	$4 = *($3)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$10:
	$6 = *($5)
	*($5) = [0]
	$3 = *($11)
	*($11) = $6
	if ( ($3 == 0) ){ goto $label$11 }
	$2 = *($3 + [56])
	if ( ($2 == 0) ){ goto $label$12 }
	$12 = ($3 + [60])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$14 }
	
.LOOP $label$15:
	$6 = ($9 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$16 }
	CALL $9(*(($9 + [-4])))
	
.LABEL $label$16
	$9 = $6
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$15 }
	$6 = *(($3 + [56]))
	goto $label$13 
	
.LABEL $label$14
	$6 = $2
	
.LABEL $label$13
	*($12) = $2
	CALL $9($6)
	
.LABEL $label$12
	CALL $9($3)
	
.LABEL $label$11
	*($11 + [8]) = *($5 + [8])
	*(($11 + [16])) = *(($5 + [16]))
	$11 = ($11 + [24])
	$5 = ($5 + [24])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$10 }
	$5 = *(($0 + [28]))
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$17:
	$5 = ($5 + $10)
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$18 }
	$2 = *($3 + [56])
	if ( ($2 == 0) ){ goto $label$19 }
	$4 = ($3 + [60])
	$9 = *($4)
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$21 }
	
.LOOP $label$22:
	$6 = ($9 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$23 }
	CALL $9(*(($9 + [-4])))
	
.LABEL $label$23
	$9 = $6
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$22 }
	$6 = *(($3 + [56]))
	goto $label$20 
	
.LABEL $label$21
	$6 = $2
	
.LABEL $label$20
	*($4) = $2
	CALL $9($6)
	
.LABEL $label$19
	CALL $9($3)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$11) ){ goto $label$17 }
	
.LABEL $label$3
	*(($0 + [28])) = $11
	CALL db_remove_i64(*(($1 + [72])))
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8859])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [8859])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8859])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [24])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8859])
	$3 = *($2)
	
.LABEL $label$4
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$1 = ($1 + [32])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8859])
	$3 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($1, $3, [8])
	*(($1 = ($0 + [4]))) = (*($1) + [8])
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL $7($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL $7($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $15(($0 + [16]))
	
.LABEL $label$1
	CALL $15(($0 + [28]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[15]) ){ goto $label$1 }
	CALL eosio_assert([0], [8748])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [16])
	$4 = (*($3) + [16])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [16])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [8748])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [2])
	$4 = (*($3) + [2])
	*($3) = $4
	$3 = ($1 + [24])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8748])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [32])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8748])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [40])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8748])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $3, [8])
	$3 = (*($4) + [8])
	*(($4 = ($0 + [4]))) = $3
	$5 = ($1 + [48])
	$7 = ($0 + [8])
	if ( ((int_32)(*($7) - $3) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8748])
	$3 = *($4)
	
.LABEL $label$6
	CALL memcpy($3, $5, [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$8 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [60])) - *($1 + [56])) / (int_32)[12]))
	
.LOOP $label$7:
	$5 = (CASTING uint_32)(uint_64 $8)
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	$6 = ((int_64)$8) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($7) - $3) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [8748])
	$3 = *($4)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$7 }
	$4 = *(($1 + [60]))
	$3 = *(($1 + [56]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $111($0, $3)
	$3 = ($3 + [12])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$9
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8748])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [8748])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $15($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [28])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [32])) = $2
	CALL $9($2)
	
.LABEL $label$11
	$2 = *($1 + [16])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [20])) = $2
	CALL $9($2)
	
.LABEL $label$12
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL $9($4)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [5])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$4 }
	$3 = [134217727]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$3 = int_32($2 >> [4])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $7(($3 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [32])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $15($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [5]))
	$5 = ($2 + ($5 << [5]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [5]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 - $1)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $9($3)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $7($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $9($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $29($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [96])
	$global$0 = $1
	*($1 + [40]) = [8754]
	*($1 + [44]) = CALL $17([8754])
	*($1 + [16]) = *($1 + [40])
	$2 = CALL $36(($1 + [48]), ($1 + [16]))
	*($1 + [24]) = [8754]
	*($1 + [28]) = CALL $17([8754])
	*($1 + [8]) = *($1 + [24])
	CALL $36(($1 + [32]), ($1 + [8]))
	*(($1 + [88])) = [0]
	*($1 + [72]) = (int_64)-1
	*($1 + [80]) = (int_64)0
	$3 = *($2)
	*($1 + [56]) = $3
	*($1 + [64]) = (int_64)6138663577826885632
	$2 = CALL db_find_i64($3, (int_64)6138663577826885632, (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $60(($1 + [56]), $2)
	if ( ((int_32)*($2 + [192]) == (int_32)($1 + [56])) ){ goto $label$4 }
	CALL eosio_assert([0], [8785])
	
.LABEL $label$4
	CALL memcpy($0, $2, [192])
	$4 = *($1 + [80])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [8760])
	CALL memcpy($0, [0], [192])
	$4 = *($1 + [80])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($1 + [84])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL $9($0)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$7 }
	$2 = *(($1 + [80]))
	goto $label$5 
	
.LABEL $label$6
	$2 = $4
	
.LABEL $label$5
	*($5) = $4
	CALL $9($2)
	$global$0 = ($1 + [96])
	return 
	
.LABEL $label$1
	$global$0 = ($1 + [96])
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL $7(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $15($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($6 + [-4])
	*(($3 + [-4])) = *($1)
	$6 = ($6 + [-12])
	*(($3 = ($3 + [-12]))) = *($6)
	*($6) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($2 + [-4])))
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL $9($1)
	
.LABEL $label$14
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8905])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$5 = *($1)
	$7 = *($1 + [4])
	$6 = ((int_32)($7 - $5) / (int_32)[12])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $107($1, ($2 - $6))
	$7 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$6 = ($5 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($7 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL $9(*(($7 + [-4])))
	
.LABEL $label$9
	$7 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	*(($1 + [4])) = $6
	$7 = $6
	
.LABEL $label$6
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$10:
	CALL $108($0, $2)
	$2 = ($2 + [12])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$10 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [1] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $23($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $23($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $23($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $23($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [8336]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $23($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $23($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $23($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $21([2], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $7($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $26 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL $9(*(($6 + [-4])))
	
.LABEL $label$8
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[12])
	$4 = ($1 + ((int_32)$7 * (int_32)[12]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $28($5, $1)
	$5 = ($5 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$5 = *($1)
	
.LOOP $label$12:
	CALL $27($5, $4)
	$5 = (*($1) + [12])
	*($1) = $5
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $9(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL $9($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = [357913941]
	$4 = ((int_32)$4 / (int_32)[12])
	if ( ((uint_32)$4 > (uint_32)[178956969]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[12])
	$5 = CALL $7($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	CALL $27($5, $1)
	$5 = (*($4) + [12])
	*($4) = $5
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $15($0)
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9366])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9412])
	
.LABEL $label$2
	$6 = *(($1 + [8]))
	$7 = *($1)
	$3 = *($3)
	$8 = ($1 + [32])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)*(($1 + [36]))) ){ goto $label$4 }
	*($9) = *($3)
	*(($9 + [24])) = *(($3 + [24]))
	*(($9 + [16])) = *(($3 + [16]))
	*(($9 + [8])) = *(($3 + [8]))
	*($8) = (*($8) + [32])
	goto $label$3 
	
.LABEL $label$4
	CALL $121(($1 + [28]), $3)
	
.LABEL $label$3
	if ( (int_64)(((int_64)((int_64)$7 ^ (int_64)*($1)) | (int_64)((int_64)$6 ^ (int_64)*(($1 + [8])))) == 0) ){ goto $label$5 }
	CALL eosio_assert([0], [9463])
	
.LABEL $label$5
	$3 = [16]
	$8 = ($1 + [16])
	$10 = *($1 + [16])
	$9 = *(($1 + [20]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$7 }
	$3 = (($11 & [-8]) + $3)
	
.LABEL $label$7
	$10 = *($1 + [28])
	$9 = *(($1 + [32]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [5]))
	
.LOOP $label$8:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$9 }
	$3 = (($11 & [-32]) + $3)
	
.LABEL $label$9
	if ( ($3 <= [513]) ){ goto $label$11 }
	$13 = CALL $1($3)
	goto $label$10 
	
.LABEL $label$11
	$13 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $13
	
.LABEL $label$10
	*($5 + [4]) = $13
	*($5) = $13
	*($5 + [8]) = ($13 + $3)
	$9 = $13
	if ( ((int_32)$3 > (int_32)[15]) ){ goto $label$12 }
	CALL eosio_assert([0], [8748])
	$9 = *($5 + [4])
	
.LABEL $label$12
	CALL memcpy($9, $1, [16])
	*($5 + [4]) = ($9 + [16])
	$14 = CALL $122($5, $8)
	$12 = (CASTING uint_64)(uint_32 int_32((*(($1 + [32])) - *(($1 + [28]))) >> [5]))
	$9 = *($14 + [4])
	$11 = ($14 + [8])
	$4 = ($14 + [4])
	
.LOOP $label$13:
	$8 = (CASTING uint_32)(uint_64 $12)
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	$10 = ((int_64)$12) != (int_64)0
	*($5 + [15]) = (($10) << [7]) | ($8 & [127]))
	if ( ((int_32)(*($11) - $9) > (int_32)[0]) ){ goto $label$14 }
	CALL eosio_assert([0], [8748])
	$9 = *($4)
	
.LABEL $label$14
	CALL memcpy($9, ($5 + [15]), [1])
	$9 = (*($4) + [1])
	*($4) = $9
	if ( $10 ){ goto $label$13 }
	$4 = *(($1 + [32]))
	$9 = *(($1 + [28]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$15 }
	
.LOOP $label$16:
	CALL $115($14, $9)
	$9 = ($9 + [32])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$16 }
	
.LABEL $label$15
	CALL db_update_i64(*(($1 + [44])), $2, $13, $3)
	if ( ($3 <= [513]) ){ goto $label$17 }
	CALL $2($13)
	
.LABEL $label$17
	$3 = (int_64)($6 == 0)
	if ( ( (uint_64)($7 <= *($0 + [16])) ? [0] : $3 ) ){ goto $label$18 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ( ((uint_64)$7 > (uint_64)(int_64)-3) ? ((int_64)$6 != (int_64)0) : $3 ) )
	
.LABEL $label$18
	$global$0 = ($5 + [16])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	$7 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8836])
	
.LABEL $label$5
	$4 = CALL $1($6)
	$7 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $6)
	*($3 + [52]) = $4
	*($3 + [48]) = $4
	*($3 + [56]) = ($4 + $6)
	*(($5 = CALL $7([64])) + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = $0
	$8 = ($5 + [28])
	$9 = ($5 + [16])
	$2 = $4
	if ( ((uint_32)$6 > (uint_32)[15]) ){ goto $label$7 }
	CALL eosio_assert([0], [8859])
	$2 = *($3 + [52])
	
.LABEL $label$7
	CALL memcpy($5, $2, [16])
	*($3 + [52]) = ($2 + [16])
	CALL $117(CALL $116(($3 + [48]), $9), $8)
	*($5 + [44]) = $1
	*($3 + [40]) = $5
	*($3 + [24]) = *(($5 + [8]))
	$10 = *($5)
	*($3 + [16]) = $10
	*($3 + [12]) = $1
	$6 = *(($0 + [28]))
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($6 + [8]) = $10
	*($6 + [16]) = $1
	*($3 + [40]) = [0]
	*($6) = $5
	*(($0 + [28])) = ($6 + [24])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $118(($0 + [24]), ($3 + [40]), ($3 + [16]), ($3 + [12]))
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($4)
	
.LABEL $label$8
	$1 = *($3 + [40])
	*($3 + [40]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	$4 = *($1 + [28])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($1 + [32])) = $4
	CALL $9($4)
	
.LABEL $label$12
	$4 = *($1 + [16])
	if ( ($4 == 0) ){ goto $label$13 }
	*(($1 + [20])) = $4
	CALL $9($4)
	
.LABEL $label$13
	CALL $9($1)
	
.LABEL $label$11
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $99($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $7($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $30($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $30($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $26($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $9($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $65 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	$6 = ($global$0 - [368])
	$global$0 = $6
	$7 = [0]
	*(($6 + [272])) = [0]
	*($6 + [248]) = $3
	*($6 + [240]) = $3
	*($6 + [256]) = (int_64)-1
	*($6 + [264]) = (int_64)0
	$8 = CALL db_find_i64($3, $3, (int_64)3617214769600282624, $1)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL $32(($6 + [240]), $8)
	if ( ((int_32)*($7 + [68]) == (int_32)($6 + [240])) ){ goto $label$1 }
	CALL eosio_assert([0], [8785])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8473])
	
.LABEL $label$1
	CALL require_auth($4)
	if ( ((int_32)*($7 + [16]) != (int_32)[1000]) ){ goto $label$15 }
	$9 = ($0 + [72])
	$1 = *($0)
	if ( ((int_64)CALL current_receiver() == (int_64)*($0 + [72])) ){ goto $label$16 }
	CALL eosio_assert([0], [9053])
	
.LABEL $label$16
	*(($8 = CALL $7([56])) + [40]) = $9
	*($8 + [8]) = [0]
	*($8) = $4
	*($8 + [32]) = ((int_64)((int_64)CALL $16() / (int_64)1000000) & (int_64)4294967295)
	*($6 + [24]) = (($6 + [144]) + [36])
	*($6 + [20]) = ($6 + [144])
	*($6 + [16]) = ($6 + [144])
	CALL $66(($6 + [16]), $8)
	$4 = *($8)
	$9 = ($0 + [80])
	*($8 + [44]) = CALL db_store_i64(*($9), (int_64)-4425744126933864448, $1, $4, ($6 + [144]), [36])
	$10 = ($0 + [88])
	if ( (uint_64)($4 <= *($10)) ){ goto $label$17 }
	*($10) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	$4 = *($9)
	$3 = *($8)
	*($6 + [288]) = *(($8 + [32]))
	*($8 + [48]) = CALL db_idx64_store($4, (int_64)-4425744126933864448, $1, $3, ($6 + [288]))
	*($6 + [16]) = $8
	$4 = *($8)
	*($6 + [144]) = $4
	$10 = *(($8 + [44]))
	*($6 + [288]) = $10
	$11 = ($0 + [100])
	$9 = *($11)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [104]))) ){ goto $label$14 }
	*($9 + [8]) = $4
	*($9 + [16]) = $10
	*($6 + [16]) = [0]
	*($9) = $8
	*($11) = ($9 + [24])
	$8 = *($6 + [16])
	*($6 + [16]) = [0]
	if ( $8 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$12 = ($0 + [112])
	$10 = *(($0 + [140]))
	$11 = *(($0 + [136]))
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$10 }
	
.LOOP $label$18:
	$8 = ($10 + [-24])
	$9 = *($8)
	if ( (int_64)(((int_64)((int_64)*($9) ^ (int_64)$1) | (int_64)*(($9 + [8]))) == 0) ){ goto $label$11 }
	$10 = $8
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$14
	CALL $67(($0 + [96]), ($6 + [16]), ($6 + [144]), ($6 + [288]))
	$8 = *($6 + [16])
	*($6 + [16]) = [0]
	if ( ($8 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL $9($8)
	
.LABEL $label$12
	if ( $7 ){ goto $label$19 }
	CALL eosio_assert([0], [9104])
	CALL eosio_assert([0], [9138])
	
.LABEL $label$19
	$8 = CALL db_next_i64(*($7 + [72]), ($6 + [144]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$20 }
	CALL $32(($6 + [240]), $8)
	
.LABEL $label$20
	CALL $35(($6 + [240]), $7)
	$7 = *($6 + [264])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$11
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$10 }
	if ( ((int_32)*($9 + [40]) == (int_32)$12) ){ goto $label$21 }
	CALL eosio_assert([0], [8785])
	
.LABEL $label$21
	if ( $9 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$8 = CALL db_find_i64(*($12), *(($0 + [120])), (int_64)-4425741375688526976, $1)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$8 }
	$9 = CALL $68($12, $8)
	if ( ((int_32)*($9 + [40]) == (int_32)$12) ){ goto $label$9 }
	CALL eosio_assert([0], [8785])
	
.LABEL $label$9
	if ( ((int_64)$4 != (int_64)-4416155599511022288) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = [0]
	CALL eosio_assert([0], [8522])
	if ( ((int_64)$4 == (int_64)-4416155599511022288) ){ goto $label$6 }
	
.LABEL $label$7
	$14 = ($0 + [72])
	$10 = *(($0 + [100]))
	$7 = *(($0 + [96]))
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$23 }
	
.LOOP $label$25:
	$8 = ($10 + [-24])
	$11 = *($8)
	if ( ((int_64)*($11) == (int_64)$4) ){ goto $label$24 }
	$10 = $8
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$23 }
	if ( ((int_32)*($11 + [40]) == (int_32)$14) ){ goto $label$22 }
	CALL eosio_assert([0], [8785])
	goto $label$22 
	
.LABEL $label$23
	$11 = [0]
	$8 = CALL db_find_i64(*($14), *(($0 + [80])), (int_64)-4425744126933864448, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$26 }
	$11 = CALL $48($14, $8)
	if ( ((int_32)*($11 + [40]) == (int_32)$14) ){ goto $label$22 }
	CALL eosio_assert([0], [8785])
	goto $label$22 
	
.LABEL $label$26
	CALL eosio_assert([0], [8570])
	
.LABEL $label$22
	$8 = *($9 + [16])
	$10 = *(($9 + [20]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$5 }
	$7 = int_32(($10 - $8) >> [3])
	$10 = [0]
	
.LOOP $label$28:
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$27 }
	$8 = ($8 + [8])
	$10 = ($10 + [1])
	if ( ($10 <= $7) ){ goto $label$28 }
	goto $label$5 
	
.LABEL $label$27
	$4 = *($0)
	*($6 + [144]) = $5
	if ( $9 ){ goto $label$29 }
	CALL eosio_assert([0], [9331])
	
.LABEL $label$29
	CALL $69($12, $9, $4, ($6 + [144]))
	$4 = *($0)
	if ( $11 ){ goto $label$30 }
	CALL eosio_assert([0], [9331])
	
.LABEL $label$30
	CALL $70($14, $11, $4)
	$7 = *($6 + [264])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	CALL $44(*($0))
	*(($6 + [232])) = (int_64)0
	*(($6 + [224])) = (int_64)0
	*((($6 + [144]) + [72])) = (int_64)0
	*(($6 + [200])) = (int_64)0
	*(($6 + [192])) = (int_64)0
	*(($6 + [184])) = (int_64)0
	*((($6 + [144]) + [24])) = *(($5 + [24]))
	*((($6 + [144]) + [16])) = *(($5 + [16]))
	*($6 + [208]) = (int_64)0
	*($6 + [176]) = (int_64)0
	*($6 + [144]) = *($5)
	*($6 + [152]) = *(($5 + [8]))
	$8 = *($9 + [28])
	if ( ((int_32)*(($9 + [32])) != (int_32)$8) ){ goto $label$37 }
	$13 = ($0 + [72])
	$4 = *(*($9 + [16]))
	$10 = *(($0 + [100]))
	$14 = *(($0 + [96]))
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$35 }
	
.LOOP $label$38:
	$8 = ($10 + [-24])
	$11 = *($8)
	if ( ((int_64)*($11) == (int_64)$4) ){ goto $label$36 }
	$10 = $8
	if ( ((int_32)$14 != (int_32)$8) ){ goto $label$38 }
	goto $label$35 
	
.LABEL $label$37
	*(($10 = ($6 + [208]))) = *($8)
	*(($10 + [24])) = *(($8 + [24]))
	*(($10 + [16])) = *(($8 + [16]))
	*(($10 + [8])) = *(($8 + [8]))
	goto $label$31 
	
.LABEL $label$36
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$35 }
	if ( ((int_32)*($11 + [40]) == (int_32)$13) ){ goto $label$34 }
	CALL eosio_assert([0], [8785])
	goto $label$34 
	
.LABEL $label$35
	$11 = [0]
	$8 = CALL db_find_i64(*(($0 + [72])), *(($0 + [80])), (int_64)-4425744126933864448, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$33 }
	$11 = CALL $48($13, $8)
	if ( ((int_32)*($11 + [40]) == (int_32)$13) ){ goto $label$34 }
	CALL eosio_assert([0], [8785])
	
.LABEL $label$34
	$4 = *($0)
	goto $label$32 
	
.LABEL $label$33
	CALL eosio_assert([0], [8541])
	$4 = *($0)
	CALL eosio_assert([0], [9331])
	
.LABEL $label$32
	CALL $71($13, $11, $4)
	
.LABEL $label$31
	CALL $18(($6 + [16]), ($6 + [144]), [96])
	*(($8 = ($5 + [24]))) = *((($6 + [16]) + [24]))
	*(($10 = ($5 + [16]))) = *((($6 + [16]) + [16]))
	*(($11 = ($5 + [8]))) = *($6 + [24])
	*($5) = *($6 + [16])
	$4 = *($0)
	*($6 + [88]) = [8416]
	*($6 + [92]) = CALL $17([8416])
	*($6 + [8]) = *($6 + [88])
	$15 = *(CALL $36(($6 + [96]), ($6 + [8])))
	$16 = *($7 + [40])
	$17 = *($7 + [32])
	*(($6 + [56])) = *($11)
	*(($6 + [64])) = *($10)
	*((($6 + [16]) + [56])) = *($8)
	*($6 + [24]) = $2
	*($6 + [16]) = $1
	*($6 + [32]) = $3
	*($6 + [104]) = $17
	*($6 + [112]) = $16
	*($6 + [48]) = *($5)
	*(($8 = CALL $7([16]))) = $4
	*($8 + [8]) = $15
	*((($6 + [104]) + [36])) = [0]
	$10 = ($8 + [16])
	*((($6 + [104]) + [24])) = $10
	*(($6 + [124])) = $10
	*($6 + [120]) = $8
	*($6 + [132 align=4]) = (int_64)0
	CALL $40((($6 + [104]) + [28]), [56])
	$0 = ($6 + [136])
	$8 = *($0)
	$10 = *($6 + [132])
	*($6 + [292]) = $10
	*($6 + [288]) = $10
	*($6 + [296]) = $8
	*($6 + [280]) = ($6 + [288])
	*($6 + [352]) = ($6 + [16])
	CALL $59(($6 + [352]), ($6 + [280]))
	*($6 + [360]) = (int_64)0
	*($6 + [352]) = $4
	$1 = CALL $16()
	*((($6 + [288]) + [28])) = (int_64)0
	*(($6 + [332])) = (int_64)0
	*(($6 + [340])) = (int_64)0
	*($6 + [300]) = [0]
	*($6 + [304]) = [0]
	*($6 + [308 align=4]) = (int_64)0
	*($6 + [324 align=4]) = (int_64)0
	*($6 + [288]) = ((CASTING uint_32)(uint_64 ((int_64)$1 / (int_64)1000000)) + [60])
	CALL $46((($6 + [288]) + [36]), ($6 + [104]))
	*($6 + [308]) = [0]
	CALL $37(($6 + [288]), ($6 + [352]), $4, [0])
	CALL $38(($6 + [288]))
	$8 = *($6 + [132])
	if ( ($8 == 0) ){ goto $label$39 }
	*($0) = $8
	CALL $9($8)
	
.LABEL $label$39
	$8 = *($6 + [120])
	if ( ($8 == 0) ){ goto $label$40 }
	*(($6 + [124])) = $8
	CALL $9($8)
	
.LABEL $label$40
	if ( $9 ){ goto $label$41 }
	CALL eosio_assert([0], [9104])
	CALL eosio_assert([0], [9138])
	
.LABEL $label$41
	$8 = CALL db_next_i64(*($9 + [44]), ($6 + [16]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$42 }
	CALL $68($12, $8)
	
.LABEL $label$42
	CALL $72($12, $9)
	
.LABEL $label$5
	$7 = *($6 + [264])
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$12 = ($6 + [268])
	$0 = *($12)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$44 }
	
.LOOP $label$45:
	$0 = ($0 + [-24])
	$11 = *($0)
	*($0) = [0]
	if ( ($11 == 0) ){ goto $label$46 }
	$10 = *($11 + [56])
	if ( ($10 == 0) ){ goto $label$47 }
	$5 = ($11 + [60])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$49 }
	
.LOOP $label$50:
	$8 = ($9 + [-12])
	if ( ((*($8) & [1]) == 0) ){ goto $label$51 }
	CALL $9(*(($9 + [-4])))
	
.LABEL $label$51
	$9 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$50 }
	$8 = *(($11 + [56]))
	goto $label$48 
	
.LABEL $label$49
	$8 = $10
	
.LABEL $label$48
	*($5) = $10
	CALL $9($8)
	
.LABEL $label$47
	CALL $9($11)
	
.LABEL $label$46
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$45 }
	$8 = *(($6 + [264]))
	goto $label$43 
	
.LABEL $label$44
	$8 = $7
	
.LABEL $label$43
	*($12) = $7
	CALL $9($8)
	$global$0 = ($6 + [368])
	return 
	
.LABEL $label$3
	$global$0 = ($6 + [368])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $93(CALL $94($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8748])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8748])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $15($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8748])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $3) > (int_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [8748])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$2 = ($1 + [16])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8748])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [24])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8748])
	$3 = *($2)
	
.LABEL $label$4
	CALL memcpy($3, $4, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$1 = ($1 + [32])
	if ( ((int_32)(*($5) - $3) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8748])
	$3 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $1, [8])
	*(($1 = ($0 + [4]))) = (*($1) + [8])
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [8859])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [4])
	$3 = (*($2) + [4])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [4])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [8859])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [2])
	$3 = (*($2) + [2])
	*($2) = $3
	$2 = ($1 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [8859])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [4])
	$2 = (*($6) + [4])
	*(($6 = ($0 + [4]))) = $2
	$7 = (int_64)0
	$8 = ($0 + [8])
	$5 = [0]
	
.LOOP $label$4:
	if ( ($2 <= *($8)) ){ goto $label$5 }
	CALL eosio_assert([0], [8905])
	$2 = *($6)
	
.LABEL $label$5
	$3 = *($2)
	$4 = ($2 + [1])
	*($6) = $4
	$2 = ($5 & [255])
	$7 = ((int_64)$7 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $2)))
	$5 = ($2 + [7])
	$2 = $4
	if ( ($3 & [128]) ){ goto $label$4 }
	*($1 + [12]) = $7
	$2 = ($1 + [16])
	$6 = ($0 + [8])
	if ( ((int_32)*($6) != (int_32)$4) ){ goto $label$6 }
	CALL eosio_assert([0], [8859])
	$4 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($2, $4, [1])
	$2 = (*($5) + [1])
	*(($5 = ($0 + [4]))) = $2
	$7 = (int_64)0
	$4 = [0]
	
.LOOP $label$7:
	if ( ($2 <= *($6)) ){ goto $label$8 }
	CALL eosio_assert([0], [8905])
	$2 = *($5)
	
.LABEL $label$8
	$3 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$4 = ($4 & [255])
	$7 = ((int_64)$7 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $4)))
	$4 = ($4 + [7])
	$2 = $2
	if ( ($3 & [128]) ){ goto $label$7 }
	*($1 + [20]) = $7
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8836])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL $7([208])) + [96]) = (int_64)0
	*($5 + [88]) = (int_64)68719476736
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = [0]
	*($5 + [120]) = (int_64)0
	*($5 + [128]) = (int_64)0
	*($5 + [136]) = (int_64)0
	*($5 + [144]) = [0]
	*($5 + [152]) = (int_64)0
	*($5 + [160]) = (int_64)0
	*($5 + [168]) = [0]
	*($5 + [176]) = (int_64)0
	*($5 + [184]) = [0]
	*($5 + [192]) = $0
	CALL $95(($3 + [32]), $5)
	*($5 + [196]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = (int_64)7235159537265672192
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($7) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $96(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8905])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$6 = *($1)
	$5 = *($1 + [4])
	$7 = int_32(($5 - $6) >> [4])
	if ( ((uint_32)$7 >= (uint_32)$2) ){ goto $label$5 }
	CALL $98($1, ($2 - $7))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$7 <= (uint_32)$2) ){ goto $label$6 }
	$6 = ($6 + ($2 << [4]))
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($5 + [-16])
	$7 = *(($5 + [-12]))
	if ( ($7 == 0) ){ goto $label$9 }
	*(($5 + [-8])) = $7
	CALL $9($7)
	
.LABEL $label$9
	$5 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	*(($1 + [4])) = $6
	$5 = $6
	
.LABEL $label$6
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($0 + [4])
	$4 = ($0 + [8])
	
.LOOP $label$10:
	$6 = *($7)
	if ( ((uint_32)(*($4) - $6) > (uint_32)[1]) ){ goto $label$11 }
	CALL eosio_assert([0], [8859])
	$6 = *($7)
	
.LABEL $label$11
	CALL memcpy($2, $6, [2])
	*($7) = (*($7) + [2])
	CALL $99($0, ($2 + [4]))
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$10 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8905])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$5 = *($1)
	$7 = *($1 + [4])
	$6 = ((int_32)($7 - $5) / (int_32)[40])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $100($1, ($2 - $6))
	$7 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($5 + ((int_32)$2 * (int_32)[40]))
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = *(($7 + [-12]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($7 + [-8])) = $2
	CALL $9($2)
	
.LABEL $label$9
	$2 = ($7 + [-40])
	$6 = *(($7 + [-24]))
	if ( ($6 == 0) ){ goto $label$10 }
	*(($7 + [-20])) = $6
	CALL $9($6)
	
.LABEL $label$10
	$7 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	*(($1 + [4])) = $5
	$7 = $5
	
.LABEL $label$6
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$11:
	CALL $101($0, $2)
	$2 = ($2 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $99(CALL $102($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8859])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8859])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[40])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL $7(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[40]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $15($0)
	
.LABEL $label$1
	$7 = ($2 + ((int_32)$6 * (int_32)[40]))
	$8 = ($2 + ((int_32)$3 * (int_32)[40]))
	$6 = $8
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$9 = ($8 + ((int_32)$1 * (int_32)[40]))
	$6 = *($0)
	$10 = *(($0 + [4]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$9 }
	$11 = ($6 - $10)
	$1 = [0]
	
.LOOP $label$10:
	$2 = ($10 + $1)
	*((($6 = ($8 + $1)) + [-32])) = *(($2 + [-32]))
	*(($6 + [-40])) = *(($2 + [-40]))
	*(($3 = ($6 + [-24]))) = (int_64)0
	*(($4 = ($6 + [-16]))) = [0]
	$5 = ($2 + [-24])
	*($3) = *($5)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($6 + [-12]))) = (int_64)0
	*(($6 = ($6 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($5) = (int_64)0
	$2 = ($2 + [-4])
	*($6) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$10 }
	$8 = ($8 + $1)
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$3 = $6
	
.LABEL $label$8
	*($0) = $8
	*(($0 + [4])) = $9
	*(($0 + [8])) = $7
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = *(($6 + [-12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($6 + [-8])) = $2
	CALL $9($2)
	
.LABEL $label$13
	$2 = ($6 + [-40])
	$1 = *(($6 + [-24]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-20])) = $1
	CALL $9($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($3 == 0) ){ goto $label$15 }
	CALL $9($3)
	
.LABEL $label$15
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL $7(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $15($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $9($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8905])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$4 = *($1 + [4])
	$6 = int_32(($4 - $7) >> [4])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $103($1, ($2 - $6))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$4 = ($7 + ($2 << [4]))
	*(($1 + [4])) = $4
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = ($0 + [4])
	$6 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($5) - $6) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8859])
	$6 = *($2)
	
.LABEL $label$8
	CALL memcpy($7, $6, [8])
	$6 = (*($2) + [8])
	*($2) = $6
	if ( ((uint_32)(*($5) - $6) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [8859])
	$6 = *($2)
	
.LABEL $label$9
	CALL memcpy(($7 + [8]), $6, [8])
	$6 = (*($2) + [8])
	*($2) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	CALL $106($0, ($1 + [56]))
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]) ){ goto $label$1 }
	CALL eosio_assert([0], [8859])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [16])
	$3 = (*($2) + [16])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [16])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [8859])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [2])
	$3 = (*($2) + [2])
	*($2) = $3
	$2 = ($1 + [24])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8859])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $3, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [32])
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8859])
	$3 = *($2)
	
.LABEL $label$4
	CALL memcpy($4, $3, [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$2 = ($1 + [40])
	if ( ((uint_32)(*($5) - $3) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8859])
	$3 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $3, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [48])
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8859])
	$3 = *($2)
	
.LABEL $label$6
	CALL memcpy($4, $3, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $15($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $89 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [160])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [28])) = $4
	$5 = ($4 + $5)
	*(($3 + [32])) = $5
	*(($3 + [48])) = $1
	*(($3 + [56])) = $4
	*(($3 + [60])) = $4
	*(($3 + [64])) = $5
	*(($3 + [72])) = $0
	*(($3 + [88])) = $0
	*(($3 + [96])) = (int_64)-1
	*(($6 = ($3 + [104]))) = (int_64)0
	*(($3 + [112])) = [0]
	*(($3 + [116])) = [0]
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $4
	*($3 + [40]) = $0
	*($3 + [80]) = $0
	*($3 + [120]) = $0
	*(($3 + [136])) = (int_64)-1
	*(($3 + [128])) = $0
	*(($4 = ($3 + [144]))) = (int_64)0
	*(($3 + [152])) = [0]
	CALL $74(($3 + [8]))
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$4 }
	$8 = ($3 + [148])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	$2 = *($4 + [28])
	if ( ($2 == 0) ){ goto $label$9 }
	*(($4 + [32])) = $2
	CALL $9($2)
	
.LABEL $label$9
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $2
	CALL $9($2)
	
.LABEL $label$10
	CALL $9($4)
	
.LABEL $label$8
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$7 }
	$4 = *(($3 + [144]))
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($8) = $7
	CALL $9($4)
	
.LABEL $label$4
	$2 = *($6)
	if ( ($2 == 0) ){ goto $label$11 }
	$7 = ($3 + [108])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $9($5)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($3 + [104]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $2
	
.LABEL $label$12
	*($7) = $2
	CALL $9($4)
	
.LABEL $label$11
	$global$0 = ($3 + [160])
}

void .FUNC $88 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $1($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [128])
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$5 = ($3 + [128])
	if ( ((uint_32)$4 > (uint_32)[15]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8859])
	
.LABEL $label$1
	CALL memcpy($5, $2, [16])
	*($3 + [120]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)($4 & [-8]) != (int_32)[16]) ){ goto $label$6 }
	CALL eosio_assert([0], [8859])
	
.LABEL $label$6
	CALL memcpy(($3 + [120]), $5, [8])
	*((($3 + [80]) + [24])) = (int_64)0
	*((($3 + [80]) + [16])) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [80]) = (int_64)0
	$2 = ($2 + [24])
	if ( ((uint_32)($4 + [-24]) > (uint_32)[31]) ){ goto $label$7 }
	CALL eosio_assert([0], [8859])
	
.LABEL $label$7
	CALL memcpy(($3 + [176]), $2, [32])
	$6 = (int_64)0
	$4 = [16]
	$5 = ($3 + [144])
	$2 = [0]
	$7 = (int_64)0
	
.LOOP $label$9:
	$8 = (($3 + [176]) + $2)
	if ( ($4 <= [2]) ){ goto $label$10 }
	$6 = ((int_64)$6 | (int_64)*($8))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$11 }
	CALL eosio_assert([0], [9522])
	
.LABEL $label$11
	*($5 + [8]) = $7
	*($5) = ((int_64)$6 | (int_64)*($8))
	$4 = [16]
	$5 = ($5 + [16])
	$6 = (int_64)0
	$7 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$12 }
	if ( ($4 <= [2]) ){ goto $label$13 }
	CALL __ashlti3(($3 + [32]), $6, $7, (($4 << [3]) + [-8]))
	$7 = *(($3 + [40]))
	$6 = *($3 + [32])
	
.LABEL $label$13
	*($5) = $6
	*($5 + [8]) = $7
	
.LABEL $label$12
	*(($4 = (($3 + [80]) + [24]))) = *((($3 + [144]) + [24]))
	*(($2 = (($3 + [80]) + [16]))) = *((($3 + [144]) + [16]))
	*($3 + [88]) = *($3 + [152])
	*($3 + [80]) = *($3 + [144])
	$6 = *($2)
	*((($3 + [48]) + [16])) = $6
	$7 = *($4)
	*((($3 + [48]) + [24])) = $7
	*(($3 + [16])) = $6
	*(($3 + [24])) = $7
	$6 = *($3 + [80])
	*($3 + [48]) = $6
	$7 = *($3 + [88])
	*($3 + [56]) = $7
	*($3) = $6
	*($3 + [8]) = $7
	CALL $73($4, *($3 + [128]), *($3 + [136]), *($3 + [120]), $3)
	$global$0 = ($3 + [208])
}

void .FUNC $87 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [336])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$5 = CALL $1($4)
	goto $label$3 
	
.LABEL $label$5
	$5 = [0]
	$2 = ($3 + [288])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$3
	CALL read_action_data($5, $4)
	$6 = ($5 + $4)
	$2 = ($3 + [288])
	if ( ((uint_32)$4 > (uint_32)[15]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8859])
	
.LABEL $label$1
	CALL memcpy($2, $5, [16])
	*($3 + [280]) = (int_64)0
	$2 = ($5 + [16])
	$7 = ($4 & [-8])
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$6 }
	CALL eosio_assert([0], [8859])
	
.LABEL $label$6
	CALL memcpy(($3 + [280]), $2, [8])
	*($3 + [272]) = (int_64)0
	$2 = ($5 + [24])
	if ( ((int_32)$7 != (int_32)[24]) ){ goto $label$7 }
	CALL eosio_assert([0], [8859])
	
.LABEL $label$7
	CALL memcpy(($3 + [272]), $2, [8])
	$8 = (int_64)0
	*((($3 + [240]) + [24])) = (int_64)0
	$2 = [16]
	*((($3 + [240]) + [16])) = (int_64)0
	*($3 + [248]) = (int_64)0
	*($3 + [240]) = (int_64)0
	$7 = ($5 + [32])
	if ( ((int_32)($4 & [-32]) != (int_32)[32]) ){ goto $label$8 }
	CALL eosio_assert([0], [8859])
	
.LABEL $label$8
	CALL memcpy(($3 + [88]), $7, [32])
	$9 = ($5 + [64])
	$7 = ($3 + [304])
	$4 = [0]
	$10 = (int_64)0
	
.LOOP $label$10:
	$11 = (($3 + [88]) + $4)
	if ( ($2 <= [2]) ){ goto $label$11 }
	$8 = ((int_64)$8 | (int_64)*($11))
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)(uint_64)$8 >> (uint_64)(int_64)56))
	$2 = ($2 + [-1])
	$8 = ((int_64)$8 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$12 }
	CALL eosio_assert([0], [9522])
	
.LABEL $label$12
	*($7 + [8]) = $10
	*($7) = ((int_64)$8 | (int_64)*($11))
	$2 = [16]
	$7 = ($7 + [16])
	$8 = (int_64)0
	$10 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)[16]) ){ goto $label$13 }
	if ( ($2 <= [2]) ){ goto $label$14 }
	CALL __ashlti3(($3 + [32]), $8, $10, (($2 << [3]) + [-8]))
	$10 = *(($3 + [40]))
	$8 = *($3 + [32])
	
.LABEL $label$14
	*($7) = $8
	*($7 + [8]) = $10
	
.LABEL $label$13
	*(($2 = (($3 + [240]) + [24]))) = *((($3 + [304]) + [24]))
	*(($4 = (($3 + [240]) + [16]))) = *((($3 + [304]) + [16]))
	*($3 + [248]) = *($3 + [312])
	*($3 + [240]) = *($3 + [304])
	*(($3 + [108])) = $9
	*((($3 + [88]) + [24])) = $6
	*(($3 + [128])) = $1
	*(($3 + [136])) = $5
	*(($3 + [140])) = $9
	*(($3 + [144])) = $6
	*(($3 + [152])) = $0
	*(($3 + [168])) = $0
	*(($3 + [176])) = (int_64)-1
	*(($9 = ($3 + [184]))) = (int_64)0
	*(($3 + [192])) = [0]
	*(($3 + [196])) = [0]
	*($3 + [96]) = $1
	*($3 + [88]) = $0
	*($3 + [104]) = $5
	*($3 + [120]) = $0
	*($3 + [160]) = $0
	*($3 + [200]) = $0
	*(($3 + [216])) = (int_64)-1
	*(($3 + [208])) = $0
	*(($7 = ($3 + [224]))) = (int_64)0
	*(($3 + [232])) = [0]
	$8 = *($4)
	*((($3 + [48]) + [16])) = $8
	$10 = *($2)
	*((($3 + [48]) + [24])) = $10
	*(($3 + [16])) = $8
	*(($3 + [24])) = $10
	$8 = *($3 + [240])
	*($3 + [48]) = $8
	$10 = *($3 + [248])
	*($3 + [56]) = $10
	*($3) = $8
	*($3 + [8]) = $10
	CALL $65(($3 + [88]), *($3 + [288]), *($3 + [296]), *($3 + [280]), *($3 + [272]), $3)
	$11 = *($7)
	if ( ($11 == 0) ){ goto $label$15 }
	$5 = ($3 + [228])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$19 }
	$7 = *($2 + [28])
	if ( ($7 == 0) ){ goto $label$20 }
	*(($2 + [32])) = $7
	CALL $9($7)
	
.LABEL $label$20
	$7 = *($2 + [16])
	if ( ($7 == 0) ){ goto $label$21 }
	*(($2 + [20])) = $7
	CALL $9($7)
	
.LABEL $label$21
	CALL $9($2)
	
.LABEL $label$19
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$18 }
	$2 = *(($3 + [224]))
	goto $label$16 
	
.LABEL $label$17
	$2 = $11
	
.LABEL $label$16
	*($5) = $11
	CALL $9($2)
	
.LABEL $label$15
	$7 = *($9)
	if ( ($7 == 0) ){ goto $label$22 }
	$11 = ($3 + [188])
	$2 = *($11)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$24 }
	
.LOOP $label$25:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$26 }
	CALL $9($4)
	
.LABEL $label$26
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$25 }
	$2 = *(($3 + [184]))
	goto $label$23 
	
.LABEL $label$24
	$2 = $7
	
.LABEL $label$23
	*($11) = $7
	CALL $9($2)
	
.LABEL $label$22
	$global$0 = ($3 + [336])
}

void .FUNC $86 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $1($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [16])
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$5 = ($3 + [16])
	if ( ((uint_32)$4 > (uint_32)[15]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8859])
	
.LABEL $label$1
	CALL memcpy($5, $2, [16])
	*($3 + [8]) = (int_64)0
	$2 = ($2 + [16])
	if ( ((int_32)($4 & [-8]) != (int_32)[16]) ){ goto $label$6 }
	CALL eosio_assert([0], [8859])
	
.LABEL $label$6
	CALL memcpy(($3 + [8]), $2, [8])
	CALL $54($3, *($3 + [16]), *($3 + [24]), *($3 + [8]))
	$global$0 = ($3 + [32])
}

void .FUNC $85 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [160])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [152]) = (int_64)0
	$5 = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8859])
	
.LABEL $label$5
	CALL memcpy(($3 + [152]), $2, [8])
	$4 = ($2 + [8])
	*(($3 + [20])) = $4
	*(($3 + [24])) = $5
	*(($3 + [40])) = $1
	*(($3 + [48])) = $2
	*(($3 + [52])) = $4
	*(($3 + [56])) = $5
	*(($3 + [64])) = $0
	*(($3 + [80])) = $0
	*(($3 + [88])) = (int_64)-1
	*(($6 = ($3 + [96]))) = (int_64)0
	*(($3 + [104])) = [0]
	*(($3 + [108])) = [0]
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $2
	*($3 + [32]) = $0
	*($3 + [72]) = $0
	*($3 + [112]) = $0
	*(($3 + [128])) = (int_64)-1
	*(($3 + [120])) = $0
	*(($2 = ($3 + [136]))) = (int_64)0
	*(($3 + [144])) = [0]
	CALL $53($3, *($3 + [152]))
	$7 = *($2)
	if ( ($7 == 0) ){ goto $label$6 }
	$8 = ($3 + [140])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$5 = *($2 + [28])
	if ( ($5 == 0) ){ goto $label$11 }
	*(($2 + [32])) = $5
	CALL $9($5)
	
.LABEL $label$11
	$5 = *($2 + [16])
	if ( ($5 == 0) ){ goto $label$12 }
	*(($2 + [20])) = $5
	CALL $9($5)
	
.LABEL $label$12
	CALL $9($2)
	
.LABEL $label$10
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$9 }
	$2 = *(($3 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $7
	
.LABEL $label$7
	*($8) = $7
	CALL $9($2)
	
.LABEL $label$6
	$5 = *($6)
	if ( ($5 == 0) ){ goto $label$13 }
	$7 = ($3 + [100])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	CALL $9($4)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($3 + [96]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $5
	
.LABEL $label$14
	*($7) = $5
	CALL $9($2)
	
.LABEL $label$13
	$global$0 = ($3 + [160])
}

void .FUNC $84 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [160])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [152]) = (int_64)0
	$5 = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8859])
	
.LABEL $label$5
	CALL memcpy(($3 + [152]), $2, [8])
	$4 = ($2 + [8])
	*(($3 + [20])) = $4
	*(($3 + [24])) = $5
	*(($3 + [40])) = $1
	*(($3 + [48])) = $2
	*(($3 + [52])) = $4
	*(($3 + [56])) = $5
	*(($3 + [64])) = $0
	*(($3 + [80])) = $0
	*(($3 + [88])) = (int_64)-1
	*(($6 = ($3 + [96]))) = (int_64)0
	*(($3 + [104])) = [0]
	*(($3 + [108])) = [0]
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $2
	*($3 + [32]) = $0
	*($3 + [72]) = $0
	*($3 + [112]) = $0
	*(($3 + [128])) = (int_64)-1
	*(($3 + [120])) = $0
	*(($2 = ($3 + [136]))) = (int_64)0
	*(($3 + [144])) = [0]
	CALL $50($3, *($3 + [152]))
	$7 = *($2)
	if ( ($7 == 0) ){ goto $label$6 }
	$8 = ($3 + [140])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$5 = *($2 + [28])
	if ( ($5 == 0) ){ goto $label$11 }
	*(($2 + [32])) = $5
	CALL $9($5)
	
.LABEL $label$11
	$5 = *($2 + [16])
	if ( ($5 == 0) ){ goto $label$12 }
	*(($2 + [20])) = $5
	CALL $9($5)
	
.LABEL $label$12
	CALL $9($2)
	
.LABEL $label$10
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$9 }
	$2 = *(($3 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $7
	
.LABEL $label$7
	*($8) = $7
	CALL $9($2)
	
.LABEL $label$6
	$5 = *($6)
	if ( ($5 == 0) ){ goto $label$13 }
	$7 = ($3 + [100])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	CALL $9($4)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($3 + [96]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $5
	
.LABEL $label$14
	*($7) = $5
	CALL $9($2)
	
.LABEL $label$13
	$global$0 = ($3 + [160])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[15]) ){ goto $label$1 }
	CALL eosio_assert([0], [8859])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [16])
	*(($4 = ($4 + [4]))) = (*($4) + [16])
	$5 = *($0)
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8859])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[31]) ){ goto $label$3 }
	CALL eosio_assert([0], [8859])
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	$3 = ($5 + [32])
	CALL memcpy(($2 + [48]), $4, [32])
	*(($1 = ($1 + [4]))) = (*($1) + [32])
	$6 = (int_64)0
	$1 = [16]
	$0 = ($2 + [16])
	$4 = [0]
	$7 = (int_64)0
	
.LOOP $label$5:
	$5 = (($2 + [48]) + $4)
	if ( ($1 <= [2]) ){ goto $label$6 }
	$6 = ((int_64)$6 | (int_64)*($5))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$7 }
	CALL eosio_assert([0], [9522])
	
.LABEL $label$7
	*($0 + [8]) = $7
	*($0) = ((int_64)$6 | (int_64)*($5))
	$1 = [16]
	$0 = ($0 + [16])
	$6 = (int_64)0
	$7 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$8 }
	if ( ($1 <= [2]) ){ goto $label$9 }
	CALL __ashlti3($2, $6, $7, (($1 << [3]) + [-8]))
	$7 = *(($2 + [8]))
	$6 = *($2)
	
.LABEL $label$9
	*($0) = $6
	*($0 + [8]) = $7
	
.LABEL $label$8
	*($3) = *($2 + [16])
	*(($3 + [8])) = *($2 + [24])
	*(($3 + [24])) = *((($2 + [16]) + [24]))
	*(($3 + [16])) = *((($2 + [16]) + [16]))
	$global$0 = ($2 + [80])
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[15]) ){ goto $label$1 }
	CALL eosio_assert([0], [8859])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [16])
	*(($4 = ($4 + [4]))) = (*($4) + [16])
	$0 = *($0)
	$3 = ($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8859])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8859])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[31]) ){ goto $label$4 }
	CALL eosio_assert([0], [8859])
	$4 = *(($1 + [4]))
	
.LABEL $label$4
	$3 = ($0 + [32])
	CALL memcpy(($2 + [48]), $4, [32])
	*(($1 = ($1 + [4]))) = (*($1) + [32])
	$6 = (int_64)0
	$1 = [16]
	$0 = ($2 + [16])
	$4 = [0]
	$7 = (int_64)0
	
.LOOP $label$6:
	$5 = (($2 + [48]) + $4)
	if ( ($1 <= [2]) ){ goto $label$7 }
	$6 = ((int_64)$6 | (int_64)*($5))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$8 }
	CALL eosio_assert([0], [9522])
	
.LABEL $label$8
	*($0 + [8]) = $7
	*($0) = ((int_64)$6 | (int_64)*($5))
	$1 = [16]
	$0 = ($0 + [16])
	$6 = (int_64)0
	$7 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$9 }
	if ( ($1 <= [2]) ){ goto $label$10 }
	CALL __ashlti3($2, $6, $7, (($1 << [3]) + [-8]))
	$7 = *(($2 + [8]))
	$6 = *($2)
	
.LABEL $label$10
	*($0) = $6
	*($0 + [8]) = $7
	
.LABEL $label$9
	*($3) = *($2 + [16])
	*(($3 + [8])) = *($2 + [24])
	*(($3 + [24])) = *((($2 + [16]) + [24]))
	*(($3 + [16])) = *((($2 + [16]) + [16]))
	$global$0 = ($2 + [80])
}

int_32 .FUNC $81 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [28])) = $2
	$3 = ($2 + $7)
	*(($4 + [32])) = $3
	*(($4 + [48])) = $1
	*(($4 + [56])) = $2
	*(($4 + [60])) = $2
	*(($4 + [64])) = $3
	*(($4 + [72])) = $0
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [128])) = $0
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( ($5 & [1]) ){ goto $label$10 }
	CALL void $3((int_32 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL void $3((int_32 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($2)
	$3 = *(($4 + [144]))
	if ( ($3 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$3 = *(($4 + [144]))
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$7
	$5 = *(($4 + [104]))
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = ($4 + [148])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$14 }
	$5 = *($2 + [28])
	if ( ($5 == 0) ){ goto $label$15 }
	*(($2 + [32])) = $5
	CALL $9($5)
	
.LABEL $label$15
	$5 = *($2 + [16])
	if ( ($5 == 0) ){ goto $label$16 }
	*(($2 + [20])) = $5
	CALL $9($5)
	
.LABEL $label$16
	CALL $9($2)
	
.LABEL $label$14
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$13 }
	$2 = *(($4 + [144]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $3
	
.LABEL $label$11
	*($6) = $3
	CALL $9($2)
	$5 = *(($4 + [104]))
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ($4 + [108])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$18 }
	
.LOOP $label$19:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$20 }
	CALL $9($7)
	
.LABEL $label$20
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$19 }
	$2 = *(($4 + [104]))
	goto $label$17 
	
.LABEL $label$18
	$2 = $5
	
.LABEL $label$17
	*($3) = $5
	CALL $9($2)
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $80 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [224]) + [56]))) = (int_64)0
	*(($8 = (($4 + [224]) + [48]))) = (int_64)0
	*(($9 = (($4 + [224]) + [40]))) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [212]) = $2
	*($4 + [208]) = $2
	*($4 + [216]) = ($2 + $7)
	*($4 + [400]) = ($4 + [208])
	*($4 + [56]) = ($4 + [224])
	CALL $83(($4 + [56]), ($4 + [400]))
	*(($10 = (($4 + [40]) + [8]))) = *($4 + [216])
	*($4 + [40]) = *($4 + [208])
	$10 = *($10)
	*(($11 = (($4 + [288]) + [8]))) = $10
	*(($12 = (($4 + [320]) + [8]))) = $10
	$13 = *($4 + [40])
	*($4 + [320]) = $13
	*($4 + [288]) = $13
	$12 = *($12)
	*(($10 = (($4 + [400]) + [8]))) = $12
	*((($4 + [56]) + [24])) = $12
	*($4 + [56]) = $0
	*($4 + [64]) = $1
	$13 = *($4 + [320])
	*($4 + [72]) = $13
	*($4 + [400]) = $13
	*(($12 = (($4 + [304]) + [8]))) = *($11)
	*($4 + [304]) = *($4 + [288])
	$11 = *($12)
	*((($4 + [336]) + [8])) = $11
	*(($12 = (($4 + [368]) + [8]))) = $11
	$13 = *($4 + [304])
	*($4 + [368]) = $13
	*($4 + [336]) = $13
	*((($4 + [56]) + [40])) = $1
	$11 = *($12)
	*($10) = $11
	$1 = *($4 + [368])
	*((($4 + [56]) + [48])) = $1
	*((($4 + [56]) + [56])) = $11
	*($4 + [88]) = $0
	*($4 + [400]) = $1
	*(($4 + [120])) = $0
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [164])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($10 = (($4 + [336]) + [16]))) = *($8)
	*(($8 = (($4 + [336]) + [24]))) = *($3)
	*($4 + [336]) = *($4 + [256])
	*($4 + [344]) = *($9)
	$0 = *($4 + [232])
	$1 = *($4 + [224])
	$13 = *($4 + [240])
	*((($4 + [368]) + [24])) = *($8)
	*((($4 + [368]) + [16])) = *($10)
	*($4 + [376]) = *($4 + [344])
	*($4 + [368]) = *($4 + [336])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$14 = *((($4 + [368]) + [24]))
	*((($4 + [400]) + [24])) = $14
	$15 = *((($4 + [368]) + [16]))
	*((($4 + [400]) + [16])) = $15
	*(($4 + [16])) = $15
	*(($4 + [24])) = $14
	$14 = *($4 + [376])
	*($4 + [408]) = $14
	$15 = *($4 + [368])
	*($4) = $15
	*($4 + [400]) = $15
	*($4 + [8]) = $14
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $13), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $2($2)
	
.LABEL $label$5
	$6 = *(($4 + [192]))
	if ( ($6 == 0) ){ goto $label$6 }
	$3 = ($4 + [196])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$5 = *($2 + [28])
	if ( ($5 == 0) ){ goto $label$11 }
	*(($2 + [32])) = $5
	CALL $9($5)
	
.LABEL $label$11
	$5 = *($2 + [16])
	if ( ($5 == 0) ){ goto $label$12 }
	*(($2 + [20])) = $5
	CALL $9($5)
	
.LABEL $label$12
	CALL $9($2)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	$2 = *(($4 + [192]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $6
	
.LABEL $label$7
	*($3) = $6
	CALL $9($2)
	
.LABEL $label$6
	$5 = *(($4 + [152]))
	if ( ($5 == 0) ){ goto $label$13 }
	$6 = ($4 + [156])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL $9($7)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($4 + [152]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $5
	
.LABEL $label$14
	*($6) = $5
	CALL $9($2)
	
.LABEL $label$13
	$global$0 = ($4 + [432])
	return [1]
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9168])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9213])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$8 = *(($1 + [8]))
	$7 = *($1)
	$6 = *(($4 + [-24]))
	if ( (int_64)(((int_64)((int_64)*($6) ^ (int_64)$7) | (int_64)((int_64)*(($6 + [8])) ^ (int_64)$8)) == 0) ){ goto $label$9 }
	$9 = ($2 + [24])
	$5 = $4
	
.LOOP $label$10:
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$8 }
	$6 = ($5 + [-48])
	$5 = ($5 + [-24])
	$6 = *($6)
	if ( ((int_64)(((int_64)((int_64)*($6) ^ (int_64)$7) | (int_64)((int_64)*(($6 + [8])) ^ (int_64)$8)) == 0) == 0) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [9263])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$3 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$6 = $5
	
.LOOP $label$11:
	$2 = *($6)
	*($6) = [0]
	$3 = ($6 + $9)
	$5 = *($3)
	*($3) = $2
	if ( ($5 == 0) ){ goto $label$12 }
	$2 = *($5 + [28])
	if ( ($2 == 0) ){ goto $label$13 }
	*(($5 + [32])) = $2
	CALL $9($2)
	
.LABEL $label$13
	$2 = *($5 + [16])
	if ( ($2 == 0) ){ goto $label$14 }
	*(($5 + [20])) = $2
	CALL $9($2)
	
.LABEL $label$14
	CALL $9($5)
	
.LABEL $label$12
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$11 }
	$3 = ($6 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$15:
	$5 = ($5 + $9)
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$16 }
	$2 = *($6 + [28])
	if ( ($2 == 0) ){ goto $label$17 }
	*(($6 + [32])) = $2
	CALL $9($2)
	
.LABEL $label$17
	$2 = *($6 + [16])
	if ( ($2 == 0) ){ goto $label$18 }
	*(($6 + [20])) = $2
	CALL $9($2)
	
.LABEL $label$18
	CALL $9($6)
	
.LABEL $label$16
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$15 }
	
.LABEL $label$3
	*(($0 + [28])) = $3
	CALL db_remove_i64(*(($1 + [44])))
}

void .FUNC $73 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [48])
	$global$0 = $5
	CALL printhex($4, [32])
	$4 = [0]
	*(($5 + [32])) = [0]
	*($5 + [8]) = $3
	*($5) = $3
	*($5 + [16]) = (int_64)-1
	*($5 + [24]) = (int_64)0
	$6 = CALL db_find_i64($3, $3, (int_64)3617214769600282624, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$4 = CALL $32($5, $6)
	if ( ((int_32)*($4 + [68]) == (int_32)$5) ){ goto $label$1 }
	CALL eosio_assert([0], [8785])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8473])
	CALL eosio_assert([0], [9104])
	CALL eosio_assert([0], [9138])
	
.LABEL $label$1
	$6 = CALL db_next_i64(*($4 + [72]), ($5 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	CALL $32($5, $6)
	
.LABEL $label$3
	CALL $35($5, $4)
	$7 = *($5 + [24])
	if ( ($7 == 0) ){ goto $label$4 }
	$8 = ($5 + [28])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$9 = ($9 + [-24])
	$10 = *($9)
	*($9) = [0]
	if ( ($10 == 0) ){ goto $label$8 }
	$11 = *($10 + [56])
	if ( ($11 == 0) ){ goto $label$9 }
	$12 = ($10 + [60])
	$6 = *($12)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($6 + [-4])))
	
.LABEL $label$13
	$6 = $4
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$12 }
	$4 = *(($10 + [56]))
	goto $label$10 
	
.LABEL $label$11
	$4 = $11
	
.LABEL $label$10
	*($12) = $11
	CALL $9($4)
	
.LABEL $label$9
	CALL $9($10)
	
.LABEL $label$8
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$7 }
	$4 = *(($5 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($8) = $7
	CALL $9($4)
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9366])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9412])
	
.LABEL $label$2
	*($1 + [8]) = [0]
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)1)
	$5 = ($1 + [32])
	*($4 + [24]) = *($5)
	$6 = *($1)
	*($5) = ((int_64)((int_64)CALL $16() / (int_64)1000000) & (int_64)4294967295)
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [9463])
	
.LABEL $label$3
	$5 = $3
	$3 = ($5 + [-48])
	$global$0 = $3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($5 + [-12])
	CALL $66(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $3, [36])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($4 + [40]) = *(($1 + [32]))
	if ( (CALL $20(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [48])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4425744126933864448, ($4 + [32]), $6)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($4 + [40]))
	
.LABEL $label$5
	$global$0 = ($4 + [48])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9366])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9412])
	
.LABEL $label$2
	$5 = ($1 + [32])
	*($4 + [24]) = *($5)
	$6 = *($1)
	if ( ((int_32)*($1 + [8]) != (int_32)[2]) ){ goto $label$3 }
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)1)
	
.LABEL $label$3
	*(($1 + [8])) = [2]
	*($5) = ((int_64)((int_64)CALL $16() / (int_64)1000000) & (int_64)4294967295)
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$4 }
	CALL eosio_assert([0], [9463])
	
.LABEL $label$4
	$5 = $3
	$3 = ($5 + [-48])
	$global$0 = $3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($5 + [-12])
	CALL $66(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $3, [36])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($4 + [40]) = *(($1 + [32]))
	if ( (CALL $20(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$6 }
	$3 = ($1 + [48])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4425744126933864448, ($4 + [32]), $6)
	*($3) = $1
	
.LABEL $label$7
	CALL db_idx64_update($1, $2, ($4 + [40]))
	
.LABEL $label$6
	$global$0 = ($4 + [48])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)-3841117306037993473) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-5000819499233673216) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-4994024801513095168) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4425741383397364224) ){ goto $label$1 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [3]
	*($3 + [24]) = *($3 + [64])
	CALL $77($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)-3841117306037993472) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)4851652650024304640) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)7108557744776582288) ){ goto $label$1 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [4]
	*($3) = *($3 + [88])
	CALL $78($1, $1, $3)
	goto $label$1 
	
.LABEL $label$5
	*($3 + [84]) = [0]
	*($3 + [80]) = [5]
	*($3 + [8]) = *($3 + [80])
	CALL $79($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [52]) = [0]
	*($3 + [48]) = [6]
	*($3 + [40]) = *($3 + [48])
	CALL $80($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [76]) = [0]
	*($3 + [72]) = [7]
	*($3 + [16]) = *($3 + [72])
	CALL $81($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [60]) = [0]
	*($3 + [56]) = [8]
	*($3 + [32]) = *($3 + [56])
	CALL $81($1, $1, ($3 + [32]))
	
.LABEL $label$1
	CALL $19([0])
	$global$0 = ($3 + [96])
}

int_32 .FUNC $77 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [224]) + [56]))) = (int_64)0
	*(($8 = (($4 + [224]) + [48]))) = (int_64)0
	*(($9 = (($4 + [224]) + [40]))) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [212]) = $2
	*($4 + [208]) = $2
	*($4 + [216]) = ($2 + $7)
	*($4 + [400]) = ($4 + [208])
	*($4 + [56]) = ($4 + [224])
	CALL $82(($4 + [56]), ($4 + [400]))
	*(($10 = (($4 + [40]) + [8]))) = *($4 + [216])
	*($4 + [40]) = *($4 + [208])
	$10 = *($10)
	*(($11 = (($4 + [288]) + [8]))) = $10
	*(($12 = (($4 + [320]) + [8]))) = $10
	$13 = *($4 + [40])
	*($4 + [320]) = $13
	*($4 + [288]) = $13
	$12 = *($12)
	*(($10 = (($4 + [400]) + [8]))) = $12
	*((($4 + [56]) + [24])) = $12
	*($4 + [56]) = $0
	*($4 + [64]) = $1
	$13 = *($4 + [320])
	*($4 + [72]) = $13
	*($4 + [400]) = $13
	*(($12 = (($4 + [304]) + [8]))) = *($11)
	*($4 + [304]) = *($4 + [288])
	$11 = *($12)
	*((($4 + [336]) + [8])) = $11
	*(($12 = (($4 + [368]) + [8]))) = $11
	$13 = *($4 + [304])
	*($4 + [368]) = $13
	*($4 + [336]) = $13
	*((($4 + [56]) + [40])) = $1
	$11 = *($12)
	*($10) = $11
	$1 = *($4 + [368])
	*((($4 + [56]) + [48])) = $1
	*((($4 + [56]) + [56])) = $11
	*($4 + [88]) = $0
	*($4 + [400]) = $1
	*(($4 + [120])) = $0
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [164])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($10 = (($4 + [336]) + [16]))) = *($8)
	*(($8 = (($4 + [336]) + [24]))) = *($3)
	*($4 + [336]) = *($4 + [256])
	*($4 + [344]) = *($9)
	$0 = *($4 + [232])
	$1 = *($4 + [224])
	$13 = *($4 + [248])
	$14 = *($4 + [240])
	*((($4 + [368]) + [24])) = *($8)
	*((($4 + [368]) + [16])) = *($10)
	*($4 + [376]) = *($4 + [344])
	*($4 + [368]) = *($4 + [336])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$15 = *((($4 + [368]) + [24]))
	*((($4 + [400]) + [24])) = $15
	$16 = *((($4 + [368]) + [16]))
	*((($4 + [400]) + [16])) = $16
	*(($4 + [16])) = $16
	*(($4 + [24])) = $15
	$15 = *($4 + [376])
	*($4 + [408]) = $15
	$16 = *($4 + [368])
	*($4) = $16
	*($4 + [400]) = $16
	*($4 + [8]) = $15
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $14), (int_64 $13), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $2($2)
	
.LABEL $label$5
	$6 = *(($4 + [192]))
	if ( ($6 == 0) ){ goto $label$6 }
	$3 = ($4 + [196])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$5 = *($2 + [28])
	if ( ($5 == 0) ){ goto $label$11 }
	*(($2 + [32])) = $5
	CALL $9($5)
	
.LABEL $label$11
	$5 = *($2 + [16])
	if ( ($5 == 0) ){ goto $label$12 }
	*(($2 + [20])) = $5
	CALL $9($5)
	
.LABEL $label$12
	CALL $9($2)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	$2 = *(($4 + [192]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $6
	
.LABEL $label$7
	*($3) = $6
	CALL $9($2)
	
.LABEL $label$6
	$5 = *(($4 + [152]))
	if ( ($5 == 0) ){ goto $label$13 }
	$6 = ($4 + [156])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL $9($7)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($4 + [152]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $5
	
.LABEL $label$14
	*($6) = $5
	CALL $9($2)
	
.LABEL $label$13
	$global$0 = ($4 + [432])
	return [1]
}

void .FUNC $74 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = ($global$0 - [112])
	$global$0 = $1
	*($1 + [56]) = (int_64)0
	*($1 + [48]) = (int_64)0
	*($1 + [40]) = [8450]
	*($1 + [44]) = CALL $17([8450])
	*($1) = *($1 + [40])
	$2 = CALL $36(($1 + [8]), $1)
	*($1 + [32]) = (int_64)0
	*($1 + [80]) = [0]
	*($1 + [72]) = (int_64)0
	CALL $31((int_64)0, (int_64)0, [10000], $0, $0, $2, ($1 + [32]), ($1 + [72]), [0])
	$3 = *($1 + [72])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = *($1 + [76])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($4 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	CALL $9(*(($4 + [-4])))
	
.LABEL $label$5
	$4 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$4 }
	$2 = *($1 + [72])
	goto $label$2 
	
.LABEL $label$3
	$2 = $3
	
.LABEL $label$2
	*($1 + [76]) = $3
	CALL $9($2)
	
.LABEL $label$1
	$5 = *($0)
	*($1 + [8]) = $5
	*(($2 = CALL $7([16]))) = $5
	*($2 + [8]) = (int_64)3617214756542218240
	$4 = ($2 + [16])
	*((($1 + [8]) + [16])) = $4
	*(($1 + [20])) = $4
	*($1 + [16]) = $2
	CALL $51(($1 + [72]), ($1 + [8]), ($1 + [48]), $0)
	CALL $52(($1 + [72]))
	$2 = *($1 + [100])
	if ( ($2 == 0) ){ goto $label$6 }
	*(($1 + [104])) = $2
	CALL $9($2)
	
.LABEL $label$6
	$2 = *($1 + [88])
	if ( ($2 == 0) ){ goto $label$7 }
	*(($1 + [92])) = $2
	CALL $9($2)
	
.LABEL $label$7
	$2 = *($1 + [16])
	if ( ($2 == 0) ){ goto $label$8 }
	*(($1 + [20])) = $2
	CALL $9($2)
	
.LABEL $label$8
	$global$0 = ($1 + [112])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [8591])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [8696])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8629])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8696])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = [0]
	CALL $39(($4 + [16]), $0)
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $40($4, $6)
	$5 = *($4 + [4])
	$6 = *($4)
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $6
	*($4 + [16]) = $6
	*($4 + [24]) = $5
	CALL $41(($4 + [16]), $0)
	$0 = *($4)
	CALL send_deferred($1, $2, $0, (*($4 + [4]) - $0), $3)
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$3 }
	*($4 + [4]) = $0
	CALL $9($0)
	
.LABEL $label$3
	$global$0 = ($4 + [32])
}

int_32 .FUNC $78 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [176]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[15]) ){ goto $label$5 }
	CALL eosio_assert([0], [8859])
	
.LABEL $label$5
	$3 = ($2 + $7)
	CALL memcpy(($4 + [160]), $2, [16])
	$8 = ($2 + [16])
	$9 = (($4 + [160]) + [16])
	if ( ((int_32)($7 & [-8]) != (int_32)[16]) ){ goto $label$6 }
	CALL eosio_assert([0], [8859])
	
.LABEL $label$6
	CALL memcpy($9, $8, [8])
	$8 = ($2 + [24])
	*(($4 + [28])) = $8
	*((($4 + [8]) + [24])) = $3
	*(($4 + [48])) = $1
	*(($4 + [56])) = $2
	*(($4 + [60])) = $8
	*(($4 + [64])) = $3
	*(($4 + [72])) = $0
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [128])) = $0
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($9)
	$1 = *($4 + [168])
	$10 = *($4 + [160])
	if ( ($5 & [1]) ){ goto $label$13 }
	CALL void $3((int_32 $10), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL void $3((int_32 $10), (int_64 $1), (int_64 $0), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $2($2)
	$3 = *(($4 + [144]))
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$3 = *(($4 + [144]))
	if ( $3 ){ goto $label$9 }
	
.LABEL $label$10
	$5 = *(($4 + [104]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$9 = ($4 + [148])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	$5 = *($2 + [28])
	if ( ($5 == 0) ){ goto $label$18 }
	*(($2 + [32])) = $5
	CALL $9($5)
	
.LABEL $label$18
	$5 = *($2 + [16])
	if ( ($5 == 0) ){ goto $label$19 }
	*(($2 + [20])) = $5
	CALL $9($5)
	
.LABEL $label$19
	CALL $9($2)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$16 }
	$2 = *(($4 + [144]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $3
	
.LABEL $label$14
	*($9) = $3
	CALL $9($2)
	$5 = *(($4 + [104]))
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$3 = ($4 + [108])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$21 }
	
.LOOP $label$22:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$23 }
	CALL $9($7)
	
.LABEL $label$23
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$22 }
	$2 = *(($4 + [104]))
	goto $label$20 
	
.LABEL $label$21
	$2 = $5
	
.LABEL $label$20
	*($3) = $5
	CALL $9($2)
	
.LABEL $label$7
	$global$0 = ($4 + [192])
	return [1]
}

int_32 .FUNC $79 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [152]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8859])
	
.LABEL $label$5
	CALL memcpy(($4 + [152]), $2, [8])
	$8 = ($2 + [8])
	*(($4 + [20])) = $8
	*(($4 + [24])) = $3
	*(($4 + [40])) = $1
	*(($4 + [48])) = $2
	*(($4 + [52])) = $8
	*(($4 + [56])) = $3
	*(($4 + [64])) = $0
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [120])) = $0
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [152])
	if ( ($5 & [1]) ){ goto $label$12 }
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL void $3((int_32 $0), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $2($2)
	$3 = *(($4 + [136]))
	if ( ($3 == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$3 = *(($4 + [136]))
	if ( $3 ){ goto $label$8 }
	
.LABEL $label$9
	$5 = *(($4 + [96]))
	if ( $5 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$6 = ($4 + [140])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$16 }
	$5 = *($2 + [28])
	if ( ($5 == 0) ){ goto $label$17 }
	*(($2 + [32])) = $5
	CALL $9($5)
	
.LABEL $label$17
	$5 = *($2 + [16])
	if ( ($5 == 0) ){ goto $label$18 }
	*(($2 + [20])) = $5
	CALL $9($5)
	
.LABEL $label$18
	CALL $9($2)
	
.LABEL $label$16
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$15 }
	$2 = *(($4 + [136]))
	goto $label$13 
	
.LABEL $label$14
	$2 = $3
	
.LABEL $label$13
	*($6) = $3
	CALL $9($2)
	$5 = *(($4 + [96]))
	if ( ($5 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$3 = ($4 + [100])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$22 }
	CALL $9($7)
	
.LABEL $label$22
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$21 }
	$2 = *(($4 + [96]))
	goto $label$19 
	
.LABEL $label$20
	$2 = $5
	
.LABEL $label$19
	*($3) = $5
	CALL $9($2)
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8836])
	
.LABEL $label$5
	$5 = CALL $1($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $5, $4)
	*($3 + [52]) = $5
	*($3 + [48]) = $5
	*($3 + [56]) = ($5 + $4)
	*(($4 = CALL $7([80])) + [32]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56 align=4]) = (int_64)0
	*($4 + [64]) = [0]
	*($4 + [68]) = $0
	CALL $105(($3 + [48]), $4)
	*($4 + [72]) = $1
	*($3 + [40]) = $4
	*($3 + [24]) = *(($4 + [8]))
	$7 = *($4)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [40]) = [0]
	*($2) = $4
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $34(($0 + [24]), ($3 + [40]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($5)
	
.LABEL $label$7
	$2 = *($3 + [40])
	*($3 + [40]) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$0 = *($2 + [56])
	if ( ($0 == 0) ){ goto $label$11 }
	$6 = ($2 + [60])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($1 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$15 }
	CALL $9(*(($1 + [-4])))
	
.LABEL $label$15
	$1 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($2 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $0
	
.LABEL $label$12
	*($6) = $0
	CALL $9($5)
	
.LABEL $label$11
	CALL $9($2)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $4
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1 + [24]) = *(*($4 + [8]))
	*($1 + [32]) = *(*($4 + [12]))
	*($1 + [40]) = *(*($4 + [16]))
	*($1 + [16]) = *(*($4 + [4]))
	$5 = *($4)
	$6 = *($5)
	*($1 + [8]) = *(($5 + [8]))
	*($1) = $6
	*($1 + [48]) = *(*($4 + [20]))
	$7 = *($0)
	$4 = *($4 + [24])
	CALL $109(($1 + [56]), *($4), *($4 + [4]))
	$5 = *($1 + [56])
	$8 = *(($1 + [60]))
	$6 = (CASTING uint_64)(uint_32 ((int_32)($8 - $5) / (int_32)[12]))
	$4 = [50]
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$3:
	$9 = *($5)
	$9 = ( *($5 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$4 = ($9 + $4)
	$6 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$4:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$4 }
	$5 = ($5 + [12])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($4 <= [513]) ){ goto $label$6 }
	$5 = CALL $1($4)
	goto $label$5 
	
.LABEL $label$6
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $4)
	CALL $110($3, $1)
	$10 = *(($1 + [8]))
	$6 = *($1)
	*($1 + [72]) = CALL db_store_i64(*($7 + [8]), (int_64)3617214769600282624, *(*($0 + [8])), $6, $5, $4)
	if ( ($4 <= [513]) ){ goto $label$7 }
	CALL $2($5)
	
.LABEL $label$7
	$4 = (int_64)($10 == 0)
	if ( ( (uint_64)($6 <= *($7 + [16])) ? [0] : $4 ) ){ goto $label$8 }
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ( ((uint_64)$6 > (uint_64)(int_64)-3) ? ((int_64)$10 != (int_64)0) : $4 ) )
	
.LABEL $label$8
	$global$0 = ($3 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $7(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $9($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $31 (int_64 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	$9 = ($global$0 - [144])
	$global$0 = $9
	*($9 + [88]) = $1
	*($9 + [78]) = $2
	*($9 + [80]) = $0
	$2 = [0]
	*(($9 + [64])) = [0]
	*($9 + [48]) = (int_64)-1
	*($9 + [56]) = (int_64)0
	$1 = *($3)
	*($9 + [32]) = $1
	*($9 + [40]) = $1
	$10 = CALL db_find_i64($1, $1, (int_64)3617214769600282624, $0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $32(($9 + [32]), $10)
	if ( ((int_32)*($2 + [68]) == (int_32)($9 + [32])) ){ goto $label$1 }
	CALL eosio_assert([0], [8785])
	
.LABEL $label$1
	if ( ($8 == 0) ){ goto $label$6 }
	if ( ($2 == 0) ){ goto $label$5 }
	CALL eosio_assert([0], [8301])
	$5 = *($9 + [56])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	if ( $2 ){ goto $label$4 }
	
.LABEL $label$5
	$1 = *($3)
	*($9 + [8]) = $3
	*($9 + [12]) = $4
	*($9 + [16]) = $5
	*($9 + [20]) = $6
	*($9 + [24]) = $7
	*($9 + [4]) = ($9 + [78])
	*($9) = ($9 + [80])
	*($9 + [136]) = $1
	if ( ((int_64)CALL current_receiver() == (int_64)*($9 + [32])) ){ goto $label$7 }
	CALL eosio_assert([0], [9053])
	
.LABEL $label$7
	*($9 + [116]) = $9
	*($9 + [112]) = ($9 + [32])
	*($9 + [120]) = ($9 + [136])
	*(($3 = CALL $7([80])) + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56 align=4]) = (int_64)0
	*($3 + [64]) = [0]
	*($3 + [68]) = ($9 + [32])
	CALL $33(($9 + [112]), $3)
	*($9 + [128]) = $3
	*($9 + [120]) = *(($3 + [8]))
	$1 = *($3)
	*($9 + [112]) = $1
	$8 = *($3 + [72])
	*($9 + [108]) = $8
	$10 = ($9 + [60])
	$2 = *($10)
	if ( ((uint_32)$2 >= (uint_32)*(($9 + [64]))) ){ goto $label$9 }
	*($2 + [8]) = $1
	*($2 + [16]) = $8
	*($9 + [128]) = [0]
	*($2) = $3
	*($10) = ($2 + [24])
	$10 = *($9 + [128])
	*($9 + [128]) = [0]
	if ( ($10 == 0) ){ goto $label$4 }
	goto $label$8 
	
.LABEL $label$9
	CALL $34(($9 + [56]), ($9 + [128]), ($9 + [112]), ($9 + [108]))
	$10 = *($9 + [128])
	*($9 + [128]) = [0]
	if ( ($10 == 0) ){ goto $label$4 }
	
.LABEL $label$8
	$8 = *($10 + [56])
	if ( ($8 == 0) ){ goto $label$10 }
	$4 = ($10 + [60])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$12 }
	
.LOOP $label$13:
	$3 = ($2 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$14 }
	CALL $9(*(($2 + [-4])))
	
.LABEL $label$14
	$2 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$13 }
	$3 = *(($10 + [56]))
	goto $label$11 
	
.LABEL $label$12
	$3 = $8
	
.LABEL $label$11
	*($4) = $8
	CALL $9($3)
	
.LABEL $label$10
	CALL $9($10)
	
.LABEL $label$4
	$5 = *($9 + [56])
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($9 + [60])
	$10 = *($7)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$10 = ($10 + [-24])
	$4 = *($10)
	*($10) = [0]
	if ( ($4 == 0) ){ goto $label$18 }
	$8 = *($4 + [56])
	if ( ($8 == 0) ){ goto $label$19 }
	$6 = ($4 + [60])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$21 }
	
.LOOP $label$22:
	$3 = ($2 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$23 }
	CALL $9(*(($2 + [-4])))
	
.LABEL $label$23
	$2 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$22 }
	$3 = *(($4 + [56]))
	goto $label$20 
	
.LABEL $label$21
	$3 = $8
	
.LABEL $label$20
	*($6) = $8
	CALL $9($3)
	
.LABEL $label$19
	CALL $9($4)
	
.LABEL $label$18
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$17 }
	$3 = *(($9 + [56]))
	goto $label$15 
	
.LABEL $label$16
	$3 = $5
	
.LABEL $label$15
	*($7) = $5
	CALL $9($3)
	
.LABEL $label$2
	$global$0 = ($9 + [144])
}