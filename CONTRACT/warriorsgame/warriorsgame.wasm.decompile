(data (i32.const 8192) "read_transaction failed\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8225) "price\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8317) "lootbox_type\00")
(data (i32.const 8330) "buyer\00stoul\00")
(data (i32.const 8342) "recipient\00")
(data (i32.const 8352) "token_id\00")
(data (i32.const 8361) "token_name\00")
(data (i32.const 8372) "EQP\00")
(data (i32.const 8376) "category\00")
(data (i32.const 8385) "rarity\00%d\00")
(data (i32.const 8395) "trx_type\00")
(data (i32.const 8404) "owner\00")
(data (i32.const 8410) "WARRIOR\00%lu\00")
(data (i32.const 8422) "auc_start_price\00%lld\00")
(data (i32.const 8443) "auc_end_price\00%llu\00")
(data (i32.const 8462) "auc_duration\00")
(data (i32.const 8475) "refund\00")
(data (i32.const 8482) "seller\00")
(data (i32.const 8489) "tournament_type\00")
(data (i32.const 8505) "lootbox_\00")
(data (i32.const 8514) "BUY\00")
(data (i32.const 8518) "Invalid lootbox type given : \00")
(data (i32.const 8548) ", valid lootbox types are: 1,2,3,4,10.\00")
(data (i32.const 8587) "BUY_LOOTBOX\00")
(data (i32.const 8599) "GIFT\00")
(data (i32.const 8604) "GIFT_LOOTBOX\00: no conversion\00")
(data (i32.const 8633) "\00: out of range\00")
(data (i32.const 8649) ", valid lootbox types are: 1,2,3,4.\00")
(data (i32.const 8685) "Unexpected error in rarity generating\00")
(data (i32.const 8723) "ISSUE\00")
(data (i32.const 8729) "unable to find key\00")
(data (i32.const 8748) "Invalid price \'\00")
(data (i32.const 8764) "\' for given type \'\00")
(data (i32.const 8783) "\'. It should be \'\00")
(data (i32.const 8801) "\'.\00")
(data (i32.const 8804) "start_price < stopprice\00")
(data (i32.const 8828) "start_price must be positive\00")
(data (i32.const 8857) "end_price must be positive\00")
(data (i32.const 8884) "duration too low\00")
(data (i32.const 8901) "AUC_CREATE\00")
(data (i32.const 8912) "no auction with that token id\00")
(data (i32.const 8942) "\' for token \'\00")
(data (i32.const 8956) "auction sell success\00")
(data (i32.const 8977) "auction sell refund\00")
(data (i32.const 8997) "AUC_BID\00")
(data (i32.const 9005) "no auction with that item id\00")
(data (i32.const 9034) "AUC_CANCEL\00")
(data (i32.const 9045) "create auction item transfer\00")
(data (i32.const 9074) "auction item transfer\00")
(data (i32.const 9096) "ticket_\00")
(data (i32.const 9104) "Invalid tournament type given : \00")
(data (i32.const 9137) ", valid types is only 0 for now.\00")
(data (i32.const 9170) "BUY_TICKET\00")
(data (i32.const 9181) "\' for given tournament_type \'\00")
(data (i32.const 9211) "Price for \'\00")
(data (i32.const 9223) "\' item not found\00")
(data (i32.const 9240) "*\00")
(data (i32.const 9242) "issuer account does not exist\00")
(data (i32.const 9272) "invalid symbol name\00")
(data (i32.const 9292) "token with symbol already exists\00")
(data (i32.const 9325) "to account does not exist\00")
(data (i32.const 9351) "quantity must be a whole number\00")
(data (i32.const 9383) "memo has more than 256 bytes\00")
(data (i32.const 9412) "name has more than 32 bytes\00")
(data (i32.const 9440) "token with symbol does not exist. create token before issue\00")
(data (i32.const 9500) "invalid quantity\00")
(data (i32.const 9517) "must issue positive quantity of NFT\00")
(data (i32.const 9553) "symbol precision mismatch\00")
(data (i32.const 9579) "mismatch between number of tokens and uris provided\00")
(data (i32.const 9631) "cannot transfer to self\00")
(data (i32.const 9655) "token with specified ID does not exist\00")
(data (i32.const 9694) "sender does not own token with specified ID\00")
(data (i32.const 9738) "no balance object found\00")
(data (i32.const 9762) "overdrawn balance\00")
(data (i32.const 9780) "EOS\00")
(data (i32.const 9784) "only accepts EOS for deposits\00")
(data (i32.const 9814) "Invalid token transfer\00")
(data (i32.const 9837) "type\00")
(data (i32.const 9842) "buy_lootbox\00")
(data (i32.const 9854) "aucbid\00")
(data (i32.const 9861) "id\00")
(data (i32.const 9864) "buy_ticket\00")
(data (i32.const 9875) "start and end price symbols mismatch\00")
(data (i32.const 9912) "only accepts EOS for price\00")
(data (i32.const 9940) "\d8&\00\00")
(data (i32.const 9944) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9977) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10029) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10083) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10131) "error reading iterator\00")
(data (i32.const 10154) "read\00")
(data (i32.const 10159) "get\00")
(data (i32.const 10163) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 10212) "write\00")
(data (i32.const 10218) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10277) "attempt to subtract asset with different symbol\00")
(data (i32.const 10325) "subtraction underflow\00")
(data (i32.const 10347) "subtraction overflow\00")
(data (i32.const 10368) "string is too long to be a valid symbol_code\00")
(data (i32.const 10413) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 10466) "exchangedata\00")
(data (i32.const 10479) "string is too long to be a valid name\00")
(data (i32.const 10517) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 10584) "character is not in allowed character set for names\00")
(data (i32.const 10636) "\0e\00\00\00\0f\00\00\00")
(data (i32.const 10644) "static const char *boost::detail::ctti<boost::algorithm::detail::token_finderF<(lambda at /home/kgrigoriev/projects/0xGames/crypto-warriors-eos/src/utils/utils.hpp:18:34)> >::n() [T = boost::algorithm::detail::token_finderF<(lambda at /home/kgrigoriev/projects/0xGames/crypto-warriors-eos/src/utils/utils.hpp:18:34)>]\00")
(data (i32.const 10962) "T = \00")
(data (i32.const 10967) "cannot create objects in table of another contract\00")
(data (i32.const 11018) "cannot increment end iterator\00")
(data (i32.const 11048) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 11099) "cannot pass end iterator to erase\00")
(data (i32.const 11133) "object passed to erase is not in multi_index\00")
(data (i32.const 11178) "cannot erase objects in table of another contract\00")
(data (i32.const 11228) "attempt to remove object that was not in multi_index\00")
(data (i32.const 11281) "cannot pass end iterator to modify\00")
(data (i32.const 11316) "object passed to modify is not in multi_index\00")
(data (i32.const 11362) "cannot modify objects in table of another contract\00")
(data (i32.const 11413) "updater cannot change primary key when modifying an object\00")
(data (i32.const 11472) "attempt to add asset with different symbol\00")
(data (i32.const 11515) "addition underflow\00")
(data (i32.const 11534) "addition overflow\00")
(data (i32.const 19968) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 20048) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "transaction_size" (func $fimport$1 (result i32)))
(import "env" "read_transaction" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$3 (param i32 i32 i32)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$6 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$7 (result i64)))
(import "env" "tapos_block_prefix" (func $fimport$8 (result i32)))
(import "env" "tapos_block_num" (func $fimport$9 (result i32)))
(import "env" "db_store_i64" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "db_next_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$15 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "require_auth" (func $fimport$16 (param i64)))
(import "env" "is_account" (func $fimport$17 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$18 (param i64)))
(import "env" "db_idx64_find_primary" (func $fimport$19 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$20 (param i32 i64 i32)))
(import "env" "db_idx64_next" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$22 (param i32)))
(import "env" "action_data_size" (func $fimport$23 (result i32)))
(import "env" "read_action_data" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$26 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$27 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$28))
(import "env" "db_idx64_remove" (func $fimport$29 (param i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$30 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$31 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$32 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$33 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$40 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$41 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$42 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$43 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$44 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$45 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$46 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$47 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$48 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$49 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$50 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$51 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$52 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $121))
(export "_Znwj" (func $170))
(export "_ZdlPv" (func $172))
(export "_Znaj" (func $171))
(export "_ZdaPv" (func $173))
(export "_ZnwjSt11align_val_t" (func $174))
(export "_ZnajSt11align_val_t" (func $175))
(export "_ZdlPvSt11align_val_t" (func $176))
(export "_ZdaPvSt11align_val_t" (func $177))
(table $0 18 18 anyfunc)
(elem (i32.const 1) $107 $117 $115 $114 $109 $119 $118 $120 $112 $113 $111 $116 $110 $146 $147 $205 $207)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 20305))
(global $global$2 i32 (i32.const 20305))


int_32 .FUNC $220 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $221($1)
	
.LABEL $label$2
	*(CALL $202()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $221(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $224($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $219(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [11552])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $219(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$2 = CALL $148($0, $1, ($4 + [12]), ($4 + [8]), $2)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$1 }
	$global$0 = ($4 + [16])
	return $1
	
.LABEL $label$1
	$1 = CALL _Znwj([40])
	CALL $179(($1 + [16]), $3)
	CALL $179(($1 + [28]), ($3 + [12]))
	*($1) = (int_64)0
	*($1 + [8]) = *($4 + [12])
	*($2) = $1
	$3 = $1
	$5 = *(*($0))
	if ( ($5 == 0) ){ goto $label$2 }
	*($0) = $5
	$3 = *($2)
	
.LABEL $label$2
	CALL $77(*($0 + [4]), $3)
	*($0 + [8]) = (*($0 + [8]) + [1])
	$global$0 = ($4 + [16])
	return $1
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $224($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $221($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11552])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $221($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $224($0)
	
.LABEL $label$1
}

void .FUNC $7 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL $194(($3 + [16]), $1)
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	$1 = CALL $218([8317])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$12 }
	*($3 + [32]) = ($1 << [1])
	$4 = (($3 + [32]) | [1])
	if ( $1 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$5 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($3 + [32]) = ($5 | [1])
	*($3 + [40]) = $4
	*($3 + [36]) = $1
	
.LABEL $label$11
	CALL memcpy($4, [8317], $1)
	
.LABEL $label$10
	$5 = [0]
	*(($4 + $1)) = [0]
	$1 = (($3 + [16]) + [8])
	*(($3 + [52])) = *($1)
	*($1) = [0]
	*($3 + [44 align=4]) = *($3 + [16])
	*($3 + [16]) = (int_64)0
	$6 = ($3 + [56])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$16 }
	$4 = *([0] + [9940])
	
.LOOP $label$18:
	*((($3 + [83]) + ($1 = $5))) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$1 == (int_32)[12]) )))))
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[11]) ){ goto $label$17 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$18 }
	
.LABEL $label$17
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$15 }
	*($3) = ($5 << [1])
	$4 = ($3 | [1])
	goto $label$14 
	
.LABEL $label$16
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$1 = ($3 | [1])
	goto $label$13 
	
.LABEL $label$15
	$7 = (($5 + [16]) & [-16])
	$4 = CALL _Znwj($7)
	*($3) = ($7 | [1])
	*($3 + [8]) = $4
	*($3 + [4]) = $5
	
.LABEL $label$14
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$19:
	*(($4 + $1)) = *((($3 + [83]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$19 }
	$1 = ($4 + $5)
	
.LABEL $label$13
	*($1) = [0]
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$1 = CALL $218([8342])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$22 }
	*(($3 + [56])) = ($1 << [1])
	$5 = ($6 + [1])
	if ( $1 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$4 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*(($3 + [64])) = $5
	*(($3 + [60])) = $1
	*($3 + [56]) = ($4 | [1])
	
.LABEL $label$21
	CALL memcpy($5, [8342], $1)
	
.LABEL $label$20
	*(($5 + $1)) = [0]
	*($0 + [4 align=4]) = (int_64)0
	$1 = ($0 + [4])
	*($0) = $1
	$5 = ($3 + [8])
	*(($7 = ($3 + [76]))) = *($5)
	*(($4 = ($3 + [68]))) = *($3)
	*($5) = [0]
	*($3) = (int_64)0
	CALL $6($0, $1, ($3 + [32]), ($3 + [32]))
	$5 = ($3 + [56])
	CALL $6($0, $1, $5, $5)
	if ( (*($4) & [1]) ){ goto $label$24 }
	if ( (*($5) & [1]) ){ goto $label$23 }
	goto $label$7 
	
.LABEL $label$24
	CALL _ZdlPv(*($7))
	if ( ((*($5) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$23
	CALL _ZdlPv(*(($3 + [64])))
	$1 = [1]
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$9
	CALL $178(($3 + [32]))
	
.LABEL $label$8
	CALL $178($6)
	
.LABEL $label$7
	$1 = [1]
	if ( (*($3 + [44]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($3 + [32]) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [52])))
	if ( ((*($3 + [32]) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [40]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3 + [16]) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($3 + [96])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*(($3 + [24])))
	$global$0 = ($3 + [96])
	(unreachable)
	(unreachable)
}

void .FUNC $178 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = CALL transaction_size()
	$1 = $global$0
	$3 = ($1 - (($2 + [15]) & [-16]))
	$global$0 = $3
	$4 = CALL read_transaction($3, $2)
	CALL eosio_assert(((int_32)$2 == (int_32)$4), [8192])
	CALL sha256($3, $4, $0)
	$global$0 = $1
}

int_32 .FUNC $221 (int_32 $0)
{
	return CALL $222([11572], $0)
}

void .FUNC $5 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL $196(($4 + [40]), $1)
	*(($4 + [64])) = [0]
	*($4 + [56]) = (int_64)0
	$5 = CALL $218([8225])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$13 }
	*($4 + [56]) = ($5 << [1])
	$6 = (($4 + [56]) | [1])
	if ( $5 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [56]) = ($7 | [1])
	*($4 + [64]) = $6
	*($4 + [60]) = $5
	
.LABEL $label$12
	CALL memcpy($6, [8225], $5)
	
.LABEL $label$11
	*(($6 + $5)) = [0]
	$5 = ($4 + [48])
	*(($4 + [76])) = *($5)
	*($5) = [0]
	*($4 + [68 align=4]) = *($4 + [40])
	*($4 + [40]) = (int_64)0
	CALL $194(($4 + [24]), $2)
	*(($4 + [88])) = [0]
	*($4 + [80]) = (int_64)0
	$6 = ($4 + [80])
	$5 = CALL $218([8317])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$16 }
	*(($4 + [80])) = ($5 << [1])
	$2 = ($6 + [1])
	if ( $5 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$6 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*(($4 + [88])) = $2
	*(($4 + [84])) = $5
	*($4 + [80]) = ($6 | [1])
	
.LABEL $label$15
	CALL memcpy($2, [8317], $5)
	
.LABEL $label$14
	$6 = [0]
	*(($2 + $5)) = [0]
	$5 = (($4 + [24]) + [8])
	*(($4 + [100])) = *($5)
	*(($4 + [92])) = *($4 + [24])
	*($5) = [0]
	*($4 + [24]) = (int_64)0
	$8 = ($4 + [104])
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$20 }
	$2 = *([0] + [9940])
	
.LOOP $label$22:
	*((($4 + [131]) + ($5 = $6))) = *(($2 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$21 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$22 }
	
.LABEL $label$21
	*(($4 + [16])) = [0]
	*($4 + [8]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$19 }
	*($4 + [8]) = ($6 << [1])
	$2 = (($4 + [8]) | [1])
	goto $label$18 
	
.LABEL $label$20
	*((($4 + [8]) + [8])) = [0]
	*($4 + [8]) = (int_64)0
	*($4 + [8]) = [0]
	$5 = (($4 + [8]) | [1])
	goto $label$17 
	
.LABEL $label$19
	$7 = (($6 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($4 + [8]) = ($7 | [1])
	*($4 + [16]) = $2
	*($4 + [12]) = $6
	
.LABEL $label$18
	$7 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$23:
	*(($2 + $5)) = *((($4 + [131]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$23 }
	$5 = ($2 + $6)
	
.LABEL $label$17
	*($5) = [0]
	*(($8 + [8])) = [0]
	*($8) = (int_64)0
	$5 = CALL $218([8330])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$26 }
	*(($4 + [104])) = ($5 << [1])
	$6 = ($8 + [1])
	if ( $5 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$2 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($2)
	*(($4 + [112])) = $6
	*(($4 + [108])) = $5
	*($4 + [104]) = ($2 | [1])
	
.LABEL $label$25
	CALL memcpy($6, [8330], $5)
	
.LABEL $label$24
	*(($6 + $5)) = [0]
	*($0 + [4 align=4]) = (int_64)0
	$5 = ($0 + [4])
	*($0) = $5
	$6 = ($4 + [16])
	*(($7 = ($4 + [124]))) = *($6)
	*(($2 = ($4 + [116]))) = *($4 + [8])
	*($6) = [0]
	*($4 + [8]) = (int_64)0
	CALL $6($0, $5, ($4 + [56]), ($4 + [56]))
	$6 = ($4 + [80])
	CALL $6($0, $5, $6, $6)
	$6 = ($4 + [104])
	CALL $6($0, $5, $6, $6)
	if ( ((*($2) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$27
	if ( ((*($6) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($4 + [112])))
	
.LABEL $label$28
	if ( ((*(($4 + [92])) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($4 + [100])))
	
.LABEL $label$29
	if ( (*(($4 + [80])) & [1]) ){ goto $label$31 }
	$5 = [1]
	if ( (*($4 + [68]) & [1]) ){ goto $label$30 }
	goto $label$7 
	
.LABEL $label$31
	CALL _ZdlPv(*(($4 + [88])))
	$5 = [1]
	if ( ((*($4 + [68]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$30
	CALL _ZdlPv(*(($4 + [76])))
	if ( ((*($4 + [56]) & $5) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$10
	CALL $178(($4 + [56]))
	
.LABEL $label$9
	CALL $178($6)
	
.LABEL $label$8
	CALL $178($8)
	
.LABEL $label$7
	if ( (*($4 + [56]) & $5) ){ goto $label$5 }
	
.LABEL $label$6
	$5 = [1]
	if ( (*($4 + [24]) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($4 + [64]))
	$5 = [1]
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($4 + [32])))
	if ( ((*($4 + [40]) & $5) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($4 + [40]) & $5) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($4 + [144])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*(($4 + [48])))
	$global$0 = ($4 + [144])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $127 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [704])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $221($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [616]) = [0]
	*($4 + [608]) = (int_64)0
	*($4 + [624]) = (int_64)0
	*($4 + [596]) = $2
	*($4 + [592]) = $2
	*($4 + [600]) = ($2 + $7)
	CALL $135(($4 + [592]), ($4 + [608]))
	CALL eosio_assert(((uint_32)(*($4 + [600]) - *($4 + [596])) > (uint_32)[7]), [10154])
	CALL memcpy(($4 + [624]), *($4 + [596]), [8])
	*($4 + [596]) = (*($4 + [596]) + [8])
	*(($3 = (($4 + [24]) + [8]))) = *($4 + [600])
	*($4 + [24]) = *($4 + [592])
	$3 = *($3)
	*((($4 + [632]) + [8])) = $3
	*(($8 = (($4 + [672]) + [8]))) = $3
	$9 = *($4 + [24])
	*($4 + [672]) = $9
	*($4 + [632]) = $9
	$3 = *($8)
	*((($4 + [688]) + [8])) = $3
	*(($4 + [64])) = $3
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$1 = *($4 + [672])
	*($4 + [56]) = $1
	*($4 + [688]) = $1
	*(($4 + [80])) = $0
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	$8 = ($4 + [72])
	*(($4 + [128])) = $8
	*(($4 + [132])) = ($4 + [160])
	*(($4 + [136])) = ($4 + [216])
	*(($4 + [140])) = ($4 + [272])
	$3 = ($4 + [320])
	*(($4 + [144])) = $3
	$10 = ($4 + [432])
	*(($4 + [148])) = $10
	$11 = ($4 + [544])
	*(($4 + [152])) = $11
	*(($4 + [168])) = $0
	*(($4 + [176])) = $0
	*($4 + [72]) = $0
	*($4 + [120]) = $0
	*($4 + [160]) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [208])) = $8
	*(($4 + [212])) = $3
	*(($4 + [224])) = $0
	*(($4 + [232])) = $0
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = [0]
	*(($4 + [264])) = $8
	*(($4 + [268])) = $3
	*(($4 + [280])) = $0
	*(($4 + [288])) = $0
	*(($4 + [296])) = (int_64)-1
	*($4 + [216]) = $0
	*($4 + [272]) = $0
	*(($4 + [312])) = [0]
	*(($4 + [304])) = (int_64)0
	*(($4 + [328])) = $0
	*(($4 + [336])) = $0
	*(($4 + [344])) = (int_64)-1
	*(($4 + [352])) = (int_64)0
	*(($4 + [360])) = [0]
	*(($4 + [376])) = $8
	*(($4 + [380])) = $3
	*(($4 + [384])) = $0
	*(($4 + [392])) = $0
	*(($4 + [400])) = (int_64)-1
	*(($4 + [408])) = (int_64)0
	*(($4 + [416])) = [0]
	*(($4 + [420])) = [0]
	*($4 + [320]) = $0
	*($4 + [368]) = $0
	*(($4 + [424])) = [1028443341]
	*($4 + [664]) = [10466]
	*($4 + [432]) = $0
	*($4 + [668]) = CALL $218([10466])
	*($4 + [16]) = *($4 + [664])
	$8 = CALL $106(($4 + [688]), ($4 + [16]))
	*($4 + [648]) = [10466]
	*($4 + [652]) = CALL $218([10466])
	*($4 + [8]) = *($4 + [648])
	CALL $106(($4 + [656]), ($4 + [8]))
	*(($4 + [448])) = (int_64)6291761009422611040
	*(($4 + [456])) = (int_64)-1
	*(($4 + [464])) = (int_64)0
	*(($4 + [472])) = [0]
	*(($4 + [440])) = *($8)
	*(($4 + [488])) = $10
	*(($4 + [492])) = $3
	*(($4 + [496])) = $11
	*(($4 + [520])) = (int_64)-1
	*(($4 + [528])) = (int_64)0
	*(($4 + [536])) = [0]
	*(($4 + [568])) = (int_64)-1
	*(($4 + [576])) = (int_64)0
	*(($4 + [584])) = [0]
	$0 = *($4 + [40])
	*(($4 + [504])) = $0
	*(($4 + [512])) = $0
	*(($4 + [552])) = $0
	*(($4 + [560])) = $0
	*($4 + [480]) = $0
	*($4 + [544]) = $0
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$8 = CALL $179(($4 + [672]), ($4 + [608]))
	$0 = *($4 + [624])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $179(($4 + [688]), $8)
	CALL void $3((int_32 $5), (int_32 $0), (int_64 $6))
	if ( (*($4 + [688]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [672]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [672]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $224($2)
	
.LABEL $label$5
	CALL $134(($4 + [40]))
	if ( ((*($4 + [608]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [616])))
	
.LABEL $label$10
	$global$0 = ($4 + [704])
	return [1]
}

void .FUNC $3 (int_32 $0)
{
	CALL eosio_assert([0], $0)
}

int_32 .FUNC $189 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $217(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $188 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $187($0, $1, $2, CALL $218($2))
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [11133])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11178])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11228])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $201($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [14]) = $2
	$5 = CALL $28(*($0 + [20]), [1000])
	$2 = *($1)
	$6 = *($1 + [4])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$7 = int_32(($6 - $2) >> [2])
	$8 = [0]
	$6 = [0]
	
.LOOP $label$4:
	$6 = (*($2) + $6)
	if ( ((int_32)$5 < (int_32)$6) ){ goto $label$3 }
	$2 = ($2 + [4])
	$8 = ($8 + [1])
	if ( ($8 <= $7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	*($4 + [15]) = $8
	$2 = ($3 + [4])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($3 + [8]))) ){ goto $label$6 }
	*($6) = $8
	*($2) = (*($2) + [1])
	goto $label$5 
	
.LABEL $label$6
	CALL $43($3, ($4 + [15]))
	
.LABEL $label$5
	$5 = CALL $28(*(($0 + [20])), [1000])
	$2 = *($1)
	$6 = *(($1 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$7 = int_32(($6 - $2) >> [2])
	$8 = [0]
	$6 = [0]
	
.LOOP $label$7:
	$6 = (*($2) + $6)
	if ( ((int_32)$5 < (int_32)$6) ){ goto $label$1 }
	$2 = ($2 + [4])
	$8 = ($8 + [1])
	if ( ($8 <= $7) ){ goto $label$7 }
	
.LABEL $label$2
	CALL $3([8685])
	
.LABEL $label$1
	*($4 + [15]) = $8
	$6 = ($3 + [4])
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)*(($3 + [8]))) ){ goto $label$9 }
	*($2) = $8
	$2 = (*($6) + [1])
	*($6) = $2
	goto $label$8 
	
.LABEL $label$9
	CALL $43($3, ($4 + [15]))
	$2 = *($6)
	
.LABEL $label$8
	$6 = *($4 + [14])
	if ( ((int_32)*(($2 + [-1])) == (int_32)$6) ){ goto $label$11 }
	if ( ((int_32)*(($2 + [-2])) != (int_32)$6) ){ goto $label$10 }
	
.LABEL $label$11
	$5 = CALL $28(*(($0 + [20])), [1000])
	$2 = *($1)
	$6 = *(($1 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$13 }
	$7 = int_32(($6 - $2) >> [2])
	$8 = [0]
	$6 = [0]
	
.LOOP $label$14:
	$6 = (*($2) + $6)
	if ( ((int_32)$5 < (int_32)$6) ){ goto $label$12 }
	$2 = ($2 + [4])
	$8 = ($8 + [1])
	if ( ($8 <= $7) ){ goto $label$14 }
	
.LABEL $label$13
	CALL $3([8685])
	
.LABEL $label$12
	*($4 + [13]) = $8
	$2 = ($3 + [4])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($3 + [8]))) ){ goto $label$15 }
	*($6) = $8
	*($2) = (*($2) + [1])
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$15
	CALL $43($3, ($4 + [13]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$10
	if ( ((int_32)$2 == (int_32)*(($3 + [8]))) ){ goto $label$16 }
	*($2) = $6
	*(($2 = ($3 + [4]))) = (*($2) + [1])
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$16
	CALL $45($3, ($4 + [14]))
	$global$0 = ($4 + [16])
	(unreachable)
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10131])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $221($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10154])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [10154])
	CALL memcpy(($5 + [8]), ($2 + [8]), [1])
	CALL eosio_assert(((int_32)$4 != (int_32)[9]), [10154])
	CALL memcpy(($5 + [9]), ($2 + [9]), [1])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $44(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $224($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1) != (int_32)*($1 + [4])) ){ goto $label$3 }
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)6175819139446734848, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = ($0 + [8])
	$3 = CALL $47($4, $3)
	$7 = ($1 + [8])
	$5 = ($1 + [4])
	$6 = *($5)
	if ( ((int_32)$6 != (int_32)*($7)) ){ goto $label$4 }
	$8 = [3]
	goto $label$1 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = [4]
	goto $label$1 
	
.LABEL $label$2
	$8 = [4]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$35 
	
.LABEL $label$36
	$3 = CALL $47($4, $3)
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)*($7)) ){ goto $label$18 }
	$8 = [0]
	goto $label$5 
	
.LABEL $label$35
	*($5) = ($6 + [8])
	*($6) = *($3)
	goto $label$17 
	
.LABEL $label$34
	CALL $48($1, $3)
	$8 = [1]
	goto $label$5 
	
.LABEL $label$33
	CALL eosio_assert([1], [11018])
	$3 = CALL db_next_i64(*($3 + [20]), ($2 + [8]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$16 }
	$8 = [4]
	goto $label$5 
	
.LABEL $label$32
	$9 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$15 }
	$8 = [5]
	goto $label$5 
	
.LABEL $label$31
	$4 = ($0 + [8])
	$10 = ($0 + [36])
	$11 = ($0 + [32])
	$0 = ($0 + [16])
	$8 = [6]
	goto $label$5 
	
.LABEL $label$30
	$12 = *($7)
	$6 = *($10)
	$1 = *($11)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	$8 = [7]
	goto $label$5 
	
.LABEL $label$29
	$3 = ($6 + [-24])
	$5 = *($3)
	if ( ((int_64)*($5) == (int_64)$12) ){ goto $label$10 }
	$8 = [8]
	goto $label$5 
	
.LABEL $label$28
	$6 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$27
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$9 }
	$8 = [17]
	goto $label$5 
	
.LABEL $label$26
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [11048])
	goto $label$7 
	
.LABEL $label$25
	$3 = CALL db_find_i64(*($4), *($0), (int_64)6175819139446734848, $12)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$8 = [10]
	goto $label$5 
	
.LABEL $label$24
	$5 = CALL $47($4, $3)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [11048])
	$8 = [11]
	goto $label$5 
	
.LABEL $label$23
	CALL eosio_assert([1], [11099])
	CALL eosio_assert([1], [11018])
	$3 = CALL db_next_i64(*($5 + [20]), ($2 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$8 = [12]
	goto $label$5 
	
.LABEL $label$22
	CALL $47($4, $3)
	$8 = [13]
	goto $label$5 
	
.LABEL $label$21
	CALL $49($4, $5)
	$8 = [14]
	goto $label$5 
	
.LABEL $label$20
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$14 }
	$8 = [15]
	goto $label$5 
	
.LABEL $label$19
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$18
	$8 = [3]
	goto $label$5 
	
.LABEL $label$17
	$8 = [1]
	goto $label$5 
	
.LABEL $label$16
	$8 = [2]
	goto $label$5 
	
.LABEL $label$15
	$8 = [15]
	goto $label$5 
	
.LABEL $label$14
	$8 = [6]
	goto $label$5 
	
.LABEL $label$13
	$8 = [9]
	goto $label$5 
	
.LABEL $label$12
	$8 = [7]
	goto $label$5 
	
.LABEL $label$11
	$8 = [9]
	goto $label$5 
	
.LABEL $label$10
	$8 = [16]
	goto $label$5 
	
.LABEL $label$9
	$8 = [9]
	goto $label$5 
	
.LABEL $label$8
	$8 = [14]
	goto $label$5 
	
.LABEL $label$7
	$8 = [11]
	goto $label$5 
	
.LABEL $label$6
	$8 = [13]
	goto $label$5 
	$8
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $222 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $223($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8231])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10159])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$2 = *($1 + [4])
	$3 = ((int_32)($2 - $6) / (int_32)[12])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $168($1, ($7 - $3))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$3 = ($6 + ((int_32)$7 * (int_32)[12]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($2 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$8
	$2 = $7
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$9:
	CALL $135($0, $7)
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $201($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $149(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $149(*($1), *($0 + [16]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $164 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10083])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5918709575225180160)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10029])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10029])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $86(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $163 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	if ( (*($0 + [8]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = ($0 + [4])
	*($0) = $4
	$5 = *($0 + [4])
	*($0 + [4]) = [0]
	*(($6 = ($0 + [8]))) = [0]
	*($5 + [8]) = [0]
	$5 = *($3 + [4])
	$3 = ( $5 ? $3 : $5 )
	if ( ($3 == 0) ){ goto $label$1 }
	$7 = ($0 + [4])
	
.LOOP $label$2:
	$8 = $3
	$9 = $1
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$7 }
	*($8 + [16]) = *($9 + [16])
	*(($8 + [20])) = *($9 + [20])
	$3 = *($8 + [8])
	if ( ($3 == 0) ){ goto $label$12 }
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$11 }
	*($3 + [4]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	
.LOOP $label$13:
	$3 = $1
	$1 = *($3)
	if ( $1 ){ goto $label$13 }
	$1 = *($3 + [4])
	if ( $1 ){ goto $label$13 }
	goto $label$10 
	
.LABEL $label$12
	$3 = [0]
	$1 = *($4)
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	*($3) = [0]
	
.LOOP $label$14:
	$1 = *($3 + [4])
	if ( ($1 == 0) ){ goto $label$10 }
	
.LOOP $label$15:
	$3 = $1
	$1 = *($3)
	if ( $1 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$10
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$10 = *(($8 + [16]))
	if ( ((uint_32)($10 & [255]) >= (uint_32)*($1 + [16])) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$8
	$1 = $4
	$5 = $4
	goto $label$4 
	
.LABEL $label$7
	
.LOOP $label$17:
	$1 = *($8 + [8])
	if ( ($1 == 0) ){ goto $label$16 }
	$8 = $1
	goto $label$17 
	
.LABEL $label$16
	CALL $76($0, $8)
	return $11
	
.LABEL $label$6
	$11 = [2]
	goto $label$3 
	
.LABEL $label$5
	$11 = [0]
	goto $label$3 
	
.LABEL $label$4
	$11 = [4]
	
.LABEL $label$3
	
.LOOP $label$18:
	goto $label$40 
	
.LABEL $label$42
	$1 = $5
	if ( ((uint_32)($10 & [255]) >= (uint_32)*($1 + [16])) ){ goto $label$29 }
	$11 = [2]
	goto $label$18 
	
.LABEL $label$41
	$5 = *($1)
	if ( $5 ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$40
	$5 = *($1 + [4])
	if ( $5 ){ goto $label$28 }
	$11 = [12]
	goto $label$18 
	
.LABEL $label$39
	$5 = ($1 + [4])
	goto $label$25 
	
.LABEL $label$38
	$5 = $1
	$11 = [4]
	goto $label$18 
	
.LABEL $label$37
	*($8) = (int_64)0
	*(($8 + [8])) = $1
	*($5) = $8
	$1 = *(*($0))
	if ( ($1 == 0) ){ goto $label$24 }
	$11 = [5]
	goto $label$18 
	
.LABEL $label$36
	*($0) = $1
	$8 = *($5)
	$11 = [6]
	goto $label$18 
	
.LABEL $label$35
	CALL $77(*($7), $8)
	*($6) = (*($6) + [1])
	$5 = *($9 + [4])
	if ( ($5 == 0) ){ goto $label$21 }
	$11 = [7]
	goto $label$18 
	
.LABEL $label$34
	$1 = $5
	$5 = *($1)
	if ( $5 ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$33
	$1 = *($9 + [8])
	if ( ((int_32)*($1) == (int_32)$9) ){ goto $label$20 }
	$11 = [10]
	goto $label$18 
	
.LABEL $label$32
	$10 = ($9 + [8])
	$11 = [11]
	goto $label$18 
	
.LABEL $label$31
	$5 = *($10)
	$10 = ($5 + [8])
	$1 = *($5 + [8])
	if ( ((int_32)$5 != (int_32)*($1)) ){ goto $label$19 }
	$11 = [8]
	goto $label$18 
	
.LABEL $label$30
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$29
	$11 = [0]
	goto $label$18 
	
.LABEL $label$28
	$11 = [1]
	goto $label$18 
	
.LABEL $label$27
	$11 = [3]
	goto $label$18 
	
.LABEL $label$26
	$11 = [1]
	goto $label$18 
	
.LABEL $label$25
	$11 = [4]
	goto $label$18 
	
.LABEL $label$24
	$11 = [6]
	goto $label$18 
	
.LABEL $label$23
	$11 = [8]
	goto $label$18 
	
.LABEL $label$22
	$11 = [7]
	goto $label$18 
	
.LABEL $label$21
	$11 = [9]
	goto $label$18 
	
.LABEL $label$20
	$11 = [8]
	goto $label$18 
	
.LABEL $label$19
	$11 = [11]
	goto $label$18 
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$43 }
	$6 = ($0 + [4])
	$9 = ($0 + [8])
	
.LOOP $label$44:
	$8 = $1
	$12 = *($8 + [16 align=4])
	*(($10 = CALL _Znwj([24])) + [16 align=4]) = $12
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$49 }
	$5 = (CASTING uint_32)(uint_64 $12)
	if ( ((uint_32)*($1 + [16]) <= (uint_32)($5 & [255])) ){ goto $label$47 }
	goto $label$48 
	
.LABEL $label$49
	$1 = $6
	$3 = $6
	goto $label$46 
	
.LABEL $label$48
	$13 = [2]
	goto $label$45 
	
.LABEL $label$47
	$13 = [0]
	goto $label$45 
	
.LABEL $label$46
	$13 = [4]
	
.LABEL $label$45
	
.LOOP $label$50:
	goto $label$72 
	
.LABEL $label$74
	$1 = $3
	if ( ((uint_32)*($1 + [16]) <= (uint_32)($5 & [255])) ){ goto $label$61 }
	$13 = [2]
	goto $label$50 
	
.LABEL $label$73
	$3 = *($1)
	if ( $3 ){ goto $label$58 }
	goto $label$59 
	
.LABEL $label$72
	$3 = *($1 + [4])
	if ( $3 ){ goto $label$60 }
	$13 = [12]
	goto $label$50 
	
.LABEL $label$71
	$3 = ($1 + [4])
	goto $label$57 
	
.LABEL $label$70
	$3 = $1
	$13 = [4]
	goto $label$50 
	
.LABEL $label$69
	*($10 + [8]) = $1
	*($10) = (int_64)0
	*($3) = $10
	$1 = *(*($0))
	if ( ($1 == 0) ){ goto $label$56 }
	$13 = [5]
	goto $label$50 
	
.LABEL $label$68
	*($0) = $1
	$10 = *($3)
	$13 = [6]
	goto $label$50 
	
.LABEL $label$67
	CALL $77(*(($0 + [4])), $10)
	*($9) = (*($9) + [1])
	$3 = *($8 + [4])
	if ( ($3 == 0) ){ goto $label$53 }
	$13 = [7]
	goto $label$50 
	
.LABEL $label$66
	$1 = $3
	$3 = *($1)
	if ( $3 ){ goto $label$54 }
	goto $label$55 
	
.LABEL $label$65
	$1 = *($8 + [8])
	if ( ((int_32)*($1) == (int_32)$8) ){ goto $label$52 }
	$13 = [10]
	goto $label$50 
	
.LABEL $label$64
	$5 = ($8 + [8])
	$13 = [11]
	goto $label$50 
	
.LABEL $label$63
	$3 = *($5)
	$5 = ($3 + [8])
	$1 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($1)) ){ goto $label$51 }
	$13 = [8]
	goto $label$50 
	
.LABEL $label$62
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$61
	$13 = [0]
	goto $label$50 
	
.LABEL $label$60
	$13 = [1]
	goto $label$50 
	
.LABEL $label$59
	$13 = [3]
	goto $label$50 
	
.LABEL $label$58
	$13 = [1]
	goto $label$50 
	
.LABEL $label$57
	$13 = [4]
	goto $label$50 
	
.LABEL $label$56
	$13 = [6]
	goto $label$50 
	
.LABEL $label$55
	$13 = [8]
	goto $label$50 
	
.LABEL $label$54
	$13 = [7]
	goto $label$50 
	
.LABEL $label$53
	$13 = [9]
	goto $label$50 
	
.LABEL $label$52
	$13 = [8]
	goto $label$50 
	
.LABEL $label$51
	$13 = [11]
	goto $label$50 
	
.LABEL $label$43
	$13
}

int_32 .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1 + [8])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $3) > (int_32)[0]), [10212])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$1 = ($1 + [4])
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $3) > (int_32)[0]), [10212])
	$8 = $7
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($8 + [16]), [1])
	$7 = (*($6) + [1])
	*($6) = $7
	CALL eosio_assert(((int_32)(*($5) - $7) > (int_32)[3]), [10212])
	CALL memcpy(*($6), ($8 + [20]), [4])
	$3 = (*($6) + [4])
	*($6) = $3
	$6 = *($8 + [4])
	if ( ($6 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$7 = $6
	$6 = *($7)
	if ( $6 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = *($8 + [8])
	if ( ((int_32)*($7) == (int_32)$8) ){ goto $label$4 }
	$8 = ($8 + [8])
	
.LOOP $label$7:
	$6 = *($8)
	$8 = ($6 + [8])
	$7 = *($6 + [8])
	if ( ((int_32)$6 != (int_32)*($7)) ){ goto $label$7 }
	
.LABEL $label$4
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $161 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( (*($0 + [8]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = ($0 + [4])
	*($0) = $4
	$5 = *($0 + [4])
	*($0 + [4]) = [0]
	*(($0 + [8])) = [0]
	*($5 + [8]) = [0]
	$5 = *($3 + [4])
	$6 = ( $5 ? $3 : $5 )
	$3 = ((int_32)$6 != (int_32)[0])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($0 + [4])
	
.LOOP $label$4:
	*($6 + [16]) = *($1)
	*(($6 + [20])) = *($1 + [4])
	$5 = [0]
	$8 = *($6 + [8])
	if ( ($8 == 0) ){ goto $label$9 }
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$10 }
	*($8 + [4]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	
.LOOP $label$11:
	$5 = $3
	$3 = *($5)
	if ( $3 ){ goto $label$11 }
	$3 = *($5 + [4])
	if ( $3 ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	*($8) = [0]
	$3 = *($8 + [4])
	if ( ($3 == 0) ){ goto $label$8 }
	
.LOOP $label$12:
	$5 = $3
	$3 = *($5)
	if ( $3 ){ goto $label$12 }
	$3 = *($5 + [4])
	if ( $3 ){ goto $label$12 }
	
.LABEL $label$9
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = $8
	$3 = *($4)
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$7
	$3 = $4
	$8 = $4
	if ( *($8) ){ goto $label$13 }
	$12 = [6]
	goto $label$5 
	
.LABEL $label$13
	$12 = [4]
	goto $label$5 
	
.LABEL $label$6
	$8 = $7
	$11 = *($3 + [16])
	$9 = *(($6 + [16]))
	$10 = ($9 & [255])
	if ( ($10 <= $11) ){ goto $label$14 }
	$12 = [2]
	goto $label$5 
	
.LABEL $label$14
	$12 = [10]
	
.LABEL $label$5
	
.LOOP $label$15:
	goto $label$33 
	
.LABEL $label$35
	if ( ((uint_32)$11 >= (uint_32)$10) ){ goto $label$19 }
	$12 = [9]
	goto $label$15 
	
.LABEL $label$34
	$8 = ($3 + [4])
	$11 = *($3 + [4])
	if ( ($11 == 0) ){ goto $label$21 }
	$12 = [0]
	goto $label$15 
	
.LABEL $label$33
	$3 = $8
	$12 = [1]
	goto $label$15 
	
.LABEL $label$32
	$8 = $3
	$3 = $11
	$11 = *($3 + [16])
	$10 = ($9 & [255])
	if ( ((uint_32)$10 >= (uint_32)$11) ){ goto $label$22 }
	$12 = [10]
	goto $label$15 
	
.LABEL $label$31
	$11 = *($3)
	if ( $11 ){ goto $label$20 }
	$12 = [11]
	goto $label$15 
	
.LABEL $label$30
	$8 = $3
	$12 = [3]
	goto $label$15 
	
.LABEL $label$29
	if ( (*($8) == 0) ){ goto $label$18 }
	$12 = [4]
	goto $label$15 
	
.LABEL $label$28
	$3 = ((int_32)$5 != (int_32)[0])
	$1 = ($1 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$23 }
	$12 = [5]
	goto $label$15 
	
.LABEL $label$27
	$6 = $5
	if ( $5 ){ goto $label$4 }
	goto $label$23 
	
.LABEL $label$26
	*($6) = (int_64)0
	*(($6 + [8])) = $3
	*($8) = $6
	$3 = *(*($0))
	if ( ($3 == 0) ){ goto $label$16 }
	$12 = [7]
	goto $label$15 
	
.LABEL $label$25
	*($0) = $3
	$6 = *($8)
	$12 = [8]
	goto $label$15 
	
.LABEL $label$24
	CALL $77(*(($0 + [4])), $6)
	*(($3 = ($0 + [8]))) = (*($3) + [1])
	$3 = ((int_32)$5 != (int_32)[0])
	$1 = ($1 + [8])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	
.LABEL $label$23
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$22
	$12 = [2]
	goto $label$15 
	
.LABEL $label$21
	$12 = [3]
	goto $label$15 
	
.LABEL $label$20
	$12 = [1]
	goto $label$15 
	
.LABEL $label$19
	$12 = [3]
	goto $label$15 
	
.LABEL $label$18
	$12 = [6]
	goto $label$15 
	
.LABEL $label$17
	$12 = [5]
	goto $label$15 
	
.LABEL $label$16
	$12 = [8]
	goto $label$15 
	
.LABEL $label$3
	$5 = $6
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	
.LOOP $label$37:
	$3 = *($5 + [8])
	if ( ($3 == 0) ){ goto $label$36 }
	$5 = $3
	goto $label$37 
	
.LABEL $label$36
	CALL $76($0, $5)
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$38 }
	$9 = ($0 + [4])
	$6 = ($0 + [8])
	
.LOOP $label$39:
	$3 = *($9)
	if ( ($3 == 0) ){ goto $label$42 }
	$5 = $9
	$8 = *($3 + [16])
	$10 = *($1)
	$11 = ($10 & [255])
	if ( ($11 <= $8) ){ goto $label$41 }
	$13 = [2]
	goto $label$40 
	
.LABEL $label$42
	$3 = $9
	$5 = $9
	$13 = [3]
	goto $label$40 
	
.LABEL $label$41
	$13 = [9]
	
.LABEL $label$40
	
.LOOP $label$43:
	goto $label$59 
	
.LABEL $label$61
	if ( ((uint_32)$8 >= (uint_32)$11) ){ goto $label$47 }
	$13 = [8]
	goto $label$43 
	
.LABEL $label$60
	$5 = ($3 + [4])
	$8 = *($3 + [4])
	if ( ($8 == 0) ){ goto $label$49 }
	$13 = [0]
	goto $label$43 
	
.LABEL $label$59
	$3 = $5
	$13 = [1]
	goto $label$43 
	
.LABEL $label$58
	$5 = $3
	$3 = $8
	$8 = *($3 + [16])
	$11 = ($10 & [255])
	if ( ((uint_32)$11 >= (uint_32)$8) ){ goto $label$50 }
	$13 = [9]
	goto $label$43 
	
.LABEL $label$57
	$8 = *($3)
	if ( $8 ){ goto $label$48 }
	$13 = [10]
	goto $label$43 
	
.LABEL $label$56
	$5 = $3
	if ( *($5) ){ goto $label$45 }
	$13 = [5]
	goto $label$43 
	
.LABEL $label$55
	*(($8 = CALL _Znwj([24])) + [16 align=4]) = *($1)
	*($8) = (int_64)0
	*($8 + [8]) = $3
	*($5) = $8
	$3 = *(*($0))
	if ( ($3 == 0) ){ goto $label$44 }
	$13 = [6]
	goto $label$43 
	
.LABEL $label$54
	*($0) = $3
	$8 = *($5)
	$13 = [7]
	goto $label$43 
	
.LABEL $label$53
	CALL $77(*(($0 + [4])), $8)
	*($6) = (*($6) + [1])
	$1 = ($1 + [8])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$52
	if ( (*($5) == 0) ){ goto $label$46 }
	$13 = [4]
	goto $label$43 
	
.LABEL $label$51
	$1 = ($1 + [8])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$50
	$13 = [2]
	goto $label$43 
	
.LABEL $label$49
	$13 = [3]
	goto $label$43 
	
.LABEL $label$48
	$13 = [1]
	goto $label$43 
	
.LABEL $label$47
	$13 = [3]
	goto $label$43 
	
.LABEL $label$46
	$13 = [5]
	goto $label$43 
	
.LABEL $label$45
	$13 = [4]
	goto $label$43 
	
.LABEL $label$44
	$13 = [7]
	goto $label$43 
	
.LABEL $label$38
	$12
	$13
}

int_32 .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $76($1, *($1 + [4]))
	$3 = ($1 + [4])
	*($1) = $3
	$4 = (int_64)0
	*($1 + [4 align=4]) = (int_64)0
	$5 = *($0 + [4])
	$6 = [0]
	$7 = ($0 + [8])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($7)), [10159])
	$8 = ($0 + [4])
	$5 = *($8)
	$9 = *($5)
	$5 = ($5 + [1])
	*($8) = $5
	$6 = ($6 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($9 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($9 & [128]) ){ goto $label$1 }
	$10 = (CASTING uint_32)(uint_64 $4)
	if ( ($10 == 0) ){ goto $label$2 }
	$11 = ($1 + [4])
	$12 = [0]
	$13 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)*($13) != (int_32)$5), [10154])
	$14 = ($0 + [4])
	CALL memcpy(($2 + [15]), *($14), [1])
	$5 = (*($14) + [1])
	*($14) = $5
	CALL eosio_assert(((uint_32)(*($13) - $5) > (uint_32)[3]), [10154])
	CALL memcpy(($2 + [8]), *($14), [4])
	*($14) = (*($14) + [4])
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$7 }
	$9 = $11
	$6 = *($5 + [16])
	$7 = *($2 + [15])
	$8 = ($7 & [255])
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$5 = $3
	$9 = $3
	$15 = [3]
	goto $label$4 
	
.LABEL $label$6
	$15 = [10]
	goto $label$4 
	
.LABEL $label$5
	$15 = [2]
	
.LABEL $label$4
	
.LOOP $label$9:
	goto $label$27 
	
.LABEL $label$31
	$9 = $5
	$5 = $6
	$6 = *($5 + [16])
	$8 = ($7 & [255])
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$20 }
	$15 = [10]
	goto $label$9 
	
.LABEL $label$30
	$6 = *($5)
	if ( $6 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$29
	if ( ((uint_32)$6 >= (uint_32)$8) ){ goto $label$15 }
	$15 = [9]
	goto $label$9 
	
.LABEL $label$28
	$9 = ($5 + [4])
	$6 = *($5 + [4])
	if ( ($6 == 0) ){ goto $label$18 }
	$15 = [0]
	goto $label$9 
	
.LABEL $label$27
	$5 = $9
	goto $label$19 
	
.LABEL $label$26
	if ( (*($9) == 0) ){ goto $label$14 }
	$15 = [4]
	goto $label$9 
	
.LABEL $label$25
	$12 = ($12 + [1])
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$24
	$9 = $5
	if ( *($9) ){ goto $label$13 }
	$15 = [6]
	goto $label$9 
	
.LABEL $label$23
	*(($6 = CALL _Znwj([24]))) = (int_64)0
	*($6 + [8]) = $5
	*($9) = $6
	*($6 + [16]) = *($2 + [15])
	*($6 + [20]) = *($2 + [8])
	$5 = *(*($1))
	if ( ($5 == 0) ){ goto $label$10 }
	$15 = [7]
	goto $label$9 
	
.LABEL $label$22
	*($1) = $5
	$6 = *($9)
	$15 = [8]
	goto $label$9 
	
.LABEL $label$21
	CALL $77(*(($1 + [4])), $6)
	*(($5 = ($1 + [8]))) = (*($5) + [1])
	$12 = ($12 + [1])
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$11 }
	goto $label$2 
	
.LABEL $label$20
	$15 = [2]
	goto $label$9 
	
.LABEL $label$19
	$15 = [1]
	goto $label$9 
	
.LABEL $label$18
	$15 = [3]
	goto $label$9 
	
.LABEL $label$17
	$15 = [11]
	goto $label$9 
	
.LABEL $label$16
	$15 = [1]
	goto $label$9 
	
.LABEL $label$15
	$15 = [3]
	goto $label$9 
	
.LABEL $label$14
	$15 = [6]
	goto $label$9 
	
.LABEL $label$13
	$15 = [4]
	goto $label$9 
	
.LABEL $label$12
	$15 = [5]
	goto $label$9 
	
.LABEL $label$11
	$15 = [5]
	goto $label$9 
	
.LABEL $label$10
	$15 = [8]
	goto $label$9 
	
.LABEL $label$8
	$5 = *($14)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	$15
	return $0
}

void .FUNC $169 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$6 = ($global$0 - [80])
	$global$0 = $6
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$8 = (*($0) + int_32($7 >> [1]))
	$9 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$9 = *((*($8) + $9))
	
.LABEL $label$1
	*(($10 = (($6 + [64]) + [8]))) = *(($2 + [8]))
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = [0]
	*($6 + [64]) = *($2)
	$2 = (*($3 + [4]) - *($3))
	$0 = ((int_32)$2 / (int_32)[12])
	if ( ($2 == 0) ){ goto $label$8 }
	if ( ((uint_32)$0 >= (uint_32)[357913942]) ){ goto $label$7 }
	$2 = CALL _Znwj($2)
	*(($6 + [56])) = ($2 + ((int_32)$0 * (int_32)[12]))
	*($6 + [48]) = $2
	*($6 + [52]) = $2
	$3 = *(($3 + [4]))
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = CALL $179($2, $0)
	$2 = ($2 + [12])
	$0 = ($0 + [12])
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$9 }
	*($6 + [52]) = ($7 + [12])
	
.LABEL $label$8
	$2 = CALL $179(($6 + [32]), $4)
	$0 = CALL $179(($6 + [16]), $5)
	*(($6 + [8])) = *($10)
	*($6) = *($6 + [64])
	CALL void $8((int_32 $1), (int_64 $6), (int_32 ($6 + [48])), (int_32 $2), (int_32 $0), (int_32 $9))
	if ( (*($0) & [1]) ){ goto $label$11 }
	if ( (*($2) & [1]) ){ goto $label$10 }
	goto $label$6 
	
.LABEL $label$11
	CALL _ZdlPv(*($0 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$10
	CALL _ZdlPv(*($2 + [8]))
	$3 = *($6 + [48])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	CALL $201(($6 + [48]))
	
.LABEL $label$6
	$3 = *($6 + [48])
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$0 = *($6 + [52])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$12:
	$2 = ($0 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($0 + [-4])))
	
.LABEL $label$13
	$0 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$12 }
	$2 = *($6 + [48])
	goto $label$2 
	
.LABEL $label$4
	$global$0 = ($6 + [80])
	return 
	
.LABEL $label$3
	$2 = $3
	
.LABEL $label$2
	*($6 + [52]) = $3
	CALL _ZdlPv($2)
	$global$0 = ($6 + [80])
	(unreachable)
}

void .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($6 + [-4])
	*(($3 + [-4])) = *($1)
	$6 = ($6 + [-12])
	*(($3 = ($3 + [-12]))) = *($6)
	*($6) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL _ZdlPv($1)
	
.LABEL $label$14
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $58 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [80])
	$global$0 = $5
	*($5 + [72]) = $2
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [9631])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$17($2), [9325])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$2 }
	$4 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($4 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($4 <= [257]), [9383])
	$7 = ($0 + [8])
	$6 = *(($0 + [36]))
	$8 = *(($0 + [32]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($6 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$5 }
	$6 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($9 + [60]) == (int_32)$7), [11048])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$4 = CALL db_find_i64(*($7), *(($0 + [16])), (int_64)-3665743729458675712, $3)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $25($7, $4)
	CALL eosio_assert(((int_32)*($9 + [60]) == (int_32)$7), [11048])
	
.LABEL $label$3
	$4 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($4, [9655])
	CALL eosio_assert(((int_64)*($9 + [24]) == (int_64)$1), [9694])
	CALL require_recipient($1)
	CALL require_recipient($2)
	*($5 + [64]) = ($5 + [72])
	CALL eosio_assert($4, [11281])
	CALL $67($7, $9, $1, ($5 + [64]))
	$4 = ($9 + [40])
	$2 = *($4)
	*((($5 + [48]) + [8])) = $2
	$3 = *($9 + [32])
	*((($5 + [16]) + [8])) = $2
	*($5 + [16]) = $3
	*($5 + [48]) = $3
	CALL $68($0, $1, ($5 + [16]))
	$3 = *($9 + [32])
	$2 = *($4)
	*(($5 + [8])) = $2
	*((($5 + [32]) + [8])) = $2
	*($5) = $3
	*($5 + [32]) = $3
	CALL $69($0, *($5 + [72]), $5, $1)
	$global$0 = ($5 + [80])
}

void .FUNC $59 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	float_32 $15
	int_64 $16
	int_64 $17
	$4 = ($global$0 - [208])
	$global$0 = $4
	$5 = ($0 + [16])
	$7 = *(($0 + [44]))
	$6 = *(($0 + [40]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)$5), [11048])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [24])), (int_64)3932090329724878848, $3)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $60($5, $8)
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)$5), [11048])
	
.LABEL $label$1
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [8912])
	$11 = *($9 + [48])
	$12 = *($9 + [32])
	$13 = *($9 + [16])
	$14 = (int_64)0
	$8 = *($9 + [52])
	if ( ((uint_32)$8 >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$5 }
	$14 = (CASTING uint_64)(uint_32 ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - $8))
	
.LABEL $label$5
	if ( ((uint_64)$14 >= (uint_64)$11) ){ goto $label$6 }
	$12 = ((int_64)((int_64)((int_64)$14 * (int_64))($12 - $13)) / (int_64)$11) + (int_64)$13)
	
.LABEL $label$6
	$15 = *($0 + [56])
	$14 = *($2)
	CALL $196(($4 + [128]), $14)
	$8 = CALL $188(($4 + [128]), [0], [8748])
	$7 = ($8 + [8])
	*((($4 + [144]) + [8])) = *($7)
	*($4 + [144]) = *($8)
	*($8) = (int_64)0
	*($7) = [0]
	$8 = CALL $185(($4 + [144]), [8942])
	$7 = ($8 + [8])
	*((($4 + [160]) + [8])) = *($7)
	*($4 + [160]) = *($8)
	*($8) = (int_64)0
	*($7) = [0]
	CALL $197(($4 + [112]), $3)
	$8 = *($4 + [112])
	$7 = ($8 & [1])
	$8 = CALL $186(($4 + [160]), ( *($4 + [120]) ? (($4 + [112]) | [1]) : $7 ), ( *($4 + [116]) ? uint_32($8 >> [1]) : $7 ))
	$7 = ($8 + [8])
	*((($4 + [176]) + [8])) = *($7)
	*($4 + [176]) = *($8)
	*($8) = (int_64)0
	*($7) = [0]
	$8 = CALL $185(($4 + [176]), [8783])
	$7 = ($8 + [8])
	*((($4 + [192]) + [8])) = *($7)
	*($4 + [192]) = *($8)
	*($8) = (int_64)0
	*($7) = [0]
	CALL $196(($4 + [96]), $12)
	$8 = *($4 + [96])
	$7 = ($8 & [1])
	$8 = CALL $186(($4 + [192]), ( *($4 + [104]) ? (($4 + [96]) | [1]) : $7 ), ( *($4 + [100]) ? uint_32($8 >> [1]) : $7 ))
	$7 = ($8 + [8])
	*((($4 + [56]) + [8])) = *($7)
	*($4 + [56]) = *($8)
	*($8) = (int_64)0
	*($7) = [0]
	$8 = CALL $185(($4 + [56]), [8801])
	$6 = ($8 + [8])
	*(($7 = (($4 + [8]) + [8]))) = *($6)
	*($4 + [8]) = *($8)
	*($8) = (int_64)0
	*($6) = [0]
	CALL eosio_assert(((int_64)$14 >= (int_64)$12), ( *($7) ? (($4 + [8]) | [1]) : (*($4 + [8]) & [1]) ))
	$8 = (*($4 + [8]) & [1])
	$15 = ((float_32)$15 * (float_32)(CASTING float_32)(int_64 $12))
	if ( ((float_32)(float_32)|$15| < (float_32)(float_32)9223372036854775808) ){ goto $label$9 }
	$14 = (int_64)-9223372036854775808
	if ( $8 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$14 = (Rounds 0)($15)
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$7
	if ( (*($4 + [56]) & [1]) ){ goto $label$24 }
	if ( (*($4 + [96]) & [1]) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL _ZdlPv(*($4 + [64]))
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv(*(($4 + [104])))
	$8 = [1]
	if ( ((*($4 + [192]) & [1]) == 0) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$8 = [1]
	if ( (*($4 + [192]) & [1]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( (*($4 + [176]) & $8) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL _ZdlPv(*($4 + [200]))
	if ( ((*($4 + [176]) & $8) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($4 + [184]))
	$8 = [1]
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$8 = [1]
	if ( (*($4 + [112]) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($4 + [160]) & $8) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [120])))
	if ( ((*($4 + [160]) & $8) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*($4 + [168]))
	$8 = [1]
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$8 = [1]
	if ( (*($4 + [144]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((*($4 + [128]) & $8) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	CALL _ZdlPv(*($4 + [152]))
	if ( ((*($4 + [128]) & $8) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($4 + [136]))
	
.LABEL $label$10
	$16 = *($0)
	$13 = *($2 + [8])
	$17 = (int_64)
	CALL eosio_assert((uint_64)(((int_64)$17($12 - $14)) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10163])
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$11 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$14 = $11
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$14 = $11
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$29 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$7 = [0]
	
.LABEL $label$25
	CALL eosio_assert($7, [9272])
	*(($4 + [184])) = [0]
	*($4 + [176]) = (int_64)0
	$8 = CALL $218([8956])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$35 }
	*($4 + [176]) = ($8 << [1])
	$7 = (($4 + [176]) | [1])
	if ( $8 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$6 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($4 + [176]) = ($6 | [1])
	*($4 + [184]) = $7
	*($4 + [180]) = $8
	
.LABEL $label$34
	CALL memcpy($7, [8956], $8)
	
.LABEL $label$33
	*(($7 + $8)) = [0]
	*(($7 = (($4 + [56]) + [24]))) = [0]
	$14 = *($9 + [8])
	*((($4 + [8]) + [24])) = $13
	$8 = ($4 + [184])
	*(($4 + [48])) = *($8)
	*($8) = [0]
	*($4 + [56]) = (int_64)6138663591592764928
	*($4 + [72]) = (int_64)0
	*($4 + [8]) = *($0)
	*($4 + [24]) = $17
	*($4 + [40]) = *($4 + [176])
	*($4 + [64]) = (int_64)-3617168760277827584
	*($4 + [16]) = $14
	*($4 + [176]) = (int_64)0
	*(($8 = CALL _Znwj([16]))) = $16
	*($8 + [8]) = (int_64)3617214756542218240
	*((($4 + [56]) + [36])) = [0]
	$6 = ($8 + [16])
	*($7) = $6
	*(($4 + [76])) = $6
	*($4 + [72]) = $8
	*($4 + [84 align=4]) = (int_64)0
	$8 = *($4 + [40])
	$7 = ( *((($4 + [8]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($7 + [32])
	$14 = (CASTING uint_64)(uint_32 $7)
	$7 = ($4 + [84])
	
.LOOP $label$36:
	$8 = ($8 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$36 }
	if ( ($8 == 0) ){ goto $label$38 }
	CALL $32($7, $8)
	$7 = *(($4 + [88]))
	$8 = *(($4 + [84]))
	goto $label$37 
	
.LABEL $label$38
	$7 = [0]
	$8 = [0]
	
.LABEL $label$37
	*($4 + [196]) = $8
	*($4 + [192]) = $8
	*($4 + [200]) = $7
	*($4 + [144]) = ($4 + [192])
	*($4 + [160]) = ($4 + [8])
	CALL $61(($4 + [160]), ($4 + [144]))
	CALL $34(($4 + [192]), ($4 + [56]))
	$8 = *($4 + [192])
	CALL send_inline($8, (*($4 + [196]) - $8))
	$8 = *($4 + [192])
	if ( ($8 == 0) ){ goto $label$39 }
	*($4 + [196]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$39
	$8 = *($4 + [84])
	if ( ($8 == 0) ){ goto $label$40 }
	*(($4 + [88])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$40
	$8 = *($4 + [72])
	if ( ($8 == 0) ){ goto $label$41 }
	*(($4 + [76])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$41
	if ( ((*(($4 + [40])) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$42
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*(($4 + [184])))
	
.LABEL $label$43
	$13 = *(($2 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10163])
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$46:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$45 }
	$11 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$47 }
	$14 = $11
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$47
	$14 = $11
	
.LOOP $label$48:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$45 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$48 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$45
	$7 = [0]
	
.LABEL $label$44
	CALL eosio_assert($7, [9272])
	$14 = *($2)
	CALL eosio_assert([1], [10277])
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($14 - $12)) > (int_64)-4611686018427387904), [10325])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [10347])
	if ( ((int_64)$11 < (int_64)1) ){ goto $label$49 }
	$14 = *($0)
	*(($4 + [184])) = [0]
	*($4 + [176]) = (int_64)0
	$8 = CALL $218([8977])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$52 }
	*($4 + [176]) = ($8 << [1])
	$7 = (($4 + [176]) | [1])
	if ( $8 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$6 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($4 + [176]) = ($6 | [1])
	*($4 + [184]) = $7
	*($4 + [180]) = $8
	
.LABEL $label$51
	CALL memcpy($7, [8977], $8)
	
.LABEL $label$50
	*(($7 + $8)) = [0]
	*((($4 + [8]) + [24])) = $13
	$8 = ($4 + [184])
	*(($4 + [48])) = *($8)
	*($8) = [0]
	*($4 + [16]) = $1
	*($4 + [24]) = $11
	*($4 + [56]) = (int_64)6138663591592764928
	*($4 + [64]) = (int_64)-3617168760277827584
	*($4 + [8]) = *($0)
	*($4 + [40]) = *($4 + [176])
	*($4 + [176]) = (int_64)0
	*(($8 = CALL _Znwj([16]))) = $14
	*($8 + [8]) = (int_64)3617214756542218240
	*((($4 + [56]) + [36])) = [0]
	$7 = ($8 + [16])
	*((($4 + [56]) + [24])) = $7
	*(($4 + [76])) = $7
	*($4 + [72]) = $8
	*($4 + [84 align=4]) = (int_64)0
	$8 = *($4 + [40])
	$7 = ( *((($4 + [8]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($7 + [32])
	$14 = (CASTING uint_64)(uint_32 $7)
	$7 = ($4 + [84])
	
.LOOP $label$53:
	$8 = ($8 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$53 }
	if ( ($8 == 0) ){ goto $label$55 }
	CALL $32($7, $8)
	$7 = *(($4 + [88]))
	$8 = *(($4 + [84]))
	goto $label$54 
	
.LABEL $label$55
	$7 = [0]
	$8 = [0]
	
.LABEL $label$54
	*($4 + [196]) = $8
	*($4 + [192]) = $8
	*($4 + [200]) = $7
	*($4 + [144]) = ($4 + [192])
	*($4 + [160]) = ($4 + [8])
	CALL $61(($4 + [160]), ($4 + [144]))
	CALL $34(($4 + [192]), ($4 + [56]))
	$8 = *($4 + [192])
	CALL send_inline($8, (*($4 + [196]) - $8))
	$8 = *($4 + [192])
	if ( ($8 == 0) ){ goto $label$56 }
	*($4 + [196]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$56
	$8 = *($4 + [84])
	if ( ($8 == 0) ){ goto $label$57 }
	*(($4 + [88])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$57
	$8 = *($4 + [72])
	if ( ($8 == 0) ){ goto $label$58 }
	*(($4 + [76])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$58
	if ( ((*(($4 + [40])) & [1]) == 0) ){ goto $label$59 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$59
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*(($4 + [184])))
	
.LABEL $label$49
	CALL $62($0, $1, $3)
	CALL eosio_assert($10, [11099])
	CALL eosio_assert($10, [11018])
	$8 = CALL db_next_i64(*($9 + [60]), ($4 + [8]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$60 }
	CALL $60($5, $8)
	
.LABEL $label$60
	CALL $63($5, $9)
	$6 = *($0 + [12])
	*(($4 + [16])) = [0]
	*($4 + [8]) = (int_64)0
	$8 = CALL $218([8997])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$63 }
	*($4 + [8]) = ($8 << [1])
	$7 = (($4 + [8]) | [1])
	if ( $8 ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	$0 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($0)
	*($4 + [8]) = ($0 | [1])
	*($4 + [16]) = $7
	*($4 + [12]) = $8
	
.LABEL $label$62
	CALL memcpy($7, [8997], $8)
	
.LABEL $label$61
	*(($7 + $8)) = [0]
	CALL $11(($4 + [56]), $3, $17, $11, *(($9 + [8])), $1)
	CALL $20($6, ($4 + [8]), ($4 + [56]))
	CALL $21(($4 + [56]), *($4 + [60]))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$64 }
	CALL _ZdlPv(*($4 + [16]))
	
.LABEL $label$64
	$global$0 = ($4 + [208])
	return (unreachable)
	
.LABEL $label$32
	CALL $178(($4 + [176]))
	
.LABEL $label$31
	CALL $178(($4 + [8]))
	
.LABEL $label$30
	CALL $178(($4 + [176]))
	(unreachable)
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1) != (int_32)*($1 + [4])) ){ goto $label$3 }
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)6256973777754652672, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = ($0 + [8])
	$3 = CALL $51($4, $3)
	$7 = ($1 + [8])
	$5 = ($1 + [4])
	$6 = *($5)
	if ( ((int_32)$6 != (int_32)*($7)) ){ goto $label$4 }
	$8 = [3]
	goto $label$1 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = [4]
	goto $label$1 
	
.LABEL $label$2
	$8 = [4]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$36 
	
.LABEL $label$37
	$3 = CALL $51($4, $3)
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)*($7)) ){ goto $label$19 }
	$8 = [0]
	goto $label$5 
	
.LABEL $label$36
	*($5) = ($6 + [8])
	*($6) = *($3)
	goto $label$18 
	
.LABEL $label$35
	CALL $48($1, $3)
	$8 = [1]
	goto $label$5 
	
.LABEL $label$34
	CALL eosio_assert([1], [11018])
	$3 = CALL db_next_i64(*($3 + [96]), ($2 + [8]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$17 }
	$8 = [4]
	goto $label$5 
	
.LABEL $label$33
	$9 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$16 }
	$8 = [5]
	goto $label$5 
	
.LABEL $label$32
	$7 = ($0 + [8])
	$10 = ($0 + [36])
	$11 = ($0 + [32])
	$0 = ($0 + [16])
	$8 = [6]
	goto $label$5 
	
.LABEL $label$31
	$12 = *($4)
	$6 = *($10)
	$1 = *($11)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$12 }
	$8 = [7]
	goto $label$5 
	
.LABEL $label$30
	$3 = ($6 + [-24])
	$5 = *($3)
	if ( ((int_64)*($5) == (int_64)$12) ){ goto $label$11 }
	$8 = [8]
	goto $label$5 
	
.LABEL $label$29
	$6 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$28
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$10 }
	$8 = [17]
	goto $label$5 
	
.LABEL $label$27
	CALL eosio_assert(((int_32)*($5 + [92]) == (int_32)$7), [11048])
	if ( $5 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$26
	$3 = CALL db_find_i64(*($7), *($0), (int_64)6256973777754652672, $12)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$8 = [10]
	goto $label$5 
	
.LABEL $label$25
	$5 = CALL $51($7, $3)
	CALL eosio_assert(((int_32)*($5 + [92]) == (int_32)$7), [11048])
	$8 = [11]
	goto $label$5 
	
.LABEL $label$24
	CALL eosio_assert([1], [11099])
	CALL eosio_assert([1], [11018])
	$3 = CALL db_next_i64(*($5 + [96]), ($2 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$8 = [12]
	goto $label$5 
	
.LABEL $label$23
	CALL $51($7, $3)
	$8 = [13]
	goto $label$5 
	
.LABEL $label$22
	CALL $52($7, $5)
	$8 = [14]
	goto $label$5 
	
.LABEL $label$21
	$4 = ($4 + [8])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$15 }
	$8 = [15]
	goto $label$5 
	
.LABEL $label$20
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$19
	$8 = [3]
	goto $label$5 
	
.LABEL $label$18
	$8 = [1]
	goto $label$5 
	
.LABEL $label$17
	$8 = [2]
	goto $label$5 
	
.LABEL $label$16
	$8 = [15]
	goto $label$5 
	
.LABEL $label$15
	$8 = [6]
	goto $label$5 
	
.LABEL $label$14
	$8 = [9]
	goto $label$5 
	
.LABEL $label$13
	$8 = [7]
	goto $label$5 
	
.LABEL $label$12
	$8 = [9]
	goto $label$5 
	
.LABEL $label$11
	$8 = [16]
	goto $label$5 
	
.LABEL $label$10
	$8 = [9]
	goto $label$5 
	
.LABEL $label$9
	$8 = [14]
	goto $label$5 
	
.LABEL $label$8
	$8 = [14]
	goto $label$5 
	
.LABEL $label$7
	$8 = [11]
	goto $label$5 
	
.LABEL $label$6
	$8 = [13]
	goto $label$5 
	$8
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10131])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $221($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [84 align=4]) = (int_64)0
	*($5 + [92]) = $0
	*($5 + [80]) = ($5 + [84])
	CALL $155(($3 + [32]), $5)
	*($5 + [96]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $37(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $224($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $21(($1 + [80]), *(($1 + [84])))
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [11133])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11178])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11228])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL $21(($3 + [80]), *(($3 + [84])))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $21(($5 + [80]), *(($5 + [84])))
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [96]))
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10131])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $221($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10154])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [10154])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [10154])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $158(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $224($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $54 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$6 = ($global$0 - [112])
	$global$0 = $6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($4 + [8])), [10218])
	$8 = *($4)
	$7 = *($3)
	CALL eosio_assert(((int_64)$7 >= (int_64)$8), [8804])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [8828])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8857])
	CALL eosio_assert(((uint_32)$5 > (uint_32)[60]), [8884])
	CALL $55($0, $1, $2)
	CALL current_time()
	CALL eosio_assert(((int_64)*($0 + [16]) == (int_64)CALL $fimport$7()), [10967])
	*(($9 = CALL _Znwj([72])) + [56]) = ($0 + [16])
	*($9 + [8]) = $1
	*($9) = $2
	*($9 + [48]) = $5
	*($9 + [16]) = *($3)
	*(($9 + [24])) = *($3 + [8])
	*($9 + [32]) = *($4)
	*(($9 + [40])) = *($4 + [8])
	*($9 + [52]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($6 + [72]) = ($6 + [56])
	*($6 + [68]) = $6
	*($6 + [64]) = $6
	*($6 + [80]) = ($6 + [64])
	$10 = ($9 + [8])
	*($6 + [92]) = $10
	*($6 + [88]) = $9
	*($6 + [96]) = ($9 + [16])
	*($6 + [100]) = ($9 + [32])
	*($6 + [104]) = ($9 + [48])
	*($6 + [108]) = ($9 + [52])
	CALL $56(($6 + [88]), ($6 + [80]))
	$7 = *($9)
	$11 = ($0 + [24])
	*($9 + [60]) = CALL db_store_i64(*($11), (int_64)3932090329724878848, $1, $7, $6, [56])
	$12 = ($0 + [32])
	if ( (uint_64)($7 <= *($12)) ){ goto $label$1 }
	*($12) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$7 = *($11)
	$8 = *($9)
	*($6 + [88]) = *($10)
	*($9 + [64]) = CALL db_idx64_store($7, (int_64)3932090329724878848, $1, $8, ($6 + [88]))
	*($6 + [88]) = $9
	$1 = *($9)
	*($6) = $1
	$11 = *(($9 + [60]))
	*($6 + [64]) = $11
	$12 = ($0 + [44])
	$10 = *($12)
	if ( ((uint_32)$10 >= (uint_32)*(($0 + [48]))) ){ goto $label$4 }
	*($10 + [8]) = $1
	*($10 + [16]) = $11
	*($6 + [88]) = [0]
	*($10) = $9
	*($12) = ($10 + [24])
	$9 = *($6 + [88])
	$10 = [0]
	*($6 + [88]) = [0]
	if ( $9 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $57(($0 + [40]), ($6 + [88]), $6, ($6 + [64]))
	$9 = *($6 + [88])
	$10 = [0]
	*($6 + [88]) = [0]
	if ( ($9 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv($9)
	
.LABEL $label$2
	$11 = *($0 + [12])
	*(($6 + [8])) = $10
	*($6) = (int_64)0
	$9 = CALL $218([8901])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$8 }
	*($6) = ($9 << [1])
	$0 = ($6 | [1])
	if ( $9 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$10 = (($9 + [16]) & [-16])
	$0 = CALL _Znwj($10)
	*($6) = ($10 | [1])
	*($6 + [8]) = $0
	*($6 + [4]) = $9
	
.LABEL $label$7
	CALL memcpy($0, [8901], $9)
	
.LABEL $label$6
	*(($0 + $9)) = [0]
	CALL $10(($6 + [88]), $2, *($3), *($4), $5)
	CALL $20($11, $6, ($6 + [88]))
	CALL $21(($6 + [88]), *($6 + [92]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$9
	$global$0 = ($6 + [112])
	return (unreachable)
	
.LABEL $label$5
	CALL $178($6)
}

void .FUNC $55 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = *($0)
	$5 = *($0 + [8])
	$0 = CALL $218([9045])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*($3) = ($0 << [1])
	$6 = ($3 | [1])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($0 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($3) = ($7 | [1])
	*($3 + [8]) = $6
	*($3 + [4]) = $0
	
.LABEL $label$3
	CALL memcpy($6, [9045], $0)
	
.LABEL $label$2
	*(($6 + $0)) = [0]
	CALL $58($5, $1, $4, $2, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$5
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $178($3)
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [10212])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [10212])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = *($1 + [8])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$5 = ($1 + [4])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$1 = *($6 + [16])
	$6 = $4
	$3 = (CASTING uint_64)(uint_32 ( *($6 + [20]) ? uint_32($1 >> [1]) : ($1 & [1]) ))
	
.LOOP $label$4:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$4 }
	*($0) = $2
	$1 = *(($6 + [16]))
	$1 = ( *(($6 + [20])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$5 }
	$2 = ($1 + $2)
	*($0) = $2
	
.LABEL $label$5
	$1 = *($6 + [28])
	$3 = (CASTING uint_64)(uint_32 ( *($6 + [32]) ? uint_32($1 >> [1]) : ($1 & [1]) ))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	*($0) = $2
	$1 = *(($6 + [28]))
	$1 = ( *(($6 + [32])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$7 }
	$2 = ($1 + $2)
	*($0) = $2
	
.LABEL $label$7
	$1 = *($6 + [4])
	if ( ($1 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = $1
	$1 = *($4)
	if ( $1 ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$4 = *($6 + [8])
	if ( ((int_32)*($4) == (int_32)$6) ){ goto $label$8 }
	$6 = ($6 + [8])
	
.LOOP $label$11:
	$1 = *($6)
	$6 = ($1 + [8])
	$4 = *($1 + [8])
	if ( ((int_32)$1 != (int_32)*($4)) ){ goto $label$11 }
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $154($0, ($1 + [80]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $149($0, ($1 + [8]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10212])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [10212])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [32])
	return *($0 + [4]) = (*($0 + [4]) + [32])
}

int_32 .FUNC $150 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [96]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10083])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)6256973777754652672)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10029])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10029])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $51(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $151 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	if ( (*($0 + [8]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = ($0 + [4])
	*($0) = $4
	$5 = *($0 + [4])
	*($0 + [4]) = [0]
	*(($6 = ($0 + [8]))) = [0]
	*($5 + [8]) = [0]
	$5 = *($3 + [4])
	$7 = ( $5 ? $3 : $5 )
	if ( ($7 == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	$8 = $7
	$9 = $1
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$5 }
	$10 = ($8 + [16])
	CALL $180($10, ($9 + [16]))
	CALL $180(($8 + [28]), ($9 + [28]))
	$7 = *($8 + [8])
	if ( ($7 == 0) ){ goto $label$9 }
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$8 }
	*($7 + [4]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LOOP $label$10:
	$7 = $1
	$1 = *($7)
	if ( $1 ){ goto $label$10 }
	$1 = *($7 + [4])
	if ( $1 ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$9
	$7 = [0]
	$1 = *($4)
	if ( $1 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$8
	*($7) = [0]
	
.LOOP $label$11:
	$1 = *($7 + [4])
	if ( ($1 == 0) ){ goto $label$7 }
	
.LOOP $label$12:
	$7 = $1
	$1 = *($7)
	if ( $1 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$7
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$11 = ($10 + [1])
	
.LOOP $label$14:
	$13 = ($5 & [1])
	$5 = *($10)
	$5 = ( *(($8 + [20])) ? uint_32($5 >> [1]) : $13 )
	$12 = ($3 & [1])
	$3 = *($1 + [16])
	$3 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : $12 )
	$14 = ( $3 ? $5 : ($3 <= $5) )
	if ( ($14 == 0) ){ goto $label$18 }
	$12 = CALL $217(( *(($8 + [24])) ? $11 : $13 ), ( *(($1 + [24])) ? (($1 + [16]) + [1]) : $12 ), $14)
	if ( ($12 == 0) ){ goto $label$18 }
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	if ( ((uint_32)$5 >= (uint_32)$3) ){ goto $label$16 }
	
.LABEL $label$17
	$3 = *($1)
	if ( $3 ){ goto $label$15 }
	$3 = $1
	goto $label$3 
	
.LABEL $label$16
	$3 = *($1 + [4])
	if ( ($3 == 0) ){ goto $label$13 }
	
.LABEL $label$15
	$1 = $3
	goto $label$14 
	
.LABEL $label$13
	$3 = ($1 + [4])
	goto $label$3 
	
.LABEL $label$5
	
.LOOP $label$20:
	$1 = *($8 + [8])
	if ( ($1 == 0) ){ goto $label$19 }
	$8 = $1
	goto $label$20 
	
.LABEL $label$19
	CALL $21($0, $8)
	return 
	
.LABEL $label$4
	$1 = $4
	$3 = $4
	
.LABEL $label$3
	*($8) = (int_64)0
	*(($8 + [8])) = $1
	*($3) = $8
	$1 = *(*($0))
	if ( ($1 == 0) ){ goto $label$21 }
	*($0) = $1
	$8 = *($3)
	
.LABEL $label$21
	CALL $77(*($4), $8)
	*($6) = (*($6) + [1])
	$3 = *($9 + [4])
	if ( ($3 == 0) ){ goto $label$23 }
	
.LOOP $label$24:
	$1 = $3
	$3 = *($1)
	if ( $3 ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$1 = *($9 + [8])
	if ( ((int_32)*($1) == (int_32)$9) ){ goto $label$22 }
	$5 = ($9 + [8])
	
.LOOP $label$25:
	$3 = *($5)
	$5 = ($3 + [8])
	$1 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($1)) ){ goto $label$25 }
	
.LABEL $label$22
	if ( $7 ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$26 }
	
.LOOP $label$27:
	$5 = $1
	CALL $157($0, ($5 + [16]))
	$3 = *($5 + [4])
	if ( ($3 == 0) ){ goto $label$29 }
	
.LOOP $label$30:
	$1 = $3
	$3 = *($1)
	if ( $3 ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$1 = *($5 + [8])
	if ( ((int_32)*($1) == (int_32)$5) ){ goto $label$28 }
	$5 = ($5 + [8])
	
.LOOP $label$31:
	$3 = *($5)
	$5 = ($3 + [8])
	$1 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($1)) ){ goto $label$31 }
	
.LABEL $label$28
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$27 }
	
.LABEL $label$26
}

int_32 .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL $21($1, *($1 + [4]))
	*($1) = ($1 + [4])
	$3 = (int_64)0
	*($1 + [4 align=4]) = (int_64)0
	$4 = *($0 + [4])
	$5 = [0]
	$6 = ($0 + [8])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($6)), [10159])
	$7 = ($0 + [4])
	$4 = *($7)
	$8 = *($4)
	$4 = ($4 + [1])
	*($7) = $4
	$5 = ($5 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $5)))
	$5 = ($5 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $3)
	if ( ($7 == 0) ){ goto $label$2 }
	$9 = ($1 + [4])
	
.LOOP $label$3:
	*(($4 = (($2 + [16]) + [8]))) = [0]
	*($2 + [16]) = (int_64)0
	*(($5 = ($2 + [8]))) = [0]
	*($2) = (int_64)0
	CALL $135(CALL $135($0, ($2 + [16])), $2)
	$6 = CALL $15($1, ($2 + [28]), ($2 + [16]))
	if ( (*($6) == 0) ){ goto $label$8 }
	if ( (*($2) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	*(($8 = CALL _Znwj([40]))) = (int_64)0
	*(($8 + [24])) = *($4)
	*($8 + [16 align=4]) = *($2 + [16])
	*($8 + [28 align=4]) = *($2)
	*(($8 + [36])) = *($5)
	*($8 + [8]) = *($2 + [28])
	*($2) = (int_64)0
	*($6) = $8
	*($4) = [0]
	*($5) = [0]
	*($2 + [16]) = (int_64)0
	$10 = *(*($1))
	if ( ($10 == 0) ){ goto $label$9 }
	*($1) = $10
	$8 = *($6)
	
.LABEL $label$9
	CALL $77(*($9), $8)
	*(($8 = ($1 + [8]))) = (*($8) + [1])
	if ( ((*($2) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($5))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = CALL _Znwj([40])
	$3 = ($2 + [16])
	CALL $179($3, $1)
	CALL $179(($2 + [28]), ($1 + [12]))
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($2 + [17])
	
.LOOP $label$5:
	$8 = ($7 & [1])
	$7 = *($3)
	$7 = ( *(($2 + [20])) ? uint_32($7 >> [1]) : $8 )
	$6 = ($5 & [1])
	$5 = *($1 + [16])
	$5 = ( *(($1 + [20])) ? uint_32($5 >> [1]) : $6 )
	$9 = ( $5 ? $7 : ($5 <= $7) )
	if ( ($9 == 0) ){ goto $label$9 }
	$6 = CALL $217(( *(($2 + [24])) ? $4 : $8 ), ( *(($1 + [24])) ? (($1 + [16]) + [1]) : $6 ), $9)
	if ( ($6 == 0) ){ goto $label$9 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)$7 >= (uint_32)$5) ){ goto $label$7 }
	
.LABEL $label$8
	$5 = *($1)
	if ( $5 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$7
	$5 = *($1 + [4])
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$1 = $5
	goto $label$5 
	
.LABEL $label$4
	$5 = ($1 + [4])
	goto $label$1 
	
.LABEL $label$3
	$1 = ($0 + [4])
	
.LABEL $label$2
	$5 = $1
	
.LABEL $label$1
	*($2 + [8]) = $1
	*($2) = (int_64)0
	*($5) = $2
	$1 = *(*($0))
	if ( ($1 == 0) ){ goto $label$11 }
	*($0) = $1
	$1 = *($5)
	goto $label$10 
	
.LABEL $label$11
	$1 = $2
	
.LABEL $label$10
	CALL $77(*($0 + [4]), $1)
	*($0 + [8]) = (*($0 + [8]) + [1])
	return $2
}

int_32 .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1 + [8])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $3) > (int_32)[0]), [10212])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$8 = ($1 + [4])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$3:
	$7 = $3
	CALL $149(CALL $149($0, ($7 + [16])), ($7 + [28]))
	$6 = *($7 + [4])
	if ( ($6 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = $6
	$6 = *($3)
	if ( $6 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$3 = *($7 + [8])
	if ( ((int_32)*($3) == (int_32)$7) ){ goto $label$4 }
	$7 = ($7 + [8])
	
.LOOP $label$7:
	$6 = *($7)
	$7 = ($6 + [8])
	$3 = *($6 + [8])
	if ( ((int_32)$6 != (int_32)*($3)) ){ goto $label$7 }
	
.LABEL $label$4
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $156($0, ($1 + [80]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $135($0, ($1 + [8]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10154])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [10154])
	CALL memcpy(($1 + [48]), *($0 + [4]), [32])
	return *($0 + [4]) = (*($0 + [4]) + [32])
}

void .FUNC $158 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10154])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10154])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10154])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10154])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $224 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19956])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19764]
	$3 = (((int_32)$1 * (int_32)[12]) + [19764])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $183 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $184($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $69 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	$6 = *($2 + [8])
	*($4 + [16]) = $1
	$7 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$7) < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $99(($4 + [8]), $7)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($4 + [8])), [11048])
	$5 = *($0)
	CALL eosio_assert([1], [11281])
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($4 + [8])), [11316])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$7()), [11362])
	$1 = *($7 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$1), [11472])
	$6 = ((int_64)*($7) + (int_64)*($2))
	*($7) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [11515])
	CALL eosio_assert(((int_64)*($7) < (int_64)4611686018427387904), [11534])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($7 + [8]) >> (uint_64)(int_64)8)), [11413])
	CALL eosio_assert([1], [10212])
	CALL memcpy(($4 + [48]), $7, [8])
	*($4 + [72]) = *($7 + [8])
	CALL eosio_assert([1], [10212])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	CALL db_update_i64(*($7 + [20]), $5, ($4 + [48]), [16])
	$7 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$3 }
	*($7) = ((int_64)$1 + (int_64)1)
	$0 = *($4 + [32])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$7()), [10967])
	*(($7 = CALL _Znwj([32])) + [16]) = ($4 + [8])
	*($7 + [8]) = *(($2 + [8]))
	*($7) = *($2)
	CALL eosio_assert([1], [10212])
	CALL memcpy(($4 + [48]), $7, [8])
	*($4 + [72]) = *($7 + [8])
	CALL eosio_assert([1], [10212])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	$1 = (uint_64)*($7 + [8]) >> (uint_64)(int_64)8
	$0 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3607749779137757184, $3, $1), ($4 + [48]), [16]
	*($7 + [20]) = $0)
	$2 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$5 }
	*($2) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$5
	*($4 + [72]) = $7
	$1 = (uint_64)*(($7 + [8])) >> (uint_64)(int_64)8
	*($4 + [48]) = $1)
	*($4 + [68]) = $0
	$8 = ($4 + [36])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($4 + [40]))) ){ goto $label$7 }
	*($2 + [8]) = $1
	*($2 + [16]) = $0
	*($4 + [72]) = [0]
	*($2) = $7
	*($8) = ($2 + [24])
	$7 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( $7 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $100(($4 + [32]), ($4 + [72]), ($4 + [48]), ($4 + [68]))
	$7 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($7)
	
.LABEL $label$3
	$0 = *($4 + [32])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [36])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$10 }
	$7 = *(($4 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$7 = $0
	
.LABEL $label$8
	*($8) = $0
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $68 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$5 = *($2)
	$4 = *($2 + [8])
	$0 = CALL $101(($3 + [8]), (uint_64)$4 >> (uint_64)(int_64)8), [9738]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)$5), [9762])
	if ( ((int_64)$5 != (int_64)*($0)) ){ goto $label$3 }
	CALL $102(($3 + [8]), $0)
	$6 = *($3 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($3 + [8])), [11316])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$7()), [11362])
	$7 = *($0 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)$7), [10277])
	$5 = (int_64)
	*($0) = $5(*($0) - $5))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [10325])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [10347])
	$5 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [11413])
	CALL eosio_assert([1], [10212])
	CALL memcpy(($3 + [48]), $0, [8])
	*($3 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [10212])
	CALL memcpy((($3 + [48]) | [8]), ($3 + [72]), [8])
	CALL db_update_i64(*($0 + [20]), $1, ($3 + [48]), [16])
	$0 = (($3 + [8]) + [16])
	if ( (uint_64)($5 <= *($0)) ){ goto $label$4 }
	*($0) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$4
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($3 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	CALL _ZdlPv($2)
	
.LABEL $label$8
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($3 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $6
	
.LABEL $label$5
	*($8) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($3 + [80])
}

void .FUNC $65 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = ($0 + [16])
	$5 = *(($0 + [44]))
	$4 = *(($0 + [40]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$3), [11048])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [24])), (int_64)3932090329724878848, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $60($3, $6)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$3), [11048])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [9005])
	CALL require_auth(*($7 + [8]))
	CALL $62($0, *($7 + [8]), $1)
	CALL eosio_assert($6, [11099])
	CALL eosio_assert($6, [11018])
	$6 = CALL db_next_i64(*($7 + [60]), ($2 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $60($3, $6)
	
.LABEL $label$5
	CALL $63($3, $7)
	$7 = *($0 + [12])
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$6 = CALL $218([9034])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$9 }
	*($2 + [16]) = ($6 << [1])
	$5 = (($2 + [16]) | [1])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [16]) = ($4 | [1])
	*($2 + [24]) = $5
	*($2 + [20]) = $6
	
.LABEL $label$8
	CALL memcpy($5, [9034], $6)
	
.LABEL $label$7
	*(($5 + $6)) = [0]
	CALL $12($2, $1)
	CALL $20($7, ($2 + [16]), $2)
	CALL $21($2, *($2 + [4]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($2 + [24]))
	
.LABEL $label$10
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$6
	CALL $178(($2 + [16]))
}

void .FUNC $64 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [80])
	$global$0 = $5
	*($5 + [72]) = $2
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [9631])
	CALL eosio_assert(CALL $fimport$17($2), [9325])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$2 }
	$4 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($4 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($4 <= [257]), [9383])
	$7 = ($0 + [8])
	$6 = *(($0 + [36]))
	$8 = *(($0 + [32]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($6 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$5 }
	$6 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($9 + [60]) == (int_32)$7), [11048])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$4 = CALL db_find_i64(*($7), *(($0 + [16])), (int_64)-3665743729458675712, $3)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $25($7, $4)
	CALL eosio_assert(((int_32)*($9 + [60]) == (int_32)$7), [11048])
	
.LABEL $label$3
	$4 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($4, [9655])
	CALL eosio_assert(((int_64)*($9 + [24]) == (int_64)$1), [9694])
	*($5 + [64]) = ($5 + [72])
	CALL eosio_assert($4, [11281])
	CALL $70($7, $9, $1, ($5 + [64]))
	$4 = ($9 + [40])
	$2 = *($4)
	*((($5 + [48]) + [8])) = $2
	$3 = *($9 + [32])
	*((($5 + [16]) + [8])) = $2
	*($5 + [16]) = $3
	*($5 + [48]) = $3
	CALL $68($0, $1, ($5 + [16]))
	$3 = *($9 + [32])
	$2 = *($4)
	*(($5 + [8])) = $2
	*((($5 + [32]) + [8])) = $2
	*($5) = $3
	*($5 + [32]) = $3
	CALL $69($0, *($5 + [72]), $5, $1)
	$global$0 = ($5 + [80])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [11316])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11362])
	$6 = ($1 + [24])
	*(($5 = $4) + [16]) = *($6)
	*($5 + [24]) = (uint_64)*(($1 + [40])) >> (uint_64)(int_64)8)
	*($6) = *(*($3))
	$7 = *($1)
	CALL eosio_assert([1], [11413])
	$3 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [32])
	$8 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [8])
	$9 = (($5 + [16]) + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$10 = *($1 + [48])
	$10 = ( *(($1 + [52])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$3 = ($10 + $3)
	$8 = (CASTING uint_64)(uint_32 $10)
	$10 = ($1 + [48])
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $221($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [32]) = $5
	*($5 + [44]) = $6
	*($5 + [56]) = $10
	*($5 + [40]) = $1
	*($5 + [48]) = ($1 + [24])
	*($5 + [52]) = ($1 + [32])
	CALL $165(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [64]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL $224($4)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [40]) = *(($1 + [24]))
	if ( (CALL $217(($5 + [16]), ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = *($1 + [68])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3665743729458675712, ($5 + [32]), $7)
	*(($1 + [68])) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$7
	*($5 + [40]) = (uint_64)*(($1 + [40])) >> (uint_64)(int_64)8)
	if ( (CALL $217($9, ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [72])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3665743729458675711, ($5 + [32]), $7)
	*($1) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$9
	$global$0 = ($5 + [64])
}

void .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = *(($0 + [24]))
	*($1 + [16]) = [0]
	*($1 + [8]) = (int_64)0
	$3 = CALL db_lowerbound_i64(*($0 + [16]), $2, (int_64)3932090329724878848, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = ($0 + [16])
	$3 = CALL $60($4, $3)
	$5 = (($1 + [8]) + [8])
	$6 = [0]
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$3 }
	$7 = [3]
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	$7 = [18]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$38 
	
.LABEL $label$39
	$3 = CALL $60($4, $3)
	$6 = *($1 + [12])
	if ( ((int_32)$6 == (int_32)*($5)) ){ goto $label$18 }
	$7 = [0]
	goto $label$4 
	
.LABEL $label$38
	*($6) = *($3)
	*($1 + [12]) = ($6 + [8])
	goto $label$17 
	
.LABEL $label$37
	CALL $48(($1 + [8]), $3)
	$7 = [1]
	goto $label$4 
	
.LABEL $label$36
	CALL eosio_assert([1], [11018])
	$3 = CALL db_next_i64(*($3 + [60]), ($1 + [24]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$16 }
	$7 = [4]
	goto $label$4 
	
.LABEL $label$35
	$9 = *($1 + [12])
	$8 = *($1 + [8])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$15 }
	$7 = [5]
	goto $label$4 
	
.LABEL $label$34
	$10 = ($0 + [44])
	$11 = ($0 + [40])
	$12 = ($0 + [24])
	$13 = ($0 + [16])
	$7 = [6]
	goto $label$4 
	
.LABEL $label$33
	$2 = *($8)
	$6 = *($10)
	$0 = *($11)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$11 }
	$7 = [7]
	goto $label$4 
	
.LABEL $label$32
	$3 = ($6 + [-24])
	$5 = *($3)
	if ( ((int_64)*($5) == (int_64)$2) ){ goto $label$10 }
	$7 = [8]
	goto $label$4 
	
.LABEL $label$31
	$6 = $3
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$30
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$9 }
	$7 = [20]
	goto $label$4 
	
.LABEL $label$29
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)$4), [11048])
	goto $label$7 
	
.LABEL $label$28
	$3 = CALL db_find_i64(*($13), *($12), (int_64)3932090329724878848, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$7 = [10]
	goto $label$4 
	
.LABEL $label$27
	$5 = CALL $60($4, $3)
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)$4), [11048])
	$7 = [11]
	goto $label$4 
	
.LABEL $label$26
	CALL eosio_assert([1], [11099])
	CALL eosio_assert([1], [11018])
	$3 = CALL db_next_i64(*($5 + [60]), ($1 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$7 = [12]
	goto $label$4 
	
.LABEL $label$25
	CALL $60($4, $3)
	$7 = [13]
	goto $label$4 
	
.LABEL $label$24
	CALL $63($4, $5)
	$7 = [14]
	goto $label$4 
	
.LABEL $label$23
	$8 = ($8 + [8])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$14 }
	$7 = [15]
	goto $label$4 
	
.LABEL $label$22
	$9 = *($1 + [8])
	$7 = [16]
	goto $label$4 
	
.LABEL $label$21
	if ( ($9 == 0) ){ goto $label$5 }
	$7 = [17]
	goto $label$4 
	
.LABEL $label$20
	*($1 + [12]) = $9
	CALL _ZdlPv($9)
	$7 = [18]
	goto $label$4 
	
.LABEL $label$19
	$global$0 = ($1 + [32])
	return 
	
.LABEL $label$18
	$7 = [3]
	goto $label$4 
	
.LABEL $label$17
	$7 = [1]
	goto $label$4 
	
.LABEL $label$16
	$7 = [2]
	goto $label$4 
	
.LABEL $label$15
	$7 = [16]
	goto $label$4 
	
.LABEL $label$14
	$7 = [6]
	goto $label$4 
	
.LABEL $label$13
	$7 = [9]
	goto $label$4 
	
.LABEL $label$12
	$7 = [7]
	goto $label$4 
	
.LABEL $label$11
	$7 = [9]
	goto $label$4 
	
.LABEL $label$10
	$7 = [19]
	goto $label$4 
	
.LABEL $label$9
	$7 = [9]
	goto $label$4 
	
.LABEL $label$8
	$7 = [14]
	goto $label$4 
	
.LABEL $label$7
	$7 = [11]
	goto $label$4 
	
.LABEL $label$6
	$7 = [13]
	goto $label$4 
	
.LABEL $label$5
	$7 = [18]
	goto $label$4 
	$7
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $149(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10131])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $221($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [52]) = [0]
	*($5 + [56]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [52])
	CALL $159(($3 + [40]), ($3 + [32]))
	*($5 + [64]) = [-1]
	*($5 + [60]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $57(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $224($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [11133])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11178])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11228])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [60]))
	$6 = *(($1 + [64]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3932090329724878848, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $62 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = *($0)
	$5 = *($0 + [8])
	$0 = CALL $218([9074])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*($3) = ($0 << [1])
	$6 = ($3 | [1])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($0 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($3) = ($7 | [1])
	*($3 + [8]) = $6
	*($3 + [4]) = $0
	
.LABEL $label$3
	CALL memcpy($6, [9074], $0)
	
.LABEL $label$2
	*(($6 + $0)) = [0]
	CALL $64($5, $4, $1, $2, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$5
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $178($3)
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [224])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [7]) = $2
	$4 = *($1 + [4])
	$2 = *($1 + [8])
	$5 = *($1)
	*(($3 + [152])) = [1]
	$6 = ($5 & [1])
	$1 = ( $2 ? ($1 + [1]) : $6 )
	*(($3 + [164])) = $1
	$2 = ([10636] | [1])
	*($3 + [144]) = $2
	*($3 + [176]) = [0]
	*($3 + [160]) = $1
	*($3 + [168]) = $1
	$4 = ( $4 ? uint_32($5 >> [1]) : $6 )
	$5 = ($1 + $4)
	*($3 + [172]) = $5
	*($3 + [148]) = ($3 + [7])
	$6 = (($3 + [144]) | [4])
	if ( ($4 == 0) ){ goto $label$6 }
	CALL void ($3 + [184])((int_32 $6), (int_32 $1), (int_32 $5), (int_32 *((([10636] & [-2]) + [4]))))
	$5 = *($3 + [172])
	$2 = *($3 + [184])
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$5 }
	$1 = *($3 + [188])
	goto $label$4 
	
.LABEL $label$6
	*($3 + [184]) = [0]
	*($3 + [184]) = $2
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$1 = *($3 + [188])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	if ( ((int_32)*(($3 + [164])) != (int_32)$1) ){ goto $label$4 }
	*(($3 + [176])) = [1]
	
.LABEL $label$4
	*(($3 + [164])) = $2
	$2 = ($3 + [168])
	*(($3 + [160])) = *($2)
	*($2) = $1
	$4 = [0]
	*($3 + [184]) = [0]
	$2 = *($3 + [144])
	if ( ($2 == 0) ){ goto $label$1 }
	*($3 + [184]) = $2
	if ( ($2 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	CALL void $6((int_32 (($3 + [184]) | [4])), (int_32 [0]), (int_32 *(($2 & [-2]))))
	$5 = *(($3 + [172]))
	$1 = *(($3 + [168]))
	$4 = *($3 + [144])
	goto $label$1 
	
.LABEL $label$2
	*(($3 + [196])) = *(($6 + [8]))
	*($3 + [188 align=4]) = *($6)
	$4 = $2
	
.LABEL $label$1
	*($3 + [208]) = $1
	*($3 + [212]) = $5
	*($3 + [200]) = *(($3 + [160]))
	*($3 + [216]) = *(($3 + [176]))
	if ( ($4 == 0) ){ goto $label$7 }
	if ( ($4 & [1]) ){ goto $label$8 }
	$1 = *(($4 & [-2]))
	if ( ($1 == 0) ){ goto $label$8 }
	CALL void $6((int_32 $6), (int_32 [2]), (int_32 $1))
	
.LABEL $label$8
	*($3 + [144]) = [0]
	
.LABEL $label$7
	*($3 + [104]) = [0]
	*($3 + [120]) = (int_64)0
	*($3 + [128]) = (int_64)0
	*($3 + [136]) = [1]
	*($3 + [48]) = [0]
	$1 = [0]
	$2 = *($3 + [184])
	if ( ($2 == 0) ){ goto $label$9 }
	*($3 + [48]) = $2
	if ( ($2 & [1]) ){ goto $label$10 }
	CALL void (($3 + [184]) | [4])((int_32 (($3 + [48]) | [4])), (int_32 [0]), (int_32 *(($2 & [-2]))))
	$1 = *($3 + [104])
	goto $label$9 
	
.LABEL $label$10
	*((($3 + [48]) + [12])) = *((($3 + [184]) + [12]))
	*($3 + [52 align=4]) = *($3 + [188 align=4])
	$1 = [0]
	
.LABEL $label$9
	*($3 + [8]) = [0]
	*($3 + [64]) = *((($3 + [184]) + [16]))
	*($3 + [72]) = *((($3 + [184]) + [24]))
	*($3 + [80]) = *((($3 + [184]) + [32]))
	if ( ($1 == 0) ){ goto $label$11 }
	*($3 + [8]) = $1
	if ( ($1 & [1]) ){ goto $label$12 }
	CALL void (($3 + [104]) | [4])((int_32 (($3 + [8]) | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$11 
	
.LABEL $label$12
	*((($3 + [8]) + [12])) = *((($3 + [104]) + [12]))
	*($3 + [12 align=4]) = *($3 + [108 align=4])
	
.LABEL $label$11
	*($3 + [24]) = *((($3 + [104]) + [16]))
	*($3 + [32]) = *((($3 + [104]) + [24]))
	*($3 + [40]) = *((($3 + [104]) + [32]))
	$1 = CALL $2(($3 + [88]), ($3 + [48]), ($3 + [8]))
	$2 = *($3 + [8])
	if ( ($2 == 0) ){ goto $label$13 }
	if ( ($2 & [1]) ){ goto $label$14 }
	$2 = *(($2 & [-2]))
	if ( ($2 == 0) ){ goto $label$14 }
	$5 = (($3 + [8]) | [4])
	CALL void $5((int_32 $5), (int_32 [2]), (int_32 $2))
	
.LABEL $label$14
	*($3 + [8]) = [0]
	
.LABEL $label$13
	$2 = *($3 + [48])
	if ( ($2 == 0) ){ goto $label$15 }
	if ( ($2 & [1]) ){ goto $label$16 }
	$2 = *(($2 & [-2]))
	if ( ($2 == 0) ){ goto $label$16 }
	$5 = (($3 + [48]) | [4])
	CALL void $5((int_32 $5), (int_32 [2]), (int_32 $2))
	
.LABEL $label$16
	*($3 + [48]) = [0]
	
.LABEL $label$15
	$7 = *($1)
	*($1) = (int_64)0
	*($0) = $7
	*(($0 + [8])) = *($1 + [8])
	$1 = *($3 + [104])
	if ( ($1 == 0) ){ goto $label$17 }
	if ( ($1 & [1]) ){ goto $label$18 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$18 }
	$0 = (($3 + [104]) | [4])
	CALL void $0((int_32 $0), (int_32 [2]), (int_32 $1))
	
.LABEL $label$18
	*($3 + [104]) = [0]
	
.LABEL $label$17
	$1 = *($3 + [184])
	if ( ($1 == 0) ){ goto $label$19 }
	if ( ($1 & [1]) ){ goto $label$20 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$20 }
	$0 = (($3 + [184]) | [4])
	CALL void $0((int_32 $0), (int_32 [2]), (int_32 $1))
	
.LABEL $label$20
	*($3 + [184]) = [0]
	
.LABEL $label$19
	$global$0 = ($3 + [224])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [32])
	$global$0 = $2
	$4 = *($1)
	$3 = CALL $218([9240])
	if ( ((int_32)$3 != (int_32)( *($1 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$4 }
	if ( CALL $189($1, [0], [-1], [9240], $3) ){ goto $label$3 }
	$5 = *(($0 + [16]))
	*($2 + [16]) = [0]
	*($2 + [8]) = (int_64)0
	$1 = CALL db_lowerbound_i64(*($0 + [8]), $5, (int_64)-5918709575225180160, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$6 = ($0 + [8])
	$1 = CALL $86($6, $1)
	$3 = (($2 + [8]) + [8])
	$4 = [0]
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$5 }
	$7 = [3]
	goto $label$1 
	
.LABEL $label$5
	$7 = [0]
	goto $label$1 
	
.LABEL $label$4
	$7 = [18]
	goto $label$1 
	
.LABEL $label$3
	$7 = [18]
	goto $label$1 
	
.LABEL $label$2
	$7 = [18]
	
.LABEL $label$1
	
.LOOP $label$6:
	goto $label$40 
	
.LABEL $label$41
	$1 = CALL $86($6, $1)
	$4 = *($2 + [12])
	if ( ((int_32)$4 == (int_32)*($3)) ){ goto $label$20 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$40
	*($4) = *($1)
	*($2 + [12]) = ($4 + [8])
	goto $label$19 
	
.LABEL $label$39
	CALL $48(($2 + [8]), $1)
	$7 = [1]
	goto $label$6 
	
.LABEL $label$38
	CALL eosio_assert([1], [11018])
	$1 = CALL db_next_i64(*($1 + [36]), ($2 + [24]))
	if ( ((int_32)$1 >= (int_32)[0]) ){ goto $label$18 }
	$7 = [4]
	goto $label$6 
	
.LABEL $label$37
	$9 = *($2 + [12])
	$8 = *($2 + [8])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$17 }
	$7 = [5]
	goto $label$6 
	
.LABEL $label$36
	$10 = ($0 + [36])
	$11 = ($0 + [32])
	$12 = ($0 + [16])
	$13 = ($0 + [8])
	$7 = [6]
	goto $label$6 
	
.LABEL $label$35
	$5 = *($8)
	$4 = *($10)
	$0 = *($11)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$13 }
	$7 = [7]
	goto $label$6 
	
.LABEL $label$34
	$1 = ($4 + [-24])
	$3 = *($1)
	if ( ((int_64)*($3) == (int_64)$5) ){ goto $label$12 }
	$7 = [8]
	goto $label$6 
	
.LABEL $label$33
	$4 = $1
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$32
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$11 }
	$7 = [20]
	goto $label$6 
	
.LABEL $label$31
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$6), [11048])
	goto $label$9 
	
.LABEL $label$30
	$1 = CALL db_find_i64(*($13), *($12), (int_64)-5918709575225180160, $5)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$10 }
	$7 = [10]
	goto $label$6 
	
.LABEL $label$29
	$3 = CALL $86($6, $1)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$6), [11048])
	$7 = [11]
	goto $label$6 
	
.LABEL $label$28
	CALL eosio_assert([1], [11099])
	CALL eosio_assert([1], [11018])
	$1 = CALL db_next_i64(*($3 + [36]), ($2 + [24]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$8 }
	$7 = [12]
	goto $label$6 
	
.LABEL $label$27
	CALL $86($6, $1)
	$7 = [13]
	goto $label$6 
	
.LABEL $label$26
	CALL $90($6, $3)
	$7 = [14]
	goto $label$6 
	
.LABEL $label$25
	$8 = ($8 + [8])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$16 }
	$7 = [15]
	goto $label$6 
	
.LABEL $label$24
	$9 = *($2 + [8])
	$7 = [16]
	goto $label$6 
	
.LABEL $label$23
	if ( ($9 == 0) ){ goto $label$7 }
	$7 = [17]
	goto $label$6 
	
.LABEL $label$22
	*($2 + [12]) = $9
	CALL _ZdlPv($9)
	$7 = [18]
	goto $label$6 
	
.LABEL $label$21
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$20
	$7 = [3]
	goto $label$6 
	
.LABEL $label$19
	$7 = [1]
	goto $label$6 
	
.LABEL $label$18
	$7 = [2]
	goto $label$6 
	
.LABEL $label$17
	$7 = [16]
	goto $label$6 
	
.LABEL $label$16
	$7 = [6]
	goto $label$6 
	
.LABEL $label$15
	$7 = [9]
	goto $label$6 
	
.LABEL $label$14
	$7 = [7]
	goto $label$6 
	
.LABEL $label$13
	$7 = [9]
	goto $label$6 
	
.LABEL $label$12
	$7 = [19]
	goto $label$6 
	
.LABEL $label$11
	$7 = [9]
	goto $label$6 
	
.LABEL $label$10
	$7 = [14]
	goto $label$6 
	
.LABEL $label$9
	$7 = [11]
	goto $label$6 
	
.LABEL $label$8
	$7 = [13]
	goto $label$6 
	
.LABEL $label$7
	$7 = [18]
	goto $label$6 
	$7
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [11316])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11362])
	*($1 + [24]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [11413])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [16])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	$9 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $221($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [10212])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	CALL $149($5, $7)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($5 + [4]), $9, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $224($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10131])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $221($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([48])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10154])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $135(($3 + [32]), ($5 + [8]))
	CALL eosio_assert(((uint_32)(*($3 + [40]) - *($3 + [36])) > (uint_32)[7]), [10154])
	CALL memcpy(($5 + [24]), *($3 + [36]), [8])
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	*($3 + [36]) = (*($3 + [36]) + [8])
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $88(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $224($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [24])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [8])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [16])), (int_64)-5918709575225180160, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $86($9, $10)
	*($3 + [4]) = [0]
	*($3) = $9
	$8 = *(*(CALL $164($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [24])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9977])
	*($1) = *($7)
	$6 = ($1 + [8])
	CALL $180($6, *($5 + [4]))
	*($1 + [24]) = *(*($5 + [8]))
	$5 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [16])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $221($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [10212])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $149($3, $6)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($3 + [4]), $7, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-5918709575225180160, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $224($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [112])
	$global$0 = $3
	*($3 + [64]) = $2
	CALL $23(($3 + [24]), $0, $1)
	$4 = ($0 + [8])
	if ( (*($3 + [56]) == 0) ){ goto $label$9 }
	$2 = *($3 + [24])
	$6 = *(($0 + [36]))
	$5 = *(($0 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$10:
	$1 = ($6 + [-24])
	$7 = *($1)
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$8 }
	$6 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$9
	$2 = *($0)
	*($3 + [12]) = $1
	*($3 + [8]) = $0
	*($3 + [16]) = ($3 + [64])
	*($3 + [104]) = $2
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$7()), [10967])
	*($3 + [80]) = $4
	*($3 + [84]) = ($3 + [8])
	*($3 + [88]) = ($3 + [104])
	*(($1 = CALL _Znwj([48])) + [16]) = [0]
	*($1 + [8 align=4]) = (int_64)0
	*($1 + [32]) = $4
	CALL $85(($3 + [80]), $1)
	*($3 + [96]) = $1
	$2 = *($1)
	*($3 + [80]) = $2
	$7 = *($1 + [36])
	*($3 + [76]) = $7
	$5 = ($0 + [36])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [40]))) ){ goto $label$5 }
	*($6 + [8]) = $2
	*($6 + [16]) = $7
	*($3 + [96]) = [0]
	*($6) = $1
	*($5) = ($6 + [24])
	$1 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$8
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$4), [11048])
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$1 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-5918709575225180160, $2)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $86($4, $1)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$4), [11048])
	
.LABEL $label$6
	$2 = *($0)
	*($3 + [80]) = ($3 + [64])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [11281])
	CALL $87($4, $7, $2, ($3 + [80]))
	goto $label$4 
	
.LABEL $label$5
	CALL $88(($0 + [32]), ($3 + [96]), ($3 + [80]), ($3 + [76]))
	$1 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( $1 ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*(($3 + [56])) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	if ( (*(($3 + [56])) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$1
	$global$0 = ($3 + [112])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [11133])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11178])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11228])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10131])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $221($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10154])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [10154])
	CALL memcpy(($5 + [8]), ($2 + [8]), [1])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $41(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $224($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1) != (int_32)*($1 + [4])) ){ goto $label$3 }
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-2184396096422281216, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = ($0 + [8])
	$3 = CALL $82($4, $3)
	$7 = ($1 + [8])
	$5 = ($1 + [4])
	$6 = *($5)
	if ( ((int_32)$6 != (int_32)*($7)) ){ goto $label$4 }
	$8 = [3]
	goto $label$1 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = [4]
	goto $label$1 
	
.LABEL $label$2
	$8 = [4]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$35 
	
.LABEL $label$36
	$3 = CALL $82($4, $3)
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)*($7)) ){ goto $label$18 }
	$8 = [0]
	goto $label$5 
	
.LABEL $label$35
	*($5) = ($6 + [8])
	*($6) = *($3)
	goto $label$17 
	
.LABEL $label$34
	CALL $48($1, $3)
	$8 = [1]
	goto $label$5 
	
.LABEL $label$33
	CALL eosio_assert([1], [11018])
	$3 = CALL db_next_i64(*($3 + [20]), ($2 + [8]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$16 }
	$8 = [4]
	goto $label$5 
	
.LABEL $label$32
	$9 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$15 }
	$8 = [5]
	goto $label$5 
	
.LABEL $label$31
	$4 = ($0 + [8])
	$10 = ($0 + [36])
	$11 = ($0 + [32])
	$0 = ($0 + [16])
	$8 = [6]
	goto $label$5 
	
.LABEL $label$30
	$12 = *($7)
	$6 = *($10)
	$1 = *($11)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	$8 = [7]
	goto $label$5 
	
.LABEL $label$29
	$3 = ($6 + [-24])
	$5 = *($3)
	if ( ((int_64)*($5) == (int_64)$12) ){ goto $label$10 }
	$8 = [8]
	goto $label$5 
	
.LABEL $label$28
	$6 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$27
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$9 }
	$8 = [17]
	goto $label$5 
	
.LABEL $label$26
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [11048])
	goto $label$7 
	
.LABEL $label$25
	$3 = CALL db_find_i64(*($4), *($0), (int_64)-2184396096422281216, $12)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$8 = [10]
	goto $label$5 
	
.LABEL $label$24
	$5 = CALL $82($4, $3)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [11048])
	$8 = [11]
	goto $label$5 
	
.LABEL $label$23
	CALL eosio_assert([1], [11099])
	CALL eosio_assert([1], [11018])
	$3 = CALL db_next_i64(*($5 + [20]), ($2 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$8 = [12]
	goto $label$5 
	
.LABEL $label$22
	CALL $82($4, $3)
	$8 = [13]
	goto $label$5 
	
.LABEL $label$21
	CALL $83($4, $5)
	$8 = [14]
	goto $label$5 
	
.LABEL $label$20
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$14 }
	$8 = [15]
	goto $label$5 
	
.LABEL $label$19
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$18
	$8 = [3]
	goto $label$5 
	
.LABEL $label$17
	$8 = [1]
	goto $label$5 
	
.LABEL $label$16
	$8 = [2]
	goto $label$5 
	
.LABEL $label$15
	$8 = [15]
	goto $label$5 
	
.LABEL $label$14
	$8 = [6]
	goto $label$5 
	
.LABEL $label$13
	$8 = [9]
	goto $label$5 
	
.LABEL $label$12
	$8 = [7]
	goto $label$5 
	
.LABEL $label$11
	$8 = [9]
	goto $label$5 
	
.LABEL $label$10
	$8 = [16]
	goto $label$5 
	
.LABEL $label$9
	$8 = [9]
	goto $label$5 
	
.LABEL $label$8
	$8 = [14]
	goto $label$5 
	
.LABEL $label$7
	$8 = [11]
	goto $label$5 
	
.LABEL $label$6
	$8 = [13]
	goto $label$5 
	$8
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [11133])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11178])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11228])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL $76(($3 + [8]), *(($3 + [12])))
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $76(($5 + [8]), *(($5 + [12])))
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [10212])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [10212])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $148 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($0 + [4])
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$2 }
	$6 = ($1 + [16])
	$10 = ($9 & [1])
	$9 = *($4)
	$9 = ( *($4 + [4]) ? uint_32($9 >> [1]) : $10 )
	$8 = ($7 & [1])
	$7 = *($1 + [16])
	$7 = ( *($1 + [20]) ? uint_32($7 >> [1]) : $8 )
	$11 = ( $7 ? $9 : ($7 <= $9) )
	if ( ($11 == 0) ){ goto $label$3 }
	$8 = CALL $217(( *($4 + [8]) ? ($4 + [1]) : $10 ), ( *($1 + [24]) ? ($6 + [1]) : $8 ), $11)
	if ( ($8 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_32)$9 >= (uint_32)$7) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)$1) ){ goto $label$9 }
	$9 = *($1)
	if ( ($9 == 0) ){ goto $label$8 }
	
.LOOP $label$10:
	$7 = $9
	$9 = *($7 + [4])
	if ( $9 ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$9
	$7 = $1
	if ( *($1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$9 = $1
	
.LOOP $label$11:
	$7 = *($9 + [8])
	$3 = ((int_32)*($7) == (int_32)$9)
	$9 = $7
	if ( $3 ){ goto $label$11 }
	
.LABEL $label$7
	$5 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *(($7 + [20])) ? uint_32($3 >> [1]) : $5 )
	$6 = ($9 & [1])
	$9 = *($4)
	$9 = ( *($4 + [4]) ? uint_32($9 >> [1]) : $6 )
	$8 = ( $9 ? $3 : ($9 <= $3) )
	if ( ($8 == 0) ){ goto $label$13 }
	$6 = CALL $217(( *(($7 + [24])) ? (($7 + [16]) + [1]) : $5 ), ( *($4 + [8]) ? ($4 + [1]) : $6 ), $8)
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$12 }
	goto $label$4 
	
.LABEL $label$13
	if ( ((uint_32)$3 >= (uint_32)$9) ){ goto $label$4 }
	
.LABEL $label$12
	if ( (*($1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	*($2) = $7
	return ($7 + [4])
	
.LABEL $label$5
	*($2) = $1
	return $1
	
.LABEL $label$4
	return CALL $15($0, $2, $4)
	
.LABEL $label$1
	$10 = ($9 & [1])
	$9 = *(($1 + [16]))
	$9 = ( *(($1 + [20])) ? uint_32($9 >> [1]) : $10 )
	$8 = ($7 & [1])
	$7 = *($4)
	$7 = ( *(($4 + [4])) ? uint_32($7 >> [1]) : $8 )
	$11 = ( $7 ? $9 : ($7 <= $9) )
	if ( ($11 == 0) ){ goto $label$16 }
	$6 = CALL $217(( *($1 + [24]) ? ($6 + [1]) : $10 ), ( *($4 + [8]) ? ($4 + [1]) : $8 ), $11)
	if ( ($6 == 0) ){ goto $label$16 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	if ( ((uint_32)$9 >= (uint_32)$7) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = *($1 + [4])
	if ( ($7 == 0) ){ goto $label$18 }
	
.LOOP $label$19:
	$9 = $7
	$7 = *($9)
	if ( $7 ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$9 = *($1 + [8])
	if ( ((int_32)*($9) == (int_32)$1) ){ goto $label$17 }
	$3 = ($1 + [8])
	
.LOOP $label$20:
	$7 = *($3)
	$3 = ($7 + [8])
	$9 = *($7 + [8])
	if ( ((int_32)$7 != (int_32)*($9)) ){ goto $label$20 }
	
.LABEL $label$17
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$22 }
	$5 = ($3 & [1])
	$3 = *($4)
	$3 = ( *(($4 + [4])) ? uint_32($3 >> [1]) : $5 )
	$6 = ($7 & [1])
	$7 = *($9 + [16])
	$7 = ( *($9 + [20]) ? uint_32($7 >> [1]) : $6 )
	$8 = ( $7 ? $3 : ($7 <= $3) )
	if ( ($8 == 0) ){ goto $label$23 }
	$6 = CALL $217(( *($4 + [8]) ? ($4 + [1]) : $5 ), ( *($9 + [24]) ? (($9 + [16]) + [1]) : $6 ), $8)
	if ( ($6 == 0) ){ goto $label$23 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$21 }
	
.LABEL $label$22
	$7 = ($1 + [4])
	if ( (*($7) == 0) ){ goto $label$24 }
	*($2) = $9
	return $9
	
.LABEL $label$24
	*($2) = $1
	return $7
	
.LABEL $label$21
	return CALL $15($0, $2, $4)
	
.LABEL $label$14
	*($2) = $1
	*($3) = $1
	return $3
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10212])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [10212])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $147 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$1 }
	$4 = (*(*($1)) & [255])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)*($2)) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$2 }
	*($0 + [4]) = $3
	*($0) = $3
	return 
	
.LABEL $label$1
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	if ( (*($1 + [4]) == 0) ){ goto $label$3 }
	*($0 + [4]) = ($2 + [1])
	*($0) = $2
	return 
	
.LABEL $label$4
	*($0 + [4]) = $3
	*($0) = $3
	return 
	
.LABEL $label$3
	$1 = (*(*($1)) & [255])
	$4 = $2
	
.LOOP $label$6:
	if ( ((int_32)$1 != (int_32)*($4)) ){ goto $label$5 }
	$4 = ($4 + [1])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	*($0 + [4]) = $3
	*($0) = $2
	return 
	
.LABEL $label$5
	*($0 + [4]) = $4
	*($0) = $2
}

void .FUNC $146 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$16 }
	$3 = [0]
	
.LOOP $label$17:
	$2 = [0]
	
.LOOP $label$19:
	if ( ((int_32)*((($3 + $2) + [10683])) != (int_32)*(($2 + [10962]))) ){ goto $label$18 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$15 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[279]) ){ goto $label$19 }
	goto $label$14 
	
.LABEL $label$18
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[279]) ){ goto $label$17 }
	goto $label$14 
	
.LABEL $label$16
	if ( ((uint_32)$2 > (uint_32)[1]) ){ goto $label$13 }
	*($1) = *($0)
	return 
	
.LABEL $label$15
	if ( ((int_32)$3 != (int_32)[279]) ){ goto $label$12 }
	
.LABEL $label$14
	*($1) = [10683]
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$13
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)[3]) ){ goto $label$11 }
	$4 = *($1)
	$3 = [0]
	
.LOOP $label$20:
	$2 = [0]
	
.LOOP $label$22:
	if ( ((int_32)*((($3 + $2) + [10683])) != (int_32)*(($2 + [10962]))) ){ goto $label$21 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$10 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[279]) ){ goto $label$22 }
	goto $label$9 
	
.LABEL $label$21
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[279]) ){ goto $label$20 }
	goto $label$9 
	
.LABEL $label$12
	*($1) = ($3 + [10687])
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$11
	$3 = [0]
	
.LOOP $label$23:
	$2 = [0]
	
.LOOP $label$25:
	if ( ((int_32)*((($3 + $2) + [10683])) != (int_32)*(($2 + [10962]))) ){ goto $label$24 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[279]) ){ goto $label$25 }
	goto $label$7 
	
.LABEL $label$24
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[279]) ){ goto $label$23 }
	goto $label$7 
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)[279]) ){ goto $label$6 }
	
.LABEL $label$9
	$2 = [10683]
	$5 = [0]
	$3 = *($4)
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	if ( ((int_32)$3 != (int_32)[279]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = [10683]
	goto $label$2 
	
.LABEL $label$6
	$2 = ($3 + [10687])
	$5 = [0]
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$4 = ($4 + [1])
	
.LOOP $label$27:
	if ( ((int_32)($3 & [255]) != (int_32)*($2)) ){ goto $label$26 }
	$2 = ($2 + [1])
	$3 = *($4)
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$27 }
	goto $label$4 
	
.LABEL $label$26
	$5 = $3
	
.LABEL $label$4
	if ( ((int_32)($5 & [255]) != (int_32)*($2)) ){ goto $label$28 }
	*($1) = $0
	return 
	
.LABEL $label$28
	*($1) = [0]
	return 
	
.LABEL $label$3
	$2 = ($3 + [10687])
	
.LABEL $label$2
	*($1) = $2
	*($1 + [4]) = [0]
	
.LABEL $label$1
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $135(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10154])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $135(*($1), *($0 + [16]))
	$global$0 = ($2 + [16])
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10154])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10154])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [40])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10154])
	CALL memcpy(($0 + [48]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10212])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10212])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10212])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10159])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $32($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [10154])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $72 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = *(CALL $22((*($0 + [8]) + [8]), (int_64)1, [8729]) + [8])
	CALL $196(($4 + [32]), $1)
	$0 = CALL $188(($4 + [32]), [0], [8748])
	$6 = ($0 + [8])
	*((($4 + [48]) + [8])) = *($6)
	*($4 + [48]) = *($0)
	*($0) = (int_64)0
	*($6) = [0]
	$0 = CALL $185(($4 + [48]), [9181])
	$6 = ($0 + [8])
	*((($4 + [64]) + [8])) = *($6)
	*($4 + [64]) = *($0)
	*($0) = (int_64)0
	*($6) = [0]
	CALL $194(($4 + [16]), $2)
	$0 = *($4 + [16])
	$2 = ($0 & [1])
	$0 = CALL $186(($4 + [64]), ( *($4 + [24]) ? (($4 + [16]) | [1]) : $2 ), ( *($4 + [20]) ? uint_32($0 >> [1]) : $2 ))
	$2 = ($0 + [8])
	*((($4 + [80]) + [8])) = *($2)
	*($4 + [80]) = *($0)
	*($0) = (int_64)0
	*($2) = [0]
	$0 = CALL $185(($4 + [80]), [8783])
	$2 = ($0 + [8])
	*((($4 + [96]) + [8])) = *($2)
	*($4 + [96]) = *($0)
	*($0) = (int_64)0
	*($2) = [0]
	$3 = ((int_64)$5 * (int_64)$3)
	CALL $196($4, $3)
	$0 = *($4)
	$2 = ($0 & [1])
	$0 = CALL $186(($4 + [96]), ( *($4 + [8]) ? ($4 | [1]) : $2 ), ( *($4 + [4]) ? uint_32($0 >> [1]) : $2 ))
	$2 = ($0 + [8])
	*((($4 + [112]) + [8])) = *($2)
	*($4 + [112]) = *($0)
	*($0) = (int_64)0
	*($2) = [0]
	$0 = CALL $185(($4 + [112]), [8801])
	$6 = ($0 + [8])
	*(($2 = (($4 + [128]) + [8]))) = *($6)
	*($4 + [128]) = *($0)
	*($0) = (int_64)0
	*($6) = [0]
	CALL eosio_assert(((int_64)$3 == (int_64)$1), ( *($2) ? (($4 + [128]) | [1]) : (*($4 + [128]) & [1]) ))
	if ( (*($4 + [128]) & [1]) ){ goto $label$17 }
	if ( (*($4 + [112]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*($2))
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*($4 + [120]))
	$0 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$0 = [1]
	if ( (*($4) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($4 + [96]) & $0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($4 + [96]) & $0) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*($4 + [104]))
	$0 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$0 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($4 + [16]) & $0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($4 + [88]))
	if ( ((*($4 + [16]) & $0) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [24])))
	$0 = [1]
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$0 = [1]
	if ( (*($4 + [64]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($4 + [48]) & $0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($4 + [72]))
	if ( ((*($4 + [48]) & $0) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [56]))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($4 + [32]) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($4 + [144])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($4 + [40]))
	$global$0 = ($4 + [144])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10131])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $221($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([32]))) = (int_64)0
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [20]) = $0
	*($5 + [8]) = ($5 + [12])
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10154])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $160(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $75(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $224($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $76(($1 + [8]), *(($1 + [12])))
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [11316])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11362])
	$6 = ($1 + [24])
	*(($5 = $4) + [16]) = *($6)
	*($5 + [24]) = (uint_64)*(($1 + [40])) >> (uint_64)(int_64)8)
	*($6) = *(*($3))
	$7 = *($1)
	CALL eosio_assert([1], [11413])
	$3 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [32])
	$8 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [8])
	$9 = (($5 + [16]) + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$10 = *($1 + [48])
	$10 = ( *(($1 + [52])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$3 = ($10 + $3)
	$8 = (CASTING uint_64)(uint_32 $10)
	$10 = ($1 + [48])
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $221($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [32]) = $5
	*($5 + [44]) = $6
	*($5 + [56]) = $10
	*($5 + [40]) = $1
	*($5 + [48]) = ($1 + [24])
	*($5 + [52]) = ($1 + [32])
	CALL $165(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [64]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL $224($4)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [40]) = *(($1 + [24]))
	if ( (CALL $217(($5 + [16]), ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = *($1 + [68])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3665743729458675712, ($5 + [32]), $7)
	*(($1 + [68])) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$7
	*($5 + [40]) = (uint_64)*(($1 + [40])) >> (uint_64)(int_64)8)
	if ( (CALL $217($9, ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [72])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3665743729458675711, ($5 + [32]), $7)
	*($1) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$9
	$global$0 = ($5 + [64])
}

void .FUNC $71 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [39]) = $3
	*($4 + [40]) = $1
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $194(($4 + [8]), $3)
	$3 = CALL $188(($4 + [8]), [0], [9104])
	$5 = ($3 + [8])
	*((($4 + [24]) + [8])) = *($5)
	*($4 + [24]) = *($3)
	*($3) = (int_64)0
	*($5) = [0]
	$3 = CALL $185(($4 + [24]), [9137])
	$6 = ($3 + [8])
	*(($5 = (($4 + [56]) + [8]))) = *($6)
	*($4 + [56]) = *($3)
	*($3) = (int_64)0
	*($6) = [0]
	CALL eosio_assert([0], ( *($5) ? (($4 + [56]) | [1]) : (*($4 + [56]) & [1]) ))
	if ( (*($4 + [56]) & [1]) ){ goto $label$5 }
	if ( (*($4 + [24]) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$1 = *($2)
	$5 = *($0 + [16])
	CALL $194(($4 + [24]), [0])
	$3 = CALL $188(($4 + [24]), [0], [9096])
	$6 = ($3 + [8])
	*((($4 + [56]) + [8])) = *($6)
	*($4 + [56]) = *($3)
	*($3) = (int_64)0
	*($6) = [0]
	CALL $72($0, $1, [0], CALL $16($5, ($4 + [56])))
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($4 + [64]))
	
.LABEL $label$7
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($4 + [32]))
	goto $label$1 
	
.LABEL $label$5
	CALL _ZdlPv(*($5))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [32]))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($4 + [16]))
	
.LABEL $label$1
	$7 = ($0 + [24])
	$1 = *($4 + [40])
	$5 = *(($0 + [52]))
	$6 = *(($0 + [48]))
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$18:
	$3 = ($5 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$17 }
	$5 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$7), [11048])
	if ( $8 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$3 = CALL db_find_i64(*($7), *(($0 + [32])), (int_64)-3778232685332267008, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$14 }
	$8 = CALL $73($7, $3)
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$7), [11048])
	
.LABEL $label$15
	*($4 + [60 align=4]) = (int_64)0
	$9 = (($4 + [56]) | [4])
	*($4 + [56]) = $9
	$11 = ($8 + [12])
	$10 = *($8 + [8])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$9 }
	$12 = [0]
	$13 = (($4 + [56]) + [8])
	if ( ((int_32)$9 != (int_32)$9) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	$1 = *($0)
	*($4 + [12]) = ($4 + [39])
	*($4 + [8]) = ($4 + [40])
	*($4 + [24]) = $1
	CALL eosio_assert(((int_64)*(($0 + [24])) == (int_64)CALL $fimport$7()), [10967])
	*($4 + [56]) = $7
	*($4 + [60]) = ($4 + [8])
	*($4 + [64]) = ($4 + [24])
	*(($3 = CALL _Znwj([32]))) = (int_64)0
	*($3 + [12 align=4]) = (int_64)0
	*($3 + [20]) = $7
	*($3 + [8]) = ($3 + [12])
	CALL $74(($4 + [56]), $3)
	*($4 + [72]) = $3
	$1 = *($3)
	*($4 + [56]) = $1
	$6 = *($3 + [24])
	*($4 + [52]) = $6
	$12 = ($0 + [52])
	$5 = *($12)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [56]))) ){ goto $label$20 }
	*($5 + [8]) = $1
	*($5 + [16]) = $6
	*($4 + [72]) = [0]
	*($5) = $3
	*($12) = ($5 + [24])
	$3 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( $3 ){ goto $label$19 }
	goto $label$10 
	
.LABEL $label$20
	CALL $75(($0 + [48]), ($4 + [72]), ($4 + [56]), ($4 + [52]))
	$3 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	
.LABEL $label$19
	CALL $76(($3 + [8]), *(($3 + [12])))
	CALL _ZdlPv($3)
	$14 = [38]
	goto $label$8 
	
.LABEL $label$13
	$14 = [28]
	goto $label$8 
	
.LABEL $label$12
	$14 = [3]
	goto $label$8 
	
.LABEL $label$11
	$14 = [38]
	goto $label$8 
	
.LABEL $label$10
	$14 = [38]
	goto $label$8 
	
.LABEL $label$9
	$14 = [64]
	
.LABEL $label$8
	
.LOOP $label$21:
	goto $label$122 
	
.LABEL $label$149
	$12 = *($4 + [60])
	$10 = $5
	if ( ((int_32)*($4 + [56]) == (int_32)$9) ){ goto $label$80 }
	$14 = [3]
	goto $label$21 
	
.LABEL $label$148
	$5 = $12
	$6 = $9
	if ( ($12 == 0) ){ goto $label$63 }
	$14 = [4]
	goto $label$21 
	
.LABEL $label$147
	$3 = $5
	$5 = *($3 + [4])
	if ( $5 ){ goto $label$64 }
	goto $label$65 
	
.LABEL $label$146
	$3 = *($6 + [8])
	$5 = ((int_32)*($3) == (int_32)$6)
	$6 = $3
	if ( $5 ){ goto $label$62 }
	$14 = [5]
	goto $label$21 
	
.LABEL $label$145
	$5 = *(($10 + [16]))
	if ( (*($3 + [16]) <= $5) ){ goto $label$79 }
	$14 = [6]
	goto $label$21 
	
.LABEL $label$144
	if ( ($12 == 0) ){ goto $label$61 }
	$14 = [7]
	goto $label$21 
	
.LABEL $label$143
	$6 = $9
	$3 = *($12 + [16])
	if ( ((uint_32)$5 >= (uint_32)$3) ){ goto $label$59 }
	goto $label$60 
	
.LABEL $label$142
	$6 = $12
	$12 = $3
	$3 = *($12 + [16])
	if ( ((uint_32)$5 >= (uint_32)$3) ){ goto $label$76 }
	$14 = [20]
	goto $label$21 
	
.LABEL $label$141
	$3 = *($12)
	if ( $3 ){ goto $label$51 }
	goto $label$52 
	
.LABEL $label$140
	if ( ((uint_32)$3 >= (uint_32)$5) ){ goto $label$58 }
	$14 = [17]
	goto $label$21 
	
.LABEL $label$139
	$6 = ($12 + [4])
	$3 = *($12 + [4])
	if ( ($3 == 0) ){ goto $label$53 }
	$14 = [18]
	goto $label$21 
	
.LABEL $label$138
	$12 = $6
	goto $label$75 
	
.LABEL $label$137
	$3 = $9
	$14 = [24]
	goto $label$21 
	
.LABEL $label$136
	if ( ($12 == 0) ){ goto $label$50 }
	$14 = [25]
	goto $label$21 
	
.LABEL $label$135
	$12 = ($3 + [4])
	if ( (*($12) == 0) ){ goto $label$55 }
	$14 = [10]
	goto $label$21 
	
.LABEL $label$134
	$3 = *($10 + [4])
	if ( $3 ){ goto $label$72 }
	$14 = [11]
	goto $label$21 
	
.LABEL $label$133
	$5 = *($10 + [8])
	if ( ((int_32)*($5) == (int_32)$10) ){ goto $label$69 }
	$14 = [12]
	goto $label$21 
	
.LABEL $label$132
	$6 = ($10 + [8])
	$14 = [13]
	goto $label$21 
	
.LABEL $label$131
	$3 = *($6)
	$6 = ($3 + [8])
	$5 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($5)) ){ goto $label$67 }
	goto $label$68 
	
.LABEL $label$130
	$3 = $9
	$12 = $9
	if ( *($12) ){ goto $label$56 }
	goto $label$57 
	
.LABEL $label$129
	$12 = $9
	$3 = $9
	goto $label$78 
	
.LABEL $label$128
	$3 = $12
	goto $label$77 
	
.LABEL $label$127
	$3 = $12
	$12 = $6
	if ( *($12) ){ goto $label$73 }
	goto $label$74 
	
.LABEL $label$126
	$3 = $12
	$12 = $6
	$14 = [14]
	goto $label$21 
	
.LABEL $label$125
	*(($5 = CALL _Znwj([24])) + [16 align=4]) = *(($10 + [16]))
	*($5) = (int_64)0
	*($5 + [8]) = $3
	*($12) = $5
	$3 = *(*($4 + [56]))
	if ( ($3 == 0) ){ goto $label$54 }
	$14 = [15]
	goto $label$21 
	
.LABEL $label$124
	*($4 + [56]) = $3
	$5 = *($12)
	$14 = [16]
	goto $label$21 
	
.LABEL $label$123
	CALL $77(*($4 + [60]), $5)
	*($13) = (*($13) + [1])
	$3 = *($10 + [4])
	if ( ($3 == 0) ){ goto $label$70 }
	$14 = [0]
	goto $label$21 
	
.LABEL $label$122
	$5 = $3
	$3 = *($5)
	if ( $3 ){ goto $label$71 }
	$14 = [1]
	goto $label$21 
	
.LABEL $label$121
	if ( ((int_32)$5 != (int_32)$11) ){ goto $label$66 }
	$14 = [29]
	goto $label$21 
	
.LABEL $label$120
	$5 = *($4 + [60])
	if ( ($5 == 0) ){ goto $label$49 }
	$14 = [30]
	goto $label$21 
	
.LABEL $label$119
	$11 = *($4 + [39])
	$10 = ($11 & [255])
	$6 = $9
	$3 = $5
	$14 = [31]
	goto $label$21 
	
.LABEL $label$118
	$12 = (*($3 + [16]) <= $10)
	$6 = ( $6 ? $3 : $12 )
	$3 = *(($3 + ($12 << [2])))
	if ( $3 ){ goto $label$48 }
	$14 = [32]
	goto $label$21 
	
.LABEL $label$117
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$47 }
	$14 = [33]
	goto $label$21 
	
.LABEL $label$116
	$12 = ($11 & [255])
	if ( ((uint_32)$12 >= (uint_32)*($6 + [16])) ){ goto $label$46 }
	$14 = [53]
	goto $label$21 
	
.LABEL $label$115
	$3 = *($5 + [16])
	$6 = ($11 & [255])
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$114
	$9 = $5
	$5 = $3
	$3 = *($5 + [16])
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$84 }
	$14 = [62]
	goto $label$21 
	
.LABEL $label$113
	$3 = *($5)
	if ( $3 ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$112
	if ( ((uint_32)$3 >= (uint_32)$6) ){ goto $label$25 }
	$14 = [59]
	goto $label$21 
	
.LABEL $label$111
	$9 = ($5 + [4])
	$3 = *($5 + [4])
	if ( ($3 == 0) ){ goto $label$26 }
	$14 = [60]
	goto $label$21 
	
.LABEL $label$110
	$5 = $9
	goto $label$83 
	
.LABEL $label$109
	$5 = $9
	$14 = [55]
	goto $label$21 
	
.LABEL $label$108
	$6 = [1]
	$3 = *($9)
	if ( $3 ){ goto $label$39 }
	$14 = [56]
	goto $label$21 
	
.LABEL $label$107
	*(($3 = CALL _Znwj([24]))) = (int_64)0
	*($3 + [8]) = $5
	*($9) = $3
	*($3 + [20]) = [0]
	*($3 + [16]) = *($4 + [39])
	$5 = $3
	$6 = *(*($4 + [56]))
	if ( ($6 == 0) ){ goto $label$24 }
	$14 = [57]
	goto $label$21 
	
.LABEL $label$106
	*($4 + [56]) = $6
	$5 = *($9)
	$14 = [58]
	goto $label$21 
	
.LABEL $label$105
	CALL $77(*($4 + [60]), $5)
	$6 = [1]
	*(($5 = ($4 + [64]))) = (*($5) + [1])
	$14 = [37]
	goto $label$21 
	
.LABEL $label$104
	*(($3 + [20])) = $6
	$1 = *($0)
	*($4 + [24]) = ($4 + [56])
	CALL eosio_assert([1], [11281])
	CALL $78($7, $8, $1, ($4 + [24]))
	CALL $76(($4 + [56]), *($4 + [60]))
	goto $label$35 
	
.LABEL $label$103
	$6 = *($0 + [12])
	*(($4 + [64])) = [0]
	*($4 + [56]) = (int_64)0
	$3 = CALL $218([9170])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$34 }
	$14 = [39]
	goto $label$21 
	
.LABEL $label$102
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$33 }
	$14 = [45]
	goto $label$21 
	
.LABEL $label$101
	*($4 + [56]) = ($3 << [1])
	$5 = (($4 + [56]) | [1])
	if ( $3 ){ goto $label$31 }
	goto $label$32 
	
.LABEL $label$100
	$12 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($12)
	*($4 + [56]) = ($12 | [1])
	*($4 + [64]) = $5
	*($4 + [60]) = $3
	$14 = [41]
	goto $label$21 
	
.LABEL $label$99
	CALL memcpy($5, [9170], $3)
	$14 = [42]
	goto $label$21 
	
.LABEL $label$98
	*(($5 + $3)) = [0]
	CALL $13(($4 + [24]), *($2), *($4 + [39]), *($4 + [40]))
	CALL $20($6, ($4 + [56]), ($4 + [24]))
	CALL $21(($4 + [24]), *($4 + [28]))
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$30 }
	$14 = [43]
	goto $label$21 
	
.LABEL $label$97
	CALL _ZdlPv(*($4 + [64]))
	$14 = [44]
	goto $label$21 
	
.LABEL $label$96
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$95
	$6 = (*($6 + [20]) + [1])
	$3 = *($5 + [16])
	if ( ((uint_32)$12 >= (uint_32)$3) ){ goto $label$44 }
	goto $label$45 
	
.LABEL $label$94
	$5 = $3
	$3 = *($5 + [16])
	if ( ((uint_32)$12 >= (uint_32)$3) ){ goto $label$82 }
	$14 = [52]
	goto $label$21 
	
.LABEL $label$93
	$9 = $5
	$3 = *($5)
	if ( $3 ){ goto $label$41 }
	goto $label$42 
	
.LABEL $label$92
	if ( ((uint_32)$3 >= (uint_32)$12) ){ goto $label$43 }
	$14 = [50]
	goto $label$21 
	
.LABEL $label$91
	$9 = ($5 + [4])
	$3 = *($5 + [4])
	if ( $3 ){ goto $label$81 }
	$14 = [36]
	goto $label$21 
	
.LABEL $label$90
	$3 = *($9)
	if ( $3 ){ goto $label$38 }
	$14 = [47]
	goto $label$21 
	
.LABEL $label$89
	*(($3 = CALL _Znwj([24]))) = (int_64)0
	*($3 + [8]) = $5
	*($9) = $3
	*($3 + [20]) = [0]
	*($3 + [16]) = *($4 + [39])
	$5 = $3
	$12 = *(*($4 + [56]))
	if ( ($12 == 0) ){ goto $label$29 }
	$14 = [48]
	goto $label$21 
	
.LABEL $label$88
	*($4 + [56]) = $12
	$5 = *($9)
	$14 = [49]
	goto $label$21 
	
.LABEL $label$87
	CALL $77(*($4 + [60]), $5)
	*(($5 = ($4 + [64]))) = (*($5) + [1])
	goto $label$40 
	
.LABEL $label$86
	$6 = [1]
	$9 = $5
	$3 = *($9)
	if ( $3 ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$85
	CALL $178(($4 + [56]))
	
.LABEL $label$84
	$14 = [54]
	goto $label$21 
	
.LABEL $label$83
	$14 = [61]
	goto $label$21 
	
.LABEL $label$82
	$14 = [35]
	goto $label$21 
	
.LABEL $label$81
	$14 = [51]
	goto $label$21 
	
.LABEL $label$80
	$14 = [28]
	goto $label$21 
	
.LABEL $label$79
	$14 = [24]
	goto $label$21 
	
.LABEL $label$78
	$14 = [14]
	goto $label$21 
	
.LABEL $label$77
	$14 = [14]
	goto $label$21 
	
.LABEL $label$76
	$14 = [8]
	goto $label$21 
	
.LABEL $label$75
	$14 = [19]
	goto $label$21 
	
.LABEL $label$74
	$14 = [14]
	goto $label$21 
	
.LABEL $label$73
	$14 = [10]
	goto $label$21 
	
.LABEL $label$72
	$14 = [0]
	goto $label$21 
	
.LABEL $label$71
	$14 = [0]
	goto $label$21 
	
.LABEL $label$70
	$14 = [11]
	goto $label$21 
	
.LABEL $label$69
	$14 = [1]
	goto $label$21 
	
.LABEL $label$68
	$14 = [1]
	goto $label$21 
	
.LABEL $label$67
	$14 = [13]
	goto $label$21 
	
.LABEL $label$66
	$14 = [2]
	goto $label$21 
	
.LABEL $label$65
	$14 = [5]
	goto $label$21 
	
.LABEL $label$64
	$14 = [4]
	goto $label$21 
	
.LABEL $label$63
	$14 = [27]
	goto $label$21 
	
.LABEL $label$62
	$14 = [27]
	goto $label$21 
	
.LABEL $label$61
	$14 = [23]
	goto $label$21 
	
.LABEL $label$60
	$14 = [20]
	goto $label$21 
	
.LABEL $label$59
	$14 = [8]
	goto $label$21 
	
.LABEL $label$58
	$14 = [9]
	goto $label$21 
	
.LABEL $label$57
	$14 = [14]
	goto $label$21 
	
.LABEL $label$56
	$14 = [10]
	goto $label$21 
	
.LABEL $label$55
	$14 = [14]
	goto $label$21 
	
.LABEL $label$54
	$14 = [16]
	goto $label$21 
	
.LABEL $label$53
	$14 = [22]
	goto $label$21 
	
.LABEL $label$52
	$14 = [21]
	goto $label$21 
	
.LABEL $label$51
	$14 = [19]
	goto $label$21 
	
.LABEL $label$50
	$14 = [26]
	goto $label$21 
	
.LABEL $label$49
	$14 = [64]
	goto $label$21 
	
.LABEL $label$48
	$14 = [31]
	goto $label$21 
	
.LABEL $label$47
	$14 = [53]
	goto $label$21 
	
.LABEL $label$46
	$14 = [34]
	goto $label$21 
	
.LABEL $label$45
	$14 = [52]
	goto $label$21 
	
.LABEL $label$44
	$14 = [35]
	goto $label$21 
	
.LABEL $label$43
	$14 = [36]
	goto $label$21 
	
.LABEL $label$42
	$14 = [36]
	goto $label$21 
	
.LABEL $label$41
	$14 = [51]
	goto $label$21 
	
.LABEL $label$40
	$14 = [37]
	goto $label$21 
	
.LABEL $label$39
	$14 = [37]
	goto $label$21 
	
.LABEL $label$38
	$14 = [37]
	goto $label$21 
	
.LABEL $label$37
	$14 = [56]
	goto $label$21 
	
.LABEL $label$36
	$14 = [37]
	goto $label$21 
	
.LABEL $label$35
	$14 = [38]
	goto $label$21 
	
.LABEL $label$34
	$14 = [46]
	goto $label$21 
	
.LABEL $label$33
	$14 = [40]
	goto $label$21 
	
.LABEL $label$32
	$14 = [42]
	goto $label$21 
	
.LABEL $label$31
	$14 = [41]
	goto $label$21 
	
.LABEL $label$30
	$14 = [44]
	goto $label$21 
	
.LABEL $label$29
	$14 = [49]
	goto $label$21 
	
.LABEL $label$28
	$14 = [62]
	goto $label$21 
	
.LABEL $label$27
	$14 = [54]
	goto $label$21 
	
.LABEL $label$26
	$14 = [55]
	goto $label$21 
	
.LABEL $label$25
	$14 = [55]
	goto $label$21 
	
.LABEL $label$24
	$14 = [58]
	goto $label$21 
	
.LABEL $label$23
	$14 = [63]
	goto $label$21 
	
.LABEL $label$22
	$14 = [61]
	goto $label$21 
	$14
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $76($0, *($1))
	CALL $76($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	*(($5 = $2)) = *(*($3 + [4]))
	*($5 + [4]) = [1]
	$6 = [8]
	CALL $161(($1 + [8]), $5, ($5 + [8]))
	$7 = *(($1 + [16]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$9 = ($1 + [12])
	$8 = *($1 + [8])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$3:
	$10 = $8
	$3 = *($10 + [4])
	if ( ($3 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$8 = $3
	$3 = *($8)
	if ( $3 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$8 = *($10 + [8])
	if ( ((int_32)*($8) == (int_32)$10) ){ goto $label$4 }
	$10 = ($10 + [8])
	
.LOOP $label$7:
	$3 = *($10)
	$10 = ($3 + [8])
	$8 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($8)) ){ goto $label$7 }
	
.LABEL $label$4
	$6 = ($6 + [5])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$9 }
	$3 = CALL $221($6)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$8
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [10212])
	CALL memcpy($3, $1, [8])
	*($5 + [4]) = ($3 + [8])
	CALL $162($5, ($1 + [8]))
	$7 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($4 + [8]), (int_64)-3778232685332267008, *(*($0 + [8])), $7, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $224($3)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$10 }
	
.LABEL $label$11
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$10
	$global$0 = ($5 + [16])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $76(($1 + [8]), *(($1 + [12])))
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [11316])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11362])
	$6 = [8]
	$7 = *($1)
	$8 = $7
	$3 = *($3)
	$9 = ($1 + [8])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$1 }
	CALL $163($9, *($3), ($3 + [4]))
	$8 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)$8), [11413])
	$8 = *(($1 + [16]))
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	$11 = ($1 + [12])
	$10 = *($1 + [8])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$3 }
	
.LOOP $label$4:
	$12 = $10
	$3 = *($12 + [4])
	if ( ($3 == 0) ){ goto $label$6 }
	
.LOOP $label$7:
	$10 = $3
	$3 = *($10)
	if ( $3 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$10 = *($12 + [8])
	if ( ((int_32)*($10) == (int_32)$12) ){ goto $label$5 }
	$12 = ($12 + [8])
	
.LOOP $label$8:
	$3 = *($12)
	$12 = ($3 + [8])
	$10 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($10)) ){ goto $label$8 }
	
.LABEL $label$5
	$6 = ($6 + [5])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($6 <= [513]) ){ goto $label$10 }
	$3 = CALL $221($6)
	goto $label$9 
	
.LABEL $label$10
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$9
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [10212])
	CALL memcpy($3, $1, [8])
	*($5 + [4]) = ($3 + [8])
	CALL $162($5, $9)
	CALL db_update_i64(*($1 + [24]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$13 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $224($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$11 }
	
.LABEL $label$12
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$11
	$global$0 = ($5 + [16])
}

void .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = *(($0 + [32]))
	*($1 + [16]) = [0]
	*($1 + [8]) = (int_64)0
	$3 = CALL db_lowerbound_i64(*($0 + [24]), $2, (int_64)-3778232685332267008, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = ($0 + [24])
	$3 = CALL $73($4, $3)
	$5 = (($1 + [8]) + [8])
	$6 = [0]
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$3 }
	$7 = [3]
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	$7 = [18]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$39 
	
.LABEL $label$40
	$3 = CALL $73($4, $3)
	$6 = *($1 + [12])
	if ( ((int_32)$6 == (int_32)*($5)) ){ goto $label$19 }
	$7 = [0]
	goto $label$4 
	
.LABEL $label$39
	*($6) = *($3)
	*($1 + [12]) = ($6 + [8])
	goto $label$18 
	
.LABEL $label$38
	CALL $48(($1 + [8]), $3)
	$7 = [1]
	goto $label$4 
	
.LABEL $label$37
	CALL eosio_assert([1], [11018])
	$3 = CALL db_next_i64(*($3 + [24]), ($1 + [24]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$17 }
	$7 = [4]
	goto $label$4 
	
.LABEL $label$36
	$9 = *($1 + [12])
	$8 = *($1 + [8])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$16 }
	$7 = [5]
	goto $label$4 
	
.LABEL $label$35
	$10 = ($0 + [52])
	$11 = ($0 + [48])
	$12 = ($0 + [32])
	$13 = ($0 + [24])
	$7 = [6]
	goto $label$4 
	
.LABEL $label$34
	$2 = *($8)
	$6 = *($10)
	$0 = *($11)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$12 }
	$7 = [7]
	goto $label$4 
	
.LABEL $label$33
	$3 = ($6 + [-24])
	$5 = *($3)
	if ( ((int_64)*($5) == (int_64)$2) ){ goto $label$11 }
	$7 = [8]
	goto $label$4 
	
.LABEL $label$32
	$6 = $3
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$31
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$10 }
	$7 = [20]
	goto $label$4 
	
.LABEL $label$30
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$4), [11048])
	if ( $5 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$29
	$3 = CALL db_find_i64(*($13), *($12), (int_64)-3778232685332267008, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$7 = [10]
	goto $label$4 
	
.LABEL $label$28
	$5 = CALL $73($4, $3)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$4), [11048])
	$7 = [11]
	goto $label$4 
	
.LABEL $label$27
	CALL eosio_assert([1], [11099])
	CALL eosio_assert([1], [11018])
	$3 = CALL db_next_i64(*($5 + [24]), ($1 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$7 = [12]
	goto $label$4 
	
.LABEL $label$26
	CALL $73($4, $3)
	$7 = [13]
	goto $label$4 
	
.LABEL $label$25
	CALL $80($4, $5)
	$7 = [14]
	goto $label$4 
	
.LABEL $label$24
	$8 = ($8 + [8])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$15 }
	$7 = [15]
	goto $label$4 
	
.LABEL $label$23
	$9 = *($1 + [8])
	$7 = [16]
	goto $label$4 
	
.LABEL $label$22
	if ( ($9 == 0) ){ goto $label$5 }
	$7 = [17]
	goto $label$4 
	
.LABEL $label$21
	*($1 + [12]) = $9
	CALL _ZdlPv($9)
	$7 = [18]
	goto $label$4 
	
.LABEL $label$20
	$global$0 = ($1 + [32])
	return 
	
.LABEL $label$19
	$7 = [3]
	goto $label$4 
	
.LABEL $label$18
	$7 = [1]
	goto $label$4 
	
.LABEL $label$17
	$7 = [2]
	goto $label$4 
	
.LABEL $label$16
	$7 = [16]
	goto $label$4 
	
.LABEL $label$15
	$7 = [6]
	goto $label$4 
	
.LABEL $label$14
	$7 = [9]
	goto $label$4 
	
.LABEL $label$13
	$7 = [7]
	goto $label$4 
	
.LABEL $label$12
	$7 = [9]
	goto $label$4 
	
.LABEL $label$11
	$7 = [19]
	goto $label$4 
	
.LABEL $label$10
	$7 = [9]
	goto $label$4 
	
.LABEL $label$9
	$7 = [14]
	goto $label$4 
	
.LABEL $label$8
	$7 = [14]
	goto $label$4 
	
.LABEL $label$7
	$7 = [11]
	goto $label$4 
	
.LABEL $label$6
	$7 = [13]
	goto $label$4 
	
.LABEL $label$5
	$7 = [18]
	goto $label$4 
	$7
}

int_32 .FUNC $223 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11564]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11568])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11564]) = [1]
	$2 = ($2 << [16])
	*([0] + [11568]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11568])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11568]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11564]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11564]) = [1]
	$3 = ($3 << [16])
	*([0] + [11568]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11568])
	
.LABEL $label$10
	*([0] + [11568]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10131])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $221($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10154])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [10154])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $100(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $224($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $94 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$6 = ($global$0 - [176])
	$global$0 = $6
	CALL eosio_assert(CALL $fimport$17($1), [9325])
	$7 = [0]
	$8 = *($2 + [8])
	$9 = (uint_64)$8 >> (uint_64)(int_64)8
	$10 = $9)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$10 = $11
	$12 = [1]
	$13 = $7
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$10 = $11
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = ((int_32)$7 < (int_32)[6])
	$13 = ($7 + [1])
	$7 = $13
	if ( $12 ){ goto $label$5 }
	$12 = [1]
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$12 = [0]
	
.LABEL $label$1
	CALL eosio_assert($12, [9272])
	CALL eosio_assert((((CASTING uint_32)(uint_64 $8) & [255]) == 0), [9351])
	$7 = *($5)
	if ( ($7 & [1]) ){ goto $label$7 }
	$7 = uint_32($7 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$7 = *($5 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($7 <= [257]), [9383])
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$9 }
	$7 = uint_32($7 >> [1])
	goto $label$8 
	
.LABEL $label$9
	$7 = *($4 + [4])
	
.LABEL $label$8
	CALL eosio_assert(($7 <= [33]), [9412])
	$12 = [0]
	*(($6 + [168])) = [0]
	*($6 + [152]) = (int_64)-1
	*($6 + [160]) = (int_64)0
	*($6 + [172]) = [0]
	$10 = *($0)
	*($6 + [136]) = $10
	*($6 + [144]) = $9
	$14 = [0]
	$7 = CALL db_find_i64($10, $9, (int_64)-4157508551318700032, $9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	$14 = CALL $92(($6 + [136]), $7)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)($6 + [136])), [11048])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [9440])
	CALL require_auth(*($14 + [16]))
	$11 = *($2)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$11 }
	$7 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$9 = $10
	$12 = [1]
	$13 = $7
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$9 = $10
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$12 = ((int_32)$7 < (int_32)[6])
	$13 = ($7 + [1])
	$7 = $13
	if ( $12 ){ goto $label$15 }
	$12 = [1]
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$12 = [0]
	
.LABEL $label$11
	CALL eosio_assert($12, [9500])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [9517])
	CALL eosio_assert(((int_64)$8 == (int_64)*($14 + [8])), [9553])
	$15 = ($2 + [8])
	$9 = *($15)
	*((($6 + [120]) + [8])) = $9
	$10 = *($2)
	*((($6 + [40]) + [8])) = $9
	*($6 + [40]) = $10
	*($6 + [120]) = $10
	CALL $95($0, ($6 + [40]))
	CALL eosio_assert(((int_64)$11 == (int_64)(CASTING uint_64)(uint_32 ((int_32)(*($3 + [4]) - *($3)) / (int_32)[12]))), [9579])
	$16 = *($3 + [4])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$16) ){ goto $label$16 }
	$17 = ($14 + [16])
	$3 = (($6 + [104]) + [8])
	
.LOOP $label$17:
	$11 = *($17)
	*($3) = $8
	*($6 + [104]) = (int_64)1
	CALL eosio_assert([1], [10163])
	$10 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$10 = $9
	$12 = [1]
	$13 = $7
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$10 = $9
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = ((int_32)$7 < (int_32)[6])
	$13 = ($7 + [1])
	$7 = $13
	if ( $12 ){ goto $label$22 }
	$12 = [1]
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$12 = [0]
	
.LABEL $label$18
	CALL eosio_assert($12, [9272])
	$7 = CALL $179(($6 + [88]), $5)
	$12 = CALL $179(($6 + [72]), $4)
	*((($6 + [24]) + [8])) = *($3)
	*($6 + [24]) = *($6 + [104])
	CALL $96($0, $1, $11, ($6 + [24]), $7, $12)
	if ( (*($6 + [72]) & [1]) ){ goto $label$25 }
	if ( (*($6 + [88]) & [1]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*((($6 + [72]) + [8])))
	if ( ((*($6 + [88]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*((($6 + [88]) + [8])))
	$5 = ($5 + [12])
	if ( ((int_32)$5 != (int_32)$16) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$23
	$5 = ($5 + [12])
	if ( ((int_32)$5 != (int_32)$16) ){ goto $label$17 }
	
.LABEL $label$16
	$10 = *($15)
	*((($6 + [56]) + [8])) = $10
	$9 = *($2)
	*($6 + [56]) = $9
	$11 = *(($14 + [16]))
	*((($6 + [8]) + [8])) = $10
	*($6 + [8]) = $9
	CALL $69($0, $1, ($6 + [8]), $11)
	$13 = *($6 + [160])
	if ( ($13 == 0) ){ goto $label$26 }
	$5 = ($6 + [164])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$13) ){ goto $label$28 }
	
.LOOP $label$29:
	$7 = ($7 + [-24])
	$12 = *($7)
	*($7) = [0]
	if ( ($12 == 0) ){ goto $label$30 }
	CALL _ZdlPv($12)
	
.LABEL $label$30
	if ( ((int_32)$13 != (int_32)$7) ){ goto $label$29 }
	$7 = *(($6 + [160]))
	goto $label$27 
	
.LABEL $label$28
	$7 = $13
	
.LABEL $label$27
	*($5) = $13
	CALL _ZdlPv($7)
	
.LABEL $label$26
	$global$0 = ($6 + [176])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($1 + [8])
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [44]) = [0]
	$4 = *($0)
	*($2 + [8]) = $4
	$5 = (uint_64)$3 >> (uint_64)(int_64)8
	*($2 + [16]) = $5)
	$0 = [0]
	$6 = CALL db_find_i64($4, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $92(($2 + [8]), $6)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)($2 + [8])), [11048])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [11281])
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)($2 + [8])), [11316])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$7()), [11362])
	$6 = ($0 + [16])
	*($2 + [72]) = *($6)
	$5 = *($0 + [8])
	CALL eosio_assert(((int_64)$3 == (int_64)$5), [11472])
	$3 = ((int_64)*($0) + (int_64)*($1))
	*($0) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [11515])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [11534])
	$3 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$3) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [11413])
	CALL eosio_assert([1], [10212])
	CALL memcpy(($2 + [48]), $0, [8])
	*($2 + [88]) = *($0 + [8])
	CALL eosio_assert([1], [10212])
	CALL memcpy((($2 + [48]) | [8]), ($2 + [88]), [8])
	CALL eosio_assert([1], [10212])
	CALL memcpy((($2 + [48]) + [16]), $6, [8])
	CALL db_update_i64(*($0 + [28]), (int_64)0, ($2 + [48]), [24])
	$1 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($1)) ){ goto $label$2 }
	*($1) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$2
	*($2 + [88]) = *($6)
	if ( (CALL $217(($2 + [72]), ($2 + [88]), [8]) == 0) ){ goto $label$3 }
	$1 = ($0 + [32])
	$0 = *($1)
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($2 + [8]), *(($2 + [16])), (int_64)-4157508551318700032, ($2 + [80]), $3)
	*($1) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, (int_64)0, ($2 + [88]))
	
.LABEL $label$3
	$6 = *($2 + [32])
	if ( ($6 == 0) ){ goto $label$5 }
	$7 = ($2 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($2 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $6
	
.LABEL $label$6
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$global$0 = ($2 + [96])
}

void .FUNC $96 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	$6 = ($global$0 - [80])
	$global$0 = $6
	*($6 + [32]) = $1
	*($6 + [12]) = $4
	*($6 + [8]) = $0
	*($6 + [20]) = $3
	*($6 + [24]) = $5
	*($6 + [16]) = ($6 + [32])
	*($6 + [72]) = $2
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)CALL $fimport$7()), [10967])
	$3 = ($0 + [8])
	*($6 + [48]) = $3
	*($6 + [52]) = ($6 + [8])
	*($6 + [56]) = ($6 + [72])
	*(($5 = CALL _Znwj([80])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56]) = [0]
	*($5 + [60]) = $3
	CALL $97(($6 + [48]), $5)
	*($6 + [64]) = $5
	$2 = *($5)
	*($6 + [48]) = $2
	$4 = *($5 + [64])
	*($6 + [44]) = $4
	$7 = ($0 + [36])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [40]))) ){ goto $label$3 }
	*($3 + [8]) = $2
	*($3 + [16]) = $4
	*($6 + [64]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	$5 = *($6 + [64])
	*($6 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $98(($0 + [32]), ($6 + [64]), ($6 + [48]), ($6 + [44]))
	$5 = *($6 + [64])
	*($6 + [64]) = [0]
	if ( $5 ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($6 + [80])
	return 
	
.LABEL $label$1
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$4
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($5)
	$global$0 = ($6 + [80])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [24])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [8])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [16])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $25($9, $10)
	*($3 + [28]) = [0]
	*($3 + [24]) = $9
	$8 = *(*(CALL $26(($3 + [24])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [24])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9977])
	*($1) = *($7)
	$6 = ($1 + [8])
	CALL $180($6, *($5 + [4]))
	*($1 + [24]) = *(*($5 + [8]))
	$7 = *($5 + [12])
	*(($1 + [40])) = *(($7 + [8]))
	*($1 + [32]) = *($7)
	$7 = ($1 + [48])
	CALL $180($7, *($5 + [16]))
	$5 = *($1 + [8])
	$9 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($9 + [32])
	$8 = (CASTING uint_64)(uint_32 $9)
	$9 = ($1 + [32])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$10 = *(($1 + [48]))
	$10 = ( *(($1 + [52])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$5 = ($10 + $5)
	$8 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ($5 <= [513]) ){ goto $label$6 }
	$2 = CALL $221($5)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [24])
	*($3 + [36]) = $9
	*($3 + [40]) = $7
	CALL $165(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($4 + [8]), (int_64)-3665743729458675712, *(*($0 + [8])), $8, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL $224($2)
	
.LABEL $label$7
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$8 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$5 = ($4 + [8])
	$8 = *($5)
	$2 = *(($0 + [8]))
	$11 = *($2)
	$12 = *($1)
	*($3 + [24]) = *(($1 + [24]))
	*($1 + [68]) = CALL db_idx64_store($8, (int_64)-3665743729458675712, $11, $12, ($3 + [24]))
	$8 = *($2)
	$11 = *($5)
	$12 = *($1)
	*($3 + [24]) = (uint_64)*(($1 + [40])) >> (uint_64)(int_64)8)
	*(($1 + [72])) = CALL db_idx64_store($11, (int_64)-3665743729458675711, $8, $12, ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [11133])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11178])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11228])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $91 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$17($1), [9242])
	if ( (*($2) & [1]) ){ goto $label$5 }
	$4 = ($2 + [1])
	$2 = CALL $218($4)
	if ( ((uint_32)$2 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($2 + [8])
	$2 = CALL $218($4)
	if ( ($2 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [10368])
	goto $label$2 
	
.LABEL $label$3
	if ( $2 ){ goto $label$2 }
	$5 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LOOP $label$6:
	$6 = (($4 + $2) + [-1])
	$7 = *($6)
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [10413])
	$7 = *($6)
	
.LABEL $label$7
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	
.LABEL $label$1
	CALL eosio_assert([1], [10163])
	$8 = ((int_64)$5 << (int_64)8)
	$2 = [0]
	$9 = ((int_64)$5 & (int_64)72057594037927935)
	$5 = $9
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$5 = $10
	$7 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$5 = $10
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $7 ){ goto $label$12 }
	$7 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [9272])
	$2 = [0]
	$5 = $9
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$5 = $10
	$7 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$5 = $10
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $7 ){ goto $label$17 }
	$7 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$7 = [0]
	
.LABEL $label$13
	CALL eosio_assert($7, [9272])
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	*($3 + [36]) = [0]
	$5 = *($0)
	*($3) = $5
	*($3 + [8]) = $9
	$2 = [1]
	$7 = CALL db_find_i64($5, $9, (int_64)-4157508551318700032, $9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*(CALL $92($3, $7) + [24]) == (int_32)$3), [11048])
	$2 = [0]
	
.LABEL $label$18
	CALL eosio_assert($2, [9292])
	$5 = *($0)
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$7()), [10967])
	*(($2 = CALL _Znwj([40])) + [24]) = $3
	*($2 + [8]) = $8
	*($2) = (int_64)0
	*($2 + [16]) = $1
	CALL eosio_assert([1], [10212])
	CALL memcpy(($3 + [48]), $2, [8])
	*($3 + [72]) = *($2 + [8])
	CALL eosio_assert([1], [10212])
	CALL memcpy((($3 + [48]) | [8]), ($3 + [72]), [8])
	CALL eosio_assert([1], [10212])
	$7 = ($2 + [16])
	CALL memcpy((($3 + [48]) + [16]), $7, [8])
	$10 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$6 = ($3 + [8])
	*($2 + [28]) = CALL db_store_i64(*($6), (int_64)-4157508551318700032, $5, $10), ($3 + [48]), [24])
	$4 = ($3 + [16])
	if ( (uint_64)($10 <= *($4)) ){ goto $label$19 }
	*($4) = ((int_64)$10 + (int_64)1)
	
.LABEL $label$19
	$4 = ($2 + [8])
	$10 = *($4)
	$9 = *($6)
	*($3 + [72]) = *($7)
	*($2 + [32]) = CALL db_idx64_store($9, (int_64)-4157508551318700032, $5, (uint_64)$10 >> (uint_64)(int_64)8), ($3 + [72]))
	*($3 + [72]) = $2
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8
	*($3 + [48]) = $5)
	$6 = *(($2 + [28]))
	*($3 + [44]) = $6
	$4 = ($3 + [28])
	$7 = *($4)
	if ( ((uint_32)$7 >= (uint_32)*(($3 + [32]))) ){ goto $label$22 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($3 + [72]) = [0]
	*($7) = $2
	*($4) = ($7 + [24])
	$2 = *($3 + [72])
	*($3 + [72]) = [0]
	if ( $2 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL $93(($3 + [24]), ($3 + [72]), ($3 + [48]), ($3 + [44]))
	$2 = *($3 + [72])
	*($3 + [72]) = [0]
	if ( ($2 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv($2)
	
.LABEL $label$20
	$6 = *($3 + [24])
	if ( ($6 == 0) ){ goto $label$23 }
	$4 = ($3 + [28])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$25 }
	
.LOOP $label$26:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$27 }
	CALL _ZdlPv($7)
	
.LABEL $label$27
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$26 }
	$2 = *(($3 + [24]))
	goto $label$24 
	
.LABEL $label$25
	$2 = $6
	
.LABEL $label$24
	*($4) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$23
	$global$0 = ($3 + [80])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10131])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $221($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10154])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [10154])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	*($5 + [8]) = *($3 + [24])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [10154])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [32]) = [-1]
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [24]) = $7)
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $93(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $224($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10154])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $167(*($1), ($0 + [24]))
	CALL $135(*($1), ($0 + [36]))
	CALL $135(*($1), ($0 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = (($2 + [64]) + [8]))) = *(($1 + [16]))
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = [0]
	*($2 + [64]) = *($1 + [8])
	$4 = (*(($1 + [28])) - *($1 + [24]))
	$5 = ((int_32)$4 / (int_32)[12])
	$6 = *($1)
	if ( ($4 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$6 }
	$4 = CALL _Znwj($4)
	*(($2 + [56])) = ($4 + ((int_32)$5 * (int_32)[12]))
	*($2 + [48]) = $4
	*($2 + [52]) = $4
	$7 = *(($1 + [28]))
	$5 = *(($1 + [24]))
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$8 = CALL $179($4, $5)
	$4 = ($4 + [12])
	$5 = ($5 + [12])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$8 }
	*($2 + [52]) = ($8 + [12])
	
.LABEL $label$7
	$4 = CALL $179(($2 + [32]), ($1 + [36]))
	$5 = CALL $179(($2 + [16]), ($1 + [48]))
	*(($2 + [8])) = *($3)
	*($2) = *($2 + [64])
	CALL $169($0, $6, $2, ($2 + [48]), $4, $5)
	if ( (*($5) & [1]) ){ goto $label$10 }
	if ( (*($4) & [1]) ){ goto $label$9 }
	goto $label$5 
	
.LABEL $label$10
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$9
	CALL _ZdlPv(*($4 + [8]))
	$7 = *($2 + [48])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	CALL $201(($2 + [48]))
	
.LABEL $label$5
	$7 = *($2 + [48])
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = *($2 + [52])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$11:
	$4 = ($5 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$12
	$5 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$11 }
	$4 = *($2 + [48])
	goto $label$1 
	
.LABEL $label$3
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$2
	$4 = $7
	
.LABEL $label$1
	*($2 + [52]) = $7
	CALL _ZdlPv($4)
	$global$0 = ($2 + [80])
	(unreachable)
}

int_32 .FUNC $130 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [608])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $221($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [44])) = $2
	*(($4 + [48])) = ($2 + $7)
	*(($4 + [64])) = $0
	*(($4 + [72])) = $0
	*(($4 + [80])) = (int_64)-1
	*(($4 + [88])) = (int_64)0
	*(($4 + [96])) = [0]
	*(($4 + [100])) = [0]
	$8 = ($4 + [56])
	*(($4 + [112])) = $8
	*(($4 + [116])) = ($4 + [144])
	*(($4 + [120])) = ($4 + [200])
	*(($4 + [124])) = ($4 + [256])
	$3 = ($4 + [304])
	*(($4 + [128])) = $3
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*($4 + [56]) = $0
	*($4 + [104]) = $0
	$9 = ($4 + [528])
	*(($4 + [136])) = $9
	$10 = ($4 + [416])
	*(($4 + [132])) = $10
	*(($4 + [152])) = $0
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [192])) = $8
	*(($4 + [196])) = $3
	*(($4 + [208])) = $0
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [248])) = $8
	*($4 + [144]) = $0
	*($4 + [200]) = $0
	*(($4 + [252])) = $3
	*(($4 + [264])) = $0
	*(($4 + [272])) = $0
	*(($4 + [280])) = (int_64)-1
	*(($4 + [288])) = (int_64)0
	*(($4 + [296])) = [0]
	*(($4 + [312])) = $0
	*(($4 + [320])) = $0
	*(($4 + [328])) = (int_64)-1
	*(($4 + [336])) = (int_64)0
	*(($4 + [344])) = [0]
	*(($4 + [360])) = $8
	*(($4 + [364])) = $3
	*(($4 + [368])) = $0
	*($4 + [256]) = $0
	*($4 + [304]) = $0
	*($4 + [352]) = $0
	*(($4 + [384])) = (int_64)-1
	*(($4 + [376])) = $0
	*(($4 + [392])) = (int_64)0
	*(($4 + [400])) = [0]
	*(($4 + [404])) = [0]
	*(($4 + [408])) = [1028443341]
	*($4 + [592]) = [10466]
	*($4 + [416]) = $0
	*($4 + [596]) = CALL $218([10466])
	*($4 + [16]) = *($4 + [592])
	$8 = CALL $106(($4 + [600]), ($4 + [16]))
	*($4 + [576]) = [10466]
	*($4 + [580]) = CALL $218([10466])
	*($4 + [8]) = *($4 + [576])
	CALL $106(($4 + [584]), ($4 + [8]))
	*(($4 + [432])) = (int_64)6291761009422611040
	*(($4 + [440])) = (int_64)-1
	*(($4 + [448])) = (int_64)0
	*(($4 + [456])) = [0]
	*(($4 + [424])) = *($8)
	*(($4 + [472])) = $10
	*(($4 + [476])) = $3
	*(($4 + [480])) = $9
	*(($4 + [504])) = (int_64)-1
	*(($4 + [512])) = (int_64)0
	*(($4 + [520])) = [0]
	*(($4 + [552])) = (int_64)-1
	*(($4 + [560])) = (int_64)0
	*(($4 + [568])) = [0]
	$0 = *($4 + [24])
	*(($4 + [488])) = $0
	*(($4 + [496])) = $0
	*(($4 + [536])) = $0
	*(($4 + [544])) = $0
	*($4 + [464]) = $0
	*($4 + [528]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $224($2)
	
.LABEL $label$5
	CALL $134(($4 + [24]))
	$global$0 = ($4 + [608])
	return [1]
}

int_32 .FUNC $131 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [752])
	$global$0 = $3
	*(($4 = $3) + [672]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $221($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [624])) = (int_64)0
	*((($4 + [608]) + [32])) = (int_64)0
	*((($4 + [608]) + [40])) = (int_64)0
	*((($4 + [608]) + [56])) = [0]
	*($4 + [616]) = (int_64)0
	*($4 + [608]) = (int_64)0
	*($4 + [632]) = (int_64)0
	*($4 + [656]) = (int_64)0
	*($4 + [596]) = $2
	*($4 + [592]) = $2
	*($4 + [600]) = ($2 + $5)
	*($4 + [712]) = ($4 + [592])
	*($4 + [40]) = ($4 + [608])
	CALL $138(($4 + [40]), ($4 + [712]))
	*(($3 = (($4 + [24]) + [8]))) = *($4 + [600])
	*($4 + [24]) = *($4 + [592])
	$3 = *($3)
	*((($4 + [680]) + [8])) = $3
	*(($6 = (($4 + [696]) + [8]))) = $3
	$7 = *($4 + [24])
	*($4 + [696]) = $7
	*($4 + [680]) = $7
	$3 = *($6)
	*((($4 + [712]) + [8])) = $3
	*(($4 + [64])) = $3
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$1 = *($4 + [696])
	*($4 + [56]) = $1
	*($4 + [712]) = $1
	*((($4 + [40]) + [40])) = $0
	*(($4 + [88])) = $0
	*((($4 + [40]) + [56])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	$6 = (($4 + [40]) + [32])
	*(($4 + [128])) = $6
	*(($4 + [132])) = ($4 + [160])
	*(($4 + [136])) = ($4 + [216])
	*(($4 + [140])) = ($4 + [272])
	$3 = ($4 + [320])
	*(($4 + [144])) = $3
	$8 = ($4 + [432])
	*(($4 + [148])) = $8
	$9 = ($4 + [544])
	*(($4 + [152])) = $9
	*(($4 + [168])) = $0
	*(($4 + [176])) = $0
	*($4 + [72]) = $0
	*($4 + [120]) = $0
	*($4 + [160]) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [208])) = $6
	*(($4 + [212])) = $3
	*(($4 + [224])) = $0
	*(($4 + [232])) = $0
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = [0]
	*(($4 + [264])) = $6
	*(($4 + [268])) = $3
	*(($4 + [280])) = $0
	*(($4 + [288])) = $0
	*(($4 + [296])) = (int_64)-1
	*($4 + [216]) = $0
	*($4 + [272]) = $0
	*(($4 + [312])) = [0]
	*(($4 + [304])) = (int_64)0
	*(($4 + [328])) = $0
	*(($4 + [336])) = $0
	*(($4 + [344])) = (int_64)-1
	*(($4 + [352])) = (int_64)0
	*(($4 + [360])) = [0]
	*(($4 + [376])) = $6
	*(($4 + [380])) = $3
	*(($4 + [384])) = $0
	*(($4 + [392])) = $0
	*(($4 + [400])) = (int_64)-1
	*(($4 + [408])) = (int_64)0
	*(($4 + [416])) = [0]
	*(($4 + [420])) = [0]
	*($4 + [320]) = $0
	*($4 + [368]) = $0
	*(($4 + [424])) = [1028443341]
	*($4 + [744]) = [10466]
	*($4 + [432]) = $0
	*($4 + [748]) = CALL $218([10466])
	*($4 + [16]) = *($4 + [744])
	$6 = CALL $106(($4 + [712]), ($4 + [16]))
	*($4 + [728]) = [10466]
	*($4 + [732]) = CALL $218([10466])
	*($4 + [8]) = *($4 + [728])
	CALL $106(($4 + [736]), ($4 + [8]))
	*(($4 + [448])) = (int_64)6291761009422611040
	*(($4 + [456])) = (int_64)-1
	*(($4 + [464])) = (int_64)0
	*(($4 + [472])) = [0]
	*(($4 + [440])) = *($6)
	*(($4 + [488])) = $8
	*(($4 + [492])) = $3
	*(($4 + [496])) = $9
	*(($4 + [520])) = (int_64)-1
	*(($4 + [528])) = (int_64)0
	*(($4 + [536])) = [0]
	*(($4 + [568])) = (int_64)-1
	*(($4 + [576])) = (int_64)0
	*(($4 + [584])) = [0]
	$0 = *($4 + [40])
	*(($4 + [504])) = $0
	*(($4 + [512])) = $0
	*(($4 + [552])) = $0
	*(($4 + [560])) = $0
	*($4 + [480]) = $0
	*($4 + [544]) = $0
	*($4 + [716]) = ($4 + [672])
	*($4 + [712]) = ($4 + [40])
	CALL $139(($4 + [712]), ($4 + [608]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $224($2)
	
.LABEL $label$4
	CALL $134(($4 + [40]))
	if ( (*($4 + [656]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [644]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [664])))
	if ( ((*($4 + [644]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [652])))
	$5 = *($4 + [632])
	if ( ($5 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$5 = *($4 + [632])
	if ( ($5 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = ($4 + [636])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($3 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$13
	$3 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$12 }
	$2 = *(($4 + [632]))
	goto $label$10 
	
.LABEL $label$11
	$2 = $5
	
.LABEL $label$10
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [752])
	return [1]
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10154])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10154])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $135(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $179(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $179(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $134 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [536]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [540])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [536]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [488]))
	if ( ($1 == 0) ){ goto $label$7 }
	$2 = ($0 + [492])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $76(($4 + [8]), *(($4 + [12])))
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($0 + [488]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $1
	
.LABEL $label$8
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$1 = *(($0 + [424]))
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [428])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	CALL _ZdlPv($4)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$15 }
	$3 = *(($0 + [424]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	$1 = *(($0 + [368]))
	if ( ($1 == 0) ){ goto $label$17 }
	$2 = ($0 + [372])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$19 }
	
.LOOP $label$20:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$21 }
	CALL _ZdlPv($4)
	
.LABEL $label$21
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$20 }
	$3 = *(($0 + [368]))
	goto $label$18 
	
.LABEL $label$19
	$3 = $1
	
.LABEL $label$18
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$17
	$1 = *(($0 + [312]))
	if ( ($1 == 0) ){ goto $label$22 }
	$2 = ($0 + [316])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$24 }
	
.LOOP $label$25:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$26 }
	CALL $21(($3 + [80]), *(($3 + [84])))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$27
	CALL _ZdlPv($3)
	
.LABEL $label$26
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$25 }
	$3 = *(($0 + [312]))
	goto $label$23 
	
.LABEL $label$24
	$3 = $1
	
.LABEL $label$23
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$22
	$1 = *(($0 + [264]))
	if ( ($1 == 0) ){ goto $label$28 }
	$2 = ($0 + [268])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$30 }
	
.LOOP $label$31:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$32 }
	CALL _ZdlPv($4)
	
.LABEL $label$32
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$31 }
	$3 = *(($0 + [264]))
	goto $label$29 
	
.LABEL $label$30
	$3 = $1
	
.LABEL $label$29
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$28
	$1 = *(($0 + [208]))
	if ( ($1 == 0) ){ goto $label$33 }
	$2 = ($0 + [212])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$35 }
	
.LOOP $label$36:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$37 }
	CALL _ZdlPv($4)
	
.LABEL $label$37
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$36 }
	$3 = *(($0 + [208]))
	goto $label$34 
	
.LABEL $label$35
	$3 = $1
	
.LABEL $label$34
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$33
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$38 }
	$2 = ($0 + [156])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$40 }
	
.LOOP $label$41:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$42 }
	CALL _ZdlPv($4)
	
.LABEL $label$42
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$41 }
	$3 = *(($0 + [152]))
	goto $label$39 
	
.LABEL $label$40
	$3 = $1
	
.LABEL $label$39
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$38
	$1 = *(($0 + [64]))
	if ( ($1 == 0) ){ goto $label$43 }
	$2 = ($0 + [68])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$45 }
	
.LOOP $label$46:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$47 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$48
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$49
	CALL _ZdlPv($3)
	
.LABEL $label$47
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$46 }
	$3 = *(($0 + [64]))
	goto $label$44 
	
.LABEL $label$45
	$3 = $1
	
.LABEL $label$44
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$43
	return $0
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $142($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $182($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $182($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $178($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$1 = CALL $179($2, ($1 + [12]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$3 = CALL $179(($2 + [16]), $1)
	CALL void $6((int_32 $4), (int_64 ($3 & [255])), (int_32 $3), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10159])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $166($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [10154])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $213 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $211($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_32 .FUNC $208 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $204([17], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_64 .FUNC $209 (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

int_32 .FUNC $202 ()
{
	return [11556]
}

void .FUNC $203 (int_32 $0)
{
}

void .FUNC $200 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $201 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $206 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $207 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $204 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [16] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $206($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $206($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $206($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $206($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19968]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $206($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $206($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $206($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $205 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $181 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $129 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [688])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $221($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [608]) = [0]
	*($4 + [600]) = (int_64)0
	*($4 + [588]) = $2
	*($4 + [584]) = $2
	*($4 + [592]) = ($2 + $7)
	CALL $135(($4 + [584]), ($4 + [600]))
	*(($3 = (($4 + [16]) + [8]))) = *($4 + [592])
	*($4 + [16]) = *($4 + [584])
	$3 = *($3)
	*((($4 + [616]) + [8])) = $3
	*(($8 = (($4 + [656]) + [8]))) = $3
	$9 = *($4 + [16])
	*($4 + [656]) = $9
	*($4 + [616]) = $9
	$3 = *($8)
	*((($4 + [672]) + [8])) = $3
	*(($4 + [56])) = $3
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$1 = *($4 + [656])
	*($4 + [48]) = $1
	*($4 + [672]) = $1
	*(($4 + [72])) = $0
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	$8 = ($4 + [64])
	*(($4 + [120])) = $8
	*(($4 + [124])) = ($4 + [152])
	*(($4 + [128])) = ($4 + [208])
	*(($4 + [132])) = ($4 + [264])
	$3 = ($4 + [312])
	*(($4 + [136])) = $3
	$10 = ($4 + [424])
	*(($4 + [140])) = $10
	$11 = ($4 + [536])
	*(($4 + [144])) = $11
	*(($4 + [160])) = $0
	*(($4 + [168])) = $0
	*($4 + [64]) = $0
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [200])) = $8
	*(($4 + [204])) = $3
	*(($4 + [216])) = $0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [256])) = $8
	*(($4 + [260])) = $3
	*(($4 + [272])) = $0
	*(($4 + [280])) = $0
	*(($4 + [288])) = (int_64)-1
	*($4 + [208]) = $0
	*($4 + [264]) = $0
	*(($4 + [304])) = [0]
	*(($4 + [296])) = (int_64)0
	*(($4 + [320])) = $0
	*(($4 + [328])) = $0
	*(($4 + [336])) = (int_64)-1
	*(($4 + [344])) = (int_64)0
	*(($4 + [352])) = [0]
	*(($4 + [368])) = $8
	*(($4 + [372])) = $3
	*(($4 + [376])) = $0
	*(($4 + [384])) = $0
	*(($4 + [392])) = (int_64)-1
	*(($4 + [400])) = (int_64)0
	*(($4 + [408])) = [0]
	*(($4 + [412])) = [0]
	*($4 + [312]) = $0
	*($4 + [360]) = $0
	*(($4 + [416])) = [1028443341]
	*($4 + [648]) = [10466]
	*($4 + [424]) = $0
	*($4 + [652]) = CALL $218([10466])
	*($4 + [8]) = *($4 + [648])
	$8 = CALL $106(($4 + [672]), ($4 + [8]))
	*($4 + [632]) = [10466]
	*($4 + [636]) = CALL $218([10466])
	*($4) = *($4 + [632])
	CALL $106(($4 + [640]), $4)
	*(($4 + [440])) = (int_64)6291761009422611040
	*(($4 + [448])) = (int_64)-1
	*(($4 + [456])) = (int_64)0
	*(($4 + [464])) = [0]
	*(($4 + [432])) = *($8)
	*(($4 + [480])) = $10
	*(($4 + [484])) = $3
	*(($4 + [488])) = $11
	*(($4 + [512])) = (int_64)-1
	*(($4 + [520])) = (int_64)0
	*(($4 + [528])) = [0]
	*(($4 + [560])) = (int_64)-1
	*(($4 + [568])) = (int_64)0
	*(($4 + [576])) = [0]
	$0 = *($4 + [32])
	*(($4 + [496])) = $0
	*(($4 + [504])) = $0
	*(($4 + [544])) = $0
	*(($4 + [552])) = $0
	*($4 + [472]) = $0
	*($4 + [536]) = $0
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$8 = CALL $179(($4 + [656]), ($4 + [600]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $179(($4 + [672]), $8)
	CALL void $3((int_32 $5), (int_32 $6))
	if ( (*($4 + [672]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [656]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [656]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $224($2)
	
.LABEL $label$5
	CALL $134(($4 + [32]))
	if ( ((*($4 + [600]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [608])))
	
.LABEL $label$10
	$global$0 = ($4 + [688])
	return [1]
}

int_32 .FUNC $128 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [608])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $221($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [568]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10154])
	CALL memcpy(($4 + [568]), $2, [8])
	*(($4 + [36])) = ($2 + [8])
	*(($4 + [40])) = ($2 + $7)
	*(($4 + [56])) = $0
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	$8 = ($4 + [48])
	*(($4 + [104])) = $8
	*(($4 + [108])) = ($4 + [136])
	*(($4 + [112])) = ($4 + [192])
	*(($4 + [116])) = ($4 + [248])
	$3 = ($4 + [296])
	*(($4 + [120])) = $3
	*($4 + [24]) = $1
	*($4 + [16]) = $0
	*($4 + [32]) = $2
	*($4 + [48]) = $0
	*($4 + [96]) = $0
	$9 = ($4 + [520])
	*(($4 + [128])) = $9
	$10 = ($4 + [408])
	*(($4 + [124])) = $10
	*(($4 + [144])) = $0
	*(($4 + [152])) = $0
	*(($4 + [160])) = (int_64)-1
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = [0]
	*(($4 + [184])) = $8
	*(($4 + [188])) = $3
	*(($4 + [200])) = $0
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [240])) = $8
	*($4 + [136]) = $0
	*($4 + [192]) = $0
	*(($4 + [244])) = $3
	*(($4 + [256])) = $0
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*(($4 + [304])) = $0
	*(($4 + [312])) = $0
	*(($4 + [320])) = (int_64)-1
	*(($4 + [328])) = (int_64)0
	*(($4 + [336])) = [0]
	*(($4 + [352])) = $8
	*(($4 + [356])) = $3
	*(($4 + [360])) = $0
	*($4 + [248]) = $0
	*($4 + [296]) = $0
	*($4 + [344]) = $0
	*(($4 + [376])) = (int_64)-1
	*(($4 + [368])) = $0
	*(($4 + [384])) = (int_64)0
	*(($4 + [392])) = [0]
	*(($4 + [396])) = [0]
	*(($4 + [400])) = [1028443341]
	*($4 + [592]) = [10466]
	*($4 + [408]) = $0
	*($4 + [596]) = CALL $218([10466])
	*($4 + [8]) = *($4 + [592])
	$8 = CALL $106(($4 + [600]), ($4 + [8]))
	*($4 + [576]) = [10466]
	*($4 + [580]) = CALL $218([10466])
	*($4) = *($4 + [576])
	CALL $106(($4 + [584]), $4)
	*(($4 + [424])) = (int_64)6291761009422611040
	*(($4 + [432])) = (int_64)-1
	*(($4 + [440])) = (int_64)0
	*(($4 + [448])) = [0]
	*(($4 + [416])) = *($8)
	*(($4 + [464])) = $10
	*(($4 + [468])) = $3
	*(($4 + [472])) = $9
	*(($4 + [496])) = (int_64)-1
	*(($4 + [504])) = (int_64)0
	*(($4 + [512])) = [0]
	*(($4 + [544])) = (int_64)-1
	*(($4 + [552])) = (int_64)0
	*(($4 + [560])) = [0]
	$0 = *($4 + [16])
	*(($4 + [480])) = $0
	*(($4 + [488])) = $0
	*(($4 + [528])) = $0
	*(($4 + [536])) = $0
	*($4 + [456]) = $0
	*($4 + [520]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [568])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $224($2)
	
.LABEL $label$5
	CALL $134(($4 + [16]))
	$global$0 = ($4 + [608])
	return [1]
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [288])
	$global$0 = $5
	CALL $197(($5 + [88]), *($1))
	*(($5 + [112])) = [0]
	*($5 + [104]) = (int_64)0
	$6 = CALL $218([8352])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$24 }
	*($5 + [104]) = ($6 << [1])
	$7 = (($5 + [104]) | [1])
	if ( $6 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($5 + [104]) = ($8 | [1])
	*($5 + [112]) = $7
	*($5 + [108]) = $6
	
.LABEL $label$23
	CALL memcpy($7, [8352], $6)
	
.LABEL $label$22
	*(($7 + $6)) = [0]
	$6 = (($5 + [88]) + [8])
	*(($5 + [124])) = *($6)
	*($6) = [0]
	*($5 + [116 align=4]) = *($5 + [88])
	*($5 + [88]) = (int_64)0
	*((($5 + [72]) + [8])) = [0]
	*($5 + [72]) = (int_64)0
	$6 = CALL $218([8372])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$20 }
	$7 = ($5 + [128])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$27 }
	*($5 + [72]) = ($6 << [1])
	$8 = (($5 + [72]) | [1])
	if ( $6 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$9 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [72]) = ($9 | [1])
	*($5 + [80]) = $8
	*($5 + [76]) = $6
	
.LABEL $label$26
	CALL memcpy($8, [8372], $6)
	
.LABEL $label$25
	*(($8 + $6)) = [0]
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$6 = CALL $218([8361])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$30 }
	*(($5 + [128])) = ($6 << [1])
	$7 = ($7 + [1])
	if ( $6 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*(($5 + [136])) = $7
	*(($5 + [132])) = $6
	*($5 + [128]) = ($8 | [1])
	
.LABEL $label$29
	CALL memcpy($7, [8361], $6)
	
.LABEL $label$28
	*(($7 + $6)) = [0]
	$6 = ($5 + [80])
	*(($5 + [148])) = *($6)
	*(($5 + [140])) = *($5 + [72])
	*($6) = [0]
	*($5 + [72]) = (int_64)0
	CALL $194(($5 + [56]), *($1 + [8]))
	*(($5 + [160])) = [0]
	*($5 + [152]) = (int_64)0
	$7 = ($5 + [152])
	$6 = CALL $218([8376])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$33 }
	*(($5 + [152])) = ($6 << [1])
	$7 = ($7 + [1])
	if ( $6 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*(($5 + [160])) = $7
	*(($5 + [156])) = $6
	*($5 + [152]) = ($8 | [1])
	
.LABEL $label$32
	CALL memcpy($7, [8376], $6)
	
.LABEL $label$31
	*(($7 + $6)) = [0]
	$6 = ($5 + [64])
	*(($5 + [172])) = *($6)
	*(($5 + [164])) = *($5 + [56])
	*($6) = [0]
	*($5 + [56]) = (int_64)0
	CALL $194(($5 + [40]), *($1 + [9]))
	*(($5 + [184])) = [0]
	*($5 + [176]) = (int_64)0
	$1 = ($5 + [176])
	$6 = CALL $218([8385])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$36 }
	*(($5 + [176])) = ($6 << [1])
	$1 = ($1 + [1])
	if ( $6 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$7 = (($6 + [16]) & [-16])
	$1 = CALL _Znwj($7)
	*(($5 + [184])) = $1
	*(($5 + [180])) = $6
	*($5 + [176]) = ($7 | [1])
	
.LABEL $label$35
	CALL memcpy($1, [8385], $6)
	
.LABEL $label$34
	*(($1 + $6)) = [0]
	$6 = ($5 + [48])
	*(($5 + [196])) = *($6)
	*(($5 + [188])) = *($5 + [40])
	*($6) = [0]
	*($5 + [40]) = (int_64)0
	CALL $194(($5 + [24]), $2)
	*(($5 + [208])) = [0]
	*($5 + [200]) = (int_64)0
	$1 = ($5 + [200])
	$6 = CALL $218([8317])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$39 }
	*(($5 + [200])) = ($6 << [1])
	$1 = ($1 + [1])
	if ( $6 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$7 = (($6 + [16]) & [-16])
	$1 = CALL _Znwj($7)
	*(($5 + [208])) = $1
	*(($5 + [204])) = $6
	*($5 + [200]) = ($7 | [1])
	
.LABEL $label$38
	CALL memcpy($1, [8317], $6)
	
.LABEL $label$37
	*(($1 + $6)) = [0]
	*(($5 + [232])) = [0]
	$6 = ($5 + [32])
	*(($5 + [220])) = *($6)
	*(($5 + [212])) = *($5 + [24])
	*($6) = [0]
	*($5 + [224]) = (int_64)0
	*($5 + [24]) = (int_64)0
	$1 = ($5 + [224])
	$6 = CALL $218([8395])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$42 }
	*(($5 + [224])) = ($6 << [1])
	$7 = ($1 + [1])
	if ( $6 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$1 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($1)
	*(($5 + [232])) = $7
	*(($5 + [228])) = $6
	*($5 + [224]) = ($1 | [1])
	
.LABEL $label$41
	CALL memcpy($7, [8395], $6)
	
.LABEL $label$40
	$1 = [0]
	*(($7 + $6)) = [0]
	CALL $179(($5 + [236]), $3)
	$2 = ($5 + [248])
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$46 }
	$7 = *([0] + [9940])
	
.LOOP $label$48:
	*((($5 + [275]) + ($6 = $1))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$4 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$1 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$47 }
	$4 = ((int_64)$4 << (int_64)5)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$48 }
	
.LABEL $label$47
	*(($5 + [16])) = [0]
	*($5 + [8]) = (int_64)0
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$45 }
	*($5 + [8]) = ($1 << [1])
	$7 = (($5 + [8]) | [1])
	goto $label$44 
	
.LABEL $label$46
	*(($5 + [16])) = [0]
	*($5 + [8]) = (int_64)0
	*($5 + [8]) = [0]
	$6 = (($5 + [8]) | [1])
	goto $label$43 
	
.LABEL $label$45
	$8 = (($1 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($5 + [8]) = ($8 | [1])
	*($5 + [16]) = $7
	*($5 + [12]) = $1
	
.LABEL $label$44
	$8 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$49:
	*(($7 + $6)) = *((($5 + [275]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$49 }
	$6 = ($7 + $1)
	
.LABEL $label$43
	*($6) = [0]
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$6 = CALL $218([8404])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$52 }
	*(($5 + [248])) = ($6 << [1])
	$1 = ($2 + [1])
	if ( $6 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$7 = (($6 + [16]) & [-16])
	$1 = CALL _Znwj($7)
	*(($5 + [256])) = $1
	*(($5 + [252])) = $6
	*($5 + [248]) = ($7 | [1])
	
.LABEL $label$51
	CALL memcpy($1, [8404], $6)
	
.LABEL $label$50
	*(($1 + $6)) = [0]
	*($0 + [4 align=4]) = (int_64)0
	$6 = ($0 + [4])
	*($0) = $6
	$1 = ($5 + [16])
	*(($8 = ($5 + [268]))) = *($1)
	*(($7 = ($5 + [260]))) = *($5 + [8])
	*($1) = [0]
	*($5 + [8]) = (int_64)0
	CALL $6($0, $6, ($5 + [104]), ($5 + [104]))
	$1 = ($5 + [128])
	CALL $6($0, $6, $1, $1)
	$1 = ($5 + [152])
	CALL $6($0, $6, $1, $1)
	$1 = ($5 + [176])
	CALL $6($0, $6, $1, $1)
	$1 = ($5 + [200])
	CALL $6($0, $6, $1, $1)
	$1 = ($5 + [224])
	CALL $6($0, $6, $1, $1)
	$1 = ($5 + [248])
	CALL $6($0, $6, $1, $1)
	if ( ((*($7) & [1]) == 0) ){ goto $label$53 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$53
	if ( ((*($1) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*(($5 + [256])))
	
.LABEL $label$54
	if ( ((*(($5 + [236])) & [1]) == 0) ){ goto $label$55 }
	CALL _ZdlPv(*(($5 + [244])))
	
.LABEL $label$55
	if ( ((*(($5 + [224])) & [1]) == 0) ){ goto $label$56 }
	CALL _ZdlPv(*(($5 + [232])))
	
.LABEL $label$56
	if ( ((*(($5 + [212])) & [1]) == 0) ){ goto $label$57 }
	CALL _ZdlPv(*(($5 + [220])))
	
.LABEL $label$57
	if ( ((*(($5 + [200])) & [1]) == 0) ){ goto $label$58 }
	CALL _ZdlPv(*(($5 + [208])))
	
.LABEL $label$58
	if ( ((*(($5 + [188])) & [1]) == 0) ){ goto $label$59 }
	CALL _ZdlPv(*(($5 + [196])))
	
.LABEL $label$59
	if ( ((*(($5 + [176])) & [1]) == 0) ){ goto $label$60 }
	CALL _ZdlPv(*(($5 + [184])))
	
.LABEL $label$60
	if ( ((*(($5 + [164])) & [1]) == 0) ){ goto $label$61 }
	CALL _ZdlPv(*(($5 + [172])))
	
.LABEL $label$61
	if ( ((*(($5 + [152])) & [1]) == 0) ){ goto $label$62 }
	CALL _ZdlPv(*(($5 + [160])))
	
.LABEL $label$62
	if ( ((*(($5 + [140])) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*(($5 + [148])))
	
.LABEL $label$63
	if ( (*(($5 + [128])) & [1]) ){ goto $label$65 }
	$6 = [1]
	if ( (*($5 + [116]) & [1]) ){ goto $label$64 }
	goto $label$13 
	
.LABEL $label$65
	CALL _ZdlPv(*(($5 + [136])))
	$6 = [1]
	if ( ((*($5 + [116]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$64
	CALL _ZdlPv(*(($5 + [124])))
	if ( ((*($5 + [104]) & $6) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$21
	CALL $178(($5 + [104]))
	
.LABEL $label$20
	CALL $178(($5 + [72]))
	
.LABEL $label$19
	CALL $178($7)
	
.LABEL $label$18
	CALL $178($7)
	
.LABEL $label$17
	CALL $178($1)
	
.LABEL $label$16
	CALL $178($1)
	
.LABEL $label$15
	CALL $178($1)
	
.LABEL $label$14
	CALL $178($2)
	
.LABEL $label$13
	if ( (*($5 + [104]) & $6) ){ goto $label$11 }
	
.LABEL $label$12
	$6 = [1]
	if ( (*($5 + [24]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [112]))
	$6 = [1]
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($5 + [32])))
	if ( ((*($5 + [40]) & $6) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( (*($5 + [40]) & $6) ){ goto $label$7 }
	
.LABEL $label$8
	$6 = [1]
	if ( (*($5 + [56]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($5 + [48])))
	$6 = [1]
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($5 + [64])))
	if ( ((*($5 + [72]) & $6) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( (*($5 + [72]) & $6) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($5 + [88]) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*(($5 + [80])))
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($5 + [96])))
	$global$0 = ($5 + [288])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [288])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [240])
	$global$0 = $5
	CALL $197(($5 + [64]), *($1))
	*(($5 + [88])) = [0]
	*($5 + [80]) = (int_64)0
	$6 = CALL $218([8352])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$21 }
	*($5 + [80]) = ($6 << [1])
	$7 = (($5 + [80]) | [1])
	if ( $6 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($5 + [80]) = ($8 | [1])
	*($5 + [88]) = $7
	*($5 + [84]) = $6
	
.LABEL $label$20
	CALL memcpy($7, [8352], $6)
	
.LABEL $label$19
	*(($7 + $6)) = [0]
	$6 = (($5 + [64]) + [8])
	*(($5 + [100])) = *($6)
	*($6) = [0]
	*($5 + [92 align=4]) = *($5 + [64])
	*($5 + [64]) = (int_64)0
	*((($5 + [48]) + [8])) = [0]
	*($5 + [48]) = (int_64)0
	$6 = CALL $218([8410])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$17 }
	$7 = ($5 + [104])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$24 }
	*($5 + [48]) = ($6 << [1])
	$8 = (($5 + [48]) | [1])
	if ( $6 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$9 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [48]) = ($9 | [1])
	*($5 + [56]) = $8
	*($5 + [52]) = $6
	
.LABEL $label$23
	CALL memcpy($8, [8410], $6)
	
.LABEL $label$22
	*(($8 + $6)) = [0]
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$6 = CALL $218([8361])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$27 }
	*(($5 + [104])) = ($6 << [1])
	$7 = ($7 + [1])
	if ( $6 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*(($5 + [112])) = $7
	*(($5 + [108])) = $6
	*($5 + [104]) = ($8 | [1])
	
.LABEL $label$26
	CALL memcpy($7, [8361], $6)
	
.LABEL $label$25
	*(($7 + $6)) = [0]
	$6 = ($5 + [56])
	*(($5 + [124])) = *($6)
	*(($5 + [116])) = *($5 + [48])
	*($6) = [0]
	*($5 + [48]) = (int_64)0
	CALL $194(($5 + [32]), *($1 + [8]))
	*(($5 + [136])) = [0]
	*($5 + [128]) = (int_64)0
	$7 = ($5 + [128])
	$6 = CALL $218([8376])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$30 }
	*(($5 + [128])) = ($6 << [1])
	$7 = ($7 + [1])
	if ( $6 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*(($5 + [136])) = $7
	*(($5 + [132])) = $6
	*($5 + [128]) = ($8 | [1])
	
.LABEL $label$29
	CALL memcpy($7, [8376], $6)
	
.LABEL $label$28
	*(($7 + $6)) = [0]
	$6 = ($5 + [40])
	*(($5 + [148])) = *($6)
	*(($5 + [140])) = *($5 + [32])
	*($6) = [0]
	*($5 + [32]) = (int_64)0
	CALL $194(($5 + [16]), $2)
	*(($5 + [160])) = [0]
	*($5 + [152]) = (int_64)0
	$7 = ($5 + [152])
	$6 = CALL $218([8317])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$33 }
	*(($5 + [152])) = ($6 << [1])
	$7 = ($7 + [1])
	if ( $6 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*(($5 + [160])) = $7
	*(($5 + [156])) = $6
	*($5 + [152]) = ($8 | [1])
	
.LABEL $label$32
	CALL memcpy($7, [8317], $6)
	
.LABEL $label$31
	*(($7 + $6)) = [0]
	*(($5 + [184])) = [0]
	$6 = ($5 + [24])
	*(($5 + [172])) = *($6)
	*(($5 + [164])) = *($5 + [16])
	*($6) = [0]
	*($5 + [176]) = (int_64)0
	*($5 + [16]) = (int_64)0
	$7 = ($5 + [176])
	$6 = CALL $218([8395])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$36 }
	*(($5 + [176])) = ($6 << [1])
	$8 = ($7 + [1])
	if ( $6 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$7 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*(($5 + [184])) = $8
	*(($5 + [180])) = $6
	*($5 + [176]) = ($7 | [1])
	
.LABEL $label$35
	CALL memcpy($8, [8395], $6)
	
.LABEL $label$34
	$7 = [0]
	*(($8 + $6)) = [0]
	CALL $179(($5 + [188]), $3)
	$2 = ($5 + [200])
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$40 }
	$8 = *([0] + [9940])
	
.LOOP $label$42:
	*((($5 + [227]) + ($6 = $7))) = *(($8 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$4 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$7 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$41 }
	$4 = ((int_64)$4 << (int_64)5)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$42 }
	
.LABEL $label$41
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$39 }
	*($5) = ($7 << [1])
	$8 = ($5 | [1])
	goto $label$38 
	
.LABEL $label$40
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	*($5) = [0]
	$6 = ($5 | [1])
	goto $label$37 
	
.LABEL $label$39
	$1 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($1)
	*($5) = ($1 | [1])
	*($5 + [8]) = $8
	*($5 + [4]) = $7
	
.LABEL $label$38
	$1 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$43:
	*(($8 + $6)) = *((($5 + [227]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$43 }
	$6 = ($8 + $7)
	
.LABEL $label$37
	*($6) = [0]
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$6 = CALL $218([8404])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$46 }
	*(($5 + [200])) = ($6 << [1])
	$7 = ($2 + [1])
	if ( $6 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*(($5 + [208])) = $7
	*(($5 + [204])) = $6
	*($5 + [200]) = ($8 | [1])
	
.LABEL $label$45
	CALL memcpy($7, [8404], $6)
	
.LABEL $label$44
	*(($7 + $6)) = [0]
	*($0 + [4 align=4]) = (int_64)0
	$6 = ($0 + [4])
	*($0) = $6
	$7 = ($5 + [8])
	*(($1 = ($5 + [220]))) = *($7)
	*(($8 = ($5 + [212]))) = *($5)
	*($7) = [0]
	*($5) = (int_64)0
	CALL $6($0, $6, ($5 + [80]), ($5 + [80]))
	$7 = ($5 + [104])
	CALL $6($0, $6, $7, $7)
	$7 = ($5 + [128])
	CALL $6($0, $6, $7, $7)
	$7 = ($5 + [152])
	CALL $6($0, $6, $7, $7)
	$7 = ($5 + [176])
	CALL $6($0, $6, $7, $7)
	$7 = ($5 + [200])
	CALL $6($0, $6, $7, $7)
	if ( ((*($8) & [1]) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*($1))
	
.LABEL $label$47
	if ( ((*($7) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*(($5 + [208])))
	
.LABEL $label$48
	if ( ((*(($5 + [188])) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*(($5 + [196])))
	
.LABEL $label$49
	if ( ((*(($5 + [176])) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*(($5 + [184])))
	
.LABEL $label$50
	if ( ((*(($5 + [164])) & [1]) == 0) ){ goto $label$51 }
	CALL _ZdlPv(*(($5 + [172])))
	
.LABEL $label$51
	if ( ((*(($5 + [152])) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*(($5 + [160])))
	
.LABEL $label$52
	if ( ((*(($5 + [140])) & [1]) == 0) ){ goto $label$53 }
	CALL _ZdlPv(*(($5 + [148])))
	
.LABEL $label$53
	if ( ((*(($5 + [128])) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*(($5 + [136])))
	
.LABEL $label$54
	if ( ((*(($5 + [116])) & [1]) == 0) ){ goto $label$55 }
	CALL _ZdlPv(*(($5 + [124])))
	
.LABEL $label$55
	if ( (*(($5 + [104])) & [1]) ){ goto $label$57 }
	$6 = [1]
	if ( (*($5 + [92]) & [1]) ){ goto $label$56 }
	goto $label$11 
	
.LABEL $label$57
	CALL _ZdlPv(*(($5 + [112])))
	$6 = [1]
	if ( ((*($5 + [92]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$56
	CALL _ZdlPv(*(($5 + [100])))
	if ( ((*($5 + [80]) & $6) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$18
	CALL $178(($5 + [80]))
	
.LABEL $label$17
	CALL $178(($5 + [48]))
	
.LABEL $label$16
	CALL $178($7)
	
.LABEL $label$15
	CALL $178($7)
	
.LABEL $label$14
	CALL $178($7)
	
.LABEL $label$13
	CALL $178($7)
	
.LABEL $label$12
	CALL $178($2)
	
.LABEL $label$11
	if ( (*($5 + [80]) & $6) ){ goto $label$9 }
	
.LABEL $label$10
	$6 = [1]
	if ( (*($5 + [16]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [88]))
	$6 = [1]
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($5 + [24])))
	if ( ((*($5 + [32]) & $6) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( (*($5 + [32]) & $6) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = [1]
	if ( (*($5 + [48]) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*(($5 + [40])))
	$6 = [1]
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($5 + [56])))
	if ( ((*($5 + [64]) & $6) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($5 + [64]) & $6) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($5 + [240])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*(($5 + [72])))
	$global$0 = ($5 + [240])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $123 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$3 = ($global$0 - [784])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $221($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [632]) + [24]))) = (int_64)0
	*(($9 = (($4 + [632]) + [40]))) = (int_64)0
	*($4 + [640]) = (int_64)0
	*($4 + [632]) = (int_64)0
	*($4 + [648]) = (int_64)0
	*($4 + [664]) = (int_64)0
	*($4 + [680]) = [0]
	*($4 + [620]) = $2
	*($4 + [616]) = $2
	*($4 + [624]) = ($2 + $7)
	*($4 + [768]) = ($4 + [616])
	*($4 + [64]) = ($4 + [632])
	CALL $140(($4 + [64]), ($4 + [768]))
	*(($3 = (($4 + [48]) + [8]))) = *($4 + [624])
	*($4 + [48]) = *($4 + [616])
	$3 = *($3)
	*(($10 = (($4 + [736]) + [8]))) = $3
	*(($11 = (($4 + [752]) + [8]))) = $3
	$12 = *($4 + [48])
	*($4 + [752]) = $12
	*($4 + [736]) = $12
	$3 = *($11)
	*((($4 + [768]) + [8])) = $3
	*((($4 + [64]) + [24])) = $3
	*($4 + [64]) = $0
	*($4 + [72]) = $1
	$1 = *($4 + [752])
	*($4 + [80]) = $1
	*($4 + [768]) = $1
	*((($4 + [64]) + [40])) = $0
	*(($4 + [112])) = $0
	*(($4 + [120])) = (int_64)-1
	*(($4 + [128])) = (int_64)0
	*(($4 + [136])) = [0]
	*(($4 + [140])) = [0]
	$11 = ($4 + [96])
	*(($4 + [152])) = $11
	*(($4 + [156])) = ($4 + [184])
	*(($4 + [160])) = ($4 + [240])
	*(($4 + [164])) = ($4 + [296])
	$3 = ($4 + [344])
	*(($4 + [168])) = $3
	$13 = ($4 + [456])
	*(($4 + [172])) = $13
	$14 = ($4 + [568])
	*(($4 + [176])) = $14
	*(($4 + [192])) = $0
	*(($4 + [200])) = $0
	*($4 + [96]) = $0
	*($4 + [144]) = $0
	*($4 + [184]) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [232])) = $11
	*(($4 + [236])) = $3
	*(($4 + [248])) = $0
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*(($4 + [288])) = $11
	*(($4 + [292])) = $3
	*(($4 + [304])) = $0
	*(($4 + [312])) = $0
	*(($4 + [320])) = (int_64)-1
	*($4 + [240]) = $0
	*($4 + [296]) = $0
	*(($4 + [336])) = [0]
	*(($4 + [328])) = (int_64)0
	*(($4 + [352])) = $0
	*(($4 + [360])) = $0
	*(($4 + [368])) = (int_64)-1
	*(($4 + [376])) = (int_64)0
	*(($4 + [384])) = [0]
	*(($4 + [400])) = $11
	*(($4 + [404])) = $3
	*(($4 + [408])) = $0
	*(($4 + [416])) = $0
	*(($4 + [424])) = (int_64)-1
	*(($4 + [432])) = (int_64)0
	*(($4 + [440])) = [0]
	*(($4 + [444])) = [0]
	*($4 + [344]) = $0
	*($4 + [392]) = $0
	*(($4 + [448])) = [1028443341]
	*($4 + [720]) = [10466]
	*($4 + [456]) = $0
	*($4 + [724]) = CALL $218([10466])
	*($4 + [40]) = *($4 + [720])
	$11 = CALL $106(($4 + [768]), ($4 + [40]))
	*($4 + [688]) = [10466]
	*($4 + [692]) = CALL $218([10466])
	*($4 + [32]) = *($4 + [688])
	CALL $106(($4 + [704]), ($4 + [32]))
	*(($4 + [472])) = (int_64)6291761009422611040
	*(($4 + [480])) = (int_64)-1
	*(($4 + [488])) = (int_64)0
	*(($4 + [496])) = [0]
	*(($4 + [464])) = *($11)
	*(($4 + [512])) = $13
	*(($4 + [516])) = $3
	*(($4 + [520])) = $14
	*(($4 + [544])) = (int_64)-1
	*(($4 + [552])) = (int_64)0
	*(($4 + [560])) = [0]
	*(($4 + [592])) = (int_64)-1
	*(($4 + [600])) = (int_64)0
	*(($4 + [608])) = [0]
	$0 = *($4 + [64])
	*(($4 + [528])) = $0
	*(($4 + [536])) = $0
	*(($4 + [576])) = $0
	*(($4 + [584])) = $0
	*($4 + [504]) = $0
	*($4 + [568]) = $0
	*(($3 = (($4 + [704]) + [8]))) = *($8)
	*(($11 = (($4 + [688]) + [8]))) = *($9)
	*($4 + [704]) = *($4 + [648])
	*($4 + [688]) = *($4 + [664])
	$0 = *($4 + [640])
	$1 = *($4 + [632])
	$8 = *($4 + [680])
	*($10) = *($11)
	*((($4 + [720]) + [8])) = *($3)
	*($4 + [736]) = *($4 + [688])
	*($4 + [720]) = *($4 + [704])
	$3 = (($4 + [64]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$12 = *((($4 + [720]) + [8]))
	*((($4 + [768]) + [8])) = $12
	$15 = *((($4 + [736]) + [8]))
	*((($4 + [752]) + [8])) = $15
	*((($4 + [16]) + [8])) = $12
	*(($4 + [8])) = $15
	$12 = *($4 + [720])
	*($4 + [768]) = $12
	$15 = *($4 + [736])
	*($4 + [752]) = $15
	*($4 + [16]) = $12
	*($4) = $15
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [16])), (int_32 $4), (int_32 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $224($2)
	
.LABEL $label$5
	CALL $134(($4 + [64]))
	$global$0 = ($4 + [784])
	return [1]
}

int_32 .FUNC $122 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [736])
	$global$0 = $3
	*(($4 = $3) + [656]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $221($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [608]) + [24])) = (int_64)0
	*((($4 + [608]) + [40])) = [0]
	*($4 + [616]) = (int_64)0
	*($4 + [608]) = (int_64)0
	*($4 + [624]) = (int_64)0
	*($4 + [640]) = (int_64)0
	*($4 + [596]) = $2
	*($4 + [592]) = $2
	*($4 + [600]) = ($2 + $5)
	*($4 + [696]) = ($4 + [592])
	*($4 + [40]) = ($4 + [608])
	CALL $132(($4 + [40]), ($4 + [696]))
	*(($3 = (($4 + [24]) + [8]))) = *($4 + [600])
	*($4 + [24]) = *($4 + [592])
	$3 = *($3)
	*((($4 + [664]) + [8])) = $3
	*(($6 = (($4 + [680]) + [8]))) = $3
	$7 = *($4 + [24])
	*($4 + [680]) = $7
	*($4 + [664]) = $7
	$3 = *($6)
	*((($4 + [696]) + [8])) = $3
	*((($4 + [40]) + [24])) = $3
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$1 = *($4 + [680])
	*($4 + [56]) = $1
	*($4 + [696]) = $1
	*((($4 + [40]) + [40])) = $0
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	$6 = ($4 + [72])
	*(($4 + [128])) = $6
	*(($4 + [132])) = ($4 + [160])
	*(($4 + [136])) = ($4 + [216])
	*(($4 + [140])) = ($4 + [272])
	$3 = ($4 + [320])
	*(($4 + [144])) = $3
	$8 = ($4 + [432])
	*(($4 + [148])) = $8
	$9 = ($4 + [544])
	*(($4 + [152])) = $9
	*(($4 + [168])) = $0
	*(($4 + [176])) = $0
	*($4 + [72]) = $0
	*($4 + [120]) = $0
	*($4 + [160]) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [208])) = $6
	*(($4 + [212])) = $3
	*(($4 + [224])) = $0
	*(($4 + [232])) = $0
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = [0]
	*(($4 + [264])) = $6
	*(($4 + [268])) = $3
	*(($4 + [280])) = $0
	*(($4 + [288])) = $0
	*(($4 + [296])) = (int_64)-1
	*($4 + [216]) = $0
	*($4 + [272]) = $0
	*(($4 + [312])) = [0]
	*(($4 + [304])) = (int_64)0
	*(($4 + [328])) = $0
	*(($4 + [336])) = $0
	*(($4 + [344])) = (int_64)-1
	*(($4 + [352])) = (int_64)0
	*(($4 + [360])) = [0]
	*(($4 + [376])) = $6
	*(($4 + [380])) = $3
	*(($4 + [384])) = $0
	*(($4 + [392])) = $0
	*(($4 + [400])) = (int_64)-1
	*(($4 + [408])) = (int_64)0
	*(($4 + [416])) = [0]
	*(($4 + [420])) = [0]
	*($4 + [320]) = $0
	*($4 + [368]) = $0
	*(($4 + [424])) = [1028443341]
	*($4 + [728]) = [10466]
	*($4 + [432]) = $0
	*($4 + [732]) = CALL $218([10466])
	*($4 + [16]) = *($4 + [728])
	$6 = CALL $106(($4 + [696]), ($4 + [16]))
	*($4 + [712]) = [10466]
	*($4 + [716]) = CALL $218([10466])
	*($4 + [8]) = *($4 + [712])
	CALL $106(($4 + [720]), ($4 + [8]))
	*(($4 + [448])) = (int_64)6291761009422611040
	*(($4 + [456])) = (int_64)-1
	*(($4 + [464])) = (int_64)0
	*(($4 + [472])) = [0]
	*(($4 + [440])) = *($6)
	*(($4 + [488])) = $8
	*(($4 + [492])) = $3
	*(($4 + [496])) = $9
	*(($4 + [520])) = (int_64)-1
	*(($4 + [528])) = (int_64)0
	*(($4 + [536])) = [0]
	*(($4 + [568])) = (int_64)-1
	*(($4 + [576])) = (int_64)0
	*(($4 + [584])) = [0]
	$0 = *($4 + [40])
	*(($4 + [504])) = $0
	*(($4 + [512])) = $0
	*(($4 + [552])) = $0
	*(($4 + [560])) = $0
	*($4 + [480]) = $0
	*($4 + [544]) = $0
	*($4 + [700]) = ($4 + [656])
	*($4 + [696]) = ($4 + [40])
	CALL $133(($4 + [696]), ($4 + [608]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $224($2)
	
.LABEL $label$4
	CALL $134(($4 + [40]))
	if ( ((*($4 + [640]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [648])))
	
.LABEL $label$5
	$global$0 = ($4 + [736])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [1]
	*($3) = *($3 + [200])
	CALL $122($0, (int_64)6138663591592764928, $3)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)4923678863487303679) ){ goto $label$13 }
	if ( ((int_64)$2 > (int_64)4923678602614013951) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-4417085959225475072) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)3931786841606848512) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)3931796032011108352) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [2]
	*($3 + [72]) = *($3 + [128])
	CALL $123($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 > (int_64)7176367068369911807) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)4923678863487303680) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)4923678974778517872) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$1 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [3]
	*($3 + [56]) = *($3 + [144])
	CALL $124($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)4923678602614013952) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)4923678674084954112) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)4923678676836417536) ){ goto $label$1 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [4]
	*($3 + [40]) = *($3 + [160])
	CALL $125($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)8516769789752901632) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)7176378369896164864) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)7176367068369911808) ){ goto $label$1 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [5]
	*($3 + [8]) = *($3 + [192])
	CALL $126($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [116]) = [0]
	*($3 + [112]) = [6]
	*($3 + [88]) = *($3 + [112])
	CALL $127($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [124]) = [0]
	*($3 + [120]) = [7]
	*($3 + [80]) = *($3 + [120])
	CALL $128($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [108]) = [0]
	*($3 + [104]) = [8]
	*($3 + [96]) = *($3 + [104])
	CALL $129($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [172]) = [0]
	*($3 + [168]) = [9]
	*($3 + [32]) = *($3 + [168])
	CALL $125($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [156]) = [0]
	*($3 + [152]) = [10]
	*($3 + [48]) = *($3 + [152])
	CALL $130($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [180]) = [0]
	*($3 + [176]) = [11]
	*($3 + [24]) = *($3 + [176])
	CALL $125($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [140]) = [0]
	*($3 + [136]) = [12]
	*($3 + [64]) = *($3 + [136])
	CALL $131($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [188]) = [0]
	*($3 + [184]) = [13]
	*($3 + [16]) = *($3 + [184])
	CALL $124($1, $1, ($3 + [16]))
	
.LABEL $label$1
	CALL $203([0])
	$global$0 = ($3 + [208])
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$0 = CALL $179($2, $1)
	CALL $89(($0 + [504]), $0)
	if ( ((*($0) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($0 + [8]))
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($1 + [4])
	$5 = ($3 | [1])
	$6 = ($1 + [16])
	$7 = ($1 + [20])
	$8 = ($3 + [8])
	$9 = ($1 + [28])
	$10 = ($1 + [32])
	$11 = ($1 + [24])
	$12 = [1]
	if ( *($1) ){ goto $label$2 }
	$14 = [1]
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$64 
	
.LABEL $label$65
	*($7) = $13
	*($6) = *($11)
	*($11) = $12
	$12 = [1]
	if ( (*($1) == 0) ){ goto $label$31 }
	$14 = [0]
	goto $label$3 
	
.LABEL $label$64
	$12 = ((int_32)*($10) != (int_32)[0])
	$14 = [1]
	goto $label$3 
	
.LABEL $label$63
	if ( (*($2) == 0) ){ goto $label$30 }
	$14 = [2]
	goto $label$3 
	
.LABEL $label$62
	$13 = ((int_32)*(($2 + [32])) != (int_32)[0])
	if ( ((int_32)($12 | $13) == (int_32)[1]) ){ goto $label$29 }
	$14 = [3]
	goto $label$3 
	
.LABEL $label$61
	$13 = *(($2 + [16]))
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	if ( ((int_32)$16 != (int_32)(*(($2 + [20])) - $13)) ){ goto $label$27 }
	$14 = [24]
	goto $label$3 
	
.LABEL $label$60
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$8 }
	$14 = [25]
	goto $label$3 
	
.LABEL $label$59
	$17 = $12
	$14 = [26]
	goto $label$3 
	
.LABEL $label$58
	if ( ((int_32)*($17) != (int_32)*($13)) ){ goto $label$26 }
	$14 = [27]
	goto $label$3 
	
.LABEL $label$57
	$13 = ($13 + [1])
	$17 = ($17 + [1])
	if ( ((int_32)$15 != (int_32)$17) ){ goto $label$7 }
	$14 = [28]
	goto $label$3 
	
.LABEL $label$56
	if ( ((int_32)*($11) != (int_32)*(($2 + [24]))) ){ goto $label$28 }
	$14 = [29]
	goto $label$3 
	
.LABEL $label$55
	if ( ((int_32)*($9) != (int_32)*(($2 + [28]))) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$54
	$13 = [1]
	$14 = [32]
	goto $label$3 
	
.LABEL $label$53
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$4 }
	$14 = [30]
	goto $label$3 
	
.LABEL $label$52
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	$14 = [4]
	goto $label$3 
	
.LABEL $label$51
	*($8) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$25 }
	$14 = [5]
	goto $label$3 
	
.LABEL $label$50
	if ( ((uint_32)$16 > (uint_32)[10]) ){ goto $label$24 }
	$14 = [22]
	goto $label$3 
	
.LABEL $label$49
	*($3) = ($16 << [1])
	$17 = $5
	if ( ((int_32)$12 != (int_32)$15) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$48
	$13 = (($16 + [16]) & [-16])
	$17 = CALL _Znwj($13)
	*($8) = $17
	*($3) = ($13 | [1])
	*($3 + [4]) = $16
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$23 }
	$14 = [7]
	goto $label$3 
	
.LABEL $label$47
	$13 = $17
	$14 = [8]
	goto $label$3 
	
.LABEL $label$46
	*($13) = *($12)
	$13 = ($13 + [1])
	$12 = ($12 + [1])
	if ( ((int_32)$15 != (int_32)$12) ){ goto $label$20 }
	$14 = [9]
	goto $label$3 
	
.LABEL $label$45
	$17 = ($17 + $16)
	$14 = [10]
	goto $label$3 
	
.LABEL $label$44
	*($17) = [0]
	$12 = ($0 + [4])
	$13 = *($12)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [8]))) ){ goto $label$19 }
	$14 = [21]
	goto $label$3 
	
.LABEL $label$43
	*($13) = *($3)
	*(($13 + [8])) = *($8)
	*($8) = [0]
	*($12) = (*($12) + [12])
	*($3) = (int_64)0
	$12 = *($9)
	$13 = *($1)
	if ( $13 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$42
	CALL $145($0, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$18 }
	$14 = [12]
	goto $label$3 
	
.LABEL $label$41
	CALL _ZdlPv(*($8))
	$14 = [13]
	goto $label$3 
	
.LABEL $label$40
	$12 = *($9)
	$13 = *($1)
	if ( ($13 == 0) ){ goto $label$17 }
	$14 = [14]
	goto $label$3 
	
.LABEL $label$39
	CALL void $3((int_32 $4), (int_32 *($11)), (int_32 $12), (int_32 *(($13 & [-2]) + [4])))
	$13 = *($3)
	if ( ((int_32)$13 == (int_32)*($9)) ){ goto $label$14 }
	$14 = [15]
	goto $label$3 
	
.LABEL $label$38
	$12 = *($3 + [4])
	goto $label$13 
	
.LABEL $label$37
	*($3 + [4]) = $12
	*($3) = $12
	$13 = $12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$36
	if ( ((int_32)*($7) != (int_32)$13) ){ goto $label$9 }
	$14 = [19]
	goto $label$3 
	
.LABEL $label$35
	*($10) = [1]
	goto $label$10 
	
.LABEL $label$34
	$12 = *($3 + [4])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$33
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$32
	CALL $178($3)
	
.LABEL $label$31
	$14 = [1]
	goto $label$3 
	
.LABEL $label$30
	$14 = [33]
	goto $label$3 
	
.LABEL $label$29
	$14 = [32]
	goto $label$3 
	
.LABEL $label$28
	$14 = [4]
	goto $label$3 
	
.LABEL $label$27
	$14 = [4]
	goto $label$3 
	
.LABEL $label$26
	$14 = [4]
	goto $label$3 
	
.LABEL $label$25
	$14 = [23]
	goto $label$3 
	
.LABEL $label$24
	$14 = [6]
	goto $label$3 
	
.LABEL $label$23
	$14 = [10]
	goto $label$3 
	
.LABEL $label$22
	$14 = [10]
	goto $label$3 
	
.LABEL $label$21
	$14 = [7]
	goto $label$3 
	
.LABEL $label$20
	$14 = [8]
	goto $label$3 
	
.LABEL $label$19
	$14 = [11]
	goto $label$3 
	
.LABEL $label$18
	$14 = [13]
	goto $label$3 
	
.LABEL $label$17
	$14 = [20]
	goto $label$3 
	
.LABEL $label$16
	$14 = [20]
	goto $label$3 
	
.LABEL $label$15
	$14 = [14]
	goto $label$3 
	
.LABEL $label$14
	$14 = [17]
	goto $label$3 
	
.LABEL $label$13
	$14 = [16]
	goto $label$3 
	
.LABEL $label$12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$11
	$14 = [16]
	goto $label$3 
	
.LABEL $label$10
	$14 = [16]
	goto $label$3 
	
.LABEL $label$9
	$14 = [16]
	goto $label$3 
	
.LABEL $label$8
	$14 = [28]
	goto $label$3 
	
.LABEL $label$7
	$14 = [26]
	goto $label$3 
	
.LABEL $label$6
	$14 = [31]
	goto $label$3 
	
.LABEL $label$5
	$14 = [30]
	goto $label$3 
	
.LABEL $label$4
	$14 = [31]
	goto $label$3 
	$14
	return (unreachable)
}

int_32 .FUNC $126 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [704])
	$global$0 = $3
	*(($4 = $3) + [624]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $221($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [620])) = [0]
	*($4 + [608]) = [0]
	*($4 + [600]) = (int_64)0
	*($4 + [612 align=4]) = (int_64)0
	*($4 + [592]) = ($2 + $5)
	*($4 + [584]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [10154])
	CALL memcpy(($4 + [600]), $2, [8])
	CALL eosio_assert(((int_32)$5 != (int_32)[8]), [10154])
	CALL memcpy((($4 + [600]) + [8]), ($2 + [8]), [1])
	*($4 + [588]) = ($2 + [9])
	CALL $135(($4 + [584]), ($4 + [612]))
	*(($3 = (($4 + [16]) + [8]))) = *($4 + [592])
	*($4 + [16]) = *($4 + [584])
	$3 = *($3)
	*((($4 + [632]) + [8])) = $3
	*(($6 = (($4 + [648]) + [8]))) = $3
	$7 = *($4 + [16])
	*($4 + [648]) = $7
	*($4 + [632]) = $7
	$3 = *($6)
	*((($4 + [664]) + [8])) = $3
	*(($4 + [56])) = $3
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$1 = *($4 + [648])
	*($4 + [48]) = $1
	*($4 + [664]) = $1
	*(($4 + [72])) = $0
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	$6 = ($4 + [64])
	*(($4 + [120])) = $6
	*(($4 + [124])) = ($4 + [152])
	*(($4 + [128])) = ($4 + [208])
	*(($4 + [132])) = ($4 + [264])
	$3 = ($4 + [312])
	*(($4 + [136])) = $3
	$8 = ($4 + [424])
	*(($4 + [140])) = $8
	$9 = ($4 + [536])
	*(($4 + [144])) = $9
	*(($4 + [160])) = $0
	*(($4 + [168])) = $0
	*($4 + [64]) = $0
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [200])) = $6
	*(($4 + [204])) = $3
	*(($4 + [216])) = $0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [256])) = $6
	*(($4 + [260])) = $3
	*(($4 + [272])) = $0
	*(($4 + [280])) = $0
	*(($4 + [288])) = (int_64)-1
	*($4 + [208]) = $0
	*($4 + [264]) = $0
	*(($4 + [304])) = [0]
	*(($4 + [296])) = (int_64)0
	*(($4 + [320])) = $0
	*(($4 + [328])) = $0
	*(($4 + [336])) = (int_64)-1
	*(($4 + [344])) = (int_64)0
	*(($4 + [352])) = [0]
	*(($4 + [368])) = $6
	*(($4 + [372])) = $3
	*(($4 + [376])) = $0
	*(($4 + [384])) = $0
	*(($4 + [392])) = (int_64)-1
	*(($4 + [400])) = (int_64)0
	*(($4 + [408])) = [0]
	*(($4 + [412])) = [0]
	*($4 + [312]) = $0
	*($4 + [360]) = $0
	*(($4 + [416])) = [1028443341]
	*($4 + [696]) = [10466]
	*($4 + [424]) = $0
	*($4 + [700]) = CALL $218([10466])
	*($4 + [8]) = *($4 + [696])
	$6 = CALL $106(($4 + [664]), ($4 + [8]))
	*($4 + [680]) = [10466]
	*($4 + [684]) = CALL $218([10466])
	*($4) = *($4 + [680])
	CALL $106(($4 + [688]), $4)
	*(($4 + [440])) = (int_64)6291761009422611040
	*(($4 + [448])) = (int_64)-1
	*(($4 + [456])) = (int_64)0
	*(($4 + [464])) = [0]
	*(($4 + [432])) = *($6)
	*(($4 + [480])) = $8
	*(($4 + [484])) = $3
	*(($4 + [488])) = $9
	*(($4 + [512])) = (int_64)-1
	*(($4 + [520])) = (int_64)0
	*(($4 + [528])) = [0]
	*(($4 + [560])) = (int_64)-1
	*(($4 + [568])) = (int_64)0
	*(($4 + [576])) = [0]
	$0 = *($4 + [32])
	*(($4 + [496])) = $0
	*(($4 + [504])) = $0
	*(($4 + [544])) = $0
	*(($4 + [552])) = $0
	*($4 + [472]) = $0
	*($4 + [536]) = $0
	*($4 + [668]) = ($4 + [624])
	*($4 + [664]) = ($4 + [32])
	CALL $136(($4 + [664]), ($4 + [600]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $224($2)
	
.LABEL $label$4
	CALL $134(($4 + [32]))
	if ( ((*($4 + [612]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [620])))
	
.LABEL $label$5
	$global$0 = ($4 + [704])
	return [1]
}

int_32 .FUNC $125 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [688])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$2 = [0]
	$8 = CALL action_data_size()
	if ( ($8 == 0) ){ goto $label$1 }
	if ( ($8 <= [513]) ){ goto $label$3 }
	$2 = CALL $221($8)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $8)
	
.LABEL $label$1
	*($4 + [608]) = [0]
	*($4 + [600]) = (int_64)0
	*($4 + [588]) = $2
	*($4 + [584]) = $2
	*($4 + [592]) = ($2 + $8)
	CALL $137(($4 + [584]), ($4 + [600]))
	*(($3 = (($4 + [16]) + [8]))) = *($4 + [592])
	*($4 + [16]) = *($4 + [584])
	$3 = *($3)
	*((($4 + [616]) + [8])) = $3
	*(($9 = (($4 + [656]) + [8]))) = $3
	$10 = *($4 + [16])
	*($4 + [656]) = $10
	*($4 + [616]) = $10
	$3 = *($9)
	*((($4 + [672]) + [8])) = $3
	*(($4 + [56])) = $3
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$1 = *($4 + [656])
	*($4 + [48]) = $1
	*($4 + [672]) = $1
	*(($4 + [72])) = $0
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	$9 = ($4 + [64])
	*(($4 + [120])) = $9
	*(($4 + [124])) = ($4 + [152])
	*(($4 + [128])) = ($4 + [208])
	*(($4 + [132])) = ($4 + [264])
	$3 = ($4 + [312])
	*(($4 + [136])) = $3
	$11 = ($4 + [424])
	*(($4 + [140])) = $11
	$12 = ($4 + [536])
	*(($4 + [144])) = $12
	*(($4 + [160])) = $0
	*(($4 + [168])) = $0
	*($4 + [64]) = $0
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [200])) = $9
	*(($4 + [204])) = $3
	*(($4 + [216])) = $0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [256])) = $9
	*(($4 + [260])) = $3
	*(($4 + [272])) = $0
	*(($4 + [280])) = $0
	*(($4 + [288])) = (int_64)-1
	*($4 + [208]) = $0
	*($4 + [264]) = $0
	*(($4 + [304])) = [0]
	*(($4 + [296])) = (int_64)0
	*(($4 + [320])) = $0
	*(($4 + [328])) = $0
	*(($4 + [336])) = (int_64)-1
	*(($4 + [344])) = (int_64)0
	*(($4 + [352])) = [0]
	*(($4 + [368])) = $9
	*(($4 + [372])) = $3
	*(($4 + [376])) = $0
	*(($4 + [384])) = $0
	*(($4 + [392])) = (int_64)-1
	*(($4 + [400])) = (int_64)0
	*(($4 + [408])) = [0]
	*(($4 + [412])) = [0]
	*($4 + [312]) = $0
	*($4 + [360]) = $0
	*(($4 + [416])) = [1028443341]
	*($4 + [648]) = [10466]
	*($4 + [424]) = $0
	*($4 + [652]) = CALL $218([10466])
	*($4 + [8]) = *($4 + [648])
	$9 = CALL $106(($4 + [672]), ($4 + [8]))
	*($4 + [632]) = [10466]
	*($4 + [636]) = CALL $218([10466])
	*($4) = *($4 + [632])
	CALL $106(($4 + [640]), $4)
	*(($4 + [440])) = (int_64)6291761009422611040
	*(($4 + [448])) = (int_64)-1
	*(($4 + [456])) = (int_64)0
	*(($4 + [464])) = [0]
	*(($4 + [432])) = *($9)
	*(($4 + [480])) = $11
	*(($4 + [484])) = $3
	*(($4 + [488])) = $12
	*(($4 + [512])) = (int_64)-1
	*(($4 + [520])) = (int_64)0
	*(($4 + [528])) = [0]
	*(($4 + [560])) = (int_64)-1
	*(($4 + [568])) = (int_64)0
	*(($4 + [576])) = [0]
	$0 = *($4 + [32])
	*(($4 + [496])) = $0
	*(($4 + [504])) = $0
	*(($4 + [544])) = $0
	*(($4 + [552])) = $0
	*($4 + [472]) = $0
	*($4 + [536]) = $0
	*($4 + [664]) = [0]
	*($4 + [656]) = (int_64)0
	$3 = (*($4 + [604]) - *($4 + [600]))
	if ( ($3 == 0) ){ goto $label$6 }
	$9 = int_32($3 >> [3])
	if ( ((uint_32)$9 >= (uint_32)[536870912]) ){ goto $label$5 }
	$7 = CALL _Znwj($3)
	*(($4 + [664])) = ($7 + ($9 << [3]))
	*($4 + [656]) = $7
	*($4 + [660]) = $7
	$9 = *($4 + [600])
	$3 = (*($4 + [604]) - $9)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($7, $9, $3)
	$7 = (*($4 + [660]) + $3)
	*($4 + [660]) = $7
	
.LABEL $label$6
	$9 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($9) + $6))
	
.LABEL $label$7
	*($4 + [680]) = [0]
	*($4 + [672]) = (int_64)0
	$3 = ($7 - *($4 + [656]))
	if ( ($3 == 0) ){ goto $label$8 }
	$7 = int_32($3 >> [3])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$4 }
	$3 = CALL _Znwj($3)
	*(($4 + [680])) = ($3 + ($7 << [3]))
	*($4 + [672]) = $3
	*($4 + [676]) = $3
	$5 = *($4 + [656])
	$7 = (*($4 + [660]) - $5)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($3, $5, $7)
	*($4 + [676]) = ($3 + $7)
	
.LABEL $label$8
	CALL void $9((int_32 ($4 + [672])), (int_32 $6))
	$3 = *($4 + [672])
	if ( ($3 == 0) ){ goto $label$9 }
	*($4 + [676]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$3 = *($4 + [656])
	if ( ($3 == 0) ){ goto $label$10 }
	*($4 + [660]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$10
	if ( ($8 <= [513]) ){ goto $label$11 }
	CALL $224($2)
	
.LABEL $label$11
	CALL $134(($4 + [32]))
	$2 = *($4 + [600])
	if ( ($2 == 0) ){ goto $label$12 }
	*($4 + [604]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$global$0 = ($4 + [688])
	return [1]
	
.LABEL $label$5
	CALL $201(($4 + [656]))
	
.LABEL $label$4
	CALL $201(($4 + [672]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $124 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [704])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $221($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [624])) = [0]
	*($4 + [608]) = (int_64)0
	*($4 + [616]) = (int_64)0
	*($4 + [600]) = ($2 + $7)
	*($4 + [592]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10154])
	CALL memcpy(($4 + [608]), $2, [8])
	*($4 + [596]) = ($2 + [8])
	$8 = (($4 + [608]) + [8])
	CALL $135(($4 + [592]), $8)
	*(($3 = (($4 + [24]) + [8]))) = *($4 + [600])
	*($4 + [24]) = *($4 + [592])
	$3 = *($3)
	*((($4 + [632]) + [8])) = $3
	*(($9 = (($4 + [672]) + [8]))) = $3
	$10 = *($4 + [24])
	*($4 + [672]) = $10
	*($4 + [632]) = $10
	$3 = *($9)
	*((($4 + [688]) + [8])) = $3
	*(($4 + [64])) = $3
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$1 = *($4 + [672])
	*($4 + [56]) = $1
	*($4 + [688]) = $1
	*(($4 + [80])) = $0
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	$9 = ($4 + [72])
	*(($4 + [128])) = $9
	*(($4 + [132])) = ($4 + [160])
	*(($4 + [136])) = ($4 + [216])
	*(($4 + [140])) = ($4 + [272])
	$3 = ($4 + [320])
	*(($4 + [144])) = $3
	$11 = ($4 + [432])
	*(($4 + [148])) = $11
	$12 = ($4 + [544])
	*(($4 + [152])) = $12
	*(($4 + [168])) = $0
	*(($4 + [176])) = $0
	*($4 + [72]) = $0
	*($4 + [120]) = $0
	*($4 + [160]) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [208])) = $9
	*(($4 + [212])) = $3
	*(($4 + [224])) = $0
	*(($4 + [232])) = $0
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = [0]
	*(($4 + [264])) = $9
	*(($4 + [268])) = $3
	*(($4 + [280])) = $0
	*(($4 + [288])) = $0
	*(($4 + [296])) = (int_64)-1
	*($4 + [216]) = $0
	*($4 + [272]) = $0
	*(($4 + [312])) = [0]
	*(($4 + [304])) = (int_64)0
	*(($4 + [328])) = $0
	*(($4 + [336])) = $0
	*(($4 + [344])) = (int_64)-1
	*(($4 + [352])) = (int_64)0
	*(($4 + [360])) = [0]
	*(($4 + [376])) = $9
	*(($4 + [380])) = $3
	*(($4 + [384])) = $0
	*(($4 + [392])) = $0
	*(($4 + [400])) = (int_64)-1
	*(($4 + [408])) = (int_64)0
	*(($4 + [416])) = [0]
	*(($4 + [420])) = [0]
	*($4 + [320]) = $0
	*($4 + [368]) = $0
	*(($4 + [424])) = [1028443341]
	*($4 + [664]) = [10466]
	*($4 + [432]) = $0
	*($4 + [668]) = CALL $218([10466])
	*($4 + [16]) = *($4 + [664])
	$9 = CALL $106(($4 + [688]), ($4 + [16]))
	*($4 + [648]) = [10466]
	*($4 + [652]) = CALL $218([10466])
	*($4 + [8]) = *($4 + [648])
	CALL $106(($4 + [656]), ($4 + [8]))
	*(($4 + [448])) = (int_64)6291761009422611040
	*(($4 + [456])) = (int_64)-1
	*(($4 + [464])) = (int_64)0
	*(($4 + [472])) = [0]
	*(($4 + [440])) = *($9)
	*(($4 + [488])) = $11
	*(($4 + [492])) = $3
	*(($4 + [496])) = $12
	*(($4 + [520])) = (int_64)-1
	*(($4 + [528])) = (int_64)0
	*(($4 + [536])) = [0]
	*(($4 + [568])) = (int_64)-1
	*(($4 + [576])) = (int_64)0
	*(($4 + [584])) = [0]
	$0 = *($4 + [40])
	*(($4 + [504])) = $0
	*(($4 + [512])) = $0
	*(($4 + [552])) = $0
	*(($4 + [560])) = $0
	*($4 + [480]) = $0
	*($4 + [544]) = $0
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [608])
	$9 = CALL $179(($4 + [672]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $179(($4 + [688]), $9)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [688]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [672]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [672]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($9 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $224($2)
	
.LABEL $label$5
	CALL $134(($4 + [40]))
	if ( ((*($4 + [616]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [624])))
	
.LABEL $label$10
	$global$0 = ($4 + [704])
	return [1]
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1 + [16])
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$4 = CALL $218([8317])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$9 }
	*($2 + [32]) = ($4 << [1])
	$5 = (($2 + [32]) | [1])
	if ( $4 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2 + [32]) = ($6 | [1])
	*($2 + [40]) = $5
	*($2 + [36]) = $4
	
.LABEL $label$8
	CALL memcpy($5, [8317], $4)
	
.LABEL $label$7
	*(($5 + $4)) = [0]
	$4 = *(CALL $15(($1 + [44]), ($2 + [16]), ($2 + [32])))
	$5 = ($4 + [28])
	if ( (*($5) & [1]) ){ goto $label$11 }
	$4 = ($5 + [1])
	goto $label$10 
	
.LABEL $label$11
	$4 = *(($4 + [36]))
	
.LABEL $label$10
	$5 = CALL $216($4, [0], [0])
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($2 + [40]))
	
.LABEL $label$12
	if ( ((uint_32)($5 + [-1]) > (uint_32)[3]) ){ goto $label$21 }
	$6 = *($0 + [28])
	$7 = *($0 + [32])
	CALL $194(($2 + [16]), $5)
	$4 = CALL $188(($2 + [16]), [0], [8505])
	$8 = ($4 + [8])
	*((($2 + [32]) + [8])) = *($8)
	*($2 + [32]) = *($4)
	*($4) = (int_64)0
	*($8) = [0]
	CALL $17($6, $3, CALL $16($7, ($2 + [32])), ($5 & [255]))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($2 + [40]))
	
.LABEL $label$22
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($2 + [24]))
	
.LABEL $label$23
	$9 = *($1)
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$4 = CALL $218([8514])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	$7 = ($1 + [32])
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$20 }
	*($2 + [32]) = ($4 << [1])
	$6 = (($2 + [32]) | [1])
	if ( $4 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$24 }
	$6 = *($0 + [28])
	$7 = *($0 + [32])
	CALL $194(($2 + [16]), [10])
	$4 = CALL $188(($2 + [16]), [0], [8505])
	$8 = ($4 + [8])
	*((($2 + [32]) + [8])) = *($8)
	*($2 + [32]) = *($4)
	*($4) = (int_64)0
	*($8) = [0]
	CALL $17($6, $3, CALL $16($7, ($2 + [32])), [10])
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($2 + [40]))
	
.LABEL $label$25
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*($2 + [24]))
	
.LABEL $label$26
	$9 = *($1)
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$4 = CALL $218([8514])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	$7 = ($1 + [32])
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$15 }
	*($2 + [32]) = ($4 << [1])
	$6 = (($2 + [32]) | [1])
	if ( $4 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$24
	CALL $194($2, $5)
	$4 = CALL $188($2, [0], [8518])
	$6 = ($4 + [8])
	*((($2 + [16]) + [8])) = *($6)
	*($2 + [16]) = *($4)
	*($4) = (int_64)0
	*($6) = [0]
	$4 = CALL $185(($2 + [16]), [8548])
	$7 = ($4 + [8])
	*(($6 = (($2 + [32]) + [8]))) = *($7)
	*($2 + [32]) = *($4)
	*($4) = (int_64)0
	*($7) = [0]
	CALL eosio_assert([0], ( *($6) ? (($2 + [32]) | [1]) : (*($2 + [32]) & [1]) ))
	if ( (*($2 + [32]) & [1]) ){ goto $label$17 }
	if ( (*($2 + [16]) & [1]) ){ goto $label$16 }
	goto $label$3 
	
.LABEL $label$20
	$8 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($2 + [32]) = ($8 | [1])
	*($2 + [40]) = $6
	*($2 + [36]) = $4
	
.LABEL $label$19
	CALL memcpy($6, [8514], $4)
	
.LABEL $label$18
	*(($6 + $4)) = [0]
	CALL $18($0, $9, ($5 & [255]), $7, ($2 + [32]))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [40]))
	goto $label$1 
	
.LABEL $label$17
	CALL _ZdlPv(*($6))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$16
	CALL _ZdlPv(*($2 + [24]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$15
	$8 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($2 + [32]) = ($8 | [1])
	*($2 + [40]) = $6
	*($2 + [36]) = $4
	
.LABEL $label$14
	CALL memcpy($6, [8514], $4)
	
.LABEL $label$13
	*(($6 + $4)) = [0]
	CALL $19($0, $9, [10], $7, ($2 + [32]))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [40]))
	goto $label$1 
	
.LABEL $label$6
	CALL $178(($2 + [32]))
	
.LABEL $label$5
	CALL $178(($2 + [32]))
	
.LABEL $label$4
	CALL $178(($2 + [32]))
	
.LABEL $label$3
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$6 = *($0 + [24])
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$4 = CALL $218([8587])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$30 }
	*($2 + [32]) = ($4 << [1])
	$0 = (($2 + [32]) | [1])
	if ( $4 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$7 = (($4 + [16]) & [-16])
	$0 = CALL _Znwj($7)
	*($2 + [32]) = ($7 | [1])
	*($2 + [40]) = $0
	*($2 + [36]) = $4
	
.LABEL $label$29
	CALL memcpy($0, [8587], $4)
	
.LABEL $label$28
	*(($0 + $4)) = [0]
	CALL $5(($2 + [16]), $3, ($5 & [255]), *($1))
	CALL $20($6, ($2 + [32]), ($2 + [16]))
	CALL $21(($2 + [16]), *($2 + [20]))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*($2 + [40]))
	
.LABEL $label$31
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$27
	CALL $178(($2 + [32]))
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($0 + [4])
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$1 }
	$4 = ($2 + [1])
	$5 = ($2 + [8])
	
.LOOP $label$3:
	$7 = ($0 + [16])
	$12 = ($11 & [1])
	$11 = *($2)
	$10 = ($2 + [4])
	$11 = ( *($10) ? uint_32($11 >> [1]) : $12 )
	$9 = ($6 & [1])
	$6 = *($0 + [16])
	$8 = ($0 + [20])
	$6 = ( *($8) ? uint_32($6 >> [1]) : $9 )
	$13 = ( $6 ? $11 : ($6 <= $11) )
	if ( ($13 == 0) ){ goto $label$7 }
	$9 = CALL $217(( *($5) ? $4 : $12 ), ( *(($0 + [24])) ? ($7 + [1]) : $9 ), $13)
	if ( ($9 == 0) ){ goto $label$7 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = *($0)
	if ( $6 ){ goto $label$4 }
	*($1) = $0
	return $0
	
.LABEL $label$5
	$12 = ($11 & [1])
	$11 = *($7)
	$11 = ( *($8) ? uint_32($11 >> [1]) : $12 )
	$9 = ($6 & [1])
	$6 = *($2)
	$6 = ( *($10) ? uint_32($6 >> [1]) : $9 )
	$13 = ( $6 ? $11 : ($6 <= $11) )
	if ( ($13 == 0) ){ goto $label$9 }
	$7 = CALL $217(( *(($0 + [24])) ? ($7 + [1]) : $12 ), ( *($5) ? $4 : $9 ), $13)
	if ( ($7 == 0) ){ goto $label$9 }
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$2 }
	
.LABEL $label$8
	$3 = ($0 + [4])
	$6 = *($0 + [4])
	if ( ($6 == 0) ){ goto $label$2 }
	$0 = $3
	
.LABEL $label$4
	$3 = $0
	$0 = $6
	goto $label$3 
	
.LABEL $label$2
	*($1) = $0
	return $3
	
.LABEL $label$1
	*($1) = $3
	return $3
}

int_64 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL $23(($2 + [40]), $0, $1)
	$3 = *($2 + [72])
	CALL $190(($2 + [8]), [9211], $1)
	$1 = CALL $185(($2 + [8]), [9223])
	$4 = ($1 + [8])
	*(($0 = (($2 + [24]) + [8]))) = *($4)
	*($2 + [24]) = *($1)
	*($1) = (int_64)0
	*($4) = [0]
	CALL eosio_assert($3, ( *($0) ? (($2 + [24]) | [1]) : (*($2 + [24]) & [1]) ))
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($0))
	
.LABEL $label$1
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($2 + [16]))
	
.LABEL $label$2
	$5 = *($2 + [64])
	if ( (*(($2 + [72])) == 0) ){ goto $label$3 }
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($2 + [56])))
	
.LABEL $label$3
	$global$0 = ($2 + [80])
	return $5
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = *(CALL $22(($0 + [8]), (int_64)1, [8729]) + [8])
	CALL $196(($4 + [32]), $1)
	$0 = CALL $188(($4 + [32]), [0], [8748])
	$6 = ($0 + [8])
	*((($4 + [48]) + [8])) = *($6)
	*($4 + [48]) = *($0)
	*($0) = (int_64)0
	*($6) = [0]
	$0 = CALL $185(($4 + [48]), [8764])
	$6 = ($0 + [8])
	*((($4 + [64]) + [8])) = *($6)
	*($4 + [64]) = *($0)
	*($0) = (int_64)0
	*($6) = [0]
	CALL $194(($4 + [16]), $3)
	$0 = *($4 + [16])
	$3 = ($0 & [1])
	$0 = CALL $186(($4 + [64]), ( *($4 + [24]) ? (($4 + [16]) | [1]) : $3 ), ( *($4 + [20]) ? uint_32($0 >> [1]) : $3 ))
	$3 = ($0 + [8])
	*((($4 + [80]) + [8])) = *($3)
	*($4 + [80]) = *($0)
	*($0) = (int_64)0
	*($3) = [0]
	$0 = CALL $185(($4 + [80]), [8783])
	$3 = ($0 + [8])
	*((($4 + [96]) + [8])) = *($3)
	*($4 + [96]) = *($0)
	*($0) = (int_64)0
	*($3) = [0]
	$2 = ((int_64)$5 * (int_64)$2)
	CALL $196($4, $2)
	$0 = *($4)
	$3 = ($0 & [1])
	$0 = CALL $186(($4 + [96]), ( *($4 + [8]) ? ($4 | [1]) : $3 ), ( *($4 + [4]) ? uint_32($0 >> [1]) : $3 ))
	$3 = ($0 + [8])
	*((($4 + [112]) + [8])) = *($3)
	*($4 + [112]) = *($0)
	*($0) = (int_64)0
	*($3) = [0]
	$0 = CALL $185(($4 + [112]), [8801])
	$6 = ($0 + [8])
	*(($3 = (($4 + [128]) + [8]))) = *($6)
	*($4 + [128]) = *($0)
	*($0) = (int_64)0
	*($6) = [0]
	CALL eosio_assert(((int_64)$2 == (int_64)$1), ( *($3) ? (($4 + [128]) | [1]) : (*($4 + [128]) & [1]) ))
	if ( (*($4 + [128]) & [1]) ){ goto $label$17 }
	if ( (*($4 + [112]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*($3))
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*($4 + [120]))
	$0 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$0 = [1]
	if ( (*($4) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($4 + [96]) & $0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($4 + [96]) & $0) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*($4 + [104]))
	$0 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$0 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($4 + [16]) & $0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($4 + [88]))
	if ( ((*($4 + [16]) & $0) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [24])))
	$0 = [1]
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$0 = [1]
	if ( (*($4 + [64]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($4 + [48]) & $0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($4 + [72]))
	if ( ((*($4 + [48]) & $0) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [56]))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($4 + [32]) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($4 + [144])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($4 + [40]))
	$global$0 = ($4 + [144])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [208])
	$global$0 = $5
	CALL $197(($5 + [72]), $1)
	*(($5 + [96])) = [0]
	*($5 + [88]) = (int_64)0
	$6 = CALL $218([8352])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$22 }
	*($5 + [88]) = ($6 << [1])
	$7 = (($5 + [88]) | [1])
	if ( $6 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($5 + [88]) = ($8 | [1])
	*($5 + [96]) = $7
	*($5 + [92]) = $6
	
.LABEL $label$21
	CALL memcpy($7, [8352], $6)
	
.LABEL $label$20
	*(($7 + $6)) = [0]
	$6 = (($5 + [72]) + [8])
	*(($5 + [108])) = *($6)
	*($6) = [0]
	*($5 + [100 align=4]) = *($5 + [72])
	*($5 + [72]) = (int_64)0
	*((($5 + [56]) + [8])) = [0]
	*($5 + [56]) = (int_64)0
	$6 = CALL $218([8372])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$18 }
	$7 = ($5 + [112])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$25 }
	*($5 + [56]) = ($6 << [1])
	$8 = (($5 + [56]) | [1])
	if ( $6 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$9 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [56]) = ($9 | [1])
	*($5 + [64]) = $8
	*($5 + [60]) = $6
	
.LABEL $label$24
	CALL memcpy($8, [8372], $6)
	
.LABEL $label$23
	*(($8 + $6)) = [0]
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$6 = CALL $218([8361])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$28 }
	*(($5 + [112])) = ($6 << [1])
	$7 = ($7 + [1])
	if ( $6 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*(($5 + [120])) = $7
	*(($5 + [116])) = $6
	*($5 + [112]) = ($8 | [1])
	
.LABEL $label$27
	CALL memcpy($7, [8361], $6)
	
.LABEL $label$26
	*(($7 + $6)) = [0]
	$6 = ($5 + [64])
	*(($5 + [132])) = *($6)
	*(($5 + [124])) = *($5 + [56])
	*($6) = [0]
	*($5 + [56]) = (int_64)0
	CALL $196(($5 + [40]), $2)
	*(($5 + [144])) = [0]
	*($5 + [136]) = (int_64)0
	$7 = ($5 + [136])
	$6 = CALL $218([8422])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$31 }
	*(($5 + [136])) = ($6 << [1])
	$7 = ($7 + [1])
	if ( $6 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*(($5 + [144])) = $7
	*(($5 + [140])) = $6
	*($5 + [136]) = ($8 | [1])
	
.LABEL $label$30
	CALL memcpy($7, [8422], $6)
	
.LABEL $label$29
	*(($7 + $6)) = [0]
	$6 = ($5 + [48])
	*(($5 + [156])) = *($6)
	*(($5 + [148])) = *($5 + [40])
	*($6) = [0]
	*($5 + [40]) = (int_64)0
	CALL $196(($5 + [24]), $3)
	*(($5 + [168])) = [0]
	*($5 + [160]) = (int_64)0
	$7 = ($5 + [160])
	$6 = CALL $218([8443])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$34 }
	*(($5 + [160])) = ($6 << [1])
	$7 = ($7 + [1])
	if ( $6 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*(($5 + [168])) = $7
	*(($5 + [164])) = $6
	*($5 + [160]) = ($8 | [1])
	
.LABEL $label$33
	CALL memcpy($7, [8443], $6)
	
.LABEL $label$32
	*(($7 + $6)) = [0]
	$6 = ($5 + [32])
	*(($5 + [180])) = *($6)
	*(($5 + [172])) = *($5 + [24])
	*($6) = [0]
	*($5 + [24]) = (int_64)0
	CALL $195(($5 + [8]), $4)
	*(($5 + [192])) = [0]
	*($5 + [184]) = (int_64)0
	$7 = ($5 + [184])
	$6 = CALL $218([8462])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$37 }
	*(($5 + [184])) = ($6 << [1])
	$7 = ($7 + [1])
	if ( $6 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*(($5 + [192])) = $7
	*(($5 + [188])) = $6
	*($5 + [184]) = ($8 | [1])
	
.LABEL $label$36
	CALL memcpy($7, [8462], $6)
	
.LABEL $label$35
	*(($7 + $6)) = [0]
	*($0 + [4 align=4]) = (int_64)0
	$6 = ($0 + [4])
	*($0) = $6
	$7 = ($5 + [16])
	*(($4 = ($5 + [204]))) = *($7)
	*(($8 = ($5 + [196]))) = *($5 + [8])
	*($7) = [0]
	*($5 + [8]) = (int_64)0
	CALL $6($0, $6, ($5 + [88]), ($5 + [88]))
	$7 = ($5 + [112])
	CALL $6($0, $6, $7, $7)
	$7 = ($5 + [136])
	CALL $6($0, $6, $7, $7)
	$7 = ($5 + [160])
	CALL $6($0, $6, $7, $7)
	$7 = ($5 + [184])
	CALL $6($0, $6, $7, $7)
	if ( ((*($8) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$38
	if ( ((*($7) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*(($5 + [192])))
	
.LABEL $label$39
	if ( ((*(($5 + [172])) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*(($5 + [180])))
	
.LABEL $label$40
	if ( ((*(($5 + [160])) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($5 + [168])))
	
.LABEL $label$41
	if ( ((*(($5 + [148])) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*(($5 + [156])))
	
.LABEL $label$42
	if ( ((*(($5 + [136])) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*(($5 + [144])))
	
.LABEL $label$43
	if ( ((*(($5 + [124])) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*(($5 + [132])))
	
.LABEL $label$44
	if ( (*(($5 + [112])) & [1]) ){ goto $label$46 }
	$0 = [1]
	if ( (*($5 + [100]) & [1]) ){ goto $label$45 }
	goto $label$13 
	
.LABEL $label$46
	CALL _ZdlPv(*(($5 + [120])))
	$0 = [1]
	if ( ((*($5 + [100]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$45
	CALL _ZdlPv(*(($5 + [108])))
	if ( ((*($5 + [88]) & $0) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$19
	CALL $178(($5 + [88]))
	
.LABEL $label$18
	CALL $178(($5 + [56]))
	
.LABEL $label$17
	CALL $178($7)
	
.LABEL $label$16
	CALL $178($7)
	
.LABEL $label$15
	CALL $178($7)
	
.LABEL $label$14
	CALL $178($7)
	
.LABEL $label$13
	if ( (*($5 + [88]) & $0) ){ goto $label$11 }
	
.LABEL $label$12
	$0 = [1]
	if ( (*($5 + [8]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [96]))
	$0 = [1]
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($5 + [16])))
	if ( ((*($5 + [24]) & $0) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( (*($5 + [24]) & $0) ){ goto $label$7 }
	
.LABEL $label$8
	$0 = [1]
	if ( (*($5 + [40]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($5 + [32])))
	$0 = [1]
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($5 + [48])))
	if ( ((*($5 + [56]) & $0) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( (*($5 + [56]) & $0) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($5 + [72]) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*(($5 + [64])))
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($5 + [80])))
	$global$0 = ($5 + [208])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [208])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$6 = ($global$0 - [256])
	$global$0 = $6
	CALL $197(($6 + [80]), $1)
	*(($6 + [104])) = [0]
	*($6 + [96]) = (int_64)0
	$7 = CALL $218([8352])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$23 }
	*($6 + [96]) = ($7 << [1])
	$8 = (($6 + [96]) | [1])
	if ( $7 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($6 + [96]) = ($9 | [1])
	*($6 + [104]) = $8
	*($6 + [100]) = $7
	
.LABEL $label$22
	CALL memcpy($8, [8352], $7)
	
.LABEL $label$21
	*(($8 + $7)) = [0]
	$7 = (($6 + [80]) + [8])
	*(($6 + [116])) = *($7)
	*($7) = [0]
	*($6 + [108 align=4]) = *($6 + [80])
	*($6 + [80]) = (int_64)0
	*((($6 + [64]) + [8])) = [0]
	*($6 + [64]) = (int_64)0
	$7 = CALL $218([8372])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$19 }
	$8 = ($6 + [120])
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$26 }
	*($6 + [64]) = ($7 << [1])
	$9 = (($6 + [64]) | [1])
	if ( $7 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$10 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($6 + [64]) = ($10 | [1])
	*($6 + [72]) = $9
	*($6 + [68]) = $7
	
.LABEL $label$25
	CALL memcpy($9, [8372], $7)
	
.LABEL $label$24
	*(($9 + $7)) = [0]
	*(($8 + [8])) = [0]
	*($8) = (int_64)0
	$7 = CALL $218([8361])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$29 }
	*(($6 + [120])) = ($7 << [1])
	$8 = ($8 + [1])
	if ( $7 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*(($6 + [128])) = $8
	*(($6 + [124])) = $7
	*($6 + [120]) = ($9 | [1])
	
.LABEL $label$28
	CALL memcpy($8, [8361], $7)
	
.LABEL $label$27
	*(($8 + $7)) = [0]
	$7 = ($6 + [72])
	*(($6 + [140])) = *($7)
	*(($6 + [132])) = *($6 + [64])
	*($7) = [0]
	*($6 + [64]) = (int_64)0
	CALL $196(($6 + [48]), $2)
	*(($6 + [152])) = [0]
	*($6 + [144]) = (int_64)0
	$8 = ($6 + [144])
	$7 = CALL $218([8225])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$32 }
	*(($6 + [144])) = ($7 << [1])
	$8 = ($8 + [1])
	if ( $7 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*(($6 + [152])) = $8
	*(($6 + [148])) = $7
	*($6 + [144]) = ($9 | [1])
	
.LABEL $label$31
	CALL memcpy($8, [8225], $7)
	
.LABEL $label$30
	*(($8 + $7)) = [0]
	$7 = ($6 + [56])
	*(($6 + [164])) = *($7)
	*(($6 + [156])) = *($6 + [48])
	*($7) = [0]
	*($6 + [48]) = (int_64)0
	CALL $196(($6 + [32]), $3)
	*(($6 + [176])) = [0]
	*($6 + [168]) = (int_64)0
	$8 = ($6 + [168])
	$7 = CALL $218([8475])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$35 }
	*(($6 + [168])) = ($7 << [1])
	$9 = ($8 + [1])
	if ( $7 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$8 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*(($6 + [176])) = $9
	*(($6 + [172])) = $7
	*($6 + [168]) = ($8 | [1])
	
.LABEL $label$34
	CALL memcpy($9, [8475], $7)
	
.LABEL $label$33
	$8 = [0]
	*(($9 + $7)) = [0]
	$7 = (($6 + [32]) + [8])
	*(($6 + [188])) = *($7)
	*(($6 + [180])) = *($6 + [32])
	*($7) = [0]
	*($6 + [32]) = (int_64)0
	$11 = ($6 + [192])
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$39 }
	$9 = *([0] + [9940])
	
.LOOP $label$41:
	*((($6 + [243]) + ($7 = $8))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$4 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$7 == (int_32)[12]) )))))
	$8 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[11]) ){ goto $label$40 }
	$4 = ((int_64)$4 << (int_64)5)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$41 }
	
.LABEL $label$40
	*(($6 + [24])) = [0]
	*($6 + [16]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$38 }
	*($6 + [16]) = ($8 << [1])
	$9 = (($6 + [16]) | [1])
	goto $label$37 
	
.LABEL $label$39
	*((($6 + [16]) + [8])) = [0]
	*($6 + [16]) = (int_64)0
	*($6 + [16]) = [0]
	$7 = (($6 + [16]) | [1])
	goto $label$36 
	
.LABEL $label$38
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($6 + [16]) = ($10 | [1])
	*($6 + [24]) = $9
	*($6 + [20]) = $8
	
.LABEL $label$37
	$10 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$42:
	*(($9 + $7)) = *((($6 + [243]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$42 }
	$7 = ($9 + $8)
	
.LABEL $label$36
	*($7) = [0]
	*(($11 + [8])) = [0]
	*($11) = (int_64)0
	$7 = CALL $218([8482])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$45 }
	*(($6 + [192])) = ($7 << [1])
	$9 = ($11 + [1])
	if ( $7 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$8 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*(($6 + [200])) = $9
	*(($6 + [196])) = $7
	*($6 + [192]) = ($8 | [1])
	
.LABEL $label$44
	CALL memcpy($9, [8482], $7)
	
.LABEL $label$43
	$8 = [0]
	*(($9 + $7)) = [0]
	$7 = (($6 + [16]) + [8])
	*(($6 + [212])) = *($7)
	*(($6 + [204])) = *($6 + [16])
	*($7) = [0]
	*($6 + [16]) = (int_64)0
	$11 = ($6 + [216])
	if ( ((int_64)$5 == (int_64)0) ){ goto $label$49 }
	$9 = *([0] + [9940])
	
.LOOP $label$51:
	*((($6 + [243]) + ($7 = $8))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$5 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$7 == (int_32)[12]) )))))
	$8 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[11]) ){ goto $label$50 }
	$5 = ((int_64)$5 << (int_64)5)
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$51 }
	
.LABEL $label$50
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$48 }
	*($6) = ($8 << [1])
	$9 = ($6 | [1])
	goto $label$47 
	
.LABEL $label$49
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	*($6) = [0]
	$7 = ($6 | [1])
	goto $label$46 
	
.LABEL $label$48
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($6) = ($10 | [1])
	*($6 + [8]) = $9
	*($6 + [4]) = $8
	
.LABEL $label$47
	$10 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$52:
	*(($9 + $7)) = *((($6 + [243]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$52 }
	$7 = ($9 + $8)
	
.LABEL $label$46
	*($7) = [0]
	*(($11 + [8])) = [0]
	*($11) = (int_64)0
	$7 = CALL $218([8330])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$55 }
	*(($6 + [216])) = ($7 << [1])
	$8 = ($11 + [1])
	if ( $7 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*(($6 + [224])) = $8
	*(($6 + [220])) = $7
	*($6 + [216]) = ($9 | [1])
	
.LABEL $label$54
	CALL memcpy($8, [8330], $7)
	
.LABEL $label$53
	*(($8 + $7)) = [0]
	*($0 + [4 align=4]) = (int_64)0
	$7 = ($0 + [4])
	*($0) = $7
	$8 = ($6 + [8])
	*(($10 = ($6 + [236]))) = *($8)
	*(($9 = ($6 + [228]))) = *($6)
	*($8) = [0]
	*($6) = (int_64)0
	CALL $6($0, $7, ($6 + [96]), ($6 + [96]))
	$8 = ($6 + [120])
	CALL $6($0, $7, $8, $8)
	$8 = ($6 + [144])
	CALL $6($0, $7, $8, $8)
	$8 = ($6 + [168])
	CALL $6($0, $7, $8, $8)
	$8 = ($6 + [192])
	CALL $6($0, $7, $8, $8)
	$8 = ($6 + [216])
	CALL $6($0, $7, $8, $8)
	if ( ((*($9) & [1]) == 0) ){ goto $label$56 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$56
	if ( ((*($8) & [1]) == 0) ){ goto $label$57 }
	CALL _ZdlPv(*(($6 + [224])))
	
.LABEL $label$57
	if ( ((*(($6 + [204])) & [1]) == 0) ){ goto $label$58 }
	CALL _ZdlPv(*(($6 + [212])))
	
.LABEL $label$58
	if ( ((*(($6 + [192])) & [1]) == 0) ){ goto $label$59 }
	CALL _ZdlPv(*(($6 + [200])))
	
.LABEL $label$59
	if ( ((*(($6 + [180])) & [1]) == 0) ){ goto $label$60 }
	CALL _ZdlPv(*(($6 + [188])))
	
.LABEL $label$60
	if ( ((*(($6 + [168])) & [1]) == 0) ){ goto $label$61 }
	CALL _ZdlPv(*(($6 + [176])))
	
.LABEL $label$61
	if ( ((*(($6 + [156])) & [1]) == 0) ){ goto $label$62 }
	CALL _ZdlPv(*(($6 + [164])))
	
.LABEL $label$62
	if ( ((*(($6 + [144])) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*(($6 + [152])))
	
.LABEL $label$63
	if ( ((*(($6 + [132])) & [1]) == 0) ){ goto $label$64 }
	CALL _ZdlPv(*(($6 + [140])))
	
.LABEL $label$64
	if ( (*(($6 + [120])) & [1]) ){ goto $label$66 }
	$7 = [1]
	if ( (*($6 + [108]) & [1]) ){ goto $label$65 }
	goto $label$13 
	
.LABEL $label$66
	CALL _ZdlPv(*(($6 + [128])))
	$7 = [1]
	if ( ((*($6 + [108]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$65
	CALL _ZdlPv(*(($6 + [116])))
	if ( ((*($6 + [96]) & $7) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$20
	CALL $178(($6 + [96]))
	
.LABEL $label$19
	CALL $178(($6 + [64]))
	
.LABEL $label$18
	CALL $178($8)
	
.LABEL $label$17
	CALL $178($8)
	
.LABEL $label$16
	CALL $178($8)
	
.LABEL $label$15
	CALL $178($11)
	
.LABEL $label$14
	CALL $178($11)
	
.LABEL $label$13
	if ( (*($6 + [96]) & $7) ){ goto $label$11 }
	
.LABEL $label$12
	$7 = [1]
	if ( (*($6 + [16]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($6 + [104]))
	$7 = [1]
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($6 + [24])))
	if ( ((*($6 + [32]) & $7) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( (*($6 + [32]) & $7) ){ goto $label$7 }
	
.LABEL $label$8
	$7 = [1]
	if ( (*($6 + [48]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($6 + [40])))
	$7 = [1]
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($6 + [56])))
	if ( ((*($6 + [64]) & $7) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( (*($6 + [64]) & $7) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($6 + [80]) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*(($6 + [72])))
	if ( ((*($6 + [80]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($6 + [88])))
	$global$0 = ($6 + [256])
	return 
	
.LABEL $label$1
	$global$0 = ($6 + [256])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $12 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL $197(($2 + [16]), $1)
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$3 = CALL $218([8352])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$15 }
	*($2 + [32]) = ($3 << [1])
	$4 = (($2 + [32]) | [1])
	if ( $3 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [32]) = ($5 | [1])
	*($2 + [40]) = $4
	*($2 + [36]) = $3
	
.LABEL $label$14
	CALL memcpy($4, [8352], $3)
	
.LABEL $label$13
	*(($4 + $3)) = [0]
	$3 = (($2 + [16]) + [8])
	*(($2 + [52])) = *($3)
	*($3) = [0]
	*($2 + [44 align=4]) = *($2 + [16])
	*($2 + [16]) = (int_64)0
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = CALL $218([8372])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$11 }
	$4 = ($2 + [56])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$18 }
	*($2) = ($3 << [1])
	$5 = ($2 | [1])
	if ( $3 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $3
	
.LABEL $label$17
	CALL memcpy($5, [8372], $3)
	
.LABEL $label$16
	*(($5 + $3)) = [0]
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$3 = CALL $218([8361])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$21 }
	*(($2 + [56])) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*(($2 + [64])) = $4
	*(($2 + [60])) = $3
	*($2 + [56]) = ($5 | [1])
	
.LABEL $label$20
	CALL memcpy($4, [8361], $3)
	
.LABEL $label$19
	*(($4 + $3)) = [0]
	*($0 + [4 align=4]) = (int_64)0
	$3 = ($0 + [4])
	*($0) = $3
	$4 = ($2 + [8])
	*(($6 = ($2 + [76]))) = *($4)
	*(($5 = ($2 + [68]))) = *($2)
	*($4) = [0]
	*($2) = (int_64)0
	CALL $6($0, $3, ($2 + [32]), ($2 + [32]))
	$4 = ($2 + [56])
	CALL $6($0, $3, $4, $4)
	if ( (*($5) & [1]) ){ goto $label$23 }
	if ( (*($4) & [1]) ){ goto $label$22 }
	goto $label$9 
	
.LABEL $label$23
	CALL _ZdlPv(*($6))
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($2 + [64])))
	$0 = [1]
	if ( ((*($2 + [44]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$12
	CALL $178(($2 + [32]))
	
.LABEL $label$11
	CALL $178($2)
	
.LABEL $label$10
	CALL $178($4)
	
.LABEL $label$9
	$0 = [1]
	if ( (*($2 + [44]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($2 + [32]) & $0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($2 + [52])))
	if ( ((*($2 + [32]) & $0) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($2 + [40]))
	$0 = [1]
	if ( ((*($2) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$0 = [1]
	if ( (*($2) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($2 + [16]) & $0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*(($2 + [8])))
	if ( ((*($2 + [16]) & $0) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($2 + [24])))
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [80])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL $196(($4 + [40]), $1)
	*(($4 + [64])) = [0]
	*($4 + [56]) = (int_64)0
	$5 = CALL $218([8225])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$13 }
	*($4 + [56]) = ($5 << [1])
	$6 = (($4 + [56]) | [1])
	if ( $5 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [56]) = ($7 | [1])
	*($4 + [64]) = $6
	*($4 + [60]) = $5
	
.LABEL $label$12
	CALL memcpy($6, [8225], $5)
	
.LABEL $label$11
	*(($6 + $5)) = [0]
	$5 = ($4 + [48])
	*(($4 + [76])) = *($5)
	*($5) = [0]
	*($4 + [68 align=4]) = *($4 + [40])
	*($4 + [40]) = (int_64)0
	CALL $194(($4 + [24]), $2)
	*(($4 + [88])) = [0]
	*($4 + [80]) = (int_64)0
	$6 = ($4 + [80])
	$5 = CALL $218([8489])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$16 }
	*(($4 + [80])) = ($5 << [1])
	$2 = ($6 + [1])
	if ( $5 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$6 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*(($4 + [88])) = $2
	*(($4 + [84])) = $5
	*($4 + [80]) = ($6 | [1])
	
.LABEL $label$15
	CALL memcpy($2, [8489], $5)
	
.LABEL $label$14
	$6 = [0]
	*(($2 + $5)) = [0]
	$5 = (($4 + [24]) + [8])
	*(($4 + [100])) = *($5)
	*(($4 + [92])) = *($4 + [24])
	*($5) = [0]
	*($4 + [24]) = (int_64)0
	$8 = ($4 + [104])
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$20 }
	$2 = *([0] + [9940])
	
.LOOP $label$22:
	*((($4 + [131]) + ($5 = $6))) = *(($2 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$21 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$22 }
	
.LABEL $label$21
	*(($4 + [16])) = [0]
	*($4 + [8]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$19 }
	*($4 + [8]) = ($6 << [1])
	$2 = (($4 + [8]) | [1])
	goto $label$18 
	
.LABEL $label$20
	*((($4 + [8]) + [8])) = [0]
	*($4 + [8]) = (int_64)0
	*($4 + [8]) = [0]
	$5 = (($4 + [8]) | [1])
	goto $label$17 
	
.LABEL $label$19
	$7 = (($6 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($4 + [8]) = ($7 | [1])
	*($4 + [16]) = $2
	*($4 + [12]) = $6
	
.LABEL $label$18
	$7 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$23:
	*(($2 + $5)) = *((($4 + [131]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$23 }
	$5 = ($2 + $6)
	
.LABEL $label$17
	*($5) = [0]
	*(($8 + [8])) = [0]
	*($8) = (int_64)0
	$5 = CALL $218([8330])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$26 }
	*(($4 + [104])) = ($5 << [1])
	$6 = ($8 + [1])
	if ( $5 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$2 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($2)
	*(($4 + [112])) = $6
	*(($4 + [108])) = $5
	*($4 + [104]) = ($2 | [1])
	
.LABEL $label$25
	CALL memcpy($6, [8330], $5)
	
.LABEL $label$24
	*(($6 + $5)) = [0]
	*($0 + [4 align=4]) = (int_64)0
	$5 = ($0 + [4])
	*($0) = $5
	$6 = ($4 + [16])
	*(($7 = ($4 + [124]))) = *($6)
	*(($2 = ($4 + [116]))) = *($4 + [8])
	*($6) = [0]
	*($4 + [8]) = (int_64)0
	CALL $6($0, $5, ($4 + [56]), ($4 + [56]))
	$6 = ($4 + [80])
	CALL $6($0, $5, $6, $6)
	$6 = ($4 + [104])
	CALL $6($0, $5, $6, $6)
	if ( ((*($2) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$27
	if ( ((*($6) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($4 + [112])))
	
.LABEL $label$28
	if ( ((*(($4 + [92])) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($4 + [100])))
	
.LABEL $label$29
	if ( (*(($4 + [80])) & [1]) ){ goto $label$31 }
	$5 = [1]
	if ( (*($4 + [68]) & [1]) ){ goto $label$30 }
	goto $label$7 
	
.LABEL $label$31
	CALL _ZdlPv(*(($4 + [88])))
	$5 = [1]
	if ( ((*($4 + [68]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$30
	CALL _ZdlPv(*(($4 + [76])))
	if ( ((*($4 + [56]) & $5) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$10
	CALL $178(($4 + [56]))
	
.LABEL $label$9
	CALL $178($6)
	
.LABEL $label$8
	CALL $178($8)
	
.LABEL $label$7
	if ( (*($4 + [56]) & $5) ){ goto $label$5 }
	
.LABEL $label$6
	$5 = [1]
	if ( (*($4 + [24]) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($4 + [64]))
	$5 = [1]
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($4 + [32])))
	if ( ((*($4 + [40]) & $5) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($4 + [40]) & $5) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($4 + [144])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*(($4 + [48])))
	$global$0 = ($4 + [144])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $218($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $181($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	$5 = ($global$0 - [208])
	$global$0 = $5
	*($5 + [168]) = [0]
	$6 = (int_64)0
	*($5 + [160]) = (int_64)0
	CALL $24(($5 + [144]), $0, $2)
	*($5 + [136]) = [0]
	*($5 + [128]) = (int_64)0
	$7 = *($0 + [8])
	$8 = ($7 + [24])
	$9 = *($8)
	if ( ((int_64)$9 != (int_64)-1) ){ goto $label$1 }
	$10 = ($7 + [8])
	$11 = CALL db_lowerbound_i64(*($10), *(($7 + [16])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$2 }
	CALL $25($10, $11)
	*($5 + [28]) = [0]
	*($5 + [24]) = $10
	$9 = *(*(CALL $26(($5 + [24])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($7 + [24])) = $6
	$9 = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($9 <= (int_64)-2), [9977])
	$7 = *($5 + [144])
	if ( ((int_32)*($5 + [148]) == (int_32)$7) ){ goto $label$6 }
	$6 = *($8)
	$12 = (($5 + [160]) + [8])
	$13 = ($5 + [33])
	$14 = ($0 + [20])
	$8 = [0]
	$9 = (int_64)0
	
.LOOP $label$7:
	$15 = *(($7 + $8))
	$7 = *($5 + [164])
	if ( ((uint_32)$7 >= (uint_32)*($12)) ){ goto $label$12 }
	*($7) = (int_64)0
	*(($7 + [8])) = [0]
	$10 = CALL $218([8633])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$11 }
	*($7) = ($10 << [1])
	$11 = ($7 + [1])
	if ( $10 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	CALL $27(($5 + [160]), [8633])
	goto $label$8 
	
.LABEL $label$11
	$16 = (($10 + [16]) & [-16])
	$11 = CALL _Znwj($16)
	*($7) = ($16 | [1])
	*($7 + [8]) = $11
	*($7 + [4]) = $10
	
.LABEL $label$10
	CALL memcpy($11, [8633], $10)
	
.LABEL $label$9
	*(($11 + $10)) = [0]
	*($5 + [164]) = (*($5 + [164]) + [12])
	
.LABEL $label$8
	*(($11 = (($5 + [24]) + [8]))) = (int_64)0
	*($13) = $15
	*($5 + [24]) = ((int_64)$6 + (int_64)$9)
	*(($7 = CALL _Znwj([16]))) = (int_64)644245094750
	*($7 + [8 align=4]) = (int_64)1073741824250
	$10 = [0]
	$16 = *($7)
	$15 = CALL $28(*($14), [1000])
	if ( ((int_32)$15 < (int_32)$16) ){ goto $label$13 }
	$10 = [1]
	$16 = (*($7 + [4]) + $16)
	if ( ((int_32)$15 < (int_32)$16) ){ goto $label$13 }
	$10 = [2]
	$16 = (*($7 + [8]) + $16)
	if ( ((int_32)$15 < (int_32)$16) ){ goto $label$13 }
	$10 = [3]
	if ( ((int_32)$15 >= (int_32)(*($7 + [12]) + $16)) ){ goto $label$4 }
	
.LABEL $label$13
	*($11) = $10
	CALL _ZdlPv($7)
	$7 = *($5 + [132])
	if ( ((int_32)$7 == (int_32)*((($5 + [128]) + [8]))) ){ goto $label$15 }
	*($7) = *($5 + [24])
	*(($7 + [8])) = *($11)
	*($5 + [132]) = ($7 + [16])
	goto $label$14 
	
.LABEL $label$15
	CALL $29(($5 + [128]), ($5 + [24]))
	
.LABEL $label$14
	$8 = ($8 + [1])
	$7 = *($5 + [144])
	$9 = ((int_64)$9 + (int_64)1)
	if ( (uint_64)($9 <= (CASTING uint_64)(uint_32 (*($5 + [148]) - $7))) ){ goto $label$7 }
	
.LABEL $label$6
	CALL $30(*($0 + [12]), $1, ($5 + [128]), $2, $4)
	$7 = CALL $218([8372])
	if ( ($7 <= [8]) ){ goto $label$18 }
	CALL eosio_assert([0], [10368])
	goto $label$17 
	
.LABEL $label$18
	if ( ($7 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	$9 = (int_64)0
	
.LOOP $label$19:
	$8 = *(($7 + [8371]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$20 }
	CALL eosio_assert([0], [10413])
	
.LABEL $label$20
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$19 }
	$17 = ((int_64)$9 << (int_64)8)
	goto $label$3 
	
.LABEL $label$16
	$17 = (int_64)0
	goto $label$3 
	
.LABEL $label$5
	CALL $178($7)
	
.LABEL $label$4
	CALL $3([8685])
	
.LABEL $label$3
	$7 = *($5 + [144])
	$8 = *($5 + [148])
	CALL eosio_assert([1], [10163])
	$9 = (uint_64)$17 >> (uint_64)(int_64)8)
	$18 = (CASTING uint_64)(uint_32 ($8 - $7))
	$7 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$6 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$9 = $6
	$8 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$9 = $6
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $8 ){ goto $label$25 }
	$8 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$8 = [0]
	
.LABEL $label$21
	CALL eosio_assert($8, [9272])
	$9 = *($0)
	*(($5 + [16])) = [0]
	*($5 + [8]) = (int_64)0
	$7 = CALL $218([8372])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$30 }
	*($5 + [8]) = ($7 << [1])
	$8 = (($5 + [8]) | [1])
	if ( $7 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$10 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($5 + [8]) = ($10 | [1])
	*($5 + [16]) = $8
	*($5 + [12]) = $7
	
.LABEL $label$29
	CALL memcpy($8, [8372], $7)
	
.LABEL $label$28
	$15 = [0]
	*(($8 + $7)) = [0]
	*((($5 + [24]) + [16])) = $17
	*(($5 + [56])) = [0]
	*($5 + [32]) = $18
	*($5 + [24]) = $1
	*($5 + [48]) = (int_64)0
	$7 = (*($5 + [164]) - *($5 + [160]))
	$11 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$31 }
	if ( ((uint_32)$11 >= (uint_32)[357913942]) ){ goto $label$26 }
	$8 = CALL _Znwj($7)
	*(($5 + [48])) = $8
	*(($10 = ($5 + [52]))) = $8
	*(($5 + [56])) = ($8 + ((int_32)$11 * (int_32)[12]))
	$11 = *($5 + [164])
	$7 = *($5 + [160])
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$31 }
	
.LOOP $label$32:
	CALL $179($8, $7)
	$8 = (*($10) + [12])
	*($10) = $8
	$7 = ($7 + [12])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$32 }
	
.LABEL $label$31
	$7 = ($5 + [16])
	*(($5 + [68])) = *($7)
	*($7) = [0]
	*($5 + [60 align=4]) = *($5 + [8])
	*($5 + [8]) = (int_64)0
	CALL $179(($5 + [72]), $3)
	*(($8 = (($5 + [88]) + [24]))) = [0]
	*($5 + [96]) = (int_64)8516769789752901632
	*($5 + [88]) = $9
	*($5 + [104]) = (int_64)0
	*(($7 = CALL _Znwj([16]))) = $9
	*($7 + [8]) = (int_64)3617214756542218240
	*(($5 + [124])) = [0]
	$10 = ($7 + [16])
	*($8) = $10
	*(($5 + [108])) = $10
	*($5 + [104]) = $7
	*($5 + [116 align=4]) = (int_64)0
	*($5 + [176]) = [0]
	*($5 + [184]) = ($5 + [176])
	*($5 + [192]) = ($5 + [24])
	CALL $31(($5 + [192]), ($5 + [184]))
	$7 = *($5 + [176])
	if ( ($7 == 0) ){ goto $label$34 }
	$8 = ($5 + [116])
	CALL $32($8, $7)
	$15 = *(($5 + [120]))
	$7 = *($8)
	goto $label$33 
	
.LABEL $label$34
	$7 = [0]
	
.LABEL $label$33
	*($5 + [196]) = $7
	*($5 + [192]) = $7
	*($5 + [200]) = $15
	*($5 + [176]) = ($5 + [192])
	*($5 + [184]) = ($5 + [24])
	CALL $33(($5 + [184]), ($5 + [176]))
	CALL $34(($5 + [192]), ($5 + [88]))
	$7 = *($5 + [192])
	CALL send_inline($7, (*($5 + [196]) - $7))
	$7 = *($5 + [192])
	if ( ($7 == 0) ){ goto $label$35 }
	*($5 + [196]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$35
	$7 = *($5 + [116])
	if ( ($7 == 0) ){ goto $label$36 }
	*(($5 + [120])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$36
	$7 = *($5 + [104])
	if ( ($7 == 0) ){ goto $label$37 }
	*(($5 + [108])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$37
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($5 + [80])))
	
.LABEL $label$38
	if ( ((*(($5 + [60])) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*(($5 + [68])))
	
.LABEL $label$39
	$10 = *(($5 + [48]))
	if ( ($10 == 0) ){ goto $label$40 }
	$11 = ($5 + [52])
	$8 = *($11)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$42 }
	
.LOOP $label$43:
	$7 = ($8 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$44
	$8 = $7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$43 }
	$7 = *(($5 + [48]))
	goto $label$41 
	
.LABEL $label$42
	$7 = $10
	
.LABEL $label$41
	*($11) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$40
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$45
	$7 = *($5 + [128])
	if ( ($7 == 0) ){ goto $label$46 }
	*($5 + [132]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$46
	$7 = *($5 + [144])
	if ( ($7 == 0) ){ goto $label$47 }
	*($5 + [148]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$47
	$10 = *($5 + [160])
	if ( ($10 == 0) ){ goto $label$48 }
	$8 = *($5 + [164])
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$50 }
	
.LOOP $label$51:
	$7 = ($8 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$52
	$8 = $7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$51 }
	$7 = *($5 + [160])
	goto $label$49 
	
.LABEL $label$50
	$7 = $10
	
.LABEL $label$49
	*($5 + [164]) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$48
	$global$0 = ($5 + [208])
	return (unreachable)
	
.LABEL $label$27
	CALL $178(($5 + [8]))
	
.LABEL $label$26
	CALL $201((($5 + [24]) + [24]))
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$5 = ($global$0 - [192])
	$global$0 = $5
	$6 = *($0 + [8])
	$7 = ($6 + [24])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [8])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [16])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $25($9, $10)
	*($5 + [28]) = [0]
	*($5 + [24]) = $9
	$8 = *(*(CALL $26(($5 + [24])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [24])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9977])
	$8 = *($7)
	*((($5 + [24]) + [8])) = [0]
	*($5 + [24]) = (int_64)0
	$6 = CALL $218([8633])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$7 }
	*($5 + [24]) = ($6 << [1])
	$7 = (($5 + [24]) | [1])
	if ( $6 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($5 + [24]) = ($9 | [1])
	*($5 + [32]) = $7
	*($5 + [28]) = $6
	
.LABEL $label$6
	CALL memcpy($7, [8633], $6)
	
.LABEL $label$5
	*(($7 + $6)) = [0]
	$6 = CALL _Znwj([12])
	*($5 + [144]) = $6
	$7 = ($6 + [12])
	*($5 + [152]) = $7
	CALL $179($6, ($5 + [24]))
	*($5 + [148]) = $7
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($5 + [32]))
	
.LABEL $label$8
	*($5 + [24]) = $8
	*($5 + [32]) = CALL $28(*($0 + [20]), [4])
	*(($6 = CALL _Znwj([16]))) = *($5 + [24])
	*(($6 + [8])) = *($5 + [32])
	*($5 + [128]) = $6
	$6 = ($6 + [16])
	*($5 + [136]) = $6
	*($5 + [132]) = $6
	CALL $35(*($0 + [16]), $1, ($5 + [128]), $2, $4)
	$6 = CALL $218([8410])
	if ( ($6 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [10368])
	goto $label$10 
	
.LABEL $label$11
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$8 = (int_64)0
	
.LOOP $label$12:
	$7 = *(($6 + [8409]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [10413])
	
.LABEL $label$13
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$12 }
	$11 = ((int_64)$8 << (int_64)8)
	goto $label$3 
	
.LABEL $label$9
	$11 = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	CALL $178(($5 + [24]))
	
.LABEL $label$3
	CALL eosio_assert([1], [10163])
	$8 = (uint_64)$11 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$8 = $12
	$7 = [1]
	$2 = $6
	$6 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$8 = $12
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$2 = ($6 + [1])
	$6 = $2
	if ( $7 ){ goto $label$18 }
	$7 = [1]
	$6 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	
.LABEL $label$14
	CALL eosio_assert($7, [9272])
	$8 = *($0)
	*(($5 + [16])) = [0]
	*($5 + [8]) = (int_64)0
	$6 = CALL $218([8410])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$23 }
	*($5 + [8]) = ($6 << [1])
	$7 = (($5 + [8]) | [1])
	if ( $6 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$2 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($2)
	*($5 + [8]) = ($2 | [1])
	*($5 + [16]) = $7
	*($5 + [12]) = $6
	
.LABEL $label$22
	CALL memcpy($7, [8410], $6)
	
.LABEL $label$21
	$9 = [0]
	*(($7 + $6)) = [0]
	*((($5 + [24]) + [16])) = $11
	*(($5 + [56])) = [0]
	*($5 + [32]) = (int_64)1
	*($5 + [24]) = $1
	*($5 + [48]) = (int_64)0
	$4 = *($5 + [144])
	$6 = *($5 + [148])
	$7 = ($6 - $4)
	$10 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$24 }
	if ( ((uint_32)$10 >= (uint_32)[357913942]) ){ goto $label$19 }
	$2 = CALL _Znwj($7)
	*(($5 + [48])) = $2
	*(($0 = ($5 + [52]))) = $2
	*(($5 + [56])) = ($2 + ((int_32)$10 * (int_32)[12]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$24 }
	$7 = $4
	
.LOOP $label$25:
	CALL $179($2, $7)
	$2 = (*($0) + [12])
	*($0) = $2
	$7 = ($7 + [12])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$25 }
	
.LABEL $label$24
	$7 = ($5 + [16])
	*(($5 + [68])) = *($7)
	*($7) = [0]
	*($5 + [60 align=4]) = *($5 + [8])
	*($5 + [8]) = (int_64)0
	CALL $179(($5 + [72]), $3)
	*($5 + [96]) = (int_64)8516769789752901632
	*($5 + [88]) = $8
	*(($7 = CALL _Znwj([16]))) = $8
	*($7 + [8]) = (int_64)3617214756542218240
	*(($5 + [124])) = [0]
	$2 = ($7 + [16])
	*((($5 + [88]) + [24])) = $2
	*(($5 + [108])) = $2
	*($5 + [104]) = $7
	*($5 + [116 align=4]) = (int_64)0
	*($5 + [160]) = [0]
	*($5 + [168]) = ($5 + [160])
	*($5 + [176]) = ($5 + [24])
	CALL $31(($5 + [176]), ($5 + [168]))
	$7 = *($5 + [160])
	if ( ($7 == 0) ){ goto $label$27 }
	$2 = ($5 + [116])
	CALL $32($2, $7)
	$9 = *(($5 + [120]))
	$7 = *($2)
	goto $label$26 
	
.LABEL $label$27
	$7 = [0]
	
.LABEL $label$26
	*($5 + [180]) = $7
	*($5 + [176]) = $7
	*($5 + [184]) = $9
	*($5 + [160]) = ($5 + [176])
	*($5 + [168]) = ($5 + [24])
	CALL $33(($5 + [168]), ($5 + [160]))
	CALL $34(($5 + [176]), ($5 + [88]))
	$7 = *($5 + [176])
	CALL send_inline($7, (*($5 + [180]) - $7))
	$7 = *($5 + [176])
	if ( ($7 == 0) ){ goto $label$28 }
	*($5 + [180]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$28
	$7 = *($5 + [116])
	if ( ($7 == 0) ){ goto $label$29 }
	*(($5 + [120])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$29
	$7 = *($5 + [104])
	if ( ($7 == 0) ){ goto $label$30 }
	*(($5 + [108])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$30
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($5 + [80])))
	
.LABEL $label$31
	if ( ((*(($5 + [60])) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*(($5 + [68])))
	
.LABEL $label$32
	$0 = *(($5 + [48]))
	if ( ($0 == 0) ){ goto $label$33 }
	$9 = ($5 + [52])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$35 }
	
.LOOP $label$36:
	$7 = ($2 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$37
	$2 = $7
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$36 }
	$7 = *(($5 + [48]))
	goto $label$34 
	
.LABEL $label$35
	$7 = $0
	
.LABEL $label$34
	*($9) = $0
	CALL _ZdlPv($7)
	
.LABEL $label$33
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$38
	$7 = *($5 + [128])
	if ( ($7 == 0) ){ goto $label$39 }
	*($5 + [132]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$39
	if ( ($4 == 0) ){ goto $label$40 }
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$41 }
	
.LOOP $label$42:
	$7 = ($6 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$43
	$6 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$42 }
	
.LABEL $label$41
	*($5 + [148]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$40
	$global$0 = ($5 + [192])
	return (unreachable)
	
.LABEL $label$20
	CALL $178(($5 + [8]))
	
.LABEL $label$19
	CALL $201((($5 + [24]) + [24]))
	(unreachable)
	(unreachable)
}

void .FUNC $184 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $187 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $181($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $218 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $186 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $181($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $181($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $116 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [80])
	$global$0 = $6
	*(($7 = (($6 + [64]) + [8]))) = *(($2 + [8]))
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = [0]
	*($6 + [64]) = *($2)
	$2 = (*($3 + [4]) - *($3))
	$8 = ((int_32)$2 / (int_32)[12])
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ((uint_32)$8 >= (uint_32)[357913942]) ){ goto $label$6 }
	$2 = CALL _Znwj($2)
	*(($6 + [56])) = ($2 + ((int_32)$8 * (int_32)[12]))
	*($6 + [48]) = $2
	*($6 + [52]) = $2
	$3 = *(($3 + [4]))
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$9 = CALL $179($2, $8)
	$2 = ($2 + [12])
	$8 = ($8 + [12])
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$8 }
	*($6 + [52]) = ($9 + [12])
	
.LABEL $label$7
	$2 = CALL $179(($6 + [32]), $4)
	$8 = CALL $179(($6 + [16]), $5)
	*(($6 + [8])) = *($7)
	*($6) = *($6 + [64])
	CALL $94(($0 + [32]), $1, $6, ($6 + [48]), $2, $8)
	if ( (*($8) & [1]) ){ goto $label$10 }
	if ( (*($2) & [1]) ){ goto $label$9 }
	goto $label$5 
	
.LABEL $label$10
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$9
	CALL _ZdlPv(*($2 + [8]))
	$3 = *($6 + [48])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	CALL $201(($6 + [48]))
	
.LABEL $label$5
	$3 = *($6 + [48])
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = *($6 + [52])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$11:
	$2 = ($8 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$12
	$8 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$11 }
	$2 = *($6 + [48])
	goto $label$1 
	
.LABEL $label$3
	$global$0 = ($6 + [80])
	return 
	
.LABEL $label$2
	$2 = $3
	
.LABEL $label$1
	*($6 + [52]) = $3
	CALL _ZdlPv($2)
	$global$0 = ($6 + [80])
	(unreachable)
}

void .FUNC $117 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$6 = ($global$0 - [64])
	$global$0 = $6
	CALL require_auth($1)
	$7 = *($3 + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)*($4 + [8])), [9875])
	$8 = CALL $218([9780])
	if ( ($8 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [10368])
	goto $label$3 
	
.LABEL $label$4
	if ( ($8 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = (int_64)0
	
.LOOP $label$5:
	$10 = *(($8 + [9779]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10413])
	
.LABEL $label$6
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)$9), [9912])
	$11 = *(($3 + [8]))
	*((($6 + [48]) + [8])) = $11
	$9 = *(($4 + [8]))
	$7 = *($4)
	$12 = *($3)
	*((($6 + [16]) + [8])) = $11
	*(($6 + [8])) = $9
	*((($6 + [32]) + [8])) = $9
	*($6 + [48]) = $12
	*($6 + [16]) = $12
	*($6) = $7
	*($6 + [32]) = $7
	CALL $54(($0 + [328]), $1, $2, ($6 + [16]), $6, $5)
	$global$0 = ($6 + [64])
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	if ( ($3 == 0) ){ goto $label$2 }
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [8])) = ($3 + ($4 << [3]))
	*($2) = $3
	*($2 + [4]) = $3
	$4 = *($1)
	$1 = (*(($1 + [4])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($3, $4, $1)
	*($2 + [4]) = ($3 + $1)
	
.LABEL $label$2
	CALL $50(($0 + [280]), $2)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$3 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $201($2)
}

void .FUNC $115 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	$2 = CALL $179($3, $2)
	CALL $91(($0 + [32]), $1, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($2 + [24])) = ($3 + ($4 << [3]))
	*($2 + [16]) = $3
	*($2 + [20]) = $3
	$5 = *($1)
	$4 = (*(($1 + [4])) - $5)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $4)
	*($2 + [20]) = ($3 + $4)
	
.LABEL $label$3
	CALL $81(($0 + [176]), ($2 + [16]))
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$4 }
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$3 = (*(($1 + [4])) - *($1))
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [8])) = ($3 + ($4 << [3]))
	*($2) = $3
	*($2 + [4]) = $3
	$4 = *($1)
	$1 = (*(($1 + [4])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($3, $4, $1)
	*($2 + [4]) = (*($2 + [4]) + $1)
	
.LABEL $label$5
	CALL $105(($0 + [32]), $2)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$6 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $201(($2 + [16]))
	
.LABEL $label$1
	CALL $201($2)
	(unreachable)
}

void .FUNC $113 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [64])
	$global$0 = $1
	CALL require_auth(*($0))
	*($1 + [56]) = [0]
	*($1 + [48]) = (int_64)0
	CALL $46(($0 + [120]), ($1 + [48]))
	$2 = *($1 + [48])
	if ( ($2 == 0) ){ goto $label$1 }
	*($1 + [52]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$1
	*($1 + [40]) = [0]
	*($1 + [32]) = (int_64)0
	CALL $105(($0 + [32]), ($1 + [32]))
	$2 = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	*($1 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	CALL $66(($0 + [328]))
	*($1 + [24]) = [0]
	*($1 + [16]) = (int_64)0
	CALL $50(($0 + [280]), ($1 + [16]))
	$2 = *($1 + [16])
	if ( ($2 == 0) ){ goto $label$3 }
	*($1 + [20]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$3
	CALL $79(($0 + [440]))
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	CALL $81(($0 + [176]), $1)
	$0 = *($1)
	if ( ($0 == 0) ){ goto $label$4 }
	*($1 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($1 + [64])
}

void .FUNC $110 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth(*($0))
	$2 = CALL $179($3, $2)
	CALL require_auth(*($0))
	CALL $38(($0 + [80]), $1, [10], $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($2 + [24])) = ($3 + ($4 << [3]))
	*($2 + [16]) = $3
	*($2 + [20]) = $3
	$5 = *($1)
	$4 = (*(($1 + [4])) - $5)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $4)
	*($2 + [20]) = ($3 + $4)
	
.LABEL $label$3
	CALL $46(($0 + [120]), ($2 + [16]))
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$4 }
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$3 = (*(($1 + [4])) - *($1))
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [8])) = ($3 + ($4 << [3]))
	*($2) = $3
	*($2 + [4]) = $3
	$4 = *($1)
	$1 = (*(($1 + [4])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($3, $4, $1)
	*($2 + [4]) = (*($2 + [4]) + $1)
	
.LABEL $label$5
	CALL $105(($0 + [32]), $2)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$6 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $201(($2 + [16]))
	
.LABEL $label$1
	CALL $201($2)
	(unreachable)
}

void .FUNC $118 (int_32 $0, int_64 $1)
{
	CALL $65(($0 + [328]), $1)
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2)
{
	CALL require_auth(*($0))
	CALL $84(($0 + [504]), $1, $2)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [4])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$6 = int_32($7 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [4]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $201($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [4])))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($2 + [12]) = ((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$9())
	CALL sha256(($2 + [12]), [4], ($2 + [16]))
	$3 = ($0 + [8])
	$4 = ($0 + [16])
	$5 = CALL db_lowerbound_i64(*($0 + [8]), *($4), (int_64)-5069194683472527360, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = ($0 + [24])
	$5 = CALL $39($3, $5)
	$7 = (($2 + [48]) | [8])
	$4 = ($2 + [48])
	goto $label$1 
	
.LABEL $label$2
	$8 = *($0)
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$7()), [10967])
	*(($5 = CALL _Znwj([24])) + [8]) = [1]
	*($5) = (int_64)1
	*($5 + [12]) = $3
	CALL eosio_assert([1], [10212])
	CALL memcpy(($2 + [48]), $5, [8])
	CALL eosio_assert([1], [10212])
	$7 = (($2 + [48]) | [8])
	CALL memcpy($7, ($5 + [8]), [4])
	$9 = *($5)
	$10 = CALL db_store_i64(*($4), (int_64)-5069194683472527360, $8, $9, ($2 + [48]), [12])
	*($5 + [16]) = $10
	$6 = ($0 + [24])
	if ( (uint_64)($9 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($2 + [72]) = $5
	$9 = *($5)
	*($2 + [48]) = $9
	*($2 + [68]) = $10
	$11 = ($0 + [36])
	$4 = *($11)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [40]))) ){ goto $label$6 }
	*($4 + [8]) = $9
	*($4 + [16]) = $10
	*($2 + [72]) = [0]
	*($4) = $5
	*($11) = ($4 + [24])
	$4 = *($2 + [72])
	*($2 + [72]) = [0]
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $40(($0 + [32]), ($2 + [72]), ($2 + [48]), ($2 + [68]))
	$4 = *($2 + [72])
	*($2 + [72]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = ($2 + [48])
	
.LABEL $label$1
	$10 = *($5 + [8])
	$9 = CALL current_time()
	$8 = CALL $209(*($2 + [25]))
	$12 = *($0)
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [11281])
	CALL eosio_assert(((int_32)*($5 + [12]) == (int_32)$3), [11316])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$7()), [11362])
	$8 = ((int_64)((int_64)$8 + (int_64)(CASTING uint_64)(uint_32 ($10 + (CASTING uint_32)(uint_64 ((uint_64)$9 / (uint_64)(int_64)1000000))))) % (int_64)65537)
	*($5 + [8]) = $8
	$9 = *($5)
	CALL eosio_assert([1], [11413])
	CALL eosio_assert([1], [10212])
	CALL memcpy($4, $5, [8])
	CALL eosio_assert([1], [10212])
	CALL memcpy($7, ($5 + [8]), [4])
	CALL db_update_i64(*($5 + [16]), $12, $4, [12])
	if ( (uint_64)($9 <= *(($0 + [24]))) ){ goto $label$7 }
	*($6) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$global$0 = ($2 + [80])
	return (CASTING uint_32)(uint_64 ((int_64)$8 % (int_64)(CASTING int_64)(int_32 $1)))
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $21($0, *($1))
	CALL $21($0, *($1 + [4]))
	if ( ((*(($1 + [28])) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($1 + [36])))
	
.LABEL $label$2
	if ( ((*(($1 + [16])) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$3
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = *($0)
	*($3 + [4]) = $1
	*($3) = $0
	*($3 + [8]) = $2
	*($3 + [40]) = $4
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)CALL $fimport$7()), [10967])
	$1 = ($0 + [8])
	*($3 + [16]) = $1
	*($3 + [20]) = $3
	*($3 + [24]) = ($3 + [40])
	*(($2 = CALL _Znwj([112])) + [16]) = [0]
	*($2 + [8 align=4]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [84 align=4]) = (int_64)0
	*($2 + [92]) = $1
	*($2 + [80]) = ($2 + [84])
	CALL $36(($3 + [16]), $2)
	*($3 + [32]) = $2
	$4 = *($2)
	*($3 + [16]) = $4
	$5 = *($2 + [96])
	*($3 + [12]) = $5
	$6 = ($0 + [36])
	$1 = *($6)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [40]))) ){ goto $label$3 }
	*($1 + [8]) = $4
	*($1 + [16]) = $5
	*($3 + [32]) = [0]
	*($1) = $2
	*($6) = ($1 + [24])
	$2 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $37(($0 + [32]), ($3 + [32]), ($3 + [16]), ($3 + [12]))
	$2 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $21(($2 + [80]), *(($2 + [84])))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($2)
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = CALL db_lowerbound_i64(*($1 + [8]), *(($1 + [16])), (int_64)-5918709575225180160, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$6 = ($2 + [1])
	$7 = ($1 + [8])
	$8 = CALL $86($7, $4)
	$9 = ($3 + [9])
	$10 = ($3 + [8])
	$11 = ($3 + [24])
	$12 = ($2 + [4])
	$13 = ($3 + [12])
	$14 = ($3 + [16])
	$15 = ($0 + [32])
	
.LOOP $label$3:
	*($3) = *($8)
	$16 = CALL $179($10, ($8 + [8]))
	*($11) = *($8 + [24])
	$4 = [0]
	$1 = ($1 & [1])
	$1 = *($2)
	$18 = ($1 & [1])
	$1 = *($10)
	$17 = uint_32($1 >> [1])
	$19 = ( *($13) ? $17 : $18 )
	if ( ((int_32)$19 != (int_32)( *($12) ? uint_32($1 >> [1]) : $1 )) ){ goto $label$7 }
	$1 = ( *(($2 + [8])) ? $6 : $1 )
	if ( $18 ){ goto $label$9 }
	if ( ($19 == 0) ){ goto $label$8 }
	$18 = ([0] - $17)
	$4 = $9
	
.LOOP $label$10:
	if ( ((int_32)*($4) != (int_32)*($1)) ){ goto $label$6 }
	$1 = ($1 + [1])
	$4 = ($4 + [1])
	$18 = ($18 + [1])
	if ( $18 ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ($19 == 0) ){ goto $label$8 }
	$4 = [0]
	if ( CALL $217(( *($14) ? $9 : $18 ), $1, $19) ){ goto $label$7 }
	
.LABEL $label$8
	*($0) = *($3)
	CALL $179($5, $16)
	$4 = [1]
	*($15) = [1]
	*(($0 + [24])) = *($11)
	
.LABEL $label$7
	if ( ((*($10) & [1]) == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$4 = [0]
	if ( ((*($10) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($14))
	
.LABEL $label$4
	if ( $4 ){ goto $label$1 }
	CALL eosio_assert([1], [11018])
	$1 = CALL db_next_i64(*($8 + [36]), $3)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $86($7, $1)
	goto $label$3 
	
.LABEL $label$2
	*($0) = [0]
	*(($0 + [32])) = [0]
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

int_32 .FUNC $22 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [11048])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3021352400012181504, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $53($0, $4)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$0), [11048])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10131])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $221($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56]) = [0]
	*($5 + [60]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [48])
	CALL $141(($3 + [40]), ($3 + [32]))
	*($5 + [64]) = $1
	*($5 + [68 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $98(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $224($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$10
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($2 + [-1])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$9 }
	goto $label$13 
	
.LABEL $label$13
	*(($2 = CALL _Znwj([16]))) = (int_64)858993459950
	*($2 + [8 align=4]) = (int_64)8589934640
	$4 = [0]
	$6 = *($2)
	$5 = CALL $28(*($1 + [20]), [1000])
	if ( ((int_32)$5 < (int_32)$6) ){ goto $label$14 }
	$4 = [1]
	$6 = (*($2 + [4]) + $6)
	if ( ((int_32)$5 < (int_32)$6) ){ goto $label$14 }
	$4 = [2]
	$6 = (*($2 + [8]) + $6)
	if ( ((int_32)$5 < (int_32)$6) ){ goto $label$14 }
	$4 = [3]
	if ( ((int_32)$5 >= (int_32)(*($2 + [12]) + $6)) ){ goto $label$4 }
	
.LABEL $label$14
	*($3 + [32]) = $4
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [8]))) ){ goto $label$8 }
	*($6) = $4
	*($5) = (*($5) + [1])
	goto $label$7 
	
.LABEL $label$12
	*(($2 = CALL _Znwj([16]))) = (int_64)2362232012900
	*($2 + [8 align=4]) = (int_64)214748365100
	*($3 + [32]) = $2
	$4 = ($2 + [16])
	*($3 + [40]) = $4
	*($3 + [36]) = $4
	CALL $42($1, ($3 + [32]), [2], $0)
	if ( ($2 == 0) ){ goto $label$2 }
	*($3 + [36]) = $2
	CALL _ZdlPv($2)
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$11
	$4 = CALL _Znwj([30])
	$7 = ($4 + [30])
	$2 = *($0)
	$8 = ($0 + [4])
	$5 = (*($8) - $2)
	$6 = ($4 - $5)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$15 }
	CALL memcpy($6, $2, $5)
	$2 = *($0)
	
.LABEL $label$15
	*($0) = $6
	*($8) = $4
	*(($0 + [8])) = $7
	if ( ($2 == 0) ){ goto $label$16 }
	CALL _ZdlPv($2)
	
.LABEL $label$16
	*(($2 = CALL _Znwj([16]))) = (int_64)2362232012900
	*($2 + [8 align=4]) = (int_64)214748365100
	*($3 + [32]) = $2
	$4 = ($2 + [16])
	*($3 + [40]) = $4
	*($3 + [36]) = $4
	CALL $42($1, ($3 + [32]), [2], $0)
	if ( ($2 == 0) ){ goto $label$17 }
	*($3 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$17
	*(($2 = CALL _Znwj([16]))) = (int_64)2362232012900
	*($2 + [8 align=4]) = (int_64)214748365100
	$5 = ($2 + [16])
	*(($4 = ($3 + [40]))) = $5
	*($3 + [32]) = $2
	*($3 + [36]) = $5
	CALL $42($1, ($3 + [32]), [2], $0)
	if ( ($2 == 0) ){ goto $label$18 }
	*($3 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$18
	*(($2 = CALL _Znwj([16]))) = (int_64)2362232012900
	*($2 + [8 align=4]) = (int_64)214748365100
	$5 = ($2 + [16])
	*($4) = $5
	*($3 + [32]) = $2
	*($3 + [36]) = $5
	CALL $42($1, ($3 + [32]), [2], $0)
	if ( ($2 == 0) ){ goto $label$19 }
	*($3 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$19
	*(($2 = CALL _Znwj([16]))) = (int_64)2362232012900
	*($2 + [8 align=4]) = (int_64)214748365100
	$5 = ($2 + [16])
	*(($4 = ($3 + [40]))) = $5
	*($3 + [32]) = $2
	*($3 + [36]) = $5
	CALL $42($1, ($3 + [32]), [2], $0)
	if ( ($2 == 0) ){ goto $label$20 }
	*($3 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$20
	*(($2 = CALL _Znwj([16]))) = (int_64)2362232012900
	*($2 + [8 align=4]) = (int_64)214748365100
	$5 = ($2 + [16])
	*($4) = $5
	*($3 + [32]) = $2
	*($3 + [36]) = $5
	CALL $42($1, ($3 + [32]), [2], $0)
	if ( ($2 == 0) ){ goto $label$21 }
	*($3 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$21
	*(($2 = CALL _Znwj([16]))) = (int_64)2362232012900
	*($2 + [8 align=4]) = (int_64)214748365100
	$5 = ($2 + [16])
	*(($4 = ($3 + [40]))) = $5
	*($3 + [32]) = $2
	*($3 + [36]) = $5
	CALL $42($1, ($3 + [32]), [2], $0)
	if ( ($2 == 0) ){ goto $label$22 }
	*($3 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$22
	*(($2 = CALL _Znwj([16]))) = (int_64)2362232012900
	*($2 + [8 align=4]) = (int_64)214748365100
	$5 = ($2 + [16])
	*($4) = $5
	*($3 + [32]) = $2
	*($3 + [36]) = $5
	CALL $42($1, ($3 + [32]), [2], $0)
	if ( ($2 == 0) ){ goto $label$23 }
	*($3 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$23
	*(($2 = CALL _Znwj([16]))) = (int_64)2362232012900
	*($2 + [8 align=4]) = (int_64)214748365100
	$5 = ($2 + [16])
	*(($4 = ($3 + [40]))) = $5
	*($3 + [32]) = $2
	*($3 + [36]) = $5
	CALL $42($1, ($3 + [32]), [2], $0)
	if ( ($2 == 0) ){ goto $label$24 }
	*($3 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$24
	*(($2 = CALL _Znwj([16]))) = (int_64)2362232012900
	*($2 + [8 align=4]) = (int_64)214748365100
	$5 = ($2 + [16])
	*($4) = $5
	*($3 + [32]) = $2
	*($3 + [36]) = $5
	CALL $42($1, ($3 + [32]), [2], $0)
	if ( ($2 == 0) ){ goto $label$25 }
	*($3 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$25
	*(($2 = CALL _Znwj([16]))) = (int_64)2362232012900
	*($2 + [8 align=4]) = (int_64)214748365100
	$4 = ($2 + [16])
	*(($3 + [40])) = $4
	*($3 + [32]) = $2
	*($3 + [36]) = $4
	CALL $42($1, ($3 + [32]), [2], $0)
	if ( ($2 == 0) ){ goto $label$2 }
	*($3 + [36]) = $2
	CALL _ZdlPv($2)
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$10
	*(($2 = CALL _Znwj([16]))) = (int_64)1717986918850
	*($2 + [8 align=4]) = (int_64)42949673100
	*($3 + [32]) = $2
	$4 = ($2 + [16])
	*($3 + [40]) = $4
	*($3 + [36]) = $4
	CALL $42($1, ($3 + [32]), [1], $0)
	if ( ($2 == 0) ){ goto $label$2 }
	*($3 + [36]) = $2
	CALL _ZdlPv($2)
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$9
	CALL $194($3, $2)
	$0 = CALL $188($3, [0], [8518])
	$1 = ($0 + [8])
	*((($3 + [16]) + [8])) = *($1)
	*($3 + [16]) = *($0)
	*($0) = (int_64)0
	*($1) = [0]
	$0 = CALL $185(($3 + [16]), [8649])
	$2 = ($0 + [8])
	*(($1 = (($3 + [32]) + [8]))) = *($2)
	*($3 + [32]) = *($0)
	*($0) = (int_64)0
	*($2) = [0]
	CALL eosio_assert([0], ( *($1) ? (($3 + [32]) | [1]) : (*($3 + [32]) & [1]) ))
	if ( (*($3 + [32]) & [1]) ){ goto $label$6 }
	if ( (*($3 + [16]) & [1]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$8
	CALL $43($0, ($3 + [32]))
	
.LABEL $label$7
	$4 = [0]
	$6 = *($2)
	$5 = CALL $28(*(($1 + [20])), [1000])
	if ( ((int_32)$5 < (int_32)$6) ){ goto $label$26 }
	$4 = [1]
	$6 = (*($2 + [4]) + $6)
	if ( ((int_32)$5 < (int_32)$6) ){ goto $label$26 }
	$4 = [2]
	$6 = (*($2 + [8]) + $6)
	if ( ((int_32)$5 < (int_32)$6) ){ goto $label$26 }
	$4 = [3]
	if ( ((int_32)$5 >= (int_32)(*($2 + [12]) + $6)) ){ goto $label$4 }
	
.LABEL $label$26
	*($3 + [32]) = $4
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [8]))) ){ goto $label$28 }
	*($6) = $4
	*($5) = (*($5) + [1])
	goto $label$27 
	
.LABEL $label$28
	CALL $43($0, ($3 + [32]))
	
.LABEL $label$27
	$4 = [0]
	$5 = *($2)
	$1 = CALL $28(*(($1 + [20])), [1000])
	if ( ((int_32)$1 < (int_32)$5) ){ goto $label$29 }
	$4 = [1]
	$5 = (*($2 + [4]) + $5)
	if ( ((int_32)$1 < (int_32)$5) ){ goto $label$29 }
	$4 = [2]
	$5 = (*($2 + [8]) + $5)
	if ( ((int_32)$1 < (int_32)$5) ){ goto $label$29 }
	$4 = [3]
	if ( ((int_32)$1 >= (int_32)(*($2 + [12]) + $5)) ){ goto $label$4 }
	
.LABEL $label$29
	*($3 + [32]) = $4
	$1 = ($0 + [4])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [8]))) ){ goto $label$30 }
	*($5) = $4
	*($1) = (*($1) + [1])
	CALL _ZdlPv($2)
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$30
	CALL $43($0, ($3 + [32]))
	CALL _ZdlPv($2)
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$6
	CALL _ZdlPv(*($1))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$5
	CALL _ZdlPv(*($3 + [24]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $3([8685])
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($3 + [48])
	$4
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$2 = ($2 << [1])
	$5 = ( $4 ? $2 : ($2 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	*(($4 = ($6 + ((int_32)$3 * (int_32)[12])))) = (int_64)0
	*(($4 + [8])) = [0]
	$2 = CALL $218($1)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$5 }
	$7 = ((int_32)$5 * (int_32)[12])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$8 }
	*($4) = ($2 << [1])
	$5 = ($4 + [1])
	if ( $2 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$8 = (($2 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($4) = ($8 | [1])
	*(($3 = ($6 + ((int_32)$3 * (int_32)[12]))) + [8]) = $5
	*($3 + [4]) = $2
	
.LABEL $label$7
	CALL memcpy($5, $1, $2)
	
.LABEL $label$6
	$1 = ($6 + $7)
	*(($5 + $2)) = [0]
	$3 = ($4 + [12])
	$5 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($2 + [-4])
	*(($4 + [-4])) = *($6)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($6) = [0]
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$11 }
	$5 = *(($0 + [4]))
	$6 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$6 = $5
	
.LABEL $label$9
	*($0) = $4
	*(($0 + [4])) = $3
	*(($0 + [8])) = $1
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$14
	$5 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($6 == 0) ){ goto $label$15 }
	CALL _ZdlPv($6)
	
.LABEL $label$15
	return (unreachable)
	
.LABEL $label$5
	CALL $178($4)
	(unreachable)
}

int_32 .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [64]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10083])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3665743729458675712)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10029])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10029])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $25(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $101 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [11048])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $99($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [11048])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [11133])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11178])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11228])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [56])))
	
.LABEL $label$10
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($6 + [56])))
	
.LABEL $label$14
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$15
	CALL _ZdlPv($6)
	
.LABEL $label$13
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [64]))
	$6 = *($1 + [68])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$17 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3665743729458675712, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL db_idx64_remove($6)
	
.LABEL $label$16
	$6 = *(($1 + [72]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$19 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3665743729458675711, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL db_idx64_remove($6)
	
.LABEL $label$18
	$global$0 = ($2 + [16])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [11133])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11178])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11228])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	$2 = ($global$0 - [112])
	$global$0 = $2
	if ( ((int_32)*($1) != (int_32)*($1 + [4])) ){ goto $label$3 }
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = ($0 + [8])
	$3 = CALL $25($4, $3)
	$7 = ($1 + [8])
	$5 = ($1 + [4])
	$6 = *($5)
	if ( ((int_32)$6 != (int_32)*($7)) ){ goto $label$4 }
	$8 = [3]
	goto $label$1 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = [4]
	goto $label$1 
	
.LABEL $label$2
	$8 = [4]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$55 
	
.LABEL $label$56
	$3 = CALL $25($4, $3)
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)*($7)) ){ goto $label$27 }
	$8 = [0]
	goto $label$5 
	
.LABEL $label$55
	*($5) = ($6 + [8])
	*($6) = *($3)
	goto $label$26 
	
.LABEL $label$54
	CALL $48($1, $3)
	$8 = [1]
	goto $label$5 
	
.LABEL $label$53
	CALL eosio_assert([1], [11018])
	$3 = CALL db_next_i64(*($3 + [64]), ($2 + [40]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$25 }
	$8 = [4]
	goto $label$5 
	
.LABEL $label$52
	$9 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$24 }
	$8 = [5]
	goto $label$5 
	
.LABEL $label$51
	$7 = ($0 + [8])
	$10 = (($2 + [80]) | [8])
	$11 = ($0 + [36])
	$12 = ($0 + [32])
	$13 = ($0 + [16])
	$14 = ($2 + [64])
	$15 = ($2 + [68])
	$8 = [6]
	goto $label$5 
	
.LABEL $label$50
	$16 = *($4)
	$6 = *($11)
	$1 = *($12)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$20 }
	$8 = [7]
	goto $label$5 
	
.LABEL $label$49
	$3 = ($6 + [-24])
	$5 = *($3)
	if ( ((int_64)*($5) == (int_64)$16) ){ goto $label$19 }
	$8 = [8]
	goto $label$5 
	
.LABEL $label$48
	$6 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$47
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$18 }
	$8 = [28]
	goto $label$5 
	
.LABEL $label$46
	CALL eosio_assert(((int_32)*($5 + [60]) == (int_32)$7), [11048])
	if ( $5 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$45
	$3 = CALL db_find_i64(*($7), *($13), (int_64)-3665743729458675712, $16)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$17 }
	$8 = [10]
	goto $label$5 
	
.LABEL $label$44
	$5 = CALL $25($7, $3)
	CALL eosio_assert(((int_32)*($5 + [60]) == (int_32)$7), [11048])
	$8 = [11]
	goto $label$5 
	
.LABEL $label$43
	$16 = *(($5 + [40]))
	$17 = *($5 + [32])
	*((($2 + [40]) + [8])) = *($5 + [24])
	*(($6 = (($2 + [40]) + [16]))) = (int_64)-1
	*($14) = (int_64)0
	*((($2 + [40]) + [32])) = [0]
	*($2 + [40]) = *($0)
	$3 = CALL $101(($2 + [40]), (uint_64)$16 >> (uint_64)(int_64)8), [9738]
	if ( ((int_64)$17 != (int_64)*($3))) ){ goto $label$14 }
	$8 = [26]
	goto $label$5 
	
.LABEL $label$42
	CALL $102(($2 + [40]), $3)
	goto $label$12 
	
.LABEL $label$41
	$18 = *($0)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($2 + [40])), [11316])
	CALL eosio_assert(((int_64)*($2 + [40]) == (int_64)CALL $fimport$7()), [11362])
	$19 = *($3 + [8])
	CALL eosio_assert(((int_64)$16 == (int_64)$19), [10277])
	$20 = (int_64)
	*($3) = $20(*($3) - $17))
	CALL eosio_assert(((int_64)$20 > (int_64)-4611686018427387904), [10325])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [10347])
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$19) == (int_64)(uint_64)*($3 + [8]) >> (uint_64)(int_64)8)), [11413])
	CALL eosio_assert([1], [10212])
	CALL memcpy(($2 + [80]), $3, [8])
	*($2 + [104]) = *($3 + [8])
	CALL eosio_assert([1], [10212])
	CALL memcpy($10, ($2 + [104]), [8])
	CALL db_update_i64(*($3 + [20]), $18, ($2 + [80]), [16])
	if ( (uint_64)($19 <= *($6)) ){ goto $label$13 }
	$8 = [13]
	goto $label$5 
	
.LABEL $label$40
	*($6) = ((int_64)$19 + (int_64)1)
	$8 = [14]
	goto $label$5 
	
.LABEL $label$39
	*((($2 + [24]) + [8])) = $16
	*((($2 + [8]) + [8])) = $16
	*($2 + [8]) = $17
	*($2 + [24]) = $17
	CALL $104($0, ($2 + [8]))
	CALL eosio_assert([1], [11099])
	CALL eosio_assert([1], [11018])
	$3 = CALL db_next_i64(*($5 + [64]), ($2 + [80]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$11 }
	$8 = [15]
	goto $label$5 
	
.LABEL $label$38
	CALL $25($7, $3)
	$8 = [16]
	goto $label$5 
	
.LABEL $label$37
	CALL $103($7, $5)
	$5 = *($14)
	if ( ($5 == 0) ){ goto $label$10 }
	$8 = [17]
	goto $label$5 
	
.LABEL $label$36
	$3 = *($15)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$8 = [18]
	goto $label$5 
	
.LABEL $label$35
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	$8 = [19]
	goto $label$5 
	
.LABEL $label$34
	CALL _ZdlPv($6)
	$8 = [20]
	goto $label$5 
	
.LABEL $label$33
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$9 }
	$8 = [21]
	goto $label$5 
	
.LABEL $label$32
	$3 = *($14)
	goto $label$6 
	
.LABEL $label$31
	$3 = $5
	$8 = [22]
	goto $label$5 
	
.LABEL $label$30
	*($15) = $5
	CALL _ZdlPv($3)
	$8 = [23]
	goto $label$5 
	
.LABEL $label$29
	$4 = ($4 + [8])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$23 }
	$8 = [24]
	goto $label$5 
	
.LABEL $label$28
	$global$0 = ($2 + [112])
	return 
	
.LABEL $label$27
	$8 = [3]
	goto $label$5 
	
.LABEL $label$26
	$8 = [1]
	goto $label$5 
	
.LABEL $label$25
	$8 = [2]
	goto $label$5 
	
.LABEL $label$24
	$8 = [24]
	goto $label$5 
	
.LABEL $label$23
	$8 = [6]
	goto $label$5 
	
.LABEL $label$22
	$8 = [9]
	goto $label$5 
	
.LABEL $label$21
	$8 = [7]
	goto $label$5 
	
.LABEL $label$20
	$8 = [9]
	goto $label$5 
	
.LABEL $label$19
	$8 = [27]
	goto $label$5 
	
.LABEL $label$18
	$8 = [9]
	goto $label$5 
	
.LABEL $label$17
	$8 = [23]
	goto $label$5 
	
.LABEL $label$16
	$8 = [23]
	goto $label$5 
	
.LABEL $label$15
	$8 = [11]
	goto $label$5 
	
.LABEL $label$14
	$8 = [12]
	goto $label$5 
	
.LABEL $label$13
	$8 = [14]
	goto $label$5 
	
.LABEL $label$12
	$8 = [14]
	goto $label$5 
	
.LABEL $label$11
	$8 = [16]
	goto $label$5 
	
.LABEL $label$10
	$8 = [23]
	goto $label$5 
	
.LABEL $label$9
	$8 = [18]
	goto $label$5 
	
.LABEL $label$8
	$8 = [25]
	goto $label$5 
	
.LABEL $label$7
	$8 = [20]
	goto $label$5 
	
.LABEL $label$6
	$8 = [22]
	goto $label$5 
	$8
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($1 + [8])
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [44]) = [0]
	$4 = *($0)
	*($2 + [8]) = $4
	$5 = (uint_64)$3 >> (uint_64)(int_64)8
	*($2 + [16]) = $5)
	$6 = [0]
	$7 = CALL db_find_i64($4, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $92(($2 + [8]), $7)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($2 + [8])), [11048])
	
.LABEL $label$1
	$5 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [11281])
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($2 + [8])), [11316])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$7()), [11362])
	$0 = ($6 + [16])
	*($2 + [72]) = *($0)
	$4 = *($6 + [8])
	CALL eosio_assert(((int_64)$3 == (int_64)$4), [10277])
	$3 = (int_64)
	*($6) = $3(*($6) - *($1)))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [10325])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [10347])
	$3 = (uint_64)$4 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$3) == (int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8)), [11413])
	CALL eosio_assert([1], [10212])
	CALL memcpy(($2 + [48]), $6, [8])
	*($2 + [88]) = *($6 + [8])
	CALL eosio_assert([1], [10212])
	CALL memcpy((($2 + [48]) | [8]), ($2 + [88]), [8])
	CALL eosio_assert([1], [10212])
	CALL memcpy((($2 + [48]) + [16]), $0, [8])
	CALL db_update_i64(*($6 + [28]), $5, ($2 + [48]), [24])
	$1 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($1)) ){ goto $label$2 }
	*($1) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$2
	*($2 + [88]) = *($0)
	if ( (CALL $217(($2 + [72]), ($2 + [88]), [8]) == 0) ){ goto $label$3 }
	$0 = ($6 + [32])
	$6 = *($0)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL db_idx64_find_primary(*($2 + [8]), *(($2 + [16])), (int_64)-4157508551318700032, ($2 + [80]), $3)
	*($0) = $6
	
.LABEL $label$4
	CALL db_idx64_update($6, $5, ($2 + [88]))
	
.LABEL $label$3
	$1 = *($2 + [32])
	if ( ($1 == 0) ){ goto $label$5 }
	$7 = ($2 + [36])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$8 }
	$6 = *(($2 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$6 = $1
	
.LABEL $label$6
	*($7) = $1
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$global$0 = ($2 + [96])
}

void .FUNC $107 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [160])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	$4 = CALL $179(($5 + [80]), $4)
	$7 = CALL $108(($5 + [96]), $1, $2, $3, $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$2
	$4 = CALL $218([9780])
	if ( ($4 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [10368])
	goto $label$5 
	
.LABEL $label$6
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$2 = (int_64)0
	
.LOOP $label$7:
	$8 = *(($4 + [9779]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [10413])
	
.LABEL $label$8
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$7 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$3 
	
.LABEL $label$4
	$2 = (int_64)0
	
.LABEL $label$3
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)((int_64)$2 | (int_64)4)), [9784])
	$8 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$2 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$2 = $6
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$2 = $6
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$13 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$8 = [0]
	
.LABEL $label$9
	CALL eosio_assert($8, [9814])
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	$4 = CALL $218([9837])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$35 }
	$8 = ($7 + [44])
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$38 }
	*($5 + [64]) = ($4 << [1])
	$9 = (($5 + [64]) | [1])
	if ( $4 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$10 = (($4 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($5 + [64]) = ($10 | [1])
	*($5 + [72]) = $9
	*($5 + [68]) = $4
	
.LABEL $label$37
	CALL memcpy($9, [9837], $4)
	
.LABEL $label$36
	$10 = [0]
	*(($9 + $4)) = [0]
	$9 = CALL $15($8, ($5 + [156]), ($5 + [64]))
	$4 = *($9)
	if ( $4 ){ goto $label$39 }
	*(($4 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($4) = (int_64)0
	$11 = ($5 + [72])
	*(($4 + [24])) = *($11)
	*($4 + [16 align=4]) = *($5 + [64])
	*($4 + [8]) = *($5 + [156])
	*($9) = $4
	*($4 + [36]) = [0]
	*($11) = [0]
	*($5 + [64]) = (int_64)0
	$11 = $4
	$12 = *(*($8))
	if ( ($12 == 0) ){ goto $label$40 }
	*($8) = $12
	$11 = *($9)
	
.LABEL $label$40
	CALL $77(*(($7 + [48])), $11)
	*(($9 = ($7 + [52]))) = (*($9) + [1])
	
.LABEL $label$39
	$11 = ($4 + [28])
	$4 = *($11)
	$9 = CALL $218([9842])
	if ( ((int_32)$9 != (int_32)( *(($4 + [32])) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$42 }
	$10 = (CALL $189($11, [0], [-1], [9842], $9) == 0)
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$41 }
	goto $label$34 
	
.LABEL $label$42
	if ( (*($5 + [64]) & [1]) ){ goto $label$34 }
	
.LABEL $label$41
	if ( ($10 == 0) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	CALL $178(($5 + [64]))
	
.LABEL $label$34
	CALL _ZdlPv(*($5 + [72]))
	if ( $10 ){ goto $label$32 }
	
.LABEL $label$33
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	$4 = CALL $218([9837])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$28 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$31 }
	*($5 + [64]) = ($4 << [1])
	$9 = (($5 + [64]) | [1])
	if ( $4 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	CALL $14(($0 + [80]), $7)
	goto $label$14 
	
.LABEL $label$31
	$10 = (($4 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($5 + [64]) = ($10 | [1])
	*($5 + [72]) = $9
	*($5 + [68]) = $4
	
.LABEL $label$30
	CALL memcpy($9, [9837], $4)
	
.LABEL $label$29
	$10 = [0]
	*(($9 + $4)) = [0]
	$9 = CALL $15($8, ($5 + [156]), ($5 + [64]))
	$4 = *($9)
	if ( $4 ){ goto $label$43 }
	*(($4 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($4) = (int_64)0
	$11 = ($5 + [72])
	*(($4 + [24])) = *($11)
	*($4 + [16 align=4]) = *($5 + [64])
	*($4 + [8]) = *($5 + [156])
	*($9) = $4
	*($4 + [36]) = [0]
	*($11) = [0]
	*($5 + [64]) = (int_64)0
	$11 = $4
	$12 = *(*($8))
	if ( ($12 == 0) ){ goto $label$44 }
	*($8) = $12
	$11 = *($9)
	
.LABEL $label$44
	CALL $77(*(($7 + [48])), $11)
	*(($9 = ($7 + [52]))) = (*($9) + [1])
	
.LABEL $label$43
	$11 = ($4 + [28])
	$4 = *($11)
	$9 = CALL $218([9854])
	if ( ((int_32)$9 != (int_32)( *(($4 + [32])) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$46 }
	$10 = (CALL $189($11, [0], [-1], [9854], $9) == 0)
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$45 }
	goto $label$27 
	
.LABEL $label$46
	if ( (*($5 + [64]) & [1]) ){ goto $label$27 }
	
.LABEL $label$45
	if ( ($10 == 0) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	CALL $178(($5 + [64]))
	
.LABEL $label$27
	CALL _ZdlPv(*($5 + [72]))
	if ( $10 ){ goto $label$25 }
	
.LABEL $label$26
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	$4 = CALL $218([9837])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$24 }
	*($5 + [64]) = ($4 << [1])
	$9 = (($5 + [64]) | [1])
	if ( $4 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	*((($5 + [48]) + [8])) = *(($3 + [8]))
	*($5 + [48]) = *($3)
	*((($5 + [64]) + [8])) = [0]
	*($5 + [64]) = (int_64)0
	$4 = CALL $218([9861])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$21 }
	*($5 + [64]) = ($4 << [1])
	$9 = (($5 + [64]) | [1])
	if ( $4 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$24
	$10 = (($4 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($5 + [64]) = ($10 | [1])
	*($5 + [72]) = $9
	*($5 + [68]) = $4
	
.LABEL $label$23
	CALL memcpy($9, [9837], $4)
	
.LABEL $label$22
	$10 = [0]
	*(($9 + $4)) = [0]
	$9 = CALL $15($8, ($5 + [156]), ($5 + [64]))
	$4 = *($9)
	if ( $4 ){ goto $label$47 }
	*(($4 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($4) = (int_64)0
	$11 = ($5 + [72])
	*(($4 + [24])) = *($11)
	*($4 + [16 align=4]) = *($5 + [64])
	*($4 + [8]) = *($5 + [156])
	*($9) = $4
	*($4 + [36]) = [0]
	*($11) = [0]
	*($5 + [64]) = (int_64)0
	$11 = $4
	$12 = *(*($8))
	if ( ($12 == 0) ){ goto $label$48 }
	*($8) = $12
	$11 = *($9)
	
.LABEL $label$48
	CALL $77(*(($7 + [48])), $11)
	*(($9 = ($7 + [52]))) = (*($9) + [1])
	
.LABEL $label$47
	$11 = ($4 + [28])
	$4 = *($11)
	$9 = CALL $218([9864])
	if ( ((int_32)$9 != (int_32)( *(($4 + [32])) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$50 }
	$10 = (CALL $189($11, [0], [-1], [9864], $9) == 0)
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$49 }
	goto $label$16 
	
.LABEL $label$50
	if ( (*($5 + [64]) & [1]) ){ goto $label$16 }
	
.LABEL $label$49
	if ( ($10 == 0) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$21
	$3 = (($4 + [16]) & [-16])
	$9 = CALL _Znwj($3)
	*($5 + [64]) = ($3 | [1])
	*($5 + [72]) = $9
	*($5 + [68]) = $4
	
.LABEL $label$20
	CALL memcpy($9, [9861], $4)
	
.LABEL $label$19
	$3 = ($0 + [328])
	*(($9 + $4)) = [0]
	$9 = CALL $15($8, ($5 + [156]), ($5 + [64]))
	$4 = *($9)
	if ( $4 ){ goto $label$51 }
	*(($4 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($4) = (int_64)0
	$0 = ($5 + [72])
	*(($4 + [24])) = *($0)
	*($4 + [16 align=4]) = *($5 + [64])
	*($4 + [8]) = *($5 + [156])
	*($9) = $4
	*($4 + [36]) = [0]
	*($0) = [0]
	*($5 + [64]) = (int_64)0
	$0 = $4
	$10 = *(*($8))
	if ( ($10 == 0) ){ goto $label$52 }
	*($8) = $10
	$0 = *($9)
	
.LABEL $label$52
	CALL $77(*(($7 + [48])), $0)
	*(($8 = ($7 + [52]))) = (*($8) + [1])
	
.LABEL $label$51
	$4 = CALL $193(($4 + [28]), [0], [10])
	*(($5 + [8])) = *((($5 + [48]) + [8]))
	*($5) = *($5 + [48])
	CALL $59($3, $1, $5, (CASTING uint_64)(uint_32 $4))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($5 + [72]))
	goto $label$14 
	
.LABEL $label$18
	CALL $178(($5 + [64]))
	
.LABEL $label$17
	CALL $178(($5 + [64]))
	
.LABEL $label$16
	CALL _ZdlPv(*($5 + [72]))
	if ( ($10 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	*((($5 + [32]) + [8])) = *(($3 + [8]))
	*($5 + [32]) = *($3)
	*((($5 + [64]) + [8])) = [0]
	*($5 + [64]) = (int_64)0
	$4 = CALL $218([8489])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$53 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$56 }
	*($5 + [64]) = ($4 << [1])
	$9 = (($5 + [64]) | [1])
	if ( $4 ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	$3 = (($4 + [16]) & [-16])
	$9 = CALL _Znwj($3)
	*($5 + [64]) = ($3 | [1])
	*($5 + [72]) = $9
	*($5 + [68]) = $4
	
.LABEL $label$55
	CALL memcpy($9, [8489], $4)
	
.LABEL $label$54
	$3 = ($0 + [440])
	*(($9 + $4)) = [0]
	$9 = CALL $15($8, ($5 + [156]), ($5 + [64]))
	$4 = *($9)
	if ( $4 ){ goto $label$57 }
	*(($4 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($4) = (int_64)0
	$0 = ($5 + [72])
	*(($4 + [24])) = *($0)
	*($4 + [16 align=4]) = *($5 + [64])
	*($4 + [8]) = *($5 + [156])
	*($9) = $4
	*($4 + [36]) = [0]
	*($0) = [0]
	*($5 + [64]) = (int_64)0
	$0 = $4
	$10 = *(*($8))
	if ( ($10 == 0) ){ goto $label$58 }
	*($8) = $10
	$0 = *($9)
	
.LABEL $label$58
	CALL $77(*(($7 + [48])), $0)
	*(($8 = ($7 + [52]))) = (*($8) + [1])
	
.LABEL $label$57
	$4 = CALL $193(($4 + [28]), [0], [10])
	*((($5 + [16]) + [8])) = *((($5 + [32]) + [8]))
	*($5 + [16]) = *($5 + [32])
	CALL $71($3, $1, ($5 + [16]), ($4 & [255]))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($5 + [72]))
	goto $label$14 
	
.LABEL $label$53
	CALL $178(($5 + [64]))
	
.LABEL $label$14
	CALL $21(($7 + [44]), *(($7 + [48])))
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($7 + [40])))
	
.LABEL $label$1
	$global$0 = ($5 + [160])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [10479])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [10584])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [10517])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [10584])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $109 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	CALL require_auth(*($0))
	CALL $38(($0 + [80]), $1, $2, $3)
}

int_32 .FUNC $108 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$5 = ($global$0 - [64])
	$global$0 = $5
	*($0 + [8]) = $2
	*($0) = $1
	*(($0 + [24])) = *(($3 + [8]))
	*($0 + [16]) = *($3)
	$3 = ($4 + [8])
	*(($0 + [40])) = *($3)
	*($0 + [32 align=4]) = *($4)
	*($3) = [0]
	*($4) = (int_64)0
	*(($6 = ($0 + [48]))) = [0]
	*($0 + [44]) = $6
	*(($7 = ($0 + [52]))) = [0]
	CALL $1(($5 + [48]), ($0 + [32]), [44])
	$9 = *($5 + [52])
	$8 = *($5 + [48])
	$10 = ((int_32)$8 == (int_32)$9)
	if ( $10 ){ goto $label$1 }
	$11 = ($0 + [44])
	$12 = (($5 + [8]) + [12])
	$13 = ($5 + [28])
	$14 = $8
	
.LOOP $label$2:
	CALL $1(($5 + [32]), $14, [58])
	$17 = *($5 + [32])
	$4 = CALL $179(($5 + [8]), $17)
	CALL $179($12, ($17 + [12]))
	$3 = CALL $15($11, ($5 + [60]), $4)
	if ( *($3) ){ goto $label$9 }
	*(($4 = CALL _Znwj([40]))) = (int_64)0
	$15 = (($5 + [8]) + [8])
	*(($4 + [24])) = *($15)
	*($4 + [16 align=4]) = *($5 + [8])
	$16 = *(($12 + [8]))
	$1 = *($12)
	*($12) = (int_64)0
	*($4 + [28 align=4]) = $1
	*(($4 + [36])) = $16
	*($4 + [8]) = *($5 + [60])
	*($3) = $4
	*($15) = [0]
	*($13) = [0]
	*($5 + [8]) = (int_64)0
	$15 = *(*($11))
	if ( ($15 == 0) ){ goto $label$10 }
	*($11) = $15
	$4 = *($3)
	
.LABEL $label$10
	CALL $77(*($6), $4)
	*($7) = (*($7) + [1])
	if ( ((*($12) & [1]) == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((*($12) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($13))
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*((($5 + [8]) + [8])))
	$3 = *($5 + [36])
	if ( ((int_32)$3 != (int_32)$17) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = *($5 + [36])
	if ( ((int_32)$3 == (int_32)$17) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$11:
	$4 = ($3 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$12
	$3 = $4
	if ( ((int_32)$17 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$3
	CALL _ZdlPv($17)
	$14 = ($14 + [12])
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ($8 == 0) ){ goto $label$13 }
	if ( $10 ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = ($9 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($9 + [-4])))
	
.LABEL $label$16
	$9 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$15 }
	
.LABEL $label$14
	*($5 + [52]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	$global$0 = ($5 + [64])
	return $0
}

void .FUNC $212 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $219 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $202())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $220($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $38 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	if ( ((uint_32)(($2 + [-1]) & [255]) > (uint_32)[3]) ){ goto $label$14 }
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	$5 = CALL $218([8599])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$13 }
	*($4 + [32]) = ($5 << [1])
	$6 = (($4 + [32]) | [1])
	if ( $5 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$15 }
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	$5 = CALL $218([8599])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($4 + [32]) = ($5 << [1])
	$6 = (($4 + [32]) | [1])
	if ( $5 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$15
	CALL $194($4, $2)
	$5 = CALL $188($4, [0], [8518])
	$3 = ($5 + [8])
	*((($4 + [16]) + [8])) = *($3)
	*($4 + [16]) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	$5 = CALL $185(($4 + [16]), [8548])
	$6 = ($5 + [8])
	*(($3 = (($4 + [32]) + [8]))) = *($6)
	*($4 + [32]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	CALL eosio_assert([0], ( *($3) ? (($4 + [32]) | [1]) : (*($4 + [32]) & [1]) ))
	if ( (*($4 + [32]) & [1]) ){ goto $label$10 }
	if ( (*($4 + [16]) & [1]) ){ goto $label$9 }
	goto $label$3 
	
.LABEL $label$13
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [32]) = ($7 | [1])
	*($4 + [40]) = $6
	*($4 + [36]) = $5
	
.LABEL $label$12
	CALL memcpy($6, [8599], $5)
	
.LABEL $label$11
	*(($6 + $5)) = [0]
	CALL $18($0, $1, $2, $3, ($4 + [32]))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($4 + [40]))
	goto $label$1 
	
.LABEL $label$10
	CALL _ZdlPv(*($3))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$9
	CALL _ZdlPv(*($4 + [24]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [32]) = ($7 | [1])
	*($4 + [40]) = $6
	*($4 + [36]) = $5
	
.LABEL $label$7
	CALL memcpy($6, [8599], $5)
	
.LABEL $label$6
	*(($6 + $5)) = [0]
	CALL $19($0, $1, [10], $3, ($4 + [32]))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($4 + [40]))
	goto $label$1 
	
.LABEL $label$5
	CALL $178(($4 + [32]))
	
.LABEL $label$4
	CALL $178(($4 + [32]))
	
.LABEL $label$3
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$1
	$3 = *($0 + [24])
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	$5 = CALL $218([8604])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$19 }
	*($4 + [32]) = ($5 << [1])
	$0 = (($4 + [32]) | [1])
	if ( $5 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$6 = (($5 + [16]) & [-16])
	$0 = CALL _Znwj($6)
	*($4 + [32]) = ($6 | [1])
	*($4 + [40]) = $0
	*($4 + [36]) = $5
	
.LABEL $label$18
	CALL memcpy($0, [8604], $5)
	
.LABEL $label$17
	*(($0 + $5)) = [0]
	CALL $7(($4 + [16]), $2, $1)
	CALL $20($3, ($4 + [32]), ($4 + [16]))
	CALL $21(($4 + [16]), *($4 + [20]))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($4 + [40]))
	
.LABEL $label$20
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$16
	CALL $178(($4 + [32]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10131])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $221($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = [1]
	*($5) = (int_64)1
	*($5 + [12]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10154])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [10154])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	*($5 + [16]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $40(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $224($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [24])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [8])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [16])), (int_64)6256973777754652672, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $51($9, $10)
	*($3 + [4]) = [0]
	*($3) = $9
	$8 = *(*(CALL $150($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [24])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9977])
	*($1) = *($7)
	CALL $180(($1 + [8]), *($5 + [4]))
	*($1 + [24]) = *($6)
	*($1 + [32]) = CALL current_time()
	CALL $4($3)
	*(($1 + [72])) = *(($3 + [24]))
	*(($1 + [64])) = *(($3 + [16]))
	*(($1 + [56])) = *($3 + [8])
	*($1 + [48]) = *($3)
	$6 = *($5 + [8])
	$7 = ($1 + [80])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	CALL $151($7, *($6), ($6 + [4]))
	
.LABEL $label$3
	*($3) = [8]
	$6 = *(($1 + [8]))
	$5 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [56])
	$8 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	*($3) = $6
	CALL $152($3, $7)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $221($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $153($3, $1)
	$8 = *($1)
	*($1 + [96]) = CALL db_store_i64(*($4 + [8]), (int_64)6256973777754652672, *(*($0 + [8])), $8, $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $224($6)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [32])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $201($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $21(($1 + [80]), *(($1 + [84])))
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $32($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [10212])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [10212])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $144(CALL $143($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $35 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$5 = ($global$0 - [64])
	$global$0 = $5
	$7 = *($2 + [4])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$8 = ($0 + [32])
	$9 = ($0 + [8])
	$10 = (($5 + [16]) | [1])
	$11 = (($5 + [16]) | [8])
	$12 = ($0 + [16])
	$13 = ($0 + [24])
	$14 = ($0 + [40])
	$15 = ($0 + [36])
	$16 = ($0 + [52])
	
.LOOP $label$3:
	*(($17 = (($5 + [40]) + [8]))) = *(($6 + [8]))
	*($5 + [40]) = *($6)
	$18 = *($0)
	CALL eosio_assert(((int_64)*($9) == (int_64)CALL $fimport$7()), [10967])
	*(($2 = CALL _Znwj([32])) + [16]) = $9
	*($2) = *($5 + [40])
	*($2 + [8]) = *($17)
	CALL eosio_assert([1], [10212])
	CALL memcpy(($5 + [16]), $2, [8])
	CALL eosio_assert([1], [10212])
	CALL memcpy($11, ($2 + [8]), [1])
	$19 = *($2)
	$20 = CALL db_store_i64(*($12), (int_64)-2184396096422281216, $18, $19, ($5 + [16]), [9])
	*($2 + [20]) = $20
	if ( (uint_64)($19 <= *($13)) ){ goto $label$4 }
	*($13) = ( (int_64)-2 ? ((int_64)$19 + (int_64)1) : ((uint_64)$19 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5) = $2
	$19 = *($2)
	*($5 + [16]) = $19
	*($5 + [60]) = $20
	$17 = *($15)
	if ( ((uint_32)$17 >= (uint_32)*($14)) ){ goto $label$7 }
	*($17 + [8]) = $19
	*($17 + [16]) = $20
	*($5) = [0]
	*($17) = $2
	*($15) = ($17 + [24])
	$2 = *($5)
	*($5) = [0]
	if ( $2 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $41($8, $5, ($5 + [16]), ($5 + [60]))
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$20 = *($16)
	*(($21 = (($5 + [16]) + [8]))) = [0]
	*($5 + [16]) = (int_64)0
	$2 = CALL $218([8723])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$10 }
	*($5 + [16]) = ($2 << [1])
	$17 = $10
	if ( $2 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$22 = (($2 + [16]) & [-16])
	$17 = CALL _Znwj($22)
	*($21) = $17
	*($5 + [16]) = ($22 | [1])
	*($5 + [20]) = $2
	
.LABEL $label$9
	CALL memcpy($17, [8723], $2)
	
.LABEL $label$8
	*(($17 + $2)) = [0]
	CALL $9($5, ($5 + [40]), $3, $4, $1)
	CALL $20($20, ($5 + [16]), $5)
	CALL $21($5, *($5 + [4]))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($21))
	
.LABEL $label$11
	$6 = ($6 + [16])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($5 + [64])
	return (unreachable)
	
.LABEL $label$1
	CALL $178(($5 + [16]))
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $201($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$5 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), ($5 + [8]), [8])
	$0 = (*($4 + [4]) + [8])
	*($4 + [4]) = $0
	*($2) = *(($5 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $0) > (int_32)[7]), [10212])
	CALL memcpy(*($4 + [4]), $2, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*(($5 + [28])) - *($5 + [24])) / (int_32)[12]))
	$7 = *($1)
	$0 = *($7 + [4])
	$4 = ($7 + [4])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$8 = ((int_64)$6) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($7 + [8])) - $0) > (int_32)[0]), [10212])
	CALL memcpy(*($4), ($2 + [15]), [1])
	$0 = (*($4) + [1])
	*($4) = $0
	if ( $8 ){ goto $label$1 }
	$0 = *(($5 + [28]))
	$4 = *(($5 + [24]))
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $149($7, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	CALL $149(*($1), ($5 + [36]))
	CALL $149(*($1), ($5 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $30 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$5 = ($global$0 - [64])
	$global$0 = $5
	$7 = *($2 + [4])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$8 = ($0 + [32])
	$9 = ($0 + [8])
	$10 = (($5 + [16]) | [1])
	$11 = (($5 + [16]) | [9])
	$12 = (($5 + [16]) | [8])
	$13 = ($0 + [16])
	$14 = ($0 + [24])
	$15 = ($0 + [40])
	$16 = ($0 + [36])
	$17 = ($0 + [52])
	
.LOOP $label$3:
	*(($18 = (($5 + [40]) + [8]))) = *(($6 + [8]))
	*($5 + [40]) = *($6)
	$19 = *($0)
	CALL eosio_assert(((int_64)*($9) == (int_64)CALL $fimport$7()), [10967])
	*(($2 = CALL _Znwj([32])) + [16]) = $9
	*($2) = *($5 + [40])
	*($2 + [8]) = *($18)
	CALL eosio_assert([1], [10212])
	CALL memcpy(($5 + [16]), $2, [8])
	CALL eosio_assert([1], [10212])
	CALL memcpy($12, ($2 + [8]), [1])
	CALL eosio_assert([1], [10212])
	CALL memcpy($11, ($2 + [9]), [1])
	$20 = *($2)
	$21 = CALL db_store_i64(*($13), (int_64)6175819139446734848, $19, $20, ($5 + [16]), [10])
	*($2 + [20]) = $21
	if ( (uint_64)($20 <= *($14)) ){ goto $label$4 }
	*($14) = ( (int_64)-2 ? ((int_64)$20 + (int_64)1) : ((uint_64)$20 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5) = $2
	$20 = *($2)
	*($5 + [16]) = $20
	*($5 + [60]) = $21
	$18 = *($16)
	if ( ((uint_32)$18 >= (uint_32)*($15)) ){ goto $label$7 }
	*($18 + [8]) = $20
	*($18 + [16]) = $21
	*($5) = [0]
	*($18) = $2
	*($16) = ($18 + [24])
	$2 = *($5)
	*($5) = [0]
	if ( $2 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $44($8, $5, ($5 + [16]), ($5 + [60]))
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$21 = *($17)
	*(($22 = (($5 + [16]) + [8]))) = [0]
	*($5 + [16]) = (int_64)0
	$2 = CALL $218([8723])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$10 }
	*($5 + [16]) = ($2 << [1])
	$18 = $10
	if ( $2 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$23 = (($2 + [16]) & [-16])
	$18 = CALL _Znwj($23)
	*($22) = $18
	*($5 + [16]) = ($23 | [1])
	*($5 + [20]) = $2
	
.LABEL $label$9
	CALL memcpy($18, [8723], $2)
	
.LABEL $label$8
	*(($18 + $2)) = [0]
	CALL $8($5, ($5 + [40]), $3, $4, $1)
	CALL $20($21, ($5 + [16]), $5)
	CALL $21($5, *($5 + [4]))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($22))
	
.LABEL $label$11
	$6 = ($6 + [16])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($5 + [64])
	return (unreachable)
	
.LABEL $label$1
	CALL $178(($5 + [16]))
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = (*($2) + [24])
	*(($2 = *($1))) = $1
	$0 = *($3 + [24])
	$3 = *($0)
	$4 = *(($3 + [28]))
	$5 = (CASTING uint_64)(uint_32 ((int_32)($4 - $0) / (int_32)[12]))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$6 = *($0)
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$4 }
	*($2) = $1
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$5 }
	$1 = ($6 + $1)
	*($2) = $1
	
.LABEL $label$5
	$0 = ($0 + [12])
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$0 = *($3 + [36])
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [40])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	
.LOOP $label$6:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$6 }
	*($2) = $1
	$0 = *(($3 + [36]))
	$0 = ( *(($3 + [40])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$7 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$7
	$0 = *($3 + [48])
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [52])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	
.LOOP $label$8:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$8 }
	*($2) = $1
	$0 = *(($3 + [48]))
	$0 = ( *(($3 + [52])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$9 }
	*($2) = ($0 + $1)
	
.LABEL $label$9
}

int_32 .FUNC $215 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $212($3, (int_64)0)
	$4 = CALL $214($3, $2, [1], (int_64)4294967295)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $214 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $213($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $202()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $213($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [20049]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $212($0, (int_64)0)
	*(CALL $202()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $213($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $213($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $213($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $213($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [20049])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [20049]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [20049]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $213($0)
	$5 = *(($6 + [20049]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $213($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [20049]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8216]))
	$8 = (int_64)0
	$5 = *(($6 + [20049]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [20049]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $213($0)
	$5 = *(($6 + [20049]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $213($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [20049]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $212($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [20049]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [20049]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $213($0) + [20049]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $202()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $202()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $202()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $217 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $216 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $212($3, (int_64)0)
	$4 = CALL $214($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $211 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $210($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $210 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $198 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $218($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $181($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $199 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $196 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $183(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $208(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8438], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $183(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $183(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $197 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $183(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $208(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8457], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $183(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $183(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $194 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $183(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $208(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8392], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $183(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $183(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $195 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $183(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $208(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8418], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $183(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $183(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $192 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $198($1, $0, [8617])
	CALL $200()
	(unreachable)
}

int_32 .FUNC $193 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $218([8336])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8336], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $202())
	*(CALL $202()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $215($4, ($3 + [12]), $2)
	$5 = CALL $202()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $191($3)
	
.LABEL $label$1
	CALL $192($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $190 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $218($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $181($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

void .FUNC $191 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $198($1, $0, [8634])
	CALL $199()
	(unreachable)
}