(data (i32.const 8192) "invalid smart_currency\00")
(data (i32.const 8215) "invalid pro_currency\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8322) "settings already defined\00")
(data (i32.const 8347) "invalid ban_supply\00")
(data (i32.const 8366) "invalid ban_balance\00")
(data (i32.const 8386) "radio is error\00")
(data (i32.const 8401) "bansetting_exists already defined\00")
(data (i32.const 8435) "switchs is Null\00")
(data (i32.const 8451) "settings is Null\00")
(data (i32.const 8468) "exchangerd <= 0\00")
(data (i32.const 8484) "must be init\00")
(data (i32.const 8497) "must be init exstat\00")
(data (i32.const 8517) "TgeAccount is not add tgeswitchs\00")
(data (i32.const 8550) "TgeTotalSwitch is not open\00")
(data (i32.const 8577) "sellswicth is not open\00")
(data (i32.const 8600) "unlock_per is error\00")
(data (i32.const 8620) "account_table is Null\00")
(data (i32.const 8642) "sendamount is error\00")
(data (i32.const 8662) "have fun\00")
(data (i32.const 8671) "active\00")
(data (i32.const 8678) "transfer\00")
(data (i32.const 8687) "buyswitch is not open\00")
(data (i32.const 8709) "This account is not forward_account\00")
(data (i32.const 8745) "eosio.token\00")
(data (i32.const 8757) "EOS\00")
(data (i32.const 8761) "payment|tgeaccount:\00")
(data (i32.const 8781) "&\00")
(data (i32.const 8783) "proaccount:\00")
(data (i32.const 8795) "recharge\00")
(data (i32.const 8804) "distribute to proaccount\00")
(data (i32.const 8829) "memo has more than 256 bytes\00")
(data (i32.const 8858) "gettge\00")
(data (i32.const 8865) "|\00")
(data (i32.const 8867) "unlock\00")
(data (i32.const 8874) "invalid quantity\00")
(data (i32.const 8891) "Startime time not yet arrived\00")
(data (i32.const 8921) "from is Project side\00")
(data (i32.const 8942) "invalid contract\00")
(data (i32.const 8959) "invalid symbol\00")
(data (i32.const 8974) "must above 50\00")
(data (i32.const 8988) "not enough!\00")
(data (i32.const 9000) "ico send exchange\00")
(data (i32.const 9018) " \00")
(data (i32.const 9020) "splitlsit is error\00")
(data (i32.const 9039) "invalid buyasset\00")
(data (i32.const 9056) "buyasset.amount is Null\00")
(data (i32.const 9080) "bansetting_exists is not defined\00")
(data (i32.const 9113) "from is not Project or forward side\00")
(data (i32.const 9149) "baninfo_table is Null\00")
(data (i32.const 9171) "allowamount is error\00")
(data (i32.const 9192) "quantity Not equal to send_to_tokens\00")
(data (i32.const 9229) "deposit|deposits\00")
(data (i32.const 9246) "unable to find key\00")
(data (i32.const 9265) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9314) "invalid symbol name\00")
(data (i32.const 9334) "string is too long to be a valid name\00")
(data (i32.const 9372) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9439) "character is not in allowed character set for names\00")
(data (i32.const 9491) "write\00")
(data (i32.const 9497) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9548) "error reading iterator\00")
(data (i32.const 9571) "read\00")
(data (i32.const 9576) "cannot pass end iterator to modify\00")
(data (i32.const 9611) "object passed to modify is not in multi_index\00")
(data (i32.const 9657) "cannot modify objects in table of another contract\00")
(data (i32.const 9708) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9767) "cannot create objects in table of another contract\00")
(data (i32.const 9818) "singleton does not exist\00")
(data (i32.const 9843) "string is too long to be a valid symbol_code\00")
(data (i32.const 9888) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9944) "\dc&\00\00")
(data (i32.const 9948) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9981) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10040) "attempt to add asset with different symbol\00")
(data (i32.const 10083) "addition underflow\00")
(data (i32.const 10102) "addition overflow\00")
(data (i32.const 10120) "attempt to subtract asset with different symbol\00")
(data (i32.const 10168) "subtraction underflow\00")
(data (i32.const 10190) "subtraction overflow\00")
(data (i32.const 10211) "get\00")
(data (i32.const 18640) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 18656) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 18672) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "db_store_i64" (func $fimport$5 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "db_update_i64" (func $fimport$8 (param i32 i64 i32 i32)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "send_deferred" (func $fimport$10 (param i32 i64 i32 i32 i32)))
(import "env" "has_auth" (func $fimport$11 (param i64) (result i32)))
(import "env" "eosio_exit" (func $fimport$12 (param i32)))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$16))
(import "env" "memset" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$30 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$31 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$34 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$36 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$37 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$38 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $52))
(export "_ZdlPv" (func $97))
(export "_Znwj" (func $95))
(export "_Znaj" (func $96))
(export "_ZdaPv" (func $98))
(export "_ZnwjSt11align_val_t" (func $99))
(export "_ZnajSt11align_val_t" (func $100))
(export "_ZdlPvSt11align_val_t" (func $101))
(export "_ZdaPvSt11align_val_t" (func $102))
(table $0 11 11 anyfunc)
(elem (i32.const 1) $46 $31 $25 $26 $36 $3 $18 $24 $44 $23)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18688))
(global $global$2 i32 (i32.const 18688))


void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $123(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $123(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [88]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($3 + [96]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($3 + [104]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($3 + [112]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($3 + [120]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($3 + [128]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $125($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $125($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $128($0)
	
.LABEL $label$1
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $92($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $107($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $107($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $103($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10211])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $33($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9571])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($3 + [48]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($0 + [56]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($0 + [64]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [72])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($0 + [80]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2) = $0
	CALL $94($2, $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $123 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $115())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $124($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $115 ()
{
	return [10220]
}

int_32 .FUNC $122 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_64 .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$2 = *($0)
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	$3 = CALL db_find_i64($2, $2, (int_64)-3504768080326688768, (int_64)-3504768080326688768)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $41(($1 + [8]), $3) + [8]) == (int_32)($1 + [8])), [9497])
	goto $label$1 
	
.LABEL $label$2
	*($1) = (int_64)0
	CALL $42(($1 + [8]), $1, *($0))
	
.LABEL $label$1
	$2 = CALL $43(($1 + [8]))
	*($1) = ( (int_64)1 ? ((int_64)$2 + (int_64)1) : ((int_64)$2 < (int_64)-1) )
	CALL $42(($1 + [8]), $1, *($0))
	$2 = *($1)
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = ($1 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($1 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($1 + [48])
	return $2
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $127($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8236])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	float_64 $21
	float_64 $22
	float_64 $23
	$6 = ($global$0 - [384])
	$global$0 = $6
	CALL require_auth($1)
	$7 = [0]
	$8 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$10 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$10 = $12
	$8 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$10 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [8874])
	*((($6 + [232]) + [32])) = [0]
	*($6 + [248]) = (int_64)-1
	*($6 + [256]) = (int_64)0
	$10 = *($0)
	*($6 + [232]) = $10
	*($6 + [240]) = $10
	$11 = CALL db_find_i64($10, $10, (int_64)-3812994831289208832, (int_64)-3812994831289208832)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $4(($6 + [232]), $11)
	CALL eosio_assert(((int_32)*($7 + [136]) == (int_32)($6 + [232])), [9497])
	
.LABEL $label$6
	*((($6 + [192]) + [32])) = [0]
	*($6 + [208]) = (int_64)-1
	*($6 + [216]) = (int_64)0
	$10 = *($0)
	*($6 + [192]) = $10
	*($6 + [200]) = $10
	$11 = [0]
	$8 = CALL db_find_i64($10, $10, (int_64)-4098957121893171200, (int_64)-4098957121893171200)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$11 = CALL $15(($6 + [192]), $8)
	CALL eosio_assert(((int_32)*($11 + [4]) == (int_32)($6 + [192])), [9497])
	
.LABEL $label$7
	CALL eosio_assert((((int_32)$7 != (int_32)[0]) & ((int_32)$11 != (int_32)[0])), [8484])
	$11 = *(($6 + [260]))
	if ( ((int_32)$11 == (int_32)*(($6 + [256]))) ){ goto $label$9 }
	$11 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [136]) == (int_32)($6 + [232])), [9497])
	goto $label$8 
	
.LABEL $label$9
	$11 = [0]
	$8 = CALL db_find_i64(*($6 + [232]), *(($6 + [240])), (int_64)-3812994831289208832, (int_64)-3812994831289208832)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $4(($6 + [232]), $8)
	CALL eosio_assert(((int_32)*($11 + [136]) == (int_32)($6 + [232])), [9497])
	
.LABEL $label$8
	$8 = [0]
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [9818])
	$14 = *(($11 + [16]))
	$15 = *($11 + [128])
	$12 = *($11 + [112])
	$16 = *($11 + [104])
	$17 = *($11 + [96])
	$18 = *($11 + [88])
	$10 = *($11 + [80])
	$19 = *($11 + [24])
	$20 = *($11)
	$11 = *(($6 + [220]))
	if ( ((int_32)$11 == (int_32)*(($6 + [216]))) ){ goto $label$11 }
	$8 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [4]) == (int_32)($6 + [192])), [9497])
	goto $label$10 
	
.LABEL $label$11
	$11 = CALL db_find_i64(*($6 + [192]), *(($6 + [200])), (int_64)-4098957121893171200, (int_64)-4098957121893171200)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $15(($6 + [192]), $11)
	CALL eosio_assert(((int_32)*($8 + [4]) == (int_32)($6 + [192])), [9497])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9818])
	$13 = *($8)
	CALL eosio_assert(((uint_64)$16 <= (uint_64)((int_64)((uint_64)CALL $fimport$7() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [8891])
	*(($6 + [184])) = [0]
	*($6 + [160]) = $10
	*($6 + [152]) = $10
	*($6 + [168]) = (int_64)-1
	*($6 + [176]) = (int_64)0
	$11 = [0]
	$8 = CALL db_find_i64($10, $10, (int_64)-3812985124766744576, *($0))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$12 }
	$11 = CALL $27(($6 + [152]), $8)
	CALL eosio_assert(((int_32)*($11 + [12]) == (int_32)($6 + [152])), [9497])
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8517])
	CALL eosio_assert(*($11 + [8]), [8550])
	if ( ((uint_64)$12 > (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$13 }
	CALL eosio_assert([0], [8687])
	
.LABEL $label$13
	CALL eosio_assert(((int_64)$19 != (int_64)$1), [8921])
	*($6 + [144]) = [8745]
	*($6 + [148]) = CALL $122([8745])
	*($6) = *($6 + [144])
	CALL eosio_assert(((int_64)*(CALL $32(($6 + [328]), $6)) == (int_64)$5), [8942])
	$12 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$11 = CALL $122([8757])
	if ( ($11 <= [8]) ){ goto $label$17 }
	CALL eosio_assert([0], [9843])
	goto $label$16 
	
.LABEL $label$17
	if ( ($11 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$10 = (int_64)0
	
.LOOP $label$18:
	$8 = *(($11 + [8756]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$19 }
	CALL eosio_assert([0], [9888])
	
.LABEL $label$19
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$18 }
	goto $label$14 
	
.LABEL $label$15
	$10 = (int_64)0
	
.LABEL $label$14
	CALL eosio_assert(((int_64)$12 == (int_64)$10), [8959])
	CALL eosio_assert($13, [8687])
	$21 = (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $14) & [255]))
	$22 = ((float_64)(CASTING float_64)(int_64 $9) / (float_64)CALL $117((float_64)10, $21))
	if ( (((float_64)$22 < (float_64)(float_64)18446744073709551615) & ((float_64)$22 >= (float_64)(float_64)0)) ){ goto $label$21 }
	$10 = (int_64)0
	goto $label$20 
	
.LABEL $label$21
	$10 = (Rounds 0)($22)
	
.LABEL $label$20
	CALL eosio_assert(((uint_64)$18 <= (uint_64)$10), [8974])
	CALL has_auth($2)
	$23 = ((float_64)((float_64)(CASTING float_64)(uint_64 $17) / (float_64)(float_64)1e3) * (float_64)(Rounds 0)($22))
	$22 = ((float_64)CALL $117((float_64)10, $21) * (float_64)$23)
	if ( (((float_64)$22 < (float_64)(float_64)18446744073709551615) & ((float_64)$22 >= (float_64)(float_64)0)) ){ goto $label$28 }
	$2 = (int_64)0
	$12 = (int_64)0
	if ( ((int_64)$15 == (int_64)0) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$2 = (Rounds 0)($22)
	$12 = (int_64)0
	if ( ((int_64)$15 != (int_64)0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9265])
	$10 = (uint_64)$14 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$15 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)$12) ){ goto $label$32 }
	$10 = $15
	$8 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$10 = $15
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)$12) ){ goto $label$30 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $8 ){ goto $label$33 }
	$8 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$8 = [0]
	
.LABEL $label$29
	CALL eosio_assert($8, [9314])
	*((($6 + [328]) + [32])) = [0]
	*($6 + [344]) = (int_64)-1
	$10 = *($0)
	*($6 + [328]) = $10
	*($6 + [336]) = $1
	*($6 + [352]) = (int_64)0
	$11 = CALL db_lowerbound_i64($10, $1, (int_64)8419278409487937536, (int_64)0)
	if ( ((int_32)$11 <= (int_32)[-1]) ){ goto $label$35 }
	$11 = CALL $28(($6 + [328]), $11)
	$12 = *($0)
	CALL eosio_assert([1], [9576])
	CALL eosio_assert(((int_32)*($11 + [36]) == (int_32)($6 + [328])), [9611])
	CALL eosio_assert(((int_64)*($6 + [328]) == (int_64)CALL $fimport$4()), [9657])
	$10 = *($11 + [8])
	CALL eosio_assert(((int_64)$14 == (int_64)$10), [10040])
	$1 = ((int_64)*($11) + (int_64)$2)
	*($11) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [10083])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [10102])
	CALL eosio_assert(((int_64)$14 == (int_64)*(($11 + [24]))), [10040])
	$1 = ((int_64)*($11 + [16]) + (int_64)$2)
	*($11 + [16]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [10083])
	CALL eosio_assert(((int_64)*($11 + [16]) < (int_64)4611686018427387904), [10102])
	*($11 + [32]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$10) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [9708])
	*($6 + [280]) = (($6 + [64]) + [36])
	*($6 + [276]) = ($6 + [64])
	*($6 + [272]) = ($6 + [64])
	*($6 + [320]) = ($6 + [272])
	*($6 + [108]) = ($11 + [16])
	*($6 + [104]) = $11
	*($6 + [112]) = ($11 + [32])
	CALL $30(($6 + [104]), ($6 + [320]))
	CALL db_update_i64(*($11 + [40]), $12, ($6 + [64]), [36])
	$11 = (($6 + [328]) + [16])
	if ( (uint_64)($10 <= *($11)) ){ goto $label$34 }
	*($11) = ((int_64)$10 + (int_64)1)
	goto $label$34 
	
.LABEL $label$35
	$12 = *($0)
	CALL eosio_assert(((int_64)*($6 + [328]) == (int_64)CALL $fimport$4()), [9767])
	*(($11 = CALL _Znwj([48])) + [36]) = ($6 + [328])
	*($11 + [8]) = $14
	*($11) = $2
	*($11 + [16]) = $2
	*($11 + [24]) = $14
	*($11 + [32]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($6 + [280]) = (($6 + [64]) + [36])
	*($6 + [276]) = ($6 + [64])
	*($6 + [272]) = ($6 + [64])
	*($6 + [320]) = ($6 + [272])
	*($6 + [108]) = ($11 + [16])
	*($6 + [104]) = $11
	*($6 + [112]) = ($11 + [32])
	CALL $30(($6 + [104]), ($6 + [320]))
	$10 = (uint_64)*($11 + [8]) >> (uint_64)(int_64)8
	$13 = CALL db_store_i64(*((($6 + [328]) + [8])), (int_64)8419278409487937536, $12, $10), ($6 + [64]), [36]
	*($11 + [40]) = $13)
	$8 = (($6 + [328]) + [16])
	if ( (uint_64)($10 <= *($8)) ){ goto $label$36 }
	*($8) = ((int_64)$10 + (int_64)1)
	
.LABEL $label$36
	*($6 + [64]) = $11
	$10 = (uint_64)*(($11 + [8])) >> (uint_64)(int_64)8
	*($6 + [104]) = $10)
	*($6 + [272]) = $13
	$3 = ($6 + [356])
	$8 = *($3)
	if ( ((uint_32)$8 >= (uint_32)*(($6 + [360]))) ){ goto $label$38 }
	*($8 + [8]) = $10
	*($8 + [16]) = $13
	*($6 + [64]) = [0]
	*($8) = $11
	*($3) = ($8 + [24])
	$11 = *($6 + [64])
	*($6 + [64]) = [0]
	if ( $11 ){ goto $label$37 }
	goto $label$34 
	
.LABEL $label$38
	CALL $49(($6 + [352]), ($6 + [64]), ($6 + [104]), ($6 + [272]))
	$11 = *($6 + [64])
	*($6 + [64]) = [0]
	if ( ($11 == 0) ){ goto $label$34 }
	
.LABEL $label$37
	CALL _ZdlPv($11)
	
.LABEL $label$34
	*((($6 + [104]) + [32])) = [0]
	*($6 + [120]) = (int_64)-1
	$10 = *($0)
	*($6 + [104]) = $10
	*($6 + [112]) = $10
	*($6 + [128]) = (int_64)0
	$11 = [0]
	$8 = CALL db_lowerbound_i64($10, $10, (int_64)6300979411374047232, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$39 }
	$11 = CALL $6(($6 + [104]), $8)
	
.LABEL $label$39
	$8 = ($11 + [24])
	CALL eosio_assert(((int_64)*($8) == (int_64)$14), [9981])
	CALL eosio_assert(((int_64)*($11 + [16]) >= (int_64)$2), [8988])
	$12 = *($0)
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [9576])
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)($6 + [104])), [9611])
	CALL eosio_assert(((int_64)*($6 + [104]) == (int_64)CALL $fimport$4()), [9657])
	$1 = *($11 + [8])
	$10 = *($11 + [16])
	$15 = *($8)
	CALL eosio_assert(((int_64)$14 == (int_64)$15), [10120])
	$10 = (int_64)
	CALL eosio_assert(((int_64)$10($10 - $2)) > (int_64)-4611686018427387904), [10168])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [10190])
	*($8) = $15
	*($11 + [16]) = $10
	$10 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$10) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [9708])
	*($6 + [72]) = (($6 + [272]) + [32])
	*($6 + [68]) = ($6 + [272])
	*($6 + [64]) = ($6 + [272])
	*($6 + [312]) = ($6 + [64])
	*($6 + [324]) = ($11 + [16])
	*($6 + [320]) = $11
	CALL $7(($6 + [320]), ($6 + [312]))
	CALL db_update_i64(*($11 + [36]), $12, ($6 + [272]), [32])
	$11 = (($6 + [104]) + [16])
	if ( (uint_64)($10 <= *($11)) ){ goto $label$40 }
	*($11) = ((int_64)$10 + (int_64)1)
	
.LABEL $label$40
	$13 = *($6 + [128])
	if ( ($13 == 0) ){ goto $label$41 }
	$0 = ($6 + [132])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$43 }
	
.LOOP $label$44:
	$11 = ($11 + [-24])
	$8 = *($11)
	*($11) = [0]
	if ( ($8 == 0) ){ goto $label$45 }
	CALL _ZdlPv($8)
	
.LABEL $label$45
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$44 }
	$11 = *(($6 + [128]))
	goto $label$42 
	
.LABEL $label$43
	$11 = $13
	
.LABEL $label$42
	*($0) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$41
	$13 = *($6 + [352])
	if ( ($13 == 0) ){ goto $label$25 }
	$0 = ($6 + [356])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$47 }
	
.LOOP $label$48:
	$11 = ($11 + [-24])
	$8 = *($11)
	*($11) = [0]
	if ( ($8 == 0) ){ goto $label$49 }
	CALL _ZdlPv($8)
	
.LABEL $label$49
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$48 }
	$11 = *(($6 + [352]))
	goto $label$46 
	
.LABEL $label$47
	$11 = $13
	
.LABEL $label$46
	*($0) = $13
	CALL _ZdlPv($11)
	goto $label$25 
	
.LABEL $label$26
	$22 = ((float_64)((float_64)((float_64)(CASTING float_64)(uint_64 $15) / (float_64)(float_64)1e3) * (float_64)$23) * (float_64)CALL $117((float_64)10, $21))
	if ( (((float_64)$22 < (float_64)(float_64)18446744073709551615) & ((float_64)$22 >= (float_64)(float_64)0)) ){ goto $label$51 }
	$5 = (int_64)0
	goto $label$50 
	
.LABEL $label$51
	$5 = (Rounds 0)($22)
	
.LABEL $label$50
	$9 = (int_64)
	CALL eosio_assert((uint_64)(((int_64)$9($2 - $5)) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9265])
	$11 = [0]
	$10 = (uint_64)$14 >> (uint_64)(int_64)8
	$12 = $10)
	
.LOOP $label$54:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$53 }
	$15 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$55 }
	$12 = $15
	$8 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$55
	$12 = $15
	
.LOOP $label$56:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$53 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$8 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $8 ){ goto $label$56 }
	$8 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	$8 = [0]
	
.LABEL $label$52
	CALL eosio_assert($8, [9314])
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9265])
	$11 = [0]
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$58 }
	$12 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$60 }
	$10 = $12
	$8 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$60
	$10 = $12
	
.LOOP $label$61:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$58 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $8 ){ goto $label$61 }
	$8 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$58
	$8 = [0]
	
.LABEL $label$57
	CALL eosio_assert($8, [9314])
	*((($6 + [104]) + [32])) = [0]
	*($6 + [120]) = (int_64)-1
	$10 = *($0)
	*($6 + [104]) = $10
	*($6 + [112]) = $1
	*($6 + [128]) = (int_64)0
	$11 = CALL db_lowerbound_i64($10, $1, (int_64)8419278409487937536, (int_64)0)
	if ( ((int_32)$11 <= (int_32)[-1]) ){ goto $label$63 }
	$11 = CALL $28(($6 + [104]), $11)
	$12 = *($0)
	CALL eosio_assert([1], [9576])
	CALL eosio_assert(((int_32)*($11 + [36]) == (int_32)($6 + [104])), [9611])
	CALL eosio_assert(((int_64)*($6 + [104]) == (int_64)CALL $fimport$4()), [9657])
	$10 = *($11 + [8])
	CALL eosio_assert(((int_64)$14 == (int_64)$10), [10040])
	$15 = ((int_64)*($11) + (int_64)$9)
	*($11) = $15
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [10083])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [10102])
	CALL eosio_assert(((int_64)$14 == (int_64)*(($11 + [24]))), [10040])
	$15 = ((int_64)*($11 + [16]) + (int_64)$9)
	*($11 + [16]) = $15
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [10083])
	CALL eosio_assert(((int_64)*($11 + [16]) < (int_64)4611686018427387904), [10102])
	*($11 + [32]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$10) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [9708])
	*($6 + [280]) = (($6 + [64]) + [36])
	*($6 + [276]) = ($6 + [64])
	*($6 + [272]) = ($6 + [64])
	*($6 + [320]) = ($6 + [272])
	*($6 + [332]) = ($11 + [16])
	*($6 + [328]) = $11
	*($6 + [336]) = ($11 + [32])
	CALL $30(($6 + [328]), ($6 + [320]))
	CALL db_update_i64(*($11 + [40]), $12, ($6 + [64]), [36])
	$11 = (($6 + [104]) + [16])
	if ( (uint_64)($10 <= *($11)) ){ goto $label$62 }
	*($11) = ((int_64)$10 + (int_64)1)
	goto $label$62 
	
.LABEL $label$63
	$12 = *($0)
	CALL eosio_assert(((int_64)*($6 + [104]) == (int_64)CALL $fimport$4()), [9767])
	*(($11 = CALL _Znwj([48])) + [36]) = ($6 + [104])
	*($11 + [8]) = $14
	*($11) = $9
	*($11 + [16]) = $9
	*($11 + [24]) = $14
	*($11 + [32]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($6 + [280]) = (($6 + [64]) + [36])
	*($6 + [276]) = ($6 + [64])
	*($6 + [272]) = ($6 + [64])
	*($6 + [320]) = ($6 + [272])
	*($6 + [332]) = ($11 + [16])
	*($6 + [328]) = $11
	*($6 + [336]) = ($11 + [32])
	CALL $30(($6 + [328]), ($6 + [320]))
	$10 = (uint_64)*($11 + [8]) >> (uint_64)(int_64)8
	$13 = CALL db_store_i64(*((($6 + [104]) + [8])), (int_64)8419278409487937536, $12, $10), ($6 + [64]), [36]
	*($11 + [40]) = $13)
	$8 = (($6 + [104]) + [16])
	if ( (uint_64)($10 <= *($8)) ){ goto $label$64 }
	*($8) = ((int_64)$10 + (int_64)1)
	
.LABEL $label$64
	*($6 + [64]) = $11
	$10 = (uint_64)*(($11 + [8])) >> (uint_64)(int_64)8
	*($6 + [328]) = $10)
	*($6 + [272]) = $13
	$3 = ($6 + [132])
	$8 = *($3)
	if ( ((uint_32)$8 >= (uint_32)*(($6 + [136]))) ){ goto $label$66 }
	*($8 + [8]) = $10
	*($8 + [16]) = $13
	*($6 + [64]) = [0]
	*($8) = $11
	*($3) = ($8 + [24])
	$11 = *($6 + [64])
	*($6 + [64]) = [0]
	if ( $11 ){ goto $label$65 }
	goto $label$62 
	
.LABEL $label$66
	CALL $49(($6 + [128]), ($6 + [64]), ($6 + [328]), ($6 + [272]))
	$11 = *($6 + [64])
	*($6 + [64]) = [0]
	if ( ($11 == 0) ){ goto $label$62 }
	
.LABEL $label$65
	CALL _ZdlPv($11)
	
.LABEL $label$62
	*((($6 + [64]) + [32])) = [0]
	*($6 + [80]) = (int_64)-1
	$10 = *($0)
	*($6 + [64]) = $10
	*($6 + [72]) = $10
	*($6 + [88]) = (int_64)0
	$11 = [0]
	$8 = CALL db_lowerbound_i64($10, $10, (int_64)6300979411374047232, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$67 }
	$11 = CALL $6(($6 + [64]), $8)
	
.LABEL $label$67
	CALL eosio_assert([1], [10040])
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [10083])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [10102])
	$8 = ($11 + [24])
	CALL eosio_assert(((int_64)*($8) == (int_64)$14), [9981])
	CALL eosio_assert(((int_64)*($11 + [16]) >= (int_64)$2), [8988])
	$12 = *($0)
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [9576])
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)($6 + [64])), [9611])
	CALL eosio_assert(((int_64)*($6 + [64]) == (int_64)CALL $fimport$4()), [9657])
	$2 = *($11 + [8])
	$10 = *($11 + [16])
	$15 = *($8)
	$13 = ((int_64)$14 == (int_64)$15)
	CALL eosio_assert($13, [10120])
	$10 = (int_64)
	CALL eosio_assert(((int_64)$10($10 - $9)) > (int_64)-4611686018427387904), [10168])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [10190])
	CALL eosio_assert($13, [10120])
	$10 = (int_64)
	CALL eosio_assert(((int_64)$10($10 - $5)) > (int_64)-4611686018427387904), [10168])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [10190])
	*($8) = $15
	*($11 + [16]) = $10
	$10 = (uint_64)$2 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$10) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [9708])
	*($6 + [336]) = (($6 + [272]) + [32])
	*($6 + [332]) = ($6 + [272])
	*($6 + [328]) = ($6 + [272])
	*($6 + [312]) = ($6 + [328])
	*($6 + [324]) = ($11 + [16])
	*($6 + [320]) = $11
	CALL $7(($6 + [320]), ($6 + [312]))
	CALL db_update_i64(*($11 + [36]), $12, ($6 + [272]), [32])
	$11 = (($6 + [64]) + [16])
	if ( (uint_64)($10 <= *($11)) ){ goto $label$68 }
	*($11) = ((int_64)$10 + (int_64)1)
	
.LABEL $label$68
	*(($6 + [40])) = $14
	*(($6 + [56])) = [0]
	*($6 + [8]) = $20
	*($6 + [24]) = $1
	*($6 + [32]) = $5
	*($6 + [48]) = (int_64)0
	$10 = *($0)
	*($6 + [16]) = $10
	$8 = ($6 + [48])
	$11 = CALL $122([9000])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$22 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$71 }
	*(($6 + [48])) = ($11 << [1])
	$13 = ($8 + [1])
	if ( $11 ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$71
	$0 = (($11 + [16]) & [-16])
	$13 = CALL _Znwj($0)
	*(($6 + [56])) = $13
	*(($6 + [52])) = $11
	*($6 + [48]) = ($0 | [1])
	
.LABEL $label$70
	CALL memcpy($13, [9000], $11)
	
.LABEL $label$69
	*(($13 + $11)) = [0]
	*(($11 = CALL _Znwj([16]))) = $10
	*($11 + [8]) = (int_64)3617214756542218240
	*((($6 + [328]) + [32])) = *((($6 + [8]) + [32]))
	*(($13 = ($6 + [376]))) = *(($8 + [8]))
	$12 = *($8)
	*(($6 + [48])) = [0]
	*($6 + [272]) = $11
	$11 = ($11 + [16])
	*($6 + [280]) = $11
	*($6 + [276]) = $11
	*($6 + [328]) = *($6 + [8])
	*($6 + [336]) = *((($6 + [8]) + [8]))
	*($6 + [344]) = *((($6 + [8]) + [16]))
	*($6 + [352]) = *($6 + [32])
	*($6 + [368]) = $12
	*(($6 + [52])) = (int_64)0
	CALL $29($10, (int_64)8422551174711144624, ($6 + [272]), ($6 + [328]))
	if ( ((*($6 + [368]) & [1]) == 0) ){ goto $label$72 }
	CALL _ZdlPv(*($13))
	
.LABEL $label$72
	$11 = *($6 + [272])
	if ( ($11 == 0) ){ goto $label$73 }
	*($6 + [276]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$73
	if ( ((*(($6 + [48])) & [1]) == 0) ){ goto $label$74 }
	CALL _ZdlPv(*(($6 + [56])))
	
.LABEL $label$74
	$13 = *($6 + [88])
	if ( ($13 == 0) ){ goto $label$75 }
	$0 = ($6 + [92])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$77 }
	
.LOOP $label$78:
	$11 = ($11 + [-24])
	$8 = *($11)
	*($11) = [0]
	if ( ($8 == 0) ){ goto $label$79 }
	CALL _ZdlPv($8)
	
.LABEL $label$79
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$78 }
	$11 = *(($6 + [88]))
	goto $label$76 
	
.LABEL $label$77
	$11 = $13
	
.LABEL $label$76
	*($0) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$75
	$13 = *($6 + [128])
	if ( ($13 == 0) ){ goto $label$25 }
	$0 = ($6 + [132])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$81 }
	
.LOOP $label$82:
	$11 = ($11 + [-24])
	$8 = *($11)
	*($11) = [0]
	if ( ($8 == 0) ){ goto $label$83 }
	CALL _ZdlPv($8)
	
.LABEL $label$83
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$82 }
	$11 = *(($6 + [128]))
	goto $label$80 
	
.LABEL $label$81
	$11 = $13
	
.LABEL $label$80
	*($0) = $13
	CALL _ZdlPv($11)
	$13 = *($6 + [176])
	if ( $13 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$13 = *($6 + [176])
	if ( ($13 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$0 = ($6 + [180])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$85 }
	
.LOOP $label$86:
	$11 = ($11 + [-24])
	$8 = *($11)
	*($11) = [0]
	if ( ($8 == 0) ){ goto $label$87 }
	CALL _ZdlPv($8)
	
.LABEL $label$87
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$86 }
	$11 = *(($6 + [176]))
	goto $label$84 
	
.LABEL $label$85
	$11 = $13
	
.LABEL $label$84
	*($0) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$23
	$13 = *($6 + [216])
	if ( ($13 == 0) ){ goto $label$88 }
	$0 = ($6 + [220])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$90 }
	
.LOOP $label$91:
	$11 = ($11 + [-24])
	$8 = *($11)
	*($11) = [0]
	if ( ($8 == 0) ){ goto $label$92 }
	CALL _ZdlPv($8)
	
.LABEL $label$92
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$91 }
	$11 = *(($6 + [216]))
	goto $label$89 
	
.LABEL $label$90
	$11 = $13
	
.LABEL $label$89
	*($0) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$88
	$13 = *($6 + [256])
	if ( ($13 == 0) ){ goto $label$93 }
	$0 = ($6 + [260])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$95 }
	
.LOOP $label$96:
	$11 = ($11 + [-24])
	$8 = *($11)
	*($11) = [0]
	if ( ($8 == 0) ){ goto $label$97 }
	CALL _ZdlPv($8)
	
.LABEL $label$97
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$96 }
	$11 = *(($6 + [256]))
	goto $label$94 
	
.LABEL $label$95
	$11 = $13
	
.LABEL $label$94
	*($0) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$93
	$global$0 = ($6 + [384])
	return (unreachable)
	
.LABEL $label$22
	CALL $103($8)
}

int_32 .FUNC $125 (int_32 $0)
{
	return CALL $126([10236], $0)
}

int_64 .FUNC $43 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *(($0 + [28]))
	if ( ((int_32)$1 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9497])
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	$2 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3504768080326688768, (int_64)-3504768080326688768)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $41($0, $2)
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9497])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [9818])
	return *($1)
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [9497])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3504768080326688768, (int_64)-3504768080326688768)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $41($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [9497])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9576])
	CALL $73($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $74($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9548])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $125($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9571])
	CALL memcpy($4, $2, [8])
	*($4 + [12]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)-3504768080326688768
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-3504768080326688768
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $75(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

int_32 .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $47 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	float_64 $23
	int_32 $24
	float_64 $25
	float_64 $26
	float_64 $27
	float_64 $28
	float_64 $29
	int_32 $30
	$6 = ($global$0 - [880])
	$global$0 = $6
	CALL require_auth($1)
	*(($6 + [808])) = [0]
	*($6 + [800]) = (int_64)0
	$7 = CALL $122([9018])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$5 }
	*($6 + [800]) = ($7 << [1])
	$8 = (($6 + [800]) | [1])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($6 + [800]) = ($9 | [1])
	*($6 + [808]) = $8
	*($6 + [804]) = $7
	
.LABEL $label$4
	CALL memcpy($8, [9018], $7)
	
.LABEL $label$3
	*(($8 + $7)) = [0]
	CALL $1(($6 + [760]), $4, ($6 + [800]))
	if ( ((*($6 + [800]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($6 + [808]))
	
.LABEL $label$6
	CALL eosio_assert(((int_32)(*($6 + [764]) - *($6 + [760])) == (int_32)[24]), [9020])
	$10 = CALL $104(($6 + [744]), *($6 + [760]))
	$11 = CALL $104(($6 + [728]), (*($6 + [760]) + [12]))
	$8 = CALL $104(($6 + [680]), $11)
	$7 = CALL $104(($6 + [696]), $10)
	CALL $50(($6 + [712]), $0, $7, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$7
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$8
	$9 = [0]
	$8 = [0]
	if ( ((uint_64)((int_64)*($6 + [712]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$12 = (uint_64)*($6 + [720]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$12 = $13
	$8 = [1]
	$4 = $7
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$12 = $13
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$4 = ($7 + [1])
	$7 = $4
	if ( $8 ){ goto $label$13 }
	$8 = [1]
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$8 = [0]
	
.LABEL $label$9
	CALL eosio_assert($8, [9039])
	CALL eosio_assert(((int_64)*($6 + [712]) > (int_64)0), [9056])
	$14 = *($3)
	if ( ((uint_64)((int_64)$14 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$14 }
	$12 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$12 = $13
	$9 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$12 = $13
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$4 = ($7 + [1])
	$7 = $4
	if ( $8 ){ goto $label$18 }
	$9 = [1]
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$9 = [0]
	
.LABEL $label$14
	CALL eosio_assert($9, [8874])
	$8 = [0]
	*((($6 + [640]) + [32])) = [0]
	*($6 + [656]) = (int_64)-1
	*($6 + [664]) = (int_64)0
	$12 = *($0)
	*($6 + [640]) = $12
	*($6 + [648]) = $12
	$4 = [0]
	$7 = CALL db_find_i64($12, $12, (int_64)-3812994831289208832, (int_64)-3812994831289208832)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$19 }
	$4 = CALL $4(($6 + [640]), $7)
	CALL eosio_assert(((int_32)*($4 + [136]) == (int_32)($6 + [640])), [9497])
	
.LABEL $label$19
	*((($6 + [600]) + [32])) = [0]
	*($6 + [616]) = (int_64)-1
	*($6 + [624]) = (int_64)0
	$12 = *($0)
	*($6 + [600]) = $12
	*($6 + [608]) = $12
	$7 = CALL db_find_i64($12, $12, (int_64)-4098957121893171200, (int_64)-4098957121893171200)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$20 }
	$8 = CALL $15(($6 + [600]), $7)
	CALL eosio_assert(((int_32)*($8 + [4]) == (int_32)($6 + [600])), [9497])
	
.LABEL $label$20
	$7 = [0]
	CALL eosio_assert((((int_32)$4 != (int_32)[0]) & ((int_32)$8 != (int_32)[0])), [8484])
	$8 = *(($6 + [668]))
	if ( ((int_32)$8 == (int_32)*(($6 + [664]))) ){ goto $label$22 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [136]) == (int_32)($6 + [640])), [9497])
	goto $label$21 
	
.LABEL $label$22
	$8 = CALL db_find_i64(*($6 + [640]), *(($6 + [648])), (int_64)-3812994831289208832, (int_64)-3812994831289208832)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$21 }
	$7 = CALL $4(($6 + [640]), $8)
	CALL eosio_assert(((int_32)*($7 + [136]) == (int_32)($6 + [640])), [9497])
	
.LABEL $label$21
	$8 = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9818])
	$15 = *(($7 + [40]))
	$16 = *(($7 + [16]))
	$17 = *($7 + [120])
	$18 = *($7 + [112])
	$12 = *($7 + [80])
	$19 = *($7 + [56])
	$20 = *($7 + [48])
	$21 = *($7 + [24])
	$22 = *($7)
	$7 = *(($6 + [628]))
	if ( ((int_32)$7 == (int_32)*(($6 + [624]))) ){ goto $label$24 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [4]) == (int_32)($6 + [600])), [9497])
	goto $label$23 
	
.LABEL $label$24
	$7 = CALL db_find_i64(*($6 + [600]), *(($6 + [608])), (int_64)-4098957121893171200, (int_64)-4098957121893171200)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$23 }
	$8 = CALL $15(($6 + [600]), $7)
	CALL eosio_assert(((int_32)*($8 + [4]) == (int_32)($6 + [600])), [9497])
	
.LABEL $label$23
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9818])
	*($6 + [598]) = *($8)
	*(($6 + [584])) = [0]
	*($6 + [560]) = $12
	*($6 + [552]) = $12
	*($6 + [568]) = (int_64)-1
	*($6 + [576]) = (int_64)0
	$7 = [0]
	$8 = CALL db_find_i64($12, $12, (int_64)-3812985124766744576, *($0))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$25 }
	$7 = CALL $27(($6 + [552]), $8)
	CALL eosio_assert(((int_32)*($7 + [12]) == (int_32)($6 + [552])), [9497])
	
.LABEL $label$25
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8517])
	CALL eosio_assert(*($7 + [8]), [8550])
	$12 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( (*($6 + [598]) == 0) ){ goto $label$26 }
	if ( ((uint_64)$18 > (uint_64)((int_64)$12 & (int_64)4294967295)) ){ goto $label$26 }
	*($6 + [598]) = [256]
	CALL $12(($6 + [600]), ($6 + [598]), *($0))
	
.LABEL $label$26
	*(($6 + [544])) = [0]
	*($6 + [528]) = (int_64)-1
	*($6 + [536]) = (int_64)0
	$12 = *($0)
	*($6 + [512]) = $12
	*($6 + [520]) = $12
	$7 = [0]
	$8 = CALL db_find_i64($12, $12, (int_64)4154435859482619904, (int_64)4154435859482619904)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$27 }
	$7 = CALL $19(($6 + [512]), $8)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)($6 + [512])), [9497])
	
.LABEL $label$27
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9080])
	$7 = *(($6 + [540]))
	if ( ((int_32)$7 == (int_32)*(($6 + [536]))) ){ goto $label$29 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)($6 + [512])), [9497])
	goto $label$28 
	
.LABEL $label$29
	$7 = [0]
	$8 = CALL db_find_i64(*($6 + [512]), *(($6 + [520])), (int_64)4154435859482619904, (int_64)4154435859482619904)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$28 }
	$7 = CALL $19(($6 + [512]), $8)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)($6 + [512])), [9497])
	
.LABEL $label$28
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9818])
	*((($6 + [464]) + [40])) = *(($7 + [40]))
	*((($6 + [464]) + [32])) = *(($7 + [32]))
	*((($6 + [464]) + [24])) = *(($7 + [24]))
	*((($6 + [464]) + [16])) = *(($7 + [16]))
	*((($6 + [464]) + [8])) = *(($7 + [8]))
	*($6 + [464]) = *($7)
	$8 = *($11 + [8])
	$13 = (uint_64)$15 >> (uint_64)(int_64)8)
	$4 = ($7 & [1])
	$7 = *($6 + [728])
	$7 = ( *($11 + [4]) ? uint_32($7 >> [1]) : $4 )
	if ( ($7 <= [8]) ){ goto $label$32 }
	CALL eosio_assert([0], [9843])
	goto $label$31 
	
.LABEL $label$32
	if ( ($7 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$9 = ( $8 ? ($11 + [1]) : $4 )
	$12 = (int_64)0
	
.LOOP $label$33:
	$4 = (($9 + $7) + [-1])
	$8 = *($4)
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$34 }
	CALL eosio_assert([0], [9888])
	$8 = *($4)
	
.LABEL $label$34
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$33 }
	goto $label$1 
	
.LABEL $label$30
	$12 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	CALL $103(($6 + [800]))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$13 == (int_64)$12), [8959])
	*($6 + [456]) = [8745]
	*($6 + [460]) = CALL $122([8745])
	*($6 + [40]) = *($6 + [456])
	CALL eosio_assert(((int_64)*(CALL $32(($6 + [800]), ($6 + [40]))) == (int_64)$5), [8942])
	$5 = *($3 + [8])
	$12 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = CALL $122([8757])
	if ( ($7 <= [8]) ){ goto $label$38 }
	CALL eosio_assert([0], [9843])
	goto $label$37 
	
.LABEL $label$38
	if ( ($7 == 0) ){ goto $label$36 }
	
.LABEL $label$37
	$13 = (int_64)0
	
.LOOP $label$39:
	$8 = *(($7 + [8756]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$40 }
	CALL eosio_assert([0], [9888])
	
.LABEL $label$40
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$39 }
	goto $label$35 
	
.LABEL $label$36
	$13 = (int_64)0
	
.LABEL $label$35
	CALL eosio_assert(((int_64)$12 == (int_64)$13), [8959])
	CALL eosio_assert(*($6 + [599]), [8687])
	CALL eosio_assert((((int_64)$21 == (int_64)$1) | ((int_64)$19 == (int_64)$1)), [9113])
	$23 = ((float_64)(Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 (int_64))(((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) - $18)) / (float_64)(float_64)3600) / (float_64)(float_64)24)) / (float_64)(Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 (int_64))($17 - $18)) / (float_64)(float_64)3600) / (float_64)(float_64)24)
	CALL eosio_assert(((float_64)$23)) > (float_64)(float_64)0), [8600])
	$23 = min ( (float_64)$23 , (float_64)(float_64)1 )
	if ( ((int_64)$21 != (int_64)$1) ){ goto $label$57 }
	$7 = [0]
	*((($6 + [416]) + [32])) = [0]
	*($6 + [432]) = (int_64)-1
	$13 = *($0)
	*($6 + [416]) = $13
	*($6 + [424]) = $1
	*($6 + [440]) = (int_64)0
	$9 = [0]
	$8 = CALL db_lowerbound_i64($13, $1, (int_64)4154264642379579392, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$58 }
	$9 = CALL $9(($6 + [416]), $8)
	
.LABEL $label$58
	$24 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($24, [9149])
	$23 = ((float_64)(CASTING float_64)(int_64 *($6 + [712])) / (float_64)CALL $117((float_64)10, (CASTING float_64)(uint_32 *($6 + [720]))))
	$8 = ($9 + [24])
	CALL eosio_assert(((float_64)(float_64))(((float_64)$23 * (float_64)((float_64)(CASTING float_64)(int_64 *($9 + [16])) / (float_64)CALL $117((float_64)10, (CASTING float_64)(uint_32 *($8))))) - (float_64))(((float_64)(CASTING float_64)(int_64 *($9 + [16])) / (float_64)CALL $117((float_64)10, (CASTING float_64)(uint_32 *($8)))) - ((float_64)(CASTING float_64)(int_64 *($9)) / (float_64)CALL $117((float_64)10, (CASTING float_64)(uint_32 *($8)))))) >= (float_64)$23), [9171])
	$13 = *($6 + [472])
	$25 = CALL $117((float_64)10, (CASTING float_64)(uint_32 *(($6 + [480]))))
	$18 = *($6 + [488])
	$26 = CALL $117((float_64)10, (CASTING float_64)(uint_32 *((($6 + [464]) + [32]))))
	$27 = ((float_64)(float_64)1 / (float_64)((float_64)(CASTING float_64)(uint_64 *($6 + [504])) / (float_64)(float_64)1e3))
	$25 = (float_64)
	$28 = CALL $117($25((float_64)1 - ((float_64)$23 / (float_64)((float_64)(CASTING float_64)(int_64 $13) / (float_64)$25)))), $27)
	$27 = CALL $117($25, $27)
	$29 = CALL $117((float_64)10, (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $15) & [255])))
	$28 = (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $5) & [255]))
	$26 = ((float_64)(CASTING float_64)(int_64 $18) / (float_64)$26)
	$25 = ((float_64)((float_64)$26 * (float_64)(float_64))((float_64)1 - $28)) * (float_64)CALL $117((float_64)10, $28)
	if ( (((float_64)$25) < (float_64)(float_64)18446744073709551615) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$56 }
	$18 = (int_64)0
	goto $label$55 
	
.LABEL $label$57
	if ( ((int_64)$19 != (int_64)$1) ){ goto $label$50 }
	$7 = [0]
	*((($6 + [416]) + [32])) = [0]
	*($6 + [432]) = (int_64)-1
	$13 = *($0)
	*($6 + [416]) = $13
	*($6 + [424]) = $1
	*($6 + [440]) = (int_64)0
	$9 = [0]
	$8 = CALL db_lowerbound_i64($13, $1, (int_64)4154264642379579392, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$59 }
	$9 = CALL $9(($6 + [416]), $8)
	
.LABEL $label$59
	$24 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($24, [9149])
	$8 = ($9 + [24])
	CALL eosio_assert(((float_64)(float_64))(((float_64)$23 * (float_64)((float_64)(CASTING float_64)(int_64 *($9 + [16])) / (float_64)CALL $117((float_64)10, (CASTING float_64)(uint_32 *($8))))) - (float_64))(((float_64)(CASTING float_64)(int_64 *($9 + [16])) / (float_64)CALL $117((float_64)10, (CASTING float_64)(uint_32 *($8)))) - ((float_64)(CASTING float_64)(int_64 *($9)) / (float_64)CALL $117((float_64)10, (CASTING float_64)(uint_32 *($8)))))) > (float_64)(float_64)0), [9171])
	$13 = *($6 + [712])
	$23 = CALL $117((float_64)10, (CASTING float_64)(uint_32 *($6 + [720])))
	$18 = *($6 + [472])
	$25 = CALL $117((float_64)10, (CASTING float_64)(uint_32 *(($6 + [480]))))
	$19 = *($6 + [488])
	$26 = CALL $117((float_64)10, (CASTING float_64)(uint_32 *((($6 + [464]) + [32]))))
	$25 = ((float_64)(float_64)1 / (float_64)((float_64)(CASTING float_64)(uint_64 *($6 + [504])) / (float_64)(float_64)1e3))
	$27 = ((float_64)(CASTING float_64)(int_64 $13) / (float_64)$23)
	$23 = (float_64)
	$28 = CALL $117($23((float_64)1 - ((float_64)$27 / (float_64)((float_64)(CASTING float_64)(int_64 $18) / (float_64)$25)))), $25)
	$25 = CALL $117($23, $25)
	$29 = CALL $117((float_64)10, (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $15) & [255])))
	$28 = (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $5) & [255]))
	$26 = ((float_64)(CASTING float_64)(int_64 $19) / (float_64)$26)
	$23 = ((float_64)((float_64)$26 * (float_64)(float_64))((float_64)1 - $28)) * (float_64)CALL $117((float_64)10, $28)
	if ( (((float_64)$23) < (float_64)(float_64)18446744073709551615) & ((float_64)$23 >= (float_64)(float_64)0)) ){ goto $label$54 }
	$18 = (int_64)0
	goto $label$53 
	
.LABEL $label$56
	$18 = (Rounds 0)($25)
	
.LABEL $label$55
	$25 = ((float_64)((float_64)((float_64)$26 * (float_64)(float_64))((float_64)1 - $27)) * (float_64)(float_64)0.05) * (float_64)CALL $117((float_64)10, $28)
	if ( (((float_64)$25) < (float_64)(float_64)18446744073709551615) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$61 }
	$21 = (int_64)0
	goto $label$60 
	
.LABEL $label$61
	$21 = (Rounds 0)($25)
	
.LABEL $label$60
	$5 = ((int_64)$21 + (int_64)$18)
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9265])
	$23 = ((float_64)$23 * (float_64)$29)
	if ( (((float_64)$23 < (float_64)(float_64)18446744073709551615) & ((float_64)$23 >= (float_64)(float_64)0)) ){ goto $label$63 }
	$15 = (int_64)0
	goto $label$62 
	
.LABEL $label$63
	$15 = (Rounds 0)($23)
	
.LABEL $label$62
	
.LOOP $label$65:
	$30 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$64 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$66 }
	$12 = $13
	$30 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$12 = $13
	
.LOOP $label$67:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$64 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$4 = ($7 + [1])
	$7 = $4
	if ( $8 ){ goto $label$67 }
	$30 = [1]
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$65 }
	
.LABEL $label$64
	CALL eosio_assert($30, [9314])
	CALL eosio_assert([1], [9981])
	CALL eosio_assert(((int_64)$14 == (int_64)$5), [9192])
	CALL eosio_assert($24, [9576])
	CALL eosio_assert(((int_32)*($9 + [36]) == (int_32)($6 + [416])), [9611])
	CALL eosio_assert(((int_64)*($6 + [416]) == (int_64)CALL $fimport$4()), [9657])
	*($9) = (int_64))(*($9) - $15)
	$12 = *($9 + [8])
	CALL eosio_assert([1], [9708])
	*($6 + [784]) = (($6 + [800]) + [36])
	*($6 + [780]) = ($6 + [800])
	*($6 + [776]) = ($6 + [800])
	*($6 + [792]) = ($6 + [776])
	*($6 + [868]) = ($9 + [16])
	*($6 + [864]) = $9
	*($6 + [872]) = ($9 + [32])
	CALL $10(($6 + [864]), ($6 + [792]))
	CALL db_update_i64(*($9 + [40]), (int_64)0, ($6 + [800]), [36])
	$7 = (($6 + [416]) + [16])
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( (uint_64)($12) <= *($7)) ){ goto $label$68 }
	*($7) = ((int_64)$12 + (int_64)1)
	
.LABEL $label$68
	*(($7 = ($6 + [472]))) = (int_64))(*($7) - $15)
	*(($7 = (($6 + [464]) + [24]))) = (int_64))(*($7) - $14)
	CALL $20(($6 + [512]), ($6 + [464]), *($0))
	$15 = *($0)
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9265])
	$12 = (uint_64)$16 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$71:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$70 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$72 }
	$12 = $13
	$8 = [1]
	$4 = $7
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$72
	$12 = $13
	
.LOOP $label$73:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$70 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$4 = ($7 + [1])
	$7 = $4
	if ( $8 ){ goto $label$73 }
	$8 = [1]
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$70
	$8 = [0]
	
.LABEL $label$69
	CALL eosio_assert($8, [9314])
	*(($6 + [392])) = $16
	*(($6 + [408])) = [0]
	*($6 + [360]) = $22
	*($6 + [376]) = $1
	*($6 + [384]) = $18
	*($6 + [400]) = (int_64)0
	*($6 + [368]) = *($0)
	$8 = ($6 + [400])
	$7 = CALL $122([8662])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$48 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$76 }
	*(($6 + [400])) = ($7 << [1])
	$4 = ($8 + [1])
	if ( $7 ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	$9 = (($7 + [16]) & [-16])
	$4 = CALL _Znwj($9)
	*(($6 + [408])) = $4
	*(($6 + [404])) = $7
	*($6 + [400]) = ($9 | [1])
	
.LABEL $label$75
	CALL memcpy($4, [8662], $7)
	
.LABEL $label$74
	*(($4 + $7)) = [0]
	*(($7 = CALL _Znwj([16]))) = $15
	*($7 + [8]) = (int_64)3617214756542218240
	*((($6 + [800]) + [32])) = *((($6 + [360]) + [32]))
	*(($4 = ($6 + [848]))) = *(($8 + [8]))
	$12 = *($8)
	*(($6 + [400])) = [0]
	*($6 + [864]) = $7
	$7 = ($7 + [16])
	*($6 + [872]) = $7
	*($6 + [868]) = $7
	*($6 + [800]) = *($6 + [360])
	*($6 + [808]) = *((($6 + [360]) + [8]))
	*($6 + [816]) = *((($6 + [360]) + [16]))
	*($6 + [824]) = *($6 + [384])
	*($6 + [840]) = $12
	*(($6 + [404])) = (int_64)0
	CALL $29($15, (int_64)8422551174711144624, ($6 + [864]), ($6 + [800]))
	if ( ((*($6 + [840]) & [1]) == 0) ){ goto $label$77 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$77
	$7 = *($6 + [864])
	if ( ($7 == 0) ){ goto $label$78 }
	*($6 + [868]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$78
	if ( ((*((($6 + [360]) + [40])) & [1]) == 0) ){ goto $label$79 }
	CALL _ZdlPv(*(($6 + [408])))
	
.LABEL $label$79
	$12 = *($0)
	*($6 + [296]) = [8745]
	*($6 + [300]) = CALL $122([8745])
	*($6 + [16]) = *($6 + [296])
	$7 = CALL $32(($6 + [776]), ($6 + [16]))
	*(($6 + [352])) = [0]
	*(($6 + [336])) = *(($3 + [8]))
	*($6 + [320]) = $20
	*($6 + [344]) = (int_64)0
	*($6 + [304]) = *($7)
	*($6 + [312]) = *($0)
	*($6 + [328]) = *($3)
	$8 = (($6 + [304]) + [40])
	$7 = CALL $122([8795])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$47 }
	$4 = ($6 + [328])
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$82 }
	*(($6 + [344])) = ($7 << [1])
	$9 = ($8 + [1])
	if ( $7 ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$82
	$30 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($30)
	*(($6 + [352])) = $9
	*(($6 + [348])) = $7
	*($6 + [344]) = ($30 | [1])
	
.LABEL $label$81
	CALL memcpy($9, [8795], $7)
	
.LABEL $label$80
	*(($9 + $7)) = [0]
	*(($7 = CALL _Znwj([16]))) = $12
	*($7 + [8]) = (int_64)3617214756542218240
	*(($6 + [832])) = *(($4 + [8]))
	*(($9 = ($6 + [848]))) = *(($8 + [8]))
	$13 = *($8)
	*(($6 + [344])) = [0]
	*($6 + [864]) = $7
	$7 = ($7 + [16])
	*($6 + [872]) = $7
	*($6 + [868]) = $7
	*($6 + [800]) = *($6 + [304])
	*($6 + [808]) = *((($6 + [304]) + [8]))
	*($6 + [816]) = *((($6 + [304]) + [16]))
	*($6 + [824]) = *($4)
	*($6 + [840]) = $13
	*(($6 + [348])) = (int_64)0
	CALL $29($12, (int_64)8422551174711144624, ($6 + [864]), ($6 + [800]))
	if ( ((*($6 + [840]) & [1]) == 0) ){ goto $label$83 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$83
	$7 = *($6 + [864])
	if ( ($7 == 0) ){ goto $label$84 }
	*($6 + [868]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$84
	if ( ((*(($6 + [344])) & [1]) == 0) ){ goto $label$85 }
	CALL _ZdlPv(*(($6 + [352])))
	
.LABEL $label$85
	$1 = *($0)
	*($6 + [232]) = [8745]
	*($6 + [236]) = CALL $122([8745])
	*($6 + [8]) = *($6 + [232])
	$9 = CALL $32(($6 + [776]), ($6 + [8]))
	$18 = *(($3 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$21 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9265])
	$12 = (uint_64)$18 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$88:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$87 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$89 }
	$12 = $13
	$8 = [1]
	$4 = $7
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$88 }
	goto $label$86 
	
.LABEL $label$89
	$12 = $13
	
.LOOP $label$90:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$87 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$4 = ($7 + [1])
	$7 = $4
	if ( $8 ){ goto $label$90 }
	$8 = [1]
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$88 }
	goto $label$86 
	
.LABEL $label$87
	$8 = [0]
	
.LABEL $label$86
	CALL eosio_assert($8, [9314])
	*(($6 + [272])) = $18
	*(($6 + [288])) = [0]
	*($6 + [256]) = $19
	*($6 + [264]) = $21
	*($6 + [280]) = (int_64)0
	*($6 + [240]) = *($9)
	*($6 + [248]) = *($0)
	$8 = ($6 + [280])
	$7 = CALL $122([9229])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$46 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$93 }
	*(($6 + [280])) = ($7 << [1])
	$4 = ($8 + [1])
	if ( $7 ){ goto $label$92 }
	goto $label$91 
	
.LABEL $label$93
	$9 = (($7 + [16]) & [-16])
	$4 = CALL _Znwj($9)
	*(($6 + [288])) = $4
	*(($6 + [284])) = $7
	*($6 + [280]) = ($9 | [1])
	
.LABEL $label$92
	CALL memcpy($4, [9229], $7)
	
.LABEL $label$91
	*(($4 + $7)) = [0]
	*(($7 = CALL _Znwj([16]))) = $1
	*($7 + [8]) = (int_64)3617214756542218240
	*((($6 + [800]) + [32])) = *((($6 + [240]) + [32]))
	*(($4 = ($6 + [848]))) = *(($8 + [8]))
	$12 = *($8)
	*(($6 + [280])) = [0]
	*($6 + [864]) = $7
	$7 = ($7 + [16])
	*($6 + [872]) = $7
	*($6 + [868]) = $7
	*($6 + [800]) = *($6 + [240])
	*($6 + [808]) = *((($6 + [240]) + [8]))
	*($6 + [816]) = *((($6 + [240]) + [16]))
	*($6 + [824]) = *($6 + [264])
	*($6 + [840]) = $12
	*(($6 + [284])) = (int_64)0
	CALL $29($1, (int_64)8422551174711144624, ($6 + [864]), ($6 + [800]))
	if ( ((*($6 + [840]) & [1]) == 0) ){ goto $label$94 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$94
	$7 = *($6 + [864])
	if ( ($7 == 0) ){ goto $label$95 }
	*($6 + [868]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$95
	if ( ((*(($6 + [280])) & [1]) == 0) ){ goto $label$96 }
	CALL _ZdlPv(*(($6 + [288])))
	
.LABEL $label$96
	$4 = *($6 + [440])
	if ( ($4 == 0) ){ goto $label$50 }
	$9 = ($6 + [444])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$52 }
	
.LOOP $label$97:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$98 }
	CALL _ZdlPv($8)
	
.LABEL $label$98
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$97 }
	$7 = *(($6 + [440]))
	goto $label$51 
	
.LABEL $label$54
	$18 = (Rounds 0)($23)
	
.LABEL $label$53
	$23 = ((float_64)((float_64)((float_64)$26 * (float_64)(float_64))((float_64)1 - $25)) * (float_64)(float_64)0.05) * (float_64)CALL $117((float_64)10, $28)
	if ( (((float_64)$23) < (float_64)(float_64)18446744073709551615) & ((float_64)$23 >= (float_64)(float_64)0)) ){ goto $label$100 }
	$19 = (int_64)0
	goto $label$99 
	
.LABEL $label$100
	$19 = (Rounds 0)($23)
	
.LABEL $label$99
	$15 = ((int_64)$19 + (int_64)$18)
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9265])
	$23 = ((float_64)$27 * (float_64)$29)
	if ( (((float_64)$23 < (float_64)(float_64)18446744073709551615) & ((float_64)$23 >= (float_64)(float_64)0)) ){ goto $label$102 }
	$21 = (int_64)0
	goto $label$101 
	
.LABEL $label$102
	$21 = (Rounds 0)($23)
	
.LABEL $label$101
	
.LOOP $label$104:
	$30 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$103 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$105 }
	$12 = $13
	$30 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$104 }
	goto $label$103 
	
.LABEL $label$105
	$12 = $13
	
.LOOP $label$106:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$103 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$4 = ($7 + [1])
	$7 = $4
	if ( $8 ){ goto $label$106 }
	$30 = [1]
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$104 }
	
.LABEL $label$103
	CALL eosio_assert($30, [9314])
	CALL eosio_assert([1], [9981])
	CALL eosio_assert(((int_64)$14 == (int_64)$15), [9192])
	CALL eosio_assert($24, [9576])
	CALL eosio_assert(((int_32)*($9 + [36]) == (int_32)($6 + [416])), [9611])
	CALL eosio_assert(((int_64)*($6 + [416]) == (int_64)CALL $fimport$4()), [9657])
	*($9) = (int_64))(*($9) - $21)
	$12 = *($9 + [8])
	CALL eosio_assert([1], [9708])
	*($6 + [784]) = (($6 + [800]) + [36])
	*($6 + [780]) = ($6 + [800])
	*($6 + [776]) = ($6 + [800])
	*($6 + [792]) = ($6 + [776])
	*($6 + [868]) = ($9 + [16])
	*($6 + [864]) = $9
	*($6 + [872]) = ($9 + [32])
	CALL $10(($6 + [864]), ($6 + [792]))
	CALL db_update_i64(*($9 + [40]), (int_64)0, ($6 + [800]), [36])
	$7 = (($6 + [416]) + [16])
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( (uint_64)($12) <= *($7)) ){ goto $label$107 }
	*($7) = ((int_64)$12 + (int_64)1)
	
.LABEL $label$107
	*(($7 = ($6 + [472]))) = (int_64))(*($7) - $21)
	*(($7 = (($6 + [464]) + [24]))) = (int_64))(*($7) - $14)
	CALL $20(($6 + [512]), ($6 + [464]), *($0))
	$21 = *($0)
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9265])
	$12 = (uint_64)$16 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$110:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$109 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$111 }
	$12 = $13
	$8 = [1]
	$4 = $7
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$110 }
	goto $label$108 
	
.LABEL $label$111
	$12 = $13
	
.LOOP $label$112:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$109 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$4 = ($7 + [1])
	$7 = $4
	if ( $8 ){ goto $label$112 }
	$8 = [1]
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$110 }
	goto $label$108 
	
.LABEL $label$109
	$8 = [0]
	
.LABEL $label$108
	CALL eosio_assert($8, [9314])
	*(($6 + [208])) = $16
	*(($6 + [224])) = [0]
	*($6 + [176]) = $22
	*($6 + [192]) = $1
	*($6 + [200]) = $18
	*($6 + [216]) = (int_64)0
	*($6 + [184]) = *($0)
	$8 = ($6 + [216])
	$7 = CALL $122([8662])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$45 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$115 }
	*(($6 + [216])) = ($7 << [1])
	$4 = ($8 + [1])
	if ( $7 ){ goto $label$114 }
	goto $label$113 
	
.LABEL $label$115
	$9 = (($7 + [16]) & [-16])
	$4 = CALL _Znwj($9)
	*(($6 + [224])) = $4
	*(($6 + [220])) = $7
	*($6 + [216]) = ($9 | [1])
	
.LABEL $label$114
	CALL memcpy($4, [8662], $7)
	
.LABEL $label$113
	*(($4 + $7)) = [0]
	*(($7 = CALL _Znwj([16]))) = $21
	*($7 + [8]) = (int_64)3617214756542218240
	*((($6 + [800]) + [32])) = *((($6 + [176]) + [32]))
	*(($4 = ($6 + [848]))) = *(($8 + [8]))
	$12 = *($8)
	*(($6 + [216])) = [0]
	*($6 + [864]) = $7
	$7 = ($7 + [16])
	*($6 + [872]) = $7
	*($6 + [868]) = $7
	*($6 + [800]) = *($6 + [176])
	*($6 + [808]) = *((($6 + [176]) + [8]))
	*($6 + [816]) = *((($6 + [176]) + [16]))
	*($6 + [824]) = *($6 + [200])
	*($6 + [840]) = $12
	*(($6 + [220])) = (int_64)0
	CALL $29($21, (int_64)8422551174711144624, ($6 + [864]), ($6 + [800]))
	if ( ((*($6 + [840]) & [1]) == 0) ){ goto $label$116 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$116
	$7 = *($6 + [864])
	if ( ($7 == 0) ){ goto $label$117 }
	*($6 + [868]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$117
	if ( ((*((($6 + [176]) + [40])) & [1]) == 0) ){ goto $label$118 }
	CALL _ZdlPv(*(($6 + [224])))
	
.LABEL $label$118
	$12 = *($0)
	*($6 + [112]) = [8745]
	*($6 + [116]) = CALL $122([8745])
	*($6 + [32]) = *($6 + [112])
	$7 = CALL $32(($6 + [776]), ($6 + [32]))
	*(($6 + [168])) = [0]
	*(($6 + [152])) = *(($3 + [8]))
	*($6 + [136]) = $20
	*($6 + [160]) = (int_64)0
	*($6 + [120]) = *($7)
	*($6 + [128]) = *($0)
	*($6 + [144]) = *($3)
	$8 = (($6 + [120]) + [40])
	$7 = CALL $122([8795])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$44 }
	$4 = ($6 + [144])
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$121 }
	*(($6 + [160])) = ($7 << [1])
	$9 = ($8 + [1])
	if ( $7 ){ goto $label$120 }
	goto $label$119 
	
.LABEL $label$121
	$30 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($30)
	*(($6 + [168])) = $9
	*(($6 + [164])) = $7
	*($6 + [160]) = ($30 | [1])
	
.LABEL $label$120
	CALL memcpy($9, [8795], $7)
	
.LABEL $label$119
	*(($9 + $7)) = [0]
	*(($7 = CALL _Znwj([16]))) = $12
	*($7 + [8]) = (int_64)3617214756542218240
	*(($6 + [832])) = *(($4 + [8]))
	*(($9 = ($6 + [848]))) = *(($8 + [8]))
	$13 = *($8)
	*(($6 + [160])) = [0]
	*($6 + [864]) = $7
	$7 = ($7 + [16])
	*($6 + [872]) = $7
	*($6 + [868]) = $7
	*($6 + [800]) = *($6 + [120])
	*($6 + [808]) = *((($6 + [120]) + [8]))
	*($6 + [816]) = *((($6 + [120]) + [16]))
	*($6 + [824]) = *($4)
	*($6 + [840]) = $13
	*(($6 + [164])) = (int_64)0
	CALL $29($12, (int_64)8422551174711144624, ($6 + [864]), ($6 + [800]))
	if ( ((*($6 + [840]) & [1]) == 0) ){ goto $label$122 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$122
	$7 = *($6 + [864])
	if ( ($7 == 0) ){ goto $label$123 }
	*($6 + [868]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$123
	if ( ((*(($6 + [160])) & [1]) == 0) ){ goto $label$124 }
	CALL _ZdlPv(*(($6 + [168])))
	
.LABEL $label$124
	$18 = *($0)
	*($6 + [48]) = [8745]
	*($6 + [52]) = CALL $122([8745])
	*($6 + [24]) = *($6 + [48])
	$9 = CALL $32(($6 + [776]), ($6 + [24]))
	$21 = *(($3 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9265])
	$12 = (uint_64)$21 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$127:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$126 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$128 }
	$12 = $13
	$8 = [1]
	$4 = $7
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$127 }
	goto $label$125 
	
.LABEL $label$128
	$12 = $13
	
.LOOP $label$129:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$126 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$4 = ($7 + [1])
	$7 = $4
	if ( $8 ){ goto $label$129 }
	$8 = [1]
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$127 }
	goto $label$125 
	
.LABEL $label$126
	$8 = [0]
	
.LABEL $label$125
	CALL eosio_assert($8, [9314])
	*(($6 + [88])) = $21
	*(($6 + [104])) = [0]
	*($6 + [72]) = $1
	*($6 + [80]) = $19
	*($6 + [96]) = (int_64)0
	*($6 + [56]) = *($9)
	*($6 + [64]) = *($0)
	$8 = ($6 + [96])
	$7 = CALL $122([9229])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$43 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$132 }
	*(($6 + [96])) = ($7 << [1])
	$4 = ($8 + [1])
	if ( $7 ){ goto $label$131 }
	goto $label$130 
	
.LABEL $label$132
	$9 = (($7 + [16]) & [-16])
	$4 = CALL _Znwj($9)
	*(($6 + [104])) = $4
	*(($6 + [100])) = $7
	*($6 + [96]) = ($9 | [1])
	
.LABEL $label$131
	CALL memcpy($4, [9229], $7)
	
.LABEL $label$130
	*(($4 + $7)) = [0]
	*(($7 = CALL _Znwj([16]))) = $18
	*($7 + [8]) = (int_64)3617214756542218240
	*((($6 + [800]) + [32])) = *((($6 + [56]) + [32]))
	*(($4 = ($6 + [848]))) = *(($8 + [8]))
	$12 = *($8)
	*(($6 + [96])) = [0]
	*($6 + [864]) = $7
	$7 = ($7 + [16])
	*($6 + [872]) = $7
	*($6 + [868]) = $7
	*($6 + [800]) = *($6 + [56])
	*($6 + [808]) = *((($6 + [56]) + [8]))
	*($6 + [816]) = *((($6 + [56]) + [16]))
	*($6 + [824]) = *($6 + [80])
	*($6 + [840]) = $12
	*(($6 + [100])) = (int_64)0
	CALL $29($18, (int_64)8422551174711144624, ($6 + [864]), ($6 + [800]))
	if ( ((*($6 + [840]) & [1]) == 0) ){ goto $label$133 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$133
	$7 = *($6 + [864])
	if ( ($7 == 0) ){ goto $label$134 }
	*($6 + [868]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$134
	if ( ((*(($6 + [96])) & [1]) == 0) ){ goto $label$135 }
	CALL _ZdlPv(*(($6 + [104])))
	
.LABEL $label$135
	$4 = *($6 + [440])
	if ( ($4 == 0) ){ goto $label$50 }
	$9 = ($6 + [444])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$49 }
	
.LOOP $label$136:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$137 }
	CALL _ZdlPv($8)
	
.LABEL $label$137
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$136 }
	$7 = *(($6 + [440]))
	*($9) = $4
	CALL _ZdlPv($7)
	$4 = *($6 + [536])
	if ( $4 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$52
	$7 = $4
	
.LABEL $label$51
	*($9) = $4
	CALL _ZdlPv($7)
	
.LABEL $label$50
	$4 = *($6 + [536])
	if ( ($4 == 0) ){ goto $label$41 }
	goto $label$42 
	
.LABEL $label$49
	*($9) = $4
	CALL _ZdlPv($4)
	$4 = *($6 + [536])
	if ( $4 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$48
	CALL $103($8)
	
.LABEL $label$47
	CALL $103($8)
	
.LABEL $label$46
	CALL $103($8)
	
.LABEL $label$45
	CALL $103($8)
	
.LABEL $label$44
	CALL $103($8)
	
.LABEL $label$43
	CALL $103($8)
	
.LABEL $label$42
	$9 = ($6 + [540])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$139 }
	
.LOOP $label$140:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$141 }
	CALL _ZdlPv($8)
	
.LABEL $label$141
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$140 }
	$7 = *(($6 + [536]))
	goto $label$138 
	
.LABEL $label$139
	$7 = $4
	
.LABEL $label$138
	*($9) = $4
	CALL _ZdlPv($7)
	
.LABEL $label$41
	$4 = *($6 + [576])
	if ( ($4 == 0) ){ goto $label$142 }
	$9 = ($6 + [580])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$144 }
	
.LOOP $label$145:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$146 }
	CALL _ZdlPv($8)
	
.LABEL $label$146
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$145 }
	$7 = *(($6 + [576]))
	goto $label$143 
	
.LABEL $label$144
	$7 = $4
	
.LABEL $label$143
	*($9) = $4
	CALL _ZdlPv($7)
	
.LABEL $label$142
	$4 = *($6 + [624])
	if ( ($4 == 0) ){ goto $label$147 }
	$9 = ($6 + [628])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$149 }
	
.LOOP $label$150:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$151 }
	CALL _ZdlPv($8)
	
.LABEL $label$151
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$150 }
	$7 = *(($6 + [624]))
	goto $label$148 
	
.LABEL $label$149
	$7 = $4
	
.LABEL $label$148
	*($9) = $4
	CALL _ZdlPv($7)
	
.LABEL $label$147
	$4 = *($6 + [664])
	if ( ($4 == 0) ){ goto $label$152 }
	$9 = ($6 + [668])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$154 }
	
.LOOP $label$155:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$156 }
	CALL _ZdlPv($8)
	
.LABEL $label$156
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$155 }
	$7 = *(($6 + [664]))
	goto $label$153 
	
.LABEL $label$154
	$7 = $4
	
.LABEL $label$153
	*($9) = $4
	CALL _ZdlPv($7)
	
.LABEL $label$152
	if ( (*($6 + [728]) & [1]) ){ goto $label$163 }
	if ( (*($6 + [744]) & [1]) ){ goto $label$162 }
	goto $label$161 
	
.LABEL $label$163
	CALL _ZdlPv(*(($11 + [8])))
	if ( ((*($6 + [744]) & [1]) == 0) ){ goto $label$161 }
	
.LABEL $label$162
	CALL _ZdlPv(*($10 + [8]))
	$4 = *($6 + [760])
	if ( $4 ){ goto $label$160 }
	goto $label$159 
	
.LABEL $label$161
	$4 = *($6 + [760])
	if ( ($4 == 0) ){ goto $label$159 }
	
.LABEL $label$160
	$8 = *($6 + [764])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$158 }
	
.LOOP $label$164:
	$7 = ($8 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$165 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$165
	$8 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$164 }
	$7 = *($6 + [760])
	goto $label$157 
	
.LABEL $label$159
	$global$0 = ($6 + [880])
	return 
	
.LABEL $label$158
	$7 = $4
	
.LABEL $label$157
	*($6 + [764]) = $4
	CALL _ZdlPv($7)
	$global$0 = ($6 + [880])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($4 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($6 <= [257]), [8829])
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)$1) ){ goto $label$3 }
	$6 = *($4)
	$7 = CALL $122([8858])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$6 }
	if ( (CALL $113($4, [0], [-1], [8858], $7) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	$6 = CALL $122([8865])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$9 }
	*($5 + [64]) = ($6 << [1])
	$7 = (($5 + [64]) | [1])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($5 + [64]) = ($8 | [1])
	*($5 + [72]) = $7
	*($5 + [68]) = $6
	
.LABEL $label$8
	CALL memcpy($7, [8865], $6)
	
.LABEL $label$7
	*(($7 + $6)) = [0]
	CALL $1(($5 + [80]), $4, ($5 + [64]))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($5 + [72]))
	
.LABEL $label$10
	$4 = *($5 + [80])
	if ( ((int_32)(*($5 + [84]) - $4) != (int_32)[24]) ){ goto $label$11 }
	$6 = *($4)
	$7 = CALL $122([8867])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$11 }
	if ( CALL $113($4, [0], [-1], [8867], $7) ){ goto $label$11 }
	*(($6 = (($5 + [48]) + [8]))) = *(($3 + [8]))
	*($5 + [48]) = *($3)
	$4 = CALL $104(($5 + [32]), (*($5 + [80]) + [12]))
	$2 = *($0 + [8])
	*((($5 + [16]) + [8])) = *($6)
	*($5 + [16]) = *($5 + [48])
	CALL $47($0, $1, $2, ($5 + [16]), $4, $2)
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$11
	$0 = *($5 + [80])
	if ( ($0 == 0) ){ goto $label$3 }
	$6 = *($5 + [84])
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$15
	$6 = $4
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$14 }
	$4 = *($5 + [80])
	goto $label$12 
	
.LABEL $label$13
	$4 = $0
	
.LABEL $label$12
	*($5 + [84]) = $0
	CALL _ZdlPv($4)
	goto $label$3 
	
.LABEL $label$5
	*(($6 = (($5 + [112]) + [8]))) = *(($3 + [8]))
	*($5 + [112]) = *($3)
	$4 = CALL $104(($5 + [96]), $4)
	$9 = *($0 + [8])
	*(($5 + [8])) = *($6)
	*($5) = *($5 + [112])
	CALL $48($0, $1, $2, $5, $4, $9)
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($5 + [128])
	return (unreachable)
	
.LABEL $label$4
	CALL $103(($5 + [64]))
	
.LABEL $label$3
	$global$0 = ($5 + [128])
}

int_32 .FUNC $45 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9497])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $51($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9497])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $44 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	float_64 $14
	float_64 $15
	int_64 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	$2 = ($global$0 - [480])
	$global$0 = $2
	CALL require_auth($1)
	*(($2 + [400])) = [0]
	*($2 + [384]) = (int_64)-1
	*($2 + [392]) = (int_64)0
	$3 = *($0)
	*($2 + [368]) = $3
	*($2 + [376]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-3812994831289208832, (int_64)-3812994831289208832)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $4(($2 + [368]), $5)
	CALL eosio_assert(((int_32)*($4 + [136]) == (int_32)($2 + [368])), [9497])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8484])
	$4 = *(($2 + [396]))
	if ( ((int_32)$4 == (int_32)*(($2 + [392]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [136]) == (int_32)($2 + [368])), [9497])
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$5 = CALL db_find_i64(*($2 + [368]), *(($2 + [376])), (int_64)-3812994831289208832, (int_64)-3812994831289208832)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $4(($2 + [368]), $5)
	CALL eosio_assert(((int_32)*($4 + [136]) == (int_32)($2 + [368])), [9497])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9818])
	$6 = *($4 + [112])
	$3 = *($4 + [80])
	$7 = *($4 + [56])
	$8 = *($4 + [48])
	$9 = *($4 + [24])
	*(($2 + [360])) = [0]
	*($2 + [344]) = (int_64)-1
	*($2 + [352]) = (int_64)0
	$10 = *($0)
	*($2 + [328]) = $10
	*($2 + [336]) = $10
	$4 = [0]
	$5 = CALL db_find_i64($10, $10, (int_64)-4098957121893171200, (int_64)-4098957121893171200)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $15(($2 + [328]), $5)
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)($2 + [328])), [9497])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8484])
	$4 = *(($2 + [356]))
	if ( ((int_32)$4 == (int_32)*(($2 + [352]))) ){ goto $label$6 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)($2 + [328])), [9497])
	goto $label$5 
	
.LABEL $label$6
	$4 = [0]
	$5 = CALL db_find_i64(*($2 + [328]), *(($2 + [336])), (int_64)-4098957121893171200, (int_64)-4098957121893171200)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $15(($2 + [328]), $5)
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)($2 + [328])), [9497])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9818])
	*($2 + [326]) = *($4)
	*(($2 + [312])) = [0]
	*($2 + [288]) = $3
	*($2 + [280]) = $3
	*($2 + [296]) = (int_64)-1
	*($2 + [304]) = (int_64)0
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-3812985124766744576, *($0))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $27(($2 + [280]), $5)
	CALL eosio_assert(((int_32)*($4 + [12]) == (int_32)($2 + [280])), [9497])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8517])
	CALL eosio_assert(*($4 + [8]), [8550])
	$3 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( (*($2 + [326]) == 0) ){ goto $label$8 }
	if ( ((uint_64)$6 > (uint_64)((int_64)$3 & (int_64)4294967295)) ){ goto $label$8 }
	*($2 + [326]) = [256]
	CALL $12(($2 + [328]), ($2 + [326]), *($0))
	
.LABEL $label$8
	CALL eosio_assert(*($2 + [327]), [8687])
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [8709])
	*($2 + [264]) = [8745]
	*($2 + [268]) = CALL $122([8745])
	*($2 + [32]) = *($2 + [264])
	$11 = CALL $32(($2 + [272]), ($2 + [32]))
	$10 = *($0)
	$4 = CALL $122([8757])
	if ( ($4 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9843])
	goto $label$11 
	
.LABEL $label$12
	if ( ($4 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$3 = (int_64)0
	
.LOOP $label$13:
	$5 = *(($4 + [8756]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9888])
	
.LABEL $label$14
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$13 }
	goto $label$9 
	
.LABEL $label$10
	$3 = (int_64)0
	
.LABEL $label$9
	$1 = *($11)
	*(($2 + [440])) = [0]
	*($2 + [416]) = $10
	*($2 + [408]) = $1
	*($2 + [424]) = (int_64)-1
	*($2 + [432]) = (int_64)0
	$4 = CALL $45(($2 + [408]), $3, [9246])
	$6 = *($4 + [8])
	$3 = *($4)
	$11 = *($2 + [432])
	if ( ($11 == 0) ){ goto $label$15 }
	$12 = ($2 + [436])
	$4 = *($12)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$19 }
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$18 }
	$4 = *(($2 + [432]))
	goto $label$16 
	
.LABEL $label$17
	$4 = $11
	
.LABEL $label$16
	*($12) = $11
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$13 = *($0)
	*($2 + [248]) = [8745]
	*($2 + [252]) = CALL $122([8745])
	*($2 + [24]) = *($2 + [248])
	$14 = ((float_64)(CASTING float_64)(int_64 $3) / (float_64)(float_64)1e4)
	$15 = ((float_64)((float_64)$14 * (float_64)(float_64)0.05) * (float_64)(float_64)1e4)
	if ( (((float_64)$15 < (float_64)(float_64)18446744073709551615) & ((float_64)$15 >= (float_64)(float_64)0)) ){ goto $label$21 }
	$16 = (int_64)0
	goto $label$20 
	
.LABEL $label$21
	$16 = (Rounds 0)($15)
	
.LABEL $label$20
	$17 = CALL $32(($2 + [256]), ($2 + [24]))
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9265])
	$15 = ((float_64)((float_64)$14 * (float_64)(float_64)0.8) * (float_64)(float_64)1e4)
	if ( (((float_64)$15 < (float_64)(float_64)18446744073709551615) & ((float_64)$15 >= (float_64)(float_64)0)) ){ goto $label$23 }
	$18 = (int_64)0
	goto $label$22 
	
.LABEL $label$23
	$18 = (Rounds 0)($15)
	
.LABEL $label$22
	$14 = ((float_64)((float_64)$14 * (float_64)(float_64)0.15) * (float_64)(float_64)1e4)
	if ( (((float_64)$14 < (float_64)(float_64)18446744073709551615) & ((float_64)$14 >= (float_64)(float_64)0)) ){ goto $label$25 }
	$19 = (int_64)0
	goto $label$24 
	
.LABEL $label$25
	$19 = (Rounds 0)($14)
	
.LABEL $label$24
	$4 = [0]
	$3 = (uint_64)$6 >> (uint_64)(int_64)8
	$10 = $3)
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$1 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$10 = $1
	$5 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$10 = $1
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $5 ){ goto $label$30 }
	$5 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$5 = [0]
	
.LABEL $label$26
	CALL eosio_assert($5, [9314])
	$10 = *($0)
	if ( ((int_64)$10 == (int_64)0) ){ goto $label$34 }
	$5 = [0]
	$11 = *([0] + [9944])
	
.LOOP $label$36:
	*((($2 + [408]) + ($4 = $5))) = *(($11 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$10 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$5 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$35 }
	$10 = ((int_64)$10 << (int_64)5)
	if ( ((int_64)$10 != (int_64)0) ){ goto $label$36 }
	
.LABEL $label$35
	*(($2 + [192])) = [0]
	*($2 + [184]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$33 }
	*($2 + [184]) = ($5 << [1])
	$11 = (($2 + [184]) | [1])
	goto $label$32 
	
.LABEL $label$34
	*(($2 + [192])) = [0]
	*($2 + [184]) = (int_64)0
	*($2 + [184]) = [0]
	$4 = (($2 + [184]) | [1])
	goto $label$31 
	
.LABEL $label$33
	$12 = (($5 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($2 + [184]) = ($12 | [1])
	*($2 + [192]) = $11
	*($2 + [188]) = $5
	
.LABEL $label$32
	$12 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$37:
	*(($11 + $4)) = *((($2 + [408]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$12 != (int_32)$4) ){ goto $label$37 }
	$4 = ($11 + $5)
	
.LABEL $label$31
	$5 = [0]
	*($4) = [0]
	$4 = CALL $112(($2 + [184]), [0], [8761])
	$11 = ($4 + [8])
	*((($2 + [200]) + [8])) = *($11)
	*($2 + [200]) = *($4)
	*($4) = (int_64)0
	*($11) = [0]
	$4 = CALL $109(($2 + [200]), [8781])
	$11 = ($4 + [8])
	*((($2 + [216]) + [8])) = *($11)
	*($2 + [216]) = *($4)
	*($4) = (int_64)0
	*($11) = [0]
	$4 = CALL $109(($2 + [216]), [8783])
	$11 = ($4 + [8])
	*((($2 + [232]) + [8])) = *($11)
	*($2 + [232]) = *($4)
	*($4) = (int_64)0
	*($11) = [0]
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$41 }
	$11 = *([0] + [9944])
	$10 = $9
	
.LOOP $label$43:
	*((($2 + [408]) + ($4 = $5))) = *(($11 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$10 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$5 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$42 }
	$10 = ((int_64)$10 << (int_64)5)
	if ( ((int_64)$10 != (int_64)0) ){ goto $label$43 }
	
.LABEL $label$42
	*(($2 + [176])) = [0]
	*($2 + [168]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$40 }
	*($2 + [168]) = ($5 << [1])
	$11 = (($2 + [168]) | [1])
	goto $label$39 
	
.LABEL $label$41
	*((($2 + [168]) + [8])) = [0]
	*($2 + [168]) = (int_64)0
	*($2 + [168]) = [0]
	$4 = (($2 + [168]) | [1])
	$5 = $4
	goto $label$38 
	
.LABEL $label$40
	$12 = (($5 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($2 + [168]) = ($12 | [1])
	*($2 + [176]) = $11
	*($2 + [172]) = $5
	
.LABEL $label$39
	$12 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$44:
	*(($11 + $4)) = *((($2 + [408]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$12 != (int_32)$4) ){ goto $label$44 }
	$5 = ($11 + $5)
	$4 = (($2 + [168]) | [1])
	
.LABEL $label$38
	*($5) = [0]
	$5 = *($2 + [168])
	$11 = ($5 & [1])
	$4 = CALL $110(($2 + [232]), ( *($2 + [176]) ? $4 : $11 ), ( *($2 + [172]) ? uint_32($5 >> [1]) : $11 ))
	$10 = *($4)
	*($4) = (int_64)0
	$5 = *($4 + [8])
	*($4 + [8]) = [0]
	$1 = *($0)
	$20 = *($17)
	*(($4 = CALL _Znwj([16]))) = $13
	*($4 + [8]) = (int_64)3617214756542218240
	*(($2 + [440])) = $6
	*(($11 = ($2 + [456]))) = $5
	*($2 + [464]) = $4
	*($2 + [408]) = $20
	*($2 + [416]) = $1
	*($2 + [424]) = $7
	*($2 + [432]) = $16
	*($2 + [448]) = $10
	$4 = ($4 + [16])
	*($2 + [472]) = $4
	*($2 + [468]) = $4
	CALL $29($13, (int_64)5377983392780260864, ($2 + [464]), ($2 + [408]))
	if ( ((*($2 + [448]) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$45
	$4 = *($2 + [464])
	if ( ($4 == 0) ){ goto $label$46 }
	*($2 + [468]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$46
	if ( (*($2 + [168]) & [1]) ){ goto $label$55 }
	if ( (*($2 + [232]) & [1]) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	CALL _ZdlPv(*(($2 + [176])))
	if ( ((*($2 + [232]) & [1]) == 0) ){ goto $label$53 }
	
.LABEL $label$54
	CALL _ZdlPv(*($2 + [240]))
	$4 = [1]
	if ( ((*($2 + [216]) & [1]) == 0) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	$4 = [1]
	if ( (*($2 + [216]) & [1]) ){ goto $label$51 }
	
.LABEL $label$52
	if ( (*($2 + [200]) & $4) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	CALL _ZdlPv(*($2 + [224]))
	if ( ((*($2 + [200]) & $4) == 0) ){ goto $label$49 }
	
.LABEL $label$50
	CALL _ZdlPv(*($2 + [208]))
	$12 = [1]
	if ( (*($2 + [184]) & [1]) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$12 = [1]
	if ( ((*($2 + [184]) & [1]) == 0) ){ goto $label$47 }
	
.LABEL $label$48
	CALL _ZdlPv(*($2 + [192]))
	
.LABEL $label$47
	$7 = *($0)
	*($2 + [104]) = [8745]
	*($2 + [108]) = CALL $122([8745])
	*($2 + [16]) = *($2 + [104])
	$17 = CALL $32(($2 + [232]), ($2 + [16]))
	CALL eosio_assert((uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9265])
	$4 = [0]
	$10 = $3
	
.LOOP $label$58:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$57 }
	$1 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$59 }
	$10 = $1
	$5 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$59
	$10 = $1
	
.LOOP $label$60:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$57 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + $12)
	$4 = $11
	if ( $5 ){ goto $label$60 }
	$5 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$57
	$5 = [0]
	
.LABEL $label$56
	CALL eosio_assert($5, [9314])
	*(($2 + [144])) = $6
	*(($2 + [160])) = [0]
	*($2 + [128]) = $8
	*($2 + [136]) = $19
	*($2 + [152]) = (int_64)0
	*($2 + [112]) = *($17)
	*($2 + [120]) = *($0)
	$5 = ($2 + [152])
	$4 = CALL $122([8795])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$62 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$65 }
	*(($2 + [152])) = ($4 << [1])
	$11 = ($5 + [1])
	if ( $4 ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$65
	$12 = (($4 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*(($2 + [160])) = $11
	*(($2 + [156])) = $4
	*($2 + [152]) = ($12 | [1])
	
.LABEL $label$64
	CALL memcpy($11, [8795], $4)
	
.LABEL $label$63
	*(($11 + $4)) = [0]
	*(($4 = CALL _Znwj([16]))) = $7
	*($4 + [8]) = (int_64)3617214756542218240
	*((($2 + [408]) + [32])) = *((($2 + [112]) + [32]))
	*(($11 = ($2 + [456]))) = *(($5 + [8]))
	$10 = *($5)
	*(($2 + [152])) = [0]
	*($2 + [464]) = $4
	$4 = ($4 + [16])
	*($2 + [472]) = $4
	*($2 + [468]) = $4
	*($2 + [408]) = *($2 + [112])
	*($2 + [416]) = *((($2 + [112]) + [8]))
	*($2 + [424]) = *((($2 + [112]) + [16]))
	*($2 + [432]) = *($2 + [136])
	*($2 + [448]) = $10
	*(($2 + [156])) = (int_64)0
	CALL $29($7, (int_64)5377983392780260864, ($2 + [464]), ($2 + [408]))
	if ( ((*($2 + [448]) & [1]) == 0) ){ goto $label$66 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$66
	$4 = *($2 + [464])
	if ( ($4 == 0) ){ goto $label$67 }
	*($2 + [468]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$67
	if ( ((*(($2 + [152])) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*(($2 + [160])))
	
.LABEL $label$68
	$1 = *($0)
	*($2 + [40]) = [8745]
	*($2 + [44]) = CALL $122([8745])
	*($2 + [8]) = *($2 + [40])
	$12 = CALL $32(($2 + [232]), ($2 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9265])
	$4 = [0]
	
.LOOP $label$71:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$70 }
	$10 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$72 }
	$3 = $10
	$5 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$72
	$3 = $10
	
.LOOP $label$73:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$70 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $5 ){ goto $label$73 }
	$5 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$70
	$5 = [0]
	
.LABEL $label$69
	CALL eosio_assert($5, [9314])
	*(($2 + [80])) = $6
	*(($2 + [96])) = [0]
	*($2 + [64]) = $9
	*($2 + [72]) = $18
	*($2 + [88]) = (int_64)0
	*($2 + [48]) = *($12)
	*($2 + [56]) = *($0)
	$5 = ($2 + [88])
	$4 = CALL $122([8804])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$61 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$76 }
	*(($2 + [88])) = ($4 << [1])
	$11 = ($5 + [1])
	if ( $4 ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	$12 = (($4 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*(($2 + [96])) = $11
	*(($2 + [92])) = $4
	*($2 + [88]) = ($12 | [1])
	
.LABEL $label$75
	CALL memcpy($11, [8804], $4)
	
.LABEL $label$74
	*(($11 + $4)) = [0]
	*(($4 = CALL _Znwj([16]))) = $1
	*($4 + [8]) = (int_64)3617214756542218240
	*((($2 + [408]) + [32])) = *((($2 + [48]) + [32]))
	*(($11 = ($2 + [456]))) = *(($5 + [8]))
	$3 = *($5)
	*(($2 + [88])) = [0]
	*($2 + [464]) = $4
	$4 = ($4 + [16])
	*($2 + [472]) = $4
	*($2 + [468]) = $4
	*($2 + [408]) = *($2 + [48])
	*($2 + [416]) = *((($2 + [48]) + [8]))
	*($2 + [424]) = *((($2 + [48]) + [16]))
	*($2 + [432]) = *($2 + [72])
	*($2 + [448]) = $3
	*(($2 + [92])) = (int_64)0
	CALL $29($1, (int_64)5377983392780260864, ($2 + [464]), ($2 + [408]))
	if ( ((*($2 + [448]) & [1]) == 0) ){ goto $label$77 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$77
	$4 = *($2 + [464])
	if ( ($4 == 0) ){ goto $label$78 }
	*($2 + [468]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$78
	if ( ((*(($2 + [88])) & [1]) == 0) ){ goto $label$79 }
	CALL _ZdlPv(*(($2 + [96])))
	
.LABEL $label$79
	$11 = *($2 + [304])
	if ( ($11 == 0) ){ goto $label$80 }
	$12 = ($2 + [308])
	$4 = *($12)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$82 }
	
.LOOP $label$83:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$84 }
	CALL _ZdlPv($5)
	
.LABEL $label$84
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$83 }
	$4 = *(($2 + [304]))
	goto $label$81 
	
.LABEL $label$82
	$4 = $11
	
.LABEL $label$81
	*($12) = $11
	CALL _ZdlPv($4)
	
.LABEL $label$80
	$11 = *($2 + [352])
	if ( ($11 == 0) ){ goto $label$85 }
	$12 = ($2 + [356])
	$4 = *($12)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$87 }
	
.LOOP $label$88:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$89 }
	CALL _ZdlPv($5)
	
.LABEL $label$89
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$88 }
	$4 = *(($2 + [352]))
	goto $label$86 
	
.LABEL $label$87
	$4 = $11
	
.LABEL $label$86
	*($12) = $11
	CALL _ZdlPv($4)
	
.LABEL $label$85
	$11 = *($2 + [392])
	if ( ($11 == 0) ){ goto $label$90 }
	$12 = ($2 + [396])
	$4 = *($12)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$92 }
	
.LOOP $label$93:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$94 }
	CALL _ZdlPv($5)
	
.LABEL $label$94
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$93 }
	$4 = *(($2 + [392]))
	goto $label$91 
	
.LABEL $label$92
	$4 = $11
	
.LABEL $label$91
	*($12) = $11
	CALL _ZdlPv($4)
	
.LABEL $label$90
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$62
	CALL $103($5)
	
.LABEL $label$61
	CALL $103($5)
	(unreachable)
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $125($1)
	
.LABEL $label$2
	*(CALL $115()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $125(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $128($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $128 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18620])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18428]
	$3 = (((int_32)$1 * (int_32)[12]) + [18428])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9548])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $125($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [36]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $80(($3 + [32]), ($3 + [24]))
	*($5 + [40]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $11(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9548])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $125($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	CALL $79(($3 + [40]), ($3 + [32]))
	*($5 + [36]) = $1
	*($3 + [32]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [40]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $8(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9548])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $125($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([152])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [136]) = $0
	CALL $76(($3 + [32]), $5)
	*($5 + [140]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-3812994831289208832
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-3812994831289208832
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $77(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $5 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [136]) == (int_32)$0), [9497])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3812994831289208832, (int_64)-3812994831289208832)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $4($0, $4)
	CALL eosio_assert(((int_32)*($4 + [136]) == (int_32)$0), [9497])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9576])
	CALL $13($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $14($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $104(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_64 $5, int_64 $6, int_32 $7, int_64 $8, int_64 $9, int_64 $10, int_64 $11, int_64 $12, int_64 $13, int_64 $14)
{
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_64 $20
	int_32 $21
	$15 = ($global$0 - [384])
	$global$0 = $15
	CALL require_auth(*($0))
	$16 = [0]
	$17 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$18 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$19 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$20 = (uint_64)$18 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$18 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$18 = $20
	$17 = [1]
	$21 = $19
	$19 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$18 = $20
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$18 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8)
	$17 = ((int_32)$19 < (int_32)[6])
	$21 = ($19 + [1])
	$19 = $21
	if ( $17 ){ goto $label$5 }
	$17 = [1]
	$19 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$17 = [0]
	
.LABEL $label$1
	CALL eosio_assert($17, [8192])
	if ( ((uint_64)((int_64)*($4) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$18 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8)
	$19 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$20 = (uint_64)$18 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$18 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$18 = $20
	$16 = [1]
	$17 = $19
	$19 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$18 = $20
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$18 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8)
	$17 = ((int_32)$19 < (int_32)[6])
	$21 = ($19 + [1])
	$19 = $21
	if ( $17 ){ goto $label$10 }
	$16 = [1]
	$19 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$16 = [0]
	
.LABEL $label$6
	CALL eosio_assert($16, [8215])
	*((($15 + [304]) + [32])) = [0]
	*($15 + [320]) = (int_64)-1
	*($15 + [328]) = (int_64)0
	$18 = *($0)
	*($15 + [304]) = $18
	*($15 + [312]) = $18
	$19 = [0]
	$17 = CALL db_find_i64($18, $18, (int_64)-3812994831289208832, (int_64)-3812994831289208832)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$11 }
	$19 = CALL $4(($15 + [304]), $17)
	CALL eosio_assert(((int_32)*($19 + [136]) == (int_32)($15 + [304])), [9497])
	
.LABEL $label$11
	CALL eosio_assert(($19 == 0), [8322])
	$17 = ($2 + [8])
	*((($15 + [168]) + [16])) = *($17)
	*(($15 + [208])) = *(($4 + [8]))
	*(($15 + [240])) = *(($7 + [8]))
	*($15 + [168]) = $1
	*($15 + [192]) = $3
	*($15 + [216]) = $5
	*($15 + [224]) = $6
	*($15 + [248]) = $8
	*($15 + [256]) = $9
	*($15 + [176]) = *($2)
	*($15 + [200]) = *($4)
	*($15 + [232]) = *($7)
	*($15 + [272]) = $11
	*($15 + [264]) = $10
	*($15 + [280]) = $12
	*($15 + [288]) = $13
	*($15 + [296]) = $14
	CALL $5(($15 + [304]), ($15 + [168]), *($0))
	*((($15 + [128]) + [32])) = [0]
	*($15 + [144]) = (int_64)-1
	$18 = *($0)
	*($15 + [128]) = $18
	*($15 + [136]) = $18
	*($15 + [152]) = (int_64)0
	$19 = CALL db_lowerbound_i64($18, $18, (int_64)6300979411374047232, (int_64)0)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$13 }
	CALL $6(($15 + [128]), $19)
	goto $label$12 
	
.LABEL $label$13
	$20 = *($0)
	CALL eosio_assert(((int_64)*($15 + [128]) == (int_64)CALL $fimport$4()), [9767])
	*(($19 = CALL _Znwj([48])) + [32]) = ($15 + [128])
	$18 = *($17)
	*($19 + [8]) = $18
	$1 = *($2)
	*($19) = $1
	*($19 + [16]) = $1
	*(($19 + [24])) = $18
	*($15 + [48]) = (($15 + [80]) + [32])
	*($15 + [44]) = ($15 + [80])
	*($15 + [40]) = ($15 + [80])
	*($15 + [368]) = ($15 + [40])
	*($15 + [4]) = ($19 + [16])
	*($15) = $19
	CALL $7($15, ($15 + [368]))
	$18 = (uint_64)*($19 + [8]) >> (uint_64)(int_64)8
	$21 = CALL db_store_i64(*((($15 + [128]) + [8])), (int_64)6300979411374047232, $20, $18), ($15 + [80]), [32]
	*($19 + [36]) = $21)
	if ( (uint_64)($18 <= *((($15 + [128]) + [16]))) ){ goto $label$14 }
	*(($15 + [144])) = ((int_64)$18 + (int_64)1)
	
.LABEL $label$14
	*($15 + [40]) = $19
	$18 = (uint_64)*(($19 + [8])) >> (uint_64)(int_64)8
	*($15 + [80]) = $18)
	*($15) = $21
	$2 = ($15 + [156])
	$17 = *($2)
	if ( ((uint_32)$17 >= (uint_32)*((($15 + [128]) + [32]))) ){ goto $label$16 }
	*($17 + [8]) = $18
	*($17 + [16]) = $21
	*($15 + [40]) = [0]
	*($17) = $19
	*($2) = ($17 + [24])
	$19 = *($15 + [40])
	*($15 + [40]) = [0]
	if ( $19 ){ goto $label$15 }
	goto $label$12 
	
.LABEL $label$16
	CALL $8(($15 + [152]), ($15 + [40]), ($15 + [80]), $15)
	$19 = *($15 + [40])
	*($15 + [40]) = [0]
	if ( ($19 == 0) ){ goto $label$12 }
	
.LABEL $label$15
	CALL _ZdlPv($19)
	
.LABEL $label$12
	*((($15 + [80]) + [32])) = [0]
	*($15 + [96]) = (int_64)-1
	$18 = *($0)
	*($15 + [80]) = $18
	*($15 + [88]) = $3
	*($15 + [104]) = (int_64)0
	$19 = CALL db_lowerbound_i64($18, $3, (int_64)4154264642379579392, (int_64)0)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$18 }
	CALL $9(($15 + [80]), $19)
	goto $label$17 
	
.LABEL $label$18
	$20 = *($0)
	CALL eosio_assert(((int_64)*($15 + [80]) == (int_64)CALL $fimport$4()), [9767])
	*(($19 = CALL _Znwj([48])) + [36]) = ($15 + [80])
	$18 = *(($4 + [8]))
	*($19 + [8]) = $18
	$3 = *($4)
	*($19) = $3
	*($19 + [16]) = $3
	*(($19 + [24])) = $18
	*($15 + [376]) = ($15 + [36])
	*($15 + [372]) = $15
	*($15 + [368]) = $15
	*($15 + [344]) = ($15 + [368])
	*($15 + [44]) = ($19 + [16])
	*($15 + [40]) = $19
	*($15 + [48]) = ($19 + [32])
	CALL $10(($15 + [40]), ($15 + [344]))
	$18 = (uint_64)*($19 + [8]) >> (uint_64)(int_64)8
	$21 = CALL db_store_i64(*((($15 + [80]) + [8])), (int_64)4154264642379579392, $20, $18), $15, [36]
	*($19 + [40]) = $21)
	$17 = (($15 + [80]) + [16])
	if ( (uint_64)($18 <= *($17)) ){ goto $label$19 }
	*($17) = ((int_64)$18 + (int_64)1)
	
.LABEL $label$19
	*($15) = $19
	$18 = (uint_64)*(($19 + [8])) >> (uint_64)(int_64)8
	*($15 + [40]) = $18)
	*($15 + [368]) = $21
	$4 = ($15 + [108])
	$17 = *($4)
	if ( ((uint_32)$17 >= (uint_32)*(($15 + [112]))) ){ goto $label$21 }
	*($17 + [8]) = $18
	*($17 + [16]) = $21
	*($15) = [0]
	*($17) = $19
	*($4) = ($17 + [24])
	$19 = *($15)
	*($15) = [0]
	if ( $19 ){ goto $label$20 }
	goto $label$17 
	
.LABEL $label$21
	CALL $11(($15 + [104]), $15, ($15 + [40]), ($15 + [368]))
	$19 = *($15)
	*($15) = [0]
	if ( ($19 == 0) ){ goto $label$17 }
	
.LABEL $label$20
	CALL _ZdlPv($19)
	
.LABEL $label$17
	*((($15 + [40]) + [32])) = [0]
	*($15 + [56]) = (int_64)-1
	$18 = *($0)
	*($15 + [40]) = $18
	*($15 + [48]) = $6
	*($15 + [64]) = (int_64)0
	$19 = CALL db_lowerbound_i64($18, $6, (int_64)4154264642379579392, (int_64)0)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$23 }
	CALL $9(($15 + [40]), $19)
	goto $label$22 
	
.LABEL $label$23
	$20 = *($0)
	CALL eosio_assert(((int_64)*($15 + [40]) == (int_64)CALL $fimport$4()), [9767])
	*(($19 = CALL _Znwj([48])) + [36]) = ($15 + [40])
	$18 = *(($7 + [8]))
	*($19 + [8]) = $18
	$3 = *($7)
	*($19) = $3
	*($19 + [16]) = $3
	*(($19 + [24])) = $18
	*($15 + [352]) = ($15 + [36])
	*($15 + [348]) = $15
	*($15 + [344]) = $15
	*($15 + [360]) = ($15 + [344])
	*($15 + [372]) = ($19 + [16])
	*($15 + [368]) = $19
	*($15 + [376]) = ($19 + [32])
	CALL $10(($15 + [368]), ($15 + [360]))
	$18 = (uint_64)*($19 + [8]) >> (uint_64)(int_64)8
	$21 = CALL db_store_i64(*((($15 + [40]) + [8])), (int_64)4154264642379579392, $20, $18), $15, [36]
	*($19 + [40]) = $21)
	$17 = (($15 + [40]) + [16])
	if ( (uint_64)($18 <= *($17)) ){ goto $label$24 }
	*($17) = ((int_64)$18 + (int_64)1)
	
.LABEL $label$24
	*($15 + [368]) = $19
	$18 = (uint_64)*(($19 + [8])) >> (uint_64)(int_64)8
	*($15) = $18)
	*($15 + [344]) = $21
	$4 = ($15 + [68])
	$17 = *($4)
	if ( ((uint_32)$17 >= (uint_32)*(($15 + [72]))) ){ goto $label$26 }
	*($17 + [8]) = $18
	*($17 + [16]) = $21
	*($15 + [368]) = [0]
	*($17) = $19
	*($4) = ($17 + [24])
	$19 = *($15 + [368])
	*($15 + [368]) = [0]
	if ( $19 ){ goto $label$25 }
	goto $label$22 
	
.LABEL $label$26
	CALL $11(($15 + [64]), ($15 + [368]), $15, ($15 + [344]))
	$19 = *($15 + [368])
	*($15 + [368]) = [0]
	if ( ($19 == 0) ){ goto $label$22 }
	
.LABEL $label$25
	CALL _ZdlPv($19)
	
.LABEL $label$22
	*(($15 + [32])) = [0]
	*($15 + [16]) = (int_64)-1
	*($15 + [24]) = (int_64)0
	$18 = *($0)
	*($15) = $18
	*($15 + [8]) = $18
	*($15 + [368]) = [0]
	CALL $12($15, ($15 + [368]), $18)
	$21 = *($15 + [24])
	if ( ($21 == 0) ){ goto $label$27 }
	$0 = ($15 + [28])
	$19 = *($0)
	if ( ((int_32)$19 == (int_32)$21) ){ goto $label$29 }
	
.LOOP $label$30:
	$19 = ($19 + [-24])
	$17 = *($19)
	*($19) = [0]
	if ( ($17 == 0) ){ goto $label$31 }
	CALL _ZdlPv($17)
	
.LABEL $label$31
	if ( ((int_32)$21 != (int_32)$19) ){ goto $label$30 }
	$19 = *(($15 + [24]))
	goto $label$28 
	
.LABEL $label$29
	$19 = $21
	
.LABEL $label$28
	*($0) = $21
	CALL _ZdlPv($19)
	
.LABEL $label$27
	$21 = *($15 + [64])
	if ( ($21 == 0) ){ goto $label$32 }
	$0 = ($15 + [68])
	$19 = *($0)
	if ( ((int_32)$19 == (int_32)$21) ){ goto $label$34 }
	
.LOOP $label$35:
	$19 = ($19 + [-24])
	$17 = *($19)
	*($19) = [0]
	if ( ($17 == 0) ){ goto $label$36 }
	CALL _ZdlPv($17)
	
.LABEL $label$36
	if ( ((int_32)$21 != (int_32)$19) ){ goto $label$35 }
	$19 = *(($15 + [64]))
	goto $label$33 
	
.LABEL $label$34
	$19 = $21
	
.LABEL $label$33
	*($0) = $21
	CALL _ZdlPv($19)
	
.LABEL $label$32
	$21 = *($15 + [104])
	if ( ($21 == 0) ){ goto $label$37 }
	$0 = ($15 + [108])
	$19 = *($0)
	if ( ((int_32)$19 == (int_32)$21) ){ goto $label$39 }
	
.LOOP $label$40:
	$19 = ($19 + [-24])
	$17 = *($19)
	*($19) = [0]
	if ( ($17 == 0) ){ goto $label$41 }
	CALL _ZdlPv($17)
	
.LABEL $label$41
	if ( ((int_32)$21 != (int_32)$19) ){ goto $label$40 }
	$19 = *(($15 + [104]))
	goto $label$38 
	
.LABEL $label$39
	$19 = $21
	
.LABEL $label$38
	*($0) = $21
	CALL _ZdlPv($19)
	
.LABEL $label$37
	$21 = *($15 + [152])
	if ( ($21 == 0) ){ goto $label$42 }
	$0 = ($15 + [156])
	$19 = *($0)
	if ( ((int_32)$19 == (int_32)$21) ){ goto $label$44 }
	
.LOOP $label$45:
	$19 = ($19 + [-24])
	$17 = *($19)
	*($19) = [0]
	if ( ($17 == 0) ){ goto $label$46 }
	CALL _ZdlPv($17)
	
.LABEL $label$46
	if ( ((int_32)$21 != (int_32)$19) ){ goto $label$45 }
	$19 = *(($15 + [152]))
	goto $label$43 
	
.LABEL $label$44
	$19 = $21
	
.LABEL $label$43
	*($0) = $21
	CALL _ZdlPv($19)
	
.LABEL $label$42
	$21 = *($15 + [328])
	if ( ($21 == 0) ){ goto $label$47 }
	$0 = ($15 + [332])
	$19 = *($0)
	if ( ((int_32)$19 == (int_32)$21) ){ goto $label$49 }
	
.LOOP $label$50:
	$19 = ($19 + [-24])
	$17 = *($19)
	*($19) = [0]
	if ( ($17 == 0) ){ goto $label$51 }
	CALL _ZdlPv($17)
	
.LABEL $label$51
	if ( ((int_32)$21 != (int_32)$19) ){ goto $label$50 }
	$19 = *(($15 + [328]))
	goto $label$48 
	
.LABEL $label$49
	$19 = $21
	
.LABEL $label$48
	*($0) = $21
	CALL _ZdlPv($19)
	
.LABEL $label$47
	$global$0 = ($15 + [384])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($2 + [1])
	$6 = ($1 + [1])
	$7 = *($1 + [4])
	$8 = *($1)
	$9 = ($2 + [4])
	
.LOOP $label$1:
	$10 = ($8 & [1])
	$7 = ( $7 ? uint_32(($8 & [254]) >> [1]) : $10 )
	if ( ($7 <= $4) ){ goto $label$3 }
	$11 = $4
	$13 = ($8 & [1])
	$8 = *($2)
	$8 = ( *($9) ? uint_32($8 >> [1]) : $13 )
	if ( ($8 == 0) ){ goto $label$2 }
	$7 = ($12 + $4)
	$12 = ( *(($1 + [8])) ? $6 : $10 )
	$10 = ($12 + $7)
	$11 = ($10 - $7)
	if ( ((int_32)$11 < (int_32)$8) ){ goto $label$3 }
	$14 = ( *(($2 + [8])) ? $5 : $13 )
	$13 = *($14)
	
.LOOP $label$4:
	$11 = (($11 - $8) + [1])
	if ( ($11 == 0) ){ goto $label$3 }
	$11 = CALL $120($7, $13, $11)
	if ( ($11 == 0) ){ goto $label$3 }
	if ( (CALL $121($11, $14, $8) == 0) ){ goto $label$5 }
	$7 = ($11 + [1])
	$11 = ($10 - $7)
	if ( ((int_32)$11 >= (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$3 }
	$11 = ($11 - $12)
	if ( ((int_32)$11 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = *($1)
	if ( ($8 & [1]) ){ goto $label$6 }
	$11 = uint_32($8 >> [1])
	goto $label$2 
	
.LABEL $label$6
	$11 = *(($1 + [4]))
	
.LABEL $label$2
	$8 = CALL $105($3, $1, $4, ($11 - $4), $1)
	$4 = ($0 + [4])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)*(($0 + [8]))) ){ goto $label$8 }
	CALL $104($7, $8)
	*($4) = (*($4) + [12])
	goto $label$7 
	
.LABEL $label$8
	CALL $2($0, $8)
	
.LABEL $label$7
	$4 = *($2)
	$10 = *($9)
	if ( ((*($3) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$9
	$8 = *($1)
	$7 = *(($1 + [4]))
	$13 = ( $7 ? uint_32($8 >> [1]) : ($8 & [1]) )
	if ( ((uint_32)$11 >= (uint_32)$13) ){ goto $label$10 }
	$4 = (( $10 ? uint_32($4 >> [1]) : ($4 & [1]) ) + $11)
	if ( ($4 <= $13) ){ goto $label$1 }
	
.LABEL $label$10
	$global$0 = ($3 + [16])
}

void .FUNC $14 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [9767])
	*(($5 = CALL _Znwj([152])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [136]) = $1
	$5 = CALL memcpy($5, *($3), [136])
	*($4 + [168]) = (($4 + [16]) + [136])
	*($4 + [164]) = ($4 + [16])
	*($4 + [160]) = ($4 + [16])
	CALL $78(($4 + [160]), $5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-3812994831289208832, $2, (int_64)-3812994831289208832, ($4 + [16]), [136])
	*($5 + [140]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-3812994831289208832) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-3812994831289208831
	
.LABEL $label$1
	*($4 + [160]) = $5
	*($4 + [16]) = (int_64)-3812994831289208832
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-3812994831289208832
	*($3 + [16]) = $6
	*($4 + [160]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $77(($1 + [24]), ($4 + [160]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [160])
	*($4 + [160]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [176])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9548])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $125($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([16])) + [4]) = $0
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9571])
	CALL memcpy(($3 + [16]), $2, [1])
	*($4) = ((int_32)*($3 + [16]) != (int_32)[0])
	CALL eosio_assert(((int_32)$5 != (int_32)[1]), [9571])
	CALL memcpy(($3 + [16]), ($2 + [1]), [1])
	*($4 + [1]) = ((int_32)*($3 + [16]) != (int_32)[0])
	*($4 + [8]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)-4098957121893171200
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-4098957121893171200
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $82(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [4]) == (int_32)$0), [9611])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9657])
	*($1) = *(*($3))
	CALL eosio_assert([1], [9708])
	*($4 + [14]) = *($1)
	CALL eosio_assert([1], [9491])
	CALL memcpy($4, ($4 + [14]), [1])
	*($4 + [15]) = *($1 + [1])
	CALL eosio_assert([1], [9491])
	CALL memcpy(($4 | [1]), ($4 + [15]), [1])
	CALL db_update_i64(*($1 + [8]), $2, $4, [2])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4098957121893171200) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-4098957121893171199
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [9767])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([16])
	CALL $81($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)-4098957121893171200
	$5 = *($3 + [8])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)-4098957121893171200
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $82(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9491])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $12 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)$0), [9497])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4098957121893171200, (int_64)-4098957121893171200)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $15($0, $4)
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)$0), [9497])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9576])
	CALL $16($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $17($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [9611])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9657])
	$1 = CALL memcpy($1, *($3), [136])
	CALL eosio_assert([1], [9708])
	*($4 + [152]) = ($4 + [136])
	*($4 + [148]) = $4
	*($4 + [144]) = $4
	CALL $78(($4 + [144]), $1)
	CALL db_update_i64(*($1 + [140]), $2, $4, [136])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-3812994831289208832) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-3812994831289208831
	
.LABEL $label$1
	$global$0 = ($4 + [160])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$5 = ($global$0 - [96])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = [0]
	$7 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $10
	$7 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8347])
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$8 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$8 = $10
	$6 = [1]
	$7 = $9
	$9 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$8 = $10
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $7 ){ goto $label$10 }
	$6 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8366])
	CALL eosio_assert(((int_64)$4 != (int_64)0), [8386])
	$9 = [0]
	*((($5 + [56]) + [32])) = [0]
	*($5 + [72]) = (int_64)-1
	*($5 + [80]) = (int_64)0
	$8 = *($0)
	*($5 + [56]) = $8
	*($5 + [64]) = $8
	$7 = CALL db_find_i64($8, $8, (int_64)4154435859482619904, (int_64)4154435859482619904)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $19(($5 + [56]), $7) + [48]) == (int_32)($5 + [56])), [9497])
	goto $label$11 
	
.LABEL $label$12
	$9 = [1]
	
.LABEL $label$11
	CALL eosio_assert($9, [8401])
	*(($5 + [24])) = *(($2 + [8]))
	*((($5 + [8]) + [32])) = *(($3 + [8]))
	*($5 + [8]) = $1
	*($5 + [48]) = $4
	*($5 + [16]) = *($2)
	*($5 + [32]) = *($3)
	CALL $20(($5 + [56]), ($5 + [8]), *($0))
	$11 = *($5 + [80])
	if ( ($11 == 0) ){ goto $label$13 }
	$3 = ($5 + [84])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$15 }
	
.LOOP $label$16:
	$9 = ($9 + [-24])
	$7 = *($9)
	*($9) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$16 }
	$9 = *(($5 + [80]))
	goto $label$14 
	
.LABEL $label$15
	$9 = $11
	
.LABEL $label$14
	*($3) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$13
	$global$0 = ($5 + [96])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9548])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $125($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = $0
	CALL $83(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)4154435859482619904
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)4154435859482619904
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $84(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $58 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $125($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [112]))) = (int_64)0
	*(($8 = ($4 + [128]))) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [84]) = $2
	*($4 + [80]) = $2
	*($4 + [88]) = ($2 + $7)
	*($4 + [224]) = ($4 + [80])
	*($4 + [48]) = ($4 + [96])
	CALL $66(($4 + [48]), ($4 + [224]))
	*(($9 = (($4 + [32]) + [8]))) = *($4 + [88])
	*($4 + [32]) = *($4 + [80])
	*(($10 = (($4 + [208]) + [8]))) = *($9)
	*($4 + [208]) = *($4 + [32])
	$9 = *($10)
	*((($4 + [224]) + [8])) = $9
	*(($4 + [72])) = $9
	*($4 + [48]) = $0
	*($4 + [56]) = $1
	$0 = *($4 + [208])
	*($4 + [64]) = $0
	*($4 + [224]) = $0
	*(($9 = (($4 + [160]) + [8]))) = *($3)
	*(($3 = (($4 + [144]) + [8]))) = *($8)
	*($4 + [160]) = *($4 + [104])
	*($4 + [144]) = *($4 + [120])
	$0 = *($4 + [96])
	$1 = *($4 + [136])
	*((($4 + [192]) + [8])) = *($3)
	*((($4 + [176]) + [8])) = *($9)
	*($4 + [192]) = *($4 + [144])
	*($4 + [176]) = *($4 + [160])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$11 = *((($4 + [176]) + [8]))
	*((($4 + [224]) + [8])) = $11
	$12 = *((($4 + [192]) + [8]))
	*((($4 + [208]) + [8])) = $12
	*((($4 + [16]) + [8])) = $11
	*(($4 + [8])) = $12
	$11 = *($4 + [176])
	*($4 + [224]) = $11
	$12 = *($4 + [192])
	*($4 + [208]) = $12
	*($4 + [16]) = $11
	*($4) = $12
	CALL void $3((int_32 $0), (int_64 ($4 + [16])), (int_32 $4), (int_32 $1), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $128($2)
	
.LABEL $label$6
	$global$0 = ($4 + [240])
	return [1]
}

int_32 .FUNC $59 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $125($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9571])
	CALL memcpy(($4 + [40]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [9571])
	CALL memcpy((($4 + [40]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [9571])
	CALL memcpy((($4 + [40]) + [16]), ($2 + [16]), [8])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [56])
	$1 = *($4 + [48])
	$8 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $128($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	float_64 $11
	int_64 $12
	int_64 $13
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = CALL $104(($4 + [16]), $2)
	$6 = [0]
	if ( ((int_32)*(CALL $108($2, [0])) != (int_32)[45]) ){ goto $label$1 }
	$7 = *($2)
	if ( ($7 & [1]) ){ goto $label$3 }
	$7 = uint_32($7 >> [1])
	goto $label$2 
	
.LABEL $label$3
	$7 = *($2 + [4])
	
.LABEL $label$2
	CALL $105($4, $2, [1], ($7 + [-1]), $2)
	if ( (*($4 + [16]) & [1]) ){ goto $label$5 }
	*($5 + [1]) = [0]
	*($4 + [16]) = [0]
	goto $label$4 
	
.LABEL $label$5
	*(*($5 + [8])) = [0]
	*($5 + [4]) = [0]
	
.LABEL $label$4
	CALL $107($5, [0])
	*((($4 + [16]) + [8])) = *(($4 + [8]))
	*($4 + [16]) = *($4)
	$6 = [1]
	
.LABEL $label$1
	$2 = *($4 + [16])
	$8 = ( *($5 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($8 == 0) ){ goto $label$7 }
	$9 = [0]
	$10 = (float_64)0
	$11 = (float_64)10
	$2 = [0]
	
.LOOP $label$8:
	$7 = *(CALL $108($5, $2))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [1])
	if ( ((uint_32)$2 >= (uint_32)$8) ){ goto $label$6 }
	$7 = *(CALL $108($5, $2))
	if ( ((int_32)$7 == (int_32)[46]) ){ goto $label$10 }
	$9 = [1]
	
.LABEL $label$9
	if ( (($9 & [1]) == 0) ){ goto $label$11 }
	$10 = ((float_64)$10 + (float_64)((float_64)(CASTING float_64)(int_32 (int_32(($7 << [24]) >> [24]) + [-48])) / (float_64)$11))
	$11 = ((float_64)$11 * (float_64)(float_64)10)
	$2 = ($2 + [1])
	if ( ($2 <= $8) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$11
	$10 = ((float_64)((float_64)((float_64)$10 * (float_64)(float_64)10) + (float_64)(CASTING float_64)(int_32 int_32(($7 << [24]) >> [24]))) + (float_64)(float_64)-48)
	$2 = ($2 + [1])
	if ( ($2 <= $8) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = (float_64)0
	
.LABEL $label$6
	$10 = ((float_64)( !(float_64)$10 ? $10 : $6 ) * (float_64)(float_64)1e4)
	if ( ((float_64)(float_64)|$10| < (float_64)(float_64)2147483648) ){ goto $label$18 }
	$2 = [-2147483648]
	$7 = [1]
	$8 = *($3)
	if ( (($8 & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$2 = (CASTING int_32)(float_64 $10)
	$7 = [1]
	$8 = *($3)
	if ( ($8 & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	$9 = ($3 + $7)
	$12 = (CASTING int_64)(int_32 $2)
	$2 = uint_32($8 >> $7)
	if ( ($2 <= [8]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$9 = *($3 + [8])
	$12 = (CASTING int_64)(int_32 $2)
	$2 = *($3 + [4])
	if ( ((uint_32)$2 >= (uint_32)[8]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( $2 ){ goto $label$13 }
	$13 = (int_64)4
	goto $label$12 
	
.LABEL $label$14
	CALL eosio_assert([0], [9843])
	
.LABEL $label$13
	$13 = (int_64)0
	
.LOOP $label$19:
	$8 = (($9 + $2) + [-1])
	$7 = *($8)
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$20 }
	CALL eosio_assert([0], [9888])
	$7 = *($8)
	
.LABEL $label$20
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$19 }
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)4)
	
.LABEL $label$12
	*($0 + [8]) = $13
	*($0) = $12
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9265])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$12 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$13 = $12
	$7 = [1]
	$8 = $2
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$13 = $12
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$8 = ($2 + [1])
	$2 = $8
	if ( $7 ){ goto $label$25 }
	$7 = [1]
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$7 = [0]
	
.LABEL $label$21
	CALL eosio_assert($7, [9314])
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$26
	$global$0 = ($4 + [32])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9548])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $125($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9571])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9571])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $90(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [1]
	*($3 + [72]) = *($3 + [152])
	CALL $53($0, $1, ($3 + [72]))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$7 }
	if ( ((int_64)$2 <= (int_64)5454311842506244095) ){ goto $label$10 }
	if ( ((int_64)$2 <= (int_64)8421045207927095295) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)8421045207927095296) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)8421049169642635264) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)8422551174711144624) ){ goto $label$7 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [2]
	*($3 + [24]) = *($3 + [120])
	CALL $54($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$10
	if ( ((int_64)$2 > (int_64)-4417030424788205569) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-4994301883677933568) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4741535448359561863) ){ goto $label$7 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [3]
	*($3 + [64]) = *($3 + [80])
	CALL $55($1, $1, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)5454311842506244096) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)6301506898319376384) ){ goto $label$7 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [4]
	*($3) = *($3 + [144])
	CALL $56($1, $1, $3)
	CALL eosio_exit([0])
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-4417030424788205568) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)5377983392780260864) ){ goto $label$7 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [5]
	*($3 + [32]) = *($3 + [112])
	CALL $54($1, $1, ($3 + [32]))
	
.LABEL $label$7
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [140]) = [0]
	*($3 + [136]) = [6]
	*($3 + [8]) = *($3 + [136])
	CALL $57($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [100]) = [0]
	*($3 + [96]) = [7]
	*($3 + [48]) = *($3 + [96])
	CALL $58($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$4
	*($3 + [108]) = [0]
	*($3 + [104]) = [8]
	*($3 + [40]) = *($3 + [104])
	CALL $59($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$3
	*($3 + [92]) = [0]
	*($3 + [88]) = [9]
	*($3 + [56]) = *($3 + [88])
	CALL $56($1, $1, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$2
	*($3 + [132]) = [0]
	*($3 + [128]) = [10]
	*($3 + [16]) = *($3 + [128])
	CALL $60($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $53 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $125($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $61(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $62(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $128($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $54 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $125($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [96])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $64(($4 + [16]), ($4 + [144]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4)
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [16])
	CALL $65(($4 + [144]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $128($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $89(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $56 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $125($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9571])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $128($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $57 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	$3 = ($global$0 - [400])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $125($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [136]))) = (int_64)0
	*(($8 = ($4 + [160]))) = (int_64)0
	*(($9 = ($4 + [192]))) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [200]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [108]) = $2
	*($4 + [104]) = $2
	*($4 + [112]) = ($2 + $7)
	*($4 + [384]) = ($4 + [104])
	*($4 + [72]) = ($4 + [120])
	CALL $63(($4 + [72]), ($4 + [384]))
	*(($10 = (($4 + [56]) + [8]))) = *($4 + [112])
	*($4 + [56]) = *($4 + [104])
	*(($11 = (($4 + [368]) + [8]))) = *($10)
	*($4 + [368]) = *($4 + [56])
	$10 = *($11)
	*((($4 + [384]) + [8])) = $10
	*(($4 + [96])) = $10
	*($4 + [72]) = $0
	*($4 + [80]) = $1
	$0 = *($4 + [368])
	*($4 + [88]) = $0
	*($4 + [384]) = $0
	*(($10 = (($4 + [288]) + [8]))) = *($3)
	*(($3 = (($4 + [272]) + [8]))) = *($8)
	*(($8 = (($4 + [256]) + [8]))) = *($9)
	*($4 + [288]) = *($4 + [128])
	*($4 + [272]) = *($4 + [152])
	*($4 + [256]) = *($4 + [184])
	$0 = *($4 + [120])
	$1 = *($4 + [144])
	$12 = *($4 + [168])
	$13 = *($4 + [176])
	$14 = *($4 + [200])
	$15 = *($4 + [208])
	$16 = *($4 + [216])
	$17 = *($4 + [224])
	$18 = *($4 + [232])
	$19 = *($4 + [240])
	$20 = *($4 + [248])
	*((($4 + [336]) + [8])) = *($8)
	*((($4 + [320]) + [8])) = *($3)
	*((($4 + [304]) + [8])) = *($10)
	*($4 + [336]) = *($4 + [256])
	*($4 + [320]) = *($4 + [272])
	*($4 + [304]) = *($4 + [288])
	$3 = (($4 + [72]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$21 = *((($4 + [304]) + [8]))
	*((($4 + [384]) + [8])) = $21
	$22 = *((($4 + [320]) + [8]))
	*((($4 + [368]) + [8])) = $22
	$23 = *((($4 + [336]) + [8]))
	*((($4 + [352]) + [8])) = $23
	*((($4 + [40]) + [8])) = $21
	*((($4 + [24]) + [8])) = $22
	*((($4 + [8]) + [8])) = $23
	$21 = *($4 + [304])
	*($4 + [384]) = $21
	$22 = *($4 + [320])
	*($4 + [368]) = $22
	*($4 + [40]) = $21
	*($4 + [24]) = $22
	$21 = *($4 + [336])
	*($4 + [8]) = $21
	*($4 + [352]) = $21
	CALL void $3((int_32 $0), (int_64 ($4 + [40])), (int_32 $1), (int_64 ($4 + [24])), (int_32 $12), (int_64 $13), (int_64 ($4 + [8])), (int_32 $14), (int_64 $15), (int_64 $16), (int_64 $17), (int_64 $18), (int_64 $19), (int_64 $20), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $128($2)
	
.LABEL $label$6
	$global$0 = ($4 + [400])
	return [1]
}

int_64 .FUNC $116 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC $117 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $119($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $116($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [18656])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [18640]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [18672]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $118($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

void .FUNC $114 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $33($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9491])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9491])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $68(CALL $67($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $111($0, $1, $2, CALL $122($2))
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $121(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $106($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $106($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_64 .FUNC $118 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC $119 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

void .FUNC $29 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [40])
	$2 = ( *(($3 + [44])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [40])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $33($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $88(($4 + [72]), ($4 + [64]))
	CALL $35(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $114(($4 + [8]))
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9548])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $125($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [36]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $87(($3 + [32]), ($3 + [24]))
	*($5 + [40]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $49(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $55 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $125($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9571])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $128($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9611])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9657])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [40])) = *(($3 + [40]))
	*(($1 + [32])) = *(($3 + [32]))
	*(($1 + [24])) = *(($3 + [24]))
	*(($1 + [16])) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	CALL eosio_assert([1], [9708])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $85(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4154435859482619904) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4154435859482619905
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [9497])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4154435859482619904, (int_64)4154435859482619904)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $19($0, $4)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [9497])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9576])
	CALL $21($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $22($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [8]) = $5
	*($3 + [16]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)-4098957121893171200, (int_64)-4098957121893171200)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $15(($3 + [8]), $6) + [4]) == (int_32)($3 + [8])), [9497])
	$4 = [1]
	
.LABEL $label$1
	CALL eosio_assert($4, [8435])
	$4 = *(($3 + [36]))
	if ( ((int_32)$4 == (int_32)*(($3 + [32]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)($3 + [8])), [9497])
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$6 = CALL db_find_i64(*($3 + [8]), *(($3 + [16])), (int_64)-4098957121893171200, (int_64)-4098957121893171200)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $15(($3 + [8]), $6)
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)($3 + [8])), [9497])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9818])
	*($3 + [7]) = $2
	*($3 + [6]) = $1
	CALL $12(($3 + [8]), ($3 + [6]), *($0))
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$4 }
	$2 = ($3 + [36])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL _ZdlPv($4)
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($3 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $1
	
.LABEL $label$5
	*($2) = $1
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [9767])
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = $1
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *(($3 + [8]))
	*($5 + [16]) = *(($3 + [16]))
	*($5 + [24]) = *(($3 + [24]))
	*($5 + [32]) = *(($3 + [32]))
	*(($5 + [40])) = *(($3 + [40]))
	*($4 + [72]) = (($4 + [16]) + [48])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $85(($4 + [64]), $5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4154435859482619904, $2, (int_64)4154435859482619904, ($4 + [16]), [48])
	*($5 + [52]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4154435859482619904) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4154435859482619905
	
.LABEL $label$1
	*($4 + [64]) = $5
	*($4 + [16]) = (int_64)4154435859482619904
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4154435859482619904
	*($3 + [16]) = $6
	*($4 + [64]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $84(($1 + [24]), ($4 + [64]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $25 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [176])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($2 + [168])) = [0]
	*($2 + [152]) = (int_64)-1
	*($2 + [160]) = (int_64)0
	$4 = *($0)
	*($2 + [136]) = $4
	*($2 + [144]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)-3812994831289208832, (int_64)-3812994831289208832)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $4(($2 + [136]), $5) + [136]) == (int_32)($2 + [136])), [9497])
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [8451])
	CALL eosio_assert(((int_64)$1 != (int_64)0), [8468])
	$3 = *(($2 + [164]))
	if ( ((int_32)$3 == (int_32)*(($2 + [160]))) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [136]) == (int_32)($2 + [136])), [9497])
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	$5 = CALL db_find_i64(*($2 + [136]), *(($2 + [144])), (int_64)-3812994831289208832, (int_64)-3812994831289208832)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $4(($2 + [136]), $5)
	CALL eosio_assert(((int_32)*($3 + [136]) == (int_32)($2 + [136])), [9497])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9818])
	*(($5 = CALL memcpy($2, $3, [136])) + [96]) = $1
	CALL $5(($5 + [136]), $5, *($0))
	$3 = *($5 + [160])
	if ( ($3 == 0) ){ goto $label$4 }
	$6 = ($5 + [164])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$7 }
	$2 = *(($5 + [160]))
	goto $label$5 
	
.LABEL $label$6
	$2 = $3
	
.LABEL $label$5
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($5 + [176])
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = [0]
	*(($4 + [168])) = [0]
	*($4 + [152]) = (int_64)-1
	*($4 + [160]) = (int_64)0
	$6 = *($0)
	*($4 + [136]) = $6
	*($4 + [144]) = $6
	$7 = CALL db_find_i64($6, $6, (int_64)-3812994831289208832, (int_64)-3812994831289208832)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $4(($4 + [136]), $7) + [136]) == (int_32)($4 + [136])), [9497])
	$5 = [1]
	
.LABEL $label$1
	CALL eosio_assert($5, [8451])
	$5 = *(($4 + [164]))
	if ( ((int_32)$5 == (int_32)*(($4 + [160]))) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [136]) == (int_32)($4 + [136])), [9497])
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	$7 = CALL db_find_i64(*($4 + [136]), *(($4 + [144])), (int_64)-3812994831289208832, (int_64)-3812994831289208832)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $4(($4 + [136]), $7)
	CALL eosio_assert(((int_32)*($5 + [136]) == (int_32)($4 + [136])), [9497])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9818])
	*(($7 = CALL memcpy($4, $5, [136])) + [112]) = $2
	*($7 + [104]) = $1
	*($7 + [120]) = $3
	CALL $5(($7 + [136]), $7, *($0))
	$5 = *($7 + [160])
	if ( ($5 == 0) ){ goto $label$4 }
	$8 = ($7 + [164])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$7 }
	$4 = *(($7 + [160]))
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($8) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$global$0 = ($7 + [176])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9548])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $125($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [12]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9571])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [9571])
	CALL memcpy(($3 + [16]), ($2 + [8]), [1])
	*($5 + [8]) = ((int_32)*($3 + [16]) != (int_32)[0])
	*($5 + [16]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $86(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $26 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	float_64 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [368])
	$global$0 = $2
	CALL require_auth($1)
	$3 = [0]
	*((($2 + [232]) + [32])) = [0]
	*($2 + [248]) = (int_64)-1
	*($2 + [256]) = (int_64)0
	$4 = *($0)
	*($2 + [232]) = $4
	*($2 + [240]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)-4098957121893171200, (int_64)-4098957121893171200)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $15(($2 + [232]), $6)
	CALL eosio_assert(((int_32)*($5 + [4]) == (int_32)($2 + [232])), [9497])
	
.LABEL $label$1
	*((($2 + [192]) + [32])) = [0]
	*($2 + [208]) = (int_64)-1
	*($2 + [216]) = (int_64)0
	$4 = *($0)
	*($2 + [192]) = $4
	*($2 + [200]) = $4
	$6 = CALL db_find_i64($4, $4, (int_64)-3812994831289208832, (int_64)-3812994831289208832)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $4(($2 + [192]), $6)
	CALL eosio_assert(((int_32)*($3 + [136]) == (int_32)($2 + [192])), [9497])
	
.LABEL $label$2
	$6 = [0]
	CALL eosio_assert((((int_32)$5 != (int_32)[0]) & ((int_32)$3 != (int_32)[0])), [8484])
	$3 = *(($2 + [260]))
	if ( ((int_32)$3 == (int_32)*(($2 + [256]))) ){ goto $label$4 }
	$6 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [4]) == (int_32)($2 + [232])), [9497])
	goto $label$3 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($2 + [232]), *(($2 + [240])), (int_64)-4098957121893171200, (int_64)-4098957121893171200)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $15(($2 + [232]), $3)
	CALL eosio_assert(((int_32)*($6 + [4]) == (int_32)($2 + [232])), [9497])
	
.LABEL $label$3
	$3 = [0]
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9818])
	*($2 + [190]) = *($6)
	$6 = *(($2 + [220]))
	if ( ((int_32)$6 == (int_32)*(($2 + [216]))) ){ goto $label$6 }
	$3 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [136]) == (int_32)($2 + [192])), [9497])
	goto $label$5 
	
.LABEL $label$6
	$6 = CALL db_find_i64(*($2 + [192]), *(($2 + [200])), (int_64)-3812994831289208832, (int_64)-3812994831289208832)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL $4(($2 + [192]), $6)
	CALL eosio_assert(((int_32)*($3 + [136]) == (int_32)($2 + [192])), [9497])
	
.LABEL $label$5
	$6 = [0]
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9818])
	$7 = *(($3 + [16]))
	$8 = *($3 + [120])
	$9 = *($3 + [112])
	$4 = *($3 + [80])
	$10 = *($3)
	*((($2 + [144]) + [32])) = [0]
	*($2 + [160]) = (int_64)-1
	$11 = *($0)
	*($2 + [144]) = $11
	*($2 + [152]) = $11
	*($2 + [168]) = (int_64)0
	$3 = [0]
	$5 = CALL db_lowerbound_i64($11, $11, (int_64)6300979411374047232, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $6(($2 + [144]), $5)
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8497])
	*((($2 + [104]) + [32])) = [0]
	*($2 + [112]) = $4
	*($2 + [104]) = $4
	*($2 + [120]) = (int_64)-1
	*($2 + [128]) = (int_64)0
	$3 = CALL db_find_i64($4, $4, (int_64)-3812985124766744576, *($0))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $27(($2 + [104]), $3)
	CALL eosio_assert(((int_32)*($6 + [12]) == (int_32)($2 + [104])), [9497])
	
.LABEL $label$8
	$12 = [0]
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8517])
	CALL eosio_assert(*($6 + [8]), [8550])
	$4 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( (*($2 + [190]) == 0) ){ goto $label$9 }
	if ( ((uint_64)$9 > (uint_64)((int_64)$4 & (int_64)4294967295)) ){ goto $label$9 }
	*($2 + [190]) = [256]
	CALL $12(($2 + [232]), ($2 + [190]), *($0))
	
.LABEL $label$9
	CALL eosio_assert(*($2 + [191]), [8577])
	$13 = ((float_64)(Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 (int_64))(((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) - $9)) / (float_64)(float_64)3600) / (float_64)(float_64)24)) / (float_64)(Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 (int_64))($8 - $9)) / (float_64)(float_64)3600) / (float_64)(float_64)24)
	CALL eosio_assert(((float_64)$13)) > (float_64)(float_64)0), [8600])
	*(($2 + [96])) = [0]
	*($2 + [80]) = (int_64)-1
	$4 = *($0)
	*($2 + [64]) = $4
	*($2 + [72]) = $1
	*($2 + [88]) = (int_64)0
	$13 = min ( (float_64)$13 , (float_64)(float_64)1 )
	$3 = CALL db_lowerbound_i64($4, $1, (int_64)8419278409487937536, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$10 }
	$12 = CALL $28(($2 + [64]), $3)
	
.LABEL $label$10
	$6 = [0]
	$14 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($14, [8620])
	$13 = ((float_64)$13 * (float_64)(CASTING float_64)(int_64 *($12 + [16])))
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$12 }
	$8 = (int_64)-9223372036854775808
	goto $label$11 
	
.LABEL $label$12
	$8 = (Rounds 0)($13)
	
.LABEL $label$11
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9265])
	$4 = (uint_64)$7 >> (uint_64)(int_64)8
	$11 = $4)
	
.LOOP $label$15:
	$3 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$9 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$11 = $9
	$5 = [1]
	$15 = $6
	$6 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$11 = $9
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$15 = ($6 + [1])
	$6 = $15
	if ( $5 ){ goto $label$17 }
	$5 = [1]
	$6 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$5 = [0]
	
.LABEL $label$13
	CALL eosio_assert($5, [9314])
	$9 = ((int_64))($8 - *(($12 + [16]))) + (int_64)*($12)
	CALL eosio_assert(((int_64)$9) != (int_64)0), [8642])
	$8 = *($0)
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9265])
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$11 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$4 = $11
	$6 = [1]
	$5 = $3
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$4 = $11
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$5 = ($3 + [1])
	$3 = $5
	if ( $6 ){ goto $label$22 }
	$6 = [1]
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$6 = [0]
	
.LABEL $label$18
	CALL eosio_assert($6, [9314])
	*(($2 + [40])) = $7
	*(($2 + [56])) = [0]
	*($2 + [8]) = $10
	*($2 + [24]) = $1
	*($2 + [32]) = $9
	*($2 + [48]) = (int_64)0
	*($2 + [16]) = *($0)
	$6 = ($2 + [48])
	$3 = CALL $122([8662])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$26 }
	*(($2 + [48])) = ($3 << [1])
	$5 = ($6 + [1])
	if ( $3 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$15 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($15)
	*(($2 + [56])) = $5
	*(($2 + [52])) = $3
	*($2 + [48]) = ($15 | [1])
	
.LABEL $label$25
	CALL memcpy($5, [8662], $3)
	
.LABEL $label$24
	*(($5 + $3)) = [0]
	*(($3 = CALL _Znwj([16]))) = $8
	*($3 + [8]) = (int_64)3617214756542218240
	*((($2 + [272]) + [32])) = *((($2 + [8]) + [32]))
	*(($5 = ($2 + [320]))) = *(($6 + [8]))
	$4 = *($6)
	*(($2 + [48])) = [0]
	*($2 + [352]) = $3
	$3 = ($3 + [16])
	*($2 + [360]) = $3
	*($2 + [356]) = $3
	*($2 + [272]) = *($2 + [8])
	*($2 + [280]) = *((($2 + [8]) + [8]))
	*($2 + [288]) = *((($2 + [8]) + [16]))
	*($2 + [296]) = *($2 + [32])
	*($2 + [312]) = $4
	*(($2 + [52])) = (int_64)0
	CALL $29($8, (int_64)8422551174711144624, ($2 + [352]), ($2 + [272]))
	if ( ((*($2 + [312]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$27
	$3 = *($2 + [352])
	if ( ($3 == 0) ){ goto $label$28 }
	*($2 + [356]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$28
	if ( ((*(($2 + [48])) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($2 + [56])))
	
.LABEL $label$29
	CALL eosio_assert($14, [9576])
	CALL eosio_assert(((int_32)*($12 + [36]) == (int_32)($2 + [64])), [9611])
	CALL eosio_assert(((int_64)*($2 + [64]) == (int_64)CALL $fimport$4()), [9657])
	*($12) = (int_64))(*($12) - $9)
	$4 = *($12 + [8])
	CALL eosio_assert([1], [9708])
	*($2 + [336]) = (($2 + [272]) + [36])
	*($2 + [332]) = ($2 + [272])
	*($2 + [328]) = ($2 + [272])
	*($2 + [344]) = ($2 + [328])
	*($2 + [356]) = ($12 + [16])
	*($2 + [352]) = $12
	*($2 + [360]) = ($12 + [32])
	CALL $30(($2 + [352]), ($2 + [344]))
	CALL db_update_i64(*($12 + [40]), (int_64)0, ($2 + [272]), [36])
	$3 = (($2 + [64]) + [16])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (uint_64)($4) <= *($3)) ){ goto $label$30 }
	*($3) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$30
	$5 = *($2 + [88])
	if ( ($5 == 0) ){ goto $label$31 }
	$15 = ($2 + [92])
	$3 = *($15)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$33 }
	
.LOOP $label$34:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$35 }
	CALL _ZdlPv($6)
	
.LABEL $label$35
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$34 }
	$3 = *(($2 + [88]))
	goto $label$32 
	
.LABEL $label$33
	$3 = $5
	
.LABEL $label$32
	*($15) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$31
	$5 = *($2 + [128])
	if ( ($5 == 0) ){ goto $label$36 }
	$15 = ($2 + [132])
	$3 = *($15)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$38 }
	
.LOOP $label$39:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$40 }
	CALL _ZdlPv($6)
	
.LABEL $label$40
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$39 }
	$3 = *(($2 + [128]))
	goto $label$37 
	
.LABEL $label$38
	$3 = $5
	
.LABEL $label$37
	*($15) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$36
	$5 = *($2 + [168])
	if ( ($5 == 0) ){ goto $label$41 }
	$15 = ($2 + [172])
	$3 = *($15)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$43 }
	
.LOOP $label$44:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$45 }
	CALL _ZdlPv($6)
	
.LABEL $label$45
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$44 }
	$3 = *(($2 + [168]))
	goto $label$42 
	
.LABEL $label$43
	$3 = $5
	
.LABEL $label$42
	*($15) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$41
	$5 = *($2 + [216])
	if ( ($5 == 0) ){ goto $label$46 }
	$15 = ($2 + [220])
	$3 = *($15)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$48 }
	
.LOOP $label$49:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$50 }
	CALL _ZdlPv($6)
	
.LABEL $label$50
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$49 }
	$3 = *(($2 + [216]))
	goto $label$47 
	
.LABEL $label$48
	$3 = $5
	
.LABEL $label$47
	*($15) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$46
	$5 = *($2 + [256])
	if ( ($5 == 0) ){ goto $label$51 }
	$15 = ($2 + [260])
	$3 = *($15)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$53 }
	
.LOOP $label$54:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$55 }
	CALL _ZdlPv($6)
	
.LABEL $label$55
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$54 }
	$3 = *(($2 + [256]))
	goto $label$52 
	
.LABEL $label$53
	$3 = $5
	
.LABEL $label$52
	*($15) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$51
	$global$0 = ($2 + [368])
	return (unreachable)
	
.LABEL $label$23
	CALL $103($6)
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $122($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $106($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9491])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9491])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = ($2 & [1])
	if ( $3 ){ goto $label$3 }
	if ( ((uint_32)uint_32($2 >> [1]) > (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_32)*($0 + [4]) <= (uint_32)$1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $3 ){ goto $label$4 }
	return (($0 + [1]) + $1)
	
.LABEL $label$4
	return (*($0 + [8]) + $1)
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [32]))
	*($2 + [32]) = *($1 + [24])
	$4 = *($1 + [16])
	$5 = *($1 + [8])
	$6 = *($1)
	$1 = CALL $104(($2 + [16]), ($1 + [40]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$3 = (*($0) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($8 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$7 = CALL $104(($2 + [64]), $1)
	*(($2 + [8])) = *($8)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $6), (int_64 $5), (int_64 $4), (int_64 $2), (int_32 $7), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $91(*($1), ($0 + [40]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9491])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9491])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9491])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $91(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $60 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $125($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9571])
	CALL memcpy($4, $2, [1])
	$8 = *($4)
	CALL eosio_assert(((int_32)$7 != (int_32)[1]), [9571])
	CALL memcpy($4, ($2 + [1]), [1])
	$9 = *($4)
	*(($4 + [20])) = ($2 + [2])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 ((int_32)($9 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $128($2)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [40])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2 + [8]) = $0
	CALL $93(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $104(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $104(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $128($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $103 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9491])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9491])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [32]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $89(*($1), ($0 + [40]))
	$global$0 = ($2 + [16])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9571])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [4]) = $1
	$1 = *($2)
	$4 = *(*(*($2 + [4])))
	*($0) = $4
	*($3 + [14]) = $4
	CALL eosio_assert([1], [9491])
	CALL memcpy($3, ($3 + [14]), [1])
	*($3 + [15]) = *($0 + [1])
	CALL eosio_assert([1], [9491])
	CALL memcpy(($3 | [1]), ($3 + [15]), [1])
	*($0 + [8]) = CALL db_store_i64(*($1 + [8]), (int_64)-4098957121893171200, *(*($2 + [8])), (int_64)-4098957121893171200, $3, [2])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4098957121893171200) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-4098957121893171199
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9571])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9491])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9491])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $68($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9611])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9657])
	*($1) = *(*($3))
	CALL eosio_assert([1], [9708])
	CALL eosio_assert([1], [9491])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-3504768080326688768) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-3504768080326688767
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9491])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9491])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9491])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9491])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9491])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9491])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9491])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $68(CALL $67($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [72])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9571])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [9767])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [9491])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-3504768080326688768, $2, (int_64)-3504768080326688768, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-3504768080326688768) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-3504768080326688767
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-3504768080326688768
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-3504768080326688768
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $75(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $69($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $33($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $70($2, $1)
	CALL $72(CALL $71(CALL $71($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	$6 = ($global$0 - [192])
	$global$0 = $6
	*($6 + [184]) = $1
	CALL require_auth(*($0))
	$1 = CALL current_time()
	*(($6 + [148])) = (int_64)0
	*(($6 + [164])) = (int_64)0
	*(($6 + [172])) = (int_64)0
	*($6 + [132]) = [0]
	*($6 + [136]) = [0]
	*($6 + [140 align=4]) = (int_64)0
	*($6 + [156 align=4]) = (int_64)0
	*($6 + [120]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	$1 = *($0)
	*($6 + [88]) = [8671]
	*($6 + [92]) = CALL $122([8671])
	*($6 + [8]) = *($6 + [88])
	$7 = CALL $32(($6 + [96]), ($6 + [8]))
	*($6 + [104]) = $1
	*($6 + [112]) = *($7)
	*($6 + [72]) = [8678]
	*($6 + [76]) = CALL $122([8678])
	*($6) = *($6 + [72])
	$7 = CALL $32(($6 + [80]), $6)
	*(($6 + [40])) = *(($4 + [8]))
	*($6 + [24]) = $3
	*($6 + [16]) = $2
	*($6 + [32]) = *($4)
	CALL $104(($6 + [48]), $5)
	CALL $37(($6 + [156]), ($6 + [104]), ($6 + [184]), $7, ($6 + [16]))
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($6 + [56])))
	
.LABEL $label$1
	*(($6 + [140])) = [1]
	$2 = CALL $38($0)
	*($6 + [24]) = (int_64)0
	*($6 + [16]) = $2
	$2 = *($0)
	CALL $39(($6 + [104]), ($6 + [120]))
	$0 = *($6 + [104])
	CALL send_deferred(($6 + [16]), $2, $0, (*($6 + [108]) - $0), [0])
	$0 = *($6 + [104])
	if ( ($0 == 0) ){ goto $label$2 }
	*($6 + [108]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$2
	CALL $40(($6 + [120]))
	$global$0 = ($6 + [192])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $33($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $34(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9491])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9571])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9571])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9334])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9439])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9372])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9439])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $114($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9491])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9491])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $31 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	$6 = ($global$0 - [176])
	$global$0 = $6
	CALL require_auth(*($0))
	$7 = *($0)
	*($6 + [88]) = [8671]
	*($6 + [92]) = CALL $122([8671])
	*($6 + [16]) = *($6 + [88])
	$8 = *(CALL $32(($6 + [96]), ($6 + [16])))
	*($6 + [72]) = [8678]
	*($6 + [76]) = CALL $122([8678])
	*($6 + [8]) = *($6 + [72])
	$0 = CALL $32(($6 + [80]), ($6 + [8]))
	*((($6 + [24]) + [24])) = *(($4 + [8]))
	*($6 + [32]) = $3
	*($6 + [24]) = $2
	*($6 + [40]) = *($4)
	$5 = CALL $104((($6 + [24]) + [32]), $5)
	*($6 + [104]) = $1
	*($6 + [112]) = *($0)
	*(($4 = CALL _Znwj([16]))) = $7
	*($4 + [8]) = $8
	*((($6 + [104]) + [36])) = [0]
	$0 = ($4 + [16])
	*((($6 + [104]) + [24])) = $0
	*(($6 + [124])) = $0
	*($6 + [120]) = $4
	*($6 + [132 align=4]) = (int_64)0
	$4 = *($5)
	$0 = ( *((($6 + [24]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($0 + [32])
	$1 = (CASTING uint_64)(uint_32 $0)
	$0 = ($6 + [132])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$1 }
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $33($0, $4)
	$0 = *(($6 + [136]))
	$4 = *(($6 + [132]))
	goto $label$2 
	
.LABEL $label$3
	$0 = [0]
	$4 = [0]
	
.LABEL $label$2
	*($6 + [164]) = $4
	*($6 + [160]) = $4
	*($6 + [168]) = $0
	*($6 + [144]) = ($6 + [160])
	*($6 + [152]) = ($6 + [24])
	CALL $34(($6 + [152]), ($6 + [144]))
	CALL $35(($6 + [160]), ($6 + [104]))
	$4 = *($6 + [160])
	CALL send_inline($4, (*($6 + [164]) - $4))
	$4 = *($6 + [160])
	if ( ($4 == 0) ){ goto $label$4 }
	*($6 + [164]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = *($6 + [132])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($6 + [136])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($6 + [120])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($6 + [124])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((*($6 + [56]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($6 + [64])))
	
.LABEL $label$7
	$global$0 = ($6 + [176])
}

int_32 .FUNC $127 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10228]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10232])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10228]) = [1]
	$2 = ($2 << [16])
	*([0] + [10232]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10232])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10232]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10228]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10228]) = [1]
	$3 = ($3 << [16])
	*([0] + [10232]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10232])
	
.LABEL $label$10
	*([0] + [10232]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}