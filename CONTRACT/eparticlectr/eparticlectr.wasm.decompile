(data (i32.const 8192) "Stake does not exist in database\00unexpected error in fixed_bytes constructor\00")
(data (i32.const 8269) "Staking period not over yet\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8383) "return stake #\00")
(data (i32.const 8398) "active\00")
(data (i32.const 8405) "transfer\00")
(data (i32.const 8414) "Comment must be less than 256 bytes\00")
(data (i32.const 8450) "Memo must be less than 32 bytes\00")
(data (i32.const 8482) "Proposal not found\00")
(data (i32.const 8501) "Voting period is over\00")
(data (i32.const 8523) "Proposal is finalized\00")
(data (i32.const 8546) "slug cannot be empty\00")
(data (i32.const 8567) "slug must be max 256 bytes\00")
(data (i32.const 8594) "IPFS hash is too long. MAX_IPFS_SIZE=46\00")
(data (i32.const 8634) "IPFS hash is too short. MIN_IPFS_SIZE=46\00%llu\00")
(data (i32.const 8680) "lang_code must be max 7 bytes\00")
(data (i32.const 8710) "lang_code must be atleast 2 characters\00")
(data (i32.const 8749) "comment must be less than 256 bytes\00")
(data (i32.const 8785) "memo must be less than 32 bytes\00")
(data (i32.const 8817) "group_id must be greater than -2. Specify -1 for auto-generated ID\00")
(data (i32.const 8884) "logpropinfo\00")
(data (i32.const 8896) "vote\00")
(data (i32.const 8901) "editor initial vote\00")
(data (i32.const 8921) "Voting period is not over yet\00")
(data (i32.const 8951) "No votes found for proposal\00")
(data (i32.const 8979) "Slash ratio out of bounds\00")
(data (i32.const 9005) "slashnotify\00")
(data (i32.const 9017) "PROTOCOL ERROR: An ID should already exist for this wiki\00")
(data (i32.const 9074) "logpropres\00")
(data (i32.const 9085) "Reward period is not over yet\00")
(data (i32.const 9115) "No rewards found in this period!\00")
(data (i32.const 9148) "Rewards have already been calculated for this period\00")
(data (i32.const 9201) "reward doesn\'t exist in database\00")
(data (i32.const 9234) "Must call procrewards for this period first\00")
(data (i32.const 9278) "System logic error. Too much IQ calculated for curation reward.\00")
(data (i32.const 9342) "Curation IQ reward:\00")
(data (i32.const 9362) "issue\00")
(data (i32.const 9368) "System logic error. Too much IQ calculated for editor reward.\00")
(data (i32.const 9430) "Editor IQ reward:\00")
(data (i32.const 9448) "Proposal not finalized yet!\00")
(data (i32.const 9476) "Cannot delete most recent proposal\00")
(data (i32.const 9511) "No votes found for proposal!\00")
(data (i32.const 9540) "Proposal does not exist\00")
(data (i32.const 9564) "Proposal has already been marked as a referendum\00")
(data (i32.const 9613) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9662) "invalid symbol name\00")
(data (i32.const 9682) "string is too long to be a valid name\00")
(data (i32.const 9720) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9787) "character is not in allowed character set for names\00")
(data (i32.const 9839) "write\00")
(data (i32.const 9845) "slug max size is 32 bytes\00")
(data (i32.const 9871) "lang_code max size is 8 bytes\00")
(data (i32.const 9901) " \00")
(data (i32.const 9903) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9954) "error reading iterator\00")
(data (i32.const 9977) "read\00")
(data (i32.const 9982) "cannot pass end iterator to erase\00")
(data (i32.const 10016) "cannot increment end iterator\00")
(data (i32.const 10046) "object passed to erase is not in multi_index\00")
(data (i32.const 10091) "cannot erase objects in table of another contract\00")
(data (i32.const 10141) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10194) "get\00")
(data (i32.const 10198) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10250) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10304) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10352) "cannot create objects in table of another contract\00")
(data (i32.const 10403) "cannot pass end iterator to modify\00")
(data (i32.const 10438) "object passed to modify is not in multi_index\00")
(data (i32.const 10484) "cannot modify objects in table of another contract\00")
(data (i32.const 10535) "updater cannot change primary key when modifying an object\00")
(data (i32.const 19024) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "db_find_i64" (func $fimport$0 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "current_time" (func $fimport$2 (result i64)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$4 (param i32 i32)))
(import "env" "db_next_i64" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$10 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$12 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$13 (param i32 i64 i32)))
(import "env" "action_data_size" (func $fimport$14 (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$17 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$18 (param i32)))
(import "env" "db_previous_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$20 (param i64 i64 i64) (result i32)))
(import "env" "db_idx256_lowerbound" (func $fimport$21 (param i64 i64 i64 i32 i32 i32) (result i32)))
(import "env" "db_idx256_store" (func $fimport$22 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx256_find_primary" (func $fimport$23 (param i64 i64 i64 i32 i32 i64) (result i32)))
(import "env" "db_idx256_update" (func $fimport$24 (param i32 i64 i32 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$25 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "abort" (func $fimport$27))
(import "env" "memset" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$30 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$39 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$40 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$41 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$42 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$43 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$45 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$46 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$47 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$48 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$49 (param i32 i32) (result i32)))
(import "env" "assert_sha256" (func $fimport$50 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$51 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$52 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$53 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$54 (param i32 i32 i32)))
(import "env" "__ashlti3" (func $fimport$55 (param i32 i64 i64 i32)))
(import "env" "sha1" (func $fimport$56 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$57 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$58 (param i32 i32 i32)))
(import "env" "recover_key" (func $fimport$59 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$60 (param i32 i32 i32 i32 i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $55))
(export "_Znwj" (func $96))
(export "_ZdlPv" (func $98))
(export "_Znaj" (func $97))
(export "_ZdaPv" (func $99))
(export "_ZnwjSt11align_val_t" (func $100))
(export "_ZnajSt11align_val_t" (func $101))
(export "_ZdlPvSt11align_val_t" (func $102))
(export "_ZdaPvSt11align_val_t" (func $103))
(table $0 14 14 anyfunc)
(elem (i32.const 1) $52 $39 $1 $53 $17 $44 $50 $48 $8 $31 $54 $120 $122)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19104))
(global $global$2 i32 (i32.const 19104))


void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $131($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $63(*($1), (*($0) + [36]))
	$0 = *($0)
	CALL $63(*($1), ($0 + [48]))
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy(($0 + [64]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $63(*($1), ($0 + [72]))
	CALL $63(*($1), ($0 + [84]))
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [9977])
	CALL memcpy(($0 + [96]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [9977])
	CALL memcpy(($0 + [100]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $95 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11)
{
	int_32 $12
	int_32 $13
	int_32 $14
	$12 = ($global$0 - [80])
	$global$0 = $12
	$0 = *($0 + [4])
	$13 = *($0 + [4])
	$14 = (*($0) + int_32($13 >> [1]))
	$0 = *($0)
	if ( (($13 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($14) + $0))
	
.LABEL $label$1
	$9 = CALL $105($12, $9)
	$8 = CALL $105(($12 + [16]), $8)
	$6 = CALL $105(($12 + [32]), $6)
	$5 = CALL $105(($12 + [48]), $5)
	$4 = CALL $105(($12 + [64]), $4)
	CALL void $14((int_32 $1), (int_64 $2), (int_64 $3), (int_64 $4), (int_32 $5), (int_32 $6), (int_32 $7), (int_64 $8), (int_32 $9), (int_32 $10), (int_32 $11), (int_32 $0))
	if ( (*($9) & [1]) ){ goto $label$10 }
	if ( (*($8) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	$0 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$0 = [1]
	if ( (*($6) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($5) & $0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $0) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($4) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($12 + [80])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($12 + [80])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $128($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10596])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $128($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9839])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9839])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [28]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9839])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [14]) = *(*($0 + [32]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9839])
	CALL memcpy(*($4 + [4]), ($2 + [14]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [13]) = *(*($0 + [36]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9839])
	CALL memcpy(*($4 + [4]), ($2 + [13]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	CALL $34(*($1), *($0 + [40]))
	$global$0 = ($2 + [16])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9977])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9977])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9977])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9977])
	CALL memcpy(($2 + [14]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [14]) != (int_32)[0])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9977])
	CALL memcpy(($2 + [13]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [13]) != (int_32)[0])
	CALL $63(*($1), *($0 + [40]))
	$global$0 = ($2 + [16])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *($6 + [72])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-4992121821513104384, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($7)
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *(($6 + [76]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-4992121821513104383, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($7)
	
.LABEL $label$3
	$7 = *($0)
	$5 = *($7 + [4])
	$0 = *(($5 + [80]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($7)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4992121821513104382, ($4 + [8]), *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($0)
	
.LABEL $label$5
	$global$0 = ($4 + [16])
}

void .FUNC $93 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = ($global$0 - [80])
	$global$0 = $8
	$0 = *($0 + [4])
	$9 = *($0 + [4])
	$10 = (*($0) + int_32($9 >> [1]))
	$0 = *($0)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($10) + $0))
	
.LABEL $label$1
	$7 = CALL $105($8, $7)
	$6 = CALL $105(($8 + [16]), $6)
	$4 = CALL $105(($8 + [32]), $4)
	$3 = CALL $105(($8 + [48]), $3)
	$2 = CALL $105(($8 + [64]), $2)
	CALL void $10((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_64 $6), (int_32 $7), (int_32 $0))
	if ( (*($7) & [1]) ){ goto $label$10 }
	if ( (*($6) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($6 + [8]))
	$0 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$0 = [1]
	if ( (*($4) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($3) & $0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $0) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($2) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($8 + [80])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($2 + [8]))
	$global$0 = ($8 + [80])
}

int_32 .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $119([13], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $115 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $109(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $123(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8675], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $109(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $109(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $122 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $130 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10608]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10612])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10608]) = [1]
	$2 = ($2 << [16])
	*([0] + [10612]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10612])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10612]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10608]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10608]) = [1]
	$3 = ($3 << [16])
	*([0] + [10612]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10612])
	
.LABEL $label$10
	*([0] + [10612]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $131 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19000])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18808]
	$3 = (((int_32)$1 * (int_32)[12]) + [18808])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL sha256($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$1 == (int_32)[1]), [8225])
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$4 }
	if ( ($1 <= [2]) ){ goto $label$5 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$5
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

int_32 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [92])) == (int_32)$0), [10046])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10091])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10141])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [76]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($3 + [84])))
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($3 + [64])))
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [44])))
	if ( (*($3 + [24]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$17:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$18 }
	if ( ((*($5 + [76]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($5 + [84])))
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($5 + [64])))
	if ( ((*($5 + [36]) & [1]) == 0) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((*($5 + [36]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($5 + [44])))
	if ( (*($5 + [24]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$19
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$17 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [96]))
}

int_32 .FUNC $126 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $117())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $127($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [76]) == (int_32)$0), [10046])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10091])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10141])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$10
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$14
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [80]))
}

void .FUNC $48 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [96])
	$global$0 = $3
	*(($3 + [80])) = [0]
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	$4 = *($0)
	*($3 + [48]) = $4
	*($3 + [56]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)-5915095046963593216, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $9(($3 + [48]), $5)
	CALL eosio_assert(((int_32)*($5 + [92]) == (int_32)($3 + [48])), [9903])
	CALL eosio_assert(*($5 + [88]), [9448])
	$6 = *($5)
	$7 = ($3 + [64])
	$4 = *($7)
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$3 }
	$4 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($3 + [48]), *(($3 + [56])), (int_64)-5915095046963593216, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	CALL $9(($3 + [48]), $8)
	*($3 + [12]) = [0]
	*($3 + [8]) = ($3 + [48])
	$4 = *(*(CALL $24(($3 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*(($3 + [64])) = $4
	
.LABEL $label$3
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [10198])
	CALL eosio_assert(((int_64)$6 != (int_64)((int_64)*($7) + (int_64)-1)), [9476])
	CALL eosio_assert([1], [9982])
	CALL eosio_assert([1], [10016])
	$7 = CALL db_next_i64(*($5 + [96]), ($3 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	CALL $9(($3 + [48]), $7)
	
.LABEL $label$5
	CALL $38(($3 + [48]), $5)
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([1], [9448])
	
.LABEL $label$1
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	$4 = *($0)
	*($3 + [8]) = $4
	*($3 + [16]) = $1
	*($3 + [32]) = (int_64)0
	$5 = [0]
	$0 = CALL db_lowerbound_i64($4, $1, (int_64)-2507752492950880256, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $13(($3 + [8]), $0)
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9511])
	if ( ($5 == 0) ){ goto $label$7 }
	if ( ($2 == 0) ){ goto $label$7 }
	$7 = [1]
	
.LOOP $label$8:
	$0 = [0]
	$8 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($8, [9982])
	CALL eosio_assert($8, [10016])
	$8 = CALL db_next_i64(*($5 + [80]), ($3 + [88]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$9 }
	$0 = CALL $13(($3 + [8]), $8)
	
.LABEL $label$9
	CALL $49(($3 + [8]), $5)
	if ( ($0 == 0) ){ goto $label$7 }
	$8 = ($7 <= $2)
	$7 = ($7 + [1])
	$5 = $0
	if ( $8 ){ goto $label$8 }
	
.LABEL $label$7
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$10 }
	$8 = ($3 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$12 }
	
.LOOP $label$13:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$15
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$16
	CALL _ZdlPv($5)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$13 }
	$5 = *(($3 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $7
	
.LABEL $label$11
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$10
	CALL $16(($3 + [72]))
	$global$0 = ($3 + [96])
}

int_32 .FUNC $125 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $116($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $42 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10016])
	$2 = *($0 + [4])
	$3 = *(($2 + [76]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-4992121821513104383, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [76])) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [9903])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $45($6, CALL $fimport$0(*($6), *($6 + [8]), (int_64)-4992121821513104384, $5))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [9903])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [76])) = $4
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9954])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $128($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9977])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9977])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9977])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $43(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $131($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-4992121821513104383, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [9903])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $45($7, CALL $fimport$0(*($7), *($7 + [8]), (int_64)-4992121821513104384, $6))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [9903])
	
.LABEL $label$2
	*(($4 + [76])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [10046])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10091])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10141])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [52]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [60])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [52]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [60])))
	
.LABEL $label$13
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [68]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $92(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$6 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $4($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [8]) = $7
	*($5 + [16]) = $1
	$1 = ($1 - $7)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [9839])
	CALL memcpy($7, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [9839])
	CALL memcpy(($7 + [8]), ($4 + [8]), [8])
	*($5 + [24]) = *(($4 + [16]))
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [9839])
	CALL memcpy(($7 + [16]), ($5 + [24]), [8])
	*($5 + [12]) = ($7 + [24])
	CALL $34(($5 + [8]), $6)
	$global$0 = ($5 + [32])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9954])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $128($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [8]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [50]) = [0]
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [60]) = [0]
	*($5 + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [44])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [49])
	*($3 + [68]) = ($5 + [50])
	*($3 + [72]) = ($5 + [52])
	CALL $91(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = $1
	*($5 + [72 align=4]) = (int_64)-1
	*($5 + [80]) = [-1]
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $33(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $131($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [60])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $44 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [320])
	$global$0 = $2
	*((($2 + [264]) + [32])) = [0]
	*($2 + [280]) = (int_64)-1
	*($2 + [288]) = (int_64)0
	$3 = *($0)
	*($2 + [264]) = $3
	*($2 + [272]) = $3
	*((($2 + [224]) + [32])) = [0]
	*(($2 + [262])) = [0]
	*($2 + [232]) = $3
	*($2 + [224]) = $3
	*($2 + [240]) = (int_64)-1
	*($2 + [248]) = (int_64)0
	*($2 + [260]) = [0]
	$4 = [0]
	$0 = CALL db_find_i64($3, $3, (int_64)-4992121821513104384, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $45(($2 + [224]), $0)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)($2 + [224])), [9903])
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [9201])
	$3 = *($4 + [44])
	$7 = *(($2 + [292]))
	$6 = *(($2 + [288]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$5:
	$0 = ($7 + [-24])
	$8 = *($0)
	if ( ((int_64)*($8) == (int_64)$3) ){ goto $label$4 }
	$7 = $0
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($2 + [264])), [9903])
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	$0 = CALL db_find_i64(*($2 + [264]), *(($2 + [272])), (int_64)-6147556259945233408, $3)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $41(($2 + [264]), $0)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($2 + [264])), [9903])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9234])
	$1 = *($8 + [8])
	$3 = ((int_64)*($4 + [16]) * (int_64)100000)
	$9 = ((uint_64)$3 / (uint_64)$1)
	CALL eosio_assert((uint_64)($9 <= (int_64)100001), [9278])
	$9 = ( (int_64)1 ? $9 : ((uint_64)$1 > (uint_64)$3) )
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9613])
	$3 = (int_64)20809
	$0 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $1
	$7 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $1
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$7 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [9662])
	$10 = ($4 + [52])
	CALL $114(($2 + [208]), [9342], $10)
	*($2 + [136]) = [8398]
	*($2 + [140]) = CALL $125([8398])
	*($2 + [24]) = *($2 + [136])
	*($2 + [160]) = *(CALL $3(($2 + [144]), ($2 + [24])))
	*($2 + [152]) = (int_64)6257038465489280352
	*($2 + [120]) = [9362]
	*($2 + [124]) = CALL $125([9362])
	*($2 + [16]) = *($2 + [120])
	$0 = CALL $3(($2 + [128]), ($2 + [16]))
	$3 = *($4 + [8])
	*(($2 + [96])) = (int_64)5327107
	*($2 + [80]) = $3
	*($2 + [88]) = $9
	CALL $105(($2 + [104]), ($2 + [208]))
	$0 = CALL $46(($2 + [168]), ($2 + [152]), (int_64)6257038465489280352, *($0), ($2 + [80]))
	CALL $6(($2 + [304]), $0)
	$7 = *($2 + [304])
	CALL send_inline($7, (*($2 + [308]) - $7))
	$7 = *($2 + [304])
	if ( ($7 == 0) ){ goto $label$11 }
	*($2 + [308]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$11
	$7 = *($0 + [28])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($0 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$12
	$7 = *($0 + [16])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($0 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$13
	if ( ((*($2 + [104]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($2 + [112])))
	
.LABEL $label$14
	if ( (*($4 + [49]) == 0) ){ goto $label$15 }
	if ( (*($4 + [48]) == 0) ){ goto $label$15 }
	$1 = *($8 + [16])
	$3 = ((int_64)*($4 + [24]) * (int_64)400000)
	$9 = ( (int_64)1 ? ((uint_64)$3 / (uint_64)$1) : ((uint_64)$1 > (uint_64)$3) )
	CALL eosio_assert((uint_64)($9 <= (int_64)400001), [9368])
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9613])
	$3 = (int_64)20809
	$0 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$3 = $1
	$7 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$3 = $1
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$7 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $7 ){ goto $label$20 }
	$7 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$7 = [0]
	
.LABEL $label$16
	CALL eosio_assert($7, [9662])
	CALL $114(($2 + [64]), [9430], $10)
	*($2 + [48]) = [8398]
	*($2 + [52]) = CALL $125([8398])
	*($2 + [8]) = *($2 + [48])
	*($2 + [160]) = *(CALL $3(($2 + [56]), ($2 + [8])))
	*($2 + [152]) = (int_64)6257038465489280352
	*($2 + [32]) = [9362]
	*($2 + [36]) = CALL $125([9362])
	*($2) = *($2 + [32])
	$0 = CALL $3(($2 + [40]), $2)
	$3 = *(($4 + [8]))
	*(($2 + [96])) = (int_64)5327107
	*($2 + [80]) = $3
	*($2 + [88]) = $9
	CALL $105(($2 + [104]), ($2 + [64]))
	$0 = CALL $46(($2 + [168]), ($2 + [152]), (int_64)6257038465489280352, *($0), ($2 + [80]))
	CALL $6(($2 + [304]), $0)
	$7 = *($2 + [304])
	CALL send_inline($7, (*($2 + [308]) - $7))
	$7 = *($2 + [304])
	if ( ($7 == 0) ){ goto $label$21 }
	*($2 + [308]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$21
	$7 = *($0 + [28])
	if ( ($7 == 0) ){ goto $label$22 }
	*(($0 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$22
	$7 = *($0 + [16])
	if ( ($7 == 0) ){ goto $label$23 }
	*(($0 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$23
	if ( ((*($2 + [104]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($2 + [112])))
	
.LABEL $label$24
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($2 + [72]))
	
.LABEL $label$15
	CALL eosio_assert($5, [9982])
	CALL eosio_assert($5, [10016])
	$0 = CALL db_next_i64(*($4 + [68]), ($2 + [168]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$25 }
	CALL $45(($2 + [224]), $0)
	
.LABEL $label$25
	CALL $47(($2 + [224]), $4)
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*($2 + [216]))
	
.LABEL $label$26
	$6 = *($2 + [248])
	if ( ($6 == 0) ){ goto $label$27 }
	$8 = ($2 + [252])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$29 }
	
.LOOP $label$30:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$31 }
	if ( ((*($7 + [52]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*(($7 + [60])))
	
.LABEL $label$32
	CALL _ZdlPv($7)
	
.LABEL $label$31
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$30 }
	$0 = *(($2 + [248]))
	goto $label$28 
	
.LABEL $label$29
	$0 = $6
	
.LABEL $label$28
	*($8) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$27
	$6 = *($2 + [288])
	if ( ($6 == 0) ){ goto $label$33 }
	$8 = ($2 + [292])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$35 }
	
.LOOP $label$36:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$37 }
	CALL _ZdlPv($7)
	
.LABEL $label$37
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$36 }
	$0 = *(($2 + [288]))
	goto $label$34 
	
.LABEL $label$35
	$0 = $6
	
.LABEL $label$34
	*($8) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$33
	$global$0 = ($2 + [320])
}

int_32 .FUNC $124 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $128 (int_32 $0)
{
	return CALL $129([10616], $0)
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = ($global$0 - [256])
	$global$0 = $7
	*($7 + [200]) = $2
	*($7 + [208]) = $1
	*($7 + [199]) = $3
	*($7 + [184]) = $4
	CALL require_auth(*($0))
	$3 = *($5)
	if ( ($3 & [1]) ){ goto $label$2 }
	$5 = uint_32($3 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($5 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($5 <= [256]), [8414])
	$5 = *($6)
	if ( ($5 & [1]) ){ goto $label$4 }
	$5 = uint_32($5 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$5 = *($6 + [4])
	
.LABEL $label$3
	CALL eosio_assert(($5 <= [32]), [8450])
	*((($7 + [144]) + [32])) = [0]
	*($7 + [160]) = (int_64)-1
	$1 = (int_64)0
	*($7 + [168]) = (int_64)0
	$4 = *($0)
	*($7 + [144]) = $4
	*($7 + [152]) = $4
	$5 = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)-5915095046963593216, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $9(($7 + [144]), $3)
	CALL eosio_assert(((int_32)*($5 + [92]) == (int_32)($7 + [144])), [9903])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8482])
	$4 = CALL current_time()
	CALL eosio_assert(((uint_32)*($5 + [72]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000))), [8501])
	$8 = [1]
	CALL eosio_assert(((int_32)*($5 + [88]) ^ (int_32)[1]), [8523])
	*((($7 + [104]) + [32])) = [0]
	*($7 + [120]) = (int_64)-1
	*($7 + [128]) = (int_64)0
	*($7 + [140]) = [0]
	$4 = *($0)
	*($7 + [104]) = $4
	*($7 + [112]) = $4
	$5 = CALL db_lowerbound_i64($4, $4, (int_64)-4157660949893873664, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL $2(($7 + [104]), $5)
	*($7 + [52]) = [0]
	*($7 + [48]) = ($7 + [104])
	$4 = *(*(CALL $10(($7 + [48])) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$8 = (uint_64)($1 <= (int_64)-2)
	
.LABEL $label$6
	*(($3 = (($7 + [104]) + [16]))) = $1
	CALL eosio_assert($8, [10198])
	$2 = *($3)
	*($7 + [96]) = $2
	$4 = *($0)
	CALL eosio_assert(((int_64)*($7 + [104]) == (int_64)CALL $fimport$8()), [10352])
	*(($5 = CALL _Znwj([48])) + [32]) = ($7 + [104])
	*($5) = $2
	*($5 + [8]) = *($7 + [208])
	*($5 + [16]) = *($7 + [184])
	*($5 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($5 + [28]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [1814400])
	*($7 + [232]) = (($7 + [48]) + [32])
	*($7 + [228]) = ($7 + [48])
	*($7 + [224]) = ($7 + [48])
	*($7 + [248]) = ($7 + [224])
	$8 = ($5 + [8])
	*($7 + [12]) = $8
	*($7 + [8]) = $5
	*($7 + [16]) = ($5 + [16])
	*($7 + [20]) = ($5 + [24])
	*($7 + [24]) = ($5 + [28])
	CALL $11(($7 + [8]), ($7 + [248]))
	$2 = *($5)
	$9 = (($7 + [104]) + [8])
	*($5 + [36]) = CALL db_store_i64(*($9), (int_64)-4157660949893873664, $4, $2, ($7 + [48]), [32])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$7 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$2 = *($5)
	$1 = *($9)
	*($7 + [8]) = *($8)
	*($5 + [40]) = CALL db_idx64_store($1, (int_64)-4157660949893873664, $4, $2, ($7 + [8]))
	*($7 + [8]) = $5
	$4 = *($5)
	*($7 + [48]) = $4
	$8 = *(($5 + [36]))
	*($7 + [224]) = $8
	$3 = *((($7 + [104]) + [28]))
	if ( ((uint_32)$3 >= (uint_32)*((($7 + [104]) + [32]))) ){ goto $label$10 }
	*($3 + [8]) = $4
	*($3 + [16]) = $8
	*($7 + [8]) = [0]
	*($3) = $5
	*(($7 + [132])) = ($3 + [24])
	$3 = *($7 + [8])
	$5 = [0]
	*($7 + [8]) = [0]
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $12(($7 + [128]), ($7 + [8]), ($7 + [48]), ($7 + [224]))
	$3 = *($7 + [8])
	$5 = [0]
	*($7 + [8]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv($3)
	
.LABEL $label$8
	*(($3 = ($7 + [80]))) = $5
	*($7 + [64]) = (int_64)-1
	$4 = *($0)
	*($7 + [48]) = $4
	$2 = *($7 + [200])
	*($7 + [56]) = $2
	*($7 + [72]) = (int_64)0
	$8 = CALL db_lowerbound_i64($4, $2, (int_64)-2507752492950880256, (int_64)0)
	if ( ((int_32)$8 < (int_32)$5) ){ goto $label$12 }
	CALL $13(($7 + [48]), $8)
	$5 = [0]
	$4 = *($7 + [48])
	goto $label$11 
	
.LABEL $label$12
	$5 = [1]
	
.LABEL $label$11
	*($7 + [47]) = $5
	$2 = *($0)
	*($7 + [36]) = $6
	*($7 + [12]) = ($7 + [200])
	*($7 + [8]) = ($7 + [48])
	*($7 + [16]) = ($7 + [199])
	*($7 + [20]) = ($7 + [47])
	*($7 + [24]) = ($7 + [184])
	*($7 + [28]) = ($7 + [208])
	*($7 + [32]) = ($7 + [96])
	*($7 + [248]) = $2
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$8()), [10352])
	*($7 + [228]) = ($7 + [8])
	*($7 + [224]) = ($7 + [48])
	*($7 + [232]) = ($7 + [248])
	*(($5 = CALL _Znwj([88])) + [24]) = [0]
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72]) = [0]
	*($5 + [76]) = ($7 + [48])
	CALL $14(($7 + [224]), $5)
	*($7 + [240]) = $5
	$4 = *($5)
	*($7 + [224]) = $4
	$6 = *($5 + [80])
	*($7 + [220]) = $6
	$8 = ($7 + [76])
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)*($3)) ){ goto $label$17 }
	*($0 + [8]) = $4
	*($0 + [16]) = $6
	*($7 + [240]) = [0]
	*($0) = $5
	*($8) = ($0 + [24])
	$5 = *($7 + [240])
	*($7 + [240]) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $15(($7 + [72]), ($7 + [240]), ($7 + [224]), ($7 + [220]))
	$5 = *($7 + [240])
	*($7 + [240]) = [0]
	if ( $5 ){ goto $label$15 }
	
.LABEL $label$16
	$6 = *($7 + [72])
	if ( ($6 == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$18
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$19
	CALL _ZdlPv($5)
	$6 = *($7 + [72])
	if ( ($6 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$3 = ($7 + [76])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$21 }
	
.LOOP $label$22:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$23 }
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$24
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$25
	CALL _ZdlPv($5)
	
.LABEL $label$23
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$22 }
	$5 = *(($7 + [72]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $6
	
.LABEL $label$20
	*($3) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$13
	$6 = *($7 + [128])
	if ( ($6 == 0) ){ goto $label$26 }
	$3 = ($7 + [132])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$28 }
	
.LOOP $label$29:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$30 }
	CALL _ZdlPv($0)
	
.LABEL $label$30
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$29 }
	$5 = *(($7 + [128]))
	goto $label$27 
	
.LABEL $label$28
	$5 = $6
	
.LABEL $label$27
	*($3) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$26
	CALL $16(($7 + [168]))
	$global$0 = ($7 + [256])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9954])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $128($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([104])) + [16]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64]) = [0]
	*($5 + [76 align=4]) = (int_64)0
	*($5 + [84]) = [0]
	*($5 + [92]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [36])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [68])
	*($3 + [64]) = ($5 + [72])
	*($3 + [68]) = ($5 + [76])
	*($3 + [72]) = ($5 + [88])
	CALL $75(($3 + [32]), ($3 + [24]))
	*($5 + [96]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $26(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $131($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [76]) & [1]) ){ goto $label$16 }
	if ( (*($1 + [56]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($1 + [84])))
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [64])))
	$4 = [1]
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$4 = [1]
	if ( (*($1 + [36]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((*($1 + [24]) & $4) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	CALL _ZdlPv(*(($1 + [44])))
	if ( ((*($1 + [24]) & $4) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $4($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9839])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9839])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $73(CALL $72($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [10046])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10091])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10141])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [36]))
	$6 = *(($1 + [40]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157660949893873664, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $116($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $34(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9954])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $128($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($5 + [8]) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [28])
	CALL $74(($3 + [40]), ($3 + [32]))
	*($5 + [40]) = [-1]
	*($5 + [36]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $12(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $131($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9682])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9787])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9720])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9787])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [224])
	$global$0 = $2
	$3 = [0]
	*(($2 + [184])) = [0]
	*($2 + [168]) = (int_64)-1
	*($2 + [176]) = (int_64)0
	*($2 + [188]) = [0]
	$4 = *($0)
	*($2 + [152]) = $4
	*($2 + [160]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)-4157660949893873664, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $2(($2 + [152]), $6)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($2 + [152])), [9903])
	
.LABEL $label$1
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [8192])
	$4 = CALL current_time()
	CALL eosio_assert((*($5 + [28]) <= (CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000))), [8269])
	$8 = ((int_64)*($5 + [16]) * (int_64)1000)
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9613])
	$4 = (int_64)20809
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$4 = $1
	$6 = [1]
	$9 = $3
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$4 = $1
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$9 = ($3 + [1])
	$3 = $9
	if ( $6 ){ goto $label$6 }
	$6 = [1]
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	
.LABEL $label$2
	CALL eosio_assert($6, [9662])
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$3 = CALL $125([8383])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$10 }
	*($2 + [16]) = ($3 << [1])
	$6 = (($2 + [16]) | [1])
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$9 = (($3 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($2 + [16]) = ($9 | [1])
	*($2 + [24]) = $6
	*($2 + [20]) = $3
	
.LABEL $label$9
	CALL memcpy($6, [8383], $3)
	
.LABEL $label$8
	*(($6 + $3)) = [0]
	CALL $115(($2 + [96]), *($5))
	$3 = *($2 + [96])
	$6 = ($3 & [1])
	$3 = CALL $112(($2 + [16]), ( *($2 + [104]) ? (($2 + [96]) | [1]) : $6 ), ( *($2 + [100]) ? uint_32($3 >> [1]) : $6 ))
	$6 = ($3 + [8])
	*((($2 + [136]) + [8])) = *($6)
	*($2 + [136]) = *($3)
	*($3) = (int_64)0
	*($6) = [0]
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*((($2 + [96]) + [8])))
	
.LABEL $label$11
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($2 + [24]))
	
.LABEL $label$12
	$4 = *($0)
	*($2 + [80]) = [8398]
	*($2 + [84]) = CALL $125([8398])
	*($2 + [8]) = *($2 + [80])
	$1 = *(CALL $3(($2 + [88]), ($2 + [8])))
	*($2 + [64]) = [8405]
	*($2 + [68]) = CALL $125([8405])
	*($2) = *($2 + [64])
	$3 = CALL $3(($2 + [72]), $2)
	$10 = *($5 + [8])
	*((($2 + [16]) + [24])) = (int_64)5327107
	*($2 + [16]) = *($0)
	*($2 + [32]) = $8
	*($2 + [24]) = $10
	$6 = CALL $105((($2 + [16]) + [32]), ($2 + [136]))
	*($2 + [96]) = (int_64)6257038465489280352
	*($2 + [104]) = *($3)
	*(($3 = CALL _Znwj([16]))) = $4
	*($3 + [8]) = $1
	*((($2 + [96]) + [36])) = [0]
	$9 = ($3 + [16])
	*((($2 + [96]) + [24])) = $9
	*(($2 + [116])) = $9
	*($2 + [112]) = $3
	*($2 + [124 align=4]) = (int_64)0
	$3 = *($6)
	$6 = ( *((($2 + [16]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [32])
	$4 = (CASTING uint_64)(uint_32 $6)
	$6 = ($2 + [124])
	
.LOOP $label$13:
	$3 = ($3 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$13 }
	if ( ($3 == 0) ){ goto $label$15 }
	CALL $4($6, $3)
	$6 = *(($2 + [128]))
	$3 = *(($2 + [124]))
	goto $label$14 
	
.LABEL $label$15
	$6 = [0]
	$3 = [0]
	
.LABEL $label$14
	*($2 + [212]) = $3
	*($2 + [208]) = $3
	*($2 + [216]) = $6
	*($2 + [192]) = ($2 + [208])
	*($2 + [200]) = ($2 + [16])
	CALL $5(($2 + [200]), ($2 + [192]))
	CALL $6(($2 + [208]), ($2 + [96]))
	$3 = *($2 + [208])
	CALL send_inline($3, (*($2 + [212]) - $3))
	$3 = *($2 + [208])
	if ( ($3 == 0) ){ goto $label$16 }
	*($2 + [212]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$3 = *($2 + [124])
	if ( ($3 == 0) ){ goto $label$17 }
	*(($2 + [128])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$17
	$3 = *($2 + [112])
	if ( ($3 == 0) ){ goto $label$18 }
	*(($2 + [116])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$18
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($2 + [56])))
	
.LABEL $label$19
	CALL eosio_assert($7, [9982])
	CALL eosio_assert($7, [10016])
	$3 = CALL db_next_i64(*($5 + [36]), ($2 + [16]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$20 }
	CALL $2(($2 + [152]), $3)
	
.LABEL $label$20
	CALL $7(($2 + [152]), $5)
	if ( ((*($2 + [136]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($2 + [144]))
	
.LABEL $label$21
	$9 = *($2 + [176])
	if ( ($9 == 0) ){ goto $label$22 }
	$5 = ($2 + [180])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$24 }
	
.LOOP $label$25:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$26 }
	CALL _ZdlPv($6)
	
.LABEL $label$26
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$25 }
	$3 = *(($2 + [176]))
	goto $label$23 
	
.LABEL $label$24
	$3 = $9
	
.LABEL $label$23
	*($5) = $9
	CALL _ZdlPv($3)
	
.LABEL $label$22
	$global$0 = ($2 + [224])
	return (unreachable)
	
.LABEL $label$7
	CALL $104(($2 + [16]))
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-2507752492950880256, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $13($6, $8)
	*($3 + [28]) = [0]
	*($3 + [24]) = $6
	$7 = *(*(CALL $79(($3 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [10198])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [28]) = *(*($5 + [8]))
	*($1 + [32]) = *(*($5 + [16]))
	*($1 + [29]) = *(*($5 + [12]))
	*($1 + [40]) = *(*($5 + [20]))
	*($1 + [48]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [56]) = *(*($5 + [24]))
	$8 = ($1 + [64])
	CALL $106($8, *($5 + [28]))
	$5 = *($1 + [16])
	$6 = ( *(($1 + [20])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [46])
	$7 = (CASTING uint_64)(uint_32 $6)
	$9 = ($1 + [16])
	$10 = ($1 + [56])
	$11 = ($1 + [48])
	$12 = ($1 + [32])
	$13 = ($1 + [29])
	$14 = ($1 + [28])
	$15 = ($1 + [8])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$6 = *(($1 + [64]))
	$6 = ( *(($1 + [68])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$5 = ($6 + $5)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $128($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $15
	*($3 + [24]) = $1
	*($3 + [32]) = $9
	*($3 + [36]) = $14
	*($3 + [40]) = $13
	*($3 + [44]) = $12
	*($3 + [48]) = ($1 + [40])
	*($3 + [52]) = $11
	*($3 + [56]) = $10
	*($3 + [60]) = $8
	CALL $80(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [80]) = CALL db_store_i64(*($4 + [8]), (int_64)-2507752492950880256, *(*($0 + [8])), $7, $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $131($6)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [64])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $116($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [72])))
	
.LABEL $label$11
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [76]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [84])))
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [64])))
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [44])))
	if ( (*($3 + [24]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$8 = ($global$0 - [464])
	$global$0 = $8
	*($8 + [416]) = $5
	*($8 + [424]) = $1
	CALL require_auth(*($0))
	*((($8 + [376]) + [32])) = [0]
	*($8 + [392]) = (int_64)-1
	*($8 + [400]) = (int_64)0
	*($8 + [412]) = [0]
	$1 = *($0)
	*($8 + [376]) = $1
	*($8 + [384]) = $1
	*((($8 + [336]) + [32])) = [0]
	*($8 + [344]) = $1
	*($8 + [336]) = $1
	*($8 + [352]) = (int_64)-1
	*($8 + [360]) = (int_64)0
	$9 = [1]
	$11 = *($2)
	$10 = CALL $125([8545])
	if ( ((int_32)$10 != (int_32)( *($2 + [4]) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$1 }
	$9 = ((int_32)CALL $113($2, [0], [-1], [8545], $10) != (int_32)[0])
	
.LABEL $label$1
	CALL eosio_assert($9, [8546])
	$9 = *($2)
	if ( ($9 & [1]) ){ goto $label$3 }
	$9 = uint_32($9 >> [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *(($2 + [4]))
	
.LABEL $label$2
	CALL eosio_assert(($9 <= [257]), [8567])
	$9 = *($3)
	if ( ($9 & [1]) ){ goto $label$5 }
	$9 = uint_32($9 >> [1])
	goto $label$4 
	
.LABEL $label$5
	$9 = *($3 + [4])
	
.LABEL $label$4
	CALL eosio_assert(($9 <= [47]), [8594])
	$9 = *($3)
	if ( ($9 & [1]) ){ goto $label$7 }
	$9 = uint_32($9 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$9 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(((uint_32)$9 > (uint_32)[45]), [8634])
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$9 }
	$9 = uint_32($9 >> [1])
	goto $label$8 
	
.LABEL $label$9
	$9 = *($4 + [4])
	
.LABEL $label$8
	CALL eosio_assert(($9 <= [8]), [8680])
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$11 }
	$9 = uint_32($9 >> [1])
	goto $label$10 
	
.LABEL $label$11
	$9 = *($4 + [4])
	
.LABEL $label$10
	CALL eosio_assert(((uint_32)$9 > (uint_32)[1]), [8710])
	$9 = *($6)
	if ( ($9 & [1]) ){ goto $label$13 }
	$9 = uint_32($9 >> [1])
	goto $label$12 
	
.LABEL $label$13
	$9 = *($6 + [4])
	
.LABEL $label$12
	CALL eosio_assert(($9 <= [256]), [8749])
	$9 = *($7)
	if ( ($9 & [1]) ){ goto $label$15 }
	$9 = uint_32($9 >> [1])
	goto $label$14 
	
.LABEL $label$15
	$9 = *($7 + [4])
	
.LABEL $label$14
	CALL eosio_assert(($9 <= [32]), [8785])
	CALL eosio_assert(((int_64)$5 > (int_64)-2), [8817])
	*($8 + [328]) = ($8 + [376])
	$11 = CALL $105(($8 + [288]), $4)
	$9 = CALL $105(($8 + [304]), $2)
	CALL $18(($8 + [80]), $9, $11)
	CALL $19(($8 + [320]), ($8 + [328]), ($8 + [80]))
	if ( (*($11) & [1]) ){ goto $label$21 }
	if ( (*($9) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($9) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*($9 + [8]))
	$9 = *($8 + [324])
	if ( $9 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$9 = *($8 + [324])
	if ( ($9 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$1 = *($9)
	goto $label$16 
	
.LABEL $label$17
	$9 = ($8 + [392])
	$1 = *($9)
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$22 }
	$1 = (int_64)0
	$11 = CALL db_lowerbound_i64(*($8 + [376]), *(($8 + [384])), (int_64)-2044374312540962816, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$23 }
	CALL $20(($8 + [376]), $11)
	*($8 + [84]) = [0]
	*($8 + [80]) = ($8 + [376])
	$1 = *(*(CALL $21(($8 + [80])) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	*(($8 + [392])) = $1
	
.LABEL $label$22
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [10198])
	$1 = *($9)
	
.LABEL $label$16
	*($8 + [280]) = $1
	if ( ((int_64)*($8 + [416]) == (int_64)-1) ){ goto $label$26 }
	if ( *($8 + [324]) ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$26
	*($8 + [416]) = $1
	if ( *($8 + [324]) ){ goto $label$24 }
	
.LABEL $label$25
	$1 = *($0)
	*($8 + [84]) = $2
	*($8 + [88]) = $4
	*($8 + [80]) = ($8 + [280])
	*($8 + [92]) = ($8 + [416])
	*($8 + [448]) = $1
	CALL eosio_assert(((int_64)*($8 + [376]) == (int_64)CALL $fimport$8()), [10352])
	*($8 + [228]) = ($8 + [80])
	*($8 + [224]) = ($8 + [376])
	*($8 + [232]) = ($8 + [448])
	*(($9 = CALL _Znwj([72])) + [16]) = [0]
	*($9 + [8 align=4]) = (int_64)0
	*($9 + [32 align=4]) = (int_64)0
	*($9 + [40 align=4]) = (int_64)0
	*($9 + [48 align=4]) = (int_64)0
	*($9 + [56]) = ($8 + [376])
	CALL $22(($8 + [224]), $9)
	*($8 + [32]) = $9
	$1 = *($9)
	*($8 + [224]) = $1
	$10 = *($9 + [60])
	*($8 + [272]) = $10
	$12 = ($8 + [404])
	$11 = *($12)
	if ( ((uint_32)$11 >= (uint_32)*(($8 + [408]))) ){ goto $label$28 }
	*($11 + [8]) = $1
	*($11 + [16]) = $10
	*($8 + [32]) = [0]
	*($11) = $9
	*($12) = ($11 + [24])
	$9 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($9 == 0) ){ goto $label$24 }
	goto $label$27 
	
.LABEL $label$28
	CALL $23(($8 + [400]), ($8 + [32]), ($8 + [224]), ($8 + [272]))
	$9 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($9 == 0) ){ goto $label$24 }
	
.LABEL $label$27
	if ( (*($9 + [44]) & [1]) ){ goto $label$33 }
	if ( (*($9 + [32]) & [1]) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	CALL _ZdlPv(*(($9 + [52])))
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$31 }
	
.LABEL $label$32
	CALL _ZdlPv(*(($9 + [40])))
	if ( (*($9 + [8]) & [1]) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	CALL _ZdlPv(*(($9 + [16])))
	
.LABEL $label$29
	CALL _ZdlPv($9)
	
.LABEL $label$24
	$9 = ($8 + [352])
	$1 = *($9)
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$34 }
	$1 = (int_64)0
	$11 = CALL db_lowerbound_i64(*($8 + [336]), *(($8 + [344])), (int_64)-5915095046963593216, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$35 }
	CALL $9(($8 + [336]), $11)
	*($8 + [84]) = [0]
	*($8 + [80]) = ($8 + [336])
	$1 = *(*(CALL $24(($8 + [80])) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$35
	*(($8 + [352])) = $1
	
.LABEL $label$34
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [10198])
	*($8 + [272]) = *($9)
	*($8 + [268]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($8 + [264]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [43200])
	$1 = *($0)
	*($8 + [88]) = $2
	*($8 + [96]) = $4
	*($8 + [100]) = $3
	*($8 + [116]) = $7
	*($8 + [84]) = ($8 + [280])
	*($8 + [80]) = ($8 + [272])
	*($8 + [92]) = ($8 + [416])
	*($8 + [104]) = ($8 + [424])
	*($8 + [108]) = ($8 + [268])
	*($8 + [112]) = ($8 + [264])
	*($8 + [448]) = $1
	CALL eosio_assert(((int_64)*($8 + [336]) == (int_64)CALL $fimport$8()), [10352])
	*($8 + [228]) = ($8 + [80])
	*($8 + [224]) = ($8 + [336])
	*($8 + [232]) = ($8 + [448])
	*(($9 = CALL _Znwj([104])) + [16]) = (int_64)0
	*($9 + [24 align=4]) = (int_64)0
	*($9 + [32 align=4]) = (int_64)0
	*($9 + [40 align=4]) = (int_64)0
	*($9 + [56 align=4]) = (int_64)0
	*($9 + [64]) = [0]
	*($9 + [76 align=4]) = (int_64)0
	*($9 + [84]) = [0]
	*($9 + [92]) = ($8 + [336])
	CALL $25(($8 + [224]), $9)
	*($8 + [32]) = $9
	$1 = *($9)
	*($8 + [224]) = $1
	$10 = *($9 + [96])
	*($8 + [440]) = $10
	$12 = ($8 + [364])
	$11 = *($12)
	if ( ((uint_32)$11 >= (uint_32)*(($8 + [368]))) ){ goto $label$38 }
	*($11 + [8]) = $1
	*($11 + [16]) = $10
	*($8 + [32]) = [0]
	*($11) = $9
	*($12) = ($11 + [24])
	$9 = *($8 + [32])
	$11 = [0]
	*($8 + [32]) = [0]
	if ( ($9 == 0) ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$38
	CALL $26(($8 + [360]), ($8 + [32]), ($8 + [224]), ($8 + [440]))
	$9 = *($8 + [32])
	$11 = [0]
	*($8 + [32]) = [0]
	if ( ($9 == 0) ){ goto $label$36 }
	
.LABEL $label$37
	if ( (*($9 + [76]) & [1]) ){ goto $label$45 }
	if ( (*($9 + [56]) & [1]) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	CALL _ZdlPv(*(($9 + [84])))
	if ( ((*($9 + [56]) & [1]) == 0) ){ goto $label$43 }
	
.LABEL $label$44
	CALL _ZdlPv(*(($9 + [64])))
	$10 = [1]
	if ( ((*($9 + [36]) & [1]) == 0) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	$10 = [1]
	if ( (*($9 + [36]) & [1]) ){ goto $label$41 }
	
.LABEL $label$42
	if ( ((*($9 + [24]) & $10) == 0) ){ goto $label$39 }
	goto $label$40 
	
.LABEL $label$41
	CALL _ZdlPv(*(($9 + [44])))
	if ( ((*($9 + [24]) & $10) == 0) ){ goto $label$39 }
	
.LABEL $label$40
	CALL _ZdlPv(*(($9 + [32])))
	
.LABEL $label$39
	CALL _ZdlPv($9)
	
.LABEL $label$36
	$1 = *($0)
	*($8 + [208]) = [8398]
	*($8 + [212]) = CALL $125([8398])
	*($8 + [24]) = *($8 + [208])
	$5 = *(CALL $3(($8 + [216]), ($8 + [24])))
	$13 = *($0)
	*($8 + [192]) = [8884]
	*($8 + [196]) = CALL $125([8884])
	*($8 + [16]) = *($8 + [192])
	$9 = CALL $3(($8 + [200]), ($8 + [16]))
	*($8 + [80]) = *($8 + [272])
	*($8 + [88]) = *($8 + [424])
	*($8 + [96]) = *($8 + [280])
	CALL $105((($8 + [80]) + [24]), $2)
	CALL $105(($8 + [116]), $3)
	CALL $105(($8 + [128]), $4)
	*($8 + [144]) = *($8 + [416])
	CALL $105(($8 + [152]), $6)
	CALL $105(($8 + [164]), $7)
	*(($2 = (($8 + [224]) + [24]))) = $11
	*($8 + [224]) = $13
	*($8 + [240]) = (int_64)0
	*($8 + [176]) = *($8 + [268])
	*($8 + [180]) = *($8 + [264])
	*($8 + [232]) = *($9)
	*(($9 = CALL _Znwj([16]))) = $1
	*($9 + [8]) = $5
	$4 = ($9 + [16])
	*($2) = $4
	*(($8 + [244])) = $4
	*($8 + [240]) = $9
	CALL $27(($8 + [252]), ($8 + [80]))
	CALL $6(($8 + [448]), ($8 + [224]))
	$9 = *($8 + [448])
	CALL send_inline($9, (*($8 + [452]) - $9))
	$9 = *($8 + [448])
	if ( ($9 == 0) ){ goto $label$46 }
	*($8 + [452]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$46
	$9 = *($8 + [252])
	if ( ($9 == 0) ){ goto $label$47 }
	*(($8 + [256])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$47
	$9 = *($8 + [240])
	if ( ($9 == 0) ){ goto $label$48 }
	*(($8 + [244])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$48
	if ( (*($8 + [164]) & [1]) ){ goto $label$57 }
	if ( (*($8 + [152]) & [1]) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	CALL _ZdlPv(*(($8 + [172])))
	if ( ((*($8 + [152]) & [1]) == 0) ){ goto $label$55 }
	
.LABEL $label$56
	CALL _ZdlPv(*(($8 + [160])))
	$9 = [1]
	if ( ((*($8 + [128]) & [1]) == 0) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$9 = [1]
	if ( (*($8 + [128]) & [1]) ){ goto $label$53 }
	
.LABEL $label$54
	if ( (*($8 + [116]) & $9) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	CALL _ZdlPv(*(($8 + [136])))
	if ( ((*($8 + [116]) & $9) == 0) ){ goto $label$51 }
	
.LABEL $label$52
	CALL _ZdlPv(*(($8 + [124])))
	if ( (*($8 + [104]) & [1]) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((*($8 + [104]) & [1]) == 0) ){ goto $label$49 }
	
.LABEL $label$50
	CALL _ZdlPv(*(($8 + [112])))
	
.LABEL $label$49
	$1 = *($0)
	*($8 + [64]) = [8398]
	*($8 + [68]) = CALL $125([8398])
	*($8 + [8]) = *($8 + [64])
	$9 = CALL $3(($8 + [72]), ($8 + [8]))
	$5 = *($0)
	$13 = *($9)
	*($8 + [48]) = [8896]
	*($8 + [52]) = CALL $125([8896])
	*($8) = *($8 + [48])
	$0 = CALL $3(($8 + [56]), $8)
	*(($8 + [40])) = [0]
	*($8 + [32]) = (int_64)0
	$9 = CALL $125([8901])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$58 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$61 }
	*($8 + [32]) = ($9 << [1])
	$2 = (($8 + [32]) | [1])
	if ( $9 ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	$4 = (($9 + [16]) & [-16])
	$2 = CALL _Znwj($4)
	*($8 + [32]) = ($4 | [1])
	*($8 + [40]) = $2
	*($8 + [36]) = $9
	
.LABEL $label$60
	CALL memcpy($2, [8901], $9)
	
.LABEL $label$59
	*(($2 + $9)) = [0]
	$9 = ($8 + [40])
	*(($8 + [120])) = *($9)
	*($9) = [0]
	*($8 + [104]) = (int_64)50
	*($8 + [80]) = *($8 + [424])
	*($8 + [88]) = *($8 + [272])
	*($8 + [112]) = *($8 + [32])
	*($8 + [32]) = (int_64)0
	*($8 + [96]) = [1]
	$2 = CALL $105(($8 + [124]), $7)
	*($8 + [224]) = $5
	*($8 + [232]) = *($0)
	*(($9 = CALL _Znwj([16]))) = $1
	*($9 + [8]) = $13
	*((($8 + [224]) + [36])) = [0]
	$0 = ($9 + [16])
	*(($8 + [248])) = $0
	*(($8 + [244])) = $0
	*($8 + [240]) = $9
	*($8 + [252 align=4]) = (int_64)0
	$9 = *($8 + [112])
	$0 = ( *((($8 + [80]) + [36])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($0 + [25])
	$1 = (CASTING uint_64)(uint_32 $0)
	$0 = ($8 + [252])
	
.LOOP $label$62:
	$9 = ($9 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$62 }
	$2 = *($2)
	$2 = ( *(($8 + [128])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$9 = ($2 + $9)
	$1 = (CASTING uint_64)(uint_32 $2)
	
.LOOP $label$63:
	$9 = ($9 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$63 }
	if ( ($9 == 0) ){ goto $label$65 }
	CALL $4($0, $9)
	$2 = *(($8 + [256]))
	$9 = *(($8 + [252]))
	goto $label$64 
	
.LABEL $label$65
	$2 = [0]
	$9 = [0]
	
.LABEL $label$64
	*($8 + [452]) = $9
	*($8 + [448]) = $9
	*($8 + [456]) = $2
	*($8 + [432]) = ($8 + [448])
	*($8 + [440]) = ($8 + [80])
	CALL $28(($8 + [440]), ($8 + [432]))
	CALL $6(($8 + [448]), ($8 + [224]))
	$9 = *($8 + [448])
	CALL send_inline($9, (*($8 + [452]) - $9))
	$9 = *($8 + [448])
	if ( ($9 == 0) ){ goto $label$66 }
	*($8 + [452]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$66
	$9 = *($8 + [252])
	if ( ($9 == 0) ){ goto $label$67 }
	*(($8 + [256])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$67
	$9 = *($8 + [240])
	if ( ($9 == 0) ){ goto $label$68 }
	*(($8 + [244])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$68
	if ( ((*($8 + [124]) & [1]) == 0) ){ goto $label$69 }
	CALL _ZdlPv(*(($8 + [132])))
	
.LABEL $label$69
	if ( ((*(($8 + [112])) & [1]) == 0) ){ goto $label$70 }
	CALL _ZdlPv(*(($8 + [120])))
	
.LABEL $label$70
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$71 }
	CALL _ZdlPv(*(($8 + [40])))
	
.LABEL $label$71
	CALL $16((($8 + [336]) + [24]))
	CALL $29((($8 + [376]) + [24]))
	$global$0 = ($8 + [464])
	return (unreachable)
	
.LABEL $label$58
	CALL $104(($8 + [32]))
}

int_32 .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10304])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4157660949893873664)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10250])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10250])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $2(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9839])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9839])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $116($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9954])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $128($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [24]) = [0]
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72]) = [0]
	*($5 + [76]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [28])
	*($3 + [56]) = ($5 + [29])
	*($3 + [60]) = ($5 + [32])
	*($3 + [64]) = ($5 + [40])
	*($3 + [68]) = ($5 + [48])
	*($3 + [72]) = ($5 + [56])
	*($3 + [76]) = ($5 + [64])
	CALL $78(($3 + [40]), ($3 + [32]))
	*($5 + [80]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $15(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $131($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [72])))
	
.LABEL $label$10
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $63(*($1), *($0 + [12]))
	CALL $63(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $63(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9977])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9977])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	CALL $63(*($1), *($0 + [36]))
	$4 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9977])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = *($1)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($1 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($4 <= [257]), [9845])
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$4 }
	$4 = uint_32($4 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($2 + [4])
	
.LABEL $label$3
	CALL eosio_assert(($4 <= [8]), [9871])
	$1 = CALL $105(($3 + [32]), $1)
	$4 = CALL $105(($3 + [16]), $2)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$6 }
	if ( ((uint_32)*($1 + [4]) > (uint_32)[255]) ){ goto $label$5 }
	
.LABEL $label$6
	
.LOOP $label$7:
	CALL $111($1, [9901])
	$2 = *(($1 + [4]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$7 }
	if ( ($2 <= [256]) ){ goto $label$7 }
	
.LABEL $label$5
	$2 = *($3 + [16])
	if ( ((uint_32)( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ) > (uint_32)[6]) ){ goto $label$8 }
	$5 = ($4 + [4])
	
.LOOP $label$9:
	CALL $111($4, [9901])
	$2 = *($3 + [16])
	if ( (( *($5) ? uint_32($2 >> [1]) : ($2 & [1]) ) <= [7]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL $30($3, $1, $4)
	$2 = *($3)
	$5 = ($2 & [1])
	CALL $132($0, ( *($3 + [8]) ? ($3 | [1]) : $5 ), ( *($3 + [4]) ? uint_32($2 >> [1]) : $5 ))
	if ( (*($3) & [1]) ){ goto $label$14 }
	$2 = [1]
	if ( (*($3 + [16]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($3 + [8])))
	$2 = [1]
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3 + [32]) & $2) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( (*($3 + [32]) & $2) ){ goto $label$10 }
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$10
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($3 + [48])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL $81(($3 + [40]), $1, $2)
	$4 = *($3 + [44])
	if ( ($4 == 0) ){ goto $label$1 }
	$4 = CALL $105(($3 + [48]), ($4 + [32]))
	$5 = CALL $105(($3 + [64]), ($4 + [8]))
	CALL $18($3, $5, $4)
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$2
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$3
	if ( ((int_64)(((int_64)((int_64)*($2) ^ (int_64)*($3)) | (int_64)((int_64)*(($2 + [8])) ^ (int_64)*($3 + [8]))) == 0) == 0) ){ goto $label$4 }
	if ( ((int_64)(((int_64)((int_64)*($2 + [16]) ^ (int_64)*($3 + [16])) | (int_64)((int_64)*(($2 + [24])) ^ (int_64)*(($3 + [24])))) == 0) == 0) ){ goto $label$4 }
	*($0) = *($3 + [40])
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$1
	*($0 + [4]) = [0]
	*($0) = $1
	$global$0 = ($3 + [80])
}

int_32 .FUNC $58 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $128($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [112]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $69(($4 + [16]), ($4 + [112]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4)
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	$8 = *($4 + [72])
	$9 = *($4 + [64])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $9), (int_64 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $131($2)
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $59 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $128($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [88])) = (int_64)0
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [176]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $65(($4 + [24]), ($4 + [176]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [160]) + [8]))) = *($3)
	*($4 + [160]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [176]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [160])
	*($4 + [40]) = $0
	*($4 + [176]) = $0
	*($4 + [180]) = ($4 + [152])
	*($4 + [176]) = ($4 + [24])
	CALL $66(($4 + [176]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$14 }
	$2 = [1]
	if ( (*($4 + [140]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $131($2)
	$2 = [1]
	if ( ((*($4 + [140]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [148])))
	if ( ((*($4 + [128]) & $2) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( (*($4 + [128]) & $2) ){ goto $label$10 }
	
.LABEL $label$11
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($4 + [136])))
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [112])))
	if ( ((*($4 + [92]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($4 + [92]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [100])))
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [192])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [192])
	return $2
}

void .FUNC $50 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)-5915095046963593216, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $9(($2 + [8]), $4)
	CALL eosio_assert(((int_32)*($0 + [92]) == (int_32)($2 + [8])), [9903])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [9540])
	CALL eosio_assert(((int_32)*($0 + [88]) ^ (int_32)[1]), [8523])
	CALL eosio_assert(((*($0 + [72]) - *($0 + [68])) <= [1209600]), [9564])
	CALL require_auth(*($0 + [16]))
	CALL eosio_assert($4, [10403])
	CALL $51(($2 + [8]), $0)
	CALL $16(($2 + [32]))
	$global$0 = ($2 + [48])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($1 + [92])) == (int_32)$0), [10438])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10484])
	$3 = *($1)
	*($1 + [72]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [1209600])
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [10535])
	*(($4 = $2) + [24]) = [0]
	*($4 + [8]) = ($4 + [24])
	$5 = ($1 + [8])
	*($4 + [36]) = $5
	*($4 + [32]) = $1
	$6 = ($1 + [16])
	*($4 + [40]) = $6
	$7 = ($1 + [24])
	*($4 + [44]) = $7
	$8 = ($1 + [36])
	*($4 + [48]) = $8
	$9 = ($1 + [48])
	*($4 + [52]) = $9
	$10 = ($1 + [56])
	*($4 + [56]) = $10
	$11 = ($1 + [68])
	*($4 + [60]) = $11
	$12 = ($1 + [72])
	*($4 + [64]) = $12
	$13 = ($1 + [76])
	*($4 + [68]) = $13
	$14 = ($1 + [88])
	*($4 + [72]) = $14
	CALL $84(($4 + [32]), ($4 + [8]))
	$15 = *($4 + [24])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$2 = CALL $128($15)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($15 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + $15)
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = $5
	*($4 + [40]) = $6
	*($4 + [44]) = $7
	*($4 + [48]) = $8
	*($4 + [52]) = $9
	*($4 + [56]) = $10
	*($4 + [60]) = $11
	*($4 + [64]) = $12
	*($4 + [68]) = $13
	*($4 + [72]) = $14
	*($4 + [32]) = $1
	CALL $85(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [96]), (int_64)0, $2, $15)
	if ( ((uint_32)$15 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$3 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $131($2)
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [80])
}

void .FUNC $52 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	CALL require_auth(*($0))
}

void .FUNC $53 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4)
{
	CALL require_auth(*($0))
}

void .FUNC $54 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9839])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9839])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $56 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $128($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [64]) = ($3 + $2)
	*($4 + [56]) = $3
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [9977])
	CALL memcpy(($4 + [72]), $3, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [9977])
	CALL memcpy((($4 + [72]) + [8]), ($3 + [8]), [8])
	CALL eosio_assert(((int_32)($2 & [-4]) != (int_32)[16]), [9977])
	CALL memcpy((($4 + [72]) + [16]), ($3 + [16]), [4])
	*($4 + [60]) = ($3 + [20])
	CALL $63(($4 + [56]), (($4 + [72]) + [20]))
	*(($5 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($5)
	*($4 + [112]) = *($4 + [8])
	$5 = *($6)
	*((($4 + [128]) + [8])) = $5
	*((($4 + [24]) + [24])) = $5
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $64(($4 + [128]), ($4 + [72]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$7 }
	$3 = [1]
	if ( (*($4 + [92]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $131($3)
	$3 = [1]
	if ( ((*($4 + [92]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [100])))
	$global$0 = ($4 + [144])
	return $3
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return $3
}

int_32 .FUNC $57 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $128($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9977])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $131($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $116 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $117 ()
{
	return [10600]
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $125($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $107($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [10438])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10484])
	$8 = ($1 + [32])
	$9 = CALL $105(($5 + [16]), $8)
	$6 = ($1 + [8])
	$7 = CALL $105(($5 + [48]), $6)
	$5 = $4
	CALL $18(($5 + [80]), $7, $9)
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$1
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$2
	*((($5 + [16]) + [24])) = *((($5 + [80]) + [24]))
	*((($5 + [16]) + [16])) = *((($5 + [80]) + [16]))
	*($5 + [24]) = *($5 + [88])
	*($5 + [16]) = *($5 + [80])
	$10 = *($1)
	CALL $106($6, (*(*($3) + [4]) + [24]))
	$7 = *(*($3) + [4])
	*($1 + [24]) = *($7 + [48])
	CALL $106($8, ($7 + [56]))
	$9 = ($1 + [44])
	CALL $106($9, (*(*($3) + [4]) + [36]))
	CALL eosio_assert(((int_64)$10 == (int_64)*($1)), [10535])
	*($5 + [112]) = [0]
	*($5 + [48]) = ($5 + [112])
	*($5 + [84]) = $6
	*($5 + [80]) = $1
	$11 = ($1 + [24])
	*($5 + [88]) = $11
	*($5 + [92]) = $8
	*($5 + [96]) = $9
	CALL $83(($5 + [80]), ($5 + [48]))
	$7 = *($5 + [112])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$3 = CALL $128($7)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [9839])
	CALL memcpy($3, $1, [8])
	*($5 + [4]) = ($3 + [8])
	CALL $34($5, $6)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($5 + [4]), $11, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL $34($5, $8)
	CALL $34($5, $9)
	CALL db_update_i64(*($1 + [60]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $131($3)
	
.LABEL $label$5
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$7 = CALL $105(($5 + [112]), $8)
	$3 = CALL $105(($5 + [48]), $6)
	CALL $18(($5 + [80]), $3, $7)
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$7
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	if ( (CALL $124(($5 + [16]), ($5 + [80]), [32]) == 0) ){ goto $label$9 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$10 }
	*(($5 + [72])) = (int_64)0
	*(($5 + [64])) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [48]) = (int_64)0
	$1 = CALL db_idx256_find_primary(*($0), *($0 + [8]), (int_64)-2044374312540962816, ($5 + [48]), [2], $10)
	*($3) = $1
	
.LABEL $label$10
	CALL db_idx256_update($1, $2, ($5 + [80]), [2])
	
.LABEL $label$9
	$global$0 = ($5 + [128])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $107($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $124(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $125($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $107($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $118 (int_32 $0)
{
}

int_32 .FUNC $119 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [12] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $121($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $121($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $121($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $121($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19024]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $121($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $121($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $121($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [52])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [40])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	*($2 + [15]) = *($4 + [16])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [9839])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($0 + [4]), ($4 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $34(*($1), ($4 + [32]))
	CALL $34(*($1), ($4 + [44]))
	$global$0 = ($2 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)-5915097261808812033) ){ goto $label$11 }
	if ( ((int_64)$2 > (int_64)-2507766120631500801) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-5915097261808812032) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-4992121830231535104) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4301633847173121024) ){ goto $label$1 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [1]
	*($3 + [8]) = *($3 + [160])
	CALL $56($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 <= (int_64)-7769090153668512481) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-7769090153668512480) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-6605731284027844448) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-5915324541735112704) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [2]
	*($3 + [32]) = *($3 + [136])
	CALL $57($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)-2507766120631500800) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)6604081059879452672) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)4453191014402899968) ){ goto $label$1 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [3]
	*($3) = *($3 + [168])
	CALL $57($1, $1, $3)
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-8279485479513298944) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-8279485479366819840) ){ goto $label$1 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [4]
	*($3 + [64]) = *($3 + [104])
	CALL $58($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [132]) = [0]
	*($3 + [128]) = [5]
	*($3 + [40]) = *($3 + [128])
	CALL $59($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [124]) = [0]
	*($3 + [120]) = [6]
	*($3 + [48]) = *($3 + [120])
	CALL $57($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [92]) = [0]
	*($3 + [88]) = [7]
	*($3 + [80]) = *($3 + [88])
	CALL $57($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [148]) = [0]
	*($3 + [144]) = [8]
	*($3 + [24]) = *($3 + [144])
	CALL $60($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [116]) = [0]
	*($3 + [112]) = [9]
	*($3 + [56]) = *($3 + [112])
	CALL $61($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [156]) = [0]
	*($3 + [152]) = [10]
	*($3 + [16]) = *($3 + [152])
	CALL $57($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [100]) = [0]
	*($3 + [96]) = [11]
	*($3 + [72]) = *($3 + [96])
	CALL $62($1, $1, ($3 + [72]))
	
.LABEL $label$1
	CALL $118([0])
	$global$0 = ($3 + [176])
}

void .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $107($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10304])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-2044374312540962816)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10250])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10250])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $20(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9954])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $128($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([72])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9977])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $63(($3 + [32]), ($5 + [8]))
	CALL eosio_assert(((uint_32)(*($3 + [40]) - *($3 + [36])) > (uint_32)[7]), [9977])
	CALL memcpy(($5 + [24]), *($3 + [36]), [8])
	*($3 + [36]) = (*($3 + [36]) + [8])
	CALL $63(($3 + [32]), ($5 + [32]))
	CALL $63(($3 + [32]), ($5 + [44]))
	*($5 + [64]) = [-1]
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $23(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $131($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [44]) & [1]) ){ goto $label$14 }
	if ( (*($1 + [32]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [52])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [40])))
	if ( (*($1 + [8]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $116($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $82(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$5 = ($1 + [8])
	CALL $106($5, *($3 + [4]))
	$6 = ($1 + [32])
	CALL $106($6, *($3 + [8]))
	*($1 + [24]) = *(*($3 + [12]))
	*(($3 = $2) + [48]) = [0]
	*($3 + [64]) = ($3 + [48])
	*($3 + [20]) = $5
	*($3 + [16]) = $1
	$7 = ($1 + [24])
	*($3 + [24]) = $7
	*($3 + [28]) = $6
	$8 = ($1 + [44])
	*($3 + [32]) = $8
	CALL $83(($3 + [16]), ($3 + [64]))
	$9 = *($3 + [48])
	if ( ($9 <= [513]) ){ goto $label$2 }
	$2 = CALL $128($9)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($9 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3) = $2
	*($3 + [8]) = ($2 + $9)
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [9839])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $34($3, $5)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($3 + [4]), $7, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $34($3, $6)
	CALL $34($3, $8)
	$10 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)-2044374312540962816, *(*($0 + [8])), $10, $2, $9)
	if ( ($9 <= [513]) ){ goto $label$3 }
	CALL $131($2)
	
.LABEL $label$3
	if ( (uint_64)($10 <= *($4 + [16])) ){ goto $label$4 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$10 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	$9 = CALL $105(($3 + [48]), $6)
	$2 = CALL $105(($3 + [64]), $5)
	CALL $18(($3 + [16]), $2, $9)
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$5
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$6
	*($1 + [64]) = CALL db_idx256_store($10, (int_64)-2044374312540962816, $11, $12, ($3 + [16]), [2])
	$global$0 = ($3 + [80])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$4 = *($0)
	$5 = ($1 + [24])
	CALL $106($5, *($3 + [8]))
	*($1 + [48]) = *(*($3 + [12]))
	$6 = ($1 + [56])
	CALL $106($6, *($3 + [16]))
	$7 = ($1 + [36])
	CALL $106($7, *($3 + [20]))
	*($1 + [68]) = *(*($3 + [28]))
	*($1 + [16]) = *(*($3 + [24]))
	*($1 + [72]) = *(*($3 + [32]))
	$8 = ($1 + [76])
	CALL $106($8, *($3 + [36]))
	*($1 + [88]) = [0]
	*(($3 = $2) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	$9 = ($1 + [8])
	*($3 + [36]) = $9
	*($3 + [32]) = $1
	$10 = ($1 + [16])
	*($3 + [40]) = $10
	*($3 + [44]) = $5
	*($3 + [48]) = $7
	$11 = ($1 + [48])
	*($3 + [52]) = $11
	*($3 + [56]) = $6
	$12 = ($1 + [68])
	*($3 + [60]) = $12
	$13 = ($1 + [72])
	*($3 + [64]) = $13
	*($3 + [68]) = $8
	$14 = ($1 + [88])
	*($3 + [72]) = $14
	CALL $84(($3 + [32]), ($3 + [8]))
	$15 = *($3 + [24])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$2 = CALL $128($15)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($15 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $15)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $9
	*($3 + [32]) = $1
	*($3 + [40]) = $10
	*($3 + [44]) = $5
	*($3 + [48]) = $7
	*($3 + [52]) = $11
	*($3 + [56]) = $6
	*($3 + [60]) = $12
	*($3 + [64]) = $13
	*($3 + [68]) = $8
	*($3 + [72]) = $14
	CALL $85(($3 + [32]), ($3 + [24]))
	$16 = *($1)
	*($1 + [96]) = CALL db_store_i64(*($4 + [8]), (int_64)-5915095046963593216, *(*($0 + [8])), $16, $2, $15)
	if ( ((uint_32)$15 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$16 >= (uint_64)*($4 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $131($2)
	if ( (uint_64)($16 <= *($4 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$16 + (int_64)1) : ((uint_64)$16 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

int_32 .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [96]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10304])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5915095046963593216)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10250])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10250])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $9(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [24])
	$4 = *(($1 + [28]))
	*($2 + [16]) = [24]
	$4 = ( $4 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($4 + [24])
	$5 = (CASTING uint_64)(uint_32 $4)
	*($2 + [24]) = ($2 + [16])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2 + [16]) = $3
	*($2) = $1
	CALL $86($2, ($2 + [24]))
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $4($0, $3)
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$3 = [0]
	
.LABEL $label$2
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = $4
	*($2 + [16]) = $2
	*($2 + [24]) = $1
	CALL $87(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [32])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $116($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $77(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $110($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9977])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [8]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1 + [24])
	$4 = *($1 + [16])
	$5 = *($1 + [8])
	$6 = *($1)
	$7 = CALL $105(($2 + [16]), ($1 + [32]))
	$1 = CALL $105($2, ($1 + [44]))
	$0 = *($0 + [4])
	$8 = *($0 + [4])
	$9 = (*($0) + int_32($8 >> [1]))
	$0 = *($0)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($9) + $0))
	
.LABEL $label$1
	$8 = CALL $105(($2 + [32]), $1)
	$4 = CALL $105(($2 + [48]), $7)
	CALL void $9((int_32 $6), (int_64 $5), (int_64 ((int_32)($4 & [255]) != (int_32)[0])), (int_32 $3), (int_64 $4), (int_32 $8), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($4 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($7) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($7) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($7 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	CALL $63(*($1), ($3 + [8]))
	CALL $63(*($1), ($3 + [20]))
	CALL $63(*($1), ($3 + [32]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy(($3 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $63(*($1), ($3 + [56]))
	CALL $63(*($1), ($3 + [68]))
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $105($2, ($1 + [20]))
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$6 = CALL $105(($2 + [16]), $1)
	CALL void $7((int_32 $5), (int_64 $4), (int_64 $3), (int_32 $6), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9977])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4 + [16]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy(($4 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $63(*($1), ($4 + [32]))
	CALL $63(*($1), ($4 + [44]))
	$global$0 = ($2 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [80])
	$global$0 = $2
	$1 = CALL $105($2, ($1 + [68]))
	$6 = CALL $105(($2 + [16]), ($1 + [56]))
	$5 = CALL $105(($2 + [32]), ($1 + [32]))
	$4 = CALL $105(($2 + [48]), ($1 + [20]))
	$3 = CALL $105(($2 + [64]), ($1 + [8]))
	CALL $93($0, *($1), $3, $4, $5, *($1 + [48]), $6, $1)
	if ( (*($1) & [1]) ){ goto $label$9 }
	if ( (*($6) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	$1 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($5) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($4) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [80])
}

int_32 .FUNC $61 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $128($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = [0]
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $67(($4 + [16]), ($4 + [144]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4)
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [16])
	CALL $68(($4 + [144]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	$2 = [1]
	if ( (*($4 + [108]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $131($2)
	$2 = [1]
	if ( ((*($4 + [108]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [116])))
	if ( (*($4 + [96]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($4 + [96]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [104])))
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $60 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $128($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = [0]
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9977])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[8]), [9977])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [4])
	*(($4 + [20])) = ($2 + [12])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *($4 + [40])
	$0 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $131($2)
	
.LABEL $label$5
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $76($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $108($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $108($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $104($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $62 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [168]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $128($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [192]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $70(($4 + [16]), ($4 + [192]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [176]) + [8]))) = *($3)
	*($4 + [176]) = *($4)
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [176])
	*($4 + [32]) = $0
	*($4 + [192]) = $0
	*($4 + [196]) = ($4 + [168])
	*($4 + [192]) = ($4 + [16])
	CALL $71(($4 + [192]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$14 }
	$2 = [1]
	if ( (*($4 + [148]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $131($2)
	$2 = [1]
	if ( ((*($4 + [148]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [156])))
	if ( ((*($4 + [136]) & $2) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( (*($4 + [136]) & $2) ){ goto $label$10 }
	
.LABEL $label$11
	$2 = [1]
	if ( (*($4 + [112]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($4 + [144])))
	$2 = [1]
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [120])))
	if ( ((*($4 + [100]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($4 + [100]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [108])))
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [208])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [208])
	return $2
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $126(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10596])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $126(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $131($0)
	
.LABEL $label$1
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $104 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $89 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [68]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10304])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4992121821513104384)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10250])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10250])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $45(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $34(*($1), (*($0) + [36]))
	$0 = *($0)
	CALL $34(*($1), ($0 + [48]))
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($2 + [4]), ($0 + [64]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $34(*($1), ($0 + [72]))
	CALL $34(*($1), ($0 + [84]))
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [9839])
	CALL memcpy(*($2 + [4]), ($0 + [96]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[3]), [9839])
	CALL memcpy(*($1 + [4]), ($0 + [100]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $34(*($1), ($4 + [24]))
	*($2 + [8]) = $4
	CALL $88(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = *($0 + [36])
	$0 = *($0)
	$3 = (CASTING uint_64)(uint_32 ( *(($0 + [40])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	$2 = *($1)
	$1 = *($2)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$4 = *(($0 + [36]))
	$4 = ( *(($0 + [40])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$2 }
	$1 = ($4 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($0 + [48])
	$3 = (CASTING uint_64)(uint_32 ( *(($0 + [52])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$4 = *(($0 + [48]))
	$4 = ( *(($0 + [52])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$4 }
	$1 = ($4 + $1)
	*($2) = $1
	
.LABEL $label$4
	$1 = ($1 + [8])
	*($2) = $1
	$4 = *($0 + [72])
	$3 = (CASTING uint_64)(uint_32 ( *(($0 + [76])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$4 = *(($0 + [72]))
	$4 = ( *(($0 + [76])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$6 }
	$1 = ($4 + $1)
	*($2) = $1
	
.LABEL $label$6
	$4 = *($0 + [84])
	$3 = (CASTING uint_64)(uint_32 ( *(($0 + [88])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$7 }
	*($2) = $1
	$0 = *(($0 + [84]))
	$0 = ( *(($0 + [88])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$8 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$8
	*($2) = ($1 + [8])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $34(*($1), *($0 + [12]))
	CALL $34(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $34(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9839])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9839])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	CALL $34(*($1), *($0 + [36]))
	$1 = *($1)
	*($2 + [15]) = *(*($0 + [40]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [9839])
	CALL memcpy(*($1 + [4]), ($2 + [15]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [24])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$1 = ($1 + [8])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$6
	$1 = ($1 + [8])
	*($2) = $1
	$3 = *($0)
	$0 = *($0 + [36])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$8 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$8
	*($2) = ($1 + [1])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [8])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [8])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$3 = *($0)
	$0 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

int_32 .FUNC $82 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [52])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [40])))
	if ( (*($1 + [8]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [40]) = (int_64)0
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [16])) = *(($2 + [16]))
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx256_lowerbound(*($2), *($2 + [8]), (int_64)-2044374312540962816, $3, [2], ($3 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [40])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$7), [9903])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $20($7, CALL $fimport$0(*($7), *($7 + [8]), (int_64)-2044374312540962816, $6))
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$7), [9903])
	
.LABEL $label$2
	*(($4 + [64])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [48])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $34(*($1), *($0 + [8]))
	$4 = *($1)
	*($2 + [14]) = *(*($0 + [12]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9839])
	CALL memcpy(*($4 + [4]), ($2 + [14]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9839])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9839])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $34(*($1), *($0 + [36]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9839])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9839])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9839])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9839])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9839])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $63(*($1), ($4 + [24]))
	*($2 + [8]) = $4
	CALL $94(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	$7 = CALL $105($2, ($1 + [84]))
	$6 = CALL $105(($2 + [16]), ($1 + [72]))
	$5 = CALL $105(($2 + [32]), ($1 + [48]))
	$4 = CALL $105(($2 + [48]), ($1 + [36]))
	$3 = CALL $105(($2 + [64]), ($1 + [24]))
	CALL $95($0, *($1), *($1 + [8]), *($1 + [16]), $3, $4, $5, *($1 + [64]), $6, $7, *($1 + [96]), *($1 + [100]))
	if ( (*($7) & [1]) ){ goto $label$9 }
	if ( (*($6) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	$1 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($5) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($4) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [80])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10194])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $4($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9977])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $77 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [76]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [84])))
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [64])))
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [44])))
	if ( (*($1 + [24]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9977])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9977])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $39 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [160])
	$global$0 = $2
	*($2 + [104]) = $1
	CALL eosio_assert(((uint_64)(CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$2() / (uint_64)(int_64)1000000)) / (uint_32)[1800])) > (uint_64)$1), [9085])
	$3 = [0]
	*(($2 + [96])) = [0]
	*(($2 + [102])) = [0]
	*($2 + [80]) = (int_64)-1
	*($2 + [88]) = (int_64)0
	*($2 + [100]) = [0]
	$1 = *($0)
	*($2 + [64]) = $1
	*($2 + [72]) = $1
	*($2 + [56]) = ($2 + [64])
	CALL $40(($2 + [8]), ($2 + [56]), ($2 + [104]))
	$4 = *($2 + [12])
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((int_64)*($2 + [104]) != (int_64)*($4 + [44])) ){ goto $label$2 }
	$1 = *($2 + [8])
	*($2 + [48]) = $1
	$3 = ((uint_64)$1 > (uint_64)(int_64)4294967295)
	goto $label$1 
	
.LABEL $label$3
	*($2 + [52]) = [0]
	*($2 + [48]) = ($2 + [56])
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	*($2 + [52]) = [0]
	*($2 + [48]) = ($2 + [56])
	
.LABEL $label$1
	CALL eosio_assert($3, [9115])
	$3 = [0]
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	$1 = (int_64)0
	*($2 + [32]) = (int_64)0
	$5 = *($0)
	*($2 + [8]) = $5
	*($2 + [16]) = $5
	$4 = CALL db_find_i64($5, $5, (int_64)-6147556259945233408, *($2 + [104]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $41(($2 + [8]), $4) + [24]) == (int_32)($2 + [8])), [9903])
	goto $label$4 
	
.LABEL $label$5
	$3 = [1]
	
.LABEL $label$4
	CALL eosio_assert($3, [9148])
	$6 = (int_64)0
	$3 = *($2 + [52])
	if ( ($3 == 0) ){ goto $label$6 }
	$6 = (int_64)0
	$1 = (int_64)0
	
.LOOP $label$7:
	if ( ((int_64)*($2 + [104]) != (int_64)*($3 + [44])) ){ goto $label$6 }
	$5 = *($3 + [16])
	if ( (*($3 + [49]) == 0) ){ goto $label$8 }
	if ( (*($3 + [48]) == 0) ){ goto $label$8 }
	$6 = ((int_64)*($3 + [24]) + (int_64)$6)
	
.LABEL $label$8
	$1 = ((int_64)$5 + (int_64)$1)
	CALL $42(($2 + [48]))
	$3 = *($2 + [52])
	if ( $3 ){ goto $label$7 }
	
.LABEL $label$6
	$5 = *($0)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$8()), [10352])
	*(($3 = CALL _Znwj([40])) + [24]) = ($2 + [8])
	*($3 + [8]) = $1
	*($3 + [16]) = $6
	*($3) = *($2 + [104])
	CALL eosio_assert([1], [9839])
	CALL memcpy(($2 + [128]), $3, [8])
	CALL eosio_assert([1], [9839])
	CALL memcpy((($2 + [128]) | [8]), ($3 + [8]), [8])
	CALL eosio_assert([1], [9839])
	CALL memcpy((($2 + [128]) + [16]), ($3 + [16]), [8])
	$1 = *($3)
	$4 = CALL db_store_i64(*((($2 + [8]) + [8])), (int_64)-6147556259945233408, $5, $1, ($2 + [128]), [24])
	*($3 + [28]) = $4
	$0 = (($2 + [8]) + [16])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$9 }
	*($0) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($2 + [120]) = $3
	$1 = *($3)
	*($2 + [128]) = $1
	*($2 + [116]) = $4
	$7 = ($2 + [36])
	$0 = *($7)
	if ( ((uint_32)$0 >= (uint_32)*(($2 + [40]))) ){ goto $label$12 }
	*($0 + [8]) = $1
	*($0 + [16]) = $4
	*($2 + [120]) = [0]
	*($0) = $3
	*($7) = ($0 + [24])
	$3 = *($2 + [120])
	*($2 + [120]) = [0]
	if ( $3 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $43(($2 + [32]), ($2 + [120]), ($2 + [128]), ($2 + [116]))
	$3 = *($2 + [120])
	*($2 + [120]) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$10
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$13 }
	$7 = ($2 + [36])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$15 }
	
.LOOP $label$16:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$17 }
	CALL _ZdlPv($0)
	
.LABEL $label$17
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$16 }
	$3 = *(($2 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$3 = $4
	
.LABEL $label$14
	*($7) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$13
	$4 = *($2 + [88])
	if ( ($4 == 0) ){ goto $label$18 }
	$7 = ($2 + [92])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$20 }
	
.LOOP $label$21:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$22 }
	if ( ((*($0 + [52]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($0 + [60])))
	
.LABEL $label$23
	CALL _ZdlPv($0)
	
.LABEL $label$22
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$21 }
	$3 = *(($2 + [88]))
	goto $label$19 
	
.LABEL $label$20
	$3 = $4
	
.LABEL $label$19
	*($7) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$18
	$global$0 = ($2 + [160])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	$0 = *($0)
	*($2 + [15]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9839])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9839])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($1 + [92])) == (int_32)$0), [10438])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10484])
	*($1 + [88]) = [1]
	$3 = *($1)
	CALL eosio_assert([1], [10535])
	*(($4 = $2) + [24]) = [0]
	*($4 + [8]) = ($4 + [24])
	$5 = ($1 + [8])
	*($4 + [36]) = $5
	*($4 + [32]) = $1
	$6 = ($1 + [16])
	*($4 + [40]) = $6
	$7 = ($1 + [24])
	*($4 + [44]) = $7
	$8 = ($1 + [36])
	*($4 + [48]) = $8
	$9 = ($1 + [48])
	*($4 + [52]) = $9
	$10 = ($1 + [56])
	*($4 + [56]) = $10
	$11 = ($1 + [68])
	*($4 + [60]) = $11
	$12 = ($1 + [72])
	*($4 + [64]) = $12
	$13 = ($1 + [76])
	*($4 + [68]) = $13
	$14 = ($1 + [88])
	*($4 + [72]) = $14
	CALL $84(($4 + [32]), ($4 + [8]))
	$15 = *($4 + [24])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$2 = CALL $128($15)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($15 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + $15)
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = $5
	*($4 + [40]) = $6
	*($4 + [44]) = $7
	*($4 + [48]) = $8
	*($4 + [52]) = $9
	*($4 + [56]) = $10
	*($4 + [60]) = $11
	*($4 + [64]) = $12
	*($4 + [68]) = $13
	*($4 + [72]) = $14
	*($4 + [32]) = $1
	CALL $85(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [96]), (int_64)0, $2, $15)
	if ( ((uint_32)$15 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$3 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $131($2)
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [80])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $63(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9977])
	CALL memcpy(($2 + [14]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [14]) != (int_32)[0])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9977])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9977])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9977])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $63(*($1), *($0 + [36]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [80]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10304])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-2507752492950880256)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10250])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10250])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $13(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-4992121821513104384, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $45($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $89(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [10198])
	*($1) = *(($6 + [16]))
	$6 = *(*($5 + [4]) + [4])
	*($1 + [8]) = *($6 + [40])
	*($1 + [16]) = *($6 + [32])
	$7 = (int_64)0
	if ( (*(*($5 + [8])) == 0) ){ goto $label$3 }
	$7 = (int_64)0
	if ( (*($6 + [29]) == 0) ){ goto $label$3 }
	$7 = (int_64))(*(*($5 + [12])) - *(*($5 + [16])))
	
.LABEL $label$3
	$8 = ($1 + [16])
	*($1 + [24]) = $7
	*($1 + [32]) = *(*($5 + [20]))
	*($1 + [40]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$7 = CALL current_time()
	*($1 + [48]) = *(*(($5 + [8])))
	$6 = *(*(($5 + [4])) + [4])
	*($1 + [49]) = *($6 + [29])
	*($1 + [44]) = ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) / (uint_32)[1800])
	*($1 + [50]) = *(*($5 + [24]))
	$9 = ($1 + [52])
	CALL $106($9, ($6 + [64]))
	$5 = *($1 + [52])
	$6 = ( *(($1 + [56])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [51])
	$7 = (CASTING uint_64)(uint_32 $6)
	$10 = ($1 + [50])
	$11 = ($1 + [49])
	$12 = ($1 + [48])
	$13 = ($1 + [44])
	$14 = ($1 + [40])
	$15 = ($1 + [32])
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $128($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $8
	*($3 + [44]) = ($1 + [24])
	*($3 + [48]) = $15
	*($3 + [52]) = $14
	*($3 + [56]) = $13
	*($3 + [60]) = $12
	*($3 + [64]) = $11
	*($3 + [68]) = $10
	*($3 + [72]) = $9
	CALL $90(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-4992121821513104384, *(*($0 + [8])), $7, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL $131($6)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$8 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$5 = ($4 + [8])
	$7 = *($5)
	$6 = *(($0 + [8]))
	$16 = *($6)
	$17 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [72]) = CALL db_idx64_store($7, (int_64)-4992121821513104384, $16, $17, ($3 + [32]))
	$7 = *($6)
	$16 = *($5)
	$17 = *($1)
	*($3 + [32]) = *(($1 + [44]))
	*(($1 + [76])) = CALL db_idx64_store($16, (int_64)-4992121821513104383, $7, $17, ($3 + [32]))
	$7 = *($6)
	$16 = *($5)
	$17 = *($1)
	*($3 + [32]) = *(($1 + [32]))
	*(($1 + [80])) = CALL db_idx64_store($16, (int_64)-4992121821513104382, $7, $17, ($3 + [32]))
	$global$0 = ($3 + [80])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $116($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [60])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($6 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, ( $7 ? ($1 + [1]) : $5 ), $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $112($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $104($0)
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	float_32 $7
	float_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_32 $20
	int_32 $21
	$2 = ($global$0 - [416])
	$global$0 = $2
	*($2 + [376]) = $1
	$3 = [0]
	*((($2 + [336]) + [32])) = [0]
	*($2 + [352]) = (int_64)-1
	*($2 + [360]) = (int_64)0
	$4 = *($0)
	*($2 + [336]) = $4
	*($2 + [344]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)-5915095046963593216, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $9(($2 + [336]), $6)
	CALL eosio_assert(((int_32)*($5 + [92]) == (int_32)($2 + [336])), [9903])
	
.LABEL $label$1
	*($2 + [332]) = $5
	*($2 + [328]) = ($2 + [336])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8482])
	$4 = CALL current_time()
	CALL eosio_assert((*(*($2 + [332]) + [72]) <= (CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000))), [8921])
	*((($2 + [288]) + [32])) = [0]
	*($2 + [304]) = (int_64)-1
	$4 = *($0)
	*($2 + [288]) = $4
	$1 = *($2 + [376])
	*($2 + [296]) = $1
	*($2 + [312]) = (int_64)0
	$5 = CALL db_lowerbound_i64($4, $1, (int_64)-2507752492950880256, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $13(($2 + [288]), $5)
	
.LABEL $label$2
	*($2 + [284]) = $3
	$6 = [0]
	*($2 + [280]) = ($2 + [288])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8951])
	*($2 + [272]) = (int_64)0
	*($2 + [264]) = (int_64)0
	$5 = *($2 + [284])
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((int_64)*($5 + [8]) != (int_64)*($2 + [376])) ){ goto $label$3 }
	$3 = $5
	
.LOOP $label$4:
	$4 = *($3 + [32])
	if ( (*($3 + [28]) == 0) ){ goto $label$6 }
	*($2 + [272]) = ((int_64)*($2 + [272]) + (int_64)$4)
	goto $label$5 
	
.LABEL $label$6
	*($2 + [264]) = ((int_64)*($2 + [264]) + (int_64)$4)
	
.LABEL $label$5
	$3 = [0]
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [10016])
	$5 = CALL db_next_i64(*(*($2 + [284]) + [80]), ($2 + [216]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $13(*($2 + [280]), $5)
	
.LABEL $label$7
	*($2 + [284]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	$5 = $3
	if ( ((int_64)*($3 + [8]) == (int_64)*($2 + [376])) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = CALL db_lowerbound_i64(*($2 + [288]), *(($2 + [296])), (int_64)-2507752492950880256, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $13(($2 + [288]), $3)
	
.LABEL $label$8
	*($2 + [284]) = $6
	*($2 + [280]) = ($2 + [288])
	*($2 + [263]) = [0]
	*($2 + [262]) = [0]
	$1 = *($2 + [264])
	$7 = (CASTING float_32)(uint_64 ((int_64)$1 + (int_64)$4))
	$4 = *($2 + [272])
	$8 = ((float_32)(CASTING float_32)(uint_64 $4) / (float_32)$7)
	if ( (((int_32)((float_32)$8 >= (float_32)(float_32)0.5) ^ (int_32)[1]) == 0) ){ goto $label$10 }
	$4 = (int_64))($1 - $4)
	goto $label$9 
	
.LABEL $label$10
	*($2 + [263]) = [1]
	if ( ((float_32)$8 != (float_32)(float_32)0.5) ){ goto $label$11 }
	*($2 + [262]) = [1]
	
.LABEL $label$11
	$4 = (int_64))($4 - $1)
	
.LABEL $label$9
	$7 = ((float_32)(CASTING float_32)(uint_64 $4) / (float_32)$7)
	CALL eosio_assert((((float_32)$7 >= (float_32)(float_32)0) & ((float_32)$7 <= (float_32)(float_32)1)), [8979])
	*((($2 + [216]) + [32])) = [0]
	*(($2 + [254])) = [0]
	*($2 + [232]) = (int_64)-1
	*($2 + [240]) = (int_64)0
	*($2 + [252]) = [0]
	$4 = *($0)
	*($2 + [216]) = $4
	*($2 + [224]) = $4
	*((($2 + [176]) + [32])) = [0]
	*($2 + [184]) = $4
	*($2 + [176]) = $4
	*($2 + [192]) = (int_64)-1
	*($2 + [200]) = (int_64)0
	*($2 + [212]) = [0]
	if ( (*($2 + [284]) == 0) ){ goto $label$12 }
	if ( (*($2 + [262]) & [255]) ){ goto $label$12 }
	$7 = ((float_32)$7 * (float_32)(float_32)1814400)
	if ( (((float_32)$7 < (float_32)(float_32)4294967296) & ((float_32)$7 >= (float_32)(float_32)0)) ){ goto $label$14 }
	$9 = [0]
	goto $label$13 
	
.LABEL $label$14
	$9 = (CASTING uint_32)(float_32 $7)
	
.LABEL $label$13
	$10 = (($2 + [128]) + [28])
	$11 = (($2 + [64]) + [20])
	$12 = (($2 + [64]) + [16])
	$13 = (($2 + [64]) + [8])
	$14 = (($2 + [128]) + [32])
	$15 = (($2 + [216]) + [24])
	$16 = (($2 + [128]) + [12])
	$17 = ($2 + [164])
	
.LOOP $label$15:
	$3 = [0]
	if ( (*($2 + [263]) == 0) ){ goto $label$16 }
	$3 = *($2 + [284])
	if ( (*($3 + [29]) == 0) ){ goto $label$20 }
	$4 = *($3 + [56])
	$6 = *((($2 + [176]) + [28]))
	$18 = *((($2 + [176]) + [24]))
	if ( ((int_32)$18 == (int_32)$6) ){ goto $label$18 }
	
.LOOP $label$21:
	$3 = ($6 + [-24])
	$5 = *($3)
	if ( ((int_64)*($5) == (int_64)$4) ){ goto $label$19 }
	$6 = $3
	if ( ((int_32)$18 != (int_32)$3) ){ goto $label$21 }
	goto $label$18 
	
.LABEL $label$20
	$3 = [1]
	goto $label$16 
	
.LABEL $label$19
	if ( ((int_32)$18 == (int_32)$6) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($2 + [176])), [9903])
	goto $label$17 
	
.LABEL $label$18
	$5 = [0]
	$3 = CALL db_find_i64(*($2 + [176]), *((($2 + [176]) + [8])), (int_64)-4157660949893873664, $4)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$17 }
	$5 = CALL $2(($2 + [176]), $3)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($2 + [176])), [9903])
	
.LABEL $label$17
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [10403])
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($2 + [176])), [10438])
	CALL eosio_assert(((int_64)*($2 + [176]) == (int_64)CALL $fimport$8()), [10484])
	$3 = ($5 + [8])
	*($2 + [384]) = *($3)
	$4 = *($5)
	*($5 + [28]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$4 == (int_64)*($5)), [10535])
	*((($2 + [400]) + [8])) = $14
	*($2 + [404]) = ($2 + [128])
	*($2 + [400]) = ($2 + [128])
	*($2 + [392]) = ($2 + [400])
	*($13) = ($5 + [16])
	*((($2 + [64]) + [12])) = ($5 + [24])
	*($12) = ($5 + [28])
	*($2 + [68]) = $3
	*($2 + [64]) = $5
	CALL $11(($2 + [64]), ($2 + [392]))
	CALL db_update_i64(*($5 + [36]), (int_64)0, ($2 + [128]), [32])
	$6 = (($2 + [176]) + [16])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$22 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$22
	*($2 + [64]) = *($3)
	if ( (CALL $124(($2 + [384]), ($2 + [64]), [8]) == 0) ){ goto $label$23 }
	$5 = ($5 + [40])
	$3 = *($5)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$24 }
	$3 = CALL db_idx64_find_primary(*($2 + [176]), *((($2 + [176]) + [8])), (int_64)-4157660949893873664, ($2 + [392]), $4)
	*($5) = $3
	
.LABEL $label$24
	CALL db_idx64_update($3, (int_64)0, ($2 + [64]))
	
.LABEL $label$23
	$3 = *($2 + [263])
	
.LABEL $label$16
	$5 = *($2 + [284])
	if ( ((int_32)*($5 + [28]) != (int_32)($3 & [255])) ){ goto $label$31 }
	$4 = *($0)
	*((($2 + [128]) + [8])) = ($2 + [263])
	*($16) = ($2 + [272])
	*((($2 + [128]) + [16])) = ($2 + [264])
	*((($2 + [128]) + [20])) = ($2 + [376])
	*((($2 + [128]) + [24])) = ($2 + [262])
	*($2 + [132]) = ($2 + [280])
	*($2 + [128]) = ($2 + [216])
	*($2 + [400]) = $4
	CALL eosio_assert(((int_64)*($2 + [216]) == (int_64)CALL $fimport$8()), [10352])
	*($13) = ($2 + [400])
	*($2 + [68]) = ($2 + [128])
	*($2 + [64]) = ($2 + [216])
	*(($3 = CALL _Znwj([88])) + [8]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [50]) = [0]
	*($3 + [52 align=4]) = (int_64)0
	*($3 + [60]) = [0]
	*($3 + [64]) = ($2 + [216])
	CALL $32(($2 + [64]), $3)
	*($2 + [392]) = $3
	$4 = *($3)
	*($2 + [64]) = $4
	$6 = *($3 + [68])
	*($2 + [384]) = $6
	$18 = (($2 + [216]) + [28])
	$5 = *($18)
	if ( ((uint_32)$5 >= (uint_32)*((($2 + [216]) + [32]))) ){ goto $label$30 }
	*($5 + [8]) = $4
	*($5 + [16]) = $6
	*($2 + [392]) = [0]
	*($5) = $3
	*($18) = ($5 + [24])
	$3 = *($2 + [392])
	*($2 + [392]) = [0]
	if ( ($3 == 0) ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$31
	$4 = *($5 + [56])
	$6 = *((($2 + [176]) + [28]))
	$18 = *((($2 + [176]) + [24]))
	if ( ((int_32)$18 == (int_32)$6) ){ goto $label$28 }
	
.LOOP $label$32:
	$3 = ($6 + [-24])
	$5 = *($3)
	if ( ((int_64)*($5) == (int_64)$4) ){ goto $label$29 }
	$6 = $3
	if ( ((int_32)$18 != (int_32)$3) ){ goto $label$32 }
	goto $label$28 
	
.LABEL $label$30
	CALL $33($15, ($2 + [392]), ($2 + [64]), ($2 + [384]))
	$3 = *($2 + [392])
	*($2 + [392]) = [0]
	if ( $3 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$29
	if ( ((int_32)$18 == (int_32)$6) ){ goto $label$28 }
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($2 + [176])), [9903])
	goto $label$27 
	
.LABEL $label$28
	$5 = [0]
	$3 = CALL db_find_i64(*($2 + [176]), *((($2 + [176]) + [8])), (int_64)-4157660949893873664, $4)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$27 }
	$5 = CALL $2(($2 + [176]), $3)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($2 + [176])), [9903])
	
.LABEL $label$27
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [10403])
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($2 + [176])), [10438])
	CALL eosio_assert(((int_64)*($2 + [176]) == (int_64)CALL $fimport$8()), [10484])
	*($5 + [28]) = (*($5 + [28]) + $9)
	$3 = ($5 + [8])
	*($2 + [384]) = *($3)
	$4 = *($5)
	CALL eosio_assert([1], [10535])
	*(($6 = (($2 + [400]) + [8]))) = $14
	*($2 + [404]) = ($2 + [128])
	*($2 + [400]) = ($2 + [128])
	*($2 + [392]) = ($2 + [400])
	*($13) = ($5 + [16])
	*((($2 + [64]) + [12])) = ($5 + [24])
	*($12) = ($5 + [28])
	*($2 + [68]) = $3
	*($2 + [64]) = $5
	CALL $11(($2 + [64]), ($2 + [392]))
	CALL db_update_i64(*($5 + [36]), (int_64)0, ($2 + [128]), [32])
	$18 = (($2 + [176]) + [16])
	if ( (uint_64)($4 <= *($18)) ){ goto $label$33 }
	*($18) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$33
	*($2 + [64]) = *($3)
	if ( (CALL $124(($2 + [384]), ($2 + [64]), [8]) == 0) ){ goto $label$34 }
	$5 = ($5 + [40])
	$3 = *($5)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$35 }
	$3 = CALL db_idx64_find_primary(*($2 + [176]), *((($2 + [176]) + [8])), (int_64)-4157660949893873664, ($2 + [392]), $4)
	*($5) = $3
	
.LABEL $label$35
	CALL db_idx64_update($3, (int_64)0, ($2 + [64]))
	
.LABEL $label$34
	$4 = *($0)
	*($2 + [112]) = [8398]
	*($2 + [116]) = CALL $125([8398])
	*($2 + [24]) = *($2 + [112])
	CALL $3(($2 + [120]), ($2 + [24]))
	$1 = *($0)
	*($2 + [96]) = [9005]
	$19 = *($2 + [120])
	*($2 + [100]) = CALL $125([9005])
	*($2 + [16]) = *($2 + [96])
	CALL $3(($2 + [104]), ($2 + [16]))
	*($12) = $9
	$3 = *($2 + [284])
	*($13) = *($3 + [32])
	*($2 + [64]) = *($3 + [40])
	$20 = CALL $105($11, ($3 + [64]))
	*(($5 = (($2 + [128]) + [16]))) = (int_64)0
	*(($18 = (($2 + [128]) + [24]))) = [0]
	*((($2 + [128]) + [8])) = *($2 + [104])
	*($2 + [128]) = $1
	$3 = CALL _Znwj([16])
	*($5) = $3
	*($3) = $4
	*($3 + [8]) = $19
	*($10) = (int_64)0
	*($17) = [0]
	$3 = ($3 + [16])
	*($18) = $3
	*(($21 = (($2 + [128]) + [20]))) = $3
	$3 = *($11)
	$18 = ( *((($2 + [64]) + [24])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($18 + [20])
	$4 = (CASTING uint_64)(uint_32 $18)
	
.LOOP $label$36:
	$3 = ($3 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$36 }
	if ( ($3 == 0) ){ goto $label$38 }
	CALL $4($10, $3)
	$18 = *($14)
	$3 = *($10)
	goto $label$37 
	
.LABEL $label$38
	$18 = [0]
	$3 = [0]
	
.LABEL $label$37
	*($6) = $18
	*($2 + [404]) = $3
	*($2 + [400]) = $3
	CALL eosio_assert(((int_32)($18 - $3) > (int_32)[7]), [9839])
	CALL memcpy(*($2 + [404]), ($2 + [64]), [8])
	$3 = (*($2 + [404]) + [8])
	*($2 + [404]) = $3
	CALL eosio_assert(((int_32)(*($6) - $3) > (int_32)[7]), [9839])
	CALL memcpy(*($2 + [404]), $13, [8])
	$3 = (*($2 + [404]) + [8])
	*($2 + [404]) = $3
	CALL eosio_assert(((int_32)(*($6) - $3) > (int_32)[3]), [9839])
	CALL memcpy(*($2 + [404]), $12, [4])
	*($2 + [404]) = (*($2 + [404]) + [4])
	CALL $34(($2 + [400]), $20)
	CALL $6(($2 + [400]), ($2 + [128]))
	$3 = *($2 + [400])
	CALL send_inline($3, (*($2 + [404]) - $3))
	$3 = *($2 + [400])
	if ( ($3 == 0) ){ goto $label$39 }
	*($2 + [404]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$39
	$3 = *($10)
	if ( ($3 == 0) ){ goto $label$40 }
	*($14) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$40
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$41 }
	*($21) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$41
	if ( ((*($11) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*((($2 + [64]) + [28])))
	goto $label$25 
	
.LABEL $label$26
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*(($3 + [60])))
	
.LABEL $label$42
	CALL _ZdlPv($3)
	
.LABEL $label$25
	$3 = [0]
	CALL eosio_assert(((int_32)*($2 + [284]) != (int_32)[0]), [10016])
	$5 = CALL db_next_i64(*(*($2 + [284]) + [80]), ($2 + [128]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$43 }
	$3 = CALL $13(*($2 + [280]), $5)
	
.LABEL $label$43
	*($2 + [284]) = $3
	if ( ($3 == 0) ){ goto $label$12 }
	if ( ((*($2 + [262]) & [255]) == 0) ){ goto $label$15 }
	
.LABEL $label$12
	if ( (*($2 + [263]) == 0) ){ goto $label$44 }
	*(($2 + [160])) = [0]
	*($2 + [152]) = (int_64)0
	*($2 + [164]) = [0]
	*($2 + [144]) = (int_64)-1
	$4 = *($0)
	*($2 + [128]) = $4
	*($2 + [136]) = $4
	$3 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)-2044374312540962816, *(*($2 + [332]) + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$45 }
	$3 = CALL $20(($2 + [128]), $5)
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)($2 + [128])), [9903])
	
.LABEL $label$45
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [9017])
	$4 = *($0)
	*($2 + [64]) = ($2 + [328])
	CALL eosio_assert($5, [10403])
	CALL $35(($2 + [128]), $3, $4, ($2 + [64]))
	CALL $29(($2 + [152]))
	
.LABEL $label$44
	$4 = *($0)
	*($2 + [48]) = [8398]
	*($2 + [52]) = CALL $125([8398])
	*($2 + [8]) = *($2 + [48])
	$1 = *(CALL $3(($2 + [56]), ($2 + [8])))
	$19 = *($0)
	*($2 + [32]) = [9074]
	*($2 + [36]) = CALL $125([9074])
	*($2) = *($2 + [32])
	$3 = CALL $3(($2 + [40]), $2)
	*(($5 = ($2 + [152]))) = [0]
	*($2 + [144]) = (int_64)0
	*($2 + [72]) = *($2 + [263])
	*($2 + [80]) = *($2 + [272])
	*($2 + [88]) = *($2 + [264])
	*($2 + [64]) = *(*($2 + [332]))
	*($2 + [128]) = $19
	*($2 + [136]) = *($3)
	*(($3 = CALL _Znwj([16]))) = $4
	*($3 + [8]) = $1
	*(($2 + [164])) = [0]
	$6 = ($3 + [16])
	*($5) = $6
	*(($2 + [148])) = $6
	*($2 + [144]) = $3
	*($2 + [156 align=4]) = (int_64)0
	CALL $4(($2 + [156]), [25])
	$3 = *(($2 + [160]))
	$5 = *($2 + [156])
	*($2 + [404]) = $5
	*($2 + [400]) = $5
	*($2 + [408]) = $3
	*($2 + [384]) = ($2 + [400])
	*($2 + [392]) = ($2 + [64])
	CALL $36(($2 + [392]), ($2 + [384]))
	CALL $6(($2 + [400]), ($2 + [128]))
	$3 = *($2 + [400])
	CALL send_inline($3, (*($2 + [404]) - $3))
	$3 = *($2 + [400])
	if ( ($3 == 0) ){ goto $label$46 }
	*($2 + [404]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$46
	$3 = *($2 + [156])
	if ( ($3 == 0) ){ goto $label$47 }
	*(($2 + [160])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$47
	$3 = *($2 + [144])
	if ( ($3 == 0) ){ goto $label$48 }
	*(($2 + [148])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$48
	$1 = *(*($2 + [332]))
	$3 = ($2 + [352])
	$4 = *($3)
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$49 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($2 + [336]), *(($2 + [344])), (int_64)-5915095046963593216, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$50 }
	CALL $9(($2 + [336]), $5)
	*($2 + [132]) = [0]
	*($2 + [128]) = ($2 + [336])
	$4 = *(*(CALL $24(($2 + [128])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$50
	*(($2 + [352])) = $4
	
.LABEL $label$49
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [10198])
	if ( ((int_64)$1 != (int_64)((int_64)*($3) + (int_64)-1)) ){ goto $label$53 }
	$3 = *($2 + [332])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [10403])
	CALL $37(($2 + [336]), $3)
	$6 = *($2 + [200])
	if ( $6 ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	$4 = *($2 + [328])
	$3 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$5 = ((int_32)$3) != (int_32)[0]
	CALL eosio_assert($5), [9982])
	CALL eosio_assert($5, [10016])
	$5 = CALL db_next_i64(*($3 + [96]), ($2 + [128]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$54 }
	CALL $9((CASTING uint_32)(uint_64 $4), $5)
	
.LABEL $label$54
	CALL $38(($2 + [336]), $3)
	$6 = *($2 + [200])
	if ( ($6 == 0) ){ goto $label$51 }
	
.LABEL $label$52
	$18 = ($2 + [204])
	$3 = *($18)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$56 }
	
.LOOP $label$57:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$58 }
	CALL _ZdlPv($5)
	
.LABEL $label$58
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$57 }
	$3 = *(($2 + [200]))
	goto $label$55 
	
.LABEL $label$56
	$3 = $6
	
.LABEL $label$55
	*($18) = $6
	CALL _ZdlPv($3)
	
.LABEL $label$51
	$6 = *($2 + [240])
	if ( ($6 == 0) ){ goto $label$59 }
	$18 = ($2 + [244])
	$3 = *($18)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$61 }
	
.LOOP $label$62:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$63 }
	if ( ((*($5 + [52]) & [1]) == 0) ){ goto $label$64 }
	CALL _ZdlPv(*(($5 + [60])))
	
.LABEL $label$64
	CALL _ZdlPv($5)
	
.LABEL $label$63
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$62 }
	$3 = *(($2 + [240]))
	goto $label$60 
	
.LABEL $label$61
	$3 = $6
	
.LABEL $label$60
	*($18) = $6
	CALL _ZdlPv($3)
	
.LABEL $label$59
	$6 = *($2 + [312])
	if ( ($6 == 0) ){ goto $label$65 }
	$18 = ($2 + [316])
	$5 = *($18)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$67 }
	
.LOOP $label$68:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$69 }
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$70 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$70
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$71 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$71
	CALL _ZdlPv($3)
	
.LABEL $label$69
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$68 }
	$3 = *(($2 + [312]))
	goto $label$66 
	
.LABEL $label$67
	$3 = $6
	
.LABEL $label$66
	*($18) = $6
	CALL _ZdlPv($3)
	
.LABEL $label$65
	CALL $16(($2 + [360]))
	$global$0 = ($2 + [416])
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $130($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8297])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $128($1)
	
.LABEL $label$2
	*(CALL $117()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $128(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $131($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}