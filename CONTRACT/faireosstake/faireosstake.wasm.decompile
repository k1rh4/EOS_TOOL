(data (i32.const 4) "\a0g\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "Dividends are currently being paid and cannot be pledged\00")
(data (i32.const 176) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 240) "unstake record not exist\00")
(data (i32.const 272) "cannot pass end iterator to modify\00")
(data (i32.const 320) "object passed to modify is not in multi_index\00")
(data (i32.const 368) "cannot modify objects in table of another contract\00")
(data (i32.const 432) "attempt to add asset with different symbol\00")
(data (i32.const 480) "addition underflow\00")
(data (i32.const 512) "addition overflow\00")
(data (i32.const 544) "updater cannot change primary key when modifying an object\00")
(data (i32.const 608) "write\00")
(data (i32.const 624) "cannot create objects in table of another contract\00")
(data (i32.const 688) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 752) "invalid symbol name\00")
(data (i32.const 784) "attempt to subtract asset with different symbol\00")
(data (i32.const 832) "subtraction underflow\00")
(data (i32.const 864) "subtraction overflow\00")
(data (i32.const 896) "cannot pass end iterator to erase\00")
(data (i32.const 944) "cannot increment end iterator\00")
(data (i32.const 976) "object passed to erase is not in multi_index\00")
(data (i32.const 1024) "cannot erase objects in table of another contract\00")
(data (i32.const 1088) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1152) "error reading iterator\00")
(data (i32.const 1184) "read\00")
(data (i32.const 1200) "no unstaking record found\00")
(data (i32.const 1232) "no number of discharges available\00")
(data (i32.const 1280) "No redemption time\00")
(data (i32.const 1312) "invalid token\00")
(data (i32.const 1328) "The amount from the unstake cannot be 0\00")
(data (i32.const 1376) "Dividends are currently being paid and cannot be redeemed\00")
(data (i32.const 1440) "stake record does not exist\00")
(data (i32.const 1472) "no number of pledges available\00")
(data (i32.const 1504) "The amount of stake cannot be 0\00")
(data (i32.const 1536) "faireostoken\00")
(data (i32.const 1552) "Pledged balance invalid\00")
(data (i32.const 1584) "Insufficient available balance\00")
(data (i32.const 1616) "Insufficient stake quantity\00")
(data (i32.const 10048) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$14 (param i64)))
(import "env" "require_auth2" (func $fimport$15 (param i64 i64)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN8betstake5stakeEyN5eosio5assetE" (func $6))
(export "_ZN8betstake7unstakeEyN5eosio5assetE" (func $8))
(export "_ZN8betstake6refundEy" (func $9))
(export "_ZN8betstake7setstatEh" (func $11))
(export "_ZN8betstake7restakeEy" (func $13))
(export "malloc" (func $34))
(export "free" (func $37))
(export "memcmp" (func $41))
(table $0 6 6 anyfunc)
(elem (i32.const 0) $42 $6 $13 $11 $8 $9)



void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [608])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [608])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [608])
	CALL memcpy(*($2 + [4]), $0, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
}

int_32 .FUNC $19 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [688])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [752])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [688])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [752])
	return $0
}

void .FUNC $39 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [608])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [608])
	CALL memcpy(*($2 + [4]), $0, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [976])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1024])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1088])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $39($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $39($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [976])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1024])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1088])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $39($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $39($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [32]))
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $38(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $40($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $39($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $39($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1184])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1184])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1184])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1184])
	CALL memcpy($0, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [688])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [752])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [1184])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [1184])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [1184])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1184])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1184])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1184])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1184])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1184])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1184])
	CALL memcpy($0, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $38(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $40($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $39($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $39($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [176])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157658851255844864, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $16($0, $5)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [176])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $26 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [28]) == (int_32)$0), [176])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3102536757352830784, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $15($0, $5)
	CALL eosio_assert(((int_32)*($6 + [28]) == (int_32)$0), [176])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $42 ()
{
	(unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $40 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZN8betstake7unstakeEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [224])
	*([0] + [4]) = $11
	CALL require_auth($1)
	$4 = [0]
	$3 = *($2)
	if ( ((uint_64)((int_64)$3 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$6 = *($2 + [8])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = [0]
	$10 = [0]
	
.LOOP $label$2:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	
.LOOP $label$4:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$1 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$4 }
	
.LABEL $label$3
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$2 }
	$4 = ((int_64)$6 == (int_64)353416332804)
	
.LABEL $label$1
	CALL eosio_assert($4, [1312])
	CALL eosio_assert(((int_64)$3 > (int_64)0), [1328])
	*((($11 + [88]) + [32])) = [0]
	*($11 + [104]) = (int_64)-1
	*($11 + [112]) = (int_64)0
	$8 = *($0)
	*($11 + [88]) = $8
	*($11 + [96]) = $8
	$10 = CALL db_lowerbound_i64($8, $8, (int_64)-4157495357179166720, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $14(($11 + [88]), $10) + [40]) == (int_32)[1]), [1376])
	
.LABEL $label$5
	*((($11 + [48]) + [32])) = [0]
	*($11 + [64]) = (int_64)-1
	*($11 + [72]) = (int_64)0
	$8 = *($0)
	*($11 + [48]) = $8
	*($11 + [56]) = $8
	$10 = CALL $27(($11 + [48]), $1, [1440])
	CALL eosio_assert(((int_64)*($10 + [8]) >= (int_64)$3), [1472])
	if ( ((int_64)$3 != (int_64)*($10 + [8])) ){ goto $label$7 }
	CALL $28(($11 + [48]), $10)
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($11 + [48])), [320])
	CALL eosio_assert(((int_64)*($11 + [48]) == (int_64)CALL $fimport$2()), [368])
	$8 = *($10)
	$9 = ($10 + [16])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($9)), [784])
	$6 = (int_64)
	*(($4 = ($10 + [8]))) = $6(*($4) - $3))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [832])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [864])
	CALL eosio_assert(((int_64)$8 == (int_64)*($10)), [544])
	CALL eosio_assert([1], [608])
	CALL memcpy(($11 + [128]), $10, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($11 + [128]) | [8]), $4, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($11 + [128]) + [16]), $9, [8])
	CALL db_update_i64(*($10 + [28]), (int_64)0, ($11 + [128]), [24])
	$10 = (($11 + [48]) + [16])
	if ( (uint_64)($8 <= *($10)) ){ goto $label$6 }
	*($10) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$10 = [0]
	*(($11 + [40])) = [0]
	*($11 + [24]) = (int_64)-1
	*($11 + [32]) = (int_64)0
	$8 = *($0)
	*($11 + [8]) = $8
	*($11 + [16]) = $8
	$4 = CALL db_find_i64($8, $8, (int_64)-3102536757352830784, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	$10 = CALL $15(($11 + [8]), $4)
	CALL eosio_assert(((int_32)*($10 + [28]) == (int_32)($11 + [8])), [176])
	CALL eosio_assert([1], [272])
	CALL eosio_assert(((int_32)*($10 + [28]) == (int_32)($11 + [8])), [320])
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)CALL $fimport$2()), [368])
	$8 = *($10)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($10 + [16]))), [432])
	$3 = ((int_64)*($10 + [8]) + (int_64)$3)
	*($10 + [8]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)*($10 + [8]) < (int_64)4611686018427387904), [512])
	*($10 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$8 == (int_64)*($10)), [544])
	*($11 + [192]) = (($11 + [128]) + [28])
	*($11 + [188]) = ($11 + [128])
	*($11 + [184]) = ($11 + [128])
	*($11 + [200]) = ($11 + [184])
	*($11 + [212]) = ($10 + [8])
	*($11 + [208]) = $10
	*($11 + [216]) = ($10 + [24])
	CALL $29(($11 + [208]), ($11 + [200]))
	CALL db_update_i64(*($10 + [32]), (int_64)0, ($11 + [128]), [28])
	$10 = (($11 + [8]) + [16])
	if ( (uint_64)($8 <= *($10)) ){ goto $label$8 }
	*($10) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	goto $label$8 
	
.LABEL $label$9
	$3 = *($0)
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)CALL $fimport$2()), [624])
	*(($4 = CALL $38([40])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [688])
	$5 = ($4 + [8])
	$8 = (int_64)5462355
	
.LOOP $label$11:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$9 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	CALL eosio_assert($9, [752])
	*($4 + [28]) = ($11 + [8])
	*($4) = $1
	*(($5 + [12])) = *(($2 + [12]))
	*(($5 + [8])) = *(($2 + [8]))
	*(($5 + [4])) = *(($2 + [4]))
	*($5) = *($2)
	*($4 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($11 + [192]) = (($11 + [128]) + [28])
	*($11 + [188]) = ($11 + [128])
	*($11 + [184]) = ($11 + [128])
	*($11 + [200]) = ($11 + [184])
	*($11 + [212]) = $5
	*($11 + [208]) = $4
	*($11 + [216]) = ($4 + [24])
	CALL $29(($11 + [208]), ($11 + [200]))
	$8 = *($4)
	$9 = CALL db_store_i64(*((($11 + [8]) + [8])), (int_64)-3102536757352830784, $3, $8, ($11 + [128]), [28])
	*($4 + [32]) = $9
	$10 = ($11 + [24])
	if ( (uint_64)($8 <= *($10)) ){ goto $label$14 }
	*($10) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*($11 + [208]) = $4
	$8 = *($4)
	*($11 + [128]) = $8
	*($11 + [184]) = $9
	$10 = *((($11 + [8]) + [28]))
	if ( ((uint_32)$10 >= (uint_32)*(($11 + [40]))) ){ goto $label$16 }
	*($10 + [8]) = $8
	*($10 + [16]) = $9
	*($11 + [208]) = [0]
	*($10) = $4
	*(($11 + [36])) = ($10 + [24])
	goto $label$15 
	
.LABEL $label$16
	CALL $24(($11 + [32]), ($11 + [208]), ($11 + [128]), ($11 + [184]))
	
.LABEL $label$15
	$10 = *($11 + [208])
	*($11 + [208]) = [0]
	if ( ($10 == 0) ){ goto $label$8 }
	CALL $39($10)
	
.LABEL $label$8
	$10 = CALL db_lowerbound_i64(*($11 + [88]), *((($11 + [88]) + [8])), (int_64)-4157495357179166720, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$17 }
	$10 = CALL $14(($11 + [88]), $10)
	$3 = *($0)
	CALL eosio_assert([1], [272])
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)($11 + [88])), [320])
	CALL eosio_assert(((int_64)*($11 + [88]) == (int_64)CALL $fimport$2()), [368])
	$8 = *($10)
	$1 = *($2 + [8])
	CALL eosio_assert(((int_64)$1 == (int_64)*(($10 + [16]))), [784])
	$6 = *($2)
	$7 = (int_64)
	*($10 + [8]) = $7(*($10 + [8]) - $6))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [832])
	CALL eosio_assert(((int_64)*($10 + [8]) < (int_64)4611686018427387904), [864])
	CALL eosio_assert(((int_64)$1 == (int_64)*(($10 + [32]))), [432])
	$1 = ((int_64)$6 + (int_64)*($10 + [24]))
	*($10 + [24]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)*($10 + [24]) < (int_64)4611686018427387904), [512])
	CALL eosio_assert(((int_64)$8 == (int_64)*($10)), [544])
	*($11 + [192]) = (($11 + [128]) + [41])
	*($11 + [188]) = ($11 + [128])
	*($11 + [184]) = ($11 + [128])
	*($11 + [200]) = ($11 + [184])
	*($11 + [212]) = ($10 + [8])
	*($11 + [208]) = $10
	*($11 + [216]) = ($10 + [24])
	*($11 + [220]) = ($10 + [40])
	CALL $18(($11 + [208]), ($11 + [200]))
	CALL db_update_i64(*($10 + [48]), $3, ($11 + [128]), [41])
	$10 = (($11 + [88]) + [16])
	if ( (uint_64)($8 <= *($10)) ){ goto $label$17 }
	*($10) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	$0 = *($11 + [32])
	if ( ($0 == 0) ){ goto $label$18 }
	$4 = ($11 + [36])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$20 }
	
.LOOP $label$21:
	$10 = ($10 + [-24])
	$2 = *($10)
	*($10) = [0]
	if ( ($2 == 0) ){ goto $label$22 }
	CALL $39($2)
	
.LABEL $label$22
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$21 }
	$10 = *(($11 + [32]))
	goto $label$19 
	
.LABEL $label$20
	$10 = $0
	
.LABEL $label$19
	*($4) = $0
	CALL $39($10)
	
.LABEL $label$18
	$0 = *($11 + [72])
	if ( ($0 == 0) ){ goto $label$23 }
	$4 = ($11 + [76])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$25 }
	
.LOOP $label$26:
	$10 = ($10 + [-24])
	$2 = *($10)
	*($10) = [0]
	if ( ($2 == 0) ){ goto $label$27 }
	CALL $39($2)
	
.LABEL $label$27
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$26 }
	$10 = *(($11 + [72]))
	goto $label$24 
	
.LABEL $label$25
	$10 = $0
	
.LABEL $label$24
	*($4) = $0
	CALL $39($10)
	
.LABEL $label$23
	$0 = *($11 + [112])
	if ( ($0 == 0) ){ goto $label$28 }
	$4 = ($11 + [116])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$30 }
	
.LOOP $label$31:
	$10 = ($10 + [-24])
	$2 = *($10)
	*($10) = [0]
	if ( ($2 == 0) ){ goto $label$32 }
	CALL $39($2)
	
.LABEL $label$32
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$31 }
	$10 = *(($11 + [112]))
	goto $label$29 
	
.LABEL $label$30
	$10 = $0
	
.LABEL $label$29
	*($4) = $0
	CALL $39($10)
	
.LABEL $label$28
	*([0] + [4]) = ($11 + [224])
}

void .FUNC _ZN8betstake6refundEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [176])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	*((($7 + [40]) + [32])) = [0]
	*($7 + [56]) = (int_64)-1
	*($7 + [64]) = (int_64)0
	$3 = *($0)
	*($7 + [40]) = $3
	*($7 + [48]) = $3
	$2 = CALL $26(($7 + [40]), $1, [1200])
	CALL eosio_assert(((int_64)*($2 + [8]) > (int_64)0), [1232])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000)) >= (uint_32)(*($2 + [24]) + [86400])), [1280])
	*(($7 + [32])) = [0]
	*($7 + [16]) = (int_64)-1
	*($7 + [24]) = (int_64)0
	$1 = *($0)
	*($7) = $1
	*($7 + [8]) = $1
	$6 = CALL db_lowerbound_i64($1, $1, (int_64)-4157495357179166720, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $14($7, $6)
	$3 = *($0)
	CALL eosio_assert([1], [272])
	CALL eosio_assert(((int_32)*($6 + [44]) == (int_32)$7), [320])
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$2()), [368])
	$1 = *($6)
	CALL eosio_assert(((int_64)*(($2 + [16])) == (int_64)*(($6 + [32]))), [784])
	$4 = (int_64)
	*($6 + [24]) = $4(*($6 + [24]) - *(($2 + [8]))))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [832])
	CALL eosio_assert(((int_64)*($6 + [24]) < (int_64)4611686018427387904), [864])
	CALL eosio_assert(((int_64)$1 == (int_64)*($6)), [544])
	*($7 + [144]) = (($7 + [80]) + [41])
	*($7 + [140]) = ($7 + [80])
	*($7 + [136]) = ($7 + [80])
	*($7 + [152]) = ($7 + [136])
	*($7 + [164]) = ($6 + [8])
	*($7 + [160]) = $6
	*($7 + [168]) = ($6 + [24])
	*($7 + [172]) = ($6 + [40])
	CALL $18(($7 + [160]), ($7 + [152]))
	CALL db_update_i64(*($6 + [48]), $3, ($7 + [80]), [41])
	$6 = ($7 + [16])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$1 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	CALL $21(($7 + [40]), $2)
	$2 = *($7 + [24])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($7 + [28])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $39($0)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($7 + [24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL $39($6)
	
.LABEL $label$2
	$2 = *($7 + [64])
	if ( ($2 == 0) ){ goto $label$7 }
	$5 = ($7 + [68])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $39($0)
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($7 + [64]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $2
	
.LABEL $label$8
	*($5) = $2
	CALL $39($6)
	
.LABEL $label$7
	*([0] + [4]) = ($7 + [176])
}

void .FUNC _ZN8betstake5stakeEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [240])
	*([0] + [4]) = $13
	CALL require_auth($1)
	$4 = [0]
	$3 = *($2)
	if ( ((uint_64)((int_64)$3 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = *($2 + [8])
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = [0]
	$7 = [0]
	
.LOOP $label$2:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	
.LOOP $label$4:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$1 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$4 }
	
.LABEL $label$3
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$2 }
	$4 = ((int_64)$8 == (int_64)353416332804)
	
.LABEL $label$1
	CALL eosio_assert($4, [1312])
	$9 = (int_64)0
	CALL eosio_assert(((int_64)$3 > (int_64)0), [1504])
	*(($13 + [136])) = [0]
	*($13 + [120]) = (int_64)-1
	*($13 + [128]) = (int_64)0
	$8 = *($0)
	*($13 + [104]) = $8
	*($13 + [112]) = $8
	$7 = CALL db_lowerbound_i64($8, $8, (int_64)-4157495357179166720, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $14(($13 + [104]), $7) + [40]) == (int_32)[1]), [112])
	
.LABEL $label$5
	$8 = (int_64)59
	$7 = [1536]
	$10 = (int_64)0
	
.LOOP $label$6:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$7 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$4 = ($4 + [165])
	goto $label$8 
	
.LABEL $label$9
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$7
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$6 }
	*($13 + [144]) = $10
	CALL $30(($13 + [88]), ($13 + [144]), $1, (int_64)353416332804)
	CALL eosio_assert(((int_64)*($13 + [88]) > (int_64)0), [1584])
	CALL eosio_assert(((int_64)$3 <= (int_64)*($13 + [88])), [1616])
	*((($13 + [48]) + [32])) = [0]
	*($13 + [64]) = (int_64)-1
	*($13 + [72]) = (int_64)0
	$9 = *($0)
	*($13 + [48]) = $9
	*($13 + [56]) = $9
	$7 = CALL db_find_i64($9, $9, (int_64)-4157658851255844864, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	$7 = CALL $16(($13 + [48]), $7)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($13 + [48])), [176])
	CALL eosio_assert(((int_64)*(($7 + [16])) == (int_64)*($13 + [96])), [784])
	$9 = (int_64)
	*($13 + [88]) = $9(*($13 + [88]) - *($7 + [8])))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [832])
	CALL eosio_assert(((int_64)*($13 + [88]) < (int_64)4611686018427387904), [864])
	goto $label$10 
	
.LABEL $label$11
	$7 = [0]
	
.LABEL $label$10
	*((($13 + [8]) + [32])) = [0]
	*($13 + [24]) = (int_64)-1
	*($13 + [32]) = (int_64)0
	$9 = *($0)
	*($13 + [8]) = $9
	*($13 + [16]) = $9
	$4 = CALL db_find_i64($9, $9, (int_64)-3102536757352830784, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$4 = CALL $15(($13 + [8]), $4)
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)($13 + [8])), [176])
	if ( ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - *($4 + [24])) > (uint_32)[86399]) ){ goto $label$12 }
	CALL eosio_assert(((int_64)*(($4 + [16])) == (int_64)*($13 + [96])), [784])
	$9 = (int_64)
	*($13 + [88]) = $9(*($13 + [88]) - *($4 + [8])))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [832])
	CALL eosio_assert(((int_64)*($13 + [88]) < (int_64)4611686018427387904), [864])
	
.LABEL $label$12
	$9 = *($13 + [88])
	CALL eosio_assert((((int_64)$9 > (int_64)0) & ((int_64)$9 >= (int_64)$3)), [1552])
	if ( ($7 == 0) ){ goto $label$14 }
	CALL eosio_assert([1], [272])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($13 + [48])), [320])
	CALL eosio_assert(((int_64)*($13 + [48]) == (int_64)CALL $fimport$2()), [368])
	*($7 + [8]) = ((int_64)*($7 + [8]) + (int_64)$3)
	$9 = *($7)
	CALL eosio_assert([1], [544])
	CALL eosio_assert([1], [608])
	CALL memcpy(($13 + [144]), $7, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($13 + [144]) | [8]), ($7 + [8]), [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($13 + [144]) + [16]), ($7 + [16]), [8])
	CALL db_update_i64(*($7 + [28]), (int_64)0, ($13 + [144]), [24])
	$7 = (($13 + [48]) + [16])
	if ( (uint_64)($9 <= *($7)) ){ goto $label$13 }
	*($7) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	goto $label$13 
	
.LABEL $label$14
	$8 = *($0)
	CALL eosio_assert(((int_64)*($13 + [48]) == (int_64)CALL $fimport$2()), [624])
	*(($4 = CALL $38([40])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [688])
	$6 = ($4 + [16])
	$5 = ($4 + [8])
	$9 = (int_64)5462355
	$7 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$12 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$12 = [0]
	
.LABEL $label$15
	CALL eosio_assert($12, [752])
	*($4 + [24]) = ($13 + [48])
	*($4) = $1
	*(($5 + [12])) = *(($2 + [12]))
	*(($5 + [8])) = *(($2 + [8]))
	*(($5 + [4])) = *(($2 + [4]))
	*($5) = *($2)
	CALL eosio_assert([1], [608])
	CALL memcpy(($13 + [144]), $4, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($13 + [144]) | [8]), $5, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($13 + [144]) + [16]), $6, [8])
	$9 = *($4)
	$5 = CALL db_store_i64(*((($13 + [48]) + [8])), (int_64)-4157658851255844864, $8, $9, ($13 + [144]), [24])
	*($4 + [28]) = $5
	$7 = (($13 + [48]) + [16])
	if ( (uint_64)($9 <= *($7)) ){ goto $label$20 }
	*($7) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	*($13 + [224]) = $4
	$9 = *($4)
	*($13 + [144]) = $9
	*($13 + [200]) = $5
	$12 = ($13 + [76])
	$7 = *($12)
	if ( ((uint_32)$7 >= (uint_32)*(($13 + [80]))) ){ goto $label$22 }
	*($7 + [8]) = $9
	*($7 + [16]) = $5
	*($13 + [224]) = [0]
	*($7) = $4
	*($12) = ($7 + [24])
	goto $label$21 
	
.LABEL $label$22
	CALL $17(($13 + [72]), ($13 + [224]), ($13 + [144]), ($13 + [200]))
	
.LABEL $label$21
	$7 = *($13 + [224])
	*($13 + [224]) = [0]
	if ( ($7 == 0) ){ goto $label$13 }
	CALL $39($7)
	
.LABEL $label$13
	$4 = (($13 + [104]) + [8])
	$7 = CALL db_lowerbound_i64(*($13 + [104]), *($4), (int_64)-4157495357179166720, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$26 }
	$7 = CALL $14(($13 + [104]), $7)
	$8 = *($0)
	CALL eosio_assert([1], [272])
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)($13 + [104])), [320])
	CALL eosio_assert(((int_64)*($13 + [104]) == (int_64)CALL $fimport$2()), [368])
	$9 = *($7)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($7 + [16]))), [432])
	$11 = ((int_64)*($7 + [8]) + (int_64)*($2))
	*($7 + [8]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [512])
	CALL eosio_assert(((int_64)$9 == (int_64)*($7)), [544])
	*($13 + [208]) = (($13 + [144]) + [41])
	*($13 + [204]) = ($13 + [144])
	*($13 + [200]) = ($13 + [144])
	*($13 + [216]) = ($13 + [200])
	*($13 + [228]) = ($7 + [8])
	*($13 + [224]) = $7
	*($13 + [232]) = ($7 + [24])
	*($13 + [236]) = ($7 + [40])
	CALL $18(($13 + [224]), ($13 + [216]))
	CALL db_update_i64(*($7 + [48]), $8, ($13 + [144]), [41])
	$7 = (($13 + [104]) + [16])
	if ( (uint_64)($9 <= *($7)) ){ goto $label$25 }
	*($7) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$2 = *($13 + [32])
	if ( $2 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$8 = *($0)
	CALL eosio_assert(((int_64)*($13 + [104]) == (int_64)CALL $fimport$2()), [624])
	$7 = CALL $38([56])
	CALL $19($7)
	*($7 + [44]) = ($13 + [104])
	$9 = *(($2 + [8]))
	*(($7 + [16])) = $9
	$11 = *($2)
	*($7 + [8]) = $11
	*(($7 + [32])) = $9
	*($7 + [24]) = $11
	*($7 + [24]) = (int_64)0
	*($7 + [40]) = [1]
	*($13 + [208]) = (($13 + [144]) + [41])
	*($13 + [204]) = ($13 + [144])
	*($13 + [200]) = ($13 + [144])
	*($13 + [216]) = ($13 + [200])
	*($13 + [228]) = ($7 + [8])
	*($13 + [224]) = $7
	*($13 + [232]) = ($7 + [24])
	*($13 + [236]) = ($7 + [40])
	CALL $18(($13 + [224]), ($13 + [216]))
	$9 = *($7)
	$2 = CALL db_store_i64(*($4), (int_64)-4157495357179166720, $8, $9, ($13 + [144]), [41])
	*($7 + [48]) = $2
	$4 = (($13 + [104]) + [16])
	if ( (uint_64)($9 <= *($4)) ){ goto $label$27 }
	*($4) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$27
	*($13 + [224]) = $7
	$9 = *($7)
	*($13 + [144]) = $9
	*($13 + [200]) = $2
	$0 = ($13 + [132])
	$4 = *($0)
	if ( ((uint_32)$4 >= (uint_32)*((($13 + [104]) + [32]))) ){ goto $label$29 }
	*($4 + [8]) = $9
	*($4 + [16]) = $2
	*($13 + [224]) = [0]
	*($4) = $7
	*($0) = ($4 + [24])
	goto $label$28 
	
.LABEL $label$29
	CALL $20(($13 + [128]), ($13 + [224]), ($13 + [144]), ($13 + [200]))
	
.LABEL $label$28
	$7 = *($13 + [224])
	*($13 + [224]) = [0]
	if ( ($7 == 0) ){ goto $label$25 }
	CALL $39($7)
	
.LABEL $label$25
	$2 = *($13 + [32])
	if ( ($2 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$0 = ($13 + [36])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$31 }
	
.LOOP $label$32:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$33 }
	CALL $39($4)
	
.LABEL $label$33
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$32 }
	$7 = *(($13 + [32]))
	goto $label$30 
	
.LABEL $label$31
	$7 = $2
	
.LABEL $label$30
	*($0) = $2
	CALL $39($7)
	
.LABEL $label$23
	$2 = *($13 + [72])
	if ( ($2 == 0) ){ goto $label$34 }
	$0 = ($13 + [76])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$36 }
	
.LOOP $label$37:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$38 }
	CALL $39($4)
	
.LABEL $label$38
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$37 }
	$7 = *(($13 + [72]))
	goto $label$35 
	
.LABEL $label$36
	$7 = $2
	
.LABEL $label$35
	*($0) = $2
	CALL $39($7)
	
.LABEL $label$34
	$2 = *($13 + [128])
	if ( ($2 == 0) ){ goto $label$39 }
	$0 = ($13 + [132])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$41 }
	
.LOOP $label$42:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$43 }
	CALL $39($4)
	
.LABEL $label$43
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$42 }
	$7 = *(($13 + [128]))
	goto $label$40 
	
.LABEL $label$41
	$7 = $2
	
.LABEL $label$40
	*($0) = $2
	CALL $39($7)
	
.LABEL $label$39
	*([0] + [4]) = ($13 + [240])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [688])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [752])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [1184])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [1184])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [1184])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*($9 + [88]) = $0
	if ( ((int_64)$2 <= (int_64)-4417032211635634177) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)-4417032211635634176) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)-3102536759825661952) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)-4157661383434960896) ){ goto $label$14 }
	*($9 + [84]) = [0]
	*($9 + [80]) = [1]
	*($9 + [8 align=4]) = *($9 + [80])
	CALL $7(($9 + [88]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$25
	if ( ((int_64)$2 == (int_64)-5001342339331915776) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)-4994048603321270272) ){ goto $label$14 }
	*($9 + [52]) = [0]
	*($9 + [48]) = [2]
	*($9 + [40 align=4]) = *($9 + [48])
	CALL $10(($9 + [88]), ($9 + [40]))
	goto $label$14 
	
.LABEL $label$24
	*($9 + [60]) = [0]
	*($9 + [56]) = [3]
	*($9 + [32 align=4]) = *($9 + [56])
	CALL $12(($9 + [88]), ($9 + [32]))
	goto $label$14 
	
.LABEL $label$23
	*($9 + [76]) = [0]
	*($9 + [72]) = [4]
	*($9 + [16 align=4]) = *($9 + [72])
	CALL $7(($9 + [88]), ($9 + [16]))
	goto $label$14 
	
.LABEL $label$22
	*($9 + [68]) = [0]
	*($9 + [64]) = [5]
	*($9 + [24 align=4]) = *($9 + [64])
	CALL $10(($9 + [88]), ($9 + [24]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [96])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1152])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $38([56])
	CALL $19($6)
	*($6 + [44]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [24])
	*($8 + [44]) = ($6 + [40])
	CALL $25(($8 + [32]), ($8 + [24]))
	*($6 + [48]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [48])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $20(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $39($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1152])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $38([40])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [688])
	$3 = ($4 + [8])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [752])
	*($4 + [28]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $3
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + [24])
	CALL $23(($8 + [32]), ($8 + [24]))
	*($4 + [32]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [32]) = $7
	$6 = *($4 + [32])
	*($8 + [4]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $24($2, ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $39($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1152])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $38([40])
	$6 = CALL $22($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $17(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $39($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $38(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $40($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $39($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $39($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1184])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN8betstake7setstatEh (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [144])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	$2 = *($0)
	*($6 + [8]) = $2
	*($6 + [16]) = $2
	*($6 + [32]) = (int_64)0
	$5 = CALL db_lowerbound_i64($2, $2, (int_64)-4157495357179166720, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $14(($6 + [8]), $5)
	$3 = *($0)
	CALL eosio_assert([1], [272])
	CALL eosio_assert(((int_32)*($5 + [44]) == (int_32)($6 + [8])), [320])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$2()), [368])
	*($5 + [40]) = $1
	$2 = *($5)
	CALL eosio_assert([1], [544])
	*($6 + [112]) = (($6 + [48]) + [41])
	*($6 + [108]) = ($6 + [48])
	*($6 + [104]) = ($6 + [48])
	*($6 + [120]) = ($6 + [104])
	*($6 + [132]) = ($5 + [8])
	*($6 + [128]) = $5
	*($6 + [136]) = ($5 + [24])
	*($6 + [140]) = ($5 + [40])
	CALL $18(($6 + [128]), ($6 + [120]))
	CALL db_update_i64(*($5 + [48]), $3, ($6 + [48]), [41])
	$5 = ($6 + [24])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$2 }
	*($5) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$1 = *($6 + [32])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($6 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $39($0)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$5 }
	$5 = *(($6 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$5 = $1
	
.LABEL $label$3
	*($4) = $1
	CALL $39($5)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [144])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1184])
	CALL memcpy(($5 + [8]), $3, [1])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 ($6 & [255])), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC _ZN8betstake7restakeEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [224])
	*([0] + [4]) = $11
	CALL require_auth($1)
	$6 = [0]
	*((($11 + [88]) + [32])) = [0]
	*($11 + [104]) = (int_64)-1
	$8 = *($0)
	*($11 + [88]) = $8
	*($11 + [96]) = $8
	*($11 + [112]) = (int_64)0
	$10 = CALL db_lowerbound_i64($8, $8, (int_64)-4157495357179166720, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $14(($11 + [88]), $10) + [40]) == (int_32)[1]), [112])
	
.LABEL $label$1
	*((($11 + [48]) + [32])) = [0]
	*($11 + [64]) = (int_64)-1
	*($11 + [72]) = (int_64)0
	$8 = *($0)
	*($11 + [48]) = $8
	*($11 + [56]) = $8
	$10 = CALL db_find_i64($8, $8, (int_64)-3102536757352830784, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $15(($11 + [48]), $10)
	CALL eosio_assert(((int_32)*($6 + [28]) == (int_32)($11 + [48])), [176])
	
.LABEL $label$2
	$10 = [0]
	$2 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($2, [240])
	*(($11 + [40])) = [0]
	*($11 + [24]) = (int_64)-1
	*($11 + [32]) = (int_64)0
	$8 = *($0)
	*($11 + [8]) = $8
	*($11 + [16]) = $8
	$3 = CALL db_find_i64($8, $8, (int_64)-4157658851255844864, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$10 = CALL $16(($11 + [8]), $3)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($11 + [8])), [176])
	CALL eosio_assert([1], [272])
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($11 + [8])), [320])
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)CALL $fimport$2()), [368])
	$8 = *($10)
	$3 = ($10 + [16])
	CALL eosio_assert(((int_64)*(($6 + [16])) == (int_64)*($3)), [432])
	$1 = ((int_64)*($10 + [8]) + (int_64)*($6 + [8]))
	*($10 + [8]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)*($10 + [8]) < (int_64)4611686018427387904), [512])
	CALL eosio_assert(((int_64)$8 == (int_64)*($10)), [544])
	CALL eosio_assert([1], [608])
	CALL memcpy(($11 + [128]), $10, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($11 + [128]) | [8]), ($10 + [8]), [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($11 + [128]) + [16]), $3, [8])
	CALL db_update_i64(*($10 + [28]), (int_64)0, ($11 + [128]), [24])
	$10 = (($11 + [8]) + [16])
	if ( (uint_64)($8 <= *($10)) ){ goto $label$3 }
	*($10) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	goto $label$3 
	
.LABEL $label$4
	$7 = *($0)
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)CALL $fimport$2()), [624])
	*(($3 = CALL $38([40])) + [16]) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	CALL eosio_assert([1], [688])
	$5 = ($3 + [16])
	$4 = ($3 + [8])
	$8 = (int_64)5462355
	
.LOOP $label$6:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$9 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	CALL eosio_assert($9, [752])
	*($3 + [24]) = ($11 + [8])
	*($3) = $1
	*(($4 + [8])) = *(($6 + [16]))
	*($4) = *($6 + [8])
	CALL eosio_assert([1], [608])
	CALL memcpy(($11 + [128]), $3, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($11 + [128]) | [8]), $4, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($11 + [128]) + [16]), $5, [8])
	$8 = *($3)
	$9 = CALL db_store_i64(*((($11 + [8]) + [8])), (int_64)-4157658851255844864, $7, $8, ($11 + [128]), [24])
	*($3 + [28]) = $9
	$10 = (($11 + [8]) + [16])
	if ( (uint_64)($8 <= *($10)) ){ goto $label$9 }
	*($10) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($11 + [208]) = $3
	$8 = *($3)
	*($11 + [128]) = $8
	*($11 + [184]) = $9
	$4 = ($11 + [36])
	$10 = *($4)
	if ( ((uint_32)$10 >= (uint_32)*(($11 + [40]))) ){ goto $label$11 }
	*($10 + [8]) = $8
	*($10 + [16]) = $9
	*($11 + [208]) = [0]
	*($10) = $3
	*($4) = ($10 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $17(($11 + [32]), ($11 + [208]), ($11 + [128]), ($11 + [184]))
	
.LABEL $label$10
	$10 = *($11 + [208])
	*($11 + [208]) = [0]
	if ( ($10 == 0) ){ goto $label$3 }
	CALL $39($10)
	
.LABEL $label$3
	$3 = (($11 + [88]) + [8])
	$10 = CALL db_lowerbound_i64(*($11 + [88]), *($3), (int_64)-4157495357179166720, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$13 }
	$10 = CALL $14(($11 + [88]), $10)
	$1 = *($0)
	CALL eosio_assert([1], [272])
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)($11 + [88])), [320])
	CALL eosio_assert(((int_64)*($11 + [88]) == (int_64)CALL $fimport$2()), [368])
	$8 = *($10)
	$0 = ($6 + [16])
	CALL eosio_assert(((int_64)*($0) == (int_64)*(($10 + [16]))), [432])
	$7 = ((int_64)*($10 + [8]) + (int_64)*($6 + [8]))
	*($10 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)*($10 + [8]) < (int_64)4611686018427387904), [512])
	CALL eosio_assert(((int_64)*($0) == (int_64)*(($10 + [32]))), [784])
	$7 = (int_64)
	*($10 + [24]) = $7(*($10 + [24]) - *($6 + [8])))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [832])
	CALL eosio_assert(((int_64)*($10 + [24]) < (int_64)4611686018427387904), [864])
	CALL eosio_assert(((int_64)$8 == (int_64)*($10)), [544])
	*($11 + [192]) = (($11 + [128]) + [41])
	*($11 + [188]) = ($11 + [128])
	*($11 + [184]) = ($11 + [128])
	*($11 + [200]) = ($11 + [184])
	*($11 + [212]) = ($10 + [8])
	*($11 + [208]) = $10
	*($11 + [216]) = ($10 + [24])
	*($11 + [220]) = ($10 + [40])
	CALL $18(($11 + [208]), ($11 + [200]))
	CALL db_update_i64(*($10 + [48]), $1, ($11 + [128]), [41])
	$10 = (($11 + [88]) + [16])
	if ( (uint_64)($8 <= *($10)) ){ goto $label$12 }
	*($10) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	goto $label$12 
	
.LABEL $label$13
	$1 = *($0)
	CALL eosio_assert(((int_64)*($11 + [88]) == (int_64)CALL $fimport$2()), [624])
	$10 = CALL $38([56])
	CALL $19($10)
	*($10 + [44]) = ($11 + [88])
	$8 = *(($6 + [16]))
	$7 = *($6 + [8])
	*($10 + [24]) = $7
	*(($10 + [16])) = $8
	*($10 + [8]) = $7
	*(($10 + [32])) = $8
	*($10 + [24]) = (int_64)0
	*($10 + [40]) = [1]
	*($11 + [192]) = (($11 + [128]) + [41])
	*($11 + [188]) = ($11 + [128])
	*($11 + [184]) = ($11 + [128])
	*($11 + [200]) = ($11 + [184])
	*($11 + [212]) = ($10 + [8])
	*($11 + [208]) = $10
	*($11 + [216]) = ($10 + [24])
	*($11 + [220]) = ($10 + [40])
	CALL $18(($11 + [208]), ($11 + [200]))
	$8 = *($10)
	$3 = CALL db_store_i64(*($3), (int_64)-4157495357179166720, $1, $8, ($11 + [128]), [41])
	*($10 + [48]) = $3
	$0 = (($11 + [88]) + [16])
	if ( (uint_64)($8 <= *($0)) ){ goto $label$14 }
	*($0) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*($11 + [208]) = $10
	$8 = *($10)
	*($11 + [128]) = $8
	*($11 + [184]) = $3
	$9 = ($11 + [116])
	$0 = *($9)
	if ( ((uint_32)$0 >= (uint_32)*((($11 + [88]) + [32]))) ){ goto $label$16 }
	*($0 + [8]) = $8
	*($0 + [16]) = $3
	*($11 + [208]) = [0]
	*($0) = $10
	*($9) = ($0 + [24])
	goto $label$15 
	
.LABEL $label$16
	CALL $20(($11 + [112]), ($11 + [208]), ($11 + [128]), ($11 + [184]))
	
.LABEL $label$15
	$10 = *($11 + [208])
	*($11 + [208]) = [0]
	if ( ($10 == 0) ){ goto $label$12 }
	CALL $39($10)
	
.LABEL $label$12
	CALL eosio_assert($2, [896])
	CALL eosio_assert($2, [944])
	$10 = CALL db_next_i64(*($6 + [32]), ($11 + [128]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$17 }
	CALL $15(($11 + [48]), $10)
	
.LABEL $label$17
	CALL $21(($11 + [48]), $6)
	$0 = *($11 + [32])
	if ( ($0 == 0) ){ goto $label$18 }
	$3 = ($11 + [36])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$20 }
	
.LOOP $label$21:
	$10 = ($10 + [-24])
	$6 = *($10)
	*($10) = [0]
	if ( ($6 == 0) ){ goto $label$22 }
	CALL $39($6)
	
.LABEL $label$22
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$21 }
	$10 = *(($11 + [32]))
	goto $label$19 
	
.LABEL $label$20
	$10 = $0
	
.LABEL $label$19
	*($3) = $0
	CALL $39($10)
	
.LABEL $label$18
	$0 = *($11 + [72])
	if ( ($0 == 0) ){ goto $label$23 }
	$3 = ($11 + [76])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$25 }
	
.LOOP $label$26:
	$10 = ($10 + [-24])
	$6 = *($10)
	*($10) = [0]
	if ( ($6 == 0) ){ goto $label$27 }
	CALL $39($6)
	
.LABEL $label$27
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$26 }
	$10 = *(($11 + [72]))
	goto $label$24 
	
.LABEL $label$25
	$10 = $0
	
.LABEL $label$24
	*($3) = $0
	CALL $39($10)
	
.LABEL $label$23
	$0 = *($11 + [112])
	if ( ($0 == 0) ){ goto $label$28 }
	$3 = ($11 + [116])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$30 }
	
.LOOP $label$31:
	$10 = ($10 + [-24])
	$6 = *($10)
	*($10) = [0]
	if ( ($6 == 0) ){ goto $label$32 }
	CALL $39($6)
	
.LABEL $label$32
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$31 }
	$10 = *(($11 + [112]))
	goto $label$29 
	
.LABEL $label$30
	$10 = $0
	
.LABEL $label$29
	*($3) = $0
	CALL $39($10)
	
.LABEL $label$28
	*([0] + [4]) = ($11 + [224])
}

int_32 .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10134]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10136])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10134]) = [1]
	$7 = ($7 << [16])
	*([0] + [10136]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10136])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10136]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10134]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10134]) = [1]
	$3 = ($3 << [16])
	*([0] + [10136]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10136])
	
.LABEL $label$8
	*([0] + [10136]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10028])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9836]
	$1 = (((int_32)$2 * (int_32)[12]) + [9836])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $35([1644], $0)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $36($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10048])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [688])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [752])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [1184])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [1184])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $38(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $40($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $39($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $39($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$9 = [0]
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$7 = *($1)
	*($10 + [8]) = $7
	*($10 + [16]) = $2
	$8 = (uint_64)$3 >> (uint_64)(int_64)8
	$1 = CALL db_find_i64($7, $2, (int_64)3607749779137757184, $8)
	if ( ((int_32)$1) < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $31(($10 + [8]), $1) + [16]) == (int_32)($10 + [8])), [176])
	$4 = *(($10 + [32]))
	$6 = *(($10 + [36]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$6 }
	$9 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)(uint_64)*(*($9) + [8]) >> (uint_64)(int_64)8) == (int_64)$8) ){ goto $label$6 }
	$6 = $9
	$1 = ($9 + [-24])
	$9 = $1
	if ( ((int_32)($1 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	$9 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($10 + [8])), [176])
	goto $label$3 
	
.LABEL $label$5
	*($0 + [8]) = $3
	*($0) = (int_64)0
	CALL eosio_assert([1], [688])
	
.LOOP $label$9:
	$1 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$1 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($1, [752])
	$6 = *($10 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$9 = [0]
	$1 = CALL db_find_i64(*($10 + [8]), *(($10 + [16])), (int_64)3607749779137757184, $8)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $31(($10 + [8]), $1)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($10 + [8])), [176])
	
.LABEL $label$3
	*($0) = *($9)
	*(($0 + [8])) = *(($9 + [8]))
	$6 = *($10 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($10 + [36])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$14:
	$9 = ($9 + [-24])
	$1 = *($9)
	*($9) = [0]
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $39($1)
	
.LABEL $label$15
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$14 }
	$9 = *(($10 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$9 = $6
	
.LABEL $label$12
	*($5) = $6
	CALL $39($9)
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1152])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $38([32])
	$6 = CALL $32($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $33(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $39($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10140])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}