(data (i32.const 8192) "eosio.token\00")
(data (i32.const 8204) "transfer\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8299) "eostransfer\00")
(data (i32.const 8311) "bugtransfer\00")
(data (i32.const 8323) "Invalid token transfer\00")
(data (i32.const 8346) "only core token allowed\00")
(data (i32.const 8370) "bet must large or equal than 0.1000\00")
(data (i32.const 8406) "invalid token type\00")
(data (i32.const 8425) "failed to get transfer type\00")
(data (i32.const 8453) "stake\00")
(data (i32.const 8459) "token amount must large or equal than 10\00")
(data (i32.const 8500) "no draw chance remained\00")
(data (i32.const 8524) "luckey drawing\00")
(data (i32.const 8539) "drawresult\00")
(data (i32.const 8550) "unsupported token\00")
(data (i32.const 8568) "had not stake before\00")
(data (i32.const 8589) "unstake amount larger then staked amount\00")
(data (i32.const 8630) "unstake record not found\00")
(data (i32.const 8655) "this one had been released or restaked\00")
(data (i32.const 8694) "unexpected err in restake\00")
(data (i32.const 8720) "unstaked asset are locked\00")
(data (i32.const 8746) "unstake token\00")
(data (i32.const 8760) "bet number should between 2 and 96\00")
(data (i32.const 8795) "unregisted account\00")
(data (i32.const 8814) "welcome to our game ecosystem!\00")
(data (i32.const 8845) "result is already exist\00")
(data (i32.const 8869) "no stake info for this account\00")
(data (i32.const 8900) "stake bonus\00")
(data (i32.const 8912) "stake bounus\00")
(data (i32.const 8925) "unexpected err in registe_inviter\00")
(data (i32.const 8959) "plz wait one hour since last drawing\00")
(data (i32.const 8996) "read_transaction failed\00")
(data (i32.const 9020) "you bet too much, ramining token is not enough to payout\00")
(data (i32.const 9077) "unkown type token\00")
(data (i32.const 9095) "bet id:\00")
(data (i32.const 9103) " winner!\00")
(data (i32.const 9112) " recommand reward!\00")
(data (i32.const 9131) "function lock\00")
(data (i32.const 9145) "unexpected err when unlock eos\00")
(data (i32.const 9176) "unexpected err when unlock token\00")
(data (i32.const 9209) "function unlock\00")
(data (i32.const 9225) "write\00")
(data (i32.const 9231) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9280) "invalid symbol name\00")
(data (i32.const 9300) "Should be a valid number\00")
(data (i32.const 9325) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9384) "unable to find key\00")
(data (i32.const 9403) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9454) "error reading iterator\00")
(data (i32.const 9477) "read\00")
(data (i32.const 9482) "get\00")
(data (i32.const 9486) "cannot pass end iterator to modify\00")
(data (i32.const 9521) "object passed to modify is not in multi_index\00")
(data (i32.const 9567) "cannot modify objects in table of another contract\00")
(data (i32.const 9618) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9677) "cannot create objects in table of another contract\00")
(data (i32.const 9728) "cannot pass end iterator to erase\00")
(data (i32.const 9762) "cannot increment end iterator\00")
(data (i32.const 9792) "object passed to erase is not in multi_index\00")
(data (i32.const 9837) "cannot erase objects in table of another contract\00")
(data (i32.const 9887) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9940) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9994) "cannot decrement iterator at beginning of table\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "memset" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$5 (param i64)))
(import "env" "require_recipient" (func $fimport$6 (param i64)))
(import "env" "send_inline" (func $fimport$7 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$10 (result i64)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$13 (result i64)))
(import "env" "db_idx64_find_primary" (func $fimport$14 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$15 (param i32 i64 i32)))
(import "env" "db_store_i64" (func $fimport$16 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$17 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "transaction_size" (func $fimport$18 (result i32)))
(import "env" "read_transaction" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$20 (param i32 i32 i32)))
(import "env" "db_previous_i64" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$22 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$24 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$26 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$27 (param i32)))
(import "env" "abort" (func $fimport$28))
(import "env" "memmove" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$40 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$41 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$44 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$46 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$47 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$48 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $3))
(export "_Znwj" (func $112))
(export "_ZdlPv" (func $114))
(export "_Znaj" (func $113))
(export "_ZdaPv" (func $115))
(table $0 14 14 anyfunc)
(elem (i32.const 1) $4 $6 $8 $10 $12 $14 $15 $16 $17 $18 $19 $21 $22)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18452))
(global $global$2 i32 (i32.const 18452))


void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $125($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $100($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $119($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $119($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $116($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9225])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9225])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9225])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9225])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9225])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9454])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $129($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([32])
	$6 = CALL $97($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $98(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $132($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

int_32 .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9231])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9280])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [9477])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = (int_64)3725400663636608032
	$5 = *($2 + [8])
	if ( ((int_64)$5 == (int_64)4800772) ){ goto $label$1 }
	$4 = (int_64)6138663591592764928
	if ( ((int_64)$5 == (int_64)1397703940) ){ goto $label$1 }
	CALL eosio_assert([0], [9077])
	$5 = *(($2 + [8]))
	
.LABEL $label$1
	$6 = *($1)
	*(($3 + [40])) = [0]
	*($3 + [16]) = $6
	*($3 + [8]) = $4
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$2 = CALL $91(($3 + [8]), (uint_64)$5 >> (uint_64)(int_64)8), [9384]
	*($0) = *($2))
	*(($0 + [8])) = *(($2 + [8]))
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$2 }
	$7 = ($3 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $1
	
.LABEL $label$3
	*($7) = $1
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [48])
}

int_32 .FUNC $91 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9403])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $96($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9403])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9521])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9567])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [9618])
	CALL eosio_assert([1], [9225])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9225])
	CALL memcpy(($4 | [8]), $5, [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-8281834279150152704) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-8281834279150152703
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [9677])
	*(($5 = CALL _Znwj([32])) + [16]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($6 = ($5 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [9225])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [9225])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-8281834279150152704, $2, (int_64)-8281834279150152704, ($4 + [16]), [16])
	*($5 + [20]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-8281834279150152704) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-8281834279150152703
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-8281834279150152704
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-8281834279150152704
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $111(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

int_32 .FUNC $123 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $118($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $120($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $131($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8213])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $131 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10048]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10052])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10048]) = [1]
	$2 = ($2 << [16])
	*([0] + [10052]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10052])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10052]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10048]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10048]) = [1]
	$3 = ($3 << [16])
	*([0] + [10052]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10052])
	
.LABEL $label$10
	*([0] + [10052]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $132 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18440])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18248]
	$3 = (((int_32)$1 * (int_32)[12]) + [18248])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $128($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $118($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $126 (int_32 $0)
{
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [9225])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9477])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $125 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = (int_64)0
	*($2 + [16]) = (int_64)0
	$3 = ($0 + [288])
	$4 = *(($0 + [316]))
	if ( ((int_32)$4 == (int_32)*(($0 + [312]))) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$3), [9403])
	if ( $4 ){ goto $label$1 }
	$4 = ($2 + [16])
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($3), *(($0 + [296])), (int_64)-8281834279150152704, (int_64)-8281834279150152704)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $76($3, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$3), [9403])
	goto $label$1 
	
.LABEL $label$3
	$4 = ($2 + [16])
	
.LABEL $label$1
	*(($2 + [8])) = *(($4 + [8]))
	*($2) = *($4)
	$5 = *($1 + [8])
	if ( ((int_64)$5 != (int_64)1397703940) ){ goto $label$5 }
	$6 = *($1)
	$5 = *($2)
	CALL eosio_assert(((uint_64)$5 >= (uint_64)$6), [9145])
	*($2) = (int_64))($5 - $6)
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_64)$5 != (int_64)4800772) ){ goto $label$6 }
	$6 = *($1)
	$5 = *($2 + [8])
	CALL eosio_assert(((uint_64)$5 >= (uint_64)$6), [9176])
	*($2 + [8]) = (int_64))($5 - $6)
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9209])
	
.LABEL $label$4
	CALL $77($3, $2, *($0))
	$global$0 = ($2 + [32])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$0), [9403])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4406680248264425472, (int_64)4406680248264425472)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $39($0, $4)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$0), [9403])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9486])
	CALL $74($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $75($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9454])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $129($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $103(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $69(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $132($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [9403])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6749905004821217280, (int_64)-6749905004821217280)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $78($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [9403])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9486])
	CALL $79($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $80($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9792])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9837])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9887])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [44]))
	$6 = *(($1 + [48]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3102536759825661952, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_32 .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9762])
	$2 = *($0 + [4])
	$3 = *($2 + [48])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3102536759825661952, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [48]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [9403])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $50($6, CALL $fimport$8(*($6), *($6 + [8]), (int_64)-3102536759825661952, $5))
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [9403])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [48])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3102536759825661952, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [9403])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $50($7, CALL $fimport$8(*($7), *($7 + [8]), (int_64)-3102536759825661952, $6))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [9403])
	
.LABEL $label$2
	*(($4 + [48])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $127(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $128 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	float_64 $11
	float_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	float_64 $19
	float_64 $20
	int_64 $21
	$1 = ($global$0 - [192])
	$global$0 = $1
	CALL require_auth(*($0))
	*($1 + [120]) = (int_64)0
	*($1 + [112]) = (int_64)0
	*($1 + [128]) = (int_64)0
	*($1 + [136]) = (int_64)0
	*($1 + [144]) = (int_64)0
	$2 = ($0 + [208])
	$3 = *(($0 + [236]))
	if ( ((int_32)$3 == (int_32)*(($0 + [232]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)$2), [9403])
	if ( $3 ){ goto $label$1 }
	$3 = ($1 + [112])
	goto $label$1 
	
.LABEL $label$2
	$3 = CALL db_find_i64(*($2), *(($0 + [216])), (int_64)4406680248264425472, (int_64)4406680248264425472)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $39($2, $3)
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)$2), [9403])
	goto $label$1 
	
.LABEL $label$3
	$3 = ($1 + [112])
	
.LABEL $label$1
	*((($1 + [72]) + [32])) = *(($3 + [32]))
	*(($4 = (($1 + [72]) + [24]))) = *(($3 + [24]))
	*((($1 + [72]) + [16])) = *(($3 + [16]))
	*(($5 = (($1 + [72]) + [8]))) = *(($3 + [8]))
	*($1 + [72]) = *($3)
	$6 = *($4)
	$7 = *($5)
	$8 = *($1 + [72])
	$4 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)-4157661383434960896, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$9 = ($0 + [168])
	$3 = CALL $40($9, $3)
	$10 = (($1 + [112]) + [32])
	$11 = (CASTING float_64)(uint_64 $7)
	$12 = (CASTING float_64)(uint_64 $8)
	$13 = ($1 + [188])
	$14 = ($0 + [184])
	
.LOOP $label$5:
	$15 = *($0)
	$16 = *($3 + [24])
	$17 = *($3 + [16])
	$18 = *($3 + [8])
	CALL eosio_assert([1], [9486])
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$9), [9521])
	CALL eosio_assert(((int_64)*($9) == (int_64)CALL $fimport$10()), [9567])
	$19 = (CASTING float_64)(uint_64 ((uint_64)$18 / (uint_64)$6))
	$20 = ((float_64)$12 * (float_64)$19)
	if ( (((float_64)$20 < (float_64)(float_64)18446744073709551615) & ((float_64)$20 >= (float_64)(float_64)0)) ){ goto $label$7 }
	$18 = (int_64)0
	goto $label$6 
	
.LABEL $label$7
	$18 = (Rounds 0)($20)
	
.LABEL $label$6
	$21 = ( $8 ? $18 : (uint_64)($8 <= $18) )
	*($3 + [16]) = ((int_64)$21 + (int_64)$17)
	$20 = ((float_64)$11 * (float_64)$19)
	if ( (((float_64)$20 < (float_64)(float_64)18446744073709551615) & ((float_64)$20 >= (float_64)(float_64)0)) ){ goto $label$9 }
	$18 = (int_64)0
	goto $label$8 
	
.LABEL $label$9
	$18 = (Rounds 0)($20)
	
.LABEL $label$8
	$17 = ( $7 ? $18 : (uint_64)($7 <= $18) )
	*($3 + [24]) = ((int_64)$17 + (int_64)$16)
	$18 = *($3)
	CALL eosio_assert([1], [9618])
	*((($1 + [152]) + [8])) = $10
	*($1 + [156]) = ($1 + [112])
	*($1 + [152]) = ($1 + [112])
	*($1 + [168]) = ($1 + [152])
	*((($1 + [176]) + [8])) = ($3 + [16])
	*($13) = ($3 + [24])
	*($1 + [180]) = ($3 + [8])
	*($1 + [176]) = $3
	CALL $41(($1 + [176]), ($1 + [168]))
	CALL db_update_i64(*($3 + [36]), $15, ($1 + [112]), [32])
	if ( (uint_64)($18 <= *($14)) ){ goto $label$10 }
	*($14) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$7 = (int_64))($7 - $17)
	$8 = (int_64))($8 - $21)
	CALL eosio_assert([1], [9762])
	$3 = CALL db_next_i64(*(($3 + [36])), ($1 + [112]))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$4 }
	$3 = CALL $40($9, $3)
	goto $label$5 
	
.LABEL $label$4
	*($5) = (int_64)0
	*($1 + [72]) = (int_64)0
	CALL $42($2, ($1 + [72]), *($0))
	*($1 + [64]) = (int_64)1397703940
	*($1 + [56]) = $8
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9231])
	$8 = (int_64)5459781
	
.LOOP $label$13:
	$3 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$18 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$8 = $18
	$9 = [1]
	$14 = $4
	$4 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$8 = $18
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$14 = ($4 + [1])
	$4 = $14
	if ( $9 ){ goto $label$15 }
	$9 = [1]
	$4 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$9 = [0]
	
.LABEL $label$11
	CALL eosio_assert($9, [9280])
	*((($1 + [24]) + [8])) = *((($1 + [56]) + [8]))
	*($1 + [24]) = *($1 + [56])
	CALL $43($0, ($1 + [24]))
	*($1 + [48]) = (int_64)4800772
	*($1 + [40]) = $7
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9231])
	$8 = (int_64)18753
	
.LOOP $label$17:
	$14 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$8 = $7
	$14 = [1]
	$4 = $3
	$3 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$8 = $7
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$9 = ($3 + [1])
	$3 = $9
	if ( $4 ){ goto $label$19 }
	$14 = [1]
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$17 }
	
.LABEL $label$16
	CALL eosio_assert($14, [9280])
	*((($1 + [8]) + [8])) = *((($1 + [40]) + [8]))
	*($1 + [8]) = *($1 + [40])
	CALL $43($0, ($1 + [8]))
	$global$0 = ($1 + [192])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $129($5)
	CALL read_action_data($2, $5)
	CALL $132($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

void .FUNC $6 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [128])
	$global$0 = $2
	*($2 + [56]) = $1
	CALL require_auth($1)
	*($2 + [48]) = ($0 + [248])
	CALL $44(($2 + [64]), ($2 + [48]), ($2 + [56]))
	$3 = ($2 + [48])
	$4 = *($2 + [68])
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = [0]
	if ( ((int_64)*($2 + [56]) != (int_64)*($4 + [8])) ){ goto $label$1 }
	$3 = *($2 + [64])
	$5 = $4
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	$4 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($4, [8630])
	CALL eosio_assert((*($5 + [32]) == 0), [8655])
	$6 = *($5 + [16])
	*($2 + [64]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $3))
	CALL eosio_assert($4, [9728])
	CALL $45(($2 + [64]))
	CALL $46(*($2 + [48]), $5)
	$7 = ($0 + [168])
	$1 = *($2 + [56])
	$4 = *(($0 + [196]))
	$8 = *(($0 + [192]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$5 = ($4 + [-24])
	$3 = *($5)
	if ( ((int_64)*($3) == (int_64)$1) ){ goto $label$5 }
	$4 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$7), [9403])
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	$5 = CALL db_find_i64(*($7), *(($0 + [176])), (int_64)-4157661383434960896, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $40($7, $5)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$7), [9403])
	
.LABEL $label$3
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [8694])
	$9 = *($0)
	$1 = *($3 + [8])
	CALL eosio_assert($5, [9486])
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$7), [9521])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$10()), [9567])
	*($3 + [8]) = ((int_64)$1 + (int_64)$6)
	$1 = *($3)
	CALL eosio_assert([1], [9618])
	*($2 + [112]) = (($2 + [64]) + [32])
	*($2 + [108]) = ($2 + [64])
	*($2 + [104]) = ($2 + [64])
	*($2 + [120]) = ($2 + [104])
	*($2 + [12]) = ($3 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = ($3 + [16])
	*($2 + [20]) = ($3 + [24])
	CALL $41(($2 + [8]), ($2 + [120]))
	CALL db_update_i64(*($3 + [36]), $9, ($2 + [64]), [32])
	$5 = ($0 + [184])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$7 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($2 + [72]) = (int_64)0
	*($2 + [64]) = (int_64)0
	*($2 + [80]) = (int_64)0
	*($2 + [88]) = (int_64)0
	*($2 + [96]) = (int_64)0
	$3 = ($0 + [208])
	$5 = *(($0 + [236]))
	if ( ((int_32)$5 == (int_32)*(($0 + [232]))) ){ goto $label$9 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$3), [9403])
	if ( $5 ){ goto $label$8 }
	$5 = ($2 + [64])
	goto $label$8 
	
.LABEL $label$9
	$5 = CALL db_find_i64(*($3), *(($0 + [216])), (int_64)4406680248264425472, (int_64)4406680248264425472)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$5 = CALL $39($3, $5)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$3), [9403])
	goto $label$8 
	
.LABEL $label$10
	$5 = ($2 + [64])
	
.LABEL $label$8
	*((($2 + [8]) + [32])) = *(($5 + [32]))
	*(($4 = (($2 + [8]) + [24]))) = *(($5 + [24]))
	*(($8 = (($2 + [8]) + [16]))) = *(($5 + [16]))
	*((($2 + [8]) + [8])) = *(($5 + [8]))
	*($2 + [8]) = *($5)
	*($4) = ((int_64)*($4) + (int_64)$6)
	*($8) = (int_64))(*($8) - $6)
	CALL $42($3, ($2 + [8]), *($0))
	$global$0 = ($2 + [128])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $129($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9477])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $132($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $4 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	CALL require_auth(*($0))
	CALL require_recipient($3)
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $129($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [32])) = (int_64)1398362884
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9231])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [9280])
	*($3 + [40]) = (int_64)0
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = ($3 + [16])
	CALL $48(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $132($6)
	
.LABEL $label$8
	*(($1 = (($3 + [48]) + [8]))) = *(($3 + [32]))
	*($3 + [48]) = *($3 + [24])
	$8 = *(($3 + [40]))
	$10 = *($3 + [16])
	*((($3 + [64]) + [8])) = *($1)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$12 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $12
	*(($3 + [8])) = $12
	$12 = *($3 + [64])
	*($3) = $12
	*($3 + [80]) = $12
	CALL void $1((int_32 $10), (int_64 $3), (int_32 $8), (int_64 $5))
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $2 (int_32 $0)
{
	int_32 $1
	$1 = ($1 & [1])
	$1 = *($0)
	if ( ((int_32)( *($0 + [4]) ? uint_32($1 >> [1]) : $1 ) != (int_32)[12]) ){ goto $label$2 }
	$0 = ( *($0 + [8]) ? ($0 + [1]) : $1 )
	$1 = *($0)
	if ( ((($1 + [-97]) & [255]) <= [26]) ){ goto $label$3 }
	if ( ((uint_32)(($1 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$2 }
	
.LABEL $label$3
	$1 = *($0 + [1])
	if ( ((($1 + [-97]) & [255]) <= [26]) ){ goto $label$4 }
	if ( ((uint_32)(($1 + [-49]) & [255]) >= (uint_32)[5]) ){ goto $label$2 }
	
.LABEL $label$4
	$1 = *($0 + [2])
	if ( ((($1 + [-97]) & [255]) <= [26]) ){ goto $label$5 }
	if ( ((uint_32)(($1 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$2 }
	
.LABEL $label$5
	$1 = *($0 + [3])
	if ( ((($1 + [-97]) & [255]) <= [26]) ){ goto $label$6 }
	if ( ((uint_32)(($1 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$2 }
	
.LABEL $label$6
	$1 = *($0 + [4])
	if ( ((($1 + [-97]) & [255]) <= [26]) ){ goto $label$7 }
	if ( ((uint_32)(($1 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$2 }
	
.LABEL $label$7
	$1 = *($0 + [5])
	if ( ((($1 + [-97]) & [255]) <= [26]) ){ goto $label$8 }
	if ( ((uint_32)(($1 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$2 }
	
.LABEL $label$8
	$1 = *($0 + [6])
	if ( ((($1 + [-97]) & [255]) <= [26]) ){ goto $label$9 }
	if ( ((uint_32)(($1 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$2 }
	
.LABEL $label$9
	$1 = *($0 + [7])
	if ( ((($1 + [-97]) & [255]) <= [26]) ){ goto $label$10 }
	if ( ((uint_32)(($1 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$2 }
	
.LABEL $label$10
	$1 = *($0 + [8])
	if ( ((($1 + [-97]) & [255]) <= [26]) ){ goto $label$11 }
	if ( ((uint_32)(($1 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$2 }
	
.LABEL $label$11
	$1 = *($0 + [9])
	if ( ((($1 + [-97]) & [255]) <= [26]) ){ goto $label$12 }
	if ( ((uint_32)(($1 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$2 }
	
.LABEL $label$12
	$1 = *($0 + [10])
	if ( ((($1 + [-97]) & [255]) <= [26]) ){ goto $label$1 }
	if ( ((uint_32)(($1 + [-49]) & [255]) <= (uint_32)[4]) ){ goto $label$1 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$0 = *($0 + [11])
	return (((($0 + [-97]) & [255]) <= [26]) | ((($0 + [-49]) & [255]) <= [5]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [656])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8192]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$6 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$8 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8204]
	$7 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$14 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$8 = ($8 + [-91])
	goto $label$12 
	
.LABEL $label$14
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$10
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$9 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8299]
	$2 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$20 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$8 = ($8 + [-91])
	goto $label$18 
	
.LABEL $label$20
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$16
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$2 = ((int_64)$9 | (int_64)$2)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$15 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)$1 != (int_64)3725400663636608032) ){ goto $label$7 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8204]
	$7 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$26 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$8 = ($8 + [-91])
	goto $label$24 
	
.LABEL $label$26
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$22
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$21 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8311]
	$2 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$32 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$8 = ($8 + [-91])
	goto $label$30 
	
.LABEL $label$32
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$28
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$2 = ((int_64)$9 | (int_64)$2)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$27 }
	
.LABEL $label$7
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8192]
	$7 = (int_64)0
	
.LOOP $label$33:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$38 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$8 = ($8 + [-91])
	goto $label$36 
	
.LABEL $label$38
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$37
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$34
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$33 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$41 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8299]
	$7 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$47 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$8 = ($8 + [-91])
	goto $label$45 
	
.LABEL $label$47
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$43
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$42 }
	if ( ((int_64)$2 == (int_64)$7) ){ goto $label$40 }
	
.LABEL $label$41
	if ( ((int_64)$1 != (int_64)3725400663636608032) ){ goto $label$48 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8311]
	$7 = (int_64)0
	
.LOOP $label$49:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$54 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$8 = ($8 + [-91])
	goto $label$52 
	
.LABEL $label$54
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$50
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$49 }
	if ( ((int_64)$2 == (int_64)$7) ){ goto $label$40 }
	
.LABEL $label$48
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$39 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8299]
	$7 = (int_64)0
	
.LOOP $label$55:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$60 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$8 = ($8 + [-91])
	goto $label$58 
	
.LABEL $label$60
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$59
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$57
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$56
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$55 }
	if ( ((int_64)$2 == (int_64)$7) ){ goto $label$39 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8311]
	$7 = (int_64)0
	
.LOOP $label$61:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$66 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$65 }
	$8 = ($8 + [-91])
	goto $label$64 
	
.LABEL $label$66
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$65
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$64
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$63
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$62
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$61 }
	if ( ((int_64)$2 == (int_64)$7) ){ goto $label$39 }
	
.LABEL $label$40
	*(($3 + [224])) = $0
	*(($3 + [232])) = (int_64)-1
	*(($3 + [240])) = (int_64)0
	*(($3 + [248])) = [0]
	*(($3 + [264])) = $0
	*(($3 + [272])) = (int_64)-1
	*(($3 + [280])) = (int_64)0
	*(($3 + [288])) = [0]
	*(($3 + [304])) = $0
	*(($3 + [312])) = (int_64)-1
	*(($3 + [320])) = (int_64)0
	*(($3 + [328])) = [0]
	*(($3 + [332])) = [0]
	*($3 + [216]) = $0
	*($3 + [208]) = $0
	*($3 + [256]) = $0
	*($3 + [296]) = $0
	*($3 + [336]) = $0
	*(($3 + [352])) = (int_64)-1
	*(($3 + [344])) = $0
	*(($3 + [360])) = (int_64)0
	*(($3 + [368])) = [0]
	*(($3 + [384])) = $0
	*(($3 + [392])) = (int_64)-1
	*(($3 + [400])) = (int_64)0
	*(($3 + [408])) = [0]
	*(($3 + [424])) = $0
	*(($3 + [432])) = (int_64)-1
	*(($3 + [440])) = (int_64)0
	*(($3 + [448])) = [0]
	*(($3 + [464])) = $0
	*(($3 + [472])) = (int_64)-1
	*(($3 + [480])) = [0]
	*($3 + [376]) = $0
	*($3 + [416]) = $0
	*($3 + [456]) = $0
	*(($3 + [492])) = [0]
	*(($3 + [484])) = (int_64)0
	*(($3 + [504])) = $0
	*(($3 + [512])) = (int_64)-1
	*(($3 + [520])) = (int_64)0
	*(($3 + [528])) = [0]
	*(($3 + [544])) = $0
	*(($3 + [552])) = (int_64)-1
	*(($3 + [560])) = (int_64)0
	*(($3 + [568])) = [0]
	*(($3 + [584])) = $0
	*(($3 + [592])) = (int_64)-1
	*(($3 + [600])) = (int_64)0
	*(($3 + [608])) = [0]
	*($3 + [496]) = $0
	*($3 + [536]) = $0
	*($3 + [576]) = $0
	*(($3 + [624])) = $0
	*(($3 + [632])) = (int_64)-1
	*(($3 + [640])) = (int_64)0
	*(($3 + [648])) = [0]
	*($3 + [616]) = $0
	if ( ((int_64)$2 <= (int_64)3626283120069181439) ){ goto $label$79 }
	if ( ((int_64)$2 <= (int_64)5606348217378668543) ){ goto $label$78 }
	if ( ((int_64)$2 > (int_64)6138858854829174271) ){ goto $label$76 }
	if ( ((int_64)$2 == (int_64)5606348217378668544) ){ goto $label$75 }
	if ( ((int_64)$2 != (int_64)5606361046891511808) ){ goto $label$67 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [1]
	*($3 + [64]) = *($3 + [136])
	CALL $5(($3 + [208]), ($3 + [64]))
	goto $label$67 
	
.LABEL $label$79
	if ( ((int_64)$2 > (int_64)-4994024814571159553) ){ goto $label$77 }
	if ( ((int_64)$2 == (int_64)-6749905004821217280) ){ goto $label$74 }
	if ( ((int_64)$2 == (int_64)-4998252998346932224) ){ goto $label$73 }
	if ( ((int_64)$2 != (int_64)-4994048603321270272) ){ goto $label$67 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [2]
	*($3 + [48]) = *($3 + [152])
	CALL $7(($3 + [208]), ($3 + [48]))
	goto $label$67 
	
.LABEL $label$78
	if ( ((int_64)$2 == (int_64)3626283120069181440) ){ goto $label$72 }
	if ( ((int_64)$2 == (int_64)4510807589534739968) ){ goto $label$71 }
	if ( ((int_64)$2 != (int_64)5454311842506244096) ){ goto $label$67 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [3]
	*($3 + [40]) = *($3 + [160])
	CALL $9(($3 + [208]), ($3 + [40]))
	goto $label$67 
	
.LABEL $label$77
	if ( ((int_64)$2 == (int_64)-4994024814571159552) ){ goto $label$70 }
	if ( ((int_64)$2 == (int_64)-4425754204123955200) ){ goto $label$69 }
	if ( ((int_64)$2 != (int_64)-3102536759395478224) ){ goto $label$67 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [4]
	*($3 + [72]) = *($3 + [128])
	CALL $11(($3 + [208]), ($3 + [72]))
	goto $label$67 
	
.LABEL $label$76
	if ( ((int_64)$2 == (int_64)7111881242768834560) ){ goto $label$68 }
	if ( ((int_64)$2 != (int_64)6138858854829174272) ){ goto $label$67 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [5]
	*($3) = *($3 + [200])
	CALL $13(($3 + [208]), $3)
	goto $label$67 
	
.LABEL $label$75
	*($3 + [172]) = [0]
	*($3 + [168]) = [6]
	*($3 + [32]) = *($3 + [168])
	CALL $7(($3 + [208]), ($3 + [32]))
	goto $label$67 
	
.LABEL $label$74
	*($3 + [148]) = [0]
	*($3 + [144]) = [7]
	*($3 + [56]) = *($3 + [144])
	CALL $7(($3 + [208]), ($3 + [56]))
	goto $label$67 
	
.LABEL $label$73
	*($3 + [124]) = [0]
	*($3 + [120]) = [8]
	*($3 + [80]) = *($3 + [120])
	CALL $7(($3 + [208]), ($3 + [80]))
	goto $label$67 
	
.LABEL $label$72
	*($3 + [108]) = [0]
	*($3 + [104]) = [9]
	*($3 + [96]) = *($3 + [104])
	CALL $7(($3 + [208]), ($3 + [96]))
	goto $label$67 
	
.LABEL $label$71
	*($3 + [188]) = [0]
	*($3 + [184]) = [10]
	*($3 + [16]) = *($3 + [184])
	CALL $13(($3 + [208]), ($3 + [16]))
	goto $label$67 
	
.LABEL $label$70
	*($3 + [196]) = [0]
	*($3 + [192]) = [11]
	*($3 + [8]) = *($3 + [192])
	CALL $20(($3 + [208]), ($3 + [8]))
	goto $label$67 
	
.LABEL $label$69
	*($3 + [180]) = [0]
	*($3 + [176]) = [12]
	*($3 + [24]) = *($3 + [176])
	CALL $7(($3 + [208]), ($3 + [24]))
	goto $label$67 
	
.LABEL $label$68
	*($3 + [116]) = [0]
	*($3 + [112]) = [13]
	*($3 + [88]) = *($3 + [112])
	CALL $7(($3 + [208]), ($3 + [88]))
	
.LABEL $label$67
	CALL $23(($3 + [208]))
	
.LABEL $label$39
	CALL $126([0])
	$global$0 = ($3 + [656])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [15]) = $1
	$1 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($4 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($4 + [17]) & [-16])
	$1 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $123($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $116($0)
}

void .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth($1)
	CALL eosio_assert(CALL $32($0, $1), [8500])
	$3 = ([10000] - ((uint_32)CALL $33($0) % (uint_32)[10000]))
	*($2 + [24]) = $3
	CALL $34(($2 + [112]), $0, ($2 + [24]))
	$4 = (CASTING uint_64)(uint_32 $3)
	$5 = *($0)
	$6 = (int_64)6
	
.LOOP $label$1:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$1 }
	$6 = (int_64)0
	$7 = (int_64)59
	$3 = [8204]
	$8 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$7 }
	$9 = *($3)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$9 = ($9 + [-91])
	goto $label$5 
	
.LABEL $label$7
	$10 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$3
	$3 = ($3 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$8 = ((int_64)$10 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$2 }
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$3 = CALL $128([8524])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$11 }
	*($2 + [8]) = ($3 << [1])
	$9 = (($2 + [8]) | [1])
	if ( $3 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$11 = (($3 + [16]) & [-16])
	$9 = CALL _Znwj($11)
	*($2 + [8]) = ($11 | [1])
	*($2 + [16]) = $9
	*($2 + [12]) = $3
	
.LABEL $label$10
	CALL memcpy($9, [8524], $3)
	
.LABEL $label$9
	*(($9 + $3)) = [0]
	*(($9 = (($2 + [72]) + [24]))) = [0]
	*((($2 + [24]) + [24])) = *((($2 + [112]) + [8]))
	$3 = (($2 + [8]) + [8])
	*(($2 + [64])) = *($3)
	*($3) = [0]
	*($2 + [32]) = $1
	*($2 + [72]) = (int_64)6138663591592764928
	*($2 + [80]) = $8
	*($2 + [88]) = (int_64)0
	*($2 + [24]) = *($0)
	*($2 + [40]) = *($2 + [112])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	*(($3 = CALL _Znwj([16]))) = $5
	*($3 + [8]) = (int_64)3617214756542218240
	*((($2 + [72]) + [36])) = [0]
	$11 = ($3 + [16])
	*($9) = $11
	*(($2 + [92])) = $11
	*($2 + [88]) = $3
	*($2 + [100 align=4]) = (int_64)0
	$3 = *($2 + [56])
	$9 = ( *((($2 + [24]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($9 + [32])
	$6 = (CASTING uint_64)(uint_32 $9)
	$9 = ($2 + [100])
	
.LOOP $label$12:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$12 }
	if ( ($3 == 0) ){ goto $label$14 }
	CALL $35($9, $3)
	$9 = *(($2 + [104]))
	$3 = *(($2 + [100]))
	goto $label$13 
	
.LABEL $label$14
	$9 = [0]
	$3 = [0]
	
.LABEL $label$13
	*($2 + [140]) = $3
	*($2 + [136]) = $3
	*($2 + [144]) = $9
	*($2 + [128]) = ($2 + [136])
	*($2 + [152]) = ($2 + [24])
	CALL $36(($2 + [152]), ($2 + [128]))
	CALL $37(($2 + [136]), ($2 + [72]))
	$3 = *($2 + [136])
	CALL send_inline($3, (*($2 + [140]) - $3))
	$3 = *($2 + [136])
	if ( ($3 == 0) ){ goto $label$15 }
	*($2 + [140]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$15
	$3 = *($2 + [100])
	if ( ($3 == 0) ){ goto $label$16 }
	*(($2 + [104])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$3 = *($2 + [88])
	if ( ($3 == 0) ){ goto $label$17 }
	*(($2 + [92])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$17
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$18
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$19
	$5 = *($0)
	$6 = (int_64)6
	
.LOOP $label$20:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$20 }
	$6 = (int_64)0
	$7 = (int_64)59
	$3 = [8539]
	$8 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$6 > (uint_64)(int_64)9) ){ goto $label$26 }
	$9 = *($3)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$9 = ($9 + [-91])
	goto $label$24 
	
.LABEL $label$26
	$10 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$22
	$3 = ($3 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$8 = ((int_64)$10 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$21 }
	*((($2 + [72]) + [16])) = *(($2 + [120]))
	*($2 + [72]) = $4
	*($2 + [96]) = $1
	*($2 + [24]) = $5
	*($2 + [32]) = $8
	*($2 + [80]) = *($2 + [112])
	*(($3 = CALL _Znwj([16]))) = $5
	*($3 + [8]) = (int_64)3617214756542218240
	*(($2 + [60])) = [0]
	$9 = ($3 + [16])
	*(($2 + [48])) = $9
	*(($2 + [44])) = $9
	*($2 + [40]) = $3
	*($2 + [52 align=4]) = (int_64)0
	CALL $35(($2 + [52]), [32])
	$3 = *((($2 + [24]) + [32]))
	$9 = *($2 + [52])
	*($2 + [140]) = $9
	*($2 + [136]) = $9
	*($2 + [144]) = $3
	*($2 + [152]) = ($2 + [136])
	*($2 + [8]) = ($2 + [72])
	CALL $38(($2 + [8]), ($2 + [152]))
	CALL $37(($2 + [136]), ($2 + [24]))
	$3 = *($2 + [136])
	CALL send_inline($3, (*($2 + [140]) - $3))
	$3 = *($2 + [136])
	if ( ($3 == 0) ){ goto $label$27 }
	*($2 + [140]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$27
	$3 = *($2 + [52])
	if ( ($3 == 0) ){ goto $label$28 }
	*(($2 + [56])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$28
	$3 = *($2 + [40])
	if ( ($3 == 0) ){ goto $label$29 }
	*(($2 + [44])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$29
	$global$0 = ($2 + [160])
	return (unreachable)
	
.LABEL $label$8
	CALL $116(($2 + [8]))
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	*($2 + [8]) = $1
	CALL $47(($0 + [368]), ($2 + [8]), *($0))
	$global$0 = ($2 + [16])
}

void .FUNC $16 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [176])
	$global$0 = $2
	*($2 + [128]) = $1
	CALL require_auth($1)
	*($2 + [120]) = ($0 + [248])
	CALL $44(($2 + [136]), ($2 + [120]), ($2 + [128]))
	$3 = ($2 + [120])
	$4 = *($2 + [140])
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = [0]
	if ( ((int_64)*($2 + [128]) != (int_64)*($4 + [8])) ){ goto $label$1 }
	$3 = *($2 + [136])
	$5 = $4
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8630])
	CALL eosio_assert((*($5 + [32]) == 0), [8655])
	CALL eosio_assert(((uint_64)(int_64))(((int_64)((uint_64)CALL $fimport$13() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($5 + [24])) > (uint_64)(int_64)29), [8720])
	*($2 + [144]) = (int_64)0
	*($2 + [136]) = (int_64)0
	*($2 + [152]) = (int_64)0
	*($2 + [160]) = (int_64)0
	*($2 + [168]) = (int_64)0
	$6 = ($0 + [208])
	$4 = *(($0 + [236]))
	if ( ((int_32)$4 == (int_32)*(($0 + [232]))) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$6), [9403])
	if ( $4 ){ goto $label$3 }
	$4 = ($2 + [136])
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($6), *(($0 + [216])), (int_64)4406680248264425472, (int_64)4406680248264425472)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $39($6, $4)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$6), [9403])
	goto $label$3 
	
.LABEL $label$5
	$4 = ($2 + [136])
	
.LABEL $label$3
	*((($2 + [80]) + [32])) = *(($4 + [32]))
	*((($2 + [80]) + [24])) = *(($4 + [24]))
	*(($7 = (($2 + [80]) + [16]))) = *(($4 + [16]))
	*((($2 + [80]) + [8])) = *(($4 + [8]))
	*($2 + [80]) = *($4)
	*($7) = (int_64))(*($7) - *($5 + [16]))
	CALL $42($6, ($2 + [80]), *($0))
	$8 = *($5 + [16])
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9231])
	$1 = (int_64)18753
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $9
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [9280])
	*(($2 + [24])) = (int_64)4800772
	*($2 + [72]) = (int_64)4800772
	*($2 + [16]) = $8
	*($2 + [64]) = $8
	CALL $43($0, ($2 + [16]))
	$1 = *(($5 + [16]))
	*($2 + [48]) = $1
	$8 = *($5 + [8])
	*($2 + [56]) = (int_64)4800772
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9231])
	$1 = (int_64)18753
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$9 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$1 = $9
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$1 = $9
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$15 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$6 = [0]
	
.LABEL $label$11
	CALL eosio_assert($6, [9280])
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$4 = CALL $128([8746])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$19 }
	*($2 + [32]) = ($4 << [1])
	$6 = (($2 + [32]) | [1])
	if ( $4 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$7 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($2 + [32]) = ($7 | [1])
	*($2 + [40]) = $6
	*($2 + [36]) = $4
	
.LABEL $label$18
	CALL memcpy($6, [8746], $4)
	
.LABEL $label$17
	*(($6 + $4)) = [0]
	*(($2 + [8])) = *((($2 + [48]) + [8]))
	*($2) = *($2 + [48])
	CALL $53($0, (int_64)3725400663636608032, $8, $2, ($2 + [32]))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($2 + [40]))
	
.LABEL $label$20
	*($2 + [136]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $3))
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9728])
	CALL $45(($2 + [136]))
	CALL $46(*($2 + [120]), $5)
	$global$0 = ($2 + [176])
	return (unreachable)
	
.LABEL $label$16
	CALL $116(($2 + [32]))
}

void .FUNC $17 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [408])
	$5 = *(($0 + [436]))
	$4 = *(($0 + [432]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [9403])
	if ( $7 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [416])), (int_64)-2063328927043551232, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $54($3, $6) + [8]) == (int_32)$3), [9403])
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [408])) == (int_64)CALL $fimport$10()), [9677])
	*(($6 = CALL _Znwj([24])) + [8]) = $3
	*($6) = $1
	CALL eosio_assert([1], [9225])
	CALL memcpy(($2 + [16]), $6, [8])
	$1 = *($6)
	$4 = CALL db_store_i64(*(($0 + [416])), (int_64)-2063328927043551232, $8, $1, ($2 + [16]), [8])
	*($6 + [12]) = $4
	$5 = ($0 + [424])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$6 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($2 + [8]) = $6
	$1 = *($6)
	*($2 + [16]) = $1
	*($2 + [4]) = $4
	$7 = ($0 + [436])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [440]))) ){ goto $label$8 }
	*($5 + [8]) = $1
	*($5 + [16]) = $4
	*($2 + [8]) = [0]
	*($5) = $6
	*($7) = ($5 + [24])
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( $6 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$8
	CALL $55(($0 + [432]), ($2 + [8]), ($2 + [16]), ($2 + [4]))
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$7
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [56]) = $1
	CALL require_auth($1)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)4800772), [8550])
	$4 = ($0 + [168])
	$5 = *($2)
	$7 = *(($0 + [196]))
	$6 = *(($0 + [192]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($7 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$7 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [9403])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$2 = CALL db_find_i64(*($4), *(($0 + [176])), (int_64)-4157661383434960896, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $40($4, $2)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [9403])
	goto $label$1 
	
.LABEL $label$5
	CALL eosio_assert([0], [8568])
	
.LABEL $label$1
	$1 = *($8 + [8])
	CALL eosio_assert(((uint_64)$1 >= (uint_64)$5), [8589])
	$9 = *($0)
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9486])
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [9521])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$10()), [9567])
	*($8 + [8]) = (int_64))($1 - $5)
	$1 = *($8)
	CALL eosio_assert([1], [9618])
	*($3 + [120]) = (($3 + [64]) + [32])
	*($3 + [116]) = ($3 + [64])
	*($3 + [112]) = ($3 + [64])
	*($3 + [136]) = ($3 + [112])
	*($3 + [12]) = ($8 + [8])
	*($3 + [8]) = $8
	*($3 + [16]) = ($8 + [16])
	*($3 + [20]) = ($8 + [24])
	CALL $41(($3 + [8]), ($3 + [136]))
	CALL db_update_i64(*($8 + [36]), $9, ($3 + [64]), [32])
	$2 = ($0 + [184])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$6 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$8 = ($0 + [248])
	*($3 + [48]) = $8
	CALL $44(($3 + [64]), ($3 + [48]), ($3 + [56]))
	$2 = *($3 + [68])
	if ( ($2 == 0) ){ goto $label$8 }
	$7 = ($2 + [8])
	if ( ((int_64)*($3 + [56]) != (int_64)*($7)) ){ goto $label$8 }
	$1 = $5
	if ( *($2 + [32]) ){ goto $label$9 }
	$1 = ((int_64)*($2 + [16]) + (int_64)$5)
	
.LABEL $label$9
	$9 = *($0)
	CALL eosio_assert([1], [9486])
	$8 = *($3 + [48])
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$8), [9521])
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL $fimport$10()), [9567])
	*($2 + [16]) = $1
	*($3 + [128]) = *(($2 + [8]))
	$1 = *($2)
	$10 = CALL current_time()
	*($2 + [32]) = [0]
	*($2 + [24]) = ((int_64)((uint_64)$10 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$1 == (int_64)*($2)), [9618])
	*($3 + [120]) = (($3 + [64]) + [33])
	*($3 + [116]) = ($3 + [64])
	*($3 + [112]) = ($3 + [64])
	*($3 + [136]) = ($3 + [112])
	*($3 + [12]) = $7
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + [16])
	*($3 + [20]) = ($2 + [24])
	*($3 + [24]) = ($2 + [32])
	CALL $49(($3 + [8]), ($3 + [136]))
	CALL db_update_i64(*($2 + [44]), $9, ($3 + [64]), [33])
	if ( (uint_64)($1 <= *($8 + [16])) ){ goto $label$10 }
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($3 + [8]) = *($7)
	if ( (CALL $127(($3 + [128]), ($3 + [8]), [8]) == 0) ){ goto $label$7 }
	$7 = ($2 + [48])
	$2 = *($7)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$11 }
	$2 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)-3102536759825661952, ($3 + [136]), $1)
	*($7) = $2
	
.LABEL $label$11
	CALL db_idx64_update($2, $9, ($3 + [8]))
	goto $label$7 
	
.LABEL $label$8
	$7 = ($0 + [256])
	$2 = CALL db_lowerbound_i64(*($8), *($7), (int_64)-3102536759825661952, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$13 }
	CALL $50($8, $2)
	*($3 + [68]) = [0]
	*($3 + [64]) = $8
	$9 = ((int_64)*(*(CALL $51(($3 + [64])) + [4])) + (int_64)1)
	goto $label$12 
	
.LABEL $label$13
	$9 = (int_64)1
	
.LABEL $label$12
	$1 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [248])) == (int_64)CALL $fimport$10()), [9677])
	*(($2 = CALL _Znwj([56])) + [40]) = $8
	*($2) = $9
	*($2 + [16]) = $5
	*($2 + [8]) = *($3 + [56])
	$9 = CALL current_time()
	*($2 + [32]) = [0]
	*($2 + [24]) = ((int_64)((uint_64)$9 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [120]) = (($3 + [64]) + [33])
	*($3 + [116]) = ($3 + [64])
	*($3 + [112]) = ($3 + [64])
	*($3 + [136]) = ($3 + [112])
	$8 = ($2 + [8])
	*($3 + [12]) = $8
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + [16])
	*($3 + [20]) = ($2 + [24])
	*($3 + [24]) = ($2 + [32])
	CALL $49(($3 + [8]), ($3 + [136]))
	$9 = *($2)
	*($2 + [44]) = CALL db_store_i64(*($7), (int_64)-3102536759825661952, $1, $9, ($3 + [64]), [33])
	$7 = ($0 + [264])
	if ( (uint_64)($9 <= *($7)) ){ goto $label$14 }
	*($7) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$9 = *(($0 + [256]))
	$10 = *($2)
	*($3 + [8]) = *($8)
	*($2 + [48]) = CALL db_idx64_store($9, (int_64)-3102536759825661952, $1, $10, ($3 + [8]))
	*($3 + [8]) = $2
	$1 = *($2)
	*($3 + [64]) = $1
	$7 = *(($2 + [44]))
	*($3 + [112]) = $7
	$6 = ($0 + [276])
	$8 = *($6)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [280]))) ){ goto $label$16 }
	*($8 + [8]) = $1
	*($8 + [16]) = $7
	*($3 + [8]) = [0]
	*($8) = $2
	*($6) = ($8 + [24])
	$2 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( $2 ){ goto $label$15 }
	goto $label$7 
	
.LABEL $label$16
	CALL $52(($0 + [272]), ($3 + [8]), ($3 + [64]), ($3 + [112]))
	$2 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	
.LABEL $label$15
	CALL _ZdlPv($2)
	
.LABEL $label$7
	*($3 + [72]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [96]) = (int_64)0
	$8 = ($0 + [208])
	$2 = *(($0 + [236]))
	if ( ((int_32)$2 == (int_32)*(($0 + [232]))) ){ goto $label$18 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$8), [9403])
	if ( $2 ){ goto $label$17 }
	$2 = ($3 + [64])
	goto $label$17 
	
.LABEL $label$18
	$2 = CALL db_find_i64(*($8), *(($0 + [216])), (int_64)4406680248264425472, (int_64)4406680248264425472)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$19 }
	$2 = CALL $39($8, $2)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$8), [9403])
	goto $label$17 
	
.LABEL $label$19
	$2 = ($3 + [64])
	
.LABEL $label$17
	*((($3 + [8]) + [32])) = *(($2 + [32]))
	*(($7 = (($3 + [8]) + [24]))) = *(($2 + [24]))
	*(($6 = (($3 + [8]) + [16]))) = *(($2 + [16]))
	*((($3 + [8]) + [8])) = *(($2 + [8]))
	*($3 + [8]) = *($2)
	*($7) = (int_64))(*($7) - $5)
	*($6) = ((int_64)*($6) + (int_64)$5)
	CALL $42($8, ($3 + [8]), *($0))
	$global$0 = ($3 + [144])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $129($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1398362884
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [9231])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [9280])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9477])
	CALL memcpy(($3 + [24]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [9477])
	$1 = (($3 + [24]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [9477])
	CALL memcpy((($3 + [24]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $132($6)
	
.LABEL $label$8
	*(($2 = (($3 + [48]) + [8]))) = *(($1 + [8]))
	*($3 + [48]) = *($1)
	$8 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($2)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$10 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [64])
	*($3 + [8]) = $10
	*($3 + [80]) = $10
	CALL void $1((int_32 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [48])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	$7 = *($3 + [8])
	$8 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$2 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$2 = $6
	$8 = [1]
	$11 = $10
	$10 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$2 = $6
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$10 < (int_32)[6])
	$11 = ($10 + [1])
	$10 = $11
	if ( $8 ){ goto $label$6 }
	$8 = [1]
	$10 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	CALL eosio_assert($8, [8323])
	CALL eosio_assert(((int_64)$7 == (int_64)1397703940), [8346])
	CALL eosio_assert(((int_64)$9 > (int_64)999), [8370])
	*(($8 = (($5 + [32]) + [8]))) = *(($3 + [8]))
	*($5 + [32]) = *($3)
	$10 = CALL $117(($5 + [16]), $4)
	*(($5 + [8])) = *($8)
	*($5) = *($5 + [32])
	CALL $26($0, $1, $2, $5, $10)
	if ( ((*($10) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($10 + [8]))
	
.LABEL $label$1
	$global$0 = ($5 + [48])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $129($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9231])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [9280])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $24(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $132($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $25(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [9677])
	*(($5 = CALL _Znwj([56])) + [40]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($6 = ($5 + [8]))) = *(($3 + [8]))
	*(($7 = ($5 + [16]))) = *(($3 + [16]))
	*(($8 = ($5 + [24]))) = *(($3 + [24]))
	*(($9 = ($5 + [32]))) = *(($3 + [32]))
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = $6
	*($4 + [72]) = $5
	*($4 + [80]) = $7
	*($4 + [84]) = $8
	*($4 + [88]) = $9
	CALL $104(($4 + [72]), ($4 + [64]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4406680248264425472, $2, (int_64)4406680248264425472, $4, [40])
	*($5 + [44]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4406680248264425472) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4406680248264425473
	
.LABEL $label$1
	*($4 + [72]) = $5
	*($4) = (int_64)4406680248264425472
	*($4 + [48]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4406680248264425472
	*($3 + [16]) = $6
	*($4 + [72]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $105(($1 + [24]), ($4 + [72]), $4, ($4 + [48]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [96])
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [80])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	$7 = *($3 + [8])
	$8 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$2 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$2 = $6
	$8 = [1]
	$11 = $10
	$10 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$2 = $6
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$10 < (int_32)[6])
	$11 = ($10 + [1])
	$10 = $11
	if ( $8 ){ goto $label$6 }
	$8 = [1]
	$10 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	CALL eosio_assert($8, [8323])
	CALL eosio_assert(((int_64)$7 == (int_64)4800772), [8406])
	CALL $117(($5 + [64]), $4)
	*($5 + [76]) = [0]
	*($5 + [56]) = [0]
	*($5 + [48]) = (int_64)0
	CALL eosio_assert((CALL $29(($5 + [64]), ($5 + [48])) == 0), [8425])
	$10 = *($5 + [48])
	$8 = CALL $128([8453])
	if ( ((int_32)$8 != (int_32)( *($5 + [52]) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$11 }
	if ( (CALL $124(($5 + [48]), [0], [-1], [8453], $8) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL eosio_assert(((int_64)$9 > (int_64)99999), [8459])
	*(($8 = (($5 + [32]) + [8]))) = *(($3 + [8]))
	*($5 + [32]) = *($3)
	$10 = CALL $117(($5 + [16]), $4)
	*(($5 + [8])) = *($8)
	*($5) = *($5 + [32])
	CALL $26($0, $1, $2, $5, $10)
	if ( (*($10) & [1]) ){ goto $label$12 }
	$10 = [1]
	if ( (*($5 + [48]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	CALL _ZdlPv(*($10 + [8]))
	$10 = [1]
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	CALL $30($0, $1, $9)
	$10 = [1]
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($5 + [56])))
	if ( (*($5 + [64]) & $10) ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((*($5 + [64]) & $10) == 0) ){ goto $label$1 }
	
.LABEL $label$7
	CALL _ZdlPv(*($5 + [72]))
	
.LABEL $label$1
	$global$0 = ($5 + [80])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL require_recipient(*($1 + [24]))
}

void .FUNC $58 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [144])
	$global$0 = $3
	$4 = ($0 + [128])
	$6 = *(($0 + [156]))
	$5 = *(($0 + [152]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$4), [9403])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [136])), (int_64)3607749778980136960, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $57($4, $7) + [72]) == (int_32)$4), [9403])
	
.LABEL $label$2
	CALL eosio_assert([0], [8925])
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$1
	$9 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$10()), [9677])
	*(($7 = CALL _Znwj([88])) + [72]) = $4
	*($7 + [8]) = $2
	*($7) = $1
	*($7 + [16]) = (int_64)0
	*($7 + [24]) = (int_64)0
	$1 = CALL current_time()
	*($7 + [40]) = (int_64)0
	*($7 + [48]) = (int_64)0
	*($7 + [56]) = (int_64)0
	*($7 + [64]) = [0]
	*($7 + [32]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [88]) = ($3 + [65])
	*($3 + [84]) = $3
	*($3 + [80]) = $3
	*($3 + [96]) = ($3 + [80])
	*($3 + [108]) = ($7 + [8])
	*($3 + [104]) = $7
	*($3 + [112]) = ($7 + [16])
	*($3 + [116]) = ($7 + [24])
	*($3 + [120]) = ($7 + [32])
	*($3 + [124]) = ($7 + [40])
	*($3 + [128]) = ($7 + [48])
	*($3 + [132]) = ($7 + [56])
	*($3 + [136]) = ($7 + [64])
	CALL $64(($3 + [104]), ($3 + [96]))
	$1 = *($7)
	$5 = CALL db_store_i64(*(($0 + [136])), (int_64)3607749778980136960, $9, $1, $3, [65])
	*($7 + [76]) = $5
	$6 = ($0 + [144])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$6 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($3 + [104]) = $7
	$1 = *($7)
	*($3) = $1
	*($3 + [80]) = $5
	$8 = ($0 + [156])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [160]))) ){ goto $label$9 }
	*($6 + [8]) = $1
	*($6 + [16]) = $5
	*($3 + [104]) = [0]
	*($6) = $7
	*($8) = ($6 + [24])
	$7 = *($3 + [104])
	*($3 + [104]) = [0]
	if ( $7 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $81(($0 + [152]), ($3 + [104]), $3, ($3 + [80]))
	$7 = *($3 + [104])
	*($3 + [104]) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($3 + [144])
}

int_64 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = (int_64)0
	$2 = ($0 + [8])
	$3 = *(($0 + [36]))
	if ( ((int_32)$3 == (int_32)*(($0 + [32]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$2), [9403])
	if ( $3 ){ goto $label$1 }
	$3 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$3 = CALL db_find_i64(*($2), *(($0 + [16])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $82($2, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$2), [9403])
	goto $label$1 
	
.LABEL $label$3
	$3 = ($1 + [8])
	
.LABEL $label$1
	*($1 + [8]) = ((int_64)*($3) + (int_64)1)
	CALL $83($2, ($1 + [8]), *($0))
	$4 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $4
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9454])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $129($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [40]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	CALL $107(($3 + [40]), ($3 + [32]))
	*($5 + [48]) = [-1]
	*($5 + [44]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $52(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $132($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9994])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3102536759825661952)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9940])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9940])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $50(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $125($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $53 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = *($0)
	$7 = (int_64)6
	
.LOOP $label$1:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = (int_64)59
	$0 = [8204]
	$9 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$7 }
	$10 = *($0)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$10 = ($10 + [-91])
	goto $label$5 
	
.LABEL $label$7
	$11 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$3
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$11 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$2 }
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*($5 + [16]) = $2
	*($5 + [8]) = $6
	*($5 + [24]) = *($3)
	$10 = CALL $117((($5 + [8]) + [32]), $4)
	*($5 + [64]) = $9
	*($5 + [56]) = $1
	*(($0 = CALL _Znwj([16]))) = $6
	*($0 + [8]) = (int_64)3617214756542218240
	*((($5 + [56]) + [36])) = [0]
	$3 = ($0 + [16])
	*((($5 + [56]) + [24])) = $3
	*(($5 + [76])) = $3
	*($5 + [72]) = $0
	*($5 + [84 align=4]) = (int_64)0
	$0 = *($10)
	$10 = ( *((($5 + [8]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($10 + [32])
	$7 = (CASTING uint_64)(uint_32 $10)
	$10 = ($5 + [84])
	
.LOOP $label$8:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$8 }
	if ( ($0 == 0) ){ goto $label$10 }
	CALL $35($10, $0)
	$10 = *(($5 + [88]))
	$0 = *(($5 + [84]))
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	$0 = [0]
	
.LABEL $label$9
	*($5 + [116]) = $0
	*($5 + [112]) = $0
	*($5 + [120]) = $10
	*($5 + [96]) = ($5 + [112])
	*($5 + [104]) = ($5 + [8])
	CALL $36(($5 + [104]), ($5 + [96]))
	CALL $37(($5 + [112]), ($5 + [56]))
	$0 = *($5 + [112])
	CALL send_inline($0, (*($5 + [116]) - $0))
	$0 = *($5 + [112])
	if ( ($0 == 0) ){ goto $label$11 }
	*($5 + [116]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$0 = *($5 + [84])
	if ( ($0 == 0) ){ goto $label$12 }
	*(($5 + [88])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$12
	$0 = *($5 + [72])
	if ( ($0 == 0) ){ goto $label$13 }
	*(($5 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$14
	$global$0 = ($5 + [128])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9454])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $129($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9477])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $55(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $132($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL $73(($3 + [32]), $2, $2)
	*($3 + [8]) = (int_64)1397703940
	*($3) = (int_64)0
	CALL eosio_assert([1], [9231])
	$2 = [0]
	$4 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9280])
	CALL $66(($3 + [16]), $1, $3)
	CALL eosio_assert(((int_64)*($3 + [24]) == (int_64)*($3 + [40])), [9325])
	$2 = ( ($3 + [16]) ? ($3 + [32]) : ((int_64)*($3 + [16]) < (int_64)*($3 + [32])) )
	*($0) = *($2)
	*(($0 + [8])) = *(($2 + [8]))
	$global$0 = ($3 + [48])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = *($0 + [12])
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = uint_32($3 >> [1])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$1 }
	$4 = ($0 + [12])
	
.LOOP $label$3:
	if ( ((int_32)*((($0 + $2) + [1])) != (int_32)[32]) ){ goto $label$1 }
	$2 = ($2 + [1])
	*($4) = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$1 }
	$4 = ($0 + [8])
	$5 = ($0 + [12])
	
.LOOP $label$4:
	if ( ((int_32)*((*($4) + $2)) != (int_32)[32]) ){ goto $label$1 }
	$2 = ($2 + [1])
	*($5) = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$4 }
	
.LABEL $label$1
	$6 = ($0 + [1])
	$7 = ($0 + [12])
	$8 = ($0 + [8])
	$9 = ($0 + [4])
	*($1) = (int_64)0
	$10 = *($0)
	$5 = ($10 & [1])
	if ( $5 ){ goto $label$6 }
	$11 = [5]
	goto $label$5 
	
.LABEL $label$6
	$11 = [0]
	
.LABEL $label$5
	
.LOOP $label$7:
	goto $label$33 
	
.LABEL $label$38
	CALL eosio_assert(((($3 + [-48]) & [255]) <= [10]), [9300])
	$2 = *($7)
	*($1) = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56) + (int_64)((int_64)*($1) * (int_64)10)) + (int_64)-48)
	$10 = *($0)
	$5 = ($10 & [1])
	if ( $5 ){ goto $label$21 }
	$11 = [5]
	goto $label$7 
	
.LABEL $label$37
	if ( ((int_32)$2 == (int_32)uint_32($10 >> [1])) ){ goto $label$19 }
	$11 = [1]
	goto $label$7 
	
.LABEL $label$36
	$4 = ($2 + [1])
	*($7) = $4
	$3 = $6
	if ( ($5 == 0) ){ goto $label$18 }
	$11 = [2]
	goto $label$7 
	
.LABEL $label$35
	$3 = *($8)
	$11 = [3]
	goto $label$7 
	
.LABEL $label$34
	$3 = *(($3 + $2))
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$33
	if ( ((int_32)$2 != (int_32)*($9)) ){ goto $label$20 }
	$11 = [6]
	goto $label$7 
	
.LABEL $label$32
	$4 = $2
	$11 = [7]
	goto $label$7 
	
.LABEL $label$31
	if ( $5 ){ goto $label$15 }
	$11 = [13]
	goto $label$7 
	
.LABEL $label$30
	$3 = uint_32($10 >> [1])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$11 }
	$11 = [14]
	goto $label$7 
	
.LABEL $label$29
	$2 = ($4 + [1])
	$3 = ([0] - $3)
	$4 = ($0 + [12])
	$11 = [15]
	goto $label$7 
	
.LABEL $label$28
	if ( ((int_32)*(($0 + $2)) != (int_32)[32]) ){ goto $label$10 }
	$11 = [16]
	goto $label$7 
	
.LABEL $label$27
	*($4) = $2
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[1]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$26
	$2 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$14 }
	$11 = [9]
	goto $label$7 
	
.LABEL $label$25
	$3 = ($0 + [8])
	$0 = ($0 + [12])
	$11 = [10]
	goto $label$7 
	
.LABEL $label$24
	if ( ((int_32)*((*($3) + $4)) != (int_32)[32]) ){ goto $label$12 }
	$11 = [12]
	goto $label$7 
	
.LABEL $label$23
	$4 = ($4 + [1])
	*($0) = $4
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$13 }
	$11 = [11]
	goto $label$7 
	
.LABEL $label$22
	return 
	
.LABEL $label$21
	$11 = [0]
	goto $label$7 
	
.LABEL $label$20
	$11 = [1]
	goto $label$7 
	
.LABEL $label$19
	$11 = [6]
	goto $label$7 
	
.LABEL $label$18
	$11 = [3]
	goto $label$7 
	
.LABEL $label$17
	$11 = [7]
	goto $label$7 
	
.LABEL $label$16
	$11 = [4]
	goto $label$7 
	
.LABEL $label$15
	$11 = [8]
	goto $label$7 
	
.LABEL $label$14
	$11 = [11]
	goto $label$7 
	
.LABEL $label$13
	$11 = [10]
	goto $label$7 
	
.LABEL $label$12
	$11 = [11]
	goto $label$7 
	
.LABEL $label$11
	$11 = [11]
	goto $label$7 
	
.LABEL $label$10
	$11 = [11]
	goto $label$7 
	
.LABEL $label$9
	$11 = [11]
	goto $label$7 
	
.LABEL $label$8
	$11 = [15]
	goto $label$7 
	$11
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9454])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $129($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [72]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [56])
	*($3 + [72]) = ($5 + [64])
	CALL $109(($3 + [40]), ($3 + [32]))
	*($5 + [76]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $81(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $132($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $116 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $132($0)
	
.LABEL $label$1
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $125($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $129($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10044])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $129($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $125($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $125($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	$2 = *($0)
	$3 = uint_32($2 >> [1])
	$4 = *($0 + [12])
	$5 = ($2 & [1])
	if ( $5 ){ goto $label$4 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$3 }
	$6 = ($0 + [12])
	
.LOOP $label$5:
	if ( ((int_32)*((($0 + $4) + [1])) != (int_32)[32]) ){ goto $label$3 }
	$4 = ($4 + [1])
	*($6) = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$6 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$3 }
	$7 = ($0 + [8])
	$8 = ($0 + [12])
	
.LOOP $label$6:
	if ( ((int_32)*((*($7) + $4)) != (int_32)[32]) ){ goto $label$3 }
	$4 = ($4 + [1])
	*($8) = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$3
	if ( ($5 == 0) ){ goto $label$7 }
	$3 = *(($0 + [4]))
	
.LABEL $label$7
	$7 = [-1]
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$9 }
	$5 = ($0 + [1])
	$8 = ($0 + [12])
	$9 = ($0 + [8])
	$10 = ($0 + [4])
	$7 = ($2 & [1])
	if ( $7 ){ goto $label$10 }
	$11 = [5]
	goto $label$8 
	
.LABEL $label$10
	$11 = [0]
	goto $label$8 
	
.LABEL $label$9
	$11 = [11]
	
.LABEL $label$8
	
.LOOP $label$11:
	goto $label$37 
	
.LABEL $label$42
	CALL $122($1, int_32(($4 << [24]) >> [24]))
	$4 = *($8)
	$2 = *($0)
	$7 = ($2 & [1])
	if ( $7 ){ goto $label$25 }
	$11 = [5]
	goto $label$11 
	
.LABEL $label$41
	if ( ((int_32)$4 == (int_32)uint_32(($2 & [254]) >> [1])) ){ goto $label$23 }
	$11 = [1]
	goto $label$11 
	
.LABEL $label$40
	$6 = ($4 + [1])
	*($8) = $6
	$3 = $5
	if ( ($7 == 0) ){ goto $label$22 }
	$11 = [2]
	goto $label$11 
	
.LABEL $label$39
	$3 = *($9)
	$11 = [3]
	goto $label$11 
	
.LABEL $label$38
	$4 = *(($3 + $4))
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$37
	if ( ((int_32)$4 != (int_32)*($10)) ){ goto $label$24 }
	$11 = [6]
	goto $label$11 
	
.LABEL $label$36
	$6 = $4
	$11 = [7]
	goto $label$11 
	
.LABEL $label$35
	if ( $7 ){ goto $label$19 }
	$11 = [13]
	goto $label$11 
	
.LABEL $label$34
	$7 = [0]
	$3 = uint_32(($2 & [254]) >> [1])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$16 }
	$11 = [14]
	goto $label$11 
	
.LABEL $label$33
	$4 = ($6 + [1])
	$7 = [0]
	$3 = ([0] - $3)
	$6 = ($0 + [12])
	$11 = [15]
	goto $label$11 
	
.LABEL $label$32
	if ( ((int_32)*(($0 + $4)) != (int_32)[32]) ){ goto $label$15 }
	$11 = [16]
	goto $label$11 
	
.LABEL $label$31
	*($6) = $4
	$4 = ($4 + [1])
	if ( ((int_32)($3 + $4) != (int_32)[1]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$30
	$7 = [0]
	$4 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$18 }
	$11 = [9]
	goto $label$11 
	
.LABEL $label$29
	$3 = ($0 + [8])
	$0 = ($0 + [12])
	$11 = [10]
	goto $label$11 
	
.LABEL $label$28
	if ( ((int_32)*((*($3) + $6)) != (int_32)[32]) ){ goto $label$12 }
	$11 = [12]
	goto $label$11 
	
.LABEL $label$27
	$6 = ($6 + [1])
	*($0) = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$17 }
	$11 = [11]
	goto $label$11 
	
.LABEL $label$26
	return $7
	
.LABEL $label$25
	$11 = [0]
	goto $label$11 
	
.LABEL $label$24
	$11 = [1]
	goto $label$11 
	
.LABEL $label$23
	$11 = [6]
	goto $label$11 
	
.LABEL $label$22
	$11 = [3]
	goto $label$11 
	
.LABEL $label$21
	$11 = [7]
	goto $label$11 
	
.LABEL $label$20
	$11 = [4]
	goto $label$11 
	
.LABEL $label$19
	$11 = [8]
	goto $label$11 
	
.LABEL $label$18
	$11 = [11]
	goto $label$11 
	
.LABEL $label$17
	$11 = [10]
	goto $label$11 
	
.LABEL $label$16
	$11 = [11]
	goto $label$11 
	
.LABEL $label$15
	$11 = [11]
	goto $label$11 
	
.LABEL $label$14
	$11 = [11]
	goto $label$11 
	
.LABEL $label$13
	$11 = [15]
	goto $label$11 
	
.LABEL $label$12
	$11 = [11]
	goto $label$11 
	return $11
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9477])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9477])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9477])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($3, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [9477])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $125($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9477])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $21 (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	*($2 + [8]) = $1
	CALL $31(($0 + [48]), ($2 + [8]), *($0))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [368])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $129($6)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	CALL memset(($3 + [80]), [0], [72])
	CALL $27(($3 + [80]))
	*($3 + [228]) = $1
	*($3 + [224]) = $1
	*($3 + [232]) = ($1 + $6)
	*($3 + [152]) = ($3 + [224])
	*($3 + [300]) = ($3 + [88])
	*($3 + [304]) = ($3 + [96])
	*($3 + [308]) = ($3 + [104])
	*($3 + [312]) = ($3 + [112])
	*($3 + [316]) = ($3 + [128])
	*($3 + [320]) = ($3 + [129])
	*($3 + [324]) = ($3 + [136])
	*($3 + [296]) = ($3 + [80])
	CALL $28(($3 + [296]), ($3 + [152]))
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL $132($1)
	
.LABEL $label$4
	CALL memcpy(($3 + [152]), ($3 + [80]), [72])
	CALL memcpy(($3 + [224]), ($3 + [152]), [72])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL memcpy(($3 + [296]), ($3 + [224]), [72])
	CALL memcpy(($3 + [8]), ($3 + [296]), [72])
	CALL void $1((int_32 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [368])
	return [1]
}

int_32 .FUNC $23 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [432]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [436])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [432]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [392]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [396])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [392]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [352]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [356])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [352]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [312]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [316])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [312]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [272]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [276])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [272]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [232]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [236])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [232]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$31 }
	$2 = ($0 + [196])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$33 }
	
.LOOP $label$34:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$35 }
	CALL _ZdlPv($4)
	
.LABEL $label$35
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$34 }
	$3 = *(($0 + [192]))
	goto $label$32 
	
.LABEL $label$33
	$3 = $1
	
.LABEL $label$32
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$31
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$36 }
	$2 = ($0 + [156])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$38 }
	
.LOOP $label$39:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$40 }
	CALL _ZdlPv($4)
	
.LABEL $label$40
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$39 }
	$3 = *(($0 + [152]))
	goto $label$37 
	
.LABEL $label$38
	$3 = $1
	
.LABEL $label$37
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$36
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$41 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$43 }
	
.LOOP $label$44:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$45 }
	CALL _ZdlPv($4)
	
.LABEL $label$45
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$44 }
	$3 = *(($0 + [112]))
	goto $label$42 
	
.LABEL $label$43
	$3 = $1
	
.LABEL $label$42
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$41
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$46 }
	$2 = ($0 + [76])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$48 }
	
.LOOP $label$49:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$50 }
	CALL _ZdlPv($4)
	
.LABEL $label$50
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$49 }
	$3 = *(($0 + [72]))
	goto $label$47 
	
.LABEL $label$48
	$3 = $1
	
.LABEL $label$47
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$46
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$51 }
	$2 = ($0 + [36])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$53 }
	
.LOOP $label$54:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$55 }
	CALL _ZdlPv($4)
	
.LABEL $label$55
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$54 }
	$3 = *(($0 + [32]))
	goto $label$52 
	
.LABEL $label$53
	$3 = $1
	
.LABEL $label$52
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$51
	return $0
}

void .FUNC $22 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [240])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ($0 + [168])
	$5 = *(($0 + [196]))
	$4 = *(($0 + [192]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [9403])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [176])), (int_64)-4157661383434960896, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $40($3, $6)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [9403])
	
.LABEL $label$1
	$6 = [0]
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8869])
	$9 = *($7 + [16])
	if ( (int_64)($9 == 0) ){ goto $label$7 }
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9231])
	$10 = (int_64)5459781
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$10 = $11
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$10 = $11
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$12 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	
.LABEL $label$8
	CALL eosio_assert($5, [9280])
	$10 = (int_64)0
	$12 = (int_64)59
	$6 = [8192]
	$13 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$18 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$5 = ($5 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$11 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$12 = ((int_64)$12 + (int_64)4294967291)
	$13 = ((int_64)$11 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$13 }
	*(($2 + [136])) = [0]
	*($2 + [152]) = (int_64)1397703940
	*($2 + [144]) = $9
	*($2 + [128]) = (int_64)0
	$6 = CALL $128([8900])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$21 }
	*($2 + [128]) = ($6 << [1])
	$5 = (($2 + [128]) | [1])
	if ( $6 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [128]) = ($4 | [1])
	*($2 + [136]) = $5
	*($2 + [132]) = $6
	
.LABEL $label$20
	CALL memcpy($5, [8900], $6)
	
.LABEL $label$19
	*(($5 + $6)) = [0]
	*((($2 + [48]) + [8])) = *((($2 + [144]) + [8]))
	*($2 + [48]) = *($2 + [144])
	CALL $53($0, $13, $1, ($2 + [48]), ($2 + [128]))
	if ( ((*($2 + [128]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($2 + [136]))
	
.LABEL $label$22
	*((($2 + [32]) + [8])) = (int_64)1397703940
	*($2 + [120]) = (int_64)1397703940
	*($2 + [32]) = $9
	*($2 + [112]) = $9
	CALL $43($0, ($2 + [32]))
	
.LABEL $label$7
	$12 = *($7 + [24])
	if ( (int_64)($12 == 0) ){ goto $label$23 }
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9231])
	$10 = (int_64)18753
	$6 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$10 = $11
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$10 = $11
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$28 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$5 = [0]
	
.LABEL $label$24
	CALL eosio_assert($5, [9280])
	*(($2 + [88])) = [0]
	*($2 + [104]) = (int_64)4800772
	*($2 + [96]) = $12
	*($2 + [80]) = (int_64)0
	$6 = CALL $128([8912])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$31 }
	*($2 + [80]) = ($6 << [1])
	$5 = (($2 + [80]) | [1])
	if ( $6 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [80]) = ($4 | [1])
	*($2 + [88]) = $5
	*($2 + [84]) = $6
	
.LABEL $label$30
	CALL memcpy($5, [8912], $6)
	
.LABEL $label$29
	*(($5 + $6)) = [0]
	*((($2 + [16]) + [8])) = *((($2 + [96]) + [8]))
	*($2 + [16]) = *($2 + [96])
	CALL $53($0, (int_64)3725400663636608032, $1, ($2 + [16]), ($2 + [80]))
	if ( ((*($2 + [80]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*($2 + [88]))
	
.LABEL $label$32
	*(($2 + [8])) = (int_64)4800772
	*($2 + [72]) = (int_64)4800772
	*($2) = $12
	*($2 + [64]) = $12
	CALL $43($0, $2)
	
.LABEL $label$23
	$11 = *($0)
	CALL eosio_assert($8, [9486])
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [9521])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$10()), [9567])
	*($7 + [16]) = (int_64)0
	*($7 + [24]) = (int_64)0
	$10 = *($7)
	CALL eosio_assert([1], [9618])
	*($2 + [208]) = (($2 + [160]) + [32])
	*($2 + [204]) = ($2 + [160])
	*($2 + [200]) = ($2 + [160])
	*($2 + [216]) = ($2 + [200])
	*($2 + [228]) = ($7 + [8])
	*($2 + [224]) = $7
	*($2 + [232]) = ($7 + [16])
	*($2 + [236]) = ($7 + [24])
	CALL $41(($2 + [224]), ($2 + [216]))
	CALL db_update_i64(*($7 + [36]), $11, ($2 + [160]), [32])
	$6 = ($0 + [184])
	if ( (uint_64)($10 <= *($6)) ){ goto $label$33 }
	*($6) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$33
	$global$0 = ($2 + [240])
	return (unreachable)
	
.LABEL $label$6
	CALL $116(($2 + [128]))
	
.LABEL $label$5
	CALL $116(($2 + [80]))
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $117(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $117(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9477])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $99(*($1), ($0 + [32]))
}

int_32 .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [32]) = (int_64)0
	*(($1 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [9231])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9280])
	*(($1 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [9231])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [9280])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [9280])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [9280])
	return $0
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_64 $20
	int_64 $21
	float_64 $22
	$5 = ($global$0 - [736])
	$global$0 = $5
	$6 = *($3 + [8])
	CALL $117(($5 + [576]), $4)
	*($5 + [588]) = [0]
	CALL $56(($5 + [576]), ($5 + [592]))
	$4 = *($5 + [592])
	*($5 + [575]) = $4
	CALL eosio_assert(((($4 + [-2]) & [255]) <= [95]), [8760])
	CALL $56(($5 + [576]), ($5 + [560]))
	$7 = ((int_64)$6 == (int_64)1397703940)
	$8 = ($0 + [128])
	$10 = *(($0 + [156]))
	$9 = *(($0 + [152]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	
.LOOP $label$4:
	$4 = ($10 + [-24])
	$11 = *($4)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$3 }
	$10 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($11 + [72]) == (int_32)$8), [9403])
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($8), *(($0 + [136])), (int_64)3607749778980136960, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $57($8, $4) + [72]) == (int_32)$8), [9403])
	goto $label$1 
	
.LABEL $label$5
	$12 = *($0)
	*($5 + [600]) = [0]
	*($5 + [592]) = (int_64)0
	if ( CALL $29(($5 + [576]), ($5 + [592])) ){ goto $label$6 }
	if ( (CALL $2(($5 + [592])) == 0) ){ goto $label$6 }
	$4 = ( *(($5 + [600])) ? (($5 + [592]) | [1]) : (*($5 + [592]) & [1]) )
	$10 = [0]
	
.LOOP $label$7:
	$9 = ($4 + $10)
	$11 = ($10 + [1])
	$10 = $11
	if ( *($9) ){ goto $label$7 }
	$13 = (CASTING uint_64)(uint_32 ($11 + [-1]))
	$14 = (int_64)0
	$15 = (int_64)59
	$12 = (int_64)0
	
.LOOP $label$8:
	$16 = (int_64)0
	if ( ((uint_64)$14 >= (uint_64)$13) ){ goto $label$9 }
	$10 = *($4)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$10 = ($10 + [-91])
	goto $label$10 
	
.LABEL $label$11
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$13 }
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	goto $label$12 
	
.LABEL $label$13
	$16 = ((int_64)$16 & (int_64)15)
	
.LABEL $label$12
	$4 = ($4 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$12 = ((int_64)$16 | (int_64)$12)
	$15 = ((int_64)$15 + (int_64)4294967291)
	if ( ((int_64)$15 != (int_64)55834574842) ){ goto $label$8 }
	
.LABEL $label$6
	CALL $58($0, $1, $12)
	if ( ((*($5 + [592]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($5 + [600])))
	
.LABEL $label$1
	$17 = ( (int_64)6138663591592764928 ? (int_64)3725400663636608032 : $7 )
	$18 = CALL $59($0)
	CALL eosio_assert([1], [9231])
	$4 = [0]
	$15 = (uint_64)$6 >> (uint_64)(int_64)8
	$14 = $15)
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$16 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$14 = $16
	$10 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$14 = $16
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$10 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $10 ){ goto $label$18 }
	$10 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$10 = [0]
	
.LABEL $label$14
	CALL eosio_assert($10, [9280])
	$10 = *(($0 + [156]))
	$9 = *(($0 + [152]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$28 }
	
.LOOP $label$30:
	$4 = ($10 + [-24])
	$11 = *($4)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$29 }
	$10 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$28 }
	CALL eosio_assert(((int_32)*($11 + [72]) == (int_32)$8), [9403])
	$14 = *($11 + [8])
	if ( ((int_64)$14 == (int_64)*($0)) ){ goto $label$25 }
	goto $label$27 
	
.LABEL $label$28
	$11 = [0]
	$4 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)3607749778980136960, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$26 }
	$11 = CALL $57($8, $4)
	CALL eosio_assert(((int_32)*($11 + [72]) == (int_32)$8), [9403])
	$14 = *($11 + [8])
	if ( ((int_64)$14 == (int_64)*($0)) ){ goto $label$25 }
	
.LABEL $label$27
	$19 = ($0 + [408])
	$10 = *(($0 + [436]))
	$9 = *(($0 + [432]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$23 }
	
.LOOP $label$31:
	$4 = ($10 + [-24])
	$7 = *($4)
	if ( ((int_64)*($7) == (int_64)$14) ){ goto $label$24 }
	$10 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$31 }
	goto $label$23 
	
.LABEL $label$26
	CALL eosio_assert([0], [8795])
	
.LABEL $label$25
	$20 = (int_64)0
	goto $label$19 
	
.LABEL $label$24
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$23 }
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$19), [9403])
	goto $label$22 
	
.LABEL $label$23
	$4 = CALL db_find_i64(*($19), *(($0 + [416])), (int_64)-2063328927043551232, $14)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$21 }
	CALL eosio_assert(((int_32)*(CALL $54($19, $4) + [8]) == (int_32)$19), [9403])
	
.LABEL $label$22
	$14 = (int_64)500
	goto $label$20 
	
.LABEL $label$21
	$14 = (int_64)100
	
.LABEL $label$20
	$16 = *($3)
	*((($5 + [224]) + [8])) = $6
	*($5 + [552]) = $6
	$20 = ((int_64)$16 / (int_64)$14)
	*($5 + [544]) = $20
	*($5 + [224]) = $20
	CALL $60($0, ($5 + [224]))
	*($5 + [528]) = $20
	*($5 + [536]) = $6
	$4 = ($11 + [8])
	$14 = *($4)
	CALL $61(($5 + [512]), $5, $18)
	*((($5 + [208]) + [8])) = *($5 + [536])
	*($5 + [208]) = *($5 + [528])
	CALL $53($0, $17, $14, ($5 + [208]), ($5 + [512]))
	if ( ((*($5 + [512]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*($5 + [520]))
	
.LABEL $label$32
	$10 = ((int_64)$6 == (int_64)1397703940)
	$16 = ( (int_64)0 ? $20 : $10 )
	$12 = ( $20 ? (int_64)0 : $10 )
	$19 = ($0 + [328])
	$14 = *($4)
	$10 = *(($0 + [356]))
	$7 = *(($0 + [352]))
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$35 }
	
.LOOP $label$37:
	$4 = ($10 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$14) ){ goto $label$36 }
	$10 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$35 }
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$19), [9403])
	goto $label$34 
	
.LABEL $label$35
	$10 = ($0 + [336])
	$4 = CALL db_find_i64(*($19), *($10), (int_64)8428183963073163264, $14)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$33 }
	$9 = CALL $62($19, $4)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$19), [9403])
	
.LABEL $label$34
	$13 = *($0)
	$14 = *($9 + [16])
	$21 = *($9 + [8])
	CALL eosio_assert([1], [9486])
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$19), [9521])
	CALL eosio_assert(((int_64)*(($0 + [328])) == (int_64)CALL $fimport$10()), [9567])
	*($9 + [8]) = ((int_64)$21 + (int_64)$12)
	*($9 + [16]) = ((int_64)$14 + (int_64)$16)
	$14 = *($9)
	CALL eosio_assert([1], [9618])
	CALL eosio_assert([1], [9225])
	CALL memcpy(($5 + [592]), $9, [8])
	CALL eosio_assert([1], [9225])
	CALL memcpy((($5 + [592]) | [8]), ($9 + [8]), [8])
	CALL eosio_assert([1], [9225])
	CALL memcpy((($5 + [592]) + [16]), ($9 + [16]), [8])
	CALL db_update_i64(*($9 + [28]), $13, ($5 + [592]), [24])
	$4 = ($0 + [344])
	if ( (uint_64)($14 <= *($4)) ){ goto $label$19 }
	*($4) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	goto $label$19 
	
.LABEL $label$33
	$13 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [328])) == (int_64)CALL $fimport$10()), [9677])
	*(($4 = CALL _Znwj([40])) + [24]) = $19
	*($4 + [8]) = $12
	*($4 + [16]) = $16
	*($4) = *(($11 + [8]))
	CALL eosio_assert([1], [9225])
	CALL memcpy(($5 + [592]), $4, [8])
	CALL eosio_assert([1], [9225])
	CALL memcpy((($5 + [592]) | [8]), ($4 + [8]), [8])
	CALL eosio_assert([1], [9225])
	CALL memcpy((($5 + [592]) + [16]), ($4 + [16]), [8])
	$14 = *($4)
	$9 = CALL db_store_i64(*($10), (int_64)8428183963073163264, $13, $14, ($5 + [592]), [24])
	*($4 + [28]) = $9
	$10 = ($0 + [344])
	if ( (uint_64)($14 <= *($10)) ){ goto $label$38 }
	*($10) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$38
	*($5 + [424]) = $4
	$14 = *($4)
	*($5 + [592]) = $14
	*($5 + [696]) = $9
	$7 = ($0 + [356])
	$10 = *($7)
	if ( ((uint_32)$10 >= (uint_32)*(($0 + [360]))) ){ goto $label$40 }
	*($10 + [8]) = $14
	*($10 + [16]) = $9
	*($5 + [424]) = [0]
	*($10) = $4
	*($7) = ($10 + [24])
	$4 = *($5 + [424])
	*($5 + [424]) = [0]
	if ( $4 ){ goto $label$39 }
	goto $label$19 
	
.LABEL $label$40
	CALL $63(($0 + [352]), ($5 + [424]), ($5 + [592]), ($5 + [696]))
	$4 = *($5 + [424])
	*($5 + [424]) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	
.LABEL $label$39
	CALL _ZdlPv($4)
	
.LABEL $label$19
	CALL eosio_assert([1], [9231])
	$14 = (int_64)18753
	$4 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$16 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$44 }
	$14 = $16
	$10 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$44
	$14 = $16
	
.LOOP $label$45:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$10 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $10 ){ goto $label$45 }
	$10 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$10 = [0]
	
.LABEL $label$41
	CALL eosio_assert($10, [9280])
	$12 = $6
	$13 = (int_64)0
	if ( ((int_64)$6 != (int_64)1397703940) ){ goto $label$47 }
	$14 = *($3)
	*((($5 + [192]) + [8])) = (int_64)4800772
	*($5 + [504]) = (int_64)4800772
	$13 = ((int_64)$14 * (int_64)100)
	*($5 + [496]) = $13
	*($5 + [192]) = $13
	CALL $60($0, ($5 + [192]))
	*((($5 + [464]) + [8])) = [0]
	*($5 + [488]) = (int_64)4800772
	*($5 + [480]) = $13
	*($5 + [464]) = (int_64)0
	$4 = CALL $128([8814])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$46 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$50 }
	*($5 + [464]) = ($4 << [1])
	$10 = (($5 + [464]) | [1])
	if ( $4 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$9 = (($4 + [16]) & [-16])
	$10 = CALL _Znwj($9)
	*($5 + [464]) = ($9 | [1])
	*($5 + [472]) = $10
	*($5 + [468]) = $4
	
.LABEL $label$49
	CALL memcpy($10, [8814], $4)
	
.LABEL $label$48
	*(($10 + $4)) = [0]
	*((($5 + [176]) + [8])) = *((($5 + [480]) + [8]))
	*($5 + [176]) = *($5 + [480])
	CALL $53($0, (int_64)3725400663636608032, $1, ($5 + [176]), ($5 + [464]))
	if ( ((*($5 + [464]) & [1]) == 0) ){ goto $label$51 }
	CALL _ZdlPv(*($5 + [472]))
	
.LABEL $label$51
	*($5 + [600]) = (int_64)0
	*($5 + [592]) = (int_64)0
	*($5 + [608]) = (int_64)0
	*($5 + [616]) = (int_64)0
	*($5 + [624]) = (int_64)0
	$10 = ($0 + [208])
	$4 = *(($0 + [236]))
	if ( ((int_32)$4 == (int_32)*(($0 + [232]))) ){ goto $label$53 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$10), [9403])
	if ( $4 ){ goto $label$52 }
	$4 = ($5 + [592])
	goto $label$52 
	
.LABEL $label$53
	$4 = CALL db_find_i64(*($10), *(($0 + [216])), (int_64)4406680248264425472, (int_64)4406680248264425472)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$54 }
	$4 = CALL $39($10, $4)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$10), [9403])
	goto $label$52 
	
.LABEL $label$54
	$4 = ($5 + [592])
	
.LABEL $label$52
	*(($9 = (($5 + [424]) + [32]))) = *(($4 + [32]))
	*((($5 + [424]) + [24])) = *(($4 + [24]))
	*((($5 + [424]) + [16])) = *(($4 + [16]))
	*((($5 + [424]) + [8])) = *(($4 + [8]))
	*($5 + [424]) = *($4)
	*($9) = ((int_64)*($9) + (int_64)$13)
	CALL $42($10, ($5 + [424]), *($0))
	$14 = *($3)
	$4 = *($11 + [64])
	$4 = ($4 + (((int_64)$14 > (int_64)10000) & ($4 <= [10])))
	$15 = ((int_64)$14 + (int_64)*($11 + [40]))
	if ( ((int_64)((uint_64)*($11 + [32]) / (uint_64)(int_64)86400) != (int_64)(CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) / (uint_32)[86400]))) ){ goto $label$55 }
	$14 = ((int_64)*($11 + [48]) + (int_64)$14)
	
.LABEL $label$55
	$16 = *($0)
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [9486])
	CALL eosio_assert(((int_32)*($11 + [72]) == (int_32)$8), [9521])
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$10()), [9567])
	*($11 + [40]) = $15
	*($11 + [64]) = $4
	$15 = *($11)
	$12 = CALL current_time()
	*($11 + [48]) = $14
	*($11 + [56]) = (int_64)0
	*($11 + [32]) = ((int_64)((uint_64)$12 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$15 == (int_64)*($11)), [9618])
	*($5 + [680]) = (($5 + [592]) + [65])
	*($5 + [676]) = ($5 + [592])
	*($5 + [672]) = ($5 + [592])
	*($5 + [688]) = ($5 + [672])
	*($5 + [700]) = ($11 + [8])
	*($5 + [696]) = $11
	*($5 + [704]) = ($11 + [16])
	*($5 + [708]) = ($11 + [24])
	*($5 + [712]) = ($11 + [32])
	*($5 + [716]) = ($11 + [40])
	*($5 + [720]) = ($11 + [48])
	*($5 + [724]) = ($11 + [56])
	*($5 + [728]) = ($11 + [64])
	CALL $64(($5 + [696]), ($5 + [688]))
	CALL db_update_i64(*($11 + [76]), $16, ($5 + [592]), [65])
	$4 = ($0 + [144])
	if ( (uint_64)($15 <= *($4)) ){ goto $label$56 }
	*($4) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$56
	$12 = *(($3 + [8]))
	$15 = (uint_64)$12 >> (uint_64)(int_64)8)
	
.LABEL $label$47
	$4 = CALL $33($0)
	CALL eosio_assert([1], [9231])
	$11 = ([100] - ((uint_32)$4 % (uint_32)[100]))
	$4 = [0]
	$14 = $15
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$58 }
	$16 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$60 }
	$14 = $16
	$10 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$60
	$14 = $16
	
.LOOP $label$61:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$58 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$10 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $10 ){ goto $label$61 }
	$10 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$58
	$10 = [0]
	
.LABEL $label$57
	CALL eosio_assert($10, [9280])
	$8 = *($5 + [575])
	if ( ((uint_32)($11 & [255]) >= (uint_32)$8) ){ goto $label$63 }
	CALL $65(($5 + [424]), $0, ($5 + [575]), $3)
	CALL $66(($5 + [592]), $0, $3)
	$12 = *($5 + [432])
	CALL eosio_assert(((int_64)$12 == (int_64)*($5 + [600])), [9325])
	$14 = *($5 + [424])
	CALL eosio_assert(((int_64)$14 <= (int_64)*($5 + [592])), [9020])
	*((($5 + [144]) + [8])) = $12
	*($5 + [416]) = $12
	*($5 + [144]) = $14
	*($5 + [408]) = $14
	CALL $60($0, ($5 + [144]))
	*($5 + [400]) = $12
	*($5 + [392]) = $14
	CALL $67(($5 + [376]), $5, $18)
	*((($5 + [128]) + [8])) = *($5 + [400])
	*($5 + [128]) = *($5 + [392])
	CALL $53($0, $17, $1, ($5 + [128]), ($5 + [376]))
	if ( ((*($5 + [376]) & [1]) == 0) ){ goto $label$62 }
	CALL _ZdlPv(*($5 + [384]))
	goto $label$62 
	
.LABEL $label$63
	*($5 + [600]) = (int_64)0
	*($5 + [592]) = (int_64)0
	*($5 + [608]) = (int_64)0
	*($5 + [616]) = (int_64)0
	*($5 + [624]) = (int_64)0
	$7 = ($0 + [208])
	$4 = *(($0 + [236]))
	if ( ((int_32)$4 == (int_32)*(($0 + [232]))) ){ goto $label$65 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [9403])
	if ( $4 ){ goto $label$64 }
	$4 = ($5 + [592])
	goto $label$64 
	
.LABEL $label$65
	$4 = CALL db_find_i64(*($7), *(($0 + [216])), (int_64)4406680248264425472, (int_64)4406680248264425472)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$66 }
	$4 = CALL $39($7, $4)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [9403])
	goto $label$64 
	
.LABEL $label$66
	$4 = ($5 + [592])
	
.LABEL $label$64
	*((($5 + [424]) + [32])) = *(($4 + [32]))
	*((($5 + [424]) + [24])) = *(($4 + [24]))
	*((($5 + [424]) + [16])) = *(($4 + [16]))
	*(($10 = (($5 + [424]) + [8]))) = *(($4 + [8]))
	*($5 + [424]) = *($4)
	*($5 + [368]) = $12
	$4 = ((int_64)$12 == (int_64)1397703940)
	$16 = *(( ($5 + [424]) ? $10 : $4 ))
	$22 = ((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)(float_64)0.01)
	if ( (((float_64)$22 < (float_64)(float_64)18446744073709551615) & ((float_64)$22 >= (float_64)(float_64)0)) ){ goto $label$68 }
	$14 = (int_64)0
	goto $label$67 
	
.LABEL $label$68
	$14 = (Rounds 0)($22)
	
.LABEL $label$67
	*($5 + [360]) = $14
	*((($5 + [424]) + ( [0] ? [8] : $4 ))) = ((int_64)$16 + (int_64)$14)
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9231])
	$4 = [0]
	
.LOOP $label$71:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$70 }
	$14 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$72 }
	$15 = $14
	$10 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$72
	$15 = $14
	
.LOOP $label$73:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$70 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$10 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $10 ){ goto $label$73 }
	$10 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$70
	$10 = [0]
	
.LABEL $label$69
	CALL eosio_assert($10, [9280])
	*((($5 + [160]) + [8])) = *((($5 + [360]) + [8]))
	*($5 + [160]) = *($5 + [360])
	CALL $60($0, ($5 + [160]))
	CALL $42($7, ($5 + [424]), *($0))
	$14 = (int_64)0
	
.LABEL $label$62
	$15 = CALL current_time()
	$16 = *(($3 + [8]))
	*((($5 + [592]) + [8])) = $16
	*(($5 + [328])) = $16
	*(($5 + [342])) = *(($5 + [428]))
	*($5 + [288]) = $18
	*($5 + [312]) = $1
	*($5 + [336]) = $8
	*($5 + [337]) = $11
	$1 = *($3)
	*($5 + [592]) = $1
	*($5 + [304]) = *($5 + [560])
	*($5 + [320]) = $1
	*($5 + [338 align=2]) = *($5 + [424 align=2])
	*($5 + [296]) = ((int_64)((uint_64)$15 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*(($5 + [352])) = $12
	*($5 + [344]) = $14
	CALL memcpy(($5 + [56]), ($5 + [288]), [72])
	CALL $68($0, ($5 + [56]))
	*((($5 + [40]) + [8])) = $6
	*($5 + [280]) = $6
	*($5 + [40]) = $20
	*($5 + [272]) = $20
	CALL $43($0, ($5 + [40]))
	*((($5 + [24]) + [8])) = (int_64)4800772
	*($5 + [264]) = (int_64)4800772
	*($5 + [24]) = $13
	*($5 + [256]) = $13
	CALL $43($0, ($5 + [24]))
	*((($5 + [8]) + [8])) = $12
	*($5 + [248]) = $12
	*($5 + [8]) = $14
	*($5 + [240]) = $14
	CALL $43($0, ($5 + [8]))
	if ( ((*($5 + [576]) & [1]) == 0) ){ goto $label$74 }
	CALL _ZdlPv(*($5 + [584]))
	
.LABEL $label$74
	$global$0 = ($5 + [736])
	return (unreachable)
	
.LABEL $label$46
	CALL $116(($5 + [464]))
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9477])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $125($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = ($0 + [88])
	$4 = *($1)
	$6 = *(($0 + [116]))
	$5 = *(($0 + [112]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$3), [9403])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($3), *(($0 + [96])), (int_64)4229865212519383040, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $84($3, $7) + [72]) == (int_32)$3), [9403])
	
.LABEL $label$2
	CALL eosio_assert([0], [8845])
	
.LABEL $label$1
	$4 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$10()), [9677])
	$7 = CALL _Znwj([88])
	CALL $27($7)
	*($7 + [72]) = $3
	$7 = CALL memcpy($7, $1, [72])
	*($2 + [80]) = ($2 + [66])
	*($2 + [76]) = $2
	*($2 + [72]) = $2
	*($2 + [88]) = ($2 + [72])
	*($2 + [100]) = ($7 + [8])
	*($2 + [96]) = $7
	$5 = ($7 + [16])
	*($2 + [104]) = $5
	$8 = ($7 + [24])
	*($2 + [108]) = $8
	*($2 + [112]) = ($7 + [32])
	*($2 + [116]) = ($7 + [48])
	*($2 + [120]) = ($7 + [49])
	*($2 + [124]) = ($7 + [56])
	CALL $85(($2 + [96]), ($2 + [88]))
	$9 = *($7)
	$6 = ($0 + [96])
	*($7 + [76]) = CALL db_store_i64(*($6), (int_64)4229865212519383040, $4, $9, $2, [66])
	$10 = ($0 + [104])
	if ( (uint_64)($9 <= *($10)) ){ goto $label$6 }
	*($10) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$9 = *($6)
	$11 = *($7)
	*($2 + [96]) = *($8)
	*($7 + [80]) = CALL db_idx64_store($9, (int_64)4229865212519383040, $4, $11, ($2 + [96]))
	$9 = *($6)
	$11 = *($7)
	*($2 + [96]) = *($5)
	*($7 + [84]) = CALL db_idx64_store($9, (int_64)4229865212519383041, $4, $11, ($2 + [96]))
	*($2 + [96]) = $7
	$4 = *($7)
	*($2) = $4
	$5 = *(($7 + [76]))
	*($2 + [72]) = $5
	$8 = ($0 + [116])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [120]))) ){ goto $label$9 }
	*($6 + [8]) = $4
	*($6 + [16]) = $5
	*($2 + [96]) = [0]
	*($6) = $7
	*($8) = ($6 + [24])
	$7 = *($2 + [96])
	*($2 + [96]) = [0]
	if ( $7 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $86(($0 + [112]), ($2 + [96]), $2, ($2 + [72]))
	$7 = *($2 + [96])
	*($2 + [96]) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$4 = *($1)
	if ( (uint_64)($4 <= (int_64)201) ){ goto $label$10 }
	$4 = ((int_64)$4 + (int_64)-200)
	$5 = *(($0 + [116]))
	$8 = *(($0 + [112]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$14:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$13 }
	$5 = $6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$3), [9403])
	goto $label$11 
	
.LABEL $label$12
	$7 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)4229865212519383040, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	$7 = CALL $84($3, $7)
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$3), [9403])
	
.LABEL $label$11
	$6 = [0]
	$4 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$5 = CALL db_lowerbound_i64(*(($0 + [88])), *(($0 + [96])), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$15 }
	$6 = CALL $84($3, $5)
	
.LABEL $label$15
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$10 }
	if ( (uint_64)((int_64))(((int_64)$4 & (int_64)4294967295) - *($6 + [8])) <= (int_64)11) ){ goto $label$10 }
	$8 = ($7 + [76])
	$10 = ($0 + [96])
	$12 = ($0 + [88])
	
.LOOP $label$16:
	CALL eosio_assert([1], [9728])
	CALL eosio_assert([1], [9762])
	$6 = CALL db_next_i64(*($8), $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$17 }
	CALL $84($3, $6)
	
.LABEL $label$17
	CALL $87($3, $7)
	$6 = [0]
	$5 = CALL db_lowerbound_i64(*($12), *($10), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$18 }
	$6 = CALL $84($3, $5)
	
.LABEL $label$18
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$16 }
	
.LABEL $label$10
	$9 = *($0)
	$4 = (int_64)6
	
.LOOP $label$19:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$19 }
	$4 = (int_64)6
	
.LOOP $label$20:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$20 }
	*($2 + [8]) = (int_64)-4994024814571159552
	*($2) = $9
	*(($7 = CALL _Znwj([16]))) = $9
	*($7 + [8]) = (int_64)3617214756542218240
	*(($2 + [36])) = [0]
	$6 = ($7 + [16])
	*(($2 + [24])) = $6
	*(($2 + [20])) = $6
	*($2 + [16]) = $7
	*($2 + [28 align=4]) = (int_64)0
	CALL $35(($2 + [28]), [66])
	$7 = *(($2 + [32]))
	$6 = *($2 + [28])
	*($2 + [76]) = $6
	*($2 + [72]) = $6
	*($2 + [80]) = $7
	*($2 + [88]) = ($2 + [72])
	*($2 + [96]) = $1
	*($2 + [100]) = ($1 + [8])
	*($2 + [104]) = ($1 + [16])
	*($2 + [108]) = ($1 + [24])
	*($2 + [112]) = ($1 + [32])
	*($2 + [116]) = ($1 + [48])
	*($2 + [120]) = ($1 + [49])
	*($2 + [124]) = ($1 + [56])
	CALL $85(($2 + [96]), ($2 + [88]))
	CALL $37(($2 + [96]), $2)
	$7 = *($2 + [96])
	CALL send_inline($7, (*($2 + [100]) - $7))
	$7 = *($2 + [96])
	if ( ($7 == 0) ){ goto $label$21 }
	*($2 + [100]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$21
	$7 = *($2 + [28])
	if ( ($7 == 0) ){ goto $label$22 }
	*(($2 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$22
	$7 = *($2 + [16])
	if ( ($7 == 0) ){ goto $label$23 }
	*(($2 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$23
	$global$0 = ($2 + [128])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $125($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	float_64 $9
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [8]) = (int_64)985
	$5 = ($1 + [368])
	$6 = *(($1 + [396]))
	if ( ((int_32)$6 == (int_32)*(($1 + [392]))) ){ goto $label$2 }
	$1 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$5), [9403])
	if ( $1 ){ goto $label$1 }
	$1 = ($4 + [8])
	goto $label$1 
	
.LABEL $label$2
	$1 = CALL db_find_i64(*($5), *(($1 + [376])), (int_64)-6749905004821217280, (int_64)-6749905004821217280)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $78($5, $1)
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$5), [9403])
	goto $label$1 
	
.LABEL $label$3
	$1 = ($4 + [8])
	
.LABEL $label$1
	$7 = *($1)
	$8 = *($3 + [8])
	*($0 + [8]) = $8
	$9 = ((float_64)((float_64)((float_64)(CASTING float_64)(uint_64 $7) / (float_64)(float_64)10) / (float_64)((float_64)(CASTING float_64)(uint_32 *($2)) + (float_64)(float_64)-1)) * (float_64)(CASTING float_64)(int_64 *($3)))
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$5 }
	$7 = (int_64)-9223372036854775808
	goto $label$4 
	
.LABEL $label$5
	$7 = (Rounds 0)($9)
	
.LABEL $label$4
	*($0) = $7
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9231])
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$0 = [1]
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$0 = ((int_32)$1 < (int_32)[6])
	$3 = ($1 + [1])
	$1 = $3
	if ( $0 ){ goto $label$10 }
	$0 = [1]
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$0 = [0]
	
.LABEL $label$6
	CALL eosio_assert($0, [9280])
	$global$0 = ($4 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [9225])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $128([9095])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [9095], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$5 = ($3 | [1])
	
.LOOP $label$5:
	$7 = ((uint_64)$2 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$7 * (int_64)10))
	CALL $1(($3 + [16]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), $3)
	if ( (*($3) & [1]) ){ goto $label$7 }
	*($3) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($3 + [8]))) = [0]
	*($3 + [4]) = [0]
	
.LABEL $label$6
	CALL $119($3, [0])
	*(($3 + [8])) = *((($3 + [16]) + [8]))
	*($3) = *($3 + [16])
	$4 = ((uint_64)$2 > (uint_64)(int_64)9)
	$2 = $7
	if ( $4 ){ goto $label$5 }
	$4 = *($3)
	$6 = ($4 & [1])
	$8 = ($3 + [8])
	CALL $123($0, ( *($8) ? $5 : $6 ), ( *($3 + [4]) ? uint_32($4 >> [1]) : $6 ))
	CALL $121($0, [9103])
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$8
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $116($0)
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL $90($3, $1, $2)
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	$4 = ($1 + [288])
	$5 = *(($1 + [316]))
	if ( ((int_32)$5 == (int_32)*(($1 + [312]))) ){ goto $label$2 }
	$1 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$4), [9403])
	if ( $1 ){ goto $label$1 }
	$1 = ($3 + [16])
	goto $label$1 
	
.LABEL $label$2
	$1 = CALL db_find_i64(*($4), *(($1 + [296])), (int_64)-8281834279150152704, (int_64)-8281834279150152704)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $76($4, $1)
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$4), [9403])
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 + [16])
	
.LABEL $label$1
	$6 = *($3)
	if ( ((int_64)*($2 + [8]) != (int_64)4800772) ){ goto $label$8 }
	$7 = *($1 + [8])
	*($0 + [8]) = (int_64)4800772
	$6 = (int_64)
	*($0) = $6($6 - $7))
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9231])
	$6 = (int_64)18753
	$1 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $7
	$0 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$10
	$6 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$0 = ((int_32)$1 < (int_32)[6])
	$2 = ($1 + [1])
	$1 = $2
	if ( $0 ){ goto $label$11 }
	$0 = [1]
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$8
	$7 = *($1)
	*($0 + [8]) = (int_64)1397703940
	$6 = (int_64)
	*($0) = $6($6 - $7))
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9231])
	$6 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$6 = $7
	$0 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$12 }
	goto $label$4 
	
.LABEL $label$13
	$6 = $7
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$0 = ((int_32)$1 < (int_32)[6])
	$2 = ($1 + [1])
	$1 = $2
	if ( $0 ){ goto $label$14 }
	$0 = [1]
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$12 }
	goto $label$4 
	
.LABEL $label$7
	$0 = [0]
	
.LABEL $label$6
	CALL eosio_assert($0, [9280])
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	CALL eosio_assert($0, [9280])
	$global$0 = ($3 + [32])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $128([9095])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [9095], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$5 = ($3 | [1])
	
.LOOP $label$5:
	$7 = ((uint_64)$2 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$7 * (int_64)10))
	CALL $1(($3 + [16]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), $3)
	if ( (*($3) & [1]) ){ goto $label$7 }
	*($3) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($3 + [8]))) = [0]
	*($3 + [4]) = [0]
	
.LABEL $label$6
	CALL $119($3, [0])
	*(($3 + [8])) = *((($3 + [16]) + [8]))
	*($3) = *($3 + [16])
	$4 = ((uint_64)$2 > (uint_64)(int_64)9)
	$2 = $7
	if ( $4 ){ goto $label$5 }
	$4 = *($3)
	$6 = ($4 & [1])
	$8 = ($3 + [8])
	CALL $123($0, ( *($8) ? $5 : $6 ), ( *($3 + [4]) ? uint_32($4 >> [1]) : $6 ))
	CALL $121($0, [9112])
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$8
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $116($0)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = (int_64)0
	*($2 + [16]) = (int_64)0
	$3 = ($0 + [288])
	$4 = *(($0 + [316]))
	if ( ((int_32)$4 == (int_32)*(($0 + [312]))) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$3), [9403])
	if ( $4 ){ goto $label$1 }
	$4 = ($2 + [16])
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($3), *(($0 + [296])), (int_64)-8281834279150152704, (int_64)-8281834279150152704)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $76($3, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$3), [9403])
	goto $label$1 
	
.LABEL $label$3
	$4 = ($2 + [16])
	
.LABEL $label$1
	*(($2 + [8])) = *(($4 + [8]))
	*($2) = *($4)
	$5 = *($1 + [8])
	if ( ((int_64)$5 != (int_64)1397703940) ){ goto $label$5 }
	*($2) = ((int_64)*($2) + (int_64)*($1))
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_64)$5 != (int_64)4800772) ){ goto $label$6 }
	*($2 + [8]) = ((int_64)*($2 + [8]) + (int_64)*($1))
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9131])
	
.LABEL $label$4
	CALL $77($3, $2, *($0))
	$global$0 = ($2 + [32])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $125($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9454])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $129($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9477])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9477])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9477])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $63(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $132($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $125($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9482])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $35($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9477])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9477])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9225])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9225])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $125($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [9677])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [9225])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7235159537265672192
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $110(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9521])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9567])
	*($1) = *(*($3))
	CALL eosio_assert([1], [9618])
	CALL eosio_assert([1], [9225])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [9792])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9837])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9887])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [76]))
	$6 = *(($1 + [80]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865212519383040, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [84]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865212519383041, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $125($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9225])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9225])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($0 + [4]), $3, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [9225])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9454])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $129($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([88])
	CALL $27($5)
	*($5 + [72]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [49])
	*($3 + [60]) = ($5 + [56])
	CALL $28(($3 + [32]), ($3 + [24]))
	*($5 + [76]) = $1
	*($5 + [80 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $86(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $132($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [9403])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $82($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [9403])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9486])
	CALL $88($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $89($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9454])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $129($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9477])
	CALL memcpy($4, $2, [8])
	*($4 + [12]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $110(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $132($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $125($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [9677])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [9225])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-6749905004821217280, $2, (int_64)-6749905004821217280, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-6749905004821217280) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-6749905004821217279
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-6749905004821217280
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-6749905004821217280
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $108(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [9677])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [9225])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4425754204123955200, $2, (int_64)-4425754204123955200, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4425754204123955200) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-4425754204123955199
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-4425754204123955200
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-4425754204123955200
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $101(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [9231])
	$3 = [0]
	$4 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9280])
	$4 = (int_64)5
	$3 = *($2)
	if ( ($3 <= [9886]) ){ goto $label$7 }
	$4 = (int_64)50
	if ( ($3 <= [9986]) ){ goto $label$7 }
	$4 = (int_64)500
	if ( ($3 <= [9994]) ){ goto $label$7 }
	$4 = (int_64)5000
	if ( ($3 <= [9998]) ){ goto $label$7 }
	$4 = (int_64)50000
	if ( ($3 <= [10000]) ){ goto $label$7 }
	$4 = (int_64)500000
	if ( ((int_32)$3 != (int_32)[10000]) ){ goto $label$6 }
	
.LABEL $label$7
	*($0) = $4
	
.LABEL $label$6
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9454])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $129($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9477])
	CALL memcpy($4, $2, [8])
	*($4 + [12]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)-4425754204123955200
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-4425754204123955200
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $101(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $132($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9521])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9567])
	*($1) = *(*($3))
	CALL eosio_assert([1], [9618])
	CALL eosio_assert([1], [9225])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4425754204123955200) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-4425754204123955199
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9454])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $129($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9477])
	CALL memcpy($4, $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [9477])
	CALL memcpy(($4 + [8]), ($2 + [8]), [8])
	*($4 + [20]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)-8281834279150152704
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-8281834279150152704
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $111(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $132($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [9403])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-8281834279150152704, (int_64)-8281834279150152704)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $76($0, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [9403])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9486])
	CALL $92($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $93($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9521])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9567])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [32]))) = *(($3 + [32]))
	*(($6 = ($1 + [24]))) = *(($3 + [24]))
	*(($7 = ($1 + [16]))) = *(($3 + [16]))
	*(($8 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [9618])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = $8
	*($4 + [72]) = $1
	*($4 + [80]) = $7
	*($4 + [84]) = $6
	*($4 + [88]) = $5
	CALL $104(($4 + [72]), ($4 + [64]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4406680248264425472) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4406680248264425473
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9454])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $129($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [40]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	CALL $106(($3 + [40]), ($3 + [32]))
	*($5 + [44]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)4406680248264425472
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)4406680248264425472
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $105(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $132($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9225])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $102(*($1), ($0 + [32]))
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $35($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9225])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9225])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $95(CALL $94($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9454])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $129($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9477])
	CALL memcpy($4, $2, [8])
	*($4 + [12]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)-6749905004821217280
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-6749905004821217280
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $108(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $132($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9521])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9567])
	*($1) = *(*($3))
	CALL eosio_assert([1], [9618])
	CALL eosio_assert([1], [9225])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-6749905004821217280) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-6749905004821217279
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $32 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = ($0 + [128])
	$5 = *(($0 + [156]))
	$4 = *(($0 + [152]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$3), [9403])
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	$5 = CALL db_find_i64(*($3), *(($0 + [136])), (int_64)3607749778980136960, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $57($3, $5)
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$3), [9403])
	
.LABEL $label$2
	$1 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	if ( ((uint_64)(int_64))($1 - *($7 + [24])) > (uint_64)(int_64)29) ){ goto $label$6 }
	CALL eosio_assert([0], [8959])
	
.LABEL $label$6
	$4 = ($7 + [24])
	$5 = ($7 + [64])
	$8 = *($7 + [64])
	if ( ($8 == 0) ){ goto $label$7 }
	$9 = *($0)
	$6 = [1]
	CALL eosio_assert([1], [9486])
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$3), [9521])
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$10()), [9567])
	*($5) = ($8 + [-1])
	*(($7 + [24])) = $1
	$1 = *($7)
	CALL eosio_assert([1], [9618])
	*($2 + [88]) = ($2 + [65])
	*($2 + [84]) = $2
	*($2 + [80]) = $2
	*($2 + [96]) = ($2 + [80])
	*($2 + [108]) = ($7 + [8])
	*($2 + [104]) = $7
	*($2 + [112]) = ($7 + [16])
	*($2 + [116]) = $4
	*($2 + [120]) = ($7 + [32])
	*($2 + [124]) = ($7 + [40])
	*($2 + [128]) = ($7 + [48])
	*($2 + [132]) = ($7 + [56])
	*($2 + [136]) = $5
	CALL $64(($2 + [104]), ($2 + [96]))
	CALL db_update_i64(*($7 + [76]), $9, $2, [65])
	$5 = ($0 + [144])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$1 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$global$0 = ($2 + [144])
	return [1]
	
.LABEL $label$7
	$6 = [0]
	if ( (uint_64)((int_64))($1 - *($7 + [16])) <= (int_64)86400) ){ goto $label$1 }
	$9 = *($0)
	$6 = [1]
	CALL eosio_assert([1], [9486])
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$3), [9521])
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$10()), [9567])
	*(($3 = ($7 + [16]))) = $1
	*(($7 + [24])) = $1
	$1 = *($7)
	CALL eosio_assert([1], [9618])
	*($2 + [88]) = ($2 + [65])
	*($2 + [84]) = $2
	*($2 + [80]) = $2
	*($2 + [96]) = ($2 + [80])
	*($2 + [108]) = ($7 + [8])
	*($2 + [104]) = $7
	*($2 + [112]) = $3
	*($2 + [116]) = $4
	*($2 + [120]) = ($7 + [32])
	*($2 + [124]) = ($7 + [40])
	*($2 + [128]) = ($7 + [48])
	*($2 + [132]) = ($7 + [56])
	*($2 + [136]) = $5
	CALL $64(($2 + [104]), ($2 + [96]))
	CALL db_update_i64(*($7 + [76]), $9, $2, [65])
	$5 = ($0 + [144])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$1 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [144])
	return $6
}

int_32 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$1 = ($global$0 - [48])
	$global$0 = $1
	$2 = $1
	$3 = CALL transaction_size()
	$4 = ($1 - (($3 + [39]) & [-16]))
	$global$0 = $4
	$5 = CALL read_transaction($4, $3)
	CALL eosio_assert(((int_32)$3 == (int_32)$5), [8996])
	*(($1 = $1) + [16]) = (int_64)20090104
	$6 = ($0 + [48])
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)*(($0 + [72]))) ){ goto $label$2 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$6), [9403])
	if ( $7 ){ goto $label$1 }
	$7 = ($1 + [16])
	goto $label$1 
	
.LABEL $label$2
	$7 = CALL db_find_i64(*($6), *(($0 + [56])), (int_64)-4425754204123955200, (int_64)-4425754204123955200)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $70($6, $7)
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$6), [9403])
	goto $label$1 
	
.LABEL $label$3
	$7 = ($1 + [16])
	
.LABEL $label$1
	*(($3 = ($4 + $3))) = *($7)
	$8 = CALL current_time()
	*($3 + [16]) = (CASTING uint_64)(uint_32 $4)
	*($3 + [8]) = $8
	CALL sha256($4, ($5 + [24]), ($1 + [16]))
	*($1 + [8]) = *($1 + [30])
	CALL $31($6, ($1 + [8]), *($0))
	$0 = *($1 + [16])
	$4 = *($1 + [20])
	$3 = *($1 + [24])
	$6 = *($1 + [28])
	$7 = *($1 + [32])
	$5 = *($1 + [36])
	$9 = *($1 + [40])
	$10 = *($1 + [44])
	$2
	$global$0 = ($1 + [48])
	return ($10 + ($9 + ($5 + ($7 + ($6 + ($3 + ($4 + $0)))))))
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL require_auth($1)
	$4 = ($0 + [168])
	$6 = *(($0 + [196]))
	$5 = *(($0 + [192]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$5 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [9403])
	goto $label$3 
	
.LABEL $label$4
	$6 = ($0 + [176])
	$7 = CALL db_find_i64(*($4), *($6), (int_64)-4157661383434960896, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $40($4, $7)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [9403])
	
.LABEL $label$3
	$9 = *($0)
	$1 = *($8 + [8])
	CALL eosio_assert([1], [9486])
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [9521])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$10()), [9567])
	*($8 + [8]) = ((int_64)$1 + (int_64)$2)
	$1 = *($8)
	CALL eosio_assert([1], [9618])
	*($3 + [80]) = (($3 + [96]) + [32])
	*($3 + [76]) = ($3 + [96])
	*($3 + [72]) = ($3 + [96])
	*($3 + [88]) = ($3 + [72])
	*($3 + [36]) = ($8 + [8])
	*($3 + [32]) = $8
	*($3 + [40]) = ($8 + [16])
	*($3 + [44]) = ($8 + [24])
	CALL $41(($3 + [32]), ($3 + [88]))
	CALL db_update_i64(*($8 + [36]), $9, ($3 + [96]), [32])
	$7 = ($0 + [184])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$1 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$2
	$9 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$10()), [9677])
	*(($7 = CALL _Znwj([48])) + [32]) = $4
	*($7 + [8]) = $2
	*($7) = $1
	*($7 + [16]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($3 + [80]) = (($3 + [96]) + [32])
	*($3 + [76]) = ($3 + [96])
	*($3 + [72]) = ($3 + [96])
	*($3 + [88]) = ($3 + [72])
	*($3 + [36]) = ($7 + [8])
	*($3 + [32]) = $7
	*($3 + [40]) = ($7 + [16])
	*($3 + [44]) = ($7 + [24])
	CALL $41(($3 + [32]), ($3 + [88]))
	$1 = *($7)
	$8 = CALL db_store_i64(*($6), (int_64)-4157661383434960896, $9, $1, ($3 + [96]), [32])
	*($7 + [36]) = $8
	$6 = ($0 + [184])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$7 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($3 + [32]) = $7
	$1 = *($7)
	*($3 + [96]) = $1
	*($3 + [72]) = $8
	$5 = ($0 + [196])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [200]))) ){ goto $label$9 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($3 + [32]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( $7 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	CALL $69(($0 + [192]), ($3 + [32]), ($3 + [96]), ($3 + [72]))
	$7 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$8
	CALL _ZdlPv($7)
	
.LABEL $label$1
	*($3 + [104]) = (int_64)0
	*($3 + [96]) = (int_64)0
	*($3 + [112]) = (int_64)0
	*($3 + [120]) = (int_64)0
	*($3 + [128]) = (int_64)0
	$6 = ($0 + [208])
	$7 = *(($0 + [236]))
	if ( ((int_32)$7 == (int_32)*(($0 + [232]))) ){ goto $label$11 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$6), [9403])
	if ( $7 ){ goto $label$10 }
	$7 = ($3 + [96])
	goto $label$10 
	
.LABEL $label$11
	$7 = CALL db_find_i64(*($6), *(($0 + [216])), (int_64)4406680248264425472, (int_64)4406680248264425472)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$12 }
	$7 = CALL $39($6, $7)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$6), [9403])
	goto $label$10 
	
.LABEL $label$12
	$7 = ($3 + [96])
	
.LABEL $label$10
	*((($3 + [32]) + [32])) = *(($7 + [32]))
	*(($8 = (($3 + [32]) + [24]))) = *(($7 + [24]))
	*((($3 + [32]) + [16])) = *(($7 + [16]))
	*((($3 + [32]) + [8])) = *(($7 + [8]))
	*($3 + [32]) = *($7)
	*($8) = ((int_64)*($8) + (int_64)$2)
	CALL $42($6, ($3 + [32]), *($0))
	*($3 + [24]) = (int_64)4800772
	*($3 + [16]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9231])
	$1 = (int_64)18753
	$7 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$1 = $2
	$6 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$1 = $2
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$8 = ($7 + [1])
	$7 = $8
	if ( $6 ){ goto $label$17 }
	$6 = [1]
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$6 = [0]
	
.LABEL $label$13
	CALL eosio_assert($6, [9280])
	*(($3 + [8])) = *((($3 + [16]) + [8]))
	*($3) = *($3 + [16])
	CALL $60($0, $3)
	$global$0 = ($3 + [144])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [9403])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4425754204123955200, (int_64)-4425754204123955200)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $70($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [9403])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9486])
	CALL $71($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $72($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $129 (int_32 $0)
{
	return CALL $130([10056], $0)
}

int_32 .FUNC $127 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}