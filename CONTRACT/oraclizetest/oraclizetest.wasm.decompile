(data (i32.const 8220) "failed to allocate pages\00unexpected error in fixed_bytes constructor\00")
(data (i32.const 8289) "write\00")
(data (i32.const 8295) "Sending query to Oraclize...\00")
(data (i32.const 8324) "URL\00")
(data (i32.const 8328) "json(https://min-api.cryptocompare.com/data/price?fsym=EOS&tsyms=USD).USD\00")
(data (i32.const 8402) " Result: \00")
(data (i32.const 8412) " Proof length: \00")
(data (i32.const 8428) "error reading iterator\00")
(data (i32.const 8451) "read\00")
(data (i32.const 8456) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8507) "get\00")
(data (i32.const 0) "@!\00\00")
(import "env" "db_lowerbound_i64" (func $fimport$0 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$1))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memset" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$6 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$7 (param i32 i32)))
(import "env" "__multf3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$9 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$11 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$12 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$16 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$17 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$19 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$20 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "transaction_size" (func $fimport$25 (result i32)))
(import "env" "assert_sha256" (func $fimport$26 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$27 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$28 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$29 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$30 (param i32 i32 i32)))
(import "env" "__ashlti3" (func $fimport$31 (param i32 i64 i64 i32)))
(import "env" "sha1" (func $fimport$32 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$33 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$34 (param i32 i32 i32)))
(import "env" "recover_key" (func $fimport$35 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$36 (param i32 i32 i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$37 (result i64)))
(import "env" "db_store_i64" (func $fimport$38 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$39 (param i32 i32)))
(import "env" "printhex" (func $fimport$40 (param i32 i32)))
(import "env" "tapos_block_num" (func $fimport$41 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$42 (result i32)))
(import "env" "db_next_i64" (func $fimport$43 (param i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$44 (result i32)))
(import "env" "read_action_data" (func $fimport$45 (param i32 i32) (result i32)))
(import "env" "prints" (func $fimport$46 (param i32)))
(import "env" "require_auth" (func $fimport$47 (param i64)))
(import "env" "printui" (func $fimport$48 (param i64)))
(import "env" "eosio_assert_code" (func $fimport$49 (param i32 i64)))
(import "env" "db_get_i64" (func $fimport$50 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$51 (param i32)))
(export "apply" (func $32))
(table $0 3 3 anyfunc)
(elem (i32.const 1) $33 $35)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 8511))
(global $global$2 i32 (i32.const 8511))


void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $7(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $9($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $19 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = CALL $17(($2 + [32]), $1)
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$4 = (*(($1 + [16])) - *($1 + [12]))
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL $7($4)
	*(($2 + [24])) = ($5 + $4)
	*($2 + [16]) = $5
	*($2 + [20]) = $5
	$6 = *(($1 + [12]))
	$4 = (*(($1 + [16])) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $6, $4)
	*($2 + [20]) = (*($2 + [20]) + $4)
	
.LABEL $label$3
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$4 = (*(($1 + [28])) - *($1 + [24]))
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $7($4)
	*(($2 + [8])) = ($5 + $4)
	*($2) = $5
	*($2 + [4]) = $5
	$4 = *(($1 + [24]))
	$1 = (*(($1 + [28])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($5, $4, $1)
	*($2 + [4]) = (*($2 + [4]) + $1)
	
.LABEL $label$4
	CALL $49($0, $3, ($2 + [16]), $2)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$5 }
	*($2 + [4]) = $1
	CALL $9($1)
	
.LABEL $label$5
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$6 }
	*($2 + [20]) = $1
	CALL $9($1)
	
.LABEL $label$6
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL $9(*($3 + [8]))
	
.LABEL $label$7
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $19(($2 + [16]))
	
.LABEL $label$1
	CALL $19($2)
	(unreachable)
}

void .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $27($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $30(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $9($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8289])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8289])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	$2 = ($3 + [12])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [8289])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	CALL $31(*($1), ($3 + [16]))
	CALL $48(*($1), ($3 + [48]))
	CALL $48(*($1), ($3 + [60]))
	$0 = ($3 + [72])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $3) > (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert([0], [8289])
	$3 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $0, [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
}

void .FUNC $21 (int_32 $0)
{
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL sha256($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [8245])
	
.LABEL $label$4
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$5 }
	if ( ($1 <= [2]) ){ goto $label$6 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$6
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$5
	$global$0 = ($3 + [48])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8428])
	
.LABEL $label$5
	$2 = CALL $1($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $7([24])) + [8]) = $0
	*($5) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8451])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = $7
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($8) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $46(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $9($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

int_64 .FUNC $22 ()
{
	int_32 $0
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$0 = ($global$0 - [48])
	$global$0 = $0
	*(($0 + [40])) = [0]
	*($0 + [16]) = (int_64)-5914999693434869968
	*($0 + [8]) = (int_64)-5914999693434869968
	*($0 + [24]) = (int_64)-1
	$1 = (int_64)0
	*($0 + [32]) = (int_64)0
	$2 = CALL db_lowerbound_i64((int_64)-5914999693434869968, (int_64)-5914999693434869968, (int_64)4741328180328005632, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = *(CALL $23(($0 + [8]), $2))
	$3 = *($0 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($0 + [36])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $9($5)
	
.LABEL $label$5
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($0 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $3
	
.LABEL $label$2
	*($4) = $3
	CALL $9($2)
	
.LABEL $label$1
	$global$0 = ($0 + [48])
	return $1
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8428])
	
.LABEL $label$5
	$2 = CALL $1($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $7([24])) + [12]) = $0
	*($5) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8451])
	
.LABEL $label$7
	$7 = ($5 + [8])
	CALL memcpy($5, $2, [8])
	$8 = ($2 + [8])
	if ( ((int_32)($4 & [-4]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [8451])
	
.LABEL $label$8
	CALL memcpy($7, $8, [4])
	*($5 + [16]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $47(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $2($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $9($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $24 (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [48])
	$global$0 = $1
	$2 = [0]
	*(($1 + [40])) = [0]
	*($1 + [16]) = (int_64)-5914999693434869968
	*($1 + [8]) = (int_64)-5914999693434869968
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$3 = CALL db_find_i64((int_64)-5914999693434869968, (int_64)-5914999693434869968, (int_64)-4257814626298757120, $0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $25(($1 + [8]), $3)
	if ( ((int_32)*($3 + [12]) == (int_32)($1 + [8])) ){ goto $label$2 }
	CALL eosio_assert([0], [8456])
	
.LABEL $label$2
	$2 = *($3 + [8])
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($1 + [36])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	CALL $9($6)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$5 }
	$3 = *(($1 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$3 = $4
	
.LABEL $label$3
	*($5) = $4
	CALL $9($3)
	
.LABEL $label$1
	$global$0 = ($1 + [48])
	return $2
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $7($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $19($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $9($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	$7 = ($global$0 - [160])
	$global$0 = $7
	*($7 + [88]) = $6
	*($7 + [128]) = CALL $24($6)
	*($7 + [152]) = CALL transaction_size()
	CALL memcpy($7, ($7 + [88]), [8])
	CALL memcpy(($7 | [8]), ($7 + [128]), [4])
	CALL memcpy(($7 | [12]), ($7 + [152]), [4])
	CALL $20($0, $7, [16])
	*(($7 + [24])) = *(($0 + [8]))
	*(($7 + [32])) = *(($0 + [16]))
	*(($7 + [40])) = *(($0 + [24]))
	*($7) = $6
	*($7 + [12]) = $2
	*($7 + [16]) = *($0)
	*($7 + [8]) = [1]
	$3 = CALL $17(($7 + [48]), $3)
	$4 = CALL $17(($7 + [60]), $4)
	*($7 + [88]) = (int_64)-5914999693434869968
	*($7 + [72]) = $5
	*($7 + [96]) = (int_64)-5290182123175542784
	*(($0 = CALL $7([16]))) = $1
	*($0 + [8]) = (int_64)3617214756542218240
	*(($7 + [124])) = [0]
	$5 = ($0 + [16])
	*((($7 + [88]) + [24])) = $5
	*(($7 + [108])) = $5
	*($7 + [104]) = $0
	*($7 + [116 align=4]) = (int_64)0
	$0 = *($3)
	$5 = ( *(($7 + [52])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($5 + [46])
	$6 = (CASTING uint_64)(uint_32 $5)
	$3 = ($7 + [116])
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($4)
	$5 = ( *(($7 + [64])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$0 = ($5 + $0)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$0 = ($0 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($0 == 0) ){ goto $label$4 }
	CALL $27($3, $0)
	$5 = *(($7 + [120]))
	$0 = *(($7 + [116]))
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$0 = [0]
	
.LABEL $label$3
	*($7 + [132]) = $0
	*($7 + [128]) = $0
	*($7 + [136]) = $5
	*($7 + [144]) = ($7 + [128])
	*($7 + [152]) = $7
	CALL $28(($7 + [152]), ($7 + [144]))
	CALL $29(($7 + [88]))
	$0 = *($7 + [116])
	if ( ($0 == 0) ){ goto $label$5 }
	*(($7 + [120])) = $0
	CALL $9($0)
	
.LABEL $label$5
	$0 = *($7 + [104])
	if ( ($0 == 0) ){ goto $label$6 }
	*(($7 + [108])) = $0
	CALL $9($0)
	
.LABEL $label$6
	if ( (*($7 + [60]) & [1]) ){ goto $label$9 }
	if ( (*($7 + [48]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $9(*(($7 + [68])))
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $9(*(($7 + [56])))
	$global$0 = ($7 + [160])
	return 
	
.LABEL $label$7
	$global$0 = ($7 + [160])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$7 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$7 = *((*($6) + $7))
	
.LABEL $label$1
	$0 = CALL $17(($4 + [32]), $1)
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	$1 = (*($2 + [4]) - *($2))
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$3 }
	$5 = CALL $7($1)
	*(($4 + [24])) = ($5 + $1)
	*($4 + [16]) = $5
	*($4 + [20]) = $5
	$1 = *($2)
	$2 = (*(($2 + [4])) - $1)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($5, $1, $2)
	*($4 + [20]) = (*($4 + [20]) + $2)
	
.LABEL $label$4
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	$2 = (*($3 + [4]) - *($3))
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$1 = CALL $7($2)
	*(($4 + [8])) = ($1 + $2)
	*($4) = $1
	*($4 + [4]) = $1
	$3 = *($3)
	$2 = (*(($3 + [4])) - $3)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	*($4 + [4]) = (*($4 + [4]) + $2)
	
.LABEL $label$5
	CALL void $6((int_32 $0), (int_32 ($4 + [16])), (int_32 $4), (int_32 $7))
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$6 }
	*($4 + [4]) = $2
	CALL $9($2)
	
.LABEL $label$6
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$7 }
	*($4 + [20]) = $2
	CALL $9($2)
	
.LABEL $label$7
	if ( ((*($0) & [1]) == 0) ){ goto $label$8 }
	CALL $9(*($0 + [8]))
	
.LABEL $label$8
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$3
	CALL $19(($4 + [16]))
	
.LABEL $label$2
	CALL $19($4)
	(unreachable)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8289])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [8289])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $7($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $19($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $9($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8507])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $27($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8451])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $41 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [148]) = $4
	*($3 + [144]) = $4
	*($3 + [152]) = ($4 + $5)
	*($3 + [136]) = [0]
	*($3 + [128]) = (int_64)0
	CALL $37(($3 + [144]), ($3 + [128]))
	*($3 + [120]) = [0]
	*($3 + [112]) = (int_64)0
	CALL $38(($3 + [144]), ($3 + [112]))
	*($3 + [104]) = [0]
	*($3 + [96]) = (int_64)0
	CALL $38(($3 + [144]), ($3 + [96]))
	*(($4 = (($3 + [48]) + [8]))) = *($3 + [152])
	*($3 + [48]) = *($3 + [144])
	$4 = *($4)
	*((($3 + [160]) + [8])) = $4
	*(($5 = (($3 + [176]) + [8]))) = $4
	$6 = *($3 + [48])
	*($3 + [176]) = $6
	*($3 + [160]) = $6
	$4 = *($5)
	*((($3 + [192]) + [8])) = $4
	*(($3 + [88])) = $4
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$0 = *($3 + [176])
	*($3 + [80]) = $0
	*($3 + [192]) = $0
	$4 = CALL $17(($3 + [32]), ($3 + [128]))
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	$5 = (*($3 + [116]) - *($3 + [112]))
	if ( ($5 == 0) ){ goto $label$6 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$2 = CALL $7($5)
	*(($3 + [24])) = ($2 + $5)
	*($3 + [16]) = $2
	*($3 + [20]) = $2
	$7 = *($3 + [112])
	$5 = (*($3 + [116]) - $7)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $7, $5)
	*($3 + [20]) = (*($3 + [20]) + $5)
	
.LABEL $label$6
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$5 = (*($3 + [100]) - *($3 + [96]))
	if ( ($5 == 0) ){ goto $label$7 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$2 = CALL $7($5)
	*(($3 + [8])) = ($2 + $5)
	*($3) = $2
	*($3 + [4]) = $2
	$7 = *($3 + [96])
	$5 = (*($3 + [100]) - $7)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($2, $7, $5)
	*($3 + [4]) = (*($3 + [4]) + $5)
	
.LABEL $label$7
	CALL $35(($3 + [64]), $4, ($3 + [16]), $3)
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$8 }
	*($3 + [4]) = $5
	CALL $9($5)
	
.LABEL $label$8
	$5 = *($3 + [16])
	if ( ($5 == 0) ){ goto $label$9 }
	*($3 + [20]) = $5
	CALL $9($5)
	
.LABEL $label$9
	if ( ((*($4) & [1]) == 0) ){ goto $label$10 }
	CALL $9(*($4 + [8]))
	
.LABEL $label$10
	$4 = *($3 + [96])
	if ( ($4 == 0) ){ goto $label$11 }
	*($3 + [100]) = $4
	CALL $9($4)
	
.LABEL $label$11
	$4 = *($3 + [112])
	if ( ($4 == 0) ){ goto $label$12 }
	*($3 + [116]) = $4
	CALL $9($4)
	
.LABEL $label$12
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($3 + [136])))
	
.LABEL $label$13
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$5
	CALL $19(($3 + [16]))
	
.LABEL $label$4
	CALL $19($3)
	(unreachable)
}

void .FUNC $40 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*(($3 + [20])) = $2
	*(($3 + [24])) = ($2 + $4)
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $2
	CALL $33($3)
	$global$0 = ($3 + [32])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $19($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $19($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8289])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [8289])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8289])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8289])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8289])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $8 (int_32 $0)
{
	return CALL $7($0)
}

void .FUNC $9 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

int_32 .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $4())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $5($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $1($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $1($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $4 ()
{
	return [8208]
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $1($1)
	
.LABEL $label$2
	*(CALL $4()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $1(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $2($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $2 (int_32 $0)
{
}

void .FUNC $3 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

void .FUNC $0 ()
{
	CALL $3()
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8220])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	CALL $13($0, $1)
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $16 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $7($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $10 (int_32 $0)
{
	CALL $9($0)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $6(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $6(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	return CALL $11($0, $1)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

int_32 .FUNC $36 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*(($4 + [96])) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	CALL $37(($4 + [48]), ($4 + [64]))
	CALL $38(($4 + [48]), ($4 + [76]))
	$3 = (($4 + [64]) + [24])
	CALL $38(($4 + [48]), $3)
	*(($6 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$6 = *($6)
	*((($4 + [112]) + [8])) = $6
	*(($7 = (($4 + [128]) + [8]))) = $6
	$8 = *($4)
	*($4 + [128]) = $8
	*($4 + [112]) = $8
	$6 = *($7)
	*((($4 + [144]) + [8])) = $6
	*((($4 + [16]) + [24])) = $6
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [104])
	*($4 + [144]) = ($4 + [16])
	CALL $39(($4 + [144]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $2($2)
	
.LABEL $label$4
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [92])) = $2
	CALL $9($2)
	
.LABEL $label$5
	$2 = *(($4 + [76]))
	if ( ($2 == 0) ){ goto $label$6 }
	*(($4 + [80])) = $2
	CALL $9($2)
	
.LABEL $label$6
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$7 }
	CALL $9(*(($4 + [72])))
	
.LABEL $label$7
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $42($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $7($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $18($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $18($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $16($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $9($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $34 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL require_auth(CALL $22())
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = (*($2 + [4]) - *($2))
	if ( ($7 == 0) ){ goto $label$2 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = CALL $7($7)
	*(($4 + [8])) = ($6 + $7)
	*($4) = $6
	*($4 + [4]) = $6
	$5 = *($2)
	$2 = (*(($2 + [4])) - $5)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $5, $2)
	$5 = ($6 + $2)
	*($4 + [4]) = $5
	goto $label$2 
	
.LABEL $label$3
	$5 = $6
	
.LABEL $label$2
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	$8 = ($5 - $6)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$7 }
	*($4 + [16]) = ($8 << [1])
	$7 = (($4 + [16]) | [1])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = (($8 + [16]) & [-16])
	$7 = CALL $7($2)
	*($4 + [16]) = ($2 | [1])
	*($4 + [24]) = $7
	*($4 + [20]) = $8
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = $7
	
.LOOP $label$8:
	*($2) = *($6)
	$2 = ($2 + [1])
	$6 = ($6 + [1])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$8 }
	$7 = ($7 + $8)
	
.LABEL $label$5
	*($7) = [0]
	$6 = *($4)
	if ( ($6 == 0) ){ goto $label$9 }
	*($4 + [4]) = $6
	CALL $9($6)
	
.LABEL $label$9
	CALL prints([8402])
	$6 = *($4 + [16])
	$2 = ($6 & [1])
	CALL prints_l(( *($4 + [24]) ? (($4 + [16]) | [1]) : $2 ), ( *($4 + [20]) ? uint_32($6 >> [1]) : $2 ))
	$6 = *($3)
	$2 = *($3 + [4])
	CALL prints([8412])
	CALL printui((CASTING uint_64)(uint_32 ($2 - $6)))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL $9(*(($4 + [24])))
	
.LABEL $label$10
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$4
	CALL $16(($4 + [16]))
	
.LABEL $label$1
	CALL $19($4)
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)4729645581788512256) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)6292807863906598912) ){ goto $label$1 }
	*($3 + [28]) = [0]
	*($3 + [24]) = [1]
	*($3) = *($3 + [24])
	CALL $34($1, $1, $3)
	goto $label$1 
	
.LABEL $label$2
	*($3 + [20]) = [0]
	*($3 + [16]) = [2]
	*($3 + [8]) = *($3 + [16])
	CALL $36($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $21([0])
	$global$0 = ($3 + [32])
}

void .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$1 = ($global$0 - [96])
	$global$0 = $1
	CALL prints([8295])
	*(($1 + [56])) = [0]
	*($1 + [48]) = (int_64)0
	$2 = *($0)
	$3 = CALL $15([8324])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$10 }
	*($1 + [48]) = ($3 << [1])
	$4 = (($1 + [48]) | [1])
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = (($3 + [16]) & [-16])
	$4 = CALL $7($5)
	*($1 + [48]) = ($5 | [1])
	*($1 + [56]) = $4
	*($1 + [52]) = $3
	
.LABEL $label$9
	CALL memcpy($4, [8324], $3)
	
.LABEL $label$8
	*(($4 + $3)) = [0]
	*(($1 + [40])) = [0]
	*($1 + [32]) = (int_64)0
	$3 = CALL $15([8328])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$13 }
	*($1 + [32]) = ($3 << [1])
	$4 = (($1 + [32]) | [1])
	if ( $3 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$5 = (($3 + [16]) & [-16])
	$4 = CALL $7($5)
	*($1 + [32]) = ($5 | [1])
	*($1 + [40]) = $4
	*($1 + [36]) = $3
	
.LABEL $label$12
	CALL memcpy($4, [8328], $3)
	
.LABEL $label$11
	*(($4 + $3)) = [0]
	$6 = *($0)
	$4 = CALL $17(($1 + [64]), ($1 + [32]))
	$3 = CALL $17(($1 + [80]), ($1 + [48]))
	CALL $26($1, $2, [0], $3, $4, [65], $6)
	if ( (*($1 + [64]) & [1]) ){ goto $label$15 }
	if ( (*($1 + [80]) & [1]) ){ goto $label$14 }
	goto $label$5 
	
.LABEL $label$15
	CALL $9(*($4 + [8]))
	if ( ((*($1 + [80]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$14
	CALL $9(*($3 + [8]))
	$3 = [1]
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$7
	CALL $16(($1 + [48]))
	
.LABEL $label$6
	CALL $16(($1 + [32]))
	
.LABEL $label$5
	$3 = [1]
	if ( (*($1 + [32]) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($1 + [48]) & $3) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $9(*($1 + [40]))
	if ( ((*($1 + [48]) & $3) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $9(*($1 + [56]))
	$global$0 = ($1 + [96])
	return 
	
.LABEL $label$1
	$global$0 = ($1 + [96])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $45(CALL $44($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8289])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8289])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	*($2 + [11]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [10]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [9]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [8]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$4 = *(($1 + [8]))
	*($2 + [3]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [2]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [1]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2) = (uint_64)$4 >> (uint_64)(int_64)56)
	$5 = (CASTING uint_32)(uint_64 $3)
	*($2 + [15]) = $5
	*($2 + [14]) = uint_32($5 >> [8])
	*($2 + [13]) = uint_32($5 >> [16])
	*($2 + [12]) = uint_32($5 >> [24])
	$5 = (CASTING uint_32)(uint_64 $4)
	*($2 + [7]) = $5
	*($2 + [6]) = uint_32($5 >> [8])
	*($2 + [5]) = uint_32($5 >> [16])
	*($2 + [4]) = uint_32($5 >> [24])
	$3 = *(($1 + [24]))
	*($2 + [23]) = $3
	$4 = *($1 + [16])
	*($2 + [27]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [26]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [25]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2 + [24]) = (uint_64)$4 >> (uint_64)(int_64)56)
	*($2 + [19]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [18]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [17]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [16]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$1 = (CASTING uint_32)(uint_64 $3)
	*($2 + [22]) = uint_32($1 >> [8])
	*($2 + [21]) = uint_32($1 >> [16])
	*($2 + [20]) = uint_32($1 >> [24])
	$1 = (CASTING uint_32)(uint_64 $4)
	*($2 + [31]) = $1
	*($2 + [30]) = uint_32($1 >> [8])
	*($2 + [29]) = uint_32($1 >> [16])
	*($2 + [28]) = uint_32($1 >> [24])
	$1 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [8289])
	$1 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [32])
	*(($1 = ($0 + [4]))) = (*($1) + [32])
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8507])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$5 = *($1 + [4])
	$6 = ($5 - $7)
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $43($1, ($2 - $6))
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($7 + $2)
	*(($1 + [4])) = $5
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($0 + [4])
	$2 = *($6)
	$4 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((int_32)*($4) != (int_32)$2) ){ goto $label$8 }
	CALL eosio_assert([0], [8451])
	$2 = *($6)
	
.LABEL $label$8
	CALL memcpy($7, $2, [1])
	$2 = (*($6) + [1])
	*($6) = $2
	$7 = ($7 + [1])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}