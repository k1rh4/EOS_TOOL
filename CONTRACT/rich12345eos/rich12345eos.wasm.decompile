(data (i32.const 8192) "EOS\00")
(data (i32.const 8196) "offerbet, 1\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8294) "\n\00")
(data (i32.const 8296) "gbet is not build\00")
(data (i32.const 8314) "bet is not open\00")
(data (i32.const 8330) "bet is revealed\00")
(data (i32.const 8346) "offerbet, 4\00")
(data (i32.const 8358) "offerbet, 5\00")
(data (i32.const 8370) "offerbet, 6\00")
(data (i32.const 8382) "bet is done\00")
(data (i32.const 8394) "offerbet, 8\00")
(data (i32.const 8406) "In maintenance!\00")
(data (i32.const 8422) "bet is opened\00")
(data (i32.const 8436) "bet is not reveal\00")
(data (i32.const 8454) "bet is not build\00")
(data (i32.const 8471) "bet is closure\00")
(data (i32.const 8486) "reveal is done\00")
(data (i32.const 8501) "bet is open\00")
(data (i32.const 8513) "reveal, total_balance:\00")
(data (i32.const 8536) "reveal, win_balance:\00")
(data (i32.const 8557) "reveal, owner:\00")
(data (i32.const 8572) ", share:\00")
(data (i32.const 8581) "reveal, bonus_pool:\00")
(data (i32.const 8601) "reveal, team_reward:\00")
(data (i32.const 8622) "calc777, count:\00")
(data (i32.const 8638) "calc777, reward:\00")
(data (i32.const 8655) ", residue:\00")
(data (i32.const 8666) ", avg_reward:\00")
(data (i32.const 8680) "calc777, end\00")
(data (i32.const 8693) "withdraw, 1\00")
(data (i32.const 8705) "withdraw, 2\00")
(data (i32.const 8717) "withdraw, it->balance <= 0\00")
(data (i32.const 8744) "withdraw, 3\00")
(data (i32.const 8756) "from lc3dh.io\00")
(data (i32.const 8770) "withdraw, 4\00")
(data (i32.const 8782) "withdraw, 5\00")
(data (i32.const 8794) "reset, 1\00")
(data (i32.const 8803) "reset, 2\00")
(data (i32.const 8812) "reset, 3\00")
(data (i32.const 8821) "reset, 4\00")
(data (i32.const 8830) "reset, 5\00")
(data (i32.const 8839) "user:\00")
(data (i32.const 8845) "text:\00")
(data (i32.const 8851) "erase, 1\n\00")
(data (i32.const 8861) "erase, 2\n\00")
(data (i32.const 8871) "erase, 3\n\00")
(data (i32.const 8881) "erase, 4\n\00")
(data (i32.const 8891) "erase, 5\n\00")
(data (i32.const 8901) "erase, 6\n\00")
(data (i32.const 8911) "erase, 7\n\00")
(data (i32.const 8921) "from == _self\00")
(data (i32.const 8935) "memo:\00")
(data (i32.const 8941) "quantity:\00")
(data (i32.const 8952) "memo is empty\00")
(data (i32.const 8966) ",\00")
(data (i32.const 8968) "arr.size() != 4\00")
(data (i32.const 8984) "transfer, 3\n\00")
(data (i32.const 8997) "total:\00")
(data (i32.const 9004) "_betid != betid\00")
(data (i32.const 9020) "total != amount\00")
(data (i32.const 9036) "transfer, 6\n\00")
(data (i32.const 9049) "transfer not made to this contract\00")
(data (i32.const 9084) "asset must be EOS\00")
(data (i32.const 9102) "invalid quantity\00")
(data (i32.const 9119) "transfer, 7\n\00")
(data (i32.const 9132) "only EOS token allowed\00")
(data (i32.const 9155) "must deposit positive quantity\00")
(data (i32.const 9186) "transfer, 8\n\00")
(data (i32.const 9199) "apply, 1\n\00")
(data (i32.const 9209) "transfer\00")
(data (i32.const 9218) "eosio.token\00")
(data (i32.const 9230) "apply, 2\n\00")
(data (i32.const 9240) "string is too long to be a valid symbol_code\00")
(data (i32.const 9285) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9338) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9387) "invalid symbol name\00")
(data (i32.const 9407) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9461) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9509) "error reading iterator\00")
(data (i32.const 9532) "read\00")
(data (i32.const 9537) "active")
(data (i32.const 9543) "eosio.token")
(data (i32.const 9554) "transfer")
(data (i32.const 9562) "write\00")
(data (i32.const 9568) "attempt to add asset with different symbol\00")
(data (i32.const 9611) "addition underflow\00")
(data (i32.const 9630) "addition overflow\00")
(data (i32.const 9648) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9707) "string is too long to be a valid name\00")
(data (i32.const 9745) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9812) "character is not in allowed character set for names\00")
(data (i32.const 9864) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9915) "cannot increment end iterator\00")
(data (i32.const 9945) "cannot create objects in table of another contract\00")
(data (i32.const 9996) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10048) "cannot pass end iterator to modify\00")
(data (i32.const 10083) "object passed to modify is not in multi_index\00")
(data (i32.const 10129) "cannot modify objects in table of another contract\00")
(data (i32.const 10180) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10239) "cannot pass end iterator to erase\00")
(data (i32.const 10273) "object passed to erase is not in multi_index\00")
(data (i32.const 10318) "cannot erase objects in table of another contract\00")
(data (i32.const 10368) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10421) "calc777, owner:\00")
(data (i32.const 10437) "withdraw, balance2:\00")
(data (i32.const 10457) "-%lld.%s %s\00")
(data (i32.const 10469) "%lld.%s %s\00")
(data (i32.const 10480) "get\00")
(data (i32.const 18912) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "prints" (func $fimport$2 (param i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "db_update_i64" (func $fimport$6 (param i32 i64 i32 i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "printui" (func $fimport$8 (param i64)))
(import "env" "db_find_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_store_i64" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "printn" (func $fimport$11 (param i64)))
(import "env" "send_inline" (func $fimport$12 (param i32 i32)))
(import "env" "prints_l" (func $fimport$13 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$14 (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$17 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$19))
(import "env" "db_idx64_lowerbound" (func $fimport$20 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$21 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$23 (result i64)))
(import "env" "db_idx64_store" (func $fimport$24 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$25 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$26 (param i32)))
(import "env" "memset" (func $fimport$27 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$39 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$40 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$41 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$43 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$45 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$46 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$47 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $40))
(export "_Znaj" (func $64))
(export "_Znwj" (func $63))
(export "_ZdlPv" (func $65))
(export "_ZdaPv" (func $66))
(export "_ZnwjSt11align_val_t" (func $67))
(export "_ZnajSt11align_val_t" (func $68))
(export "_ZdlPvSt11align_val_t" (func $69))
(export "_ZdaPvSt11align_val_t" (func $70))
(table $0 13 13 anyfunc)
(elem (i32.const 1) $35 $34 $11 $26 $31 $15 $14 $36 $9 $38 $79 $81)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18992))
(global $global$2 i32 (i32.const 18992))


void .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18892])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18700]
	$3 = (((int_32)$1 * (int_32)[12]) + [18700])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $95($1)
	
.LABEL $label$2
	*(CALL $76()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $95(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $98($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $95 (int_32 $0)
{
	return CALL $96([10508], $0)
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $97($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8208])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $97 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10500]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10504])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10500]) = [1]
	$2 = ($2 << [16])
	*([0] + [10504]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10504])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10504]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10500]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10500]) = [1]
	$3 = ($3 << [16])
	*([0] + [10504]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10504])
	
.LABEL $label$10
	*([0] + [10504]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	($0 + CALL $88($0))
	$2 = ($1 & [255])
	if ( ($2 == 0) ){ goto $label$1 }
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 == (int_32)($1 & [255])) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ($0 & [3]) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = *($0)
	if ( ((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) ){ goto $label$5 }
	$2 = ((int_32)$2 * (int_32)[16843009])
	
.LOOP $label$6:
	$3 = ((int_32)$3 ^ (int_32)$2)
	if ( ((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) ){ goto $label$5 }
	$3 = *($0 + [4])
	$0 = ($0 + [4])
	if ( (((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$6 }
	
.LABEL $label$5
	$0 = ($0 + [-1])
	
.LOOP $label$7:
	$0 = ($0 + [1])
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 != (int_32)($1 & [255])) ){ goto $label$7 }
	
.LABEL $label$2
	return $0
	return .LABEL $label$1
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($1 + [1]) == 0) ){ goto $label$3 }
	CALL memset($2, [0], [32])
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($1 + [1])
	
.LOOP $label$5:
	*(($4 = ($2 + (uint_32($3 >> [3]) & [28])))) = (*($4) | ([1] << ($3 & [31])))
	$3 = *($1)
	$1 = ($1 + [1])
	if ( $3 ){ goto $label$5 }
	
.LABEL $label$4
	$4 = $0
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = $0
	
.LOOP $label$6:
	if ( (*(($2 + (uint_32($3 >> [3]) & [28]))) & ([1] << ($3 & [31]))) ){ goto $label$2 }
	$3 = *($1 + [1])
	$4 = ($1 + [1])
	$1 = $4
	if ( $3 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL $90($0, $3)
	goto $label$1 
	
.LABEL $label$2
	$4 = $1
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	return ($4 - $0)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( $0 ){ goto $label$2 }
	$2 = [0]
	$0 = *([0] + [10496])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = ($0 + CALL $89($0, $1))
	if ( (*($2) == 0) ){ goto $label$4 }
	$0 = ($2 + CALL $91($2, $1))
	*([0] + [10496]) = $0
	if ( (*($0) == 0) ){ goto $label$3 }
	*([0] + [10496]) = ($0 + [1])
	*($0) = [0]
	return $2
	
.LABEL $label$4
	*([0] + [10496]) = [0]
	return [0]
	
.LABEL $label$3
	*([0] + [10496]) = [0]
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $76())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $94($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $38 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$5 = ($global$0 - [224])
	$global$0 = $5
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$1 }
	CALL prints([8921])
	$global$0 = ($5 + [224])
	return (unreachable)
	
.LABEL $label$1
	$6 = ($0 + [72])
	$7 = [0]
	$8 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7049699121392779264, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $4($6, $8)
	
.LABEL $label$2
	$9 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($9, [8296])
	CALL eosio_assert((int_64)(*($7 + [112]) == 0), [8406])
	CALL eosio_assert(((int_64)*($7 + [16]) == (int_64)1), [8314])
	CALL eosio_assert((int_64)(*($7 + [24]) == 0), [8330])
	if ( (*($4) & [1]) ){ goto $label$4 }
	$8 = ($4 + [1])
	goto $label$3 
	
.LABEL $label$4
	$8 = *($4 + [8])
	
.LABEL $label$3
	CALL prints([8935])
	CALL prints($8)
	CALL prints([8294])
	CALL prints([8941])
	CALL $39(($5 + [80]), $3)
	$8 = [1]
	$10 = *($5 + [80])
	$11 = ($10 & [1])
	CALL prints_l(( *($5 + [88]) ? (($5 + [80]) | [1]) : $11 ), ( *($5 + [84]) ? uint_32($10 >> [1]) : $11 ))
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($5 + [88])))
	
.LABEL $label$5
	CALL prints([8294])
	$10 = *($4)
	$11 = CALL $88([8951])
	if ( ((int_32)$11 != (int_32)( *($4 + [4]) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$6 }
	$8 = ((int_32)CALL $74($4, [0], [-1], [8951], $11) != (int_32)[0])
	
.LABEL $label$6
	CALL eosio_assert($8, [8952])
	*(($5 + [88])) = [0]
	*($5 + [80]) = (int_64)0
	$8 = CALL $88([8966])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$11 }
	*($5 + [80]) = ($8 << [1])
	$10 = (($5 + [80]) | [1])
	if ( $8 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$11 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($5 + [80]) = ($11 | [1])
	*($5 + [88]) = $10
	*($5 + [84]) = $8
	
.LABEL $label$10
	CALL memcpy($10, [8966], $8)
	
.LABEL $label$9
	*(($10 + $8)) = [0]
	CALL $1(($5 + [64]), $4, ($5 + [80]))
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($5 + [88]))
	
.LABEL $label$12
	CALL eosio_assert(((int_32)(*($5 + [68]) - *($5 + [64])) == (int_32)[48]), [8968])
	CALL prints([8984])
	$4 = *($5 + [64])
	if ( (*($4) & [1]) ){ goto $label$14 }
	$4 = ($4 + [1])
	goto $label$13 
	
.LABEL $label$14
	$4 = *($4 + [8])
	
.LABEL $label$13
	$10 = CALL $84($4)
	$4 = *($5 + [64])
	if ( (*($4 + [12]) & [1]) ){ goto $label$16 }
	$4 = (($4 + [12]) + [1])
	goto $label$15 
	
.LABEL $label$16
	$4 = *(($4 + [20]))
	
.LABEL $label$15
	$12 = (CASTING int_64)(int_32 CALL $83($4))
	$4 = CALL $88([8192])
	if ( ($4 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [9240])
	goto $label$18 
	
.LABEL $label$19
	if ( ($4 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$13 = (int_64)0
	
.LOOP $label$20:
	$8 = *(($4 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9285])
	
.LABEL $label$21
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$20 }
	$13 = ((int_64)$13 << (int_64)8)
	goto $label$7 
	
.LABEL $label$17
	$13 = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	CALL $71(($5 + [80]))
	
.LABEL $label$7
	$14 = (CASTING int_64)(int_32 $10)
	*($5 + [56]) = ((int_64)$13 | (int_64)4)
	*($5 + [48]) = $12
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9338])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$12 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$13 = $12
	$8 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$25
	$13 = $12
	
.LOOP $label$26:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$23 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $8 ){ goto $label$26 }
	$8 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$8 = [0]
	
.LABEL $label$22
	CALL eosio_assert($8, [9387])
	$4 = *($5 + [64])
	if ( (*($4 + [24]) & [1]) ){ goto $label$28 }
	$4 = (($4 + [24]) + [1])
	goto $label$27 
	
.LABEL $label$28
	$4 = *(($4 + [32]))
	
.LABEL $label$27
	$12 = (CASTING int_64)(int_32 CALL $83($4))
	$4 = CALL $88([8192])
	if ( ($4 <= [8]) ){ goto $label$32 }
	CALL eosio_assert([0], [9240])
	goto $label$31 
	
.LABEL $label$32
	if ( ($4 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$13 = (int_64)0
	
.LOOP $label$33:
	$8 = *(($4 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$34 }
	CALL eosio_assert([0], [9285])
	
.LABEL $label$34
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$33 }
	$13 = ((int_64)$13 << (int_64)8)
	goto $label$29 
	
.LABEL $label$30
	$13 = (int_64)0
	
.LABEL $label$29
	*($5 + [40]) = ((int_64)$13 | (int_64)4)
	*($5 + [32]) = $12
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9338])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$37:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$36 }
	$12 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$38 }
	$13 = $12
	$8 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$38
	$13 = $12
	
.LOOP $label$39:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$36 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $8 ){ goto $label$39 }
	$8 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	$8 = [0]
	
.LABEL $label$35
	CALL eosio_assert($8, [9387])
	$4 = *($5 + [64])
	if ( (*($4 + [36]) & [1]) ){ goto $label$41 }
	$4 = (($4 + [36]) + [1])
	goto $label$40 
	
.LABEL $label$41
	$4 = *(($4 + [44]))
	
.LABEL $label$40
	$15 = (CASTING int_64)(int_32 CALL $83($4))
	$4 = CALL $88([8192])
	if ( ($4 <= [8]) ){ goto $label$45 }
	CALL eosio_assert([0], [9240])
	goto $label$44 
	
.LABEL $label$45
	if ( ($4 == 0) ){ goto $label$43 }
	
.LABEL $label$44
	$13 = (int_64)0
	
.LOOP $label$46:
	$8 = *(($4 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$47 }
	CALL eosio_assert([0], [9285])
	
.LABEL $label$47
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$46 }
	$16 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)4)
	goto $label$42 
	
.LABEL $label$43
	$16 = (int_64)4
	
.LABEL $label$42
	*($5 + [16]) = $15
	*($5 + [24]) = $16
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9338])
	$13 = (uint_64)$16 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$50:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$49 }
	$12 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$51 }
	$13 = $12
	$8 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$51
	$13 = $12
	
.LOOP $label$52:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$49 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $8 ){ goto $label$52 }
	$8 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$49
	$8 = [0]
	
.LABEL $label$48
	CALL eosio_assert($8, [9387])
	$12 = *($5 + [48])
	$13 = *((($5 + [48]) + [8]))
	CALL eosio_assert(((int_64)*((($5 + [32]) + [8])) == (int_64)$13), [9568])
	$12 = ((int_64)$12 + (int_64)*($5 + [32]))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9611])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [9630])
	*($5 + [8]) = $13
	CALL eosio_assert(((int_64)$16 == (int_64)$13), [9568])
	$13 = ((int_64)$12 + (int_64)$15)
	*($5) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [9611])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [9630])
	CALL prints([8997])
	CALL $39(($5 + [80]), $5)
	$4 = *($5 + [80])
	$8 = ($4 & [1])
	CALL prints_l(( *($5 + [88]) ? (($5 + [80]) | [1]) : $8 ), ( *($5 + [84]) ? uint_32($4 >> [1]) : $8 ))
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$53 }
	CALL _ZdlPv(*((($5 + [80]) + [8])))
	
.LABEL $label$53
	CALL prints([8294])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$14), [9004])
	CALL eosio_assert(((int_64)*(($5 + [8])) == (int_64)*($3 + [8])), [9648])
	CALL eosio_assert(((int_64)*($5) == (int_64)*($3)), [9020])
	CALL prints([9036])
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [9049])
	$4 = CALL $88([8192])
	if ( ($4 <= [8]) ){ goto $label$57 }
	CALL eosio_assert([0], [9240])
	goto $label$56 
	
.LABEL $label$57
	if ( ($4 == 0) ){ goto $label$55 }
	
.LABEL $label$56
	$13 = (int_64)0
	
.LOOP $label$58:
	$8 = *(($4 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$59 }
	CALL eosio_assert([0], [9285])
	
.LABEL $label$59
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$58 }
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)4)
	goto $label$54 
	
.LABEL $label$55
	$13 = (int_64)4
	
.LABEL $label$54
	$4 = ($3 + [8])
	CALL eosio_assert(((int_64)*($4) == (int_64)$13), [9084])
	$8 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$60 }
	$13 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$62:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$61 }
	$12 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$63 }
	$13 = $12
	$8 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$63
	$13 = $12
	
.LOOP $label$64:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$61 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $8 ){ goto $label$64 }
	$8 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$61
	$8 = [0]
	
.LABEL $label$60
	CALL eosio_assert($8, [9102])
	CALL prints([9119])
	$4 = CALL $88([8192])
	if ( ($4 <= [8]) ){ goto $label$68 }
	CALL eosio_assert([0], [9240])
	goto $label$67 
	
.LABEL $label$68
	if ( ($4 == 0) ){ goto $label$66 }
	
.LABEL $label$67
	$13 = (int_64)0
	
.LOOP $label$69:
	$8 = *(($4 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$70 }
	CALL eosio_assert([0], [9285])
	
.LABEL $label$70
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$69 }
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)4)
	goto $label$65 
	
.LABEL $label$66
	$13 = (int_64)4
	
.LABEL $label$65
	$4 = ($3 + [8])
	CALL eosio_assert(((int_64)*($4) == (int_64)$13), [9132])
	$8 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$71 }
	$13 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$73:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$72 }
	$12 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$74 }
	$13 = $12
	$8 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$74
	$13 = $12
	
.LOOP $label$75:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$72 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $8 ){ goto $label$75 }
	$8 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$72
	$8 = [0]
	
.LABEL $label$71
	CALL eosio_assert($8, [9102])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [9155])
	CALL prints([9186])
	CALL eosio_assert($9, [10048])
	CALL eosio_assert(((int_32)*($7 + [120]) == (int_32)$6), [10083])
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$5()), [10129])
	$13 = *($5 + [48])
	*($7 + [48]) = ((int_64)*($7 + [48]) + (int_64)$13)
	$12 = *($5 + [32])
	*($7 + [56]) = ((int_64)*($7 + [56]) + (int_64)$12)
	$15 = *($5 + [16])
	*($7 + [64]) = ((int_64)*($7 + [64]) + (int_64)$15)
	*($7 + [40]) = ((int_64)*($7 + [40]) + (int_64)1)
	*($7 + [32]) = ((int_64)((int_64)$15 + (int_64)((int_64)$12 + (int_64)$13)) + (int_64)*($7 + [32]))
	$13 = *($7)
	CALL eosio_assert([1], [10180])
	*($5 + [216]) = (($5 + [80]) + [120])
	*($5 + [212]) = ($5 + [80])
	*($5 + [208]) = ($5 + [80])
	CALL $10(($5 + [208]), $7)
	CALL db_update_i64(*($7 + [124]), (int_64)0, ($5 + [80]), [120])
	$4 = ($0 + [88])
	if ( (uint_64)($13 <= *($4)) ){ goto $label$76 }
	*($4) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$76
	CALL $3($0, $1, ($5 + [48]), ($5 + [32]), ($5 + [16]))
	$10 = *($5 + [64])
	if ( ($10 == 0) ){ goto $label$77 }
	$8 = *($5 + [68])
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$79 }
	
.LOOP $label$80:
	$4 = ($8 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$81 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$81
	$8 = $4
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$80 }
	$4 = *($5 + [64])
	goto $label$78 
	
.LABEL $label$79
	$4 = $10
	
.LABEL $label$78
	*($5 + [68]) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$77
	$global$0 = ($5 + [224])
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $72(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $72(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9532])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9532])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9532])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9532])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $50(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $43 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [200]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9532])
	CALL memcpy(($4 + [200]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [128])) = $0
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*($4 + [160]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [200])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $98($2)
	
.LABEL $label$5
	CALL $47(($4 + [8]))
	$global$0 = ($4 + [208])
	return [1]
}

int_32 .FUNC $42 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [200]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9532])
	CALL memcpy(($4 + [200]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [128])) = $0
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*($4 + [160]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [200])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $98($2)
	
.LABEL $label$5
	CALL $47(($4 + [8]))
	$global$0 = ($4 + [208])
	return [1]
}

int_32 .FUNC $41 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [248])) = [0]
	*($4 + [232]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [224]) = ($2 + $7)
	*($4 + [216]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9532])
	CALL memcpy(($4 + [232]), $2, [8])
	*($4 + [220]) = ($2 + [8])
	$8 = (($4 + [232]) + [8])
	CALL $50(($4 + [216]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [256]) + [8])) = $3
	*(($9 = (($4 + [272]) + [8]))) = $3
	$10 = *($4 + [8])
	*($4 + [272]) = $10
	*($4 + [256]) = $10
	$3 = *($9)
	*((($4 + [288]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [272])
	*($4 + [40]) = $1
	*($4 + [288]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [232])
	$8 = CALL $72(($4 + [272]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $72(($4 + [288]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [288]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [272]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [272]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $98($2)
	
.LABEL $label$5
	CALL $47(($4 + [24]))
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [248])))
	
.LABEL $label$10
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL memory()
	CALL prints([9199])
	$4 = [0]
	[0]
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$3 }
	*($3 + [224]) = [9209]
	*($3 + [228]) = CALL $88([9209])
	*($3 + [104]) = *($3 + [224])
	CALL $27(($3 + [232]), ($3 + [104]))
	[1]
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	
.LABEL $label$3
	*($3 + [208]) = [9218]
	*($3 + [212]) = CALL $88([9218])
	*($3 + [96]) = *($3 + [208])
	CALL $27(($3 + [216]), ($3 + [96]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$4 }
	*($3 + [192]) = [9209]
	*($3 + [196]) = CALL $88([9209])
	*($3 + [88]) = *($3 + [192])
	$4 = ((int_64)$2 == (int_64)-3617168760277827584)
	CALL $27(($3 + [200]), ($3 + [88]))
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL prints([9230])
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$13 }
	if ( ((int_64)$2 <= (int_64)-4994302320998088705) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-4994302320998088704) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-3841130677495922688) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [1]
	*($3 + [80]) = *($3 + [112])
	CALL $41($0, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 <= (int_64)4929626698902028287) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)4929626698902028288) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)6182744098496053248) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)7746191359077253120) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [2]
	*($3 + [56]) = *($3 + [136])
	CALL $42($0, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-7954134735498772480) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-6533258874361741312) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [3]
	*($3 + [16]) = *($3 + [176])
	CALL $43($0, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$1 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [4]
	*($3 + [32]) = *($3 + [160])
	CALL $44($0, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [148]) = [0]
	*($3 + [144]) = [5]
	*($3 + [48]) = *($3 + [144])
	CALL $44($0, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [156]) = [0]
	*($3 + [152]) = [6]
	*($3 + [40]) = *($3 + [152])
	CALL $44($0, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [172]) = [0]
	*($3 + [168]) = [7]
	*($3 + [24]) = *($3 + [168])
	CALL $44($0, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [132]) = [0]
	*($3 + [128]) = [8]
	*($3 + [64]) = *($3 + [128])
	CALL $44($0, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [188]) = [0]
	*($3 + [184]) = [9]
	*($3 + [8]) = *($3 + [184])
	CALL $45($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [124]) = [0]
	*($3 + [120]) = [10]
	*($3 + [72]) = *($3 + [120])
	CALL $46($0, $1, ($3 + [72]))
	
.LABEL $label$1
	CALL $77([0])
	$global$0 = ($3 + [240])
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [176]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [96]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [56]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $46 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [336])
	$global$0 = $3
	*(($4 = $3) + [280]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [232]) + [24])) = (int_64)0
	*((($4 + [232]) + [40])) = [0]
	*($4 + [240]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [220]) = $2
	*($4 + [216]) = $2
	*($4 + [224]) = ($2 + $5)
	*($4 + [320]) = ($4 + [216])
	*($4 + [24]) = ($4 + [232])
	CALL $48(($4 + [24]), ($4 + [320]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [288]) + [8])) = $3
	*(($6 = (($4 + [304]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [304]) = $7
	*($4 + [288]) = $7
	$3 = *($6)
	*((($4 + [320]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [304])
	*($4 + [40]) = $1
	*($4 + [320]) = $1
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*($4 + [324]) = ($4 + [280])
	*($4 + [320]) = ($4 + [24])
	CALL $49(($4 + [320]), ($4 + [232]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $98($2)
	
.LABEL $label$4
	CALL $47(($4 + [24]))
	if ( ((*($4 + [264]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [272])))
	
.LABEL $label$5
	$global$0 = ($4 + [336])
	return [1]
}

int_32 .FUNC $45 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9532])
	CALL memcpy($4, $2, [1])
	$8 = *($4)
	*(($4 + [20])) = ($2 + [1])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [120])) = $0
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $98($2)
	
.LABEL $label$5
	CALL $47($4)
	$global$0 = ($4 + [192])
	return [1]
}

int_32 .FUNC $44 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [120])) = $0
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $98($2)
	
.LABEL $label$5
	CALL $47($4)
	$global$0 = ($4 + [192])
	return [1]
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [144])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [72])
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7049699121392779264, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $4($3, $5)
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [8296])
	CALL eosio_assert($5, [10048])
	CALL eosio_assert(((int_32)*($4 + [120]) == (int_32)$3), [10083])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$5()), [10129])
	*($4 + [112]) = (CASTING uint_64)(uint_32 $1)
	$6 = *($4)
	CALL eosio_assert([1], [10180])
	*($2 + [136]) = ($2 + [120])
	*($2 + [132]) = $2
	*($2 + [128]) = $2
	CALL $10(($2 + [128]), $4)
	CALL db_update_i64(*($4 + [124]), (int_64)0, $2, [120])
	$4 = ($0 + [88])
	if ( (uint_64)($6 <= *($4)) ){ goto $label$2 }
	*($4) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$global$0 = ($2 + [144])
}

int_32 .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9915])
	$2 = *($0 + [4])
	$3 = *($2 + [64])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)4229443000054317056, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [64]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$6), [9864])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $16($6, CALL $fimport$9(*($6), *($6 + [8]), (int_64)4229443000054317056, $5))
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$6), [9864])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [64])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [48])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [32])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [40])), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $16($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $56(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [48])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9996])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = *(*($5 + [12]))
	*($1 + [32]) = *(*($5 + [16]))
	*($1 + [40]) = *(*($5 + [20]))
	*($1 + [48]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$2 = $2
	$5 = ($2 + [-64])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($2 + [-8])
	CALL $57(($3 + [8]), $1)
	$8 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)4229443000054317056, *(*($0 + [8])), $8, $5, [56])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$5 = ($4 + [8])
	$8 = *($5)
	$0 = *(($0 + [8]))
	$11 = *($0)
	$12 = *($1)
	*($3 + [24]) = *(($1 + [16]))
	*($1 + [64]) = CALL db_idx64_store($8, (int_64)4229443000054317056, $11, $12, ($3 + [24]))
	$8 = *($0)
	$11 = *($5)
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*(($1 + [68])) = CALL db_idx64_store($11, (int_64)4229443000054317057, $8, $12, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9509])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $95($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([136])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = $0
	CALL $54(($3 + [32]), $5)
	*($5 + [124]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $13(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $98($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4229443000054317056, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$7), [9864])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $16($7, CALL $fimport$9(*($7), *($7 + [8]), (int_64)4229443000054317056, $6))
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$7), [9864])
	
.LABEL $label$2
	*(($4 + [64])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [96])
	$global$0 = $5
	*($5 + [48]) = $1
	CALL prints([8196])
	CALL prints([8294])
	CALL require_auth($1)
	$6 = [0]
	$7 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7049699121392779264, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $4(($0 + [72]), $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8296])
	CALL eosio_assert(((int_64)*($6 + [16]) == (int_64)1), [8314])
	CALL eosio_assert((int_64)(*($6 + [24]) == 0), [8330])
	CALL prints([8346])
	CALL prints([8294])
	*($5 + [40]) = *($6 + [8])
	$7 = ($0 + [32])
	*($5 + [32]) = $7
	CALL $5($5, ($5 + [32]), ($5 + [40]))
	$6 = *($5 + [4])
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((int_64)*($5 + [40]) != (int_64)*($6 + [16])) ){ goto $label$4 }
	$1 = *($5)
	*($5 + [24]) = $1
	$8 = [1]
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($6) == 0) ){ goto $label$2 }
	
.LOOP $label$5:
	if ( ((int_64)*($6 + [16]) != (int_64)*($5 + [40])) ){ goto $label$2 }
	if ( ((int_64)*($6 + [8]) == (int_64)*($5 + [48])) ){ goto $label$3 }
	CALL $6(($5 + [24]))
	$6 = *($5 + [28])
	if ( $6 ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	*($5 + [28]) = [0]
	*($5 + [24]) = ($5 + [32])
	$8 = [1]
	goto $label$2 
	
.LABEL $label$3
	CALL prints([8358])
	CALL prints([8294])
	$8 = [0]
	
.LABEL $label$2
	CALL prints([8370])
	CALL prints([8294])
	CALL eosio_assert($8, [8382])
	$1 = *($0)
	*($5) = $0
	*($5 + [12]) = $2
	*($5 + [16]) = $3
	*($5 + [20]) = $4
	*($5 + [4]) = ($5 + [48])
	*($5 + [8]) = ($5 + [40])
	*($5 + [88]) = $1
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$5()), [9945])
	*($5 + [64]) = $7
	*($5 + [68]) = $5
	*($5 + [72]) = ($5 + [88])
	*(($6 = CALL _Znwj([72])) + [56]) = $7
	*($6 + [8]) = (int_64)0
	CALL $7(($5 + [64]), $6)
	*($5 + [80]) = $6
	$1 = *($6)
	*($5 + [64]) = $1
	$8 = *($6 + [60])
	*($5 + [60]) = $8
	$2 = ($0 + [60])
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [64]))) ){ goto $label$8 }
	*($7 + [8]) = $1
	*($7 + [16]) = $8
	*($5 + [80]) = [0]
	*($7) = $6
	*($2) = ($7 + [24])
	$0 = *($5 + [80])
	*($5 + [80]) = [0]
	if ( $0 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $8(($0 + [56]), ($5 + [80]), ($5 + [64]), ($5 + [60]))
	$0 = *($5 + [80])
	*($5 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($0)
	
.LABEL $label$6
	CALL prints([8394])
	CALL prints([8294])
	$global$0 = ($5 + [96])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = ($1 + [1])
	$5 = CALL _Znaj((CALL $88(( *($1 + [8]) ? $4 : (*($1) & [1]) )) + [1]))
	CALL $87($5, ( *($1 + [8]) ? $4 : (*($1) & [1]) ))
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$6 = ($2 + [1])
	$4 = CALL $92($5, ( *($2 + [8]) ? $6 : (*($2) & [1]) ))
	if ( ($4 == 0) ){ goto $label$2 }
	$7 = ($3 | [1])
	$8 = ($3 + [8])
	$9 = ($0 + [4])
	
.LOOP $label$3:
	*($8) = [0]
	*($3) = (int_64)0
	$1 = CALL $88($4)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($1 << [1])
	$10 = $7
	if ( $1 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$11 = (($1 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($8) = $10
	*($3) = ($11 | [1])
	*($3 + [4]) = $1
	
.LABEL $label$5
	CALL memcpy($10, $4, $1)
	
.LABEL $label$4
	*(($10 + $1)) = [0]
	$1 = *($9)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [8]))) ){ goto $label$8 }
	*($1) = *($3)
	*(($1 + [8])) = *($8)
	*($8) = [0]
	*($9) = (*($9) + [12])
	*($3) = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	CALL $2($0, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$7
	$4 = CALL $92([0], ( *(($2 + [8])) ? $6 : (*($2) & [1]) ))
	if ( $4 ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdaPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $71($3)
}

void .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = ($global$0 - [144])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [72])
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7049699121392779264, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $4($2, $4)
	
.LABEL $label$1
	$4 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($4, [8454])
	CALL eosio_assert(((int_64)*($3 + [16]) == (int_64)1), [8471])
	CALL eosio_assert((int_64)(*($3 + [24]) == 0), [8486])
	CALL eosio_assert($4, [10048])
	CALL eosio_assert(((int_32)*($3 + [120]) == (int_32)$2), [10083])
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$5()), [10129])
	*($3 + [16]) = (int_64)0
	$5 = *($3)
	CALL eosio_assert([1], [10180])
	*($1 + [136]) = ($1 + [120])
	*($1 + [132]) = $1
	*($1 + [128]) = $1
	CALL $10(($1 + [128]), $3)
	CALL db_update_i64(*($3 + [124]), (int_64)0, $1, [120])
	$3 = ($0 + [88])
	if ( (uint_64)($5 <= *($3)) ){ goto $label$2 }
	*($3) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$global$0 = ($1 + [144])
}

void .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	float_64 $14
	float_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	float_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	$1 = ($global$0 - [192])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [72])
	$3 = (int_64)0
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7049699121392779264, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $4($2, $5)
	
.LABEL $label$1
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [8454])
	CALL eosio_assert((int_64)(*($4 + [16]) == 0), [8501])
	CALL eosio_assert((int_64)(*($4 + [24]) == 0), [8486])
	*($1 + [16]) = (int_64)0
	*($1 + [8]) = (int_64)0
	$7 = ($0 + [32])
	$5 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $16($7, $5)
	*($1 + [8]) = ((int_64)*($5 + [40]) + (int_64)((int_64)*($5 + [32]) + (int_64)*($5 + [24])))
	CALL eosio_assert([1], [9915])
	$5 = CALL db_next_i64(*($5 + [60]), ($1 + [48]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = CALL $16($7, $5)
	*($1 + [8]) = ((int_64)*($5 + [40]) + (int_64)((int_64)*($5 + [32]) + (int_64)((int_64)*($1 + [8]) + (int_64)*($5 + [24]))))
	CALL eosio_assert([1], [9915])
	$5 = CALL db_next_i64(*($5 + [60]), ($1 + [48]))
	if ( ((int_32)$5 >= (int_32)[0]) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = *($1 + [8])
	
.LABEL $label$2
	CALL prints([8513])
	CALL printui($3)
	CALL prints([8294])
	$5 = ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)10000)) % (uint_32)[10])
	*($1 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$5 }
	*($1 + [16]) = ( (int_64)1 ? (int_64)2 : ($5 & [1]) )
	
.LABEL $label$5
	$3 = (int_64)0
	$5 = CALL db_lowerbound_i64(*(($0 + [32])), *(($0 + [40])), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$3 = (int_64)0
	$5 = CALL $16($7, $5)
	$8 = *($5 + [24])
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$8 }
	$9 = [8]
	goto $label$6 
	
.LABEL $label$8
	$9 = [3]
	goto $label$6 
	
.LABEL $label$7
	$9 = [11]
	
.LABEL $label$6
	
.LOOP $label$9:
	goto $label$136 
	
.LABEL $label$145
	$5 = CALL $16($7, $5)
	$8 = *($5 + [24])
	if ( ((int_64)$8 == (int_64)0) ){ goto $label$70 }
	$9 = [3]
	goto $label$9 
	
.LABEL $label$144
	$10 = *($1 + [16])
	if ( ((int_64)$10 != (int_64)1) ){ goto $label$62 }
	$9 = [7]
	goto $label$9 
	
.LABEL $label$143
	$3 = ((int_64)$8 + (int_64)$3)
	goto $label$69 
	
.LABEL $label$142
	$8 = *($5 + [32])
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$61 }
	$9 = [10]
	goto $label$9 
	
.LABEL $label$141
	if ( (int_64)(*($5 + [40]) == 0) ){ goto $label$64 }
	$9 = [9]
	goto $label$9 
	
.LABEL $label$140
	$10 = *($1 + [16])
	if ( ((int_64)$10 != (int_64)0) ){ goto $label$65 }
	$9 = [5]
	goto $label$9 
	
.LABEL $label$139
	if ( (int_64)($8 == 0) ){ goto $label$67 }
	$9 = [6]
	goto $label$9 
	
.LABEL $label$138
	$3 = ((int_64)$8 + (int_64)$3)
	goto $label$68 
	
.LABEL $label$137
	$8 = *($5 + [32])
	if ( ((int_64)$10 == (int_64)0) ){ goto $label$66 }
	$9 = [0]
	goto $label$9 
	
.LABEL $label$136
	$8 = *($5 + [40])
	$3 = ((int_64)( ( $8 ? (int_64)0 : ((int_64)$8 != (int_64)0) ) ? (int_64)0 : ((int_64)$10 == (int_64)2) ) + (int_64)$3)
	$9 = [1]
	goto $label$9 
	
.LABEL $label$135
	CALL eosio_assert([1], [9915])
	$5 = CALL db_next_i64(*($5 + [60]), ($1 + [48]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$63 }
	$9 = [11]
	goto $label$9 
	
.LABEL $label$134
	CALL prints([8536])
	CALL printui($3)
	CALL prints([8294])
	$10 = *($1 + [8])
	if ( (int_64)($3 == 0) ){ goto $label$60 }
	$9 = [12]
	goto $label$9 
	
.LABEL $label$133
	$5 = CALL db_lowerbound_i64(*(($0 + [32])), *(($0 + [40])), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$59 }
	$9 = [13]
	goto $label$9 
	
.LABEL $label$132
	$11 = ($0 + [136])
	$12 = ($0 + [112])
	$13 = (($1 + [48]) + [40])
	$14 = (CASTING float_64)(uint_64 $3)
	$15 = (CASTING float_64)(uint_64 $10)
	$16 = ($0 + [140])
	$17 = ($0 + [120])
	$18 = ($0 + [128])
	$19 = ($0 + [144])
	$20 = CALL $16($7, $5)
	$10 = *($20 + [24])
	if ( ((int_64)$10 != (int_64)0) ){ goto $label$57 }
	goto $label$58 
	
.LABEL $label$131
	$20 = CALL $16($7, $5)
	$10 = *($20 + [24])
	if ( ((int_64)$10 == (int_64)0) ){ goto $label$72 }
	$9 = [14]
	goto $label$9 
	
.LABEL $label$130
	$3 = *($1 + [16])
	if ( ((int_64)$3 != (int_64)1) ){ goto $label$56 }
	$9 = [67]
	goto $label$9 
	
.LABEL $label$129
	$21 = ((float_64)((float_64)(CASTING float_64)(uint_64 $10) / (float_64)$14) * (float_64)$15)
	if ( ((((float_64)$21 < (float_64)(float_64)18446744073709551615) & ((float_64)$21 >= (float_64)(float_64)0)) == 0) ){ goto $label$30 }
	$9 = [68]
	goto $label$9 
	
.LABEL $label$128
	$10 = (Rounds 0)($21)
	goto $label$51 
	
.LABEL $label$127
	$10 = *($20 + [32])
	if ( ((int_64)$10 != (int_64)0) ){ goto $label$33 }
	$9 = [32]
	goto $label$9 
	
.LABEL $label$126
	if ( (int_64)(*($20 + [40]) == 0) ){ goto $label$36 }
	$9 = [27]
	goto $label$9 
	
.LABEL $label$125
	$3 = *($1 + [16])
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$53 }
	$9 = [28]
	goto $label$9 
	
.LABEL $label$124
	if ( (int_64)($10 == 0) ){ goto $label$55 }
	$9 = [29]
	goto $label$9 
	
.LABEL $label$123
	$21 = ((float_64)((float_64)(CASTING float_64)(uint_64 $10) / (float_64)$14) * (float_64)$15)
	if ( ((((float_64)$21 < (float_64)(float_64)18446744073709551615) & ((float_64)$21 >= (float_64)(float_64)0)) == 0) ){ goto $label$32 }
	$9 = [30]
	goto $label$9 
	
.LABEL $label$122
	$10 = (Rounds 0)($21)
	goto $label$50 
	
.LABEL $label$121
	$10 = *($20 + [32])
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$54 }
	$9 = [16]
	goto $label$9 
	
.LABEL $label$120
	$10 = (int_64)0
	if ( ((int_64)$3 != (int_64)2) ){ goto $label$49 }
	$9 = [64]
	goto $label$9 
	
.LABEL $label$119
	$3 = *($20 + [40])
	if ( (int_64)($3 == 0) ){ goto $label$52 }
	$9 = [65]
	goto $label$9 
	
.LABEL $label$118
	$21 = ((float_64)((float_64)(CASTING float_64)(uint_64 $3) / (float_64)$14) * (float_64)$15)
	if ( (((float_64)$21 < (float_64)(float_64)18446744073709551615) & ((float_64)$21 >= (float_64)(float_64)0)) ){ goto $label$31 }
	$9 = [31]
	goto $label$9 
	
.LABEL $label$117
	$10 = (int_64)0
	$9 = [17]
	goto $label$9 
	
.LABEL $label$116
	$3 = *($20 + [8])
	$23 = *($16)
	$22 = *($11)
	if ( ((int_32)$22 == (int_32)$23) ){ goto $label$45 }
	$9 = [18]
	goto $label$9 
	
.LABEL $label$115
	$5 = ($23 + [-24])
	$24 = *($5)
	if ( ((int_64)*($24) == (int_64)$3) ){ goto $label$44 }
	$9 = [19]
	goto $label$9 
	
.LABEL $label$114
	$23 = $5
	if ( ((int_32)$22 != (int_32)$5) ){ goto $label$46 }
	goto $label$47 
	
.LABEL $label$113
	if ( ((int_32)$22 == (int_32)$23) ){ goto $label$43 }
	$9 = [63]
	goto $label$9 
	
.LABEL $label$112
	CALL eosio_assert(((int_32)*($24 + [40]) == (int_32)$12), [9864])
	goto $label$41 
	
.LABEL $label$111
	$5 = CALL db_find_i64(*($12), *($17), (int_64)3607749779137757184, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$42 }
	$9 = [21]
	goto $label$9 
	
.LABEL $label$110
	$24 = CALL $17($12, $5)
	CALL eosio_assert(((int_32)*($24 + [40]) == (int_32)$12), [9864])
	goto $label$40 
	
.LABEL $label$109
	$8 = *($0)
	CALL eosio_assert(((int_64)*($12) == (int_64)CALL $fimport$5()), [9945])
	*(($24 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($24) = (int_64)0
	*($24 + [16]) = (int_64)0
	*($24 + [24]) = (int_64)0
	*($24 + [32]) = (int_64)0
	*($24 + [40]) = $12
	*($24) = *(($20 + [8]))
	*((($1 + [176]) + [8])) = $13
	*($1 + [180]) = ($1 + [48])
	*($1 + [176]) = ($1 + [48])
	CALL $18(($1 + [176]), $24)
	$3 = *($24)
	$23 = CALL db_store_i64(*($17), (int_64)3607749779137757184, $8, $3, ($1 + [48]), [40])
	*($24 + [44]) = $23
	if ( (uint_64)($3 <= *($18)) ){ goto $label$13 }
	$9 = [57]
	goto $label$9 
	
.LABEL $label$108
	*($18) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$9 = [58]
	goto $label$9 
	
.LABEL $label$107
	*($1 + [176]) = $24
	$3 = *($24)
	*($1 + [48]) = $3
	*($1 + [40]) = $23
	$5 = *($16)
	if ( ((uint_32)$5 >= (uint_32)*($19)) ){ goto $label$12 }
	$9 = [61]
	goto $label$9 
	
.LABEL $label$106
	*($5 + [8]) = $3
	*($5 + [16]) = $23
	*($1 + [176]) = [0]
	*($5) = $24
	*($16) = ($5 + [24])
	$5 = *($1 + [176])
	*($1 + [176]) = [0]
	if ( $5 ){ goto $label$37 }
	goto $label$38 
	
.LABEL $label$105
	CALL $19($11, ($1 + [176]), ($1 + [48]), ($1 + [40]))
	$5 = *($1 + [176])
	*($1 + [176]) = [0]
	if ( ($5 == 0) ){ goto $label$39 }
	$9 = [60]
	goto $label$9 
	
.LABEL $label$104
	CALL _ZdlPv($5)
	$9 = [22]
	goto $label$9 
	
.LABEL $label$103
	CALL prints([8557])
	CALL printn(*(($20 + [8])))
	CALL prints([8572])
	CALL printui($10)
	CALL prints([8294])
	$8 = *($0)
	CALL eosio_assert(((int_32)$24 != (int_32)[0]), [10048])
	CALL eosio_assert(((int_32)*($24 + [40]) == (int_32)$12), [10083])
	CALL eosio_assert(((int_64)*($12) == (int_64)CALL $fimport$5()), [10129])
	*($24 + [16]) = $10
	*($24 + [8]) = ((int_64)*($24 + [8]) + (int_64)$10)
	$3 = *($24)
	CALL eosio_assert([1], [10180])
	*((($1 + [176]) + [8])) = $13
	*($1 + [180]) = ($1 + [48])
	*($1 + [176]) = ($1 + [48])
	CALL $18(($1 + [176]), $24)
	CALL db_update_i64(*($24 + [44]), $8, ($1 + [48]), [40])
	if ( (uint_64)($3 <= *($18)) ){ goto $label$71 }
	$9 = [23]
	goto $label$9 
	
.LABEL $label$102
	*($18) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$9 = [24]
	goto $label$9 
	
.LABEL $label$101
	CALL eosio_assert([1], [9915])
	$5 = CALL db_next_i64(*($20 + [60]), ($1 + [48]))
	if ( ((int_32)$5 >= (int_32)[0]) ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$100
	$10 = (Rounds 0)($21)
	goto $label$48 
	
.LABEL $label$99
	$10 = *($1 + [8])
	$14 = (CASTING float_64)(uint_64 $10)
	$21 = ((float_64)$14 * (float_64)(float_64)0.02)
	if ( (((float_64)$21 < (float_64)(float_64)18446744073709551615) & ((float_64)$21 >= (float_64)(float_64)0)) ){ goto $label$29 }
	$9 = [55]
	goto $label$9 
	
.LABEL $label$98
	$8 = (int_64)0
	goto $label$28 
	
.LABEL $label$97
	$21 = ((float_64)(CASTING float_64)(uint_64 $10) * (float_64)(float_64)0.005)
	if ( (((float_64)$21 < (float_64)(float_64)18446744073709551615) & ((float_64)$21 >= (float_64)(float_64)0)) ){ goto $label$11 }
	$9 = [72]
	goto $label$9 
	
.LABEL $label$96
	$3 = (int_64)0
	goto $label$10 
	
.LABEL $label$95
	$8 = (Rounds 0)($21)
	$9 = [35]
	goto $label$9 
	
.LABEL $label$94
	$21 = ((float_64)$14 * (float_64)(float_64)0.005)
	if ( (((float_64)$21 < (float_64)(float_64)18446744073709551615) & ((float_64)$21 >= (float_64)(float_64)0)) ){ goto $label$27 }
	$9 = [54]
	goto $label$9 
	
.LABEL $label$93
	$3 = (int_64)0
	goto $label$25 
	
.LABEL $label$92
	$3 = (Rounds 0)($21)
	goto $label$26 
	
.LABEL $label$91
	$3 = (Rounds 0)($21)
	$9 = [71]
	goto $label$9 
	
.LABEL $label$90
	$8 = (int_64))($10 - $3)
	$9 = [37]
	goto $label$9 
	
.LABEL $label$89
	CALL prints([8581])
	CALL printui($3)
	CALL prints([8294])
	CALL prints([8601])
	CALL printui($8)
	CALL prints([8294])
	CALL eosio_assert($6, [10048])
	CALL eosio_assert(((int_32)*($4 + [120]) == (int_32)$2), [10083])
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$5()), [10129])
	*(($4 + [24])) = (int_64)1
	*($4 + [32]) = $10
	*($4 + [96]) = *($1 + [4])
	*($4 + [88]) = *($1 + [16])
	*($4 + [72]) = ((int_64)*($4 + [72]) + (int_64)$8)
	*($4 + [80]) = ((int_64)*($4 + [80]) + (int_64)$3)
	$3 = *($4)
	CALL eosio_assert([1], [10180])
	*($1 + [184]) = (($1 + [48]) + [120])
	*($1 + [180]) = ($1 + [48])
	*($1 + [176]) = ($1 + [48])
	CALL $10(($1 + [176]), $4)
	CALL db_update_i64(*($4 + [124]), (int_64)0, ($1 + [48]), [120])
	$5 = ($0 + [88])
	if ( (uint_64)($3 <= *($5)) ){ goto $label$24 }
	$9 = [38]
	goto $label$9 
	
.LABEL $label$88
	*($5) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$9 = [39]
	goto $label$9 
	
.LABEL $label$87
	$23 = ($0 + [152])
	$5 = CALL db_lowerbound_i64(*($0 + [152]), *(($0 + [160])), (int_64)7760153368969871360, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$23 }
	$9 = [40]
	goto $label$9 
	
.LABEL $label$86
	$5 = CALL $20($23, $5)
	CALL eosio_assert([1], [9915])
	$24 = CALL db_next_i64(*($5 + [52]), ($1 + [48]))
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$22 }
	$9 = [41]
	goto $label$9 
	
.LABEL $label$85
	$5 = [-1]
	$9 = [42]
	goto $label$9 
	
.LABEL $label$84
	$24 = CALL $20($23, $24)
	CALL eosio_assert([1], [9915])
	$5 = ($5 + [1])
	$24 = CALL db_next_i64(*($24 + [52]), ($1 + [48]))
	if ( ((int_32)$24 >= (int_32)[0]) ){ goto $label$21 }
	$9 = [43]
	goto $label$9 
	
.LABEL $label$83
	if ( ((uint_32)$5 <= (uint_32)[4]) ){ goto $label$20 }
	$9 = [49]
	goto $label$9 
	
.LABEL $label$82
	$5 = [0]
	$24 = CALL db_lowerbound_i64(*(($0 + [152])), *(($0 + [160])), (int_64)7760153368969871360, (int_64)0)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$15 }
	$9 = [50]
	goto $label$9 
	
.LABEL $label$81
	$5 = CALL $20($23, $24)
	$9 = [51]
	goto $label$9 
	
.LABEL $label$80
	$24 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($24, [10239])
	CALL eosio_assert($24, [9915])
	$24 = CALL db_next_i64(*($5 + [52]), ($1 + [48]))
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$14 }
	$9 = [52]
	goto $label$9 
	
.LABEL $label$79
	CALL $20($23, $24)
	$9 = [53]
	goto $label$9 
	
.LABEL $label$78
	CALL $21($23, $5)
	$9 = [44]
	goto $label$9 
	
.LABEL $label$77
	$3 = *($0)
	*($1 + [48]) = $0
	*($1 + [52]) = ($1 + [8])
	*($1 + [56]) = ($1 + [16])
	*($1 + [60]) = ($1 + [4])
	*($1 + [40]) = $3
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL $fimport$5()), [9945])
	*($1 + [176]) = $23
	*($1 + [180]) = ($1 + [48])
	*($1 + [184]) = ($1 + [40])
	*(($5 = CALL _Znwj([64])) + [24]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $23
	CALL $22(($1 + [176]), $5)
	*($1 + [32]) = $5
	$3 = *($5)
	*($1 + [176]) = $3
	$23 = *($5 + [52])
	*($1 + [28]) = $23
	$22 = ($0 + [180])
	$24 = *($22)
	if ( ((uint_32)$24 >= (uint_32)*(($0 + [184]))) ){ goto $label$19 }
	$9 = [48]
	goto $label$9 
	
.LABEL $label$76
	*($24 + [8]) = $3
	*($24 + [16]) = $23
	*($1 + [32]) = [0]
	*($24) = $5
	*($22) = ($24 + [24])
	$5 = *($1 + [32])
	*($1 + [32]) = [0]
	if ( $5 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$75
	CALL $23(($0 + [176]), ($1 + [32]), ($1 + [176]), ($1 + [28]))
	$5 = *($1 + [32])
	*($1 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$18 }
	$9 = [46]
	goto $label$9 
	
.LABEL $label$74
	CALL _ZdlPv($5)
	$9 = [47]
	goto $label$9 
	
.LABEL $label$73
	CALL $24($0)
	$global$0 = ($1 + [192])
	return 
	
.LABEL $label$72
	$9 = [26]
	goto $label$9 
	
.LABEL $label$71
	$9 = [24]
	goto $label$9 
	
.LABEL $label$70
	$9 = [8]
	goto $label$9 
	
.LABEL $label$69
	$9 = [1]
	goto $label$9 
	
.LABEL $label$68
	$9 = [1]
	goto $label$9 
	
.LABEL $label$67
	$9 = [0]
	goto $label$9 
	
.LABEL $label$66
	$9 = [5]
	goto $label$9 
	
.LABEL $label$65
	$9 = [0]
	goto $label$9 
	
.LABEL $label$64
	$9 = [1]
	goto $label$9 
	
.LABEL $label$63
	$9 = [2]
	goto $label$9 
	
.LABEL $label$62
	$9 = [4]
	goto $label$9 
	
.LABEL $label$61
	$9 = [9]
	goto $label$9 
	
.LABEL $label$60
	$9 = [69]
	goto $label$9 
	
.LABEL $label$59
	$9 = [33]
	goto $label$9 
	
.LABEL $label$58
	$9 = [26]
	goto $label$9 
	
.LABEL $label$57
	$9 = [14]
	goto $label$9 
	
.LABEL $label$56
	$9 = [15]
	goto $label$9 
	
.LABEL $label$55
	$9 = [16]
	goto $label$9 
	
.LABEL $label$54
	$9 = [28]
	goto $label$9 
	
.LABEL $label$53
	$9 = [16]
	goto $label$9 
	
.LABEL $label$52
	$9 = [17]
	goto $label$9 
	
.LABEL $label$51
	$9 = [17]
	goto $label$9 
	
.LABEL $label$50
	$9 = [17]
	goto $label$9 
	
.LABEL $label$49
	$9 = [17]
	goto $label$9 
	
.LABEL $label$48
	$9 = [17]
	goto $label$9 
	
.LABEL $label$47
	$9 = [20]
	goto $label$9 
	
.LABEL $label$46
	$9 = [18]
	goto $label$9 
	
.LABEL $label$45
	$9 = [20]
	goto $label$9 
	
.LABEL $label$44
	$9 = [62]
	goto $label$9 
	
.LABEL $label$43
	$9 = [20]
	goto $label$9 
	
.LABEL $label$42
	$9 = [56]
	goto $label$9 
	
.LABEL $label$41
	$9 = [22]
	goto $label$9 
	
.LABEL $label$40
	$9 = [22]
	goto $label$9 
	
.LABEL $label$39
	$9 = [22]
	goto $label$9 
	
.LABEL $label$38
	$9 = [22]
	goto $label$9 
	
.LABEL $label$37
	$9 = [60]
	goto $label$9 
	
.LABEL $label$36
	$9 = [24]
	goto $label$9 
	
.LABEL $label$35
	$9 = [33]
	goto $label$9 
	
.LABEL $label$34
	$9 = [25]
	goto $label$9 
	
.LABEL $label$33
	$9 = [27]
	goto $label$9 
	
.LABEL $label$32
	$9 = [31]
	goto $label$9 
	
.LABEL $label$31
	$9 = [66]
	goto $label$9 
	
.LABEL $label$30
	$9 = [31]
	goto $label$9 
	
.LABEL $label$29
	$9 = [34]
	goto $label$9 
	
.LABEL $label$28
	$9 = [35]
	goto $label$9 
	
.LABEL $label$27
	$9 = [36]
	goto $label$9 
	
.LABEL $label$26
	$9 = [37]
	goto $label$9 
	
.LABEL $label$25
	$9 = [37]
	goto $label$9 
	
.LABEL $label$24
	$9 = [39]
	goto $label$9 
	
.LABEL $label$23
	$9 = [44]
	goto $label$9 
	
.LABEL $label$22
	$9 = [44]
	goto $label$9 
	
.LABEL $label$21
	$9 = [42]
	goto $label$9 
	
.LABEL $label$20
	$9 = [44]
	goto $label$9 
	
.LABEL $label$19
	$9 = [45]
	goto $label$9 
	
.LABEL $label$18
	$9 = [47]
	goto $label$9 
	
.LABEL $label$17
	$9 = [47]
	goto $label$9 
	
.LABEL $label$16
	$9 = [46]
	goto $label$9 
	
.LABEL $label$15
	$9 = [51]
	goto $label$9 
	
.LABEL $label$14
	$9 = [53]
	goto $label$9 
	
.LABEL $label$13
	$9 = [58]
	goto $label$9 
	
.LABEL $label$12
	$9 = [59]
	goto $label$9 
	
.LABEL $label$11
	$9 = [70]
	goto $label$9 
	
.LABEL $label$10
	$9 = [71]
	goto $label$9 
	$9
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9509])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $95($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [56]) = $0
	*($5 + [8]) = (int_64)0
	CALL $55(($3 + [32]), $5)
	*($5 + [60]) = $1
	*($5 + [64 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $8(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $98($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9509])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $95($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	CALL $59(($3 + [32]), $5)
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $19(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $98($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [160])
	$global$0 = $2
	*($2 + [8]) = $1
	CALL require_auth(*($0))
	$3 = ($0 + [72])
	$4 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7049699121392779264, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $4($3, $4)
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	*($2) = $0
	*($2 + [4]) = ($2 + [8])
	*($2 + [136]) = $1
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$5()), [9945])
	*($2 + [16]) = $3
	*($2 + [20]) = $2
	*($2 + [24]) = ($2 + [136])
	*(($4 = CALL _Znwj([136])) + [24]) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = $3
	CALL $12(($2 + [16]), $4)
	*($2 + [152]) = $4
	$1 = *($4)
	*($2 + [16]) = $1
	$5 = *($4 + [124])
	*($2 + [148]) = $5
	$6 = ($0 + [100])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [104]))) ){ goto $label$4 }
	*($7 + [8]) = $1
	*($7 + [16]) = $5
	*($2 + [152]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	$7 = *($2 + [152])
	*($2 + [152]) = [0]
	if ( $7 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	CALL $13(($0 + [96]), ($2 + [152]), ($2 + [16]), ($2 + [148]))
	$7 = *($2 + [152])
	*($2 + [152]) = [0]
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$3
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$7 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($7, [8296])
	CALL eosio_assert((int_64)(*($4 + [112]) == 0), [8406])
	CALL eosio_assert((int_64)(*($4 + [16]) == 0), [8422])
	CALL eosio_assert(((int_64)*($4 + [24]) == (int_64)1), [8436])
	CALL eosio_assert($7, [10048])
	CALL eosio_assert(((int_32)*($4 + [120]) == (int_32)$3), [10083])
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$5()), [10129])
	*($4 + [16]) = (int_64)1
	*($4 + [24]) = (int_64)0
	*($4 + [8]) = *($2 + [8])
	$1 = *($4)
	CALL eosio_assert([1], [10180])
	*($2 + [144]) = (($2 + [16]) + [120])
	*($2 + [140]) = ($2 + [16])
	*($2 + [136]) = ($2 + [16])
	CALL $10(($2 + [136]), $4)
	CALL db_update_i64(*($4 + [124]), (int_64)0, ($2 + [16]), [120])
	$4 = ($0 + [88])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$5 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$global$0 = ($2 + [160])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [88])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [72])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [80])), (int_64)7049699121392779264, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $4($9, $10)
	*($3 + [4]) = [0]
	*($3) = $9
	$8 = *(*(CALL $58($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [88])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9996])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = (int_64)1
	$6 = $2
	$2 = ($6 + [-128])
	$global$0 = $2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($6 + [-8])
	CALL $10($3, $1)
	$8 = *($1)
	*($1 + [124]) = CALL db_store_i64(*($4 + [8]), (int_64)7049699121392779264, *(*($0 + [8])), $8, $2, [120])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $75 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [124]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9461])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7049699121392779264)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9407])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9407])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $4(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9532])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $62($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $73($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $73($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $71($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9532])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9562])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9562])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9562])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9562])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9562])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9532])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $34 (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
	CALL prints([8839])
	CALL printn($1)
}

int_32 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9461])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4229443000054317056)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9407])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9407])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $16(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $35 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL require_auth($1)
	if ( (*($2) & [1]) ){ goto $label$1 }
	CALL prints([8845])
	CALL prints(($2 + [1]))
	return 
	
.LABEL $label$1
	$2 = *($2 + [8])
	CALL prints([8845])
	CALL prints($2)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9562])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9562])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9562])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9562])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $61(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $75($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9532])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9532])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [10273])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [10318])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10368])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9509])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $95($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [24]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $0
	CALL $51(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $23(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $98($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [168])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [152])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [160])), (int_64)7760153368969871360, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $20($9, $10)
	*($3 + [4]) = [0]
	*($3) = $9
	$8 = *(*(CALL $25($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [168])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9996])
	*($1) = *($7)
	*($1 + [16]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [24]) = *(*($5 + [4]))
	*($1 + [32]) = *(*($5 + [8]))
	*($1 + [40]) = *(*($5 + [12]))
	$2 = $2
	$5 = ($2 + [-48])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = $2
	CALL $60($3, $1)
	$8 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($4 + [8]), (int_64)7760153368969871360, *(*($0 + [8])), $8, $5, [48])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9461])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7760153368969871360)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9407])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9407])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $20(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	float_64 $11
	int_64 $12
	int_64 $13
	$1 = ($global$0 - [144])
	$global$0 = $1
	*(($1 + [8])) = [0]
	*(($2 = ($1 + [16]))) = [0]
	$3 = ($0 + [152])
	*($1 + [4]) = $3
	*($1 + [12]) = $3
	$4 = ($1 + [12])
	$5 = ($0 + [160])
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = [0]
	$8 = CALL db_lowerbound_i64(*($3), *($5), (int_64)7760153368969871360, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $20($3, $8)
	
.LABEL $label$2
	if ( ((int_32)*($2) == (int_32)$7) ){ goto $label$3 }
	*($1 + [128]) = *($4)
	if ( ((int_64)*(*(CALL $25(($1 + [128])) + [4]) + [40]) != (int_64)7) ){ goto $label$3 }
	CALL $25($4)
	$6 = ((int_64)$6 + (int_64)1)
	goto $label$1 
	
.LABEL $label$3
	CALL prints([8622])
	CALL printui($6)
	CALL prints([8294])
	if ( (uint_64)($6 <= (int_64)3) ){ goto $label$4 }
	$5 = ($0 + [72])
	$8 = [0]
	$7 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7049699121392779264, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $4($5, $7)
	
.LABEL $label$5
	$9 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($9, [8454])
	if ( ((int_64)$6 == (int_64)5) ){ goto $label$11 }
	if ( ((int_64)$6 == (int_64)6) ){ goto $label$10 }
	if ( ((int_64)$6 != (int_64)7) ){ goto $label$9 }
	$10 = *($8 + [80])
	$7 = CALL db_lowerbound_i64(*(($0 + [152])), *(($0 + [160])), (int_64)7760153368969871360, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$4 = CALL $20($3, $7)
	
.LOOP $label$12:
	CALL eosio_assert([1], [10239])
	CALL eosio_assert([1], [9915])
	$7 = [0]
	$2 = CALL db_next_i64(*($4 + [52]), $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$13 }
	$7 = CALL $20($3, $2)
	
.LABEL $label$13
	CALL $21($3, $4)
	$4 = $7
	if ( $7 ){ goto $label$12 }
	goto $label$6 
	
.LABEL $label$11
	$11 = ((float_64)(CASTING float_64)(uint_64 *($8 + [80])) * (float_64)(float_64)0.23)
	if ( ((((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) == 0) ){ goto $label$8 }
	$10 = (Rounds 0)($11)
	goto $label$6 
	
.LABEL $label$10
	$11 = ((float_64)(CASTING float_64)(uint_64 *($8 + [80])) * (float_64)(float_64)0.33)
	if ( ((((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) == 0) ){ goto $label$8 }
	$10 = (Rounds 0)($11)
	goto $label$6 
	
.LABEL $label$9
	$11 = (CASTING float_64)(uint_64 *($8 + [80]))
	if ( ((int_64)$6 != (int_64)4) ){ goto $label$14 }
	$11 = ((float_64)$11 * (float_64)(float_64)0.13)
	if ( ((((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) == 0) ){ goto $label$8 }
	$10 = (Rounds 0)($11)
	goto $label$6 
	
.LABEL $label$14
	$11 = ((float_64)$11 * (float_64)(float_64)0.3)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$7 }
	
.LABEL $label$8
	$10 = (int_64)0
	goto $label$6 
	
.LABEL $label$7
	$10 = (Rounds 0)($11)
	
.LABEL $label$6
	CALL eosio_assert($9, [10048])
	CALL eosio_assert(((int_32)*($8 + [120]) == (int_32)$5), [10083])
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$5()), [10129])
	*($8 + [104]) = $10
	$12 = *($8)
	CALL eosio_assert([1], [10180])
	*($1 + [136]) = ($1 + [120])
	*($1 + [132]) = $1
	*($1 + [128]) = $1
	CALL $10(($1 + [128]), $8)
	$13 = (int_64)0
	CALL db_update_i64(*($8 + [124]), (int_64)0, $1, [120])
	$7 = ($0 + [88])
	if ( (uint_64)($12 <= *($7)) ){ goto $label$15 }
	*($7) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	$7 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$16 }
	$4 = ($0 + [32])
	$7 = CALL $16($4, $7)
	CALL eosio_assert([1], [9915])
	$7 = CALL db_next_i64(*($7 + [60]), $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$17 }
	$13 = (int_64)1
	
.LOOP $label$18:
	$7 = CALL $16($4, $7)
	CALL eosio_assert([1], [9915])
	$13 = ((int_64)$13 + (int_64)1)
	$7 = CALL db_next_i64(*($7 + [60]), $1)
	if ( ((int_32)$7 >= (int_32)[0]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$13 = (int_64)1
	
.LABEL $label$16
	$12 = *($8 + [80])
	CALL prints([8638])
	CALL printui($10)
	CALL prints([8655])
	CALL printui((int_64))($12 - $10))
	CALL prints([8666])
	$10 = ((uint_64)$10 / (uint_64)$13)
	CALL printui($10)
	CALL prints([8294])
	$7 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$19 }
	$4 = ($0 + [112])
	$7 = CALL $17($4, $7)
	$8 = ($1 + [40])
	$2 = ($1 + [136])
	$3 = ($0 + [128])
	
.LOOP $label$20:
	$12 = *($0)
	CALL eosio_assert([1], [10048])
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$4), [10083])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$5()), [10129])
	$13 = *($7)
	CALL prints([10421])
	CALL printn(*($7))
	CALL prints([8666])
	CALL printui($10)
	CALL prints([8294])
	*($7 + [32]) = $6
	*($7 + [24]) = $10
	CALL eosio_assert(((int_64)$13 == (int_64)*($7)), [10180])
	*($2) = $8
	*($1 + [132]) = $1
	*($1 + [128]) = $1
	CALL $18(($1 + [128]), $7)
	CALL db_update_i64(*($7 + [44]), $12, $1, [40])
	if ( (uint_64)($13 <= *($3)) ){ goto $label$21 }
	*($3) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	CALL eosio_assert([1], [9915])
	$7 = CALL db_next_i64(*(($7 + [44])), $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$19 }
	$7 = CALL $17($4, $7)
	goto $label$20 
	
.LABEL $label$19
	CALL prints([8680])
	CALL prints([8294])
	
.LABEL $label$4
	$global$0 = ($1 + [144])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9707])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9812])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9745])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9812])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_64 $23
	$1 = ($global$0 - [176])
	$global$0 = $1
	CALL prints([8693])
	CALL prints([8294])
	CALL require_auth(*($0))
	CALL prints([8705])
	CALL prints([8294])
	$2 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$3 = ($1 + [132])
	$4 = (($1 + [48]) + [32])
	$5 = (($1 + [32]) | [1])
	$6 = (($1 + [48]) + [40])
	$7 = ($0 + [128])
	$8 = ($1 + [124])
	$9 = ($0 + [112])
	$10 = CALL $17($9, $2)
	if ( ((int_64)*($10 + [16]) != (int_64)0) ){ goto $label$3 }
	$11 = [44]
	goto $label$1 
	
.LABEL $label$3
	$11 = [3]
	goto $label$1 
	
.LABEL $label$2
	$11 = [45]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$40 
	
.LABEL $label$80
	$10 = CALL $17($9, $2)
	if ( ((int_64)*($10 + [16]) == (int_64)0) ){ goto $label$34 }
	$11 = [3]
	goto $label$4 
	
.LABEL $label$79
	CALL prints([8744])
	CALL prints([8294])
	$12 = *(($10 + [16]))
	$2 = CALL $88([8192])
	if ( ($2 <= [8]) ){ goto $label$30 }
	$11 = [43]
	goto $label$4 
	
.LABEL $label$78
	CALL eosio_assert([0], [9240])
	goto $label$28 
	
.LABEL $label$77
	if ( ($2 == 0) ){ goto $label$29 }
	$11 = [5]
	goto $label$4 
	
.LABEL $label$76
	$13 = (int_64)0
	$11 = [6]
	goto $label$4 
	
.LABEL $label$75
	$14 = *(($2 + [8191]))
	if ( ((($14 + [-65]) & [255]) <= [26]) ){ goto $label$26 }
	$11 = [41]
	goto $label$4 
	
.LABEL $label$74
	CALL eosio_assert([0], [9285])
	$11 = [7]
	goto $label$4 
	
.LABEL $label$73
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$27 }
	$11 = [8]
	goto $label$4 
	
.LABEL $label$72
	$15 = ((int_64)$13 << (int_64)8)
	$11 = [9]
	goto $label$4 
	
.LABEL $label$71
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9338])
	$13 = (uint_64)$15 >> (uint_64)(int_64)8)
	$16 = ((int_64)$15 | (int_64)4)
	$2 = [0]
	$11 = [10]
	goto $label$4 
	
.LABEL $label$70
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$11 = [35]
	goto $label$4 
	
.LABEL $label$69
	$15 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$11 = [36]
	goto $label$4 
	
.LABEL $label$68
	$13 = $15
	$14 = [1]
	$17 = $2
	$2 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$67
	$13 = $15
	$11 = [38]
	goto $label$4 
	
.LABEL $label$66
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$11 = [39]
	goto $label$4 
	
.LABEL $label$65
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$14 = ((int_32)$2 < (int_32)[6])
	$17 = ($2 + [1])
	$2 = $17
	if ( $14 ){ goto $label$5 }
	$11 = [40]
	goto $label$4 
	
.LABEL $label$64
	$14 = [1]
	$2 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$63
	$14 = [0]
	$11 = [12]
	goto $label$4 
	
.LABEL $label$62
	CALL eosio_assert($14, [9387])
	$15 = *($0)
	CALL eosio_assert([1], [10048])
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$9), [10083])
	CALL eosio_assert(((int_64)*($9) == (int_64)CALL $fimport$5()), [10129])
	*($10 + [16]) = (int_64)0
	$13 = *($10)
	CALL prints([10437])
	CALL printui(*($10 + [16]))
	CALL prints([8294])
	CALL eosio_assert(((int_64)$13 == (int_64)*($10)), [10180])
	*(($18 = (($1 + [104]) + [8]))) = $6
	*($1 + [108]) = ($1 + [48])
	*($1 + [104]) = ($1 + [48])
	CALL $18(($1 + [104]), $10)
	CALL db_update_i64(*($10 + [44]), $15, ($1 + [48]), [40])
	if ( (uint_64)($13 <= *($7)) ){ goto $label$18 }
	$11 = [13]
	goto $label$4 
	
.LABEL $label$61
	*($7) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	$11 = [14]
	goto $label$4 
	
.LABEL $label$60
	$13 = *($0)
	*($1 + [164]) = [6]
	*($1 + [160]) = [9537]
	*($1 + [24]) = *($1 + [160])
	CALL $27(($1 + [48]), ($1 + [24]))
	$15 = *($1 + [48])
	*($1 + [164]) = [11]
	*($1 + [160]) = [9543]
	*($1 + [16]) = *($1 + [160])
	CALL $27(($1 + [48]), ($1 + [16]))
	$19 = *($1 + [48])
	*($1 + [160]) = [9554]
	*($1 + [164]) = [8]
	*($1 + [8]) = *($1 + [160])
	CALL $27(($1 + [48]), ($1 + [8]))
	$20 = *($1 + [48])
	*(($14 = (($1 + [32]) + [8]))) = [0]
	*($1 + [32]) = (int_64)0
	$2 = CALL $88([8756])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$17 }
	$11 = [15]
	goto $label$4 
	
.LABEL $label$59
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$16 }
	$11 = [33]
	goto $label$4 
	
.LABEL $label$58
	*($1 + [32]) = ($2 << [1])
	$21 = $5
	if ( $2 ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$57
	$17 = (($2 + [16]) & [-16])
	$21 = CALL _Znwj($17)
	*($14) = $21
	*($1 + [32]) = ($17 | [1])
	*($1 + [36]) = $2
	$11 = [17]
	goto $label$4 
	
.LABEL $label$56
	CALL memcpy($21, [8756], $2)
	$11 = [18]
	goto $label$4 
	
.LABEL $label$55
	$17 = ($10 + [44])
	*(($21 + $2)) = [0]
	*(($21 = (($1 + [104]) + [16]))) = (int_64)0
	*(($22 = (($1 + [104]) + [24]))) = [0]
	$23 = *($10)
	*((($1 + [48]) + [16])) = $12
	*((($1 + [48]) + [24])) = $16
	*($4) = *($1 + [32])
	*(($4 + [8])) = *($14)
	*($18) = $20
	*((($1 + [48]) + [8])) = $23
	*($14) = [0]
	*($1 + [48]) = *($0)
	*($1 + [32]) = (int_64)0
	*($1 + [104]) = $19
	$2 = CALL _Znwj([16])
	*($21) = $2
	*($2) = $13
	*($2 + [8]) = $15
	*($3) = (int_64)0
	*((($1 + [104]) + [36])) = [0]
	$2 = ($2 + [16])
	*($22) = $2
	*($8) = $2
	$2 = *($4)
	$10 = ( *((($1 + [48]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($10 + [32])
	$13 = (CASTING uint_64)(uint_32 $10)
	$11 = [19]
	goto $label$4 
	
.LABEL $label$54
	$2 = ($2 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$13 }
	$11 = [20]
	goto $label$4 
	
.LABEL $label$53
	if ( ($2 == 0) ){ goto $label$12 }
	$11 = [21]
	goto $label$4 
	
.LABEL $label$52
	CALL $28($3, $2)
	$10 = *((($1 + [104]) + [32]))
	$2 = *($3)
	goto $label$11 
	
.LABEL $label$51
	$10 = [0]
	$2 = [0]
	$11 = [22]
	goto $label$4 
	
.LABEL $label$50
	*((($1 + [160]) + [8])) = $10
	*($1 + [164]) = $2
	*($1 + [160]) = $2
	*($1 + [144]) = ($1 + [160])
	*($1 + [152]) = ($1 + [48])
	CALL $29(($1 + [152]), ($1 + [144]))
	CALL $30(($1 + [160]), ($1 + [104]))
	$2 = *($1 + [160])
	CALL send_inline($2, (*($1 + [164]) - $2))
	$2 = *($1 + [160])
	if ( ($2 == 0) ){ goto $label$10 }
	$11 = [23]
	goto $label$4 
	
.LABEL $label$49
	*($1 + [164]) = $2
	CALL _ZdlPv($2)
	$11 = [24]
	goto $label$4 
	
.LABEL $label$48
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$9 }
	$11 = [25]
	goto $label$4 
	
.LABEL $label$47
	*((($1 + [104]) + [32])) = $2
	CALL _ZdlPv($2)
	$11 = [26]
	goto $label$4 
	
.LABEL $label$46
	$2 = *($21)
	if ( ($2 == 0) ){ goto $label$8 }
	$11 = [27]
	goto $label$4 
	
.LABEL $label$45
	*($8) = $2
	CALL _ZdlPv($2)
	$11 = [28]
	goto $label$4 
	
.LABEL $label$44
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	$11 = [29]
	goto $label$4 
	
.LABEL $label$43
	CALL _ZdlPv(*($6))
	$11 = [30]
	goto $label$4 
	
.LABEL $label$42
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$32 }
	$11 = [31]
	goto $label$4 
	
.LABEL $label$41
	CALL _ZdlPv(*($14))
	$11 = [0]
	goto $label$4 
	
.LABEL $label$40
	CALL prints([8770])
	CALL prints([8294])
	goto $label$33 
	
.LABEL $label$39
	$15 = (int_64)0
	goto $label$25 
	
.LABEL $label$38
	CALL prints([8717])
	CALL prints([8294])
	$17 = ($10 + [44])
	$11 = [1]
	goto $label$4 
	
.LABEL $label$37
	CALL eosio_assert([1], [9915])
	$2 = CALL db_next_i64(*($17), ($1 + [48]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$31 }
	$11 = [45]
	goto $label$4 
	
.LABEL $label$36
	CALL prints([8782])
	CALL prints([8294])
	$global$0 = ($1 + [176])
	return (unreachable)
	
.LABEL $label$35
	CALL $71(($1 + [32]))
	
.LABEL $label$34
	$11 = [44]
	goto $label$4 
	
.LABEL $label$33
	$11 = [1]
	goto $label$4 
	
.LABEL $label$32
	$11 = [0]
	goto $label$4 
	
.LABEL $label$31
	$11 = [2]
	goto $label$4 
	
.LABEL $label$30
	$11 = [4]
	goto $label$4 
	
.LABEL $label$29
	$11 = [42]
	goto $label$4 
	
.LABEL $label$28
	$11 = [5]
	goto $label$4 
	
.LABEL $label$27
	$11 = [6]
	goto $label$4 
	
.LABEL $label$26
	$11 = [7]
	goto $label$4 
	
.LABEL $label$25
	$11 = [9]
	goto $label$4 
	
.LABEL $label$24
	$11 = [10]
	goto $label$4 
	
.LABEL $label$23
	$11 = [12]
	goto $label$4 
	
.LABEL $label$22
	$11 = [10]
	goto $label$4 
	
.LABEL $label$21
	$11 = [12]
	goto $label$4 
	
.LABEL $label$20
	$11 = [11]
	goto $label$4 
	
.LABEL $label$19
	$11 = [11]
	goto $label$4 
	
.LABEL $label$18
	$11 = [14]
	goto $label$4 
	
.LABEL $label$17
	$11 = [34]
	goto $label$4 
	
.LABEL $label$16
	$11 = [16]
	goto $label$4 
	
.LABEL $label$15
	$11 = [18]
	goto $label$4 
	
.LABEL $label$14
	$11 = [17]
	goto $label$4 
	
.LABEL $label$13
	$11 = [19]
	goto $label$4 
	
.LABEL $label$12
	$11 = [32]
	goto $label$4 
	
.LABEL $label$11
	$11 = [22]
	goto $label$4 
	
.LABEL $label$10
	$11 = [24]
	goto $label$4 
	
.LABEL $label$9
	$11 = [26]
	goto $label$4 
	
.LABEL $label$8
	$11 = [28]
	goto $label$4 
	
.LABEL $label$7
	$11 = [30]
	goto $label$4 
	
.LABEL $label$6
	$11 = [37]
	goto $label$4 
	
.LABEL $label$5
	$11 = [38]
	goto $label$4 
	$11
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $98($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $98($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $93(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10484])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $93(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9562])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9562])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9562])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $95($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10484])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $95($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10480])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $28($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9532])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*((($2 = ($global$0 - [32])) + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($1 + [1]) == 0) ){ goto $label$2 }
	$1 = ($1 + [1])
	
.LOOP $label$4:
	*(($4 = ($2 + (uint_32($3 >> [3]) & [28])))) = (*($4) | ([1] << ($3 & [31])))
	$3 = *($1)
	$1 = ($1 + [1])
	if ( $3 ){ goto $label$4 }
	$4 = $0
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$5 }
	$1 = $0
	
.LOOP $label$6:
	if ( ((*(($2 + (uint_32($3 >> [3]) & [28]))) & ([1] << ($3 & [31]))) == 0) ){ goto $label$1 }
	$3 = *($1 + [1])
	$4 = ($1 + [1])
	$1 = $4
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$5
	return ($4 - $0)
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	$1 = ($0 + [-1])
	
.LOOP $label$7:
	$1 = ($1 + [1])
	if ( ((int_32)*($1) == (int_32)$3) ){ goto $label$7 }
	return ($1 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	CALL $86($0, $1)
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( (((int_32)$1 ^ (int_32)$0) & [3]) ){ goto $label$2 }
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = *($1)
	*($0) = $2
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ($1 & [3]) ){ goto $label$4 }
	
.LABEL $label$3
	$2 = *($1)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$2 }
	
.LOOP $label$5:
	*($0) = $2
	$2 = *($1 + [4])
	$0 = ($0 + [4])
	$1 = ($1 + [4])
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	
.LABEL $label$2
	$2 = *($1)
	*($0) = $2
	if ( ($2 == 0) ){ goto $label$1 }
	$1 = ($1 + [1])
	
.LOOP $label$6:
	$2 = *($1)
	*($0 + [1]) = $2
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	if ( $2 ){ goto $label$6 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

int_32 .FUNC $83 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

int_32 .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $78([12], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $71 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $76 ()
{
	return [10488]
}

void .FUNC $77 (int_32 $0)
{
}

int_32 .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $85(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$11 = $10
	$global$0 = $11
	*(($12 = ($10 + $5))) = [0]
	$13 = *($1)
	$2 = ((int_64)$13 < (int_64)0)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : $2 ) * (int_64)((int_64)$13 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($12 + [-1])
	
.LOOP $label$5:
	$14 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$14 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $14
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ( [10457] ? [10469] : $2 )
	$9 = ((int_64)$13 / (int_64)$9)
	$15 = ($5 + [32])
	$11 = ($11 - (($5 + [47]) & [496]))
	$global$0 = $11
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*($3 + [8]) = $10
	*($3) = $9
	*($3 + [12]) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	CALL $82($11, $15, $12, $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $88($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $71($0)
}

void .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL prints([8851])
	CALL require_auth(*($0))
	CALL prints([8861])
	$2 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [32])
	$4 = CALL $16($3, $2)
	
.LOOP $label$2:
	CALL prints([8871])
	CALL eosio_assert([1], [10239])
	CALL eosio_assert([1], [9915])
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [60]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $16($3, $5)
	
.LABEL $label$3
	CALL $32($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	$2 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7049699121392779264, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + [72])
	$4 = CALL $4($3, $2)
	
.LOOP $label$5:
	CALL prints([8881])
	CALL eosio_assert([1], [10239])
	CALL eosio_assert([1], [9915])
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [124]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $4($3, $5)
	
.LABEL $label$6
	CALL $37($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$5 }
	
.LABEL $label$4
	$2 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$3 = ($0 + [112])
	$4 = CALL $17($3, $2)
	
.LOOP $label$8:
	CALL prints([8891])
	CALL eosio_assert([1], [10239])
	CALL eosio_assert([1], [9915])
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [44]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$2 = CALL $17($3, $5)
	
.LABEL $label$9
	CALL $33($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$8 }
	
.LABEL $label$7
	$2 = CALL db_lowerbound_i64(*($0 + [152]), *(($0 + [160])), (int_64)7760153368969871360, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$10 }
	$3 = ($0 + [152])
	$4 = CALL $20($3, $2)
	
.LOOP $label$11:
	CALL prints([8901])
	CALL eosio_assert([1], [10239])
	CALL eosio_assert([1], [9915])
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [52]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	$2 = CALL $20($3, $5)
	
.LABEL $label$12
	CALL $21($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$11 }
	
.LABEL $label$10
	CALL prints([8911])
	$global$0 = ($1 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [120]) == (int_32)$0), [10273])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [10318])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10368])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [124]))
}

int_32 .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [11] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $80($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $80($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $80($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $80($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18912]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $80($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $80($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $80($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [10273])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [10318])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10368])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [60]))
	$6 = *(($1 + [64]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229443000054317056, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [68]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229443000054317057, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [10273])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [10318])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10368])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $28($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9562])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9562])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $53(CALL $52($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [144])
	$global$0 = $1
	CALL prints([8794])
	CALL prints([8294])
	CALL require_auth(*($0))
	CALL prints([8803])
	CALL prints([8294])
	$2 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7049699121392779264, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [72])
	$2 = CALL $4($3, $2)
	$4 = *($0)
	CALL eosio_assert([1], [10048])
	CALL eosio_assert(((int_32)*($2 + [120]) == (int_32)$3), [10083])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$5()), [10129])
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = (int_64)1
	*($2 + [32]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = (int_64)0
	*($2 + [64]) = (int_64)0
	*($2 + [88]) = (int_64)0
	*($2 + [96]) = (int_64)0
	*($2 + [40]) = (int_64)0
	$5 = *($2)
	CALL eosio_assert([1], [10180])
	*($1 + [136]) = ($1 + [120])
	*($1 + [132]) = $1
	*($1 + [128]) = $1
	CALL $10(($1 + [128]), $2)
	CALL db_update_i64(*($2 + [124]), $4, $1, [120])
	$2 = ($0 + [88])
	if ( (uint_64)($5 <= *($2)) ){ goto $label$1 }
	*($2) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	CALL prints([8812])
	CALL prints([8294])
	$2 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$6 = ($0 + [32])
	$3 = CALL $16($6, $2)
	
.LOOP $label$3:
	CALL eosio_assert([1], [10239])
	CALL eosio_assert([1], [9915])
	$2 = [0]
	$7 = CALL db_next_i64(*($3 + [60]), $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $16($6, $7)
	
.LABEL $label$4
	CALL $32($6, $3)
	$3 = $2
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	CALL prints([8821])
	CALL prints([8294])
	$2 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$6 = ($0 + [112])
	$3 = CALL $17($6, $2)
	
.LOOP $label$6:
	CALL eosio_assert([1], [10239])
	CALL eosio_assert([1], [9915])
	$2 = [0]
	$7 = CALL db_next_i64(*($3 + [44]), $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$2 = CALL $17($6, $7)
	
.LABEL $label$7
	CALL $33($6, $3)
	$3 = $2
	if ( $2 ){ goto $label$6 }
	
.LABEL $label$5
	CALL prints([8830])
	CALL prints([8294])
	$global$0 = ($1 + [144])
}