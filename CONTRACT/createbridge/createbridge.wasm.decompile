(data (i32.const 8192) "eosio.token\00")
(data (i32.const 8204) "transfer\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8299) "error reading iterator\00")
(data (i32.const 8322) "read\00")
(data (i32.const 8327) "get\00")
(data (i32.const 8331) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 8385) "cannot decrement iterator at beginning of table\00")
(data (i32.const 8433) "cannot pass end iterator to erase\00")
(data (i32.const 8467) "cannot increment end iterator\00")
(data (i32.const 8497) "object passed to erase is not in multi_index\00")
(data (i32.const 8542) "cannot erase objects in table of another contract\00")
(data (i32.const 8592) "attempt to remove object that was not in multi_index\00")
(data (i32.const 8645) "eosio\00")
(data (i32.const 8651) "Could not get RAM info\00")
(data (i32.const 8674) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8725) "attempt to add asset with different symbol\00")
(data (i32.const 8768) "addition underflow\00")
(data (i32.const 8787) "addition overflow\00")
(data (i32.const 8805) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8854) "invalid symbol name\00")
(data (i32.const 8874) "Could not find balance\00")
(data (i32.const 8897) "Not enough to pay for account.\00")
(data (i32.const 8928) "attempt to subtract asset with different symbol\00")
(data (i32.const 8976) "subtraction underflow\00")
(data (i32.const 8998) "subtraction overflow\00")
(data (i32.const 9019) "newaccount\00")
(data (i32.const 9030) "buyram\00")
(data (i32.const 9037) "delegatebw\00")
(data (i32.const 9048) "write\00")
(data (i32.const 9054) "No balance object\00")
(data (i32.const 9072) "overdrawn balance\00")
(data (i32.const 9090) "cannot pass end iterator to modify\00")
(data (i32.const 9125) "object passed to modify is not in multi_index\00")
(data (i32.const 9171) "cannot modify objects in table of another contract\00")
(data (i32.const 9222) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9281) "string is too long to be a valid name\00")
(data (i32.const 9319) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9386) "character is not in allowed character set for names\00")
(data (i32.const 9438) "eosio.stake\00")
(data (i32.const 9450) "cannot create objects in table of another contract\00")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$7 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$10 (result i64)))
(import "env" "db_remove_i64" (func $fimport$11 (param i32)))
(import "env" "db_find_i64" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$13 (param i32 i32)))
(import "env" "db_update_i64" (func $fimport$14 (param i32 i64 i32 i32)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "db_store_i64" (func $fimport$16 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$17))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$20 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$27 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$28 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$31 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$32 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$35 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$37 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$38 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$39 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $50))
(export "_Znwj" (func $48))
(export "_Znaj" (func $49))
(export "_ZdaPv" (func $51))
(export "_ZnwjSt11align_val_t" (func $52))
(export "_ZnajSt11align_val_t" (func $53))
(export "_ZdlPvSt11align_val_t" (func $54))
(export "_ZdaPvSt11align_val_t" (func $55))
(table $0 4 4 anyfunc)
(elem (i32.const 1) $2 $5 $7)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17920))
(global $global$2 i32 (i32.const 17920))


void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8497])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8542])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8592])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

int_32 .FUNC $62 ()
{
	return [9508]
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8322])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8322])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8322])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $21(*($1), *($0 + [8]))
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8322])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $67($1)
	
.LABEL $label$2
	*(CALL $62()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $67(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $70($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $62())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $66($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9048])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9048])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9048])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[1]), [9048])
	CALL memcpy(*($6), ($7 + [16]), [2])
	$4 = (*($6) + [2])
	*($6) = $4
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $67 (int_32 $0)
{
	return CALL $68([9524], $0)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $61($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8322])
	CALL memcpy($0, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8322])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8322])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8322])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8322])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8322])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [8322])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($0 + [48])) = *($2 + [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [8322])
	CALL memcpy(($0 + [56]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $22($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $60($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $60($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $56($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $61($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $61($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8327])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $23($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8322])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [64])
	$global$0 = $3
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$4 = *($1)
	*($3 + [16]) = $4
	*($3 + [24]) = $4
	$2 = *($5)
	$1 = ($2 & [1])
	$5 = CALL $57($3, $2)
	$6 = ( *($5 + [8]) ? ($5 + [1]) : $1 )
	$7 = ( *($5 + [4]) ? uint_32($2 >> [1]) : $1 )
	if ( ($7 <= [4]) ){ goto $label$4 }
	$8 = $7
	$2 = $6
	$1 = $7
	
.LOOP $label$5:
	CALL memcpy(($3 + [60]), $2, [4])
	$9 = ((int_32)*($3 + [60]) * (int_32)[1540483477])
	$1 = ((int_32)((int_32)((int_32)uint_32($9 >> [24]) ^ (int_32)$9) * (int_32)[1540483477]) ^ (int_32)((int_32)$1 * (int_32)[1540483477]))
	$2 = ($2 + [4])
	$8 = ($8 + [-4])
	if ( ((uint_32)$8 > (uint_32)[3]) ){ goto $label$5 }
	$2 = ($7 + [-4])
	$8 = ($2 & [-4])
	$6 = (($6 + $8) + [4])
	$7 = ($2 - $8)
	if ( ((int_32)$7 == (int_32)[1]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $7
	if ( ((int_32)$7 == (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$7 != (int_32)[3]) ){ goto $label$1 }
	$1 = ((int_32)(*($6 + [2]) << [16]) ^ (int_32)$1)
	
.LABEL $label$6
	$1 = ((int_32)(*($6 + [1]) << [8]) ^ (int_32)$1)
	
.LABEL $label$2
	$1 = ((int_32)((int_32)$1 ^ (int_32)*($6)) * (int_32)[1540483477])
	
.LABEL $label$1
	$2 = ((int_32)((int_32)uint_32($1 >> [13]) ^ (int_32)$1) * (int_32)[1540483477])
	$2 = ((int_32)uint_32($2 >> [15]) ^ (int_32)$2)
	if ( ((*($5) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$7
	$4 = (CASTING uint_64)(uint_32 $2)
	$1 = *(($3 + [44]))
	$9 = *(($3 + [40]))
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$12 }
	
.LOOP $label$14:
	$2 = ($1 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$13 }
	$1 = $2
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($3 + [16])), [8674])
	if ( $8 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$2 = CALL db_find_i64(*($3 + [16]), *(($3 + [24])), (int_64)4152997948076064768, $4)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $16(($3 + [16]), $2)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($3 + [16])), [8674])
	
.LABEL $label$11
	*($0) = *($8 + [8])
	*(($0 + [8])) = *(($8 + [16]))
	$8 = *($3 + [40])
	if ( $8 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [8805])
	$4 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$10 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$4 = $10
	$9 = [1]
	$1 = $2
	$2 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$4 = $10
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$1 = ((int_32)$2 < (int_32)[6])
	$8 = ($2 + [1])
	$2 = $8
	if ( $1 ){ goto $label$20 }
	$9 = [1]
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$9 = [0]
	
.LABEL $label$16
	CALL eosio_assert($9, [8854])
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$15
	CALL eosio_assert([0], [8854])
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$9 = ($3 + [44])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$22 }
	
.LOOP $label$23:
	$2 = ($2 + [-24])
	$1 = *($2)
	*($2) = [0]
	if ( ($1 == 0) ){ goto $label$24 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$25
	CALL _ZdlPv($1)
	
.LABEL $label$24
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$23 }
	$2 = *(($3 + [40]))
	goto $label$21 
	
.LABEL $label$22
	$2 = $8
	
.LABEL $label$21
	*($9) = $8
	CALL _ZdlPv($2)
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [64])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8299])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $67($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)4602678819172646912
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)4602678819172646912
	*($5 + [64]) = $0
	*($3 + [16]) = ($3 + [32])
	CALL $28($5, ($3 + [16]))
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5 + [8])
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $29(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $70($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [64])
	$global$0 = $3
	$1 = *($4)
	$5 = ($1 & [1])
	$4 = CALL $57(($3 + [40]), $1)
	$6 = ( *($4 + [8]) ? ($4 + [1]) : $5 )
	$7 = ( *($4 + [4]) ? uint_32($1 >> [1]) : $5 )
	if ( ($7 <= [4]) ){ goto $label$4 }
	$8 = $7
	$1 = $6
	$5 = $7
	
.LOOP $label$5:
	CALL memcpy($3, $1, [4])
	$9 = ((int_32)*($3) * (int_32)[1540483477])
	$5 = ((int_32)((int_32)((int_32)uint_32($9 >> [24]) ^ (int_32)$9) * (int_32)[1540483477]) ^ (int_32)((int_32)$5 * (int_32)[1540483477]))
	$1 = ($1 + [4])
	$8 = ($8 + [-4])
	if ( ((uint_32)$8 > (uint_32)[3]) ){ goto $label$5 }
	$1 = ($7 + [-4])
	$8 = ($1 & [-4])
	$6 = (($6 + $8) + [4])
	$7 = ($1 - $8)
	if ( ((int_32)$7 == (int_32)[1]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$5 = $7
	if ( ((int_32)$7 == (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$7 != (int_32)[3]) ){ goto $label$1 }
	$5 = ((int_32)(*($6 + [2]) << [16]) ^ (int_32)$5)
	
.LABEL $label$6
	$5 = ((int_32)(*($6 + [1]) << [8]) ^ (int_32)$5)
	
.LABEL $label$2
	$5 = ((int_32)((int_32)$5 ^ (int_32)*($6)) * (int_32)[1540483477])
	
.LABEL $label$1
	$1 = ((int_32)((int_32)uint_32($5 >> [13]) ^ (int_32)$5) * (int_32)[1540483477])
	$10 = (CASTING uint_64)(uint_32 ((int_32)uint_32($1 >> [15]) ^ (int_32)$1))
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$7
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$11 = *($0)
	*($3) = $11
	*($3 + [8]) = $11
	$1 = [0]
	$5 = CALL db_find_i64($11, $11, (int_64)4152997948076064768, $10)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$1 = CALL $16($3, $5)
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$3), [8674])
	
.LABEL $label$8
	$5 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($5, [9054])
	CALL eosio_assert(((int_64)*($1 + [8]) >= (int_64)*($2)), [9072])
	if ( ((int_64)*($1 + [8]) <= (int_64)*($2)) ){ goto $label$11 }
	*($3 + [56]) = $2
	CALL eosio_assert($5, [9090])
	CALL $35($3, $1, (int_64)0, ($3 + [56]))
	$8 = *($3 + [24])
	if ( $8 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL eosio_assert($5, [8433])
	CALL eosio_assert($5, [8467])
	$5 = CALL db_next_i64(*($1 + [52]), ($3 + [56]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	CALL $16($3, $5)
	
.LABEL $label$12
	CALL $18($3, $1)
	$8 = *($3 + [24])
	if ( ($8 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$9 = ($3 + [28])
	$1 = *($9)
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$17
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$15 }
	$1 = *(($3 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$1 = $8
	
.LABEL $label$13
	*($9) = $8
	CALL _ZdlPv($1)
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$9
	$global$0 = ($3 + [64])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	$6 = ($global$0 - [368])
	$global$0 = $6
	*($6 + [240]) = *($0)
	*($6 + [248]) = *($1)
	CALL $30((($6 + [240]) + [16]), $2)
	CALL $30(($6 + [296]), $2)
	$7 = *($0)
	*($6 + [224]) = [8645]
	*($6 + [228]) = CALL $64([8645])
	*($6 + [40]) = *($6 + [224])
	$2 = CALL $4(($6 + [232]), ($6 + [40]))
	*($6 + [208]) = [9019]
	*($6 + [212]) = CALL $64([9019])
	*($6 + [32]) = *($6 + [208])
	$8 = CALL $4(($6 + [216]), ($6 + [32]))
	*($6 + [48]) = *($2)
	*($6 + [56]) = *($8)
	*(($2 = CALL _Znwj([16]))) = $7
	*($2 + [8]) = (int_64)3617214756542218240
	$8 = ($2 + [16])
	*(($6 + [72])) = $8
	*(($6 + [68])) = $8
	*($6 + [64]) = $2
	CALL $31(($6 + [76]), ($6 + [240]))
	CALL $32(($6 + [136]), ($6 + [48]))
	$2 = *($6 + [136])
	CALL send_inline($2, (*($6 + [140]) - $2))
	$2 = *($6 + [136])
	if ( ($2 == 0) ){ goto $label$1 }
	*($6 + [140]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$2 = *($6 + [76])
	if ( ($2 == 0) ){ goto $label$2 }
	*(($6 + [80])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$2 = *($6 + [64])
	if ( ($2 == 0) ){ goto $label$3 }
	*(($6 + [68])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$7 = *($0)
	*($6 + [192]) = [8645]
	*($6 + [196]) = CALL $64([8645])
	*($6 + [24]) = *($6 + [192])
	$2 = CALL $4(($6 + [200]), ($6 + [24]))
	*($6 + [176]) = [9030]
	*($6 + [180]) = CALL $64([9030])
	*($6 + [16]) = *($6 + [176])
	$8 = CALL $4(($6 + [184]), ($6 + [16]))
	*((($6 + [136]) + [24])) = *(($3 + [8]))
	*($6 + [136]) = *($0)
	*($6 + [144]) = *($1)
	*($6 + [152]) = *($3)
	*($6 + [48]) = *($2)
	*($6 + [56]) = *($8)
	*(($2 = CALL _Znwj([16]))) = $7
	*($2 + [8]) = (int_64)3617214756542218240
	*(($6 + [84])) = [0]
	$3 = ($2 + [16])
	*((($6 + [48]) + [24])) = $3
	*(($6 + [68])) = $3
	*($6 + [64]) = $2
	*($6 + [76 align=4]) = (int_64)0
	CALL $23(($6 + [76]), [32])
	$2 = *((($6 + [48]) + [32]))
	$3 = *($6 + [76])
	*($6 + [356]) = $3
	*($6 + [352]) = $3
	*($6 + [360]) = $2
	*($6 + [336]) = ($6 + [352])
	*($6 + [344]) = ($6 + [136])
	CALL $33(($6 + [344]), ($6 + [336]))
	CALL $32(($6 + [352]), ($6 + [48]))
	$2 = *($6 + [352])
	CALL send_inline($2, (*($6 + [356]) - $2))
	$2 = *($6 + [352])
	if ( ($2 == 0) ){ goto $label$4 }
	*($6 + [356]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$2 = *($6 + [76])
	if ( ($2 == 0) ){ goto $label$5 }
	*(($6 + [80])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$2 = *($6 + [64])
	if ( ($2 == 0) ){ goto $label$6 }
	*(($6 + [68])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$7 = *($0)
	*($6 + [120]) = [8645]
	*($6 + [124]) = CALL $64([8645])
	*($6 + [8]) = *($6 + [120])
	$2 = CALL $4(($6 + [128]), ($6 + [8]))
	*($6 + [104]) = [9037]
	*($6 + [108]) = CALL $64([9037])
	*($6) = *($6 + [104])
	$3 = CALL $4(($6 + [112]), $6)
	*((($6 + [48]) + [24])) = *(($4 + [8]))
	*(($6 + [88])) = *(($5 + [8]))
	*($6 + [96]) = [1]
	*($6 + [48]) = *($0)
	*($6 + [56]) = *($1)
	*($6 + [64]) = *($4)
	*($6 + [80]) = *($5)
	*($6 + [136]) = *($2)
	*($6 + [144]) = *($3)
	*(($0 = CALL _Znwj([16]))) = $7
	*($0 + [8]) = (int_64)3617214756542218240
	*(($6 + [172])) = [0]
	$1 = ($0 + [16])
	*((($6 + [136]) + [24])) = $1
	*(($6 + [156])) = $1
	*($6 + [152]) = $0
	*($6 + [164 align=4]) = (int_64)0
	CALL $23(($6 + [164]), [49])
	$0 = *(($6 + [168]))
	$1 = *($6 + [164])
	*($6 + [356]) = $1
	*($6 + [352]) = $1
	*($6 + [360]) = $0
	*($6 + [336]) = ($6 + [352])
	*($6 + [344]) = ($6 + [48])
	CALL $34(($6 + [344]), ($6 + [336]))
	CALL $32(($6 + [352]), ($6 + [136]))
	$0 = *($6 + [352])
	CALL send_inline($0, (*($6 + [356]) - $0))
	$0 = *($6 + [352])
	if ( ($0 == 0) ){ goto $label$7 }
	*($6 + [356]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$7
	$0 = *($6 + [164])
	if ( ($0 == 0) ){ goto $label$8 }
	*(($6 + [168])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$0 = *($6 + [152])
	if ( ($0 == 0) ){ goto $label$9 }
	*(($6 + [156])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$0 = *(($6 + [324]))
	if ( ($0 == 0) ){ goto $label$10 }
	*(($6 + [328])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$0 = *(($6 + [312]))
	if ( ($0 == 0) ){ goto $label$11 }
	*(($6 + [316])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$0 = *(($6 + [300]))
	if ( ($0 == 0) ){ goto $label$12 }
	*(($6 + [304])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$12
	$0 = *(($6 + [284]))
	if ( ($0 == 0) ){ goto $label$13 }
	*(($6 + [288])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$13
	$0 = *(($6 + [272]))
	if ( ($0 == 0) ){ goto $label$14 }
	*(($6 + [276])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$14
	$0 = *(($6 + [260]))
	if ( ($0 == 0) ){ goto $label$15 }
	*(($6 + [264])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$15
	$global$0 = ($6 + [368])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $67($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9504])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $67($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9516]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9520])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9516]) = [1]
	$2 = ($2 << [16])
	*([0] + [9520]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9520])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9520]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9516]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9516]) = [1]
	$3 = ($3 << [16])
	*([0] + [9520]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9520])
	
.LABEL $label$10
	*([0] + [9520]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $69($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8213])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9048])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9048])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9048])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $44(*($1), *($0 + [8]))
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9048])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9048])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9048])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9048])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9048])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9048])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9048])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[3]), [9048])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $7, [4])
	$4 = (*($6) + [4])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[1]), [9048])
	CALL memcpy(*($6), ($7 + [4]), [2])
	$4 = (*($6) + [2])
	*($6) = $4
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *($4 + [4])
	*(($1 + [16])) = *(($6 + [8]))
	*($1 + [8]) = *($6)
	$6 = ($1 + [24])
	CALL $58($6, *($4 + [8]))
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$4 = *($1 + [24])
	$7 = ( *(($1 + [28])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [40])
	$9 = ($1 + [8])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $67($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $9
	*($3 + [32]) = $1
	*($3 + [40]) = $6
	*($3 + [44]) = $7
	CALL $43(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)4152997948076064768, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $70($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [9450])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32]) = [0]
	*($3 + [48]) = $1
	CALL $47(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $20(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9125])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9171])
	$6 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))), [8725])
	$7 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [8768])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [8787])
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9222])
	$3 = *($1 + [24])
	$8 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [32])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [24])
	$9 = ($1 + [40])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $67($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [40]) = $8
	*($5 + [44]) = $9
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	CALL $43(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [52]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $70($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9048])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9048])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17908])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17716]
	$3 = (((int_32)$1 * (int_32)[12]) + [17716])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $67($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [132])) = [0]
	*(($4 + [124])) = (int_64)0
	*(($4 + [116])) = (int_64)0
	*(($4 + [108])) = (int_64)0
	*(($4 + [100])) = (int_64)0
	*(($4 + [144])) = [0]
	*($4 + [80]) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = [0]
	*($4 + [136]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [192]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $10(($4 + [24]), ($4 + [192]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [160]) + [8])) = $3
	*(($6 = (($4 + [176]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [176]) = $7
	*($4 + [160]) = $7
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [176])
	*($4 + [40]) = $0
	*($4 + [192]) = $0
	*($4 + [196]) = ($4 + [152])
	*($4 + [192]) = ($4 + [24])
	CALL $11(($4 + [192]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	$2 = [1]
	if ( (*($4 + [136]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $70($2)
	$2 = [1]
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [144])))
	if ( (*($4 + [72]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($4 + [72]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [80])))
	
.LABEL $label$4
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [64])
	$global$0 = $1
	*(($1 + [48])) = [0]
	*($1 + [32]) = (int_64)-1
	$2 = *($0)
	*($1 + [16]) = $2
	*($1 + [24]) = $2
	*($1 + [40]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)4152997948076064768, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($1 + [24])
	
.LOOP $label$2:
	CALL $16(($1 + [16]), $0)
	*($1 + [8]) = ($1 + [16])
	*($1 + [12]) = [0]
	$2 = *(CALL $17(($1 + [8])))
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	$4 = ((int_32)$0) != (int_32)[0]
	CALL eosio_assert($4), [8433])
	CALL eosio_assert($4, [8467])
	$4 = CALL db_next_i64(*($0 + [52]), ($1 + [56]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL $16((CASTING uint_32)(uint_64 $2), $4)
	
.LABEL $label$3
	CALL $18(($1 + [16]), $0)
	$0 = CALL db_lowerbound_i64(*($1 + [16]), *($3), (int_64)4152997948076064768, (int_64)0)
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$2 }
	$3 = *($1 + [40])
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($1 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$8
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($1 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($5) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($1 + [64])
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $67($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [64]) + [24]))) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $14(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$9 = *($3)
	*((($4 + [160]) + [8])) = $9
	*(($3 = (($4 + [112]) + [8]))) = $9
	$10 = *($4)
	*($4 + [112]) = $10
	*($4 + [160]) = $10
	$11 = *($3)
	*(($9 = (($4 + [128]) + [8]))) = $11
	*((($4 + [16]) + [24])) = $11
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($3) = *($8)
	*($4 + [112]) = *($4 + [80])
	$0 = *($4 + [72])
	$1 = *($4 + [64])
	$8 = CALL $57(($4 + [160]), ($4 + [96]))
	*($9) = *($3)
	*($4 + [152]) = $1
	*($4 + [144]) = $0
	*($4 + [128]) = *($4 + [112])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [152])), (int_32 ($4 + [144])), (int_32 ($4 + [128])), (int_32 $8), (int_32 $6))
	if ( (*($4 + [160]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $70($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [104])))
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$5 = ($global$0 - [128])
	$global$0 = $5
	CALL require_auth(*($0))
	*((($5 + [88]) + [29])) = *(($3 + [29]))
	*(($6 = (($5 + [88]) + [24]))) = *(($3 + [24]))
	*(($7 = (($5 + [88]) + [16]))) = *(($3 + [16]))
	*(($8 = (($5 + [88]) + [8]))) = *(($3 + [8]))
	*($5 + [88]) = *($3)
	*($5 + [48]) = [1]
	*(($9 = ($5 + [32]))) = *((($5 + [88]) + [32]))
	*(($10 = ($5 + [24]))) = *($6)
	*(($11 = ($5 + [16]))) = *($7)
	*(($7 = ($5 + [8]))) = *($8)
	*($5 + [40]) = [1]
	*($5) = *($5 + [88])
	$6 = CALL _Znwj([44])
	*((($5 + [48]) + [24])) = (int_64)0
	$3 = [0]
	*((($5 + [48]) + [32])) = [0]
	$8 = ($6 + [44])
	*(($5 + [60])) = $8
	*($6) = *($5)
	*(($6 + [8])) = *($7)
	*(($6 + [16])) = *($11)
	*(($6 + [24])) = *($10)
	*(($6 + [32])) = *($9)
	*(($6 + [40])) = *($5 + [40])
	*((($5 + [48]) + [8])) = $8
	*($5 + [52]) = $6
	*($5 + [64]) = (int_64)0
	*(($5 + [84])) = [0]
	CALL $12($5, $0)
	CALL eosio_assert([1], [8805])
	$12 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$12 = $13
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$12 = $13
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8854])
	$12 = *($5)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)1397703940), [8725])
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427390464), [8768])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427385344), [8787])
	CALL $13($0, $1, $2, $4, ($5 + [48]), $5)
	$3 = *(($5 + [76]))
	if ( ($3 == 0) ){ goto $label$6 }
	*(($5 + [80])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$3 = *(($5 + [64]))
	if ( ($3 == 0) ){ goto $label$7 }
	*(($5 + [68])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$3 = *($5 + [52])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($5 + [56])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($5 + [128])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9281])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9386])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9319])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9386])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [32])
	$global$0 = $5
	if ( ((int_64)*($2) != (int_64)*($0)) ){ goto $label$1 }
	*($5 + [16]) = [9438]
	*($5 + [20]) = CALL $64([9438])
	*($5 + [8]) = *($5 + [16])
	$2 = CALL $4(($5 + [24]), ($5 + [8]))
	if ( ((int_64)*($1) == (int_64)*($2)) ){ goto $label$1 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$1 }
	$2 = *($4)
	if ( ((uint_32)( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ) > (uint_32)[64]) ){ goto $label$1 }
	CALL $15($0, $3, $4)
	
.LABEL $label$1
	$global$0 = ($5 + [32])
}

void .FUNC $2 (int_32 $0)
{
	CALL require_auth(*($0))
	CALL $9($0)
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $67($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $70($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)5031766152489992192) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)4923676291099525120) ){ goto $label$1 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [1]
	*($3) = *($3 + [88])
	CALL $3($1, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	*($3 + [64]) = [8192]
	*($3 + [68]) = CALL $64([8192])
	*($3 + [32]) = *($3 + [64])
	CALL $4(($3 + [72]), ($3 + [32]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [48]) = [8204]
	*($3 + [52]) = CALL $64([8204])
	*($3 + [24]) = *($3 + [48])
	CALL $4(($3 + [56]), ($3 + [24]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [44]) = [0]
	*($3 + [40]) = [2]
	*($3 + [16]) = *($3 + [40])
	CALL $6($0, (int_64)6138663591592764928, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [84]) = [0]
	*($3 + [80]) = [3]
	*($3 + [8]) = *($3 + [80])
	CALL $8($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $63([0])
	$global$0 = ($3 + [96])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8322])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8322])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8322])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8322])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $21(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [96])
	$global$0 = $3
	$5 = *($4)
	$6 = ($5 & [1])
	$4 = CALL $57(($3 + [72]), $2)
	$7 = ( *($4 + [8]) ? ($4 + [1]) : $6 )
	$8 = ( *($4 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($8 <= [4]) ){ goto $label$4 }
	$9 = $8
	$5 = $7
	$6 = $8
	
.LOOP $label$5:
	CALL memcpy(($3 + [32]), $5, [4])
	$10 = ((int_32)*($3 + [32]) * (int_32)[1540483477])
	$6 = ((int_32)((int_32)((int_32)uint_32($10 >> [24]) ^ (int_32)$10) * (int_32)[1540483477]) ^ (int_32)((int_32)$6 * (int_32)[1540483477]))
	$5 = ($5 + [4])
	$9 = ($9 + [-4])
	if ( ((uint_32)$9 > (uint_32)[3]) ){ goto $label$5 }
	$5 = ($8 + [-4])
	$9 = ($5 & [-4])
	$7 = (($7 + $9) + [4])
	$8 = ($5 - $9)
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$6 = $8
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$8 != (int_32)[3]) ){ goto $label$1 }
	$6 = ((int_32)(*($7 + [2]) << [16]) ^ (int_32)$6)
	
.LABEL $label$6
	$6 = ((int_32)(*($7 + [1]) << [8]) ^ (int_32)$6)
	
.LABEL $label$2
	$6 = ((int_32)((int_32)$6 ^ (int_32)*($7)) * (int_32)[1540483477])
	
.LABEL $label$1
	$5 = ((int_32)((int_32)uint_32($6 >> [13]) ^ (int_32)$6) * (int_32)[1540483477])
	$11 = (CASTING uint_64)(uint_32 ((int_32)uint_32($5 >> [15]) ^ (int_32)$5))
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$7
	*($3 + [88]) = $11
	*(($3 + [64])) = [0]
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	$12 = *($0)
	*($3 + [32]) = $12
	*($3 + [40]) = $12
	$5 = CALL db_find_i64($12, $12, (int_64)4152997948076064768, $11)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$5 = CALL $16(($3 + [32]), $5)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)($3 + [32])), [8674])
	*($3 + [16]) = $1
	CALL eosio_assert([1], [9090])
	CALL $45(($3 + [32]), $5, (int_64)0, ($3 + [16]))
	$9 = *($3 + [56])
	if ( $9 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$12 = *($0)
	*($3 + [20]) = $1
	*($3 + [24]) = $2
	*($3 + [16]) = ($3 + [88])
	CALL $46(($3 + [8]), ($3 + [32]), $12, ($3 + [16]))
	$9 = *($3 + [56])
	if ( ($9 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$10 = ($3 + [60])
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$14 }
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$15
	CALL _ZdlPv($6)
	
.LABEL $label$14
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$13 }
	$5 = *(($3 + [56]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $9
	
.LABEL $label$11
	*($10) = $9
	CALL _ZdlPv($5)
	$global$0 = ($3 + [96])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [96])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8299])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $67($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = [0]
	*($5 + [48]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [40])
	CALL $19(($3 + [32]), ($3 + [24]))
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $20(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $70($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8385])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4152997948076064768)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8331])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8331])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $16(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	CALL $21(*($1), *($0))
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8322])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$3 = *($1)
	$4 = *($3 + [4])
	$5 = [0]
	$6 = (int_64)0
	$7 = ($3 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *(($3 + [8]))), [8327])
	$4 = *($7)
	$0 = *($4)
	$4 = ($4 + [1])
	*($7) = $4
	$5 = ($5 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $5)))
	$5 = ($5 + [7])
	if ( ($0 & [128]) ){ goto $label$1 }
	*($2 + [24]) = $6
	CALL eosio_assert(((uint_32)(*(($3 + [8])) - $4) > (uint_32)[32]), [8322])
	$0 = ($3 + [4])
	CALL memcpy(($2 + [28]), *($0), [33])
	*($0) = (*($0) + [33])
	CALL $21(*($1), ($2 + [64]))
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = CALL $57(($2 + [64]), $1)
	*(($4 = (($2 + [24]) + [8]))) = *(($1 + [32]))
	*(($5 = (($2 + [24]) + [16]))) = *(($1 + [40]))
	*(($6 = (($2 + [24]) + [24]))) = *(($1 + [48]))
	*(($7 = (($2 + [24]) + [32]))) = *(($1 + [56]))
	*($2 + [24]) = *($1 + [24 align=4])
	$8 = *($1 + [16])
	$1 = CALL $57(($2 + [8]), ($1 + [64]))
	*((($2 + [80]) + [32])) = *($7)
	*((($2 + [80]) + [24])) = *($6)
	*((($2 + [80]) + [16])) = *($5)
	*((($2 + [80]) + [8])) = *($4)
	*($2 + [120]) = $8
	*($2 + [80]) = *($2 + [24])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$4 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($4) + $0))
	
.LABEL $label$1
	CALL void $4((int_32 $3), (int_32 ($2 + [120])), (int_32 ($2 + [80])), (int_32 $1), (int_32 $0))
	if ( (*($1) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [128])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [128])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	float_64 $7
	int_64 $8
	$2 = ($global$0 - [96])
	$global$0 = $2
	*($2 + [40]) = [8645]
	*($2 + [44]) = CALL $64([8645])
	*($2 + [16]) = *($2 + [40])
	$3 = CALL $4(($2 + [48]), ($2 + [16]))
	*($2 + [24]) = [8645]
	*($2 + [28]) = CALL $64([8645])
	*($2 + [8]) = *($2 + [24])
	CALL $4(($2 + [32]), ($2 + [8]))
	$4 = [0]
	*(($2 + [88])) = [0]
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	$5 = *($3)
	*($2 + [56]) = $5
	*($2 + [64]) = (int_64)6138663577826885632
	$3 = [0]
	$6 = CALL db_find_i64($5, (int_64)6138663577826885632, (int_64)-5069606918720847872, (int_64)4995142087184830980)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $24(($2 + [56]), $6)
	CALL eosio_assert(((int_32)*($3 + [64]) == (int_32)($2 + [56])), [8674])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8651])
	*($0 + [8]) = (int_64)1397703940
	$7 = ((float_64)((float_64)(CASTING float_64)(uint_64 *($3 + [40])) / (float_64)(CASTING float_64)(uint_64 *($3 + [16]))) * (float_64)(float_64)4096)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$5 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$3
	$5 = (Rounds 0)($7)
	
.LABEL $label$2
	*($0) = $5
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8805])
	$5 = (int_64)5459781
	
.LOOP $label$5:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$5 = $8
	$6 = [1]
	$3 = $4
	$4 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = ((int_32)$4 < (int_32)[6])
	$0 = ($4 + [1])
	$4 = $0
	if ( $3 ){ goto $label$7 }
	$6 = [1]
	$4 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($6, [8854])
	$0 = *($2 + [80])
	if ( ($0 == 0) ){ goto $label$8 }
	$6 = ($2 + [84])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$11 }
	$4 = *(($2 + [80]))
	goto $label$9 
	
.LABEL $label$10
	$4 = $0
	
.LABEL $label$9
	*($6) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$8
	$global$0 = ($2 + [96])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	float_64 $19
	$6 = ($global$0 - [144])
	$global$0 = $6
	*(($6 + [120])) = [0]
	*($6 + [104]) = (int_64)-1
	*($6 + [112]) = (int_64)0
	$7 = *($0)
	*($6 + [88]) = $7
	*($6 + [96]) = $7
	$9 = *($8)
	$10 = ($9 & [1])
	$8 = CALL $57(($6 + [72]), $1)
	$11 = ( *($8 + [8]) ? ($8 + [1]) : $10 )
	$12 = ( *($8 + [4]) ? uint_32($9 >> [1]) : $10 )
	if ( ($12 <= [4]) ){ goto $label$4 }
	$13 = $12
	$9 = $11
	$10 = $12
	
.LOOP $label$5:
	CALL memcpy(($6 + [128]), $9, [4])
	$14 = ((int_32)*($6 + [128]) * (int_32)[1540483477])
	$10 = ((int_32)((int_32)((int_32)uint_32($14 >> [24]) ^ (int_32)$14) * (int_32)[1540483477]) ^ (int_32)((int_32)$10 * (int_32)[1540483477]))
	$9 = ($9 + [4])
	$13 = ($13 + [-4])
	if ( ((uint_32)$13 > (uint_32)[3]) ){ goto $label$5 }
	$9 = ($12 + [-4])
	$13 = ($9 & [-4])
	$11 = (($11 + $13) + [4])
	$12 = ($9 - $13)
	if ( ((int_32)$12 == (int_32)[1]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$10 = $12
	if ( ((int_32)$12 == (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_32)$12 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$12 != (int_32)[3]) ){ goto $label$1 }
	$10 = ((int_32)(*($11 + [2]) << [16]) ^ (int_32)$10)
	
.LABEL $label$6
	$10 = ((int_32)(*($11 + [1]) << [8]) ^ (int_32)$10)
	
.LABEL $label$2
	$10 = ((int_32)((int_32)$10 ^ (int_32)*($11)) * (int_32)[1540483477])
	
.LABEL $label$1
	$9 = ((int_32)((int_32)uint_32($10 >> [13]) ^ (int_32)$10) * (int_32)[1540483477])
	$9 = ((int_32)uint_32($9 >> [15]) ^ (int_32)$9)
	if ( ((*($8) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($8 + [8])))
	
.LABEL $label$7
	$7 = (CASTING uint_64)(uint_32 $9)
	$10 = *(($6 + [116]))
	$14 = *(($6 + [112]))
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$9 }
	
.LOOP $label$11:
	$9 = ($10 + [-24])
	$13 = *($9)
	if ( ((int_64)*($13) == (int_64)$7) ){ goto $label$10 }
	$10 = $9
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($13 + [48]) == (int_32)($6 + [88])), [8674])
	goto $label$8 
	
.LABEL $label$9
	$13 = [0]
	$9 = CALL db_find_i64(*($6 + [88]), *(($6 + [96])), (int_64)4152997948076064768, $7)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$8 }
	$13 = CALL $16(($6 + [88]), $9)
	CALL eosio_assert(((int_32)*($13 + [48]) == (int_32)($6 + [88])), [8674])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [8874])
	*(($6 + [64])) = *(($13 + [16]))
	*($6 + [56]) = *($13 + [8])
	$15 = *($5)
	$16 = *($5 + [8])
	CALL eosio_assert([1], [8805])
	$7 = (int_64)5459781
	$9 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$17 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$7 = $17
	$10 = [1]
	$13 = $9
	$9 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$7 = $17
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$9 < (int_32)[6])
	$13 = ($9 + [1])
	$9 = $13
	if ( $10 ){ goto $label$16 }
	$10 = [1]
	$9 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$10 = [0]
	
.LABEL $label$12
	CALL eosio_assert($10, [8854])
	$7 = *($6 + [56])
	$18 = *($6 + [64])
	CALL eosio_assert(((int_64)$16 == (int_64)$18), [8928])
	$15 = (int_64)
	CALL eosio_assert(((int_64)$15($7 - $15)) > (int_64)-4611686018427387904), [8976])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [8998])
	*($6 + [48]) = (int_64)1397703940
	$19 = ((float_64)(PROMOTE float_64)(float_32 (CASTING float_32)(int_64 $15)) * (float_64)(float_64)0.8)
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)9223372036854775808) ){ goto $label$18 }
	$16 = (int_64)-9223372036854775808
	goto $label$17 
	
.LABEL $label$18
	$16 = (Rounds 0)($19)
	
.LABEL $label$17
	*($6 + [40]) = $16
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8805])
	$7 = (int_64)5459781
	$9 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$17 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$7 = $17
	$10 = [1]
	$13 = $9
	$9 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$7 = $17
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$9 < (int_32)[6])
	$13 = ($9 + [1])
	$9 = $13
	if ( $10 ){ goto $label$23 }
	$10 = [1]
	$9 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$10 = [0]
	
.LABEL $label$19
	CALL eosio_assert($10, [8854])
	*($6 + [32]) = $18
	CALL eosio_assert(((int_64)$18 == (int_64)1397703940), [8928])
	$7 = (int_64)
	*($6 + [24]) = $7($15 - $16))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [8976])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [8998])
	$9 = CALL $57(($6 + [8]), $1)
	$7 = *($5)
	$17 = *(($5 + [8]))
	CALL eosio_assert(((int_64)$17 == (int_64)1397703940), [8725])
	$16 = ((int_64)$7 + (int_64)$16)
	CALL eosio_assert(((int_64)$16 > (int_64)-4611686018427387904), [8768])
	CALL eosio_assert(((int_64)$16 < (int_64)4611686018427387904), [8787])
	CALL eosio_assert(((int_64)$18 == (int_64)$17), [8725])
	$7 = ((int_64)$7 + (int_64)$15)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [8768])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [8787])
	CALL $25(($6 + [128]), $0, $9)
	CALL eosio_assert(((int_64)*($6 + [128]) >= (int_64)$7), [8897])
	if ( ((*($9) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$24
	CALL $26($0, $2, $4, $5, ($6 + [24]), ($6 + [40]))
	CALL $27($0, $1, ($6 + [56]))
	$13 = *($6 + [112])
	if ( ($13 == 0) ){ goto $label$25 }
	$14 = ($6 + [116])
	$9 = *($14)
	if ( ((int_32)$9 == (int_32)$13) ){ goto $label$27 }
	
.LOOP $label$28:
	$9 = ($9 + [-24])
	$10 = *($9)
	*($9) = [0]
	if ( ($10 == 0) ){ goto $label$29 }
	if ( ((*($10 + [24]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($10 + [32])))
	
.LABEL $label$30
	CALL _ZdlPv($10)
	
.LABEL $label$29
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$28 }
	$9 = *(($6 + [112]))
	goto $label$26 
	
.LABEL $label$27
	$9 = $13
	
.LABEL $label$26
	*($14) = $13
	CALL _ZdlPv($9)
	
.LABEL $label$25
	$global$0 = ($6 + [144])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = (*($2) + [4])
	*(($2 = *($1))) = $1
	$3 = *($3)
	$3 = *($0 + [4])
	$4 = *($3 + [4])
	$5 = (CASTING uint_64)(uint_32 ((int_32)($4 - $3) / (int_32)[44]))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$1 = ($1 + [35])
	$5 = *($3)
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$4 }
	$3 = ($3 + [44])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$3 }
	*($2) = $1
	
.LABEL $label$2
	$3 = *($3)
	$3 = *($0 + [8])
	$4 = *($3 + [4])
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[24]))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$6 }
	$1 = ((((int_32)((uint_32)($6 + [-24]) / (uint_32)[24]) * (int_32)[18]) + $1) + [18])
	
.LABEL $label$6
	*($2) = $1
	$3 = *($3)
	$3 = *($0 + [12])
	$4 = *($3 + [4])
	$0 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($0 >> [3]))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$8 }
	$1 = ((((int_32)uint_32(($0 + [-8]) >> [3]) * (int_32)[6]) + $1) + [6])
	
.LABEL $label$8
	*($2) = $1
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9048])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9048])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9048])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $38($3, ($2 + [4]))
	CALL $39($3, ($2 + [16]))
	CALL $40($3, ($2 + [28]))
	$0 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9048])
	CALL memcpy(*($3 + [4]), $0, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $38($3, ($0 + [4]))
	CALL $39($3, ($0 + [16]))
	CALL $40($3, ($0 + [28]))
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9048])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9048])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9048])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9048])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9048])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9048])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [8]) = *($0 + [48])
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9048])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9125])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9171])
	$6 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))), [8928])
	$7 = (int_64)
	*($1 + [8]) = $7(*($1 + [8]) - *($3)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [8976])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [8998])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9222])
	$3 = *($1 + [24])
	$8 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [32])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $67($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [40]) = $8
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [44]) = ($1 + [40])
	CALL $43(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [52]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $70($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $23($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9048])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9048])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $42(CALL $41($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9048])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9048])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9048])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9048])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 + [8])) = (int_64)0
	*($0 + [4]) = [0]
	*($0) = *($1)
	$2 = (*(($1 + [8])) - *($1 + [4]))
	$3 = ((int_32)$2 / (int_32)[44])
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[97612894]) ){ goto $label$3 }
	$2 = CALL _Znwj($2)
	*(($0 + [4])) = $2
	*(($0 + [12])) = ($2 + ((int_32)$3 * (int_32)[44]))
	*(($3 = ($0 + [8]))) = $2
	$4 = *(($1 + [4]))
	$5 = (*(($1 + [8])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[44]) * (int_32)[44]))
	
.LABEL $label$4
	*($0 + [16 align=4]) = (int_64)0
	*(($0 + [24])) = [0]
	$2 = (*(($1 + [20])) - *($1 + [16]))
	$3 = ((int_32)$2 / (int_32)[24])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$2 }
	$2 = CALL _Znwj($2)
	*(($0 + [16])) = $2
	*(($0 + [24])) = ($2 + ((int_32)$3 * (int_32)[24]))
	*(($3 = ($0 + [20]))) = $2
	$4 = *(($1 + [16]))
	$5 = (*(($1 + [20])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$5
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$2 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = int_32($2 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$2 = CALL _Znwj($2)
	*(($0 + [28])) = $2
	*(($0 + [36])) = ($2 + ($3 << [3]))
	*(($3 = ($0 + [32]))) = $2
	$5 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $5, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$6
	return $0
	
.LABEL $label$3
	CALL $61(($0 + [4]))
	
.LABEL $label$2
	CALL $61(($0 + [16]))
	
.LABEL $label$1
	CALL $61(($0 + [28]))
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [24]) = [16]
	*($2 + [8]) = ($2 + [24])
	*($2 + [36]) = ($1 + [20])
	$4 = ($1 + [16])
	*($2 + [32]) = $4
	*($2 + [40]) = ($1 + [32])
	*($2 + [44]) = ($1 + [44])
	CALL $36(($2 + [32]), ($2 + [8]))
	*($2 + [8]) = ($2 + [24])
	*($2 + [36]) = ($1 + [60])
	$5 = ($1 + [56])
	*($2 + [32]) = $5
	*($2 + [40]) = ($1 + [72])
	*($2 + [44]) = ($1 + [84])
	CALL $36(($2 + [32]), ($2 + [8]))
	$6 = *($2 + [24])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $23($0, $6)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [12]) = $0
	*($2 + [8]) = $0
	*($2 + [16]) = $3
	*($2 + [24]) = ($2 + [8])
	*($2 + [40]) = $4
	*($2 + [44]) = $5
	*($2 + [32]) = $1
	*($2 + [36]) = ($1 + [8])
	CALL $37(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $59($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $61 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $63 (int_32 $0)
{
}

int_32 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $70($0)
	
.LABEL $label$1
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[44]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9048])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$9 = *($1)
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$2 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$3 = *($9)
	
.LOOP $label$4:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9048])
	CALL memcpy(*($6), ($2 + [14]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$4 }
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[32]), [9048])
	CALL memcpy(*($6), ($9 + [4]), [33])
	$4 = (*($6) + [33])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9048])
	CALL memcpy(*($6), ($9 + [40]), [2])
	$4 = (*($6) + [2])
	*($6) = $4
	$9 = ($9 + [44])
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $65(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9504])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $65(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $70($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $56 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}