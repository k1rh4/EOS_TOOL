(data (i32.const 8192) "Contract already initialized\00")
(data (i32.const 8221) "unable to find key\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8326) "health level = \00")
(data (i32.const 8342) "Not in blacklist\00")
(data (i32.const 8359) "Already in blacklist\00")
(data (i32.const 8380) "Game is currently under construction.\00")
(data (i32.const 8418) "Must be CORE_SYMBOL\00")
(data (i32.const 8438) "Quantity must be positive\00")
(data (i32.const 8464) "Invalid asset\00")
(data (i32.const 8478) "Must bet greater than min\00")
(data (i32.const 8504) "Bet less than max\00")
(data (i32.const 8522) "read_transaction failed\00")
(data (i32.const 8546) "transfer\00")
(data (i32.const 8555) "eosio.token\00")
(data (i32.const 8567) "active\00%llu\00")
(data (i32.const 8579) "preparegame\00")
(data (i32.const 8591) "resolvegame\00")
(data (i32.const 8603) "- WIN: Congratulations! Get more EOS! Play: eosgameboy.io\00")
(data (i32.const 8661) "- DRAW: Wow so close! It was a draw. Try one more time. Play: eosgameboy.io\00")
(data (i32.const 8738) "receipt\00")
(data (i32.const 8746) "- Referral reward from \00")
(data (i32.const 8770) "! Play: https://eosgameboy.io\00")
(data (i32.const 8800) "|\00")
(data (i32.const 8802) "rock\00")
(data (i32.const 8807) "scissors\00")
(data (i32.const 8816) "paper\00")
(data (i32.const 8824) "|\"\00\00")
(data (i32.const 8828) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 8861) "string is too long to be a valid name\00")
(data (i32.const 8899) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8966) "character is not in allowed character set for names\00")
(data (i32.const 9018) "write\00")
(data (i32.const 9024) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9073) "invalid symbol name\00")
(data (i32.const 9093) "error reading iterator\00")
(data (i32.const 9116) "read\00")
(data (i32.const 9121) "cannot create objects in table of another contract\00")
(data (i32.const 9172) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9223) "cannot pass end iterator to modify\00")
(data (i32.const 9258) "object passed to modify is not in multi_index\00")
(data (i32.const 9304) "cannot modify objects in table of another contract\00")
(data (i32.const 9355) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9414) "cannot pass end iterator to erase\00")
(data (i32.const 9448) "cannot increment end iterator\00")
(data (i32.const 9478) "object passed to erase is not in multi_index\00")
(data (i32.const 9523) "cannot erase objects in table of another contract\00")
(data (i32.const 9573) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9626) "get\00")
(data (i32.const 9630) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9682) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9736) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9784) "n\00\00\00n\00\00\00\c8\00\00\00\c8\00\00\00\c8\00\00\00,\01\00\00n\00\00\00\c8\00\00\00\c8\00\00\00\90\01\00\00\c8\00\00\00\f4\01\00\00n\00\00\00,\01\00\00\c8\00\00\00X\02\00\00\c8\00\00\00\bc\02\00\00n\00\00\00\90\01\00\00\c8\00\00\00 \03\00\00\f4\01\00\00\d0\07\00\00")
(data (i32.const 9880) "rockscissors\00")
(data (i32.const 9893) "gameboyadmin\00")
(data (i32.const 9906) "gameboytoken\00")
(data (i32.const 9919) "gameboytest1\00")
(data (i32.const 9932) "gameboylucky\00")
(data (i32.const 9945) "gameboybonus\00")
(data (i32.const 9958) "EOS\00")
(data (i32.const 9962) "BOY\00")
(data (i32.const 9966) "string is too long to be a valid symbol_code\00")
(data (i32.const 10011) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 18480) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$5 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$7 (param i32 i64 i32 i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "transaction_size" (func $fimport$10 (result i32)))
(import "env" "read_transaction" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$12 (param i32 i32 i32)))
(import "env" "send_deferred" (func $fimport$13 (param i32 i64 i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$14 (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$16 (param i64) (result i32)))
(import "env" "tapos_block_num" (func $fimport$17 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$18 (result i32)))
(import "env" "require_recipient" (func $fimport$19 (param i64)))
(import "env" "db_get_i64" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "abort" (func $fimport$22))
(import "env" "db_previous_i64" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$24 (param i64 i64 i64) (result i32)))
(import "env" "memset" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$27 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$38 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$39 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$40 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$42 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$44 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$45 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$46 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $55))
(export "_Znwj" (func $89))
(export "_ZdlPv" (func $91))
(export "_Znaj" (func $90))
(export "_ZdaPv" (func $92))
(export "_ZnwjSt11align_val_t" (func $93))
(export "_ZnajSt11align_val_t" (func $94))
(export "_ZdlPvSt11align_val_t" (func $95))
(export "_ZdaPvSt11align_val_t" (func $96))
(table $0 15 15 anyfunc)
(elem (i32.const 1) $9 $18 $4 $1 $32 $40 $36 $44 $13 $16 $11 $10 $112 $114)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18560))
(global $global$2 i32 (i32.const 18560))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $125($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $97 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $125($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $120(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10064])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $120(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $124($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8240])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $111([14], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $122 (int_32 $0)
{
	return CALL $123([10084], $0)
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $122($1)
	
.LABEL $label$2
	*(CALL $109()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $122(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $125($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $109())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $121($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [48])
	$global$0 = $3
	$2 = CALL $98($3, $2)
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	CALL $100(($3 + [16]), $2)
	*($3 + [28]) = CALL tapos_block_num()
	$4 = CALL tapos_block_prefix()
	*($3 + [40]) = (int_64)1
	*($3 + [32]) = $4
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	CALL sha256(($3 + [16]), [32], $0)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$2
	$global$0 = ($3 + [48])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $108($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $46($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $48(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $83(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $125 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18468])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18276]
	$3 = (((int_32)$1 * (int_32)[12]) + [18276])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [224])
	$global$0 = $2
	*((($2 + [48]) + [32])) = [0]
	*($2 + [64]) = (int_64)-1
	$3 = (int_64)0
	*($2 + [72]) = (int_64)0
	$4 = *($0 + [144])
	*($2 + [48]) = $4
	*($2 + [56]) = $4
	*((($2 + [8]) + [32])) = [0]
	*($2 + [16]) = $4
	*($2 + [8]) = $4
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$5 = CALL db_lowerbound_i64($4, $4, (int_64)7760153368969871360, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $5(($2 + [8]), $5)
	*($2 + [100]) = [0]
	*($2 + [96]) = ($2 + [8])
	$4 = *(*(CALL $52(($2 + [96])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$5 = (uint_64)($3 <= (int_64)-2)
	goto $label$1 
	
.LABEL $label$2
	$5 = [1]
	
.LABEL $label$1
	*(($6 = ($2 + [24]))) = $3
	CALL eosio_assert($5, [9630])
	$4 = *($6)
	$7 = *($0)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$3()), [9121])
	*(($5 = CALL _Znwj([112])) + [100]) = ($2 + [8])
	*($5) = $4
	*($5 + [8]) = *($1)
	*($5 + [16]) = *($1 + [8])
	*($5 + [24]) = *($1 + [16])
	*(($5 + [32])) = *(($1 + [24]))
	*($5 + [40]) = *($1 + [32])
	*(($5 + [48])) = *(($1 + [40]))
	*($5 + [56]) = *($1 + [48])
	*(($5 + [64])) = *(($1 + [56]))
	*($5 + [72]) = *($1 + [112])
	*($5 + [76]) = *($1 + [116])
	*($5 + [80]) = *($1 + [117])
	*($5 + [84 align=4]) = *($1 + [120])
	*($5 + [92]) = *($1 + [128])
	$3 = CALL current_time()
	*($5 + [96]) = (*($0 + [272]) + (CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)))
	*($2 + [216]) = (($2 + [96]) + [100])
	*($2 + [212]) = ($2 + [96])
	*($2 + [208]) = ($2 + [96])
	CALL $53(($2 + [208]), $5)
	$3 = *($5)
	$8 = CALL db_store_i64(*(($2 + [16])), (int_64)7760153368969871360, $7, $3, ($2 + [96]), [100])
	*($5 + [104]) = $8
	if ( (uint_64)($3 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($2 + [208]) = $5
	$3 = *($5)
	*($2 + [96]) = $3
	*($2 + [92]) = $8
	$6 = ($2 + [36])
	$1 = *($6)
	if ( ((uint_32)$1 >= (uint_32)*(($2 + [40]))) ){ goto $label$6 }
	*($1 + [8]) = $3
	*($1 + [16]) = $8
	*($2 + [208]) = [0]
	*($1) = $5
	*($6) = ($1 + [24])
	$5 = *($2 + [208])
	*($2 + [208]) = [0]
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $54(($2 + [32]), ($2 + [208]), ($2 + [96]), ($2 + [92]))
	$5 = *($2 + [208])
	*($2 + [208]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$4 = ((int_64))($4 - *(CALL $12(($2 + [48]), *($0 + [256]), [8221]) + [8])) + (int_64)-1)
	$1 = *(($2 + [36]))
	$6 = *(($2 + [32]))
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$11:
	$5 = ($1 + [-24])
	$0 = *($5)
	if ( ((int_64)*($0) == (int_64)$4) ){ goto $label$10 }
	$1 = $5
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($0 + [100]) == (int_32)($2 + [8])), [9172])
	if ( $0 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = CALL db_find_i64(*($2 + [8]), *(($2 + [16])), (int_64)7760153368969871360, $4)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$0 = CALL $5(($2 + [8]), $5)
	CALL eosio_assert(((int_32)*($0 + [100]) == (int_32)($2 + [8])), [9172])
	
.LABEL $label$8
	CALL eosio_assert([1], [9414])
	CALL eosio_assert([1], [9448])
	$5 = CALL db_next_i64(*($0 + [104]), ($2 + [96]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	CALL $5(($2 + [8]), $5)
	
.LABEL $label$12
	CALL $6(($2 + [8]), $0)
	
.LABEL $label$7
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$13 }
	$6 = ($2 + [36])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$15 }
	
.LOOP $label$16:
	$5 = ($5 + [-24])
	$1 = *($5)
	*($5) = [0]
	if ( ($1 == 0) ){ goto $label$17 }
	CALL _ZdlPv($1)
	
.LABEL $label$17
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$16 }
	$5 = *(($2 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$5 = $0
	
.LABEL $label$14
	*($6) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$13
	$0 = *($2 + [72])
	if ( ($0 == 0) ){ goto $label$18 }
	$6 = ($2 + [76])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$20 }
	
.LOOP $label$21:
	$5 = ($5 + [-24])
	$1 = *($5)
	*($5) = [0]
	if ( ($1 == 0) ){ goto $label$22 }
	CALL _ZdlPv($1)
	
.LABEL $label$22
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$21 }
	$5 = *(($2 + [72]))
	goto $label$19 
	
.LABEL $label$20
	$5 = $0
	
.LABEL $label$19
	*($6) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$global$0 = ($2 + [224])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$2 = ($global$0 - [752])
	$global$0 = $2
	CALL require_auth(*($0 + [144]))
	$3 = *($1 + [48])
	$4 = *($1 + [32])
	$5 = CALL current_time()
	*(($2 + [700])) = (int_64)0
	*(($2 + [716])) = (int_64)0
	*(($2 + [724])) = (int_64)0
	*($2 + [684]) = [0]
	*($2 + [688]) = [0]
	*($2 + [692 align=4]) = (int_64)0
	*($2 + [708 align=4]) = (int_64)0
	*($2 + [672]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	$6 = ($1 + [32])
	if ( (int_64)($4 == 0) ){ goto $label$3 }
	*(($2 + [664])) = [0]
	*($2 + [656]) = (int_64)0
	if ( (*($1 + [112]) == 0) ){ goto $label$11 }
	$7 = CALL $119([8603])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$10 }
	*($2 + [656]) = ($7 << [1])
	$8 = (($2 + [656]) | [1])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$7 = CALL $119([8661])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$7 }
	*($2 + [656]) = ($7 << [1])
	$8 = (($2 + [656]) | [1])
	if ( $7 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$10
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($2 + [656]) = ($9 | [1])
	*($2 + [664]) = $8
	*($2 + [660]) = $7
	
.LABEL $label$9
	CALL memcpy($8, [8603], $7)
	
.LABEL $label$8
	$7 = ($8 + $7)
	goto $label$4 
	
.LABEL $label$7
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($2 + [656]) = ($9 | [1])
	*($2 + [664]) = $8
	*($2 + [660]) = $7
	
.LABEL $label$6
	CALL memcpy($8, [8661], $7)
	
.LABEL $label$5
	$7 = ($8 + $7)
	
.LABEL $label$4
	*($7) = [0]
	$7 = ($0 + [144])
	$4 = *($7)
	*($2 + [640]) = [8567]
	*($2 + [644]) = CALL $119([8567])
	*($2 + [200]) = *($2 + [640])
	$8 = CALL $27(($2 + [648]), ($2 + [200]))
	*($2 + [512]) = $4
	*($2 + [520]) = *($8)
	*($2 + [624]) = [8555]
	*($2 + [628]) = CALL $119([8555])
	*($2 + [192]) = *($2 + [624])
	$9 = CALL $27(($2 + [632]), ($2 + [192]))
	*($2 + [608]) = [8546]
	*($2 + [612]) = CALL $119([8546])
	*($2 + [184]) = *($2 + [608])
	$10 = CALL $27(($2 + [616]), ($2 + [184]))
	*((($2 + [352]) + [24])) = *(($6 + [8]))
	*($2 + [352]) = *($7)
	*($2 + [360]) = *($1 + [8])
	*($2 + [368]) = *($6)
	$11 = CALL $98((($2 + [352]) + [32]), ($2 + [656]))
	$8 = *(($2 + [712]))
	if ( ((uint_32)$8 >= (uint_32)*(($2 + [716]))) ){ goto $label$16 }
	*($8 + [16 align=4]) = (int_64)0
	*($8 + [8]) = *($10)
	*($8) = *($9)
	*(($9 = ($8 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($8 + [16]) = $7
	$10 = ($7 + [16])
	*($9) = $10
	*(($7 + [8])) = *((($2 + [512]) + [8]))
	*($7) = *($2 + [512])
	*(($8 + [20])) = $10
	*($8 + [28 align=4]) = (int_64)0
	*(($8 + [36])) = [0]
	$7 = *($11)
	$9 = ( *((($2 + [352]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($9 + [32])
	$4 = (CASTING uint_64)(uint_32 $9)
	$9 = ($8 + [28])
	
.LOOP $label$17:
	$7 = ($7 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$17 }
	if ( ($7 == 0) ){ goto $label$15 }
	CALL $46($9, $7)
	$9 = *(($8 + [32]))
	$7 = *(($8 + [28]))
	goto $label$14 
	
.LABEL $label$16
	CALL $47(($2 + [708]), ($2 + [512]), $9, $10, ($2 + [352]))
	$7 = [1]
	if ( (*($2 + [384]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$9 = [0]
	$7 = [0]
	
.LABEL $label$14
	*($2 + [500]) = $7
	*($2 + [496]) = $7
	*($2 + [504]) = $9
	*($2 + [736]) = ($2 + [496])
	*($2 + [744]) = ($2 + [352])
	CALL $48(($2 + [744]), ($2 + [736]))
	*(($7 = (($2 + [672]) + [40]))) = (*($7) + [40])
	$7 = [1]
	if ( ((*($2 + [384]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($2 + [392])))
	
.LABEL $label$12
	if ( ((*($2 + [656]) & $7) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($2 + [664]))
	
.LABEL $label$3
	if ( (int_64)($3 == 0) ){ goto $label$19 }
	$4 = *(($0 + [144]))
	*($2 + [592]) = [8567]
	*($2 + [596]) = CALL $119([8567])
	*($2 + [176]) = *($2 + [592])
	$7 = CALL $27(($2 + [600]), ($2 + [176]))
	*($2 + [512]) = $4
	*($2 + [520]) = *($7)
	*($2 + [584]) = [8546]
	*($2 + [588]) = CALL $119([8546])
	*($2 + [168]) = *($2 + [584])
	$10 = CALL $27(($2 + [632]), ($2 + [168]))
	*(($2 + [664])) = [0]
	*($2 + [656]) = (int_64)0
	$7 = CALL $119([8737])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$18 }
	$9 = ($1 + [48])
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$22 }
	*($2 + [656]) = ($7 << [1])
	$8 = (($2 + [656]) | [1])
	if ( $7 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$11 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($2 + [656]) = ($11 | [1])
	*($2 + [664]) = $8
	*($2 + [660]) = $7
	
.LABEL $label$21
	CALL memcpy($8, [8737], $7)
	
.LABEL $label$20
	$11 = ($0 + [160])
	*(($8 + $7)) = [0]
	*((($2 + [352]) + [24])) = *(($9 + [8]))
	$7 = (($2 + [656]) + [8])
	*((($2 + [352]) + [40])) = *($7)
	*($7) = [0]
	*($2 + [352]) = *(($0 + [144]))
	*($2 + [360]) = *($1 + [8])
	*($2 + [368]) = *($9)
	*($2 + [384]) = *($2 + [656])
	*($2 + [656]) = (int_64)0
	$8 = *((($2 + [672]) + [40]))
	if ( ((uint_32)$8 >= (uint_32)*(($2 + [716]))) ){ goto $label$26 }
	$4 = *($11)
	*($8 + [8]) = *($10)
	*($8) = $4
	*($8 + [16 align=4]) = (int_64)0
	*(($9 = ($8 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($8 + [16]) = $7
	$10 = ($7 + [16])
	*($9) = $10
	*(($7 + [8])) = *((($2 + [512]) + [8]))
	*($7) = *($2 + [512])
	*(($8 + [20])) = $10
	*($8 + [28 align=4]) = (int_64)0
	*(($8 + [36])) = [0]
	$7 = *($2 + [384])
	$9 = ( *((($2 + [352]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($9 + [32])
	$4 = (CASTING uint_64)(uint_32 $9)
	$9 = ($8 + [28])
	
.LOOP $label$27:
	$7 = ($7 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$27 }
	if ( ($7 == 0) ){ goto $label$25 }
	CALL $46($9, $7)
	$9 = *(($8 + [32]))
	$7 = *(($8 + [28]))
	goto $label$24 
	
.LABEL $label$26
	CALL $49(($2 + [708]), ($2 + [512]), $11, $10, ($2 + [352]))
	goto $label$23 
	
.LABEL $label$25
	$9 = [0]
	$7 = [0]
	
.LABEL $label$24
	*($2 + [500]) = $7
	*($2 + [496]) = $7
	*($2 + [504]) = $9
	*($2 + [744]) = ($2 + [496])
	*($2 + [616]) = ($2 + [352])
	CALL $48(($2 + [616]), ($2 + [744]))
	*(($7 = (($2 + [672]) + [40]))) = (*($7) + [40])
	
.LABEL $label$23
	if ( ((*(($2 + [384])) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($2 + [392])))
	
.LABEL $label$28
	if ( ((*($2 + [656]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($2 + [664])))
	
.LABEL $label$19
	*(($2 + [692])) = [0]
	$4 = *(($1 + [81]))
	$3 = *(($1 + [82]))
	$5 = *(($1 + [83]))
	$12 = *(($1 + [84]))
	$13 = *(($1 + [85]))
	$14 = *(($1 + [86]))
	$15 = *(($1 + [87]))
	*($2 + [360]) = (int_64)0
	*($2 + [352]) = *($1)
	$16 = *(($0 + [144]))
	CALL $29(($2 + [512]), ($2 + [672]))
	$7 = *($2 + [512])
	CALL send_deferred(($2 + [352]), $16, $7, (*($2 + [516]) - $7), [0])
	$7 = *($2 + [512])
	if ( ($7 == 0) ){ goto $label$29 }
	*($2 + [516]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$29
	$7 = ($1 + [16])
	*($2 + [576]) = [8737]
	*($2 + [580]) = CALL $119([8737])
	*($2 + [160]) = *($2 + [576])
	$9 = CALL $27(($2 + [656]), ($2 + [160]))
	$16 = *($9)
	if ( ((int_64)$16 == (int_64)*($0 + [184])) ){ goto $label$30 }
	if ( ((int_64)$16 == (int_64)*($1 + [8])) ){ goto $label$30 }
	*($9) = *($1 + [136])
	
.LABEL $label$30
	$16 = CALL current_time()
	*(($2 + [540])) = (int_64)0
	*(($2 + [556])) = (int_64)0
	*(($2 + [564])) = (int_64)0
	*($2 + [524]) = [0]
	*($2 + [528]) = [0]
	*($2 + [532 align=4]) = (int_64)0
	*($2 + [548 align=4]) = (int_64)0
	*($2 + [512]) = ((CASTING uint_32)(uint_64 ((uint_64)$16 / (uint_64)(int_64)1000000)) + [60])
	$8 = ($0 + [144])
	$16 = *($8)
	*($2 + [480]) = [8567]
	*($2 + [484]) = CALL $119([8567])
	*($2 + [152]) = *($2 + [480])
	$10 = CALL $27(($2 + [488]), ($2 + [152]))
	*($2 + [496]) = $16
	*($2 + [504]) = *($10)
	*($2 + [472]) = [8738]
	*($2 + [476]) = CALL $119([8738])
	*($2 + [144]) = *($2 + [472])
	$10 = CALL $27(($2 + [632]), ($2 + [144]))
	*(($2 + [368])) = *(($7 + [8]))
	*(($2 + [384])) = *(($6 + [8]))
	*(($2 + [408])) = *(($1 + [88]))
	*(($2 + [416])) = *(($1 + [96]))
	*(($2 + [424])) = *(($1 + [104]))
	*($2 + [352]) = *(($1 + [8]))
	*($2 + [360]) = *($7)
	*($2 + [376]) = *($6)
	*($2 + [392]) = *($1 + [64])
	*($2 + [400]) = *($1 + [80])
	*($2 + [432]) = *($1 + [112])
	*($2 + [436]) = *($1 + [116])
	*($2 + [440]) = *($1 + [120])
	*($2 + [448]) = *($1 + [128])
	*($2 + [456]) = *($9)
	CALL $50(($2 + [548]), ($2 + [496]), $8, $10, ($2 + [352]))
	$16 = *($8)
	*($2 + [532]) = [0]
	*($2 + [360]) = (int_64)0
	*($2 + [352]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)$4 << (int_64)24)) | (int_64)((int_64)$5 << (int_64)40)) | (int_64)((int_64)$12 << (int_64)48)) | (int_64)((int_64)$13 << (int_64)16)) | (int_64)((int_64)$14 << (int_64)32)) | (int_64)$15)
	CALL $29(($2 + [496]), ($2 + [512]))
	$7 = *($2 + [496])
	CALL send_deferred(($2 + [352]), $16, $7, (*($2 + [500]) - $7), [0])
	$7 = *($2 + [496])
	if ( ($7 == 0) ){ goto $label$31 }
	*($2 + [500]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$31
	CALL memcpy(($2 + [208]), $1, [144])
	$2 = CALL memcpy($2, ($2 + [208]), [144])
	CALL $51($0, $2)
	CALL $30(($2 + [512]))
	CALL $30(($2 + [672]))
	$global$0 = ($2 + [752])
	return (unreachable)
	
.LABEL $label$18
	CALL $97(($2 + [656]))
	
.LABEL $label$2
	CALL $97(($2 + [656]))
	
.LABEL $label$1
	CALL $97(($2 + [656]))
	(unreachable)
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_64 $8, int_32 $9)
{
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	float_64 $27
	float_64 $28
	$10 = ($global$0 - [256])
	$global$0 = $10
	*(($11 = (($10 + [96]) + [24]))) = *(($9 + [24]))
	*(($12 = (($10 + [96]) + [16]))) = *(($9 + [16]))
	*($10 + [96]) = *($9)
	*($10 + [104]) = *(($9 + [8]))
	*($10 + [192]) = [0]
	*($10 + [196]) = CALL tapos_block_num()
	$9 = CALL tapos_block_prefix()
	*($10 + [208]) = (int_64)1
	*($10 + [200]) = $9
	CALL sha256(($10 + [192]), [24], ($10 + [64]))
	*(($9 = (($10 + [32]) + [24]))) = *($11)
	*(($11 = (($10 + [32]) + [16]))) = *($12)
	*(($12 = ($10 + [16]))) = *((($10 + [64]) + [16]))
	*(($13 = ($10 + [24]))) = *((($10 + [64]) + [24]))
	*($10 + [40]) = *($10 + [104])
	*($10 + [32]) = *($10 + [96])
	*($10) = *($10 + [64])
	*($10 + [8]) = *($10 + [72])
	*(($14 = (($10 + [160]) + [24]))) = *($13)
	*(($13 = (($10 + [160]) + [16]))) = *($12)
	$15 = *($11)
	*((($10 + [128]) + [16])) = $15
	$16 = *($9)
	*((($10 + [128]) + [24])) = $16
	$17 = *($10 + [32])
	*($1 + [288]) = $17
	$18 = *($10 + [40])
	*(($9 = ($1 + [296]))) = $18
	*(($19 = ($1 + [304]))) = $15
	*(($12 = ($1 + [312]))) = $16
	*($10 + [168]) = *($10 + [8])
	*($10 + [160]) = *($10)
	*($10 + [128]) = $17
	*($10 + [136]) = $18
	*(($20 = ($1 + [344]))) = *($14)
	*(($14 = ($1 + [336]))) = *($13)
	*(($13 = ($1 + [328]))) = *($10 + [168])
	*(($21 = ($1 + [320]))) = *($10 + [160])
	*(($11 = (($10 + [192]) + [24]))) = *($12)
	*(($12 = (($10 + [192]) + [16]))) = *($19)
	*(($19 = ($10 + [232]))) = *($13)
	*(($22 = ($10 + [240]))) = *($14)
	*(($23 = ($10 + [248]))) = *($20)
	*($10 + [200]) = *($9)
	*($10 + [192]) = *($1 + [288])
	*($10 + [224]) = *($21)
	$13 = ($1 + [352])
	CALL sha256(($10 + [192]), [64], $13)
	$21 = ($1 + [376])
	*(($20 = ($1 + [408]))) = *($21)
	$25 = ($1 + [368])
	*(($24 = ($1 + [400]))) = *($25)
	$26 = ($1 + [360])
	*(($14 = ($1 + [392]))) = *($26)
	*(($9 = ($1 + [384]))) = *($13)
	$15 = *($1 + [280])
	*($11) = *($21)
	*($12) = *($25)
	*($19) = *($14)
	*($22) = *($24)
	*($23) = *($20)
	*($10 + [200]) = *($26)
	*($10 + [192]) = *($13)
	*($10 + [224]) = *($9)
	CALL sha256(($10 + [192]), [64], $9)
	if ( (int_64)($15 == 0) ){ goto $label$2 }
	$13 = (((int_32)(CASTING uint_32)(uint_64 ((uint_64)*($14) % (uint_64)$15)) * (int_32)[1103515245]) + [12345])
	goto $label$1 
	
.LABEL $label$2
	$13 = [12345]
	
.LABEL $label$1
	*(($1 + [416])) = $13
	*($11) = *(($9 + [24]))
	*($12) = *(($9 + [16]))
	*($10 + [192]) = *($9)
	*($10 + [200]) = *(($9 + [8]))
	$9 = ((uint_32)(uint_32($13 >> [16]) & [32767]) % (uint_32)[3])
	$12 = ($9 + [1])
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$4 }
	$9 = *(($1 + [140]))
	$15 = *($4)
	$27 = (CASTING float_64)(uint_64 $15)
	$13 = [0]
	$14 = [0]
	$19 = [0]
	$20 = [0]
	goto $label$3 
	
.LABEL $label$4
	$11 = ($12 & [255])
	$13 = CALL $116(($11 - $5))
	$15 = *($4)
	if ( ((int_32)( ($11 <= $5) ? ((uint_32)($9 & [255]) >= (uint_32)$5) : ((int_32)$13 == (int_32)[1]) ) != (int_32)[1]) ){ goto $label$7 }
	$9 = (((int_32)*($9) * (int_32)[1103515245]) + [12345])
	*(($9 = ($1 + [416]))) = $9
	$19 = ((uint_32)(uint_32($9 >> [16]) & [32767]) % (uint_32)[12])
	$11 = ($1 + ($19 << [3]))
	$9 = *(($11 + [36]))
	$27 = (CASTING float_64)(uint_64 $15)
	$14 = *(($11 + [32]))
	$28 = ((float_64)((float_64)(CASTING float_64)(uint_32 $14) / (float_64)(float_64)100) * (float_64)$27)
	if ( (((float_64)$28 < (float_64)(float_64)18446744073709551615) & ((float_64)$28 >= (float_64)(float_64)0)) ){ goto $label$6 }
	$15 = (int_64)0
	goto $label$5 
	
.LABEL $label$7
	$9 = *(($1 + [132]))
	$27 = (CASTING float_64)(uint_64 $15)
	$20 = [-1]
	$13 = [0]
	$15 = (int_64)0
	$14 = [0]
	$19 = [0]
	goto $label$3 
	
.LABEL $label$6
	$15 = (Rounds 0)($28)
	
.LABEL $label$5
	$20 = [1]
	$13 = $9
	
.LABEL $label$3
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [32]) = $15
	*($0 + [16]) = *($4)
	$2 = *($1 + [192])
	*(($0 + [40])) = $2
	*(($0 + [24])) = *(($4 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9024])
	$27 = ((float_64)((float_64)(CASTING float_64)(uint_32 $9) / (float_64)(float_64)100) * (float_64)$27)
	if ( (((float_64)$27 < (float_64)(float_64)18446744073709551615) & ((float_64)$27 >= (float_64)(float_64)0)) ){ goto $label$9 }
	$3 = (int_64)0
	goto $label$8 
	
.LABEL $label$9
	$3 = (Rounds 0)($27)
	
.LABEL $label$8
	$15 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$2 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$15 = $2
	$4 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$15 = $2
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$4 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $4 ){ goto $label$14 }
	$4 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$4 = [0]
	
.LABEL $label$10
	CALL eosio_assert($4, [9073])
	*($0 + [48]) = $3
	$15 = *($1 + [200])
	*(($0 + [56])) = $15
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9024])
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$2 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$15 = $2
	$4 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$15 = $2
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$4 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $4 ){ goto $label$19 }
	$4 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$4 = [0]
	
.LABEL $label$15
	CALL eosio_assert($4, [9073])
	*(($0 + [68])) = $6
	*($0 + [64]) = $7
	*($0 + [112]) = $20
	*($0 + [116]) = $5
	*($0 + [117]) = $12
	*($0 + [120]) = $14
	*($0 + [124]) = $13
	*($0 + [128]) = $19
	*($0 + [136]) = $8
	*($0 + [80]) = *($10 + [192])
	*(($0 + [88])) = *($10 + [200])
	*(($0 + [96])) = *(($10 + [208]))
	*(($0 + [104])) = *(($10 + [216]))
	$global$0 = ($10 + [256])
}

void .FUNC $40 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6, int_64 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$8 = ($global$0 - [944])
	$global$0 = $8
	CALL require_auth(*($0 + [144]))
	*($8 + [800]) = $6
	*($8 + [808]) = CALL tapos_block_num()
	$9 = CALL tapos_block_prefix()
	*($8 + [816]) = (int_64)1
	*($8 + [812]) = $9
	CALL sha256(($8 + [800]), [24], ($8 + [384]))
	*(($9 = (($8 + [368]) + [8]))) = *(($3 + [8]))
	*($8 + [368]) = *($3)
	$6 = CALL current_time()
	*(($3 = (($8 + [336]) + [24]))) = *((($8 + [384]) + [24]))
	*(($10 = (($8 + [336]) + [16]))) = *((($8 + [384]) + [16]))
	*($8 + [344]) = *($8 + [392])
	*($8 + [336]) = *($8 + [384])
	*(($11 = (($8 + [432]) + [24]))) = *($3)
	*(($3 = (($8 + [432]) + [16]))) = *($10)
	*(($10 = (($8 + [416]) + [8]))) = *($9)
	*($8 + [440]) = *($8 + [344])
	*($8 + [432]) = *($8 + [336])
	*($8 + [416]) = *($8 + [368])
	CALL require_auth(*($0 + [144]))
	$12 = *($10)
	*((($8 + [784]) + [8])) = $12
	$13 = *($3)
	*((($8 + [752]) + [16])) = $13
	$14 = *($11)
	*((($8 + [752]) + [24])) = $14
	*((($8 + [320]) + [8])) = $12
	*((($8 + [288]) + [24])) = $14
	*((($8 + [288]) + [16])) = $13
	$12 = *($8 + [416])
	*($8 + [784]) = $12
	$13 = *($8 + [432])
	*($8 + [752]) = $13
	*($8 + [320]) = $12
	$12 = *($8 + [440])
	*($8 + [760]) = $12
	*($8 + [296]) = $12
	*($8 + [288]) = $13
	CALL $41(($8 + [800]), $0, $1, $2, ($8 + [320]), $4, $5, (CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)), $7, ($8 + [288]))
	CALL memcpy(($8 + [608]), ($8 + [800]), [144])
	CALL memcpy(($8 + [144]), ($8 + [608]), [144])
	CALL $42($0, ($8 + [144]))
	CALL memcpy(($8 + [464]), ($8 + [800]), [144])
	$8 = CALL memcpy($8, ($8 + [464]), [144])
	CALL $43($0, $8)
	$global$0 = ($8 + [944])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $108($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $46($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $48(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $108($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [64])
	$global$0 = $1
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$2 = *($0 + [144])
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	$3 = [0]
	$4 = CALL db_find_i64($2, $2, (int_64)7407713301536178176, *($0 + [224]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $2(($1 + [8]), $4)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [8])), [9172])
	
.LABEL $label$1
	$5 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9223])
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [8])), [9258])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)CALL $fimport$3()), [9304])
	*($3 + [8]) = ((int_64)*($3 + [8]) + (int_64)1)
	$2 = *($3)
	CALL eosio_assert([1], [9355])
	CALL eosio_assert([1], [9018])
	CALL memcpy(($1 + [48]), $3, [8])
	CALL eosio_assert([1], [9018])
	CALL memcpy((($1 + [48]) | [8]), ($3 + [8]), [8])
	CALL db_update_i64(*($3 + [20]), $5, ($1 + [48]), [16])
	$3 = (($1 + [8]) + [16])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$2 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	$6 = ($1 + [36])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$6 }
	$3 = *(($1 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$3 = $4
	
.LABEL $label$4
	*($6) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($1 + [64])
}

void .FUNC $44 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_64 $12)
{
	CALL require_auth(*($0 + [144]))
	CALL require_recipient($1)
	CALL $45($0)
}

int_32 .FUNC $124 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10076]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10080])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10076]) = [1]
	$2 = ($2 << [16])
	*([0] + [10080]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10080])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10080]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10076]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10076]) = [1]
	$3 = ($3 << [16])
	*([0] + [10080]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10080])
	
.LABEL $label$10
	*([0] + [10080]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [9478])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9523])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9573])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [64])
	$global$0 = $1
	CALL require_auth(*($0 + [152]))
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$2 = *($0 + [144])
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	$3 = [0]
	$4 = CALL db_find_i64($2, $2, (int_64)7407713301536178176, *($0 + [208]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $2(($1 + [8]), $4)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [8])), [9172])
	
.LABEL $label$1
	$5 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9223])
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [8])), [9258])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)CALL $fimport$3()), [9304])
	*($3 + [8]) = (int_64)1
	$2 = *($3)
	CALL eosio_assert([1], [9355])
	CALL eosio_assert([1], [9018])
	CALL memcpy(($1 + [48]), $3, [8])
	CALL eosio_assert([1], [9018])
	CALL memcpy((($1 + [48]) | [8]), ($3 + [8]), [8])
	CALL db_update_i64(*($3 + [20]), $5, ($1 + [48]), [16])
	$3 = (($1 + [8]) + [16])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$2 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	$6 = ($1 + [36])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$6 }
	$3 = *(($1 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$3 = $4
	
.LABEL $label$4
	*($6) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($1 + [64])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [9478])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9523])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9573])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [104]))
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9093])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = $0
	CALL $75(($3 + [32]), $5)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $35(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [144])
	$global$0 = $1
	CALL require_auth(*($0 + [152]))
	*(($1 + [128])) = [0]
	*($1 + [112]) = (int_64)-1
	*($1 + [120]) = (int_64)0
	$2 = *($0 + [144])
	*($1 + [96]) = $2
	*($1 + [104]) = $2
	$3 = [0]
	$4 = CALL db_find_i64($2, $2, (int_64)7407713301536178176, *($0 + [216]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $2(($1 + [96]), $4)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [96])), [9172])
	
.LABEL $label$1
	$5 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9223])
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [96])), [9258])
	CALL eosio_assert(((int_64)*($1 + [96]) == (int_64)CALL $fimport$3()), [9304])
	*($3 + [8]) = (int_64)0
	$2 = *($3)
	CALL eosio_assert([1], [9355])
	CALL eosio_assert([1], [9018])
	CALL memcpy(($1 + [48]), $3, [8])
	CALL eosio_assert([1], [9018])
	$6 = (($1 + [48]) | [8])
	CALL memcpy($6, ($3 + [8]), [8])
	CALL db_update_i64(*($3 + [20]), $5, ($1 + [48]), [16])
	$3 = (($1 + [96]) + [16])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$2 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$2 = *($0 + [224])
	$4 = *(($1 + [124]))
	$7 = *(($1 + [120]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$3 = ($4 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$5 }
	$4 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($1 + [96])), [9172])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$3 = CALL db_find_i64(*($1 + [96]), *(($1 + [104])), (int_64)7407713301536178176, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $2(($1 + [96]), $3)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($1 + [96])), [9172])
	
.LABEL $label$3
	$5 = *($0)
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9223])
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($1 + [96])), [9258])
	CALL eosio_assert(((int_64)*($1 + [96]) == (int_64)CALL $fimport$3()), [9304])
	*($8 + [8]) = (int_64)0
	$2 = *($8)
	CALL eosio_assert([1], [9355])
	CALL eosio_assert([1], [9018])
	CALL memcpy(($1 + [48]), $8, [8])
	CALL eosio_assert([1], [9018])
	CALL memcpy($6, ($8 + [8]), [8])
	CALL db_update_i64(*($8 + [20]), $5, ($1 + [48]), [16])
	$3 = (($1 + [96]) + [16])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$7 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*((($1 + [48]) + [32])) = [0]
	*($1 + [64]) = (int_64)-1
	$7 = ($0 + [144])
	$2 = *($7)
	*($1 + [48]) = $2
	*($1 + [56]) = $2
	*($1 + [72]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)7760153368969871360, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$4 = CALL $5(($1 + [48]), $3)
	
.LOOP $label$9:
	CALL eosio_assert([1], [9414])
	CALL eosio_assert([1], [9448])
	$3 = [0]
	$8 = CALL db_next_i64(*($4 + [104]), ($1 + [8]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	$3 = CALL $5(($1 + [48]), $8)
	
.LABEL $label$10
	CALL $6(($1 + [48]), $4)
	$4 = $3
	if ( $3 ){ goto $label$9 }
	
.LABEL $label$8
	*((($1 + [8]) + [32])) = [0]
	*($1 + [24]) = (int_64)-1
	$2 = *($7)
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	*($1 + [32]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-2189422967043129344, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$11 }
	$4 = CALL $7(($1 + [8]), $3)
	
.LOOP $label$12:
	CALL eosio_assert([1], [9414])
	CALL eosio_assert([1], [9448])
	$3 = [0]
	$8 = CALL db_next_i64(*($4 + [68]), ($1 + [136]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$13 }
	$3 = CALL $7(($1 + [8]), $8)
	
.LABEL $label$13
	CALL $8(($1 + [8]), $4)
	$4 = $3
	if ( $3 ){ goto $label$12 }
	
.LABEL $label$11
	$8 = *($1 + [32])
	if ( ($8 == 0) ){ goto $label$14 }
	$7 = ($1 + [36])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$18 }
	CALL _ZdlPv($4)
	
.LABEL $label$18
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$17 }
	$3 = *(($1 + [32]))
	goto $label$15 
	
.LABEL $label$16
	$3 = $8
	
.LABEL $label$15
	*($7) = $8
	CALL _ZdlPv($3)
	
.LABEL $label$14
	$8 = *($1 + [72])
	if ( ($8 == 0) ){ goto $label$19 }
	$7 = ($1 + [76])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$21 }
	
.LOOP $label$22:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$23 }
	CALL _ZdlPv($4)
	
.LABEL $label$23
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$22 }
	$3 = *(($1 + [72]))
	goto $label$20 
	
.LABEL $label$21
	$3 = $8
	
.LABEL $label$20
	*($7) = $8
	CALL _ZdlPv($3)
	
.LABEL $label$19
	$8 = *($1 + [120])
	if ( ($8 == 0) ){ goto $label$24 }
	$7 = ($1 + [124])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$26 }
	
.LOOP $label$27:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$28 }
	CALL _ZdlPv($4)
	
.LABEL $label$28
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$27 }
	$3 = *(($1 + [120]))
	goto $label$25 
	
.LABEL $label$26
	$3 = $8
	
.LABEL $label$25
	*($7) = $8
	CALL _ZdlPv($3)
	
.LABEL $label$24
	$global$0 = ($1 + [144])
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9093])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [100]) = $0
	CALL $74(($3 + [32]), $5)
	*($5 + [104]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $54(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9093])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9116])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9116])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $3(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $108($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [80])
	$global$0 = $1
	CALL require_auth(*($0 + [152]))
	$2 = [0]
	*((($1 + [8]) + [32])) = [0]
	*($1 + [24]) = (int_64)-1
	$3 = *($0 + [144])
	*($1 + [8]) = $3
	*($1 + [16]) = $3
	*($1 + [32]) = (int_64)0
	$4 = CALL db_lowerbound_i64($3, $3, (int_64)7407713301536178176, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $2(($1 + [8]), $4)
	
.LABEL $label$1
	CALL eosio_assert(($2 == 0), [8192])
	$5 = *($0)
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)CALL $fimport$3()), [9121])
	*(($2 = CALL _Znwj([32])) + [16]) = ($1 + [8])
	*($2 + [8]) = (int_64)0
	*($2) = *(($0 + [208]))
	CALL eosio_assert([1], [9018])
	CALL memcpy(($1 + [48]), $2, [8])
	CALL eosio_assert([1], [9018])
	$4 = (($1 + [48]) | [8])
	CALL memcpy($4, ($2 + [8]), [8])
	$3 = *($2)
	$6 = CALL db_store_i64(*((($1 + [8]) + [8])), (int_64)7407713301536178176, $5, $3, ($1 + [48]), [16])
	*($2 + [20]) = $6
	$7 = (($1 + [8]) + [16])
	if ( (uint_64)($3 <= *($7)) ){ goto $label$2 }
	*($7) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($1 + [72]) = $2
	$3 = *($2)
	*($1 + [48]) = $3
	*($1 + [68]) = $6
	$8 = ($1 + [36])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [40]))) ){ goto $label$5 }
	*($7 + [8]) = $3
	*($7 + [16]) = $6
	*($1 + [72]) = [0]
	*($7) = $2
	*($8) = ($7 + [24])
	$2 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $3(($1 + [32]), ($1 + [72]), ($1 + [48]), ($1 + [68]))
	$2 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$5 = *($0)
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)CALL $fimport$3()), [9121])
	*(($2 = CALL _Znwj([32])) + [16]) = ($1 + [8])
	*($2 + [8]) = (int_64)0
	*($2) = *(($0 + [216]))
	CALL eosio_assert([1], [9018])
	CALL memcpy(($1 + [48]), $2, [8])
	CALL eosio_assert([1], [9018])
	CALL memcpy($4, ($2 + [8]), [8])
	$3 = *($2)
	$6 = CALL db_store_i64(*((($1 + [8]) + [8])), (int_64)7407713301536178176, $5, $3, ($1 + [48]), [16])
	*($2 + [20]) = $6
	$7 = (($1 + [8]) + [16])
	if ( (uint_64)($3 <= *($7)) ){ goto $label$6 }
	*($7) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($1 + [72]) = $2
	$3 = *($2)
	*($1 + [48]) = $3
	*($1 + [68]) = $6
	$8 = ($1 + [36])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*((($1 + [8]) + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $3
	*($7 + [16]) = $6
	*($1 + [72]) = [0]
	*($7) = $2
	*($8) = ($7 + [24])
	$2 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $3(($1 + [32]), ($1 + [72]), ($1 + [48]), ($1 + [68]))
	$2 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$5 = *($0)
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)CALL $fimport$3()), [9121])
	*(($2 = CALL _Znwj([32])) + [16]) = ($1 + [8])
	*($2 + [8]) = (int_64)0
	*($2) = *(($0 + [224]))
	CALL eosio_assert([1], [9018])
	CALL memcpy(($1 + [48]), $2, [8])
	CALL eosio_assert([1], [9018])
	CALL memcpy($4, ($2 + [8]), [8])
	$3 = *($2)
	$6 = CALL db_store_i64(*((($1 + [8]) + [8])), (int_64)7407713301536178176, $5, $3, ($1 + [48]), [16])
	*($2 + [20]) = $6
	$7 = (($1 + [8]) + [16])
	if ( (uint_64)($3 <= *($7)) ){ goto $label$10 }
	*($7) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($1 + [72]) = $2
	$3 = *($2)
	*($1 + [48]) = $3
	*($1 + [68]) = $6
	$8 = ($1 + [36])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*((($1 + [8]) + [32]))) ){ goto $label$13 }
	*($7 + [8]) = $3
	*($7 + [16]) = $6
	*($1 + [72]) = [0]
	*($7) = $2
	*($8) = ($7 + [24])
	$2 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( $2 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $3(($1 + [32]), ($1 + [72]), ($1 + [48]), ($1 + [68]))
	$2 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$5 = *($0)
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)CALL $fimport$3()), [9121])
	*(($2 = CALL _Znwj([32])) + [16]) = ($1 + [8])
	*($2 + [8]) = (int_64)0
	*($2) = *(($0 + [232]))
	CALL eosio_assert([1], [9018])
	CALL memcpy(($1 + [48]), $2, [8])
	CALL eosio_assert([1], [9018])
	CALL memcpy($4, ($2 + [8]), [8])
	$3 = *($2)
	$6 = CALL db_store_i64(*((($1 + [8]) + [8])), (int_64)7407713301536178176, $5, $3, ($1 + [48]), [16])
	*($2 + [20]) = $6
	$7 = (($1 + [8]) + [16])
	if ( (uint_64)($3 <= *($7)) ){ goto $label$14 }
	*($7) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*($1 + [72]) = $2
	$3 = *($2)
	*($1 + [48]) = $3
	*($1 + [68]) = $6
	$8 = ($1 + [36])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*((($1 + [8]) + [32]))) ){ goto $label$17 }
	*($7 + [8]) = $3
	*($7 + [16]) = $6
	*($1 + [72]) = [0]
	*($7) = $2
	*($8) = ($7 + [24])
	$2 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( $2 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $3(($1 + [32]), ($1 + [72]), ($1 + [48]), ($1 + [68]))
	$2 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv($2)
	
.LABEL $label$15
	$5 = *($0)
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)CALL $fimport$3()), [9121])
	*(($2 = CALL _Znwj([32])) + [16]) = ($1 + [8])
	*($2 + [8]) = (int_64)0
	*($2) = *(($0 + [240]))
	CALL eosio_assert([1], [9018])
	CALL memcpy(($1 + [48]), $2, [8])
	CALL eosio_assert([1], [9018])
	CALL memcpy($4, ($2 + [8]), [8])
	$3 = *($2)
	$6 = CALL db_store_i64(*((($1 + [8]) + [8])), (int_64)7407713301536178176, $5, $3, ($1 + [48]), [16])
	*($2 + [20]) = $6
	$7 = (($1 + [8]) + [16])
	if ( (uint_64)($3 <= *($7)) ){ goto $label$18 }
	*($7) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	*($1 + [72]) = $2
	$3 = *($2)
	*($1 + [48]) = $3
	*($1 + [68]) = $6
	$8 = ($1 + [36])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*((($1 + [8]) + [32]))) ){ goto $label$21 }
	*($7 + [8]) = $3
	*($7 + [16]) = $6
	*($1 + [72]) = [0]
	*($7) = $2
	*($8) = ($7 + [24])
	$2 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( $2 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL $3(($1 + [32]), ($1 + [72]), ($1 + [48]), ($1 + [68]))
	$2 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( ($2 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv($2)
	
.LABEL $label$19
	$5 = *($0)
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)CALL $fimport$3()), [9121])
	*(($2 = CALL _Znwj([32])) + [16]) = ($1 + [8])
	*($2 + [8]) = (int_64)0
	*($2) = *(($0 + [248]))
	CALL eosio_assert([1], [9018])
	CALL memcpy(($1 + [48]), $2, [8])
	CALL eosio_assert([1], [9018])
	CALL memcpy($4, ($2 + [8]), [8])
	$3 = *($2)
	$6 = CALL db_store_i64(*((($1 + [8]) + [8])), (int_64)7407713301536178176, $5, $3, ($1 + [48]), [16])
	*($2 + [20]) = $6
	$7 = (($1 + [8]) + [16])
	if ( (uint_64)($3 <= *($7)) ){ goto $label$22 }
	*($7) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$22
	*($1 + [72]) = $2
	$3 = *($2)
	*($1 + [48]) = $3
	*($1 + [68]) = $6
	$8 = ($1 + [36])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*((($1 + [8]) + [32]))) ){ goto $label$25 }
	*($7 + [8]) = $3
	*($7 + [16]) = $6
	*($1 + [72]) = [0]
	*($7) = $2
	*($8) = ($7 + [24])
	$2 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( $2 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL $3(($1 + [32]), ($1 + [72]), ($1 + [48]), ($1 + [68]))
	$2 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( ($2 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv($2)
	
.LABEL $label$23
	$5 = *($0)
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)CALL $fimport$3()), [9121])
	*(($2 = CALL _Znwj([32])) + [16]) = ($1 + [8])
	*($2 + [8]) = (int_64)20
	*($2) = *(($0 + [256]))
	CALL eosio_assert([1], [9018])
	CALL memcpy(($1 + [48]), $2, [8])
	CALL eosio_assert([1], [9018])
	CALL memcpy($4, ($2 + [8]), [8])
	$3 = *($2)
	$4 = CALL db_store_i64(*((($1 + [8]) + [8])), (int_64)7407713301536178176, $5, $3, ($1 + [48]), [16])
	*($2 + [20]) = $4
	$0 = (($1 + [8]) + [16])
	if ( (uint_64)($3 <= *($0)) ){ goto $label$26 }
	*($0) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$26
	*($1 + [72]) = $2
	$3 = *($2)
	*($1 + [48]) = $3
	*($1 + [68]) = $4
	$7 = ($1 + [36])
	$0 = *($7)
	if ( ((uint_32)$0 >= (uint_32)*((($1 + [8]) + [32]))) ){ goto $label$29 }
	*($0 + [8]) = $3
	*($0 + [16]) = $4
	*($1 + [72]) = [0]
	*($0) = $2
	*($7) = ($0 + [24])
	$0 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( $0 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL $3(($1 + [32]), ($1 + [72]), ($1 + [48]), ($1 + [68]))
	$0 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( ($0 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv($0)
	
.LABEL $label$27
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$30 }
	$7 = ($1 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$32 }
	
.LOOP $label$33:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$34 }
	CALL _ZdlPv($2)
	
.LABEL $label$34
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$33 }
	$0 = *(($1 + [32]))
	goto $label$31 
	
.LABEL $label$32
	$0 = $4
	
.LABEL $label$31
	*($7) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$30
	$global$0 = ($1 + [80])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9093])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9116])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9116])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $17(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9478])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9523])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9573])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $16 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0 + [176]))
	*((($2 + [8]) + [32])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0 + [144])
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)4344997574077186048, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $14(($2 + [8]), $4) + [16]) == (int_32)($2 + [8])), [9172])
	CALL eosio_assert([0], [8359])
	$5 = *($2 + [32])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = *($0)
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$3()), [9121])
	*(($0 = CALL _Znwj([32])) + [16]) = ($2 + [8])
	*($0) = $1
	*($0 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [9018])
	CALL memcpy(($2 + [64]), $0, [8])
	CALL eosio_assert([1], [9018])
	CALL memcpy((($2 + [64]) | [8]), ($0 + [8]), [8])
	$3 = *($0)
	$5 = CALL db_store_i64(*((($2 + [8]) + [8])), (int_64)4344997574077186048, $6, $3, ($2 + [64]), [16])
	*($0 + [20]) = $5
	$4 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$4 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($2 + [56]) = $0
	$3 = *($0)
	*($2 + [64]) = $3
	*($2 + [52]) = $5
	$7 = ($2 + [36])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($2 + [40]))) ){ goto $label$7 }
	*($4 + [8]) = $3
	*($4 + [16]) = $5
	*($2 + [56]) = [0]
	*($4) = $0
	*($7) = ($4 + [24])
	$0 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $0 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $17(($2 + [32]), ($2 + [56]), ($2 + [64]), ($2 + [52]))
	$0 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($2 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $5
	
.LABEL $label$8
	*($7) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [80])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $108($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [64])
	$global$0 = $1
	CALL require_auth(*($0 + [152]))
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$2 = *($0 + [144])
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	$3 = [0]
	$4 = CALL db_find_i64($2, $2, (int_64)7407713301536178176, *($0 + [208]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $2(($1 + [8]), $4)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [8])), [9172])
	
.LABEL $label$1
	$5 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9223])
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [8])), [9258])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)CALL $fimport$3()), [9304])
	*($3 + [8]) = (int_64)2
	$2 = *($3)
	CALL eosio_assert([1], [9355])
	CALL eosio_assert([1], [9018])
	CALL memcpy(($1 + [48]), $3, [8])
	CALL eosio_assert([1], [9018])
	CALL memcpy((($1 + [48]) | [8]), ($3 + [8]), [8])
	CALL db_update_i64(*($3 + [20]), $5, ($1 + [48]), [16])
	$3 = (($1 + [8]) + [16])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$2 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	$6 = ($1 + [36])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$6 }
	$3 = *(($1 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$3 = $4
	
.LABEL $label$4
	*($6) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($1 + [64])
}

void .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [96])
	$global$0 = $1
	CALL require_auth(*($0 + [176]))
	*(($1 + [88])) = [0]
	*($1 + [72]) = (int_64)-1
	*($1 + [80]) = (int_64)0
	$2 = *($0 + [144])
	*($1 + [56]) = $2
	*($1 + [64]) = $2
	$2 = *(CALL $12(($1 + [56]), *($0 + [216]), [8221]) + [8])
	$3 = *(CALL $12(($1 + [56]), *($0 + [224]), [8221]) + [8])
	*(($1 + [32])) = [0]
	*($1 + [24]) = (int_64)0
	$0 = CALL $119([8326])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = (int_64))($2 - $3)
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*($1 + [24]) = ($0 << [1])
	$4 = (($1 + [24]) | [1])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($0 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($1 + [24]) = ($5 | [1])
	*($1 + [32]) = $4
	*($1 + [28]) = $0
	
.LABEL $label$3
	CALL memcpy($4, [8326], $0)
	
.LABEL $label$2
	*(($4 + $0)) = [0]
	CALL $107(($1 + [8]), $2)
	$0 = *($1 + [8])
	$4 = ($0 & [1])
	$0 = CALL $105(($1 + [24]), ( *($1 + [16]) ? (($1 + [8]) | [1]) : $4 ), ( *($1 + [12]) ? uint_32($0 >> [1]) : $4 ))
	$4 = ($0 + [8])
	*((($1 + [40]) + [8])) = *($4)
	*($1 + [40]) = *($0)
	*($0) = (int_64)0
	*($4) = [0]
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*((($1 + [8]) + [8])))
	
.LABEL $label$5
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($1 + [32]))
	
.LABEL $label$6
	CALL eosio_assert([0], ( *($1 + [48]) ? (($1 + [40]) | [1]) : (*($1 + [40]) & [1]) ))
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$7
	$5 = *($1 + [80])
	if ( ($5 == 0) ){ goto $label$8 }
	$6 = ($1 + [84])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($1 + [80]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $5
	
.LABEL $label$9
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$global$0 = ($1 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $97(($1 + [24]))
}

int_32 .FUNC $12 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9172])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7407713301536178176, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $2($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9172])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $13 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0 + [176]))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0 + [144])
	*($2) = $3
	*($2 + [8]) = $3
	$0 = CALL db_find_i64($3, $3, (int_64)4344997574077186048, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $14($2, $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$2), [9172])
	CALL eosio_assert([1], [9414])
	CALL eosio_assert([1], [9448])
	$4 = CALL db_next_i64(*($0 + [20]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	CALL $14($2, $4)
	
.LABEL $label$4
	CALL $15($2, $0)
	$5 = *($2 + [24])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [8342])
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL _ZdlPv($4)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($2 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL _ZdlPv($0)
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [9116])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	$3 = ($global$0 - [480])
	$global$0 = $3
	$4 = $3
	CALL $19(($4 + [432]))
	$6 = *($0 + [144])
	$5 = *($4 + [432])
	if ( ((int_64)$5 == (int_64)$6) ){ goto $label$1 }
	if ( ((int_64)$5 == (int_64)*($0 + [152])) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)*($4 + [440]) != (int_64)$6) ){ goto $label$1 }
	if ( CALL $20($0, $1) ){ goto $label$1 }
	CALL $21($0)
	$7 = [0]
	*((($4 + [392]) + [32])) = [0]
	*($4 + [408]) = (int_64)-1
	$5 = *($0 + [144])
	*($4 + [392]) = $5
	*($4 + [400]) = $5
	*($4 + [416]) = (int_64)0
	CALL eosio_assert((((int_64)*(CALL $12(($4 + [392]), *($0 + [208]), [8221]) + [8]) == (int_64)1) | ((int_64)*($4 + [432]) == (int_64)*($0 + [168]))), [8380])
	$8 = (($4 + [432]) + [24])
	CALL eosio_assert(((int_64)*($8) == (int_64)*($0 + [192])), [8418])
	CALL eosio_assert(((int_64)*($4 + [448]) > (int_64)0), [8438])
	$9 = ($4 + [448])
	if ( ((uint_64)((int_64)*($4 + [448]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$5 = (uint_64)*($8) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$5 = $6
	$7 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $6
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $7 ){ goto $label$6 }
	$7 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [8464])
	$6 = *($4 + [432])
	$5 = *($9)
	CALL eosio_assert(((uint_64)*($0 + [264]) <= (uint_64)$5), [8478])
	CALL eosio_assert((uint_64)($5 <= (int_64)100001), [8504])
	$8 = CALL $98(($4 + [360]), (($4 + [432]) + [32]))
	CALL $22(($4 + [376]), $0, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$7
	if ( ((uint_32)((*($4 + [376]) + [-1]) & [255]) > (uint_32)[2]) ){ goto $label$8 }
	$11 = $3
	$12 = CALL transaction_size()
	$13 = ($3 - (($12 + [15]) & [-16]))
	$global$0 = $13
	$8 = CALL read_transaction($13, $12)
	CALL eosio_assert(((int_32)$12 == (int_32)$8), [8522])
	$5 = CALL current_time()
	*(($4 + [324])) = (int_64)0
	*(($4 + [340])) = (int_64)0
	*(($4 + [348])) = (int_64)0
	$3 = [0]
	*($4 + [308]) = [0]
	*($4 + [312]) = [0]
	*($4 + [316 align=4]) = (int_64)0
	*($4 + [332 align=4]) = (int_64)0
	*($4 + [296]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($4 + [132]) = $13
	*($4 + [128]) = $13
	*($4 + [136]) = ($13 + $8)
	CALL $23(($4 + [128]), ($4 + [296]))
	CALL $25(CALL $24(CALL $24(($4 + [128]), ($4 + [320])), ($4 + [332])), ($4 + [344]))
	$14 = CALL $26(($4 + [256]), *($4 + [332]))
	$5 = *($14 + [8])
	if ( ((int_64)$5 == (int_64)0) ){ goto $label$12 }
	$7 = *([0] + [8824])
	
.LOOP $label$14:
	*((($4 + [128]) + ($8 = $3))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$5 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$3 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$13 }
	$5 = ((int_64)$5 << (int_64)5)
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($4 + [248])) = [0]
	*($4 + [240]) = (int_64)0
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$11 }
	*($4 + [240]) = ($3 << [1])
	$7 = (($4 + [240]) | [1])
	goto $label$10 
	
.LABEL $label$12
	$8 = [0]
	*(($4 + [248])) = [0]
	*($4 + [240]) = (int_64)0
	*($4 + [240]) = [0]
	$3 = (($4 + [240]) | [1])
	goto $label$9 
	
.LABEL $label$11
	$10 = (($3 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($4 + [240]) = ($10 | [1])
	*($4 + [248]) = $7
	*($4 + [244]) = $3
	
.LABEL $label$10
	$10 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$15:
	*(($7 + $8)) = *((($4 + [128]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$15 }
	$3 = ($7 + $3)
	$8 = ((int_64)*(($14 + [8])) == (int_64)-3617168760277827584)
	
.LABEL $label$9
	*($3) = [0]
	*($4 + [232]) = [8546]
	*($4 + [236]) = CALL $119([8546])
	*($4 + [24]) = *($4 + [232])
	CALL $27(($4 + [128]), ($4 + [24]))
	if ( ($8 == 0) ){ goto $label$16 }
	$5 = *($14)
	*($4 + [224]) = [8555]
	*($4 + [228]) = CALL $119([8555])
	*($4 + [16]) = *($4 + [224])
	CALL $27(($4 + [32]), ($4 + [16]))
	if ( ((int_64)$5 != (int_64)6138663591592764928) ){ goto $label$16 }
	CALL sha256($13, $12, ($4 + [192]))
	$5 = *($4 + [199])
	$2 = *($4 + [198])
	$15 = *($4 + [197])
	$16 = *($4 + [196])
	$17 = *($4 + [195])
	$18 = *($4 + [194])
	$19 = *($4 + [193])
	$20 = *($4 + [192])
	$21 = CALL current_time()
	*(($4 + [156])) = (int_64)0
	*(($4 + [172])) = (int_64)0
	*(($4 + [180])) = (int_64)0
	*($4 + [140]) = [0]
	*($4 + [144]) = [0]
	*($4 + [148 align=4]) = (int_64)0
	*($4 + [164 align=4]) = (int_64)0
	*($4 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$21 / (uint_64)(int_64)1000000)) + [60])
	$8 = ($0 + [144])
	$21 = *($8)
	*($4 + [96]) = [8567]
	*($4 + [100]) = CALL $119([8567])
	*($4 + [8]) = *($4 + [96])
	$3 = CALL $27(($4 + [104]), ($4 + [8]))
	*($4 + [112]) = $21
	*($4 + [120]) = *($3)
	*($4 + [80]) = [8579]
	*($4 + [84]) = CALL $119([8579])
	*($4) = *($4 + [80])
	$3 = CALL $27(($4 + [88]), $4)
	*(($4 + [56])) = *(($9 + [8]))
	*($4 + [40]) = $6
	*($4 + [32]) = ((int_64)$5 + (int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)$19 << (int_64)48) | (int_64)((int_64)$20 << (int_64)56)) | (int_64)((int_64)$18 << (int_64)40)) | (int_64)((int_64)$17 << (int_64)32)) | (int_64)((int_64)$16 << (int_64)24)) | (int_64)((int_64)$15 << (int_64)16)) | (int_64)((int_64)$2 << (int_64)8)))
	*($4 + [48]) = *($9)
	*($4 + [64]) = *($4 + [376])
	*($4 + [68]) = *($4 + [380])
	*($4 + [72]) = *($4 + [384])
	CALL $28(($4 + [164]), ($4 + [112]), ($0 + [144]), $3, ($4 + [32]))
	$5 = *($8)
	*($4 + [148]) = [0]
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = $1
	CALL $29(($4 + [112]), ($4 + [128]))
	$0 = *($4 + [112])
	CALL send_deferred(($4 + [32]), $5, $0, (*($4 + [116]) - $0), [0])
	$0 = *($4 + [112])
	if ( ($0 == 0) ){ goto $label$17 }
	*($4 + [116]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$17
	CALL $30(($4 + [128]))
	
.LABEL $label$16
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($4 + [248]))
	
.LABEL $label$18
	$0 = *($14 + [28])
	if ( ($0 == 0) ){ goto $label$19 }
	*(($14 + [32])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$19
	$0 = *($14 + [16])
	if ( ($0 == 0) ){ goto $label$20 }
	*(($14 + [20])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$20
	CALL $30(($4 + [296]))
	$11
	
.LABEL $label$8
	$3 = *($4 + [416])
	if ( ($3 == 0) ){ goto $label$1 }
	$7 = ($4 + [420])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$22 }
	
.LOOP $label$23:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$24 }
	CALL _ZdlPv($8)
	
.LABEL $label$24
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$23 }
	$0 = *(($4 + [416]))
	goto $label$21 
	
.LABEL $label$22
	$0 = $3
	
.LABEL $label$21
	*($7) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$1
	if ( ((*($4 + [464]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($4 + [472])))
	
.LABEL $label$25
	$global$0 = ($4 + [480])
}

void .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $122($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [4]) = $1
	*($2) = $1
	*($2 + [8]) = ($1 + $3)
	CALL $31($2, $0)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $58 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [592])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [520]))) = (int_64)0
	*($4 + [504]) = (int_64)0
	*($4 + [496]) = (int_64)0
	*($4 + [512]) = (int_64)0
	*($4 + [528]) = [0]
	*($4 + [532]) = [0]
	*($4 + [536]) = (int_64)0
	*($4 + [484]) = $2
	*($4 + [480]) = $2
	*($4 + [488]) = ($2 + $7)
	*($4 + [576]) = ($4 + [480])
	*($4 + [48]) = ($4 + [496])
	CALL $64(($4 + [48]), ($4 + [576]))
	$8 = *($4 + [488])
	*((($4 + [32]) + [8])) = $8
	*((($4 + [16]) + [8])) = $8
	$9 = *($4 + [480])
	*($4 + [16]) = $9
	*($4 + [32]) = $9
	CALL $63(($4 + [48]), $0, $1, ($4 + [16]))
	*(($8 = (($4 + [544]) + [8]))) = *($3)
	*($4 + [544]) = *($4 + [512])
	$0 = *($4 + [504])
	$1 = *($4 + [496])
	$10 = *($4 + [528])
	$11 = *($4 + [532])
	$9 = *($4 + [536])
	*((($4 + [560]) + [8])) = *($8)
	*($4 + [560]) = *($4 + [544])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$12 = *((($4 + [560]) + [8]))
	*((($4 + [576]) + [8])) = $12
	*(($4 + [8])) = $12
	$12 = *($4 + [560])
	*($4) = $12
	*($4 + [576]) = $12
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 ($10 & [255])), (int_32 $11), (int_32 $9), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $125($2)
	
.LABEL $label$5
	$global$0 = ($4 + [592])
	return [1]
}

int_32 .FUNC $59 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [608])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [528]))) = (int_64)0
	*($4 + [512]) = (int_64)0
	*($4 + [504]) = (int_64)0
	*($4 + [520]) = (int_64)0
	*($4 + [536]) = [0]
	*($4 + [540]) = [0]
	*($4 + [544]) = (int_64)0
	*($4 + [552]) = (int_64)0
	*($4 + [492]) = $2
	*($4 + [488]) = $2
	*($4 + [496]) = ($2 + $7)
	*($4 + [592]) = ($4 + [488])
	*($4 + [48]) = ($4 + [504])
	CALL $65(($4 + [48]), ($4 + [592]))
	$8 = *($4 + [496])
	*((($4 + [32]) + [8])) = $8
	*((($4 + [16]) + [8])) = $8
	$9 = *($4 + [488])
	*($4 + [16]) = $9
	*($4 + [32]) = $9
	CALL $63(($4 + [48]), $0, $1, ($4 + [16]))
	*(($8 = (($4 + [560]) + [8]))) = *($3)
	*($4 + [560]) = *($4 + [520])
	$0 = *($4 + [512])
	$1 = *($4 + [504])
	$10 = *($4 + [536])
	$11 = *($4 + [540])
	$9 = *($4 + [544])
	$12 = *($4 + [552])
	*((($4 + [576]) + [8])) = *($8)
	*($4 + [576]) = *($4 + [560])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$13 = *((($4 + [576]) + [8]))
	*((($4 + [592]) + [8])) = $13
	*(($4 + [8])) = $13
	$13 = *($4 + [576])
	*($4) = $13
	*($4 + [592]) = $13
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 ($10 & [255])), (int_32 $11), (int_32 $9), (int_64 $12), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $125($2)
	
.LABEL $label$5
	$global$0 = ($4 + [608])
	return [1]
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $108($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $46(($7 + [28]), [103])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $84(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	float_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$2 = ($global$0 - [304])
	$global$0 = $2
	$3 = *($1 + [136])
	if ( ((int_64)$3 == (int_64)*($0 + [184])) ){ goto $label$1 }
	$4 = *($1 + [8])
	if ( ((int_64)$3 == (int_64)$4) ){ goto $label$1 }
	$5 = ((float_64)(CASTING float_64)(int_64 *($1 + [16])) * (float_64)(float_64)0.001)
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$3 }
	$6 = (int_64)0
	if ( (int_64)((int_64)0 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$6 = (Rounds 0)($5)
	if ( (int_64)($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$7 }
	$7 = [0]
	$8 = *([0] + [8824])
	
.LOOP $label$9:
	*((($2 + [192]) + ($9 = $7))) = *(($8 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$4 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$9 == (int_32)[12]) )))))
	$7 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[11]) ){ goto $label$8 }
	$4 = ((int_64)$4 << (int_64)5)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$9 }
	
.LABEL $label$8
	*(($2 + [264])) = [0]
	*($2 + [256]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$6 }
	*($2 + [256]) = ($7 << [1])
	$8 = (($2 + [256]) | [1])
	goto $label$5 
	
.LABEL $label$7
	*(($2 + [264])) = [0]
	*($2 + [256]) = (int_64)0
	*($2 + [256]) = [0]
	$9 = (($2 + [256]) | [1])
	goto $label$4 
	
.LABEL $label$6
	$10 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($2 + [256]) = ($10 | [1])
	*($2 + [264]) = $8
	*($2 + [260]) = $7
	
.LABEL $label$5
	$10 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$10:
	*(($8 + $9)) = *((($2 + [192]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$10 }
	$9 = ($8 + $7)
	
.LABEL $label$4
	*($9) = [0]
	$4 = CALL current_time()
	*(($2 + [220])) = (int_64)0
	*(($2 + [236])) = (int_64)0
	*(($2 + [244])) = (int_64)0
	*($2 + [204]) = [0]
	*($2 + [208]) = [0]
	*($2 + [212 align=4]) = (int_64)0
	*($2 + [228 align=4]) = (int_64)0
	*($2 + [192]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	$4 = *($0 + [144])
	*($2 + [160]) = [8567]
	*($2 + [164]) = CALL $119([8567])
	*($2 + [24]) = *($2 + [160])
	$9 = CALL $27(($2 + [168]), ($2 + [24]))
	*($2 + [176]) = $4
	*($2 + [184]) = *($9)
	*($2 + [144]) = [8555]
	*($2 + [148]) = CALL $119([8555])
	*($2 + [16]) = *($2 + [144])
	$10 = CALL $27(($2 + [152]), ($2 + [16]))
	*($2 + [128]) = [8546]
	*($2 + [132]) = CALL $119([8546])
	*($2 + [8]) = *($2 + [128])
	$11 = CALL $27(($2 + [136]), ($2 + [8]))
	$12 = *($0 + [192])
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9024])
	$4 = (uint_64)$12 >> (uint_64)(int_64)8)
	$13 = ($2 + [228])
	$9 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$14 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$4 = $14
	$7 = [1]
	$8 = $9
	$9 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$4 = $14
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$9 < (int_32)[6])
	$8 = ($9 + [1])
	$9 = $8
	if ( $7 ){ goto $label$15 }
	$7 = [1]
	$9 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [9073])
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	$9 = CALL $119([8746])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$23 }
	*($2 + [48]) = ($9 << [1])
	$7 = (($2 + [48]) | [1])
	if ( $9 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$8 = (($9 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($2 + [48]) = ($8 | [1])
	*($2 + [56]) = $7
	*($2 + [52]) = $9
	
.LABEL $label$22
	CALL memcpy($7, [8746], $9)
	
.LABEL $label$21
	*(($7 + $9)) = [0]
	$9 = *($2 + [256])
	$7 = ($9 & [1])
	$9 = CALL $105(($2 + [48]), ( *($2 + [264]) ? (($2 + [256]) | [1]) : $7 ), ( *($2 + [260]) ? uint_32($9 >> [1]) : $7 ))
	$7 = ($9 + [8])
	*((($2 + [64]) + [8])) = *($7)
	*($2 + [64]) = *($9)
	*($9) = (int_64)0
	*($7) = [0]
	*((($2 + [32]) + [8])) = [0]
	*($2 + [32]) = (int_64)0
	$9 = CALL $119([8770])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$26 }
	*($2 + [32]) = ($9 << [1])
	$8 = (($2 + [32]) | [1])
	$7 = $8
	if ( $9 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$8 = (($9 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($2 + [32]) = ($8 | [1])
	*($2 + [40]) = $7
	*($2 + [36]) = $9
	$8 = (($2 + [32]) | [1])
	
.LABEL $label$25
	CALL memcpy($7, [8770], $9)
	
.LABEL $label$24
	*(($7 + $9)) = [0]
	$9 = *($2 + [32])
	$7 = ($9 & [1])
	$9 = CALL $105(($2 + [64]), ( *($2 + [40]) ? $8 : $7 ), ( *($2 + [36]) ? uint_32($9 >> [1]) : $7 ))
	$4 = *($9)
	*($9) = (int_64)0
	$7 = *($9 + [8])
	*($9 + [8]) = [0]
	*((($2 + [80]) + [24])) = $12
	*((($2 + [80]) + [40])) = $7
	*($2 + [88]) = $3
	*($2 + [80]) = *(($0 + [144]))
	*($2 + [112]) = $4
	*($2 + [96]) = $6
	$7 = *((($2 + [192]) + [40]))
	if ( ((uint_32)$7 >= (uint_32)*(($2 + [236]))) ){ goto $label$31 }
	*($7 + [16 align=4]) = (int_64)0
	*($7 + [8]) = *($11)
	*($7) = *($10)
	*(($8 = ($7 + [24]))) = [0]
	$9 = CALL _Znwj([16])
	*($7 + [16]) = $9
	$10 = ($9 + [16])
	*($8) = $10
	*(($9 + [8])) = *((($2 + [176]) + [8]))
	*($9) = *($2 + [176])
	*(($7 + [20])) = $10
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$9 = *($2 + [112])
	$8 = ( *((($2 + [80]) + [36])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($8 + [32])
	$4 = (CASTING uint_64)(uint_32 $8)
	$8 = ($7 + [28])
	
.LOOP $label$32:
	$9 = ($9 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$32 }
	if ( ($9 == 0) ){ goto $label$30 }
	CALL $46($8, $9)
	$8 = *(($7 + [32]))
	$9 = *(($7 + [28]))
	goto $label$29 
	
.LABEL $label$31
	CALL $47($13, ($2 + [176]), $10, $11, ($2 + [80]))
	$9 = [1]
	if ( (*($2 + [112]) & [1]) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$8 = [0]
	$9 = [0]
	
.LABEL $label$29
	*($2 + [276]) = $9
	*($2 + [272]) = $9
	*($2 + [280]) = $8
	*($2 + [288]) = ($2 + [272])
	*($2 + [296]) = ($2 + [80])
	CALL $48(($2 + [296]), ($2 + [288]))
	*(($9 = (($2 + [192]) + [40]))) = (*($9) + [40])
	$9 = [1]
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv(*(($2 + [120])))
	
.LABEL $label$27
	if ( (*($2 + [32]) & $9) ){ goto $label$34 }
	$9 = [1]
	if ( (*($2 + [64]) & [1]) ){ goto $label$33 }
	goto $label$18 
	
.LABEL $label$34
	CALL _ZdlPv(*(($2 + [40])))
	$9 = [1]
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$33
	CALL _ZdlPv(*($2 + [72]))
	if ( (*($2 + [48]) & $9) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$20
	CALL $97(($2 + [48]))
	
.LABEL $label$19
	CALL $97(($2 + [32]))
	
.LABEL $label$18
	if ( ((*($2 + [48]) & $9) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*($2 + [56]))
	
.LABEL $label$16
	*(($2 + [212])) = [2]
	$4 = *(($1 + [87]))
	$3 = *(($1 + [86]))
	$14 = *(($1 + [85]))
	$6 = *(($1 + [84]))
	$12 = *(($1 + [83]))
	$15 = *(($1 + [82]))
	$16 = *(($1 + [81]))
	*($2 + [88]) = (int_64)0
	*($2 + [80]) = ((int_64)$4 | (int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)$15 << (int_64)40) | (int_64)((int_64)$16 << (int_64)24)) | (int_64)((int_64)$12 << (int_64)48)) | (int_64)((int_64)$6 << (int_64)32)) | (int_64)((int_64)$14 << (int_64)16)) | (int_64)((int_64)$3 << (int_64)8)))
	$4 = *(($0 + [144]))
	CALL $29(($2 + [176]), ($2 + [192]))
	$9 = *($2 + [176])
	CALL send_deferred(($2 + [80]), $4, $9, (*($2 + [180]) - $9), [0])
	$9 = *($2 + [176])
	if ( ($9 == 0) ){ goto $label$35 }
	*($2 + [180]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$35
	CALL $30(($2 + [192]))
	if ( ((*($2 + [256]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($2 + [264])))
	
.LABEL $label$1
	$global$0 = ($2 + [304])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [104]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9736])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7760153368969871360)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9682])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9682])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $5(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [64]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [76]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [84]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [92]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $108($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $56 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	CALL $63(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $125($2)
	
.LABEL $label$6
	$global$0 = ($4 + [464])
	return [1]
}

int_32 .FUNC $57 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [480])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [472]) = (int_64)0
	*($4 + [464]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9116])
	CALL memcpy(($4 + [464]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9116])
	CALL memcpy((($4 + [464]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	CALL $63(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [472])
	$1 = *($4 + [464])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $125($2)
	
.LABEL $label$6
	$global$0 = ($4 + [480])
	return [1]
}

int_32 .FUNC $116 (int_32 $0)
{
	int_32 $1
	$1 = int_32($0 >> [31])
	return ((int_32)($0 + $1) ^ (int_32)$1)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $108($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $110 (int_32 $0)
{
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [13] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $113($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $113($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $113($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $113($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18480]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $113($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $113($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $113($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $119 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $68($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $46($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $69($2, $1)
	CALL $71(CALL $70(CALL $70($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $108($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $46(($7 + [28]), [45])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $81(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$12 }
	*($3 + [240]) = [8546]
	*($3 + [244]) = CALL $119([8546])
	*($3 + [88]) = *($3 + [240])
	CALL $27(($3 + [248]), ($3 + [88]))
	if ( ((int_64)$2 <= (int_64)-4994130327754206209) ){ goto $label$11 }
	if ( ((int_64)$2 > (int_64)4352879033176293375) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-4994130327754206208) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4157529782108553216) ){ goto $label$1 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [1]
	*($3 + [24]) = *($3 + [216])
	CALL $56($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [144]) = [8555]
	*($3 + [148]) = CALL $119([8555])
	*($3 + [112]) = *($3 + [144])
	CALL $27(($3 + [248]), ($3 + [112]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [128]) = [8546]
	*($3 + [132]) = CALL $119([8546])
	*($3 + [104]) = *($3 + [128])
	CALL $27(($3 + [136]), ($3 + [104]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [2]
	*($3 + [96]) = *($3 + [120])
	CALL $57($0, (int_64)6138663591592764928, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 <= (int_64)-5003315193367756801) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-5003315193367756800) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-5003132314285068800) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4994302111311200256) ){ goto $label$1 }
	*($3 + [228]) = [0]
	*($3 + [224]) = [3]
	*($3 + [16]) = *($3 + [224])
	CALL $56($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)4352879033176293376) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)7677824503674707968) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421049960203129232) ){ goto $label$1 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [4]
	*($3 + [8]) = *($3 + [232])
	CALL $56($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-6217917265781719040) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-5920734474933070848) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [5]
	*($3 + [64]) = *($3 + [176])
	CALL $58($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [172]) = [0]
	*($3 + [168]) = [6]
	*($3 + [72]) = *($3 + [168])
	CALL $59($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [164]) = [0]
	*($3 + [160]) = [7]
	*($3 + [80]) = *($3 + [160])
	CALL $60($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [156]) = [0]
	*($3 + [152]) = [8]
	*($3) = *($3 + [152])
	CALL $61($1, $1, $3)
	goto $label$1 
	
.LABEL $label$5
	*($3 + [196]) = [0]
	*($3 + [192]) = [9]
	*($3 + [48]) = *($3 + [192])
	CALL $62($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [188]) = [0]
	*($3 + [184]) = [10]
	*($3 + [56]) = *($3 + [184])
	CALL $62($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [204]) = [0]
	*($3 + [200]) = [11]
	*($3 + [40]) = *($3 + [200])
	CALL $56($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [212]) = [0]
	*($3 + [208]) = [12]
	*($3 + [32]) = *($3 + [208])
	CALL $56($1, $1, ($3 + [32]))
	
.LABEL $label$1
	CALL $110([0])
	$global$0 = ($3 + [256])
}

void .FUNC $107 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $103(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $115(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8574], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $103(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $103(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $118(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [64])
	$global$0 = $1
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$2 = *($0 + [144])
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	$3 = [0]
	$4 = CALL db_find_i64($2, $2, (int_64)7407713301536178176, *($0 + [216]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $2(($1 + [8]), $4)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [8])), [9172])
	
.LABEL $label$1
	$5 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9223])
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [8])), [9258])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)CALL $fimport$3()), [9304])
	*($3 + [8]) = ((int_64)*($3 + [8]) + (int_64)1)
	$2 = *($3)
	CALL eosio_assert([1], [9355])
	CALL eosio_assert([1], [9018])
	CALL memcpy(($1 + [48]), $3, [8])
	CALL eosio_assert([1], [9018])
	CALL memcpy((($1 + [48]) | [8]), ($3 + [8]), [8])
	CALL db_update_i64(*($3 + [20]), $5, ($1 + [48]), [16])
	$3 = (($1 + [8]) + [16])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$2 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	$6 = ($1 + [36])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$6 }
	$3 = *(($1 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$3 = $4
	
.LABEL $label$4
	*($6) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($1 + [64])
}

int_32 .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$4 = *($0 + [144])
	*($2 + [8]) = $4
	*($2 + [16]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)4344997574077186048, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $14(($2 + [8]), $0) + [16]) == (int_32)($2 + [8])), [9172])
	$3 = [1]
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$5 }
	CALL _ZdlPv($7)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($2 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
	return $3
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9116])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [9116])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9116])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	$4 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *(($0 + [8]))), [9626])
	$6 = ($0 + [4])
	$3 = *($6)
	$2 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($2 & [128]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)*($7) != (int_32)$3), [9116])
	$3 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($3), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($4 <= *($7)), [9626])
	$4 = *($3)
	$2 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($2 & [128]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($3 + [88]) = [0]
	*($3 + [80]) = (int_64)0
	*($3 + [72]) = [0]
	*($3 + [64]) = (int_64)0
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$5 = ($2 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($2 + [4])
	$5 = *($2 + [8])
	
.LABEL $label$1
	$6 = [0]
	$7 = CALL $119([8800])
	if ( ($7 == 0) ){ goto $label$3 }
	$8 = ($5 + $4)
	if ( ((int_32)$4 < (int_32)$7) ){ goto $label$5 }
	$6 = $5
	
.LOOP $label$6:
	$4 = (($4 - $7) + [1])
	if ( ($4 == 0) ){ goto $label$5 }
	$4 = CALL $117($6, [124], $4)
	if ( ($4 == 0) ){ goto $label$5 }
	if ( (CALL $118($4, [8800], $7) == 0) ){ goto $label$4 }
	$6 = ($4 + [1])
	$4 = ($8 - $6)
	if ( ((int_32)$4 >= (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = $8
	
.LABEL $label$4
	$6 = ( [-1] ? ($4 - $5) : ((int_32)$4 == (int_32)$8) )
	
.LABEL $label$3
	CALL $99(($3 + [48]), $2, [0], $6, $2)
	if ( (*($3 + [80]) & [1]) ){ goto $label$8 }
	*($3 + [80]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*(($3 + [88]))) = [0]
	*($3 + [84]) = [0]
	
.LABEL $label$7
	CALL $102(($3 + [80]), [0])
	*((($3 + [80]) + [8])) = *((($3 + [48]) + [8]))
	*($3 + [80]) = *($3 + [48])
	$4 = *($3 + [80])
	$7 = CALL $119([8802])
	if ( ((int_32)$7 != (int_32)( *($3 + [84]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$12 }
	if ( (CALL $106(($3 + [80]), [0], [-1], [8802], $7) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$4 = *($3 + [80])
	$7 = CALL $119([8807])
	if ( ((int_32)$7 != (int_32)( *($3 + [84]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$13 }
	if ( (CALL $106(($3 + [80]), [0], [-1], [8807], $7) == 0) ){ goto $label$10 }
	
.LABEL $label$13
	$8 = [0]
	$4 = *($3 + [80])
	$7 = CALL $119([8816])
	if ( ((int_32)$7 != (int_32)( *($3 + [84]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$9 }
	$8 = (CALL $106(($3 + [80]), [0], [-1], [8816], $7) == 0)
	goto $label$9 
	
.LABEL $label$11
	$8 = [3]
	goto $label$9 
	
.LABEL $label$10
	$8 = [2]
	
.LABEL $label$9
	*(($3 + [56])) = [0]
	*($3 + [48]) = (int_64)0
	$4 = CALL $119([8737])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$18 }
	*($3 + [48]) = ($4 << [1])
	$7 = (($3 + [48]) | [1])
	if ( $4 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$5 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($5)
	*($3 + [48]) = ($5 | [1])
	*($3 + [56]) = $7
	*($3 + [52]) = $4
	
.LABEL $label$17
	CALL memcpy($7, [8737], $4)
	
.LABEL $label$16
	*(($7 + $4)) = [0]
	if ( (*($3 + [64]) & [1]) ){ goto $label$20 }
	*($3 + [64]) = [0]
	goto $label$19 
	
.LABEL $label$20
	*(*(($3 + [72]))) = [0]
	*($3 + [68]) = [0]
	
.LABEL $label$19
	CALL $102(($3 + [64]), [0])
	*((($3 + [64]) + [8])) = *((($3 + [48]) + [8]))
	*($3 + [64]) = *($3 + [48])
	if ( ($8 == 0) ){ goto $label$31 }
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$30 }
	$6 = CALL $99(($3 + [48]), $2, ($6 + [1]), [-1], $2)
	$7 = *($3 + [48])
	$9 = *($6 + [8])
	$2 = *($6 + [4])
	$5 = [0]
	$4 = CALL $119([8800])
	if ( ($4 == 0) ){ goto $label$28 }
	$5 = ($7 & [1])
	$7 = ( $2 ? uint_32($7 >> [1]) : $5 )
	if ( ((int_32)$7 < (int_32)$4) ){ goto $label$27 }
	$9 = ( $9 ? ($6 + [1]) : $5 )
	$5 = ($9 + $7)
	$2 = $9
	
.LOOP $label$32:
	$7 = (($7 - $4) + [1])
	if ( ($7 == 0) ){ goto $label$27 }
	$7 = CALL $117($2, [124], $7)
	if ( ($7 == 0) ){ goto $label$27 }
	if ( (CALL $118($7, [8800], $4) == 0) ){ goto $label$29 }
	$2 = ($7 + [1])
	$7 = ($5 - $2)
	if ( ((int_32)$7 >= (int_32)$4) ){ goto $label$32 }
	goto $label$27 
	
.LABEL $label$31
	*($0 + [4]) = [0]
	*($0) = [0]
	*($3 + [40]) = [8737]
	*($3 + [44]) = CALL $119([8737])
	*($3) = *($3 + [40])
	CALL $27(($0 + [8]), $3)
	$4 = [1]
	if ( (*($3 + [64]) & [1]) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$30
	*(($3 + [56])) = [0]
	*($3 + [48]) = (int_64)0
	$4 = CALL $119([8737])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$35 }
	*($3 + [48]) = ($4 << [1])
	$7 = (($3 + [48]) | [1])
	if ( $4 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$2 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($2)
	*($3 + [48]) = ($2 | [1])
	*($3 + [56]) = $7
	*($3 + [52]) = $4
	
.LABEL $label$34
	CALL memcpy($7, [8737], $4)
	
.LABEL $label$33
	*(($7 + $4)) = [0]
	if ( (*($3 + [64]) & [1]) ){ goto $label$37 }
	*($3 + [64]) = [0]
	goto $label$36 
	
.LABEL $label$37
	*(*(($3 + [72]))) = [0]
	*($3 + [68]) = [0]
	
.LABEL $label$36
	$2 = [0]
	CALL $102(($3 + [64]), [0])
	*((($3 + [64]) + [8])) = *((($3 + [48]) + [8]))
	*($3 + [64]) = *($3 + [48])
	goto $label$23 
	
.LABEL $label$29
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$27 }
	$5 = ($7 - $9)
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$27 }
	
.LABEL $label$28
	CALL $99(($3 + [24]), $6, [0], $5, $6)
	if ( (*($3 + [64]) & [1]) ){ goto $label$26 }
	*($3 + [64]) = [0]
	goto $label$25 
	
.LABEL $label$27
	CALL $100(($3 + [64]), $6)
	$2 = [0]
	if ( (*($3 + [48]) & [1]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	*(*(($3 + [72]))) = [0]
	*($3 + [68]) = [0]
	
.LABEL $label$25
	$2 = [0]
	CALL $102(($3 + [64]), [0])
	*((($3 + [64]) + [8])) = *((($3 + [24]) + [8]))
	*($3 + [64]) = *($3 + [24])
	$5 = (*($3 + [24]) & [1])
	$4 = CALL $99(($3 + [24]), $6, ($5 + [1]), [-1], $6)
	$9 = *($4 + [8])
	$7 = ( $9 ? ($4 + [1]) : $5 )
	$4 = *($7)
	if ( ($4 == 0) ){ goto $label$38 }
	$7 = ($7 + [1])
	$2 = [0]
	
.LOOP $label$39:
	$2 = ((int_32(($4 << [24]) >> [24]) + ((int_32)$2 * (int_32)[10])) + [-48])
	$4 = *($7)
	$7 = ($7 + [1])
	if ( $4 ){ goto $label$39 }
	
.LABEL $label$38
	if ( ($5 == 0) ){ goto $label$40 }
	CALL _ZdlPv($9)
	
.LABEL $label$40
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$23
	$4 = *($3 + [64])
	$7 = ($4 & [1])
	*($3 + [16]) = ( *(($3 + [72])) ? (($3 + [64]) | [1]) : $7 )
	*($3 + [20]) = ( *($3 + [68]) ? uint_32($4 >> [1]) : $7 )
	*($3 + [8]) = *($3 + [16])
	$4 = CALL $27(($3 + [48]), ($3 + [8]))
	$10 = *($1 + [184])
	$7 = CALL is_account(*($4))
	$11 = *($4)
	*($0) = $8
	*($0 + [4]) = $2
	*($0 + [8]) = ( $11 ? $10 : $7 )
	*($0 + [1 align=1]) = *($3 + [24 align=1])
	*(($0 + [3])) = *(($3 + [26]))
	$4 = [1]
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$21
	if ( (*($3 + [80]) & $4) ){ goto $label$41 }
	$global$0 = ($3 + [96])
	return (unreachable)
	
.LABEL $label$41
	CALL _ZdlPv(*(($3 + [88])))
	$global$0 = ($3 + [96])
	return (unreachable)
	
.LABEL $label$15
	CALL $97(($3 + [48]))
	
.LABEL $label$14
	CALL $97(($3 + [48]))
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9626])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = int_32(($3 - $6) >> [4])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $77($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ($7 << [4]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($3 + [-16])
	$2 = *(($3 + [-12]))
	if ( ($2 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($0 + [8])
	
.LOOP $label$9:
	$2 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($6) - *($2)) > (uint_32)[1]), [9116])
	CALL memcpy($7, *($2), [2])
	*($2) = (*($2) + [2])
	CALL $76($0, ($7 + [4]))
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9626])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = ((int_32)($3 - $6) / (int_32)[40])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $78($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ((int_32)$7 * (int_32)[40]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = *(($3 + [-12]))
	if ( ($7 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = ($3 + [-40])
	$2 = *(($3 + [-24]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($3 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	
.LOOP $label$10:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($7)) > (uint_32)[7]), [9116])
	CALL memcpy($2, *($7), [8])
	$5 = (*($7) + [8])
	*($7) = $5
	CALL eosio_assert(((uint_32)(*($6) - $5) > (uint_32)[7]), [9116])
	CALL memcpy(($2 + [8]), *($7), [8])
	*($7) = (*($7) + [8])
	CALL $76(CALL $79($0, ($2 + [16])), ($2 + [28]))
	$2 = ($2 + [40])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8861])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8966])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8899])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8966])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $108(($0 + [16]))
	
.LABEL $label$1
	CALL $108(($0 + [28]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $109 ()
{
	return [10068]
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9018])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9018])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9018])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9018])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9018])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $108 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9116])
	CALL memcpy(($0 + [32]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9116])
	CALL memcpy(($0 + [36]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy(($0 + [48]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9116])
	CALL memcpy(($0 + [32]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9116])
	CALL memcpy(($0 + [36]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9116])
	CALL memcpy(($0 + [40]), *($4 + [4]), [4])
	$3 = (*($4 + [4]) + [4])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[3]), [9116])
	CALL memcpy(($0 + [44]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	*($2 + [8]) = $0
	CALL $87(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $76($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $102($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $102($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $97($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $61 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	$3 = ($global$0 - [880])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [560]) + [16]))) = (int_64)0
	*(($8 = ($4 + [592]))) = (int_64)0
	*(($9 = ($4 + [632]))) = (int_64)0
	*(($10 = ($4 + [624]))) = (int_64)0
	*(($11 = ($4 + [616]))) = (int_64)0
	*($4 + [568]) = (int_64)0
	*($4 + [560]) = (int_64)0
	*($4 + [584]) = (int_64)0
	*($4 + [600]) = (int_64)0
	*($4 + [608]) = (int_64)0
	*($4 + [640]) = [0]
	*($4 + [644]) = [0]
	*($4 + [648]) = (int_64)0
	*($4 + [656]) = [0]
	*($4 + [664]) = (int_64)0
	*($4 + [548]) = $2
	*($4 + [544]) = $2
	*($4 + [552]) = ($2 + $7)
	*($4 + [800]) = ($4 + [544])
	*($4 + [112]) = ($4 + [560])
	CALL $67(($4 + [112]), ($4 + [800]))
	$12 = *($4 + [552])
	*((($4 + [96]) + [8])) = $12
	*((($4 + [80]) + [8])) = $12
	$13 = *($4 + [544])
	*($4 + [80]) = $13
	*($4 + [96]) = $13
	CALL $63(($4 + [112]), $0, $1, ($4 + [80]))
	*(($12 = (($4 + [720]) + [8]))) = *($3)
	*(($3 = (($4 + [704]) + [8]))) = *($8)
	*(($8 = (($4 + [672]) + [16]))) = *($10)
	*(($10 = (($4 + [672]) + [24]))) = *($9)
	*($4 + [720]) = *($4 + [568])
	*($4 + [704]) = *($4 + [584])
	*($4 + [672]) = *($4 + [608])
	*($4 + [680]) = *($11)
	$0 = *($4 + [560])
	$1 = *($4 + [600])
	$13 = *($4 + [664])
	$9 = *($4 + [656])
	$11 = *($4 + [652])
	$14 = *($4 + [648])
	$15 = *($4 + [645])
	$16 = *($4 + [644])
	$17 = *($4 + [640])
	*((($4 + [768]) + [24])) = *($10)
	*((($4 + [768]) + [16])) = *($8)
	*((($4 + [752]) + [8])) = *($3)
	*((($4 + [736]) + [8])) = *($12)
	*($4 + [776]) = *($4 + [680])
	*($4 + [768]) = *($4 + [672])
	*($4 + [752]) = *($4 + [704])
	*($4 + [736]) = *($4 + [720])
	$3 = (($4 + [112]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$18 = *((($4 + [736]) + [8]))
	*((($4 + [864]) + [8])) = $18
	*(($5 = (($4 + [848]) + [8]))) = *((($4 + [752]) + [8]))
	*(($8 = (($4 + [800]) + [16]))) = *((($4 + [768]) + [16]))
	*(($10 = (($4 + [800]) + [24]))) = *((($4 + [768]) + [24]))
	$19 = *($4 + [736])
	*($4 + [864]) = $19
	*($4 + [848]) = *($4 + [752])
	*($4 + [840]) = $1
	*($4 + [800]) = *($4 + [768])
	*($4 + [808]) = *($4 + [776])
	*((($4 + [64]) + [8])) = $18
	*((($4 + [48]) + [8])) = *($5)
	*(($4 + [16])) = *($8)
	*(($4 + [24])) = *($10)
	*($4 + [64]) = $19
	*($4 + [48]) = *($4 + [848])
	*($4 + [40]) = *($4 + [840])
	*($4) = *($4 + [800])
	*($4 + [8]) = *($4 + [808])
	CALL void $3((int_32 $0), (int_64 ($4 + [64])), (int_32 ($4 + [48])), (int_32 ($4 + [40])), (int_32 $4), (int_32 $17), (int_32 ($16 & [255])), (int_32 ($15 & [255])), (int_32 $14), (int_32 $11), (int_32 ($9 & [255])), (int_32 $13), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $125($2)
	
.LABEL $label$5
	$global$0 = ($4 + [880])
	return [1]
}

int_32 .FUNC $60 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [528])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*((($4 + [480]) + [8])) = (int_64)0
	*($4 + [480]) = (int_64)0
	*($4 + [472]) = ($2 + $7)
	*($4 + [464]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[3]), [9116])
	CALL memcpy(($4 + [480]), $2, [4])
	*($4 + [468]) = ($2 + [4])
	$8 = (($4 + [480]) | [4])
	CALL $66(($4 + [464]), $8)
	$3 = *($4 + [472])
	*((($4 + [16]) + [8])) = $3
	*(($4 + [8])) = $3
	$9 = *($4 + [464])
	*($4) = $9
	*($4 + [16]) = $9
	CALL $63(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$10 = *($4 + [480])
	$8 = CALL $98(($4 + [496]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$5 = CALL $98(($4 + [512]), $8)
	CALL void $3((int_32 $10), (int_32 $5), (int_32 $6))
	if ( (*($4 + [512]) & [1]) ){ goto $label$12 }
	if ( (*($4 + [496]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [496]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = [1]
	if ( (*($4 + [484]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $125($2)
	$2 = [1]
	if ( ((*($4 + [484]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [492])))
	$global$0 = ($4 + [528])
	return $2
	
.LABEL $label$6
	$global$0 = ($4 + [528])
	return $2
}

int_32 .FUNC $63 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	*(($5 = (($4 + [96]) + [8]))) = *(($3 + [8]))
	*($4 + [96]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [112]) + [8])) = $3
	$2 = *($4 + [96])
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [112]) = $2
	*($0 + [28]) = [5]
	CALL memcpy(($0 + [32]), [9784], [96])
	*($0 + [128]) = (int_64)42949672960
	*($0 + [136]) = (int_64)214748364800
	*($4 + [88]) = [9880]
	*($4 + [92]) = CALL $119([9880])
	*($4 + [40]) = *($4 + [88])
	CALL $27(($0 + [144]), ($4 + [40]))
	*($4 + [80]) = [9893]
	*($4 + [84]) = CALL $119([9893])
	*($4 + [32]) = *($4 + [80])
	CALL $27(($0 + [152]), ($4 + [32]))
	*($4 + [72]) = [9906]
	*($4 + [76]) = CALL $119([9906])
	*($4 + [24]) = *($4 + [72])
	CALL $27(($0 + [160]), ($4 + [24]))
	*($4 + [64]) = [9919]
	*($4 + [68]) = CALL $119([9919])
	*($4 + [16]) = *($4 + [64])
	CALL $27(($0 + [168]), ($4 + [16]))
	*($4 + [56]) = [9932]
	*($4 + [60]) = CALL $119([9932])
	*($4 + [8]) = *($4 + [56])
	CALL $27(($0 + [176]), ($4 + [8]))
	*($4 + [48]) = [9945]
	*($4 + [52]) = CALL $119([9945])
	*($4) = *($4 + [48])
	CALL $27(($0 + [184]), $4)
	$3 = CALL $119([9958])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9966])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [9957]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10011])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)4
	
.LABEL $label$1
	*($0 + [192]) = $2
	$3 = CALL $119([9962])
	if ( ($3 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [9966])
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = (int_64)0
	
.LOOP $label$11:
	$5 = *(($3 + [9961]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [10011])
	
.LABEL $label$12
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$11 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$7 
	
.LABEL $label$8
	$2 = (int_64)4
	
.LABEL $label$7
	*($0 + [208]) = (int_64)1
	*($0 + [200]) = $2
	*($0 + [216]) = (int_64)2
	*($0 + [224]) = (int_64)3
	*($0 + [232]) = (int_64)4
	*($0 + [240]) = (int_64)5
	*($0 + [248]) = (int_64)6
	*($0 + [256]) = (int_64)7
	*($0 + [264]) = (int_64)1000
	*($0 + [272]) = (int_64)1876229168740434280
	*($0 + [280]) = (int_64)701950
	*(($0 + [416])) = [1]
	$global$0 = ($4 + [128])
	return $0
}

int_32 .FUNC $62 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [480])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [472]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9116])
	CALL memcpy(($4 + [472]), $2, [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	CALL $63(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [472])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $125($2)
	
.LABEL $label$6
	$global$0 = ($4 + [480])
	return [1]
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $101($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $104($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $101($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $122($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10064])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $122($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9116])
	CALL memcpy(($2 + [88]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9116])
	CALL memcpy(($0 + [92]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9116])
	CALL memcpy(($0 + [96]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy(($0 + [104]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [9116])
	CALL memcpy(($3 + [48]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9116])
	CALL memcpy(($4 + [80]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9116])
	CALL memcpy(($4 + [84]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9116])
	CALL memcpy(($4 + [85]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($2 + [8]) = $4
	CALL $88(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9018])
	CALL memcpy(*($3 + [4]), ($2 + [88]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9018])
	CALL memcpy(*($3 + [4]), ($0 + [92]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9018])
	CALL memcpy(*($3 + [4]), ($0 + [96]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($1 + [4]), ($0 + [104]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [9018])
	CALL memcpy(*($4 + [4]), ($3 + [48]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9018])
	CALL memcpy(*($0 + [4]), ($4 + [80]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [9018])
	CALL memcpy(*($0 + [4]), ($4 + [84]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [9018])
	CALL memcpy(*($0 + [4]), ($4 + [85]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($2 + [8]) = $4
	CALL $86(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [32]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [40]), [4])
	$3 = (*($4 + [4]) + [4])
	*($4 + [4]) = $3
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[3]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [44]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	*($2 + [8]) = $0
	CALL $85(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9018])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9018])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [36]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [40]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [48]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [36]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9018])
	CALL memcpy(*($4 + [4]), ($0 + [40]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $108($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9018])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9018])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9018])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9018])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9018])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9018])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9018])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9018])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $72(CALL $73($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9018])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9018])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $72($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9626])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $46($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9116])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $108($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$8 = ($7 + ($6 << [4]))
	$9 = ($7 + ($3 << [4]))
	$6 = $9
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$10 = ($9 + ($1 << [4]))
	$6 = *($0)
	$11 = ($0 + [4])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$10 }
	$13 = (($3 + [-1]) - uint_32((($12 + [-16]) - $6) >> [4]))
	$14 = ($6 - $12)
	$6 = [0]
	
.LOOP $label$11:
	*(($3 = (($2 = ($9 + $6)) + [-12]))) = (int_64)0
	*(($4 = ($2 + [-4]))) = [0]
	$1 = ($12 + $6)
	$5 = ($1 + [-12])
	*($3) = *($5)
	$3 = ($1 + [-4])
	*($4) = *($3)
	*(($2 + [-16])) = *(($1 + [-16]))
	*($3) = [0]
	*($5) = (int_64)0
	$6 = ($6 + [-16])
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$11 }
	$9 = ($7 + ($13 << [4]))
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $6
	
.LABEL $label$9
	*($0) = $9
	*($11) = $10
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($6 + [-16])
	$1 = *(($6 + [-12]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	(unreachable)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [64])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [9116])
	CALL memcpy(($1 + [72]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [9116])
	CALL memcpy(($1 + [76]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [9116])
	CALL memcpy(($1 + [80]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [9116])
	CALL memcpy(($1 + [84]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [9116])
	CALL memcpy(($1 + [88]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [9116])
	CALL memcpy(($1 + [92]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [9116])
	CALL memcpy(($1 + [96]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $108($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $46(($7 + [28]), [53])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $82(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	$3 = ($global$0 - [320])
	$global$0 = $3
	CALL require_auth(*($0 + [184]))
	*((($3 + [280]) + [32])) = [0]
	*($3 + [296]) = (int_64)-1
	*($3 + [304]) = (int_64)0
	$4 = *($0 + [144])
	*($3 + [280]) = $4
	*($3 + [288]) = $4
	$4 = (CASTING uint_64)(uint_32 $1)
	$1 = CALL $37(($3 + [280]), $4, [8221])
	*(($5 = (($3 + [264]) + [8]))) = *(($1 + [32]))
	*($3 + [264]) = *($1 + [24])
	$6 = *($1 + [16])
	$7 = *($1 + [8])
	$8 = *($1 + [40])
	$9 = *($1 + [48])
	$10 = *($1 + [56])
	$2 = CALL $98(($3 + [208]), $2)
	CALL $38(($3 + [224]), ($0 + [288]), $2)
	$1 = ($0 + [144])
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$11 = *($3 + [231])
	$12 = *($3 + [230])
	$13 = *($3 + [229])
	$14 = *($3 + [228])
	$15 = *($3 + [227])
	$16 = *($3 + [226])
	$17 = *($3 + [225])
	$18 = *($3 + [224])
	*(($0 = (($3 + [192]) + [8]))) = *($5)
	*($3 + [192]) = *($3 + [264])
	$19 = CALL current_time()
	*((($3 + [128]) + [28])) = (int_64)0
	*(($3 + [172])) = (int_64)0
	*(($3 + [180])) = (int_64)0
	*($3 + [140]) = [0]
	*($3 + [144]) = [0]
	*($3 + [148 align=4]) = (int_64)0
	*($3 + [164 align=4]) = (int_64)0
	*($3 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$19 / (uint_64)(int_64)1000000)) + [60])
	$19 = *($1)
	*($3 + [96]) = [8567]
	*($3 + [100]) = CALL $119([8567])
	*($3 + [8]) = *($3 + [96])
	$2 = CALL $27(($3 + [104]), ($3 + [8]))
	*($3 + [112]) = $19
	*($3 + [120]) = *($2)
	*($3 + [80]) = [8591]
	*($3 + [84]) = CALL $119([8591])
	*($3) = *($3 + [80])
	$2 = CALL $27(($3 + [88]), $3)
	*((($3 + [16]) + [24])) = *($0)
	*($3 + [24]) = $6
	*($3 + [16]) = $7
	*($3 + [48]) = $8
	*($3 + [52]) = $9
	*($3 + [56]) = ((int_64)$11 + (int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)$17 << (int_64)48) | (int_64)((int_64)$18 << (int_64)56)) | (int_64)((int_64)$16 << (int_64)40)) | (int_64)((int_64)$15 << (int_64)32)) | (int_64)((int_64)$14 << (int_64)24)) | (int_64)((int_64)$13 << (int_64)16)) | (int_64)((int_64)$12 << (int_64)8)))
	*($3 + [64]) = $10
	*($3 + [32]) = *($3 + [192])
	CALL $39(($3 + [164]), ($3 + [112]), $1, $2, ($3 + [16]))
	$6 = *($1)
	*($3 + [148]) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = $4
	CALL $29(($3 + [112]), ($3 + [128]))
	$1 = *($3 + [112])
	CALL send_deferred(($3 + [16]), $6, $1, (*($3 + [116]) - $1), [0])
	$1 = *($3 + [112])
	if ( ($1 == 0) ){ goto $label$2 }
	*($3 + [116]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$0 = *((($3 + [280]) + [28]))
	$5 = *((($3 + [280]) + [24]))
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$7:
	$1 = ($0 + [-24])
	$2 = *($1)
	if ( ((int_64)*($2) == (int_64)$4) ){ goto $label$6 }
	$0 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)($3 + [280])), [9172])
	goto $label$4 
	
.LABEL $label$5
	$1 = CALL db_find_i64(*($3 + [280]), *(($3 + [288])), (int_64)-2189422967043129344, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $7(($3 + [280]), $1)
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)($3 + [280])), [9172])
	
.LABEL $label$4
	CALL eosio_assert([1], [9414])
	CALL eosio_assert([1], [9448])
	$1 = CALL db_next_i64(*($2 + [68]), ($3 + [16]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$8 }
	CALL $7(($3 + [280]), $1)
	
.LABEL $label$8
	CALL $8(($3 + [280]), $2)
	
.LABEL $label$3
	CALL $30(($3 + [128]))
	$2 = *($3 + [304])
	if ( ($2 == 0) ){ goto $label$9 }
	$5 = ($3 + [308])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$11 }
	
.LOOP $label$12:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$13 }
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$12 }
	$1 = *(($3 + [304]))
	goto $label$10 
	
.LABEL $label$11
	$1 = $2
	
.LABEL $label$10
	*($5) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [320])
}

int_32 .FUNC $37 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$0), [9172])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2189422967043129344, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $7($0, $4)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$0), [9172])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[40])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[40]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $108($0)
	
.LABEL $label$1
	$7 = ($2 + ((int_32)$6 * (int_32)[40]))
	$8 = ($2 + ((int_32)$3 * (int_32)[40]))
	$6 = $8
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$9 = ($8 + ((int_32)$1 * (int_32)[40]))
	$6 = *($0)
	$10 = *(($0 + [4]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$9 }
	$11 = ($6 - $10)
	$1 = [0]
	
.LOOP $label$10:
	$2 = ($10 + $1)
	*((($6 = ($8 + $1)) + [-32])) = *(($2 + [-32]))
	*(($6 + [-40])) = *(($2 + [-40]))
	*(($3 = ($6 + [-24]))) = (int_64)0
	*(($4 = ($6 + [-16]))) = [0]
	$5 = ($2 + [-24])
	*($3) = *($5)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($6 + [-12]))) = (int_64)0
	*(($6 = ($6 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($5) = (int_64)0
	$2 = ($2 + [-4])
	*($6) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$10 }
	$8 = ($8 + $1)
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$3 = $6
	
.LABEL $label$8
	*($0) = $8
	*(($0 + [4])) = $9
	*(($0 + [8])) = $7
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = *(($6 + [-12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($6 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$2 = ($6 + [-40])
	$1 = *(($6 + [-24]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9626])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $80($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [9116])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$7 = ($global$0 - [128])
	$global$0 = $7
	*(($7 + [32])) = [0]
	*($7 + [16]) = (int_64)-1
	$8 = (int_64)0
	*($7 + [24]) = (int_64)0
	$9 = *($0 + [144])
	*($7) = $9
	*($7 + [8]) = $9
	$10 = CALL db_lowerbound_i64($9, $9, (int_64)-2189422967043129344, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $7($7, $10)
	*($7 + [52]) = [0]
	*($7 + [48]) = $7
	$9 = *(*(CALL $33(($7 + [48])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$11 = (uint_64)($8 <= (int_64)-2)
	goto $label$1 
	
.LABEL $label$2
	$11 = [1]
	
.LABEL $label$1
	*(($10 = ($7 + [16]))) = $8
	CALL eosio_assert($11, [9630])
	$9 = *($10)
	$8 = *($0)
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$3()), [9121])
	*(($0 = CALL _Znwj([80])) + [64]) = $7
	*($0 + [8]) = $1
	*($0) = $9
	*($0 + [16]) = $2
	*($0 + [40]) = $4
	*($0 + [48]) = (CASTING uint_64)(uint_32 $5)
	*($0 + [56]) = $6
	*($0 + [24]) = *($3)
	*(($0 + [32])) = *(($3 + [8]))
	*($7 + [120]) = (($7 + [48]) + [60])
	*($7 + [116]) = ($7 + [48])
	*($7 + [112]) = ($7 + [48])
	CALL $34(($7 + [112]), $0)
	$9 = *($0)
	$3 = CALL db_store_i64(*(($7 + [8])), (int_64)-2189422967043129344, $8, $9, ($7 + [48]), [60])
	*($0 + [68]) = $3
	if ( (uint_64)($9 <= *($10)) ){ goto $label$3 }
	*($10) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($7 + [112]) = $0
	$9 = *($0)
	*($7 + [48]) = $9
	*($7 + [44]) = $3
	$4 = ($7 + [28])
	$10 = *($4)
	if ( ((uint_32)$10 >= (uint_32)*(($7 + [32]))) ){ goto $label$6 }
	*($10 + [8]) = $9
	*($10 + [16]) = $3
	*($7 + [112]) = [0]
	*($10) = $0
	*($4) = ($10 + [24])
	$0 = *($7 + [112])
	*($7 + [112]) = [0]
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $35(($7 + [24]), ($7 + [112]), ($7 + [48]), ($7 + [44]))
	$0 = *($7 + [112])
	*($7 + [112]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$3 = *($7 + [24])
	if ( ($3 == 0) ){ goto $label$7 }
	$4 = ($7 + [28])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$10 = *($0)
	*($0) = [0]
	if ( ($10 == 0) ){ goto $label$11 }
	CALL _ZdlPv($10)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($7 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $3
	
.LABEL $label$8
	*($4) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$7
	$global$0 = ($7 + [128])
}

int_32 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [68]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9736])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-2189422967043129344)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9682])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9682])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $7(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9116])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9116])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $66($0, ($1 + [32]))
	$global$0 = ($2 + [16])
	return $0
}