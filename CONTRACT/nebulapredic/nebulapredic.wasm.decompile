(data (i32.const 8192) "Ask does not exist.\00")
(data (i32.const 8212) "Share sold.\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8310) "Order was bigger.\00")
(data (i32.const 8328) "Bid does not exist.\00")
(data (i32.const 8348) "Order was bigger\00")
(data (i32.const 8365) "Market does not exist.\00")
(data (i32.const 8388) "Shares must be greater than 0\00")
(data (i32.const 8418) "Market already expired\00")
(data (i32.const 8441) "Value must be between 0 and 1\00")
(data (i32.const 8471) "you dont own shares\00")
(data (i32.const 8491) "you dont own enough shares\00")
(data (i32.const 8518) "You haven\'t paid.\00")
(data (i32.const 8536) "Not exact balance.\00")
(data (i32.const 8555) "Refunded.\00")
(data (i32.const 8565) "active\00")
(data (i32.const 8572) "transfer\00")
(data (i32.const 8581) "Order must be greater than 0.1000\00")
(data (i32.const 8615) "Please refund first\00")
(data (i32.const 8635) "Question is too long (255) or to short (10)\00")
(data (i32.const 8679) "Category is too long (32) or too short (0)\00")
(data (i32.const 8722) "Wrong type\00")
(data (i32.const 8733) "IPFS is too long (46)\00")
(data (i32.const 8755) "Reporter is not an account\00")
(data (i32.const 8782) "Market expiration cannot be past\00")
(data (i32.const 8815) "Market does not expired\00")
(data (i32.const 8839) "Account is not the reporter\00")
(data (i32.const 8867) "Winner!\00")
(data (i32.const 8875) "Account is not the creator\00")
(data (i32.const 8902) "Market has shares already\00")
(data (i32.const 8928) "nebulatokenn\00")
(data (i32.const 8941) "cannot decrement end iterator when the index is empty\00")
(data (i32.const 8995) "cannot decrement iterator at beginning of index\00")
(data (i32.const 9043) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9094) "error reading iterator\00")
(data (i32.const 9117) "read\00")
(data (i32.const 9122) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9171) "invalid symbol name\00")
(data (i32.const 9191) "string is too long to be a valid name\00")
(data (i32.const 9229) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9296) "character is not in allowed character set for names\00")
(data (i32.const 9348) "write\00")
(data (i32.const 9354) "object passed to modify is not in multi_index\00")
(data (i32.const 9400) "cannot modify objects in table of another contract\00")
(data (i32.const 9451) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9510) "Not able to fill shares\00")
(data (i32.const 9534) "Order does not exist.\00")
(data (i32.const 9556) "share not found\00")
(data (i32.const 9572) "no orders to fulfill\00")
(data (i32.const 9593) "Return non fulfilled order.\00")
(data (i32.const 9621) "object passed to erase is not in multi_index\00")
(data (i32.const 9666) "cannot erase objects in table of another contract\00")
(data (i32.const 9716) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9769) "cannot pass end iterator to modify\00")
(data (i32.const 9804) "cannot pass end iterator to erase\00")
(data (i32.const 9838) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9890) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9944) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9992) "cannot create objects in table of another contract\00")
(data (i32.const 10043) "cannot increment end iterator\00")
(data (i32.const 10073) "get\00")
(data (i32.const 10077) "Order is not yours.\00")
(data (i32.const 10097) "Cancel order.\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "current_time" (func $fimport$2 (result i64)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_update_i64" (func $fimport$4 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$5 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$6 (param i32 i64 i32)))
(import "env" "memcpy" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$11 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$12 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$14 (param i32)))
(import "env" "db_store_i64" (func $fimport$15 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$16 (param i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$18 (result i32)))
(import "env" "read_action_data" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_idx64_previous" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_idx64_end" (func $fimport$21 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$23))
(import "env" "db_idx64_remove" (func $fimport$24 (param i32)))
(import "env" "db_previous_i64" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$26 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$27 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "memset" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$30 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$39 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$40 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$41 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$42 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$43 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$45 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$46 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$47 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$48 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$49 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $58))
(export "_Znwj" (func $88))
(export "_ZdlPv" (func $90))
(export "_Znaj" (func $89))
(export "_ZdaPv" (func $91))
(export "_ZnwjSt11align_val_t" (func $92))
(export "_ZnajSt11align_val_t" (func $93))
(export "_ZdlPvSt11align_val_t" (func $94))
(export "_ZdaPvSt11align_val_t" (func $95))
(table $0 10 10 anyfunc)
(elem (i32.const 1) $55 $49 $46 $1 $51 $48 $44 $30 $56)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18528))
(global $global$2 i32 (i32.const 18528))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $99($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $111($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $96 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $111($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $106(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10112])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $106(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [9992])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [48]) = $1
	*($3 + [16]) = (int_64)0
	CALL $77(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $49 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [96])
	$global$0 = $5
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$1 }
	*((($5 + [16]) + [32])) = [0]
	*($5 + [32]) = (int_64)-1
	*($5 + [40]) = (int_64)0
	$6 = *($3 + [8])
	*($5 + [24]) = $1
	*($5 + [16]) = $2
	$7 = [1]
	$8 = CALL db_find_i64($2, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$8) < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $43(($5 + [16]), $8) + [16]) == (int_32)($5 + [16])), [9043])
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert(((uint_64)*($3) > (uint_64)(int_64)999), [8581])
	CALL eosio_assert($7, [8615])
	$1 = *($0)
	*(($0 = ($5 + [8]))) = *(($3 + [8]))
	*($5) = *($3)
	CALL eosio_assert(((int_64)*($5 + [16]) == (int_64)CALL $fimport$3()), [9992])
	*(($3 = CALL _Znwj([32])) + [16]) = ($5 + [16])
	*($3 + [8]) = *($0)
	*($3) = *($5)
	CALL eosio_assert([1], [9348])
	CALL memcpy(($5 + [64]), $3, [8])
	*($5 + [88]) = *($3 + [8])
	CALL eosio_assert([1], [9348])
	CALL memcpy((($5 + [64]) | [8]), ($5 + [88]), [8])
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*((($5 + [16]) + [8])), (int_64)3607749779137757184, $1, $2), ($5 + [64]), [16]
	*($3 + [20]) = $7)
	$0 = (($5 + [16]) + [16])
	if ( (uint_64)($2 <= *($0)) ){ goto $label$3 }
	*($0) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$3
	*($5 + [88]) = $3
	$2 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8
	*($5 + [64]) = $2)
	*($5 + [60]) = $7
	$8 = ($5 + [44])
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)*(($5 + [48]))) ){ goto $label$6 }
	*($0 + [8]) = $2
	*($0 + [16]) = $7
	*($5 + [88]) = [0]
	*($0) = $3
	*($8) = ($0 + [24])
	$3 = *($5 + [88])
	*($5 + [88]) = [0]
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $50(($5 + [40]), ($5 + [88]), ($5 + [64]), ($5 + [60]))
	$3 = *($5 + [88])
	*($5 + [88]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$7 = *($5 + [40])
	if ( ($7 == 0) ){ goto $label$1 }
	$8 = ($5 + [44])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($5 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $7
	
.LABEL $label$7
	*($8) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($5 + [96])
}

void .FUNC $48 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL require_auth($1)
	*(($3 + [88])) = [0]
	*($3 + [64]) = $1
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	*($3 + [56]) = *($0)
	$2 = CALL $40(($3 + [56]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8), [8518]
	CALL $41(($3 + [56]), $2))
	$4 = *($2)
	$5 = *(($2 + [8]))
	*((($3 + [24]) + [8])) = [0]
	*((($3 + [40]) + [8])) = $5
	*($3 + [24]) = (int_64)0
	*($3 + [40]) = $4
	$4 = *($0)
	$0 = CALL $105([8555])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*($3 + [24]) = ($0 << [1])
	$2 = (($3 + [24]) | [1])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($0 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($3 + [24]) = ($6 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $0
	
.LABEL $label$3
	CALL memcpy($2, [8555], $0)
	
.LABEL $label$2
	*(($2 + $0)) = [0]
	*((($3 + [8]) + [8])) = *((($3 + [40]) + [8]))
	*($3 + [8]) = *($3 + [40])
	CALL $10($0, $4, $1, ($3 + [8]), ($3 + [24]))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($3 + [32]))
	
.LABEL $label$5
	$6 = *($3 + [80])
	if ( ($6 == 0) ){ goto $label$6 }
	$7 = ($3 + [84])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($3 + [80]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $6
	
.LABEL $label$7
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$global$0 = ($3 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $96(($3 + [24]))
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9094])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $108($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9117])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9117])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $50(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $111($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9094])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $108($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [60]) = [0]
	*($5 + [76]) = $0
	CALL $80(($3 + [32]), $5)
	*($5 + [80]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $54(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $111($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [52]) & [1]) ){ goto $label$14 }
	if ( (*($1 + [36]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [60])))
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [44])))
	if ( (*($1 + [24]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9621])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9666])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9716])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $40 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9043])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $43($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9043])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $47 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL require_auth($1)
	$5 = [0]
	*(($4 + [88])) = [0]
	*($4 + [64]) = $2
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	*($4 + [92]) = [0]
	*($4 + [56]) = *($0)
	$6 = CALL $33(($4 + [56]), $3, [9534])
	CALL eosio_assert(((int_64)*($6 + [16]) == (int_64)$1), [10077])
	CALL $35(($4 + [56]), $6)
	*($4 + [48]) = (int_64)1111838212
	$3 = ((int_64)((int_64)*($6 + [24]) * (int_64)*($6 + [32])) * (int_64)100)
	*($4 + [40]) = $3
	$7 = *($0)
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9122])
	$3 = (int_64)4343118
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $2
	$6 = [1]
	$0 = $5
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $2
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$0 = ($5 + [1])
	$5 = $0
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9171])
	*(($4 + [32])) = [0]
	*($4 + [24]) = (int_64)0
	$5 = CALL $105([10097])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	*($4 + [24]) = ($5 << [1])
	$6 = (($4 + [24]) | [1])
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$0 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($0)
	*($4 + [24]) = ($0 | [1])
	*($4 + [32]) = $6
	*($4 + [28]) = $5
	
.LABEL $label$8
	CALL memcpy($6, [10097], $5)
	
.LABEL $label$7
	*(($6 + $5)) = [0]
	*((($4 + [8]) + [8])) = *((($4 + [40]) + [8]))
	*($4 + [8]) = *($4 + [40])
	CALL $10($5, $7, $1, ($4 + [8]), ($4 + [24]))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($4 + [32]))
	
.LABEL $label$10
	$0 = *($4 + [80])
	if ( ($0 == 0) ){ goto $label$11 }
	$8 = ($4 + [84])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$15 }
	CALL _ZdlPv($6)
	
.LABEL $label$15
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($4 + [80]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $0
	
.LABEL $label$12
	*($8) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$6
	CALL $96(($4 + [24]))
}

void .FUNC $46 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	CALL $47($0, $1, $2, $3)
}

void .FUNC $45 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL require_auth($1)
	$5 = [0]
	*(($4 + [88])) = [0]
	*($4 + [64]) = $2
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	*($4 + [92]) = [0]
	*($4 + [56]) = *($0)
	$6 = CALL $7(($4 + [56]), $3, [9534])
	CALL eosio_assert(((int_64)*($6 + [16]) == (int_64)$1), [10077])
	CALL $24(($4 + [56]), $6)
	*($4 + [48]) = (int_64)1111838212
	$3 = ((int_64)((int_64)*($6 + [24]) * (int_64)*($6 + [32])) * (int_64)100)
	*($4 + [40]) = $3
	$7 = *($0)
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9122])
	$3 = (int_64)4343118
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $2
	$6 = [1]
	$0 = $5
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $2
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$0 = ($5 + [1])
	$5 = $0
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9171])
	*(($4 + [32])) = [0]
	*($4 + [24]) = (int_64)0
	$5 = CALL $105([10097])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	*($4 + [24]) = ($5 << [1])
	$6 = (($4 + [24]) | [1])
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$0 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($0)
	*($4 + [24]) = ($0 | [1])
	*($4 + [32]) = $6
	*($4 + [28]) = $5
	
.LABEL $label$8
	CALL memcpy($6, [10097], $5)
	
.LABEL $label$7
	*(($6 + $5)) = [0]
	*((($4 + [8]) + [8])) = *((($4 + [40]) + [8]))
	*($4 + [8]) = *($4 + [40])
	CALL $10($5, $7, $1, ($4 + [8]), ($4 + [24]))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($4 + [32]))
	
.LABEL $label$10
	$0 = *($4 + [80])
	if ( ($0 == 0) ){ goto $label$11 }
	$8 = ($4 + [84])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$15 }
	CALL _ZdlPv($6)
	
.LABEL $label$15
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($4 + [80]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $0
	
.LABEL $label$12
	*($8) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$6
	CALL $96(($4 + [24]))
}

void .FUNC $44 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	CALL $45($0, $1, $2, $3)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9348])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9348])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9348])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9348])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [9348])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9348])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $101($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = (int_64)0
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$3 = *($2 + [56])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$3 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)3900539489767915520, $1, *($2))
	*(*(($0 + [4])) + [56]) = $3
	
.LABEL $label$3
	$4 = CALL db_idx64_previous($3, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8995])
	goto $label$1 
	
.LABEL $label$2
	$2 = *(*($0))
	$2 = CALL db_idx64_end(*($2), *($2 + [8]), (int_64)3900539489767915520)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8941])
	$4 = CALL db_idx64_previous($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8941])
	
.LABEL $label$1
	$5 = *($1 + [8])
	$3 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$7:
	$2 = ($3 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$6 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [9043])
	goto $label$4 
	
.LABEL $label$5
	$8 = CALL $13($6, CALL $fimport$8(*($6), *($6 + [8]), (int_64)3900539489767915520, $5))
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [9043])
	
.LABEL $label$4
	*(($0 + [4])) = $8
	*(($8 + [56])) = $4
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $7 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$0), [9043])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3900539489767915520, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $13($0, $4)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$0), [9043])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [44])))
	if ( (*($3 + [24]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)3900539489767915520, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [9043])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $13($7, CALL $fimport$8(*($7), *($7 + [8]), (int_64)3900539489767915520, $6))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [9043])
	
.LABEL $label$2
	*(($4 + [56])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $2 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	$7 = ($global$0 - [80])
	$global$0 = $7
	*($7 + [72]) = $1
	if ( ($5 == 0) ){ goto $label$6 }
	$5 = [0]
	*(($7 + [64])) = [0]
	*($7 + [40]) = $2
	*($7 + [48]) = (int_64)-1
	*($7 + [56]) = (int_64)0
	*($7 + [68]) = [0]
	*($7 + [32]) = *($0)
	*($7 + [24]) = ($7 + [32])
	CALL $18(($7 + [16]), ($7 + [24]), ($7 + [72]))
	CALL $19(($7 + [8]), ($7 + [24]), ($7 + [72]))
	$0 = [0]
	$8 = *($7 + [20])
	if ( ((int_32)$8 == (int_32)*($7 + [12])) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = [0]
	if ( ((int_32)*($8 + [28]) != (int_32)$6) ){ goto $label$9 }
	$0 = *($8 + [24])
	$5 = [1]
	
.LABEL $label$9
	CALL $21(($7 + [16]))
	if ( $5 ){ goto $label$7 }
	$8 = *($7 + [20])
	if ( ((int_32)$8 != (int_32)*($7 + [12])) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($5, [8471])
	CALL eosio_assert(((uint_32)$0 >= (uint_32)$4), [8491])
	$6 = *($7 + [56])
	if ( ($6 == 0) ){ goto $label$3 }
	$0 = ($7 + [60])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$11 }
	CALL _ZdlPv($8)
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($7 + [56]))
	goto $label$4 
	
.LABEL $label$6
	$9 = ((int_64)((int_64)$3 * (int_64)(CASTING uint_64)(uint_32 $4)) * (int_64)100)
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9122])
	$2 = (int_64)4343118
	$5 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$2 = $3
	$8 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$2 = $3
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $8 ){ goto $label$16 }
	$8 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$8 = [0]
	
.LABEL $label$12
	CALL eosio_assert($8, [9171])
	*(($7 + [64])) = [0]
	*($7 + [40]) = $1
	*($7 + [48]) = (int_64)-1
	*($7 + [56]) = (int_64)0
	*($7 + [32]) = *($0)
	$5 = CALL $40(($7 + [32]), (int_64)4343118, [8518])
	CALL eosio_assert(((int_64)$9 == (int_64)*($5)), [8536])
	CALL $41(($7 + [32]), $5)
	$6 = *($7 + [56])
	if ( ($6 == 0) ){ goto $label$3 }
	$0 = ($7 + [60])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$17:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$18 }
	CALL _ZdlPv($8)
	
.LABEL $label$18
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$17 }
	$5 = *(($7 + [56]))
	goto $label$1 
	
.LABEL $label$5
	$5 = $6
	
.LABEL $label$4
	*($0) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$global$0 = ($7 + [80])
	return 
	
.LABEL $label$2
	$5 = $6
	
.LABEL $label$1
	*($0) = $6
	CALL _ZdlPv($5)
	$global$0 = ($7 + [80])
}

int_32 .FUNC $3 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(($6 + [76])) == (int_32)$0), [9043])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-7949128877345865728, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $42($0, $4)
	CALL eosio_assert(((int_32)*($5 + [76]) == (int_32)$0), [9043])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	$7 = ($global$0 - [304])
	$global$0 = $7
	CALL require_auth($1)
	CALL $2($0, $1, $2, $3, $4, $6, [1])
	$8 = [0]
	*((($7 + [208]) + [32])) = [0]
	*($7 + [224]) = (int_64)-1
	*($7 + [232]) = (int_64)0
	$9 = *($0)
	*($7 + [208]) = $9
	*($7 + [216]) = $9
	$10 = CALL $3(($7 + [208]), $2, [8365])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8388])
	CALL eosio_assert(((uint_32)*($10 + [68]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$2() / (uint_64)(int_64)1000000))), [8418])
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)-1) <= (int_64)99), [8441])
	CALL $4((($7 + [208]) + [24]))
	*((($7 + [168]) + [32])) = [0]
	*($7 + [176]) = $2
	*($7 + [184]) = (int_64)-1
	*($7 + [192]) = (int_64)0
	*($7 + [204]) = [0]
	*($7 + [168]) = *($0)
	*($7 + [160]) = ($7 + [168])
	*($7 + [152]) = [0]
	*($7 + [144]) = (int_64)0
	*((($7 + [120]) + [8])) = [0]
	*(($11 = (($7 + [120]) + [16]))) = [0]
	*($7 + [124]) = ($7 + [160])
	*($7 + [132]) = ($7 + [160])
	*($7 + [208]) = (int_64)0
	CALL $5(($7 + [264]), ($7 + [160]), ($7 + [208]))
	$12 = *($7 + [268])
	if ( ($12 == 0) ){ goto $label$2 }
	$13 = (int_64))((int_64)100 - $3)
	$14 = ($7 + [132])
	$15 = (($7 + [88]) | [1])
	$16 = (($7 + [56]) | [1])
	$17 = (($7 + [208]) + [44])
	$18 = (($7 + [264]) + [8])
	$19 = (($7 + [168]) + [16])
	$20 = $4
	
.LOOP $label$5:
	*($7 + [208]) = *($14)
	if ( (uint_64)(*(*(CALL $6(($7 + [208])) + [4]) + [24]) <= $13) ){ goto $label$9 }
	*($7 + [208]) = *($14)
	$8 = *(*(CALL $6(($7 + [208])) + [4]) + [32])
	*($7 + [208]) = *($14)
	$10 = *(CALL $6(($7 + [208])) + [4])
	if ( ((uint_32)$20 >= (uint_32)$8) ){ goto $label$18 }
	$8 = CALL $7(($7 + [168]), *($10), [8192])
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($7 + [168])), [9354])
	CALL eosio_assert(((int_64)*($7 + [168]) == (int_64)CALL $fimport$3()), [9400])
	*($8 + [32]) = (*($8 + [32]) - $20)
	$10 = ($8 + [24])
	*($7 + [280]) = *($10)
	$9 = *($8)
	CALL eosio_assert([1], [9451])
	*($18) = $17
	*($7 + [268]) = ($7 + [208])
	*($7 + [264]) = ($7 + [208])
	CALL $8(($7 + [264]), $8)
	CALL db_update_i64(*($8 + [52]), (int_64)0, ($7 + [208]), [44])
	if ( (uint_64)($9 <= *($19)) ){ goto $label$19 }
	*($19) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	*($7 + [296]) = *($10)
	if ( (CALL $104(($7 + [280]), ($7 + [296]), [8]) == 0) ){ goto $label$20 }
	$21 = ($8 + [56])
	$8 = *($21)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$21 }
	$8 = CALL db_idx64_find_primary(*($7 + [168]), *((($7 + [168]) + [8])), (int_64)3900539489767915520, ($7 + [288]), $9)
	*($21) = $8
	
.LABEL $label$21
	CALL db_idx64_update($8, (int_64)0, ($7 + [296]))
	
.LABEL $label$20
	if ( ($6 == 0) ){ goto $label$17 }
	*(($22 = (($7 + [104]) + [8]))) = (int_64)1111838212
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $20) * (int_64)*($10)) * (int_64)100)
	*($7 + [104]) = $9
	$23 = *($0)
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9122])
	$9 = (int_64)4343118
	$8 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$24 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$9 = $24
	$10 = [1]
	$21 = $8
	$8 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$22 }
	goto $label$15 
	
.LABEL $label$23
	$9 = $24
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$21 = ($8 + [1])
	$8 = $21
	if ( $10 ){ goto $label$24 }
	$10 = [1]
	$8 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$22 }
	goto $label$15 
	
.LABEL $label$18
	$8 = *($10 + [32])
	*($7 + [208]) = *($14)
	$21 = *(CALL $6(($7 + [208])) + [4])
	$10 = *($7 + [148])
	if ( ((int_32)$10 == (int_32)*((($7 + [144]) + [8]))) ){ goto $label$14 }
	*($10) = *($21)
	*($7 + [148]) = ($10 + [8])
	goto $label$13 
	
.LABEL $label$17
	$10 = [0]
	$22 = [1]
	$8 = $20
	goto $label$7 
	
.LABEL $label$16
	$10 = [0]
	
.LABEL $label$15
	CALL eosio_assert($10, [9171])
	*(($25 = (($7 + [88]) + [8]))) = [0]
	*($7 + [88]) = (int_64)0
	$8 = CALL $105([8212])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$12 }
	*($7 + [88]) = ($8 << [1])
	$21 = $15
	if ( $8 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$14
	CALL $9(($7 + [144]), $21)
	
.LABEL $label$13
	*($7 + [208]) = *($14)
	$10 = *(*(CALL $6(($7 + [208])) + [4]) + [32])
	*($7 + [208]) = *($14)
	$22 = ((uint_32)$20 <= (uint_32)$10)
	$10 = ($20 - *(*(CALL $6(($7 + [208])) + [4]) + [32]))
	if ( $6 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$12
	$10 = (($8 + [16]) & [-16])
	$21 = CALL _Znwj($10)
	*($25) = $21
	*($7 + [88]) = ($10 | [1])
	*($7 + [92]) = $8
	
.LABEL $label$11
	CALL memcpy($21, [8212], $8)
	
.LABEL $label$10
	$10 = [0]
	*(($21 + $8)) = [0]
	*((($7 + [24]) + [8])) = *($22)
	*($7 + [24]) = *($7 + [104])
	CALL $10($8, $23, $1, ($7 + [24]), ($7 + [88]))
	$22 = [1]
	if ( (*($7 + [88]) & [1]) ){ goto $label$25 }
	$8 = $20
	if ( ($6 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$25
	CALL _ZdlPv(*($25))
	$8 = $20
	if ( ($6 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$22 = [0]
	goto $label$4 
	
.LABEL $label$8
	CALL $96(($7 + [88]))
	
.LABEL $label$7
	CALL $11($0, $1, $1, $2, $8, [0])
	
.LABEL $label$6
	$20 = $10
	*($7 + [208]) = *($14)
	CALL $11($0, *(*(CALL $6(($7 + [208])) + [4]) + [16]), $1, $2, $8, [1])
	*($7 + [208]) = *($14)
	if ( ((uint_64)*(*(CALL $6(($7 + [208])) + [4]) + [24]) <= (uint_64)$13) ){ goto $label$26 }
	if ( $6 ){ goto $label$26 }
	*($7 + [208]) = *($14)
	$9 = *(*(CALL $6(($7 + [208])) + [4]) + [24])
	*($7 + [208]) = *($14)
	$8 = *(CALL $6(($7 + [208])) + [4])
	*(($25 = (($7 + [72]) + [8]))) = (int_64)1111838212
	$9 = ((int_64)((int_64))($9 - $13) * (int_64)*($8 + [32])) * (int_64)100
	*($7 + [72]) = $9)
	$23 = *($0)
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9122])
	$9 = (int_64)4343118
	$8 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$24 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$9 = $24
	$10 = [1]
	$21 = $8
	$8 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$30
	$9 = $24
	
.LOOP $label$31:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$21 = ($8 + [1])
	$8 = $21
	if ( $10 ){ goto $label$31 }
	$10 = [1]
	$8 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$10 = [0]
	
.LABEL $label$27
	CALL eosio_assert($10, [9171])
	*(($21 = (($7 + [56]) + [8]))) = [0]
	*($7 + [56]) = (int_64)0
	$8 = CALL $105([8310])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$34 }
	*($7 + [56]) = ($8 << [1])
	$10 = $16
	if ( $8 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$26 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($26)
	*($21) = $10
	*($7 + [56]) = ($26 | [1])
	*($7 + [60]) = $8
	
.LABEL $label$33
	CALL memcpy($10, [8310], $8)
	
.LABEL $label$32
	*(($10 + $8)) = [0]
	*((($7 + [8]) + [8])) = *($25)
	*($7 + [8]) = *($7 + [72])
	CALL $10($8, $23, $1, ($7 + [8]), ($7 + [56]))
	if ( ((*($7 + [56]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*($21))
	
.LABEL $label$26
	CALL $6($14)
	if ( (($22 | ((int_32)*($11) == (int_32)$12)) == 0) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = *($7 + [144])
	$10 = *($7 + [148])
	goto $label$1 
	
.LABEL $label$3
	CALL $96(($7 + [56]))
	
.LABEL $label$2
	$10 = [0]
	$20 = $4
	$22 = [0]
	
.LABEL $label$1
	*($7 + [48]) = [0]
	*($7 + [40]) = (int_64)0
	$8 = ($10 - $8)
	if ( ($8 == 0) ){ goto $label$36 }
	$10 = int_32($8 >> [3])
	if ( ((uint_32)$10 >= (uint_32)[536870912]) ){ goto $label$35 }
	$8 = CALL _Znwj($8)
	*(($7 + [48])) = ($8 + ($10 << [3]))
	*($7 + [40]) = $8
	*($7 + [44]) = $8
	$21 = *($7 + [144])
	$10 = (*($7 + [148]) - $21)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$36 }
	CALL memcpy($8, $21, $10)
	*($7 + [44]) = (*($7 + [44]) + $10)
	
.LABEL $label$36
	CALL $12($0, $1, $2, $3, $20, $22, $5, $6, ($7 + [40]), $4)
	$8 = *($7 + [40])
	if ( ($8 == 0) ){ goto $label$37 }
	*($7 + [44]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$37
	$8 = *($7 + [144])
	if ( ($8 == 0) ){ goto $label$38 }
	*($7 + [148]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$38
	$21 = *($7 + [192])
	if ( ($21 == 0) ){ goto $label$39 }
	$14 = ($7 + [196])
	$8 = *($14)
	if ( ((int_32)$8 == (int_32)$21) ){ goto $label$41 }
	
.LOOP $label$42:
	$8 = ($8 + [-24])
	$10 = *($8)
	*($8) = [0]
	if ( ($10 == 0) ){ goto $label$43 }
	CALL _ZdlPv($10)
	
.LABEL $label$43
	if ( ((int_32)$21 != (int_32)$8) ){ goto $label$42 }
	$8 = *(($7 + [192]))
	goto $label$40 
	
.LABEL $label$41
	$8 = $21
	
.LABEL $label$40
	*($14) = $21
	CALL _ZdlPv($8)
	
.LABEL $label$39
	$global$0 = ($7 + [304])
	return (unreachable)
	
.LABEL $label$35
	CALL $101(($7 + [40]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9191])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9296])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9229])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9296])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $101($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9348])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9348])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9348])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9348])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $84(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $15($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9348])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9348])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $75(CALL $74($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$5 = ($global$0 - [160])
	$global$0 = $5
	if ( (int_64)(*($3) == 0) ){ goto $label$1 }
	*($5 + [88]) = [8565]
	*($5 + [92]) = CALL $105([8565])
	*($5 + [16]) = *($5 + [88])
	$6 = *(CALL $14(($5 + [40]), ($5 + [16])))
	*($5 + [88]) = [8572]
	*($5 + [92]) = CALL $105([8572])
	*($5 + [8]) = *($5 + [88])
	$7 = *(CALL $14(($5 + [40]), ($5 + [8])))
	$4 = CALL $97(($5 + [24]), $4)
	*((($5 + [40]) + [24])) = *(($3 + [8]))
	$8 = *((($5 + [24]) + [8]))
	$9 = *($5 + [24])
	*($4) = (int_64)0
	*($4 + [8]) = [0]
	*(($5 + [80])) = $8
	*($5 + [48]) = $2
	*($5 + [40]) = $1
	*($5 + [88]) = (int_64)-7309438285644650704
	*($5 + [96]) = $7
	*($5 + [56]) = *($3)
	*($5 + [72]) = $9
	*(($3 = CALL _Znwj([16]))) = $1
	*($3 + [8]) = $6
	*((($5 + [88]) + [36])) = [0]
	$8 = ($3 + [16])
	*((($5 + [88]) + [24])) = $8
	*(($5 + [108])) = $8
	*($5 + [104]) = $3
	*($5 + [116 align=4]) = (int_64)0
	$3 = *($5 + [72])
	$8 = ( *((($5 + [40]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [32])
	$1 = (CASTING uint_64)(uint_32 $8)
	$8 = ($5 + [116])
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$2 }
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $15($8, $3)
	$8 = *(($5 + [120]))
	$3 = *(($5 + [116]))
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$3 = [0]
	
.LABEL $label$3
	*($5 + [148]) = $3
	*($5 + [144]) = $3
	*($5 + [152]) = $8
	*($5 + [128]) = ($5 + [144])
	*($5 + [136]) = ($5 + [40])
	CALL $16(($5 + [136]), ($5 + [128]))
	CALL $17(($5 + [144]), ($5 + [88]))
	$3 = *($5 + [144])
	CALL send_inline($3, (*($5 + [148]) - $3))
	$3 = *($5 + [144])
	if ( ($3 == 0) ){ goto $label$5 }
	*($5 + [148]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$3 = *($5 + [116])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($5 + [120])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$3 = *($5 + [104])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($5 + [108])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((*(($5 + [72])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($5 + [80])))
	
.LABEL $label$8
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$1
	$global$0 = ($5 + [160])
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = ($global$0 - [176])
	$global$0 = $6
	*($6 + [80]) = $3
	*($6 + [88]) = $1
	*($6 + [76]) = $4
	*($6 + [72]) = $5
	*((($6 + [32]) + [32])) = [0]
	*($6 + [40]) = $3
	*($6 + [48]) = (int_64)-1
	*($6 + [56]) = (int_64)0
	*($6 + [68]) = [0]
	*($6 + [32]) = *($0)
	*($6 + [24]) = ($6 + [32])
	CALL $18(($6 + [16]), ($6 + [24]), ($6 + [88]))
	CALL $19(($6 + [8]), ($6 + [24]), ($6 + [88]))
	$0 = *($6 + [20])
	if ( ((int_32)$0 == (int_32)*($6 + [12])) ){ goto $label$2 }
	$7 = (($6 + [96]) + [32])
	$4 = [0]
	if ( ((int_32)*($0 + [28]) != (int_32)$5) ){ goto $label$3 }
	$8 = [3]
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	$8 = [11]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$37 
	
.LABEL $label$45
	$4 = [0]
	if ( ((int_32)*($0 + [28]) != (int_32)*($6 + [72])) ){ goto $label$19 }
	$8 = [3]
	goto $label$4 
	
.LABEL $label$44
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [9769])
	$4 = *($6 + [24])
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)$4), [9354])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$3()), [9400])
	*($0 + [24]) = (*($0 + [24]) + *($6 + [76]))
	$5 = ($0 + [8])
	*($6 + [152]) = *($5)
	$3 = *($0)
	CALL eosio_assert([1], [9451])
	*((($6 + [136]) + [8])) = $7
	*($6 + [140]) = ($6 + [96])
	*($6 + [136]) = ($6 + [96])
	CALL $20(($6 + [136]), $0)
	CALL db_update_i64(*($0 + [36]), (int_64)0, ($6 + [96]), [32])
	if ( (uint_64)($3 <= *($4 + [16])) ){ goto $label$17 }
	$8 = [4]
	goto $label$4 
	
.LABEL $label$43
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$8 = [5]
	goto $label$4 
	
.LABEL $label$42
	*($6 + [168]) = *($5)
	if ( (CALL $104(($6 + [152]), ($6 + [168]), [8]) == 0) ){ goto $label$16 }
	$8 = [6]
	goto $label$4 
	
.LABEL $label$41
	$5 = ($0 + [40])
	$0 = *($5)
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$15 }
	$8 = [9]
	goto $label$4 
	
.LABEL $label$40
	$0 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-4373710607929573376, ($6 + [160]), $3)
	*($5) = $0
	$8 = [7]
	goto $label$4 
	
.LABEL $label$39
	CALL db_idx64_update($0, (int_64)0, ($6 + [168]))
	$8 = [8]
	goto $label$4 
	
.LABEL $label$38
	$4 = [1]
	$8 = [0]
	goto $label$4 
	
.LABEL $label$37
	CALL $21(($6 + [16]))
	if ( $4 ){ goto $label$20 }
	$8 = [1]
	goto $label$4 
	
.LABEL $label$36
	$0 = *($6 + [20])
	if ( ((int_32)$0 != (int_32)*($6 + [12])) ){ goto $label$18 }
	$8 = [10]
	goto $label$4 
	
.LABEL $label$35
	if ( $4 ){ goto $label$14 }
	$8 = [11]
	goto $label$4 
	
.LABEL $label$34
	*($6 + [100]) = ($6 + [88])
	*($6 + [96]) = ($6 + [32])
	*($6 + [104]) = ($6 + [80])
	*($6 + [108]) = ($6 + [72])
	*($6 + [112]) = ($6 + [76])
	*($6 + [168]) = $2
	CALL eosio_assert(((int_64)*($6 + [32]) == (int_64)CALL $fimport$3()), [9992])
	*($6 + [140]) = ($6 + [96])
	*($6 + [136]) = ($6 + [32])
	*($6 + [144]) = ($6 + [168])
	*(($0 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($0 + [32]) = ($6 + [32])
	CALL $22(($6 + [136]), $0)
	*($6 + [160]) = $0
	$3 = *($0)
	*($6 + [136]) = $3
	$5 = *($0 + [36])
	*($6 + [152]) = $5
	$7 = ($6 + [60])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($6 + [64]))) ){ goto $label$13 }
	$8 = [24]
	goto $label$4 
	
.LABEL $label$33
	*($4 + [8]) = $3
	*($4 + [16]) = $5
	*($6 + [160]) = [0]
	*($4) = $0
	*($7) = ($4 + [24])
	$0 = *($6 + [160])
	*($6 + [160]) = [0]
	if ( $0 ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$32
	CALL $23(($6 + [56]), ($6 + [160]), ($6 + [136]), ($6 + [152]))
	$0 = *($6 + [160])
	*($6 + [160]) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	$8 = [13]
	goto $label$4 
	
.LABEL $label$31
	CALL _ZdlPv($0)
	$8 = [14]
	goto $label$4 
	
.LABEL $label$30
	$5 = *($6 + [56])
	if ( ($5 == 0) ){ goto $label$9 }
	$8 = [15]
	goto $label$4 
	
.LABEL $label$29
	$7 = ($6 + [60])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$8 }
	$8 = [16]
	goto $label$4 
	
.LABEL $label$28
	$8 = [17]
	goto $label$4 
	
.LABEL $label$27
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	$8 = [18]
	goto $label$4 
	
.LABEL $label$26
	CALL _ZdlPv($4)
	$8 = [19]
	goto $label$4 
	
.LABEL $label$25
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$7 }
	$8 = [20]
	goto $label$4 
	
.LABEL $label$24
	$0 = *(($6 + [56]))
	goto $label$5 
	
.LABEL $label$23
	$0 = $5
	$8 = [21]
	goto $label$4 
	
.LABEL $label$22
	*($7) = $5
	CALL _ZdlPv($0)
	$8 = [22]
	goto $label$4 
	
.LABEL $label$21
	$global$0 = ($6 + [176])
	return 
	
.LABEL $label$20
	$8 = [10]
	goto $label$4 
	
.LABEL $label$19
	$8 = [0]
	goto $label$4 
	
.LABEL $label$18
	$8 = [2]
	goto $label$4 
	
.LABEL $label$17
	$8 = [5]
	goto $label$4 
	
.LABEL $label$16
	$8 = [8]
	goto $label$4 
	
.LABEL $label$15
	$8 = [7]
	goto $label$4 
	
.LABEL $label$14
	$8 = [14]
	goto $label$4 
	
.LABEL $label$13
	$8 = [12]
	goto $label$4 
	
.LABEL $label$12
	$8 = [14]
	goto $label$4 
	
.LABEL $label$11
	$8 = [14]
	goto $label$4 
	
.LABEL $label$10
	$8 = [13]
	goto $label$4 
	
.LABEL $label$9
	$8 = [22]
	goto $label$4 
	
.LABEL $label$8
	$8 = [23]
	goto $label$4 
	
.LABEL $label$7
	$8 = [17]
	goto $label$4 
	
.LABEL $label$6
	$8 = [19]
	goto $label$4 
	
.LABEL $label$5
	$8 = [21]
	goto $label$4 
	$8
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9)
{
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	$10 = ($global$0 - [256])
	$global$0 = $10
	*($10 + [240]) = $2
	*($10 + [248]) = $1
	*($10 + [232]) = $3
	*($10 + [228]) = $4
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$1 }
	CALL eosio_assert([0], [9510])
	
.LABEL $label$1
	*(($10 + [216])) = [0]
	*($10 + [192]) = $2
	*($10 + [200]) = (int_64)-1
	*($10 + [208]) = (int_64)0
	*($10 + [220]) = [0]
	*($10 + [184]) = *($0)
	$12 = *($8 + [4])
	$11 = *($8)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$7 }
	if ( ($7 == 0) ){ goto $label$8 }
	$13 = (($10 + [152]) | [1])
	$14 = (($10 + [168]) + [8])
	
.LOOP $label$9:
	$15 = CALL $7(($10 + [184]), *($11), [9534])
	*($14) = (int_64)1111838212
	$2 = ((int_64)((int_64)*($15 + [24]) * (int_64)*($15 + [32])) * (int_64)100)
	*($10 + [168]) = $2
	$1 = *($0)
	$16 = *($10 + [248])
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9122])
	$2 = (int_64)4343118
	$8 = [0]
	
.LOOP $label$11:
	$17 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$2 = $3
	$17 = [1]
	$4 = $8
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$2 = $3
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$8 < (int_32)[6])
	$18 = ($8 + [1])
	$8 = $18
	if ( $4 ){ goto $label$13 }
	$17 = [1]
	$8 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$11 }
	
.LABEL $label$10
	CALL eosio_assert($17, [9171])
	*(($18 = (($10 + [152]) + [8]))) = [0]
	*($10 + [152]) = (int_64)0
	$8 = CALL $105([8212])
	if ( ((uint_32)$8 > (uint_32)[-17]) ){ goto $label$6 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$16 }
	*($10 + [152]) = ($8 << [1])
	$4 = $13
	if ( $8 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$17 = (($8 + [16]) & [-16])
	$4 = CALL _Znwj($17)
	*($18) = $4
	*($10 + [152]) = ($17 | [1])
	*($10 + [156]) = $8
	
.LABEL $label$15
	CALL memcpy($4, [8212], $8)
	
.LABEL $label$14
	*(($4 + $8)) = [0]
	*((($10 + [16]) + [8])) = *($14)
	*($10 + [16]) = *($10 + [168])
	CALL $10($8, $1, $16, ($10 + [16]), ($10 + [152]))
	if ( ((*($10 + [152]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($18))
	
.LABEL $label$17
	CALL $24(($10 + [184]), $15)
	$11 = ($11 + [8])
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	
.LOOP $label$18:
	CALL $24(($10 + [184]), CALL $7(($10 + [184]), *($11), [9534]))
	$11 = ($11 + [8])
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$18 }
	
.LABEL $label$7
	if ( ($7 == 0) ){ goto $label$31 }
	*(($10 + [144])) = [0]
	*($10 + [128]) = (int_64)-1
	*($10 + [136]) = (int_64)0
	*($10 + [148]) = [0]
	*($10 + [112]) = *($0)
	*($10 + [120]) = *($10 + [240])
	*($10 + [104]) = ($10 + [112])
	CALL $18(($10 + [96]), ($10 + [104]), ($10 + [248]))
	CALL $19(($10 + [88]), ($10 + [104]), ($10 + [248]))
	$8 = *($10 + [100])
	if ( ((int_32)$8 == (int_32)*($10 + [92])) ){ goto $label$32 }
	
.LOOP $label$33:
	if ( ((int_32)*($8 + [28]) == (int_32)[1]) ){ goto $label$30 }
	CALL $21(($10 + [96]))
	$8 = *($10 + [100])
	if ( ((int_32)$8 != (int_32)*($10 + [92])) ){ goto $label$33 }
	
.LABEL $label$32
	CALL eosio_assert([0], [9556])
	$18 = *($10 + [136])
	if ( $18 ){ goto $label$24 }
	goto $label$4 
	
.LABEL $label$31
	if ( $5 ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$29 }
	$8 = *($10 + [228])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$34 }
	CALL eosio_assert([1], [9572])
	$8 = *($10 + [228])
	
.LABEL $label$34
	*($10 + [80]) = (int_64)1111838212
	$2 = ((int_64)((int_64)*($10 + [232]) * (int_64)(CASTING uint_64)(uint_32 $8)) * (int_64)100)
	*($10 + [72]) = $2
	$1 = *($0)
	$16 = *($10 + [248])
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9122])
	$2 = (int_64)4343118
	$8 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$36 }
	$2 = $3
	$4 = [1]
	$18 = $8
	$8 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$35 }
	goto $label$27 
	
.LABEL $label$36
	$2 = $3
	
.LOOP $label$37:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$8 < (int_32)[6])
	$18 = ($8 + [1])
	$8 = $18
	if ( $4 ){ goto $label$37 }
	$4 = [1]
	$8 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$35 }
	goto $label$27 
	
.LABEL $label$30
	$2 = *($10 + [96])
	$8 = ($9 - *($10 + [228]))
	if ( ((uint_32)*($8 + [24]) <= (uint_32)$8) ){ goto $label$26 }
	*($10 + [32]) = $8
	$8 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$8) != (int_32)[0]), [9769])
	CALL $25(*($10 + [104]), $8, (int_64)0, ($10 + [32]))
	CALL $21(($10 + [96]))
	goto $label$25 
	
.LABEL $label$29
	*(($10 + [144])) = [0]
	*($10 + [128]) = (int_64)-1
	$2 = (int_64)0
	*($10 + [136]) = (int_64)0
	*($10 + [148]) = [0]
	$3 = *($0)
	*($10 + [112]) = $3
	$1 = *($10 + [240])
	*($10 + [120]) = $1
	$8 = CALL db_lowerbound_i64($3, $1, (int_64)4292915607302569984, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$20 }
	CALL $26(($10 + [112]), $8)
	*($10 + [36]) = [0]
	*($10 + [32]) = ($10 + [112])
	$2 = *(*(CALL $27(($10 + [32])) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$8 = (uint_64)($2 <= (int_64)-2)
	goto $label$19 
	
.LABEL $label$28
	$4 = [0]
	
.LABEL $label$27
	CALL eosio_assert($4, [9171])
	*(($10 + [64])) = [0]
	*($10 + [56]) = (int_64)0
	$8 = CALL $105([9593])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$23 }
	*($10 + [56]) = ($8 << [1])
	$4 = (($10 + [56]) | [1])
	if ( $8 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$26
	*($10 + [32]) = $2
	$8 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$8) != (int_32)[0]), [9804])
	CALL $21(($10 + [32]))
	CALL $28(*($10 + [104]), $8)
	*($10 + [96]) = *($10 + [32])
	
.LABEL $label$25
	CALL eosio_assert([1], [9556])
	$18 = *($10 + [136])
	if ( ($18 == 0) ){ goto $label$4 }
	
.LABEL $label$24
	$17 = ($10 + [140])
	$8 = *($17)
	if ( ((int_32)$8 == (int_32)$18) ){ goto $label$39 }
	
.LOOP $label$40:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$41 }
	CALL _ZdlPv($4)
	
.LABEL $label$41
	if ( ((int_32)$18 != (int_32)$8) ){ goto $label$40 }
	$8 = *(($10 + [136]))
	goto $label$38 
	
.LABEL $label$39
	$8 = $18
	
.LABEL $label$38
	*($17) = $18
	CALL _ZdlPv($8)
	goto $label$4 
	
.LABEL $label$23
	$18 = (($8 + [16]) & [-16])
	$4 = CALL _Znwj($18)
	*($10 + [56]) = ($18 | [1])
	*($10 + [64]) = $4
	*($10 + [60]) = $8
	
.LABEL $label$22
	CALL memcpy($4, [9593], $8)
	
.LABEL $label$21
	*(($4 + $8)) = [0]
	*(($10 + [8])) = *((($10 + [72]) + [8]))
	*($10) = *($10 + [72])
	CALL $10($8, $1, $16, $10, ($10 + [56]))
	if ( ((*($10 + [56]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($10 + [64]))
	$18 = *($10 + [208])
	if ( $18 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$20
	$8 = [1]
	
.LABEL $label$19
	*(($4 = ($10 + [128]))) = $2
	CALL eosio_assert($8, [9838])
	*($10 + [96]) = *($4)
	$2 = *($10 + [248])
	*($10 + [36]) = ($10 + [240])
	*($10 + [32]) = ($10 + [96])
	*($10 + [40]) = ($10 + [248])
	*($10 + [44]) = ($10 + [232])
	*($10 + [48]) = ($10 + [228])
	CALL $29(($10 + [88]), ($10 + [112]), $2, ($10 + [32]))
	$18 = *($10 + [136])
	if ( ($18 == 0) ){ goto $label$4 }
	$17 = ($10 + [140])
	$8 = *($17)
	if ( ((int_32)$8 == (int_32)$18) ){ goto $label$42 }
	
.LOOP $label$43:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$44 }
	CALL _ZdlPv($4)
	
.LABEL $label$44
	if ( ((int_32)$18 != (int_32)$8) ){ goto $label$43 }
	$8 = *(($10 + [136]))
	*($17) = $18
	CALL _ZdlPv($8)
	$18 = *($10 + [208])
	if ( $18 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$42
	*($17) = $18
	CALL _ZdlPv($18)
	$18 = *($10 + [208])
	if ( $18 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	CALL $96(($10 + [152]))
	
.LABEL $label$5
	CALL $96(($10 + [56]))
	
.LABEL $label$4
	$18 = *($10 + [208])
	if ( ($18 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$17 = ($10 + [212])
	$8 = *($17)
	if ( ((int_32)$8 == (int_32)$18) ){ goto $label$46 }
	
.LOOP $label$47:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$48 }
	CALL _ZdlPv($4)
	
.LABEL $label$48
	if ( ((int_32)$18 != (int_32)$8) ){ goto $label$47 }
	$8 = *(($10 + [208]))
	goto $label$45 
	
.LABEL $label$46
	$8 = $18
	
.LABEL $label$45
	*($17) = $18
	CALL _ZdlPv($8)
	
.LABEL $label$2
	$global$0 = ($10 + [256])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9094])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $108($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	*($5 + [16]) = (int_64)0
	CALL $71(($3 + [32]), $5)
	*($5 + [56]) = [-1]
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $72(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $111($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9348])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9348])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-4373710607929573376, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [9043])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $39($7, CALL $fimport$8(*($7), *($7 + [8]), (int_64)-4373710607929573376, $6))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [9043])
	
.LABEL $label$2
	*(($4 + [40])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)-4373710607929573376, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [9043])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $39($7, CALL $fimport$8(*($7), *($7 + [8]), (int_64)-4373710607929573376, $6))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [9043])
	
.LABEL $label$2
	*(($4 + [40])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$9 }
	if ( ((int_64)$2 > (int_64)4730614989335822335) ){ goto $label$8 }
	if ( ((int_64)$2 > (int_64)3900117277302849535) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-5001342339331915776) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4994130327958978560) ){ goto $label$1 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [1]
	*($3 + [56]) = *($3 + [96])
	CALL $59($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [160]) = [8928]
	*($3 + [164]) = CALL $105([8928])
	*($3 + [80]) = *($3 + [160])
	CALL $14(($3 + [168]), ($3 + [80]))
	if ( ((int_64)$1 != (int_64)-7309438285644650704) ){ goto $label$1 }
	*($3 + [160]) = [8572]
	*($3 + [164]) = CALL $105([8572])
	*($3 + [72]) = *($3 + [160])
	CALL $14(($3 + [168]), ($3 + [72]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [2]
	*($3 + [64]) = *($3 + [88])
	CALL $60($0, (int_64)-7309438285644650704, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 > (int_64)4730614995480221071) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)4730614989335822336) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)4730614989701251072) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [3]
	*($3 + [40]) = *($3 + [112])
	CALL $61($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)3900117277302849536) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)4292493394837504000) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [4]
	*($3 + [16]) = *($3 + [136])
	CALL $62($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)4730614995480221072) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)5031766162266658192) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [5]
	*($3) = *($3 + [152])
	CALL $63($1, $1, $3)
	goto $label$1 
	
.LABEL $label$5
	*($3 + [108]) = [0]
	*($3 + [104]) = [6]
	*($3 + [48]) = *($3 + [104])
	CALL $64($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [124]) = [0]
	*($3 + [120]) = [7]
	*($3 + [32]) = *($3 + [120])
	CALL $61($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [132]) = [0]
	*($3 + [128]) = [8]
	*($3 + [24]) = *($3 + [128])
	CALL $62($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [148]) = [0]
	*($3 + [144]) = [9]
	*($3 + [8]) = *($3 + [144])
	CALL $65($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $103([0])
	$global$0 = ($3 + [176])
}

int_32 .FUNC $59 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $108($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [56]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9117])
	CALL memcpy(($4 + [40]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9117])
	CALL memcpy((($4 + [40]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[16]), [9117])
	CALL memcpy((($4 + [40]) + [16]), ($2 + [16]), [4])
	*((($4 + [8]) + [20])) = ($2 + [20])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [56])
	$0 = *($4 + [48])
	$1 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $111($2)
	
.LABEL $label$5
	$global$0 = ($4 + [64])
	return [1]
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$8 = ($global$0 - [144])
	$global$0 = $8
	*($8 + [88]) = $6
	*($8 + [96]) = $1
	*($8 + [87]) = $4
	*($8 + [80]) = $7
	CALL require_auth($1)
	$9 = *($2)
	if ( ($9 & [1]) ){ goto $label$3 }
	$10 = uint_32($9 >> [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	$10 = *($2 + [4])
	if ( ((uint_32)$10 >= (uint_32)[255]) ){ goto $label$1 }
	
.LABEL $label$2
	$9 = ((uint_32)$10 > (uint_32)[10])
	
.LABEL $label$1
	CALL eosio_assert($9, [8635])
	$10 = *($3)
	$11 = ($10 & [1])
	if ( $11 ){ goto $label$6 }
	$9 = [0]
	if ( ((uint_32)uint_32($10 >> [1]) > (uint_32)[31]) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$9 = [0]
	if ( ((uint_32)*($3 + [4]) > (uint_32)[31]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( $11 ){ goto $label$8 }
	$9 = uint_32($10 >> [1])
	goto $label$7 
	
.LABEL $label$8
	$9 = *($3 + [4])
	
.LABEL $label$7
	$9 = ((int_32)$9 != (int_32)[0])
	
.LABEL $label$4
	CALL eosio_assert($9, [8679])
	CALL eosio_assert(((($4 + [-1]) & [255]) <= [3]), [8722])
	$4 = *($5)
	if ( ($4 & [1]) ){ goto $label$10 }
	$4 = uint_32($4 >> [1])
	goto $label$9 
	
.LABEL $label$10
	$4 = *($5 + [4])
	
.LABEL $label$9
	CALL eosio_assert(($4 <= [47]), [8733])
	CALL eosio_assert(CALL eosio_assert6($6), [8755])
	CALL eosio_assert(((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$2() / (uint_64)(int_64)1000000)) <= $7), [8782])
	*(($7 = ($8 + [72]))) = [0]
	*($8 + [56]) = (int_64)-1
	*($8 + [64]) = (int_64)0
	$6 = *($0)
	*($8 + [40]) = $6
	*($8 + [48]) = $6
	$4 = CALL db_lowerbound_i64($6, $6, (int_64)-7949128877345865728, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	CALL $42(($8 + [40]), $4)
	*($8 + [4]) = [0]
	*($8) = ($8 + [40])
	$1 = *(*(CALL $52($8) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$4 = (uint_64)($6 <= (int_64)-2)
	$1 = *($8 + [96])
	goto $label$11 
	
.LABEL $label$12
	$4 = [1]
	$6 = (int_64)0
	
.LABEL $label$11
	*(($9 = ($8 + [56]))) = $6
	CALL eosio_assert($4, [9838])
	*($8 + [32]) = *($9)
	*($8 + [12]) = $2
	*($8 + [16]) = $3
	*($8 + [24]) = $5
	*($8 + [4]) = ($8 + [96])
	*($8) = ($8 + [32])
	*($8 + [8]) = ($8 + [88])
	*($8 + [20]) = ($8 + [87])
	*($8 + [28]) = ($8 + [80])
	*($8 + [136]) = $1
	CALL eosio_assert(((int_64)*($8 + [40]) == (int_64)CALL $fimport$3()), [9992])
	*($8 + [116]) = $8
	*($8 + [112]) = ($8 + [40])
	*($8 + [120]) = ($8 + [136])
	*(($3 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [52 align=4]) = (int_64)0
	*($3 + [60]) = [0]
	*($3 + [76]) = ($8 + [40])
	CALL $53(($8 + [112]), $3)
	*($8 + [128]) = $3
	$1 = *($3)
	*($8 + [112]) = $1
	$2 = *($3 + [80])
	*($8 + [108]) = $2
	$4 = ($8 + [68])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*($7)) ){ goto $label$15 }
	*($5 + [8]) = $1
	*($5 + [16]) = $2
	*($8 + [128]) = [0]
	*($5) = $3
	*($4) = ($5 + [24])
	$3 = *($8 + [128])
	*($8 + [128]) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	CALL $54(($8 + [64]), ($8 + [128]), ($8 + [112]), ($8 + [108]))
	$3 = *($8 + [128])
	*($8 + [128]) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($3 + [52]) & [1]) ){ goto $label$20 }
	if ( (*($3 + [36]) & [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*(($3 + [44])))
	if ( (*($3 + [24]) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$16
	CALL _ZdlPv($3)
	
.LABEL $label$13
	CALL $4(($8 + [64]))
	$global$0 = ($8 + [144])
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [80]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9944])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-7949128877345865728)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9890])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9890])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $42(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	$4 = *($0)
	CALL $98(($1 + [24]), *($3 + [12]))
	CALL $98(($1 + [36]), *($3 + [16]))
	*($1 + [48]) = *(*($3 + [20]))
	CALL $98(($1 + [52]), *($3 + [24]))
	*($1 + [64]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [72]) = [1]
	*($1 + [68]) = *(*($3 + [28]))
	*(($3 = $2)) = [0]
	CALL $85($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $108($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $86($3, $1)
	$6 = *($1)
	*($1 + [80]) = CALL db_store_i64(*($4 + [8]), (int_64)-7949128877345865728, *(*($0 + [8])), $6, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($4 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $111($2)
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $83(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9)
{
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	$10 = ($global$0 - [256])
	$global$0 = $10
	*($10 + [240]) = $2
	*($10 + [248]) = $1
	*($10 + [232]) = $3
	*($10 + [228]) = $4
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$1 }
	CALL eosio_assert([0], [9510])
	
.LABEL $label$1
	*(($10 + [216])) = [0]
	*($10 + [192]) = $2
	*($10 + [200]) = (int_64)-1
	*($10 + [208]) = (int_64)0
	*($10 + [220]) = [0]
	*($10 + [184]) = *($0)
	$12 = *($8 + [4])
	$11 = *($8)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$7 }
	if ( ($7 == 0) ){ goto $label$8 }
	$13 = (($10 + [152]) | [1])
	$14 = (($10 + [168]) + [8])
	
.LOOP $label$9:
	$15 = CALL $33(($10 + [184]), *($11), [9534])
	*($14) = (int_64)1111838212
	$2 = ((int_64)((int_64)*($15 + [24]) * (int_64)*($15 + [32])) * (int_64)100)
	*($10 + [168]) = $2
	$1 = *($0)
	$16 = *($10 + [248])
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9122])
	$2 = (int_64)4343118
	$8 = [0]
	
.LOOP $label$11:
	$17 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$2 = $3
	$17 = [1]
	$4 = $8
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$2 = $3
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$8 < (int_32)[6])
	$18 = ($8 + [1])
	$8 = $18
	if ( $4 ){ goto $label$13 }
	$17 = [1]
	$8 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$11 }
	
.LABEL $label$10
	CALL eosio_assert($17, [9171])
	*(($18 = (($10 + [152]) + [8]))) = [0]
	*($10 + [152]) = (int_64)0
	$8 = CALL $105([8212])
	if ( ((uint_32)$8 > (uint_32)[-17]) ){ goto $label$6 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$16 }
	*($10 + [152]) = ($8 << [1])
	$4 = $13
	if ( $8 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$17 = (($8 + [16]) & [-16])
	$4 = CALL _Znwj($17)
	*($18) = $4
	*($10 + [152]) = ($17 | [1])
	*($10 + [156]) = $8
	
.LABEL $label$15
	CALL memcpy($4, [8212], $8)
	
.LABEL $label$14
	*(($4 + $8)) = [0]
	*((($10 + [16]) + [8])) = *($14)
	*($10 + [16]) = *($10 + [168])
	CALL $10($8, $1, $16, ($10 + [16]), ($10 + [152]))
	if ( ((*($10 + [152]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($18))
	
.LABEL $label$17
	CALL $35(($10 + [184]), $15)
	$11 = ($11 + [8])
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	
.LOOP $label$18:
	CALL $35(($10 + [184]), CALL $33(($10 + [184]), *($11), [9534]))
	$11 = ($11 + [8])
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$18 }
	
.LABEL $label$7
	if ( ($7 == 0) ){ goto $label$31 }
	*(($10 + [144])) = [0]
	*($10 + [128]) = (int_64)-1
	*($10 + [136]) = (int_64)0
	*($10 + [148]) = [0]
	*($10 + [112]) = *($0)
	*($10 + [120]) = *($10 + [240])
	*($10 + [104]) = ($10 + [112])
	CALL $18(($10 + [96]), ($10 + [104]), ($10 + [248]))
	CALL $19(($10 + [88]), ($10 + [104]), ($10 + [248]))
	$8 = *($10 + [100])
	if ( ((int_32)$8 == (int_32)*($10 + [92])) ){ goto $label$32 }
	
.LOOP $label$33:
	if ( (*($8 + [28]) == 0) ){ goto $label$30 }
	CALL $21(($10 + [96]))
	$8 = *($10 + [100])
	if ( ((int_32)$8 != (int_32)*($10 + [92])) ){ goto $label$33 }
	
.LABEL $label$32
	CALL eosio_assert([0], [9556])
	$18 = *($10 + [136])
	if ( $18 ){ goto $label$24 }
	goto $label$4 
	
.LABEL $label$31
	if ( $5 ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$29 }
	$8 = *($10 + [228])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$34 }
	CALL eosio_assert([1], [9572])
	$8 = *($10 + [228])
	
.LABEL $label$34
	*($10 + [80]) = (int_64)1111838212
	$2 = ((int_64)((int_64)*($10 + [232]) * (int_64)(CASTING uint_64)(uint_32 $8)) * (int_64)100)
	*($10 + [72]) = $2
	$1 = *($0)
	$16 = *($10 + [248])
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9122])
	$2 = (int_64)4343118
	$8 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$36 }
	$2 = $3
	$4 = [1]
	$18 = $8
	$8 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$35 }
	goto $label$27 
	
.LABEL $label$36
	$2 = $3
	
.LOOP $label$37:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$8 < (int_32)[6])
	$18 = ($8 + [1])
	$8 = $18
	if ( $4 ){ goto $label$37 }
	$4 = [1]
	$8 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$35 }
	goto $label$27 
	
.LABEL $label$30
	$2 = *($10 + [96])
	$8 = ($9 - *($10 + [228]))
	if ( ((uint_32)*($8 + [24]) <= (uint_32)$8) ){ goto $label$26 }
	*($10 + [32]) = $8
	$8 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$8) != (int_32)[0]), [9769])
	CALL $36(*($10 + [104]), $8, (int_64)0, ($10 + [32]))
	CALL $21(($10 + [96]))
	goto $label$25 
	
.LABEL $label$29
	*(($10 + [144])) = [0]
	*($10 + [128]) = (int_64)-1
	$2 = (int_64)0
	*($10 + [136]) = (int_64)0
	*($10 + [148]) = [0]
	$3 = *($0)
	*($10 + [112]) = $3
	$1 = *($10 + [240])
	*($10 + [120]) = $1
	$8 = CALL db_lowerbound_i64($3, $1, (int_64)3900539489767915520, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$20 }
	CALL $13(($10 + [112]), $8)
	*($10 + [36]) = [0]
	*($10 + [32]) = ($10 + [112])
	$2 = *(*(CALL $37(($10 + [32])) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$8 = (uint_64)($2 <= (int_64)-2)
	goto $label$19 
	
.LABEL $label$28
	$4 = [0]
	
.LABEL $label$27
	CALL eosio_assert($4, [9171])
	*(($10 + [64])) = [0]
	*($10 + [56]) = (int_64)0
	$8 = CALL $105([9593])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$23 }
	*($10 + [56]) = ($8 << [1])
	$4 = (($10 + [56]) | [1])
	if ( $8 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$26
	*($10 + [32]) = $2
	$8 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$8) != (int_32)[0]), [9804])
	CALL $21(($10 + [32]))
	CALL $28(*($10 + [104]), $8)
	*($10 + [96]) = *($10 + [32])
	
.LABEL $label$25
	CALL eosio_assert([1], [9556])
	$18 = *($10 + [136])
	if ( ($18 == 0) ){ goto $label$4 }
	
.LABEL $label$24
	$17 = ($10 + [140])
	$8 = *($17)
	if ( ((int_32)$8 == (int_32)$18) ){ goto $label$39 }
	
.LOOP $label$40:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$41 }
	CALL _ZdlPv($4)
	
.LABEL $label$41
	if ( ((int_32)$18 != (int_32)$8) ){ goto $label$40 }
	$8 = *(($10 + [136]))
	goto $label$38 
	
.LABEL $label$39
	$8 = $18
	
.LABEL $label$38
	*($17) = $18
	CALL _ZdlPv($8)
	goto $label$4 
	
.LABEL $label$23
	$18 = (($8 + [16]) & [-16])
	$4 = CALL _Znwj($18)
	*($10 + [56]) = ($18 | [1])
	*($10 + [64]) = $4
	*($10 + [60]) = $8
	
.LABEL $label$22
	CALL memcpy($4, [9593], $8)
	
.LABEL $label$21
	*(($4 + $8)) = [0]
	*(($10 + [8])) = *((($10 + [72]) + [8]))
	*($10) = *($10 + [72])
	CALL $10($8, $1, $16, $10, ($10 + [56]))
	if ( ((*($10 + [56]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($10 + [64]))
	$18 = *($10 + [208])
	if ( $18 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$20
	$8 = [1]
	
.LABEL $label$19
	*(($4 = ($10 + [128]))) = $2
	CALL eosio_assert($8, [9838])
	*($10 + [96]) = *($4)
	$2 = *($10 + [248])
	*($10 + [36]) = ($10 + [240])
	*($10 + [32]) = ($10 + [96])
	*($10 + [40]) = ($10 + [248])
	*($10 + [44]) = ($10 + [232])
	*($10 + [48]) = ($10 + [228])
	CALL $38(($10 + [88]), ($10 + [112]), $2, ($10 + [32]))
	$18 = *($10 + [136])
	if ( ($18 == 0) ){ goto $label$4 }
	$17 = ($10 + [140])
	$8 = *($17)
	if ( ((int_32)$8 == (int_32)$18) ){ goto $label$42 }
	
.LOOP $label$43:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$44 }
	CALL _ZdlPv($4)
	
.LABEL $label$44
	if ( ((int_32)$18 != (int_32)$8) ){ goto $label$43 }
	$8 = *(($10 + [136]))
	*($17) = $18
	CALL _ZdlPv($8)
	$18 = *($10 + [208])
	if ( $18 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$42
	*($17) = $18
	CALL _ZdlPv($18)
	$18 = *($10 + [208])
	if ( $18 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	CALL $96(($10 + [152]))
	
.LABEL $label$5
	CALL $96(($10 + [56]))
	
.LABEL $label$4
	$18 = *($10 + [208])
	if ( ($18 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$17 = ($10 + [212])
	$8 = *($17)
	if ( ((int_32)$8 == (int_32)$18) ){ goto $label$46 }
	
.LOOP $label$47:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$48 }
	CALL _ZdlPv($4)
	
.LABEL $label$48
	if ( ((int_32)$18 != (int_32)$8) ){ goto $label$47 }
	$8 = *(($10 + [208]))
	goto $label$45 
	
.LABEL $label$46
	$8 = $18
	
.LABEL $label$45
	*($17) = $18
	CALL _ZdlPv($8)
	
.LABEL $label$2
	$global$0 = ($10 + [256])
	(unreachable)
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL require_auth($1)
	$4 = [0]
	*((($3 + [40]) + [32])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$5 = *($0)
	*($3 + [40]) = $5
	*($3 + [48]) = $5
	$6 = CALL $3(($3 + [40]), $2, [8365])
	CALL eosio_assert(((uint_32)*($6 + [68]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$2() / (uint_64)(int_64)1000000))), [8418])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)$1), [8875])
	*(($3 + [32])) = [0]
	*($3 + [8]) = $2
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	*($3 + [36]) = [0]
	$1 = *($0)
	*($3) = $1
	$0 = CALL db_lowerbound_i64($1, $2, (int_64)-4373710607929573376, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	CALL $39($3, $0)
	goto $label$1 
	
.LABEL $label$2
	$4 = [1]
	
.LABEL $label$1
	CALL eosio_assert($4, [8902])
	CALL $57(($3 + [40]), $6)
	$4 = *($3 + [24])
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = ($3 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	CALL _ZdlPv($6)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($7) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	CALL $4(($3 + [64]))
	$global$0 = ($3 + [80])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [76])) == (int_32)$0), [9621])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9666])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9716])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [44])))
	if ( (*($3 + [24]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	if ( ((*($5 + [52]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($5 + [60])))
	if ( ((*($5 + [36]) & [1]) == 0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((*($5 + [36]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [44])))
	if ( (*($5 + [24]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$17
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$15 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [80]))
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9621])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9666])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9716])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [52]))
	$6 = *(($1 + [56]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4292915607302569984, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_32 .FUNC $110 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10124]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10128])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10124]) = [1]
	$2 = ($2 << [16])
	*([0] + [10128]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10128])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10128]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10124]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10124]) = [1]
	$3 = ($3 << [16])
	*([0] + [10128]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10128])
	
.LABEL $label$10
	*([0] + [10128]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $111 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18516])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18324]
	$3 = (((int_32)$1 * (int_32)[12]) + [18324])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [9992])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [48]) = $1
	*($3 + [16]) = (int_64)0
	CALL $76(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9621])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9666])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9716])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [36]))
	$6 = *(($1 + [40]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4373710607929573376, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $55 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL require_auth($1)
	*((($4 + [96]) + [32])) = [0]
	*($4 + [112]) = (int_64)-1
	*($4 + [120]) = (int_64)0
	$5 = *($0)
	*($4 + [96]) = $5
	*($4 + [104]) = $5
	$6 = CALL $3(($4 + [96]), $2, [8365])
	CALL eosio_assert((*($6 + [68]) <= (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$2() / (uint_64)(int_64)1000000))), [8815])
	CALL eosio_assert(((int_64)*($6 + [16]) == (int_64)$1), [8839])
	*((($4 + [56]) + [32])) = [0]
	*($4 + [64]) = $2
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	*($4 + [92]) = [0]
	$1 = *($0)
	*($4 + [56]) = $1
	$6 = CALL db_lowerbound_i64($1, $2, (int_64)-4373710607929573376, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = (($4 + [24]) | [1])
	$8 = CALL $39(($4 + [56]), $6)
	$9 = (($4 + [40]) + [8])
	
.LOOP $label$3:
	if ( ((int_32)*($8 + [28]) != (int_32)$3) ){ goto $label$4 }
	$5 = *($8 + [8])
	*($9) = (int_64)1111838212
	*($4 + [40]) = (CASTING uint_64)(uint_32 ((int_32)*($8 + [24]) * (int_32)[10000]))
	$10 = *($0)
	CALL eosio_assert([1], [9122])
	$2 = (int_64)4343118
	$6 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$2 = $1
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$2 = $1
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$9 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$11 = [0]
	
.LABEL $label$5
	CALL eosio_assert($11, [9171])
	*(($12 = (($4 + [24]) + [8]))) = [0]
	*($4 + [24]) = (int_64)0
	$6 = CALL $105([8867])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$12 }
	*($4 + [24]) = ($6 << [1])
	$11 = $7
	if ( $6 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$13 = (($6 + [16]) & [-16])
	$11 = CALL _Znwj($13)
	*($12) = $11
	*($4 + [24]) = ($13 | [1])
	*($4 + [28]) = $6
	
.LABEL $label$11
	CALL memcpy($11, [8867], $6)
	
.LABEL $label$10
	*(($11 + $6)) = [0]
	*((($4 + [8]) + [8])) = *($9)
	*($4 + [8]) = *($4 + [40])
	CALL $10($6, $10, $5, ($4 + [8]), ($4 + [24]))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$4
	$6 = [0]
	$11 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($11, [9804])
	CALL eosio_assert($11, [10043])
	$11 = CALL db_next_i64(*($8 + [36]), ($4 + [136]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$13 }
	$6 = CALL $39(($4 + [56]), $11)
	
.LABEL $label$13
	CALL $28(($4 + [56]), $8)
	$8 = $6
	if ( $6 ){ goto $label$3 }
	
.LABEL $label$2
	$12 = *($4 + [80])
	if ( ($12 == 0) ){ goto $label$14 }
	$8 = ($4 + [84])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = ($6 + [-24])
	$11 = *($6)
	*($6) = [0]
	if ( ($11 == 0) ){ goto $label$18 }
	CALL _ZdlPv($11)
	
.LABEL $label$18
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$17 }
	$6 = *(($4 + [80]))
	goto $label$15 
	
.LABEL $label$16
	$6 = $12
	
.LABEL $label$15
	*($8) = $12
	CALL _ZdlPv($6)
	
.LABEL $label$14
	CALL $4(($4 + [120]))
	$global$0 = ($4 + [144])
	return (unreachable)
	
.LABEL $label$1
	CALL $96(($4 + [24]))
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $108($1)
	
.LABEL $label$2
	*(CALL $102()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $108(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $111($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $106 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $102())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $107($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10043])
	$2 = *($0 + [4])
	$3 = *($2 + [40])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-4373710607929573376, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [40]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$6), [9043])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $39($6, CALL $fimport$8(*($6), *($6 + [8]), (int_64)-4373710607929573376, $5))
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$6), [9043])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [40])) = $4
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9348])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9348])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9348])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [9348])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [9348])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-4373710607929573376, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $39($6, $8)
	*($3 + [12]) = [0]
	*($3 + [8]) = $6
	$7 = *(*(CALL $79(($3 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9838])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [28]) = *(*($5 + [12]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = *(*($5 + [16]))
	$6 = $2
	$5 = ($6 + [-32])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	CALL $20(($3 + [8]), $1)
	$7 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-4373710607929573376, *(*($0 + [8])), $7, $5, [32])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$7 = *(($4 + [8]))
	$9 = *(*(($0 + [8])))
	$10 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [40]) = CALL db_idx64_store($7, (int_64)-4373710607929573376, $9, $10, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9354])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9400])
	*($1 + [24]) = (*($1 + [24]) - *($3))
	*($4 + [56]) = *($1 + [8])
	$5 = *($1)
	CALL eosio_assert([1], [9451])
	*($4 + [48]) = ($4 + [32])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	CALL $20(($4 + [40]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [72]) = *(($1 + [8]))
	if ( (CALL $104(($4 + [56]), ($4 + [72]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [40])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4373710607929573376, ($4 + [64]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [72]))
	
.LABEL $label$2
	$global$0 = ($4 + [80])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9621])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9666])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9716])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [52]))
	$6 = *(($1 + [56]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3900539489767915520, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_32 .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9944])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4292915607302569984)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9890])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9890])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $26(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9094])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $108($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	*($5 + [16]) = (int_64)0
	CALL $71(($3 + [32]), $5)
	*($5 + [56]) = [-1]
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $73(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $111($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $110($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8224])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9117])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9117])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9117])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9117])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $81(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9117])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9117])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9117])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9117])
	CALL memcpy(($4 + [24]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9117])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4 + [28]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [9117])
	CALL memcpy(($2 + [14]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	*($4 + [29]) = ((int_32)*($2 + [14]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $108 (int_32 $0)
{
	return CALL $109([10132], $0)
}

int_32 .FUNC $65 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $108($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9117])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9117])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $111($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $64 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $108($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [56]) + [16]))) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9117])
	CALL memcpy(($4 + [56]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [9117])
	CALL memcpy((($4 + [56]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [9117])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4 + [64])
	$0 = *($4 + [56])
	*((($4 + [96]) + [8])) = *($8)
	*($4 + [96]) = *($4 + [80])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [96]) + [8]))
	*((($4 + [112]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [96])
	*($4 + [8]) = $1
	*($4 + [112]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $111($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$5 = CALL $97($2, ($1 + [36]))
	$4 = CALL $97(($2 + [16]), ($1 + [20]))
	$3 = CALL $97(($2 + [32]), ($1 + [8]))
	CALL $87($0, *($1), $3, $4, *($1 + [32]), $5, *($1 + [48]), *($1 + [56]))
	if ( (*($5) & [1]) ){ goto $label$5 }
	if ( (*($4) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [48])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9117])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	CALL $81(*($1), ($3 + [8]))
	CALL $81(*($1), ($3 + [20]))
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9117])
	CALL memcpy(($3 + [32]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $81(*($1), ($3 + [36]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9117])
	CALL memcpy(($3 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [9117])
	CALL memcpy(($3 + [56]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

int_32 .FUNC $61 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $108($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9117])
	CALL memcpy(($4 + [40]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [9117])
	CALL memcpy((($4 + [40]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [9117])
	CALL memcpy((($4 + [40]) + [16]), ($2 + [16]), [8])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [56])
	$1 = *($4 + [48])
	$8 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $111($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

int_32 .FUNC $60 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $108($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [160]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $69(($4 + [24]), ($4 + [160]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($6 = (($4 + [144]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $70(($4 + [160]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $111($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return $2
}

int_32 .FUNC $63 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [136]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $108($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [88])) = (int_64)0
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [116])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = [0]
	*($4 + [108 align=4]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = [0]
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [176]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $66(($4 + [24]), ($4 + [176]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [144]) + [8])) = $3
	*(($6 = (($4 + [160]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [160]) = $7
	*($4 + [144]) = $7
	$3 = *($6)
	*((($4 + [176]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [160])
	*($4 + [40]) = $0
	*($4 + [176]) = $0
	*($4 + [180]) = ($4 + [136])
	*($4 + [176]) = ($4 + [24])
	CALL $67(($4 + [176]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$10 }
	$2 = [1]
	if ( (*($4 + [108]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $111($2)
	$2 = [1]
	if ( ((*($4 + [108]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [116])))
	if ( ((*($4 + [92]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($4 + [92]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [100])))
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [192])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [192])
	return $2
}

int_32 .FUNC $62 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $108($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = [0]
	*($4 + [92]) = [0]
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $68(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [96]) + [8])) = $3
	*(($8 = (($4 + [112]) + [8]))) = $3
	$9 = *($4)
	*($4 + [112]) = $9
	*($4 + [96]) = $9
	$3 = *($8)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$8 = *($4 + [93])
	$10 = *($4 + [92])
	$11 = *($4 + [88])
	$0 = *($4 + [80])
	$1 = *($4 + [72])
	$9 = *($4 + [64])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $11), (int_32 ((int_32)($10 & [255]) != (int_32)[0])), (int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $111($2)
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $101 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $103 (int_32 $0)
{
}

int_32 .FUNC $102 ()
{
	return [10116]
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $104 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $108($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10112])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $108($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $87 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = ($global$0 - [48])
	$global$0 = $8
	$0 = *($0 + [4])
	$9 = *($0 + [4])
	$10 = (*($0) + int_32($9 >> [1]))
	$0 = *($0)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($10) + $0))
	
.LABEL $label$1
	$5 = CALL $97($8, $5)
	$3 = CALL $97(($8 + [16]), $3)
	$2 = CALL $97(($8 + [32]), $2)
	CALL void $10((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_64 $7), (int_32 $0))
	if ( (*($5) & [1]) ){ goto $label$6 }
	if ( (*($3) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($2) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($8 + [48])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($2 + [8]))
	$global$0 = ($8 + [48])
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9348])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9348])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9348])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $84(CALL $84($0, ($1 + [24])), ($1 + [36]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [9348])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = CALL $84($0, ($1 + [52]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9348])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [9348])
	CALL memcpy(*($0 + [4]), ($1 + [68]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [9348])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = (*($0) + [24])
	*($0) = $2
	$3 = *($1 + [24])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *(($1 + [24]))
	$3 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$2
	$3 = *($1 + [36])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [40])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	$3 = *(($1 + [36]))
	$3 = ( *(($1 + [40])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$4
	$2 = ($2 + [1])
	*($0) = $2
	$3 = *($1 + [52])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [56])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($0) = $2
	$1 = *(($1 + [52]))
	$1 = ( *(($1 + [56])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($1 + $2)
	*($0) = $2
	
.LABEL $label$6
	*($0) = ($2 + [9])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9348])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9348])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [60])))
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [44])))
	if ( (*($1 + [24]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10073])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $15($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9117])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $82($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $100($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $100($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $96($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9117])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9117])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9117])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $81(CALL $81($0, ($1 + [24])), ($1 + [36]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9117])
	CALL memcpy(($1 + [48]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = CALL $81($0, ($1 + [52]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9117])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9117])
	CALL memcpy(($1 + [68]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [9117])
	CALL memcpy(($1 + [72]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $97(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $97(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9117])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9117])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9117])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9117])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9117])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9117])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [32]) = *(*($3 + [16]))
	*($1 + [24]) = *(*($3 + [12]))
	$3 = *($0)
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($2 + [64]) = ($2 + [44])
	*($2 + [60]) = $2
	*($2 + [56]) = $2
	CALL $8(($2 + [56]), $1)
	$4 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($3 + [8]), (int_64)4292915607302569984, *(*($0 + [8])), $4, $2, [44])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$4 = *(($3 + [8]))
	$5 = *(*(($0 + [8])))
	$6 = *($1)
	*($2 + [72]) = *(($1 + [24]))
	*($1 + [56]) = CALL db_idx64_store($4, (int_64)4292915607302569984, $5, $6, ($2 + [72]))
	$global$0 = ($2 + [80])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [32]) = *(*($3 + [16]))
	*($1 + [24]) = *(*($3 + [12]))
	$3 = *($0)
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($2 + [64]) = ($2 + [44])
	*($2 + [60]) = $2
	*($2 + [56]) = $2
	CALL $8(($2 + [56]), $1)
	$4 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($3 + [8]), (int_64)3900539489767915520, *(*($0 + [8])), $4, $2, [44])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$4 = *(($3 + [8]))
	$5 = *(*(($0 + [8])))
	$6 = *($1)
	*($2 + [72]) = *(($1 + [24]))
	*($1 + [56]) = CALL db_idx64_store($4, (int_64)3900539489767915520, $5, $6, ($2 + [72]))
	$global$0 = ($2 + [80])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9348])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9348])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9348])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9094])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $108($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($5 + [8]) = (int_64)0
	CALL $78(($3 + [32]), $5)
	*($5 + [40]) = [-1]
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $23(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $111($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9354])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9400])
	*($1 + [24]) = (*($1 + [24]) - *($3))
	*($4 + [56]) = *($1 + [8])
	$5 = *($1)
	CALL eosio_assert([1], [9451])
	*($4 + [48]) = ($4 + [32])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	CALL $20(($4 + [40]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [72]) = *(($1 + [8]))
	if ( (CALL $104(($4 + [56]), ($4 + [72]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [40])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4373710607929573376, ($4 + [64]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [72]))
	
.LABEL $label$2
	$global$0 = ($4 + [80])
}

int_32 .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9944])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)3900539489767915520)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9890])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9890])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $13(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9117])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9117])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9117])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9117])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9117])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9944])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4373710607929573376)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9890])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9890])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $39(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = (int_64)0
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$3 = *($2 + [56])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$3 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)4292915607302569984, $1, *($2))
	*(*(($0 + [4])) + [56]) = $3
	
.LABEL $label$3
	$4 = CALL db_idx64_previous($3, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8995])
	goto $label$1 
	
.LABEL $label$2
	$2 = *(*($0))
	$2 = CALL db_idx64_end(*($2), *($2 + [8]), (int_64)4292915607302569984)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8941])
	$4 = CALL db_idx64_previous($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8941])
	
.LABEL $label$1
	$5 = *($1 + [8])
	$3 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$7:
	$2 = ($3 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$6 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [9043])
	goto $label$4 
	
.LABEL $label$5
	$8 = CALL $26($6, CALL $fimport$8(*($6), *($6 + [8]), (int_64)4292915607302569984, $5))
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [9043])
	
.LABEL $label$4
	*(($0 + [4])) = $8
	*(($8 + [56])) = $4
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$0), [9043])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4292915607302569984, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $26($0, $4)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$0), [9043])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	$7 = ($global$0 - [304])
	$global$0 = $7
	CALL require_auth($1)
	$8 = [0]
	CALL $2($0, $1, $2, $3, $4, $6, [0])
	*((($7 + [208]) + [32])) = [0]
	*($7 + [224]) = (int_64)-1
	*($7 + [232]) = (int_64)0
	$9 = *($0)
	*($7 + [208]) = $9
	*($7 + [216]) = $9
	$10 = CALL $3(($7 + [208]), $2, [8365])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8388])
	CALL eosio_assert(((uint_32)*($10 + [68]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$2() / (uint_64)(int_64)1000000))), [8418])
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)-1) <= (int_64)99), [8441])
	CALL $4((($7 + [208]) + [24]))
	*((($7 + [168]) + [32])) = [0]
	*($7 + [176]) = $2
	*($7 + [184]) = (int_64)-1
	*($7 + [192]) = (int_64)0
	*($7 + [204]) = [0]
	*($7 + [168]) = *($0)
	*($7 + [160]) = ($7 + [168])
	*($7 + [152]) = [0]
	*($7 + [144]) = (int_64)0
	*((($7 + [120]) + [8])) = [0]
	*(($11 = (($7 + [120]) + [16]))) = [0]
	*($7 + [124]) = ($7 + [160])
	*($7 + [132]) = ($7 + [160])
	*($7 + [208]) = (int_64)0
	CALL $31(($7 + [264]), ($7 + [160]), ($7 + [208]))
	$12 = *($7 + [268])
	if ( ($12 == 0) ){ goto $label$2 }
	$13 = (int_64))((int_64)100 - $3)
	$14 = ($7 + [132])
	$15 = (($7 + [88]) | [1])
	$16 = (($7 + [56]) | [1])
	$17 = (($7 + [208]) + [44])
	$18 = (($7 + [264]) + [8])
	$19 = (($7 + [168]) + [16])
	$20 = $4
	
.LOOP $label$5:
	*($7 + [208]) = *($14)
	if ( (uint_64)(*(*(CALL $32(($7 + [208])) + [4]) + [24]) <= $13) ){ goto $label$9 }
	*($7 + [208]) = *($14)
	$8 = *(*(CALL $32(($7 + [208])) + [4]) + [32])
	*($7 + [208]) = *($14)
	$10 = *(CALL $32(($7 + [208])) + [4])
	if ( ((uint_32)$20 >= (uint_32)$8) ){ goto $label$18 }
	$8 = CALL $33(($7 + [168]), *($10), [8328])
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($7 + [168])), [9354])
	CALL eosio_assert(((int_64)*($7 + [168]) == (int_64)CALL $fimport$3()), [9400])
	*($8 + [32]) = (*($8 + [32]) - $20)
	$10 = ($8 + [24])
	*($7 + [280]) = *($10)
	$9 = *($8)
	CALL eosio_assert([1], [9451])
	*($18) = $17
	*($7 + [268]) = ($7 + [208])
	*($7 + [264]) = ($7 + [208])
	CALL $8(($7 + [264]), $8)
	CALL db_update_i64(*($8 + [52]), (int_64)0, ($7 + [208]), [44])
	if ( (uint_64)($9 <= *($19)) ){ goto $label$19 }
	*($19) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	*($7 + [296]) = *($10)
	if ( (CALL $104(($7 + [280]), ($7 + [296]), [8]) == 0) ){ goto $label$20 }
	$21 = ($8 + [56])
	$8 = *($21)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$21 }
	$8 = CALL db_idx64_find_primary(*($7 + [168]), *((($7 + [168]) + [8])), (int_64)4292915607302569984, ($7 + [288]), $9)
	*($21) = $8
	
.LABEL $label$21
	CALL db_idx64_update($8, (int_64)0, ($7 + [296]))
	
.LABEL $label$20
	if ( ($6 == 0) ){ goto $label$17 }
	*(($22 = (($7 + [104]) + [8]))) = (int_64)1111838212
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $20) * (int_64)*($10)) * (int_64)100)
	*($7 + [104]) = $9
	$23 = *($0)
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9122])
	$9 = (int_64)4343118
	$8 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$24 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$9 = $24
	$10 = [1]
	$21 = $8
	$8 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$22 }
	goto $label$15 
	
.LABEL $label$23
	$9 = $24
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$21 = ($8 + [1])
	$8 = $21
	if ( $10 ){ goto $label$24 }
	$10 = [1]
	$8 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$22 }
	goto $label$15 
	
.LABEL $label$18
	$8 = *($10 + [32])
	*($7 + [208]) = *($14)
	$21 = *(CALL $32(($7 + [208])) + [4])
	$10 = *($7 + [148])
	if ( ((int_32)$10 == (int_32)*((($7 + [144]) + [8]))) ){ goto $label$14 }
	*($10) = *($21)
	*($7 + [148]) = ($10 + [8])
	goto $label$13 
	
.LABEL $label$17
	$10 = [0]
	$22 = [1]
	$8 = $20
	goto $label$7 
	
.LABEL $label$16
	$10 = [0]
	
.LABEL $label$15
	CALL eosio_assert($10, [9171])
	*(($25 = (($7 + [88]) + [8]))) = [0]
	*($7 + [88]) = (int_64)0
	$8 = CALL $105([8212])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$12 }
	*($7 + [88]) = ($8 << [1])
	$21 = $15
	if ( $8 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$14
	CALL $9(($7 + [144]), $21)
	
.LABEL $label$13
	*($7 + [208]) = *($14)
	$10 = *(*(CALL $32(($7 + [208])) + [4]) + [32])
	*($7 + [208]) = *($14)
	$22 = ((uint_32)$20 <= (uint_32)$10)
	$10 = ($20 - *(*(CALL $32(($7 + [208])) + [4]) + [32]))
	if ( $6 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$12
	$10 = (($8 + [16]) & [-16])
	$21 = CALL _Znwj($10)
	*($25) = $21
	*($7 + [88]) = ($10 | [1])
	*($7 + [92]) = $8
	
.LABEL $label$11
	CALL memcpy($21, [8212], $8)
	
.LABEL $label$10
	$10 = [0]
	*(($21 + $8)) = [0]
	*((($7 + [24]) + [8])) = *($22)
	*($7 + [24]) = *($7 + [104])
	CALL $10($8, $23, $1, ($7 + [24]), ($7 + [88]))
	$22 = [1]
	if ( (*($7 + [88]) & [1]) ){ goto $label$25 }
	$8 = $20
	if ( ($6 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$25
	CALL _ZdlPv(*($25))
	$8 = $20
	if ( ($6 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$22 = [0]
	goto $label$4 
	
.LABEL $label$8
	CALL $96(($7 + [88]))
	
.LABEL $label$7
	CALL $11($0, $1, $1, $2, $8, [1])
	
.LABEL $label$6
	$20 = $10
	*($7 + [208]) = *($14)
	CALL $11($0, *(*(CALL $32(($7 + [208])) + [4]) + [16]), $1, $2, $8, [0])
	*($7 + [208]) = *($14)
	if ( ((uint_64)*(*(CALL $32(($7 + [208])) + [4]) + [24]) <= (uint_64)$13) ){ goto $label$26 }
	if ( $6 ){ goto $label$26 }
	*($7 + [208]) = *($14)
	$9 = *(*(CALL $32(($7 + [208])) + [4]) + [24])
	*($7 + [208]) = *($14)
	$8 = *(CALL $32(($7 + [208])) + [4])
	*(($25 = (($7 + [72]) + [8]))) = (int_64)1111838212
	$9 = ((int_64)((int_64))($9 - $13) * (int_64)*($8 + [32])) * (int_64)100
	*($7 + [72]) = $9)
	$23 = *($0)
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9122])
	$9 = (int_64)4343118
	$8 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$24 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$9 = $24
	$10 = [1]
	$21 = $8
	$8 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$30
	$9 = $24
	
.LOOP $label$31:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$21 = ($8 + [1])
	$8 = $21
	if ( $10 ){ goto $label$31 }
	$10 = [1]
	$8 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$10 = [0]
	
.LABEL $label$27
	CALL eosio_assert($10, [9171])
	*(($21 = (($7 + [56]) + [8]))) = [0]
	*($7 + [56]) = (int_64)0
	$8 = CALL $105([8348])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$34 }
	*($7 + [56]) = ($8 << [1])
	$10 = $16
	if ( $8 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$26 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($26)
	*($21) = $10
	*($7 + [56]) = ($26 | [1])
	*($7 + [60]) = $8
	
.LABEL $label$33
	CALL memcpy($10, [8348], $8)
	
.LABEL $label$32
	*(($10 + $8)) = [0]
	*((($7 + [8]) + [8])) = *($25)
	*($7 + [8]) = *($7 + [72])
	CALL $10($8, $23, $1, ($7 + [8]), ($7 + [56]))
	if ( ((*($7 + [56]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*($21))
	
.LABEL $label$26
	CALL $32($14)
	if ( (($22 | ((int_32)*($11) == (int_32)$12)) == 0) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = *($7 + [144])
	$10 = *($7 + [148])
	goto $label$1 
	
.LABEL $label$3
	CALL $96(($7 + [56]))
	
.LABEL $label$2
	$10 = [0]
	$20 = $4
	$22 = [0]
	
.LABEL $label$1
	*($7 + [48]) = [0]
	*($7 + [40]) = (int_64)0
	$8 = ($10 - $8)
	if ( ($8 == 0) ){ goto $label$36 }
	$10 = int_32($8 >> [3])
	if ( ((uint_32)$10 >= (uint_32)[536870912]) ){ goto $label$35 }
	$8 = CALL _Znwj($8)
	*(($7 + [48])) = ($8 + ($10 << [3]))
	*($7 + [40]) = $8
	*($7 + [44]) = $8
	$21 = *($7 + [144])
	$10 = (*($7 + [148]) - $21)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$36 }
	CALL memcpy($8, $21, $10)
	*($7 + [44]) = (*($7 + [44]) + $10)
	
.LABEL $label$36
	CALL $34($0, $1, $2, $3, $20, $22, $5, $6, ($7 + [40]), $4)
	$8 = *($7 + [40])
	if ( ($8 == 0) ){ goto $label$37 }
	*($7 + [44]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$37
	$8 = *($7 + [144])
	if ( ($8 == 0) ){ goto $label$38 }
	*($7 + [148]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$38
	$21 = *($7 + [192])
	if ( ($21 == 0) ){ goto $label$39 }
	$14 = ($7 + [196])
	$8 = *($14)
	if ( ((int_32)$8 == (int_32)$21) ){ goto $label$41 }
	
.LOOP $label$42:
	$8 = ($8 + [-24])
	$10 = *($8)
	*($8) = [0]
	if ( ($10 == 0) ){ goto $label$43 }
	CALL _ZdlPv($10)
	
.LABEL $label$43
	if ( ((int_32)$21 != (int_32)$8) ){ goto $label$42 }
	$8 = *(($7 + [192]))
	goto $label$40 
	
.LABEL $label$41
	$8 = $21
	
.LABEL $label$40
	*($14) = $21
	CALL _ZdlPv($8)
	
.LABEL $label$39
	$global$0 = ($7 + [304])
	return (unreachable)
	
.LABEL $label$35
	CALL $101(($7 + [40]))
	(unreachable)
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4292915607302569984, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [9043])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $26($7, CALL $fimport$8(*($7), *($7 + [8]), (int_64)4292915607302569984, $6))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [9043])
	
.LABEL $label$2
	*(($4 + [56])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}